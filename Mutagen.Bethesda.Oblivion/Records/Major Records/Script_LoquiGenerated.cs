/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Script : MajorRecord, IScript, ILoquiObjectSetter, IEquatable<Script>
    {
        ILoquiRegistration ILoquiObject.Registration => Script_Registration.Instance;
        public new static Script_Registration Registration => Script_Registration.Instance;

        #region Ctor
        public Script()
        {
            _MetadataSummary = NotifyingItem.Factory<ScriptMetaSummary>(defaultVal: _MetadataSummary_Object);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MetadataSummary
        private ScriptMetaSummary _MetadataSummary_Object = new ScriptMetaSummary();
        protected readonly INotifyingItem<ScriptMetaSummary> _MetadataSummary;
        public INotifyingItemGetter<ScriptMetaSummary> MetadataSummary_Property => this._MetadataSummary;
        ScriptMetaSummary IScriptGetter.MetadataSummary => this.MetadataSummary;
        public ScriptMetaSummary MetadataSummary { get => _MetadataSummary.Item; }
        INotifyingItemGetter<ScriptMetaSummary> IScriptGetter.MetadataSummary_Property => this.MetadataSummary_Property;
        #endregion
        #region CompiledScript
        protected readonly INotifyingSetItem<Byte[]> _CompiledScript = NotifyingSetItem.Factory<Byte[]>(markAsSet: false);
        public INotifyingSetItem<Byte[]> CompiledScript_Property => _CompiledScript;
        public Byte[] CompiledScript
        {
            get => this._CompiledScript.Item;
            set => this._CompiledScript.Set(value);
        }
        INotifyingSetItem<Byte[]> IScript.CompiledScript_Property => this.CompiledScript_Property;
        INotifyingSetItemGetter<Byte[]> IScriptGetter.CompiledScript_Property => this.CompiledScript_Property;
        #endregion
        #region SourceCode
        protected readonly INotifyingSetItem<String> _SourceCode = NotifyingSetItem.Factory<String>(markAsSet: false);
        public INotifyingSetItem<String> SourceCode_Property => _SourceCode;
        public String SourceCode
        {
            get => this._SourceCode.Item;
            set => this._SourceCode.Set(value);
        }
        INotifyingSetItem<String> IScript.SourceCode_Property => this.SourceCode_Property;
        INotifyingSetItemGetter<String> IScriptGetter.SourceCode_Property => this.SourceCode_Property;
        #endregion
        #region LocalVariables
        private readonly INotifyingList<LocalVariable> _LocalVariables = new NotifyingList<LocalVariable>();
        public INotifyingList<LocalVariable> LocalVariables => _LocalVariables;
        #region Interface Members
        INotifyingList<LocalVariable> IScript.LocalVariables => _LocalVariables;
        INotifyingListGetter<LocalVariable> IScriptGetter.LocalVariables => _LocalVariables;
        #endregion

        #endregion
        #region References
        private readonly INotifyingList<ScriptReference> _References = new NotifyingList<ScriptReference>();
        public INotifyingList<ScriptReference> References => _References;
        #region Interface Members
        INotifyingList<ScriptReference> IScript.References => _References;
        INotifyingListGetter<ScriptReference> IScriptGetter.References => _References;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => ScriptCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => ScriptCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => ScriptCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ScriptCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return ScriptCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Script_Mask<bool> printMask = null)
        {
            return ScriptCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ScriptCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new Script_Mask<bool> GetHasBeenSetMask()
        {
            return ScriptCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Script rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Script rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(MetadataSummary, rhs.MetadataSummary)) return false;
            if (CompiledScript_Property.HasBeenSet != rhs.CompiledScript_Property.HasBeenSet) return false;
            if (CompiledScript_Property.HasBeenSet)
            {
                if (!CompiledScript.EqualsFast(rhs.CompiledScript)) return false;
            }
            if (SourceCode_Property.HasBeenSet != rhs.SourceCode_Property.HasBeenSet) return false;
            if (SourceCode_Property.HasBeenSet)
            {
                if (!object.Equals(SourceCode, rhs.SourceCode)) return false;
            }
            if (!LocalVariables.SequenceEqual(rhs.LocalVariables)) return false;
            if (!References.SequenceEqual(rhs.References)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(MetadataSummary).CombineHashCode(ret);
            if (CompiledScript_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(CompiledScript).CombineHashCode(ret);
            }
            if (SourceCode_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(SourceCode).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(LocalVariables).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(References).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Script Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Script Create_XML(
            XElement root,
            out Script_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Script Create_XML(
            XElement root,
            bool doMasks,
            out Script_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Script Object, Script_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Script_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Script_ErrorMask()) : default(Func<Script_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Script Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Script Create_XML(
            string path,
            out Script_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Script Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Script Create_XML(
            Stream stream,
            out Script_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Script, Script_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Script_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Script, Script_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Script_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Script_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Script_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Script_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Script_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Script_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Script_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            ScriptCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Script Create_XML_Internal(
            XElement root,
            Func<Script_ErrorMask> errorMask)
        {
            var ret = new Script();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Script item,
            XElement root,
            string name,
            Func<Script_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "MetadataSummary":
                    {
                        MaskItem<Exception, ScriptMetaSummary_ErrorMask> subMask;
                        var tmp = ScriptMetaSummary.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out ScriptMetaSummary_ErrorMask createMask);
                        ScriptMetaSummaryCommon.CopyFieldsFrom(
                            item: item._MetadataSummary_Object,
                            rhs: tmp,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            doMasks: errorMask != null,
                            errorMask: out ScriptMetaSummary_ErrorMask copyMask);
                        var loquiMask = ScriptMetaSummary_ErrorMask.Combine(createMask, copyMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ScriptMetaSummary_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)Script_FieldIndex.MetadataSummary,
                            subMask);
                    }
                    break;
                case "CompiledScript":
                    {
                        Exception subMask;
                        var tryGet = ByteArrayXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._CompiledScript.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)Script_FieldIndex.CompiledScript,
                            subMask);
                    }
                    break;
                case "SourceCode":
                    {
                        Exception subMask;
                        var tryGet = StringXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._SourceCode.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)Script_FieldIndex.SourceCode,
                            subMask);
                    }
                    break;
                case "LocalVariables":
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, LocalVariable_ErrorMask>>> subMask;
                        var listTryGet = ListXmlTranslation<LocalVariable, MaskItem<Exception, LocalVariable_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out MaskItem<Exception, LocalVariable_ErrorMask> listSubMask) =>
                            {
                                return LoquiXmlTranslation<LocalVariable, LocalVariable_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: listDoMasks,
                                    errorMask: out listSubMask);
                            }
                            );
                        item._LocalVariables.SetIfSucceeded(listTryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)Script_FieldIndex.LocalVariables,
                            subMask);
                    }
                    break;
                case "References":
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, ScriptReference_ErrorMask>>> subMask;
                        var listTryGet = ListXmlTranslation<ScriptReference, MaskItem<Exception, ScriptReference_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out MaskItem<Exception, ScriptReference_ErrorMask> listSubMask) =>
                            {
                                return LoquiXmlTranslation<ScriptReference, ScriptReference_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: listDoMasks,
                                    errorMask: out listSubMask);
                            }
                            );
                        item._References.SetIfSucceeded(listTryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)Script_FieldIndex.References,
                            subMask);
                    }
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Script Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Script Create_Binary(
            MutagenFrame frame,
            out Script_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Script Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Script_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Script Object, Script_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            Script_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Script_ErrorMask()) : default(Func<Script_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Script Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Script Create_Binary(
            string path,
            out Script_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Script Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Script Create_Binary(
            Stream stream,
            out Script_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Script, Script_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out Script_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Script, Script_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out Script_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out Script_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Script_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Script_ErrorMask errorMask)
        {
            errorMask = (Script_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Script_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Script_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            ScriptCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Script Create_Binary_Internal(
            MutagenFrame frame,
            Func<Script_ErrorMask> errorMask)
        {
            var ret = new Script();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseRecord(
                    frame,
                    Script_Registration.SCPT_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    while (!frame.Complete)
                    {
                        if (!Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            errorMask: errorMask)) break;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            Script item,
            MutagenFrame frame,
            Func<Script_ErrorMask> errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static bool Fill_Binary_RecordTypes(
            Script item,
            MutagenFrame frame,
            Func<Script_ErrorMask> errorMask)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                frame: frame,
                contentLength: out var contentLength);
            switch (nextRecordType.Type)
            {
                case "SCHR":
                    var tmp = ScriptMetaSummary.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out ScriptMetaSummary_ErrorMask MetadataSummarycreateMask);
                    ScriptMetaSummaryCommon.CopyFieldsFrom(
                        item: item._MetadataSummary_Object,
                        rhs: tmp,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out ScriptMetaSummary_ErrorMask MetadataSummaryerrorMask);
                    var combined = ScriptMetaSummary_ErrorMask.Combine(MetadataSummarycreateMask, MetadataSummaryerrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)Script_FieldIndex.MetadataSummary,
                        errMaskObj: combined == null ? null : new MaskItem<Exception, ScriptMetaSummary_ErrorMask>(null, combined));
                    break;
                case "SCDA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var CompiledScripttryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)Script_FieldIndex.CompiledScript,
                        errorMask: errorMask);
                    item._CompiledScript.SetIfSucceeded(CompiledScripttryGet);
                    break;
                case "SCTX":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var SourceCodetryGet = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Script_FieldIndex.SourceCode,
                        errorMask: errorMask);
                    item._SourceCode.SetIfSucceeded(SourceCodetryGet);
                    break;
                case "SLSD":
                case "SCVR":
                    var LocalVariablestryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<LocalVariable, MaskItem<Exception, LocalVariable_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: LocalVariable_Registration.TriggeringRecordTypes,
                        fieldIndex: (int)Script_FieldIndex.LocalVariables,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, LocalVariable_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<LocalVariable, LocalVariable_ErrorMask>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._LocalVariables.SetIfSucceeded(LocalVariablestryGet);
                    break;
                case "SCRV":
                case "SCRO":
                    var ReferencestryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<ScriptReference, MaskItem<Exception, ScriptReference_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: ScriptReference_Registration.TriggeringRecordTypes,
                        fieldIndex: (int)Script_FieldIndex.References,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, ScriptReference_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<ScriptReference, ScriptReference_ErrorMask>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._References.SetIfSucceeded(ReferencestryGet);
                    break;
                default:
                    MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        errorMask: errorMask);
                    break;
            }
            return true;
        }

        #endregion

        public Script Copy(
            Script_CopyMask copyMask = null,
            IScriptGetter def = null)
        {
            return Script.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Script Copy(
            IScript item,
            Script_CopyMask copyMask = null,
            IScriptGetter def = null)
        {
            Script ret;
            if (item.GetType().Equals(typeof(Script)))
            {
                ret = new Script();
            }
            else
            {
                ret = (Script)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            Script_CopyMask copyMask = null,
            IScriptGetter def = null)
            where CopyType : class, IScript
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Script)))
            {
                ret = new Script() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Script Copy_ToLoqui(
            IScriptGetter item,
            Script_CopyMask copyMask = null,
            IScriptGetter def = null)
        {
            var ret = new Script();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.MetadataSummary:
                    this._MetadataSummary_Object.CopyFieldsFrom(rhs: (ScriptMetaSummary)obj, cmds: cmds);
                    break;
                case Script_FieldIndex.CompiledScript:
                    this._CompiledScript.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case Script_FieldIndex.SourceCode:
                    this._SourceCode.Set(
                        (String)obj,
                        cmds);
                    break;
                case Script_FieldIndex.LocalVariables:
                    this._LocalVariables.SetTo((IEnumerable<LocalVariable>)obj, cmds);
                    break;
                case Script_FieldIndex.References:
                    this._References.SetTo((IEnumerable<ScriptReference>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ScriptCommon.Clear(this, cmds);
        }


        public new static Script Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Script();
            foreach (var pair in fields)
            {
                CopyInInternal_Script(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Script(Script obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Script_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Script_FieldIndex.MetadataSummary:
                    obj._MetadataSummary_Object.CopyFieldsFrom(rhs: (ScriptMetaSummary)pair.Value, cmds: null);
                    break;
                case Script_FieldIndex.CompiledScript:
                    obj._CompiledScript.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case Script_FieldIndex.SourceCode:
                    obj._SourceCode.Set(
                        (String)pair.Value,
                        null);
                    break;
                case Script_FieldIndex.LocalVariables:
                    obj._LocalVariables.SetTo((IEnumerable<LocalVariable>)pair.Value, null);
                    break;
                case Script_FieldIndex.References:
                    obj._References.SetTo((IEnumerable<ScriptReference>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Script obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IScript : IScriptGetter, IMajorRecord, ILoquiClass<IScript, IScriptGetter>, ILoquiClass<Script, IScriptGetter>
    {
        new Byte[] CompiledScript { get; set; }
        new INotifyingSetItem<Byte[]> CompiledScript_Property { get; }

        new String SourceCode { get; set; }
        new INotifyingSetItem<String> SourceCode_Property { get; }

        new INotifyingList<LocalVariable> LocalVariables { get; }
        new INotifyingList<ScriptReference> References { get; }
    }

    public interface IScriptGetter : IMajorRecordGetter
    {
        #region MetadataSummary
        ScriptMetaSummary MetadataSummary { get; }
        INotifyingItemGetter<ScriptMetaSummary> MetadataSummary_Property { get; }

        #endregion
        #region CompiledScript
        Byte[] CompiledScript { get; }
        INotifyingSetItemGetter<Byte[]> CompiledScript_Property { get; }

        #endregion
        #region SourceCode
        String SourceCode { get; }
        INotifyingSetItemGetter<String> SourceCode_Property { get; }

        #endregion
        #region LocalVariables
        INotifyingListGetter<LocalVariable> LocalVariables { get; }
        #endregion
        #region References
        INotifyingListGetter<ScriptReference> References { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Script_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        MetadataSummary = 5,
        CompiledScript = 6,
        SourceCode = 7,
        LocalVariables = 8,
        References = 9,
    }
    #endregion

    #region Registration
    public class Script_Registration : ILoquiRegistration
    {
        public static readonly Script_Registration Instance = new Script_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 46,
            version: 0);

        public const string GUID = "4eda2162-86bb-49f3-babd-a9ea5ad8d928";

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(Script_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Script_ErrorMask);

        public static readonly Type ClassType = typeof(Script);

        public static readonly Type GetterType = typeof(IScriptGetter);

        public static readonly Type SetterType = typeof(IScript);

        public static readonly Type CommonType = typeof(ScriptCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Script";

        public const string Name = "Script";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "METADATASUMMARY":
                    return (ushort)Script_FieldIndex.MetadataSummary;
                case "COMPILEDSCRIPT":
                    return (ushort)Script_FieldIndex.CompiledScript;
                case "SOURCECODE":
                    return (ushort)Script_FieldIndex.SourceCode;
                case "LOCALVARIABLES":
                    return (ushort)Script_FieldIndex.LocalVariables;
                case "REFERENCES":
                    return (ushort)Script_FieldIndex.References;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.LocalVariables:
                case Script_FieldIndex.References:
                    return true;
                case Script_FieldIndex.MetadataSummary:
                case Script_FieldIndex.CompiledScript:
                case Script_FieldIndex.SourceCode:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.MetadataSummary:
                case Script_FieldIndex.LocalVariables:
                case Script_FieldIndex.References:
                    return true;
                case Script_FieldIndex.CompiledScript:
                case Script_FieldIndex.SourceCode:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.MetadataSummary:
                    return true;
                case Script_FieldIndex.CompiledScript:
                case Script_FieldIndex.SourceCode:
                case Script_FieldIndex.LocalVariables:
                case Script_FieldIndex.References:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.MetadataSummary:
                    return "MetadataSummary";
                case Script_FieldIndex.CompiledScript:
                    return "CompiledScript";
                case Script_FieldIndex.SourceCode:
                    return "SourceCode";
                case Script_FieldIndex.LocalVariables:
                    return "LocalVariables";
                case Script_FieldIndex.References:
                    return "References";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.MetadataSummary:
                case Script_FieldIndex.CompiledScript:
                case Script_FieldIndex.SourceCode:
                case Script_FieldIndex.LocalVariables:
                case Script_FieldIndex.References:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.MetadataSummary:
                    return true;
                case Script_FieldIndex.CompiledScript:
                case Script_FieldIndex.SourceCode:
                case Script_FieldIndex.LocalVariables:
                case Script_FieldIndex.References:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.MetadataSummary:
                    return typeof(ScriptMetaSummary);
                case Script_FieldIndex.CompiledScript:
                    return typeof(Byte[]);
                case Script_FieldIndex.SourceCode:
                    return typeof(String);
                case Script_FieldIndex.LocalVariables:
                    return typeof(NotifyingList<LocalVariable>);
                case Script_FieldIndex.References:
                    return typeof(NotifyingList<ScriptReference>);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType SCPT_HEADER = new RecordType("SCPT");
        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType SCDA_HEADER = new RecordType("SCDA");
        public static readonly RecordType SCTX_HEADER = new RecordType("SCTX");
        public static readonly RecordType SLSD_HEADER = new RecordType("SLSD");
        public static readonly RecordType SCVR_HEADER = new RecordType("SCVR");
        public static readonly RecordType SCRV_HEADER = new RecordType("SCRV");
        public static readonly RecordType SCRO_HEADER = new RecordType("SCRO");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SCPT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ScriptCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IScript item,
            IScriptGetter rhs,
            Script_CopyMask copyMask = null,
            IScriptGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            ScriptCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IScript item,
            IScriptGetter rhs,
            out Script_ErrorMask errorMask,
            Script_CopyMask copyMask = null,
            IScriptGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            ScriptCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IScript item,
            IScriptGetter rhs,
            IScriptGetter def,
            bool doMasks,
            out Script_ErrorMask errorMask,
            Script_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            Script_ErrorMask retErrorMask = null;
            Func<Script_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Script_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IScript item,
            IScriptGetter rhs,
            IScriptGetter def,
            bool doMasks,
            Func<Script_ErrorMask> errorMask,
            Script_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.MetadataSummary.Overall ?? true)
            {
                try
                {
                    ScriptMetaSummaryCommon.CopyFieldsFrom(
                        item: item.MetadataSummary,
                        rhs: rhs.MetadataSummary,
                        def: def?.MetadataSummary,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<ScriptMetaSummary_ErrorMask>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.MetadataSummary.Specific == null)
                            {
                                baseMask.MetadataSummary = new MaskItem<Exception, ScriptMetaSummary_ErrorMask>(null, new ScriptMetaSummary_ErrorMask());
                            }
                            return baseMask.MetadataSummary.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.MetadataSummary.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Script_FieldIndex.MetadataSummary, ex);
                }
            }
            if (copyMask?.CompiledScript ?? true)
            {
                try
                {
                    item.CompiledScript_Property.SetToWithDefault(
                        rhs: rhs.CompiledScript_Property,
                        def: def?.CompiledScript_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Script_FieldIndex.CompiledScript, ex);
                }
            }
            if (copyMask?.SourceCode ?? true)
            {
                try
                {
                    item.SourceCode_Property.SetToWithDefault(
                        rhs: rhs.SourceCode_Property,
                        def: def?.SourceCode_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Script_FieldIndex.SourceCode, ex);
                }
            }
            if (copyMask?.LocalVariables.Overall != CopyOption.Skip)
            {
                try
                {
                    item.LocalVariables.SetToWithDefault(
                        rhs.LocalVariables,
                        def?.LocalVariables,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.LocalVariables.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(LocalVariable);
                                    return LocalVariable.Copy(
                                        r,
                                        copyMask?.LocalVariables?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.LocalVariables.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Script_FieldIndex.LocalVariables, ex);
                }
            }
            if (copyMask?.References.Overall != CopyOption.Skip)
            {
                try
                {
                    item.References.SetToWithDefault(
                        rhs.References,
                        def?.References,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.References.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(ScriptReference);
                                    return ScriptReference.Copy(
                                        r,
                                        copyMask?.References?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.References.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Script_FieldIndex.References, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IScript obj,
            NotifyingFireParameters? cmds = null)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.MetadataSummary:
                case Script_FieldIndex.LocalVariables:
                case Script_FieldIndex.References:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Script_FieldIndex.CompiledScript:
                    obj.CompiledScript_Property.HasBeenSet = on;
                    break;
                case Script_FieldIndex.SourceCode:
                    obj.SourceCode_Property.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IScript obj,
            NotifyingUnsetParameters? cmds = null)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.MetadataSummary:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case Script_FieldIndex.CompiledScript:
                    obj.CompiledScript_Property.Unset(cmds);
                    break;
                case Script_FieldIndex.SourceCode:
                    obj.SourceCode_Property.Unset(cmds);
                    break;
                case Script_FieldIndex.LocalVariables:
                    obj.LocalVariables.Unset(cmds);
                    break;
                case Script_FieldIndex.References:
                    obj.References.Unset(cmds);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IScript obj)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.MetadataSummary:
                case Script_FieldIndex.LocalVariables:
                case Script_FieldIndex.References:
                    return true;
                case Script_FieldIndex.CompiledScript:
                    return obj.CompiledScript_Property.HasBeenSet;
                case Script_FieldIndex.SourceCode:
                    return obj.SourceCode_Property.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IScriptGetter obj)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.MetadataSummary:
                    return obj.MetadataSummary;
                case Script_FieldIndex.CompiledScript:
                    return obj.CompiledScript;
                case Script_FieldIndex.SourceCode:
                    return obj.SourceCode;
                case Script_FieldIndex.LocalVariables:
                    return obj.LocalVariables;
                case Script_FieldIndex.References:
                    return obj.References;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IScript item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.CompiledScript_Property.Unset(cmds.ToUnsetParams());
            item.SourceCode_Property.Unset(cmds.ToUnsetParams());
            item.LocalVariables.Unset(cmds.ToUnsetParams());
            item.References.Unset(cmds.ToUnsetParams());
        }

        public static Script_Mask<bool> GetEqualsMask(
            this IScriptGetter item,
            IScriptGetter rhs)
        {
            var ret = new Script_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IScriptGetter item,
            IScriptGetter rhs,
            Script_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.MetadataSummary = new MaskItem<bool, ScriptMetaSummary_Mask<bool>>();
            ret.MetadataSummary.Specific = ScriptMetaSummaryCommon.GetEqualsMask(item.MetadataSummary, rhs.MetadataSummary);
            ret.MetadataSummary.Overall = ret.MetadataSummary.Specific.AllEqual((b) => b);
            ret.CompiledScript = item.CompiledScript_Property.Equals(rhs.CompiledScript_Property, (l, r) => l.EqualsFast(r));
            ret.SourceCode = item.SourceCode_Property.Equals(rhs.SourceCode_Property, (l, r) => object.Equals(l, r));
            if (item.LocalVariables.HasBeenSet == rhs.LocalVariables.HasBeenSet)
            {
                if (item.LocalVariables.HasBeenSet)
                {
                    ret.LocalVariables = new MaskItem<bool, IEnumerable<MaskItem<bool, LocalVariable_Mask<bool>>>>();
                    ret.LocalVariables.Specific = item.LocalVariables.SelectAgainst<LocalVariable, MaskItem<bool, LocalVariable_Mask<bool>>>(rhs.LocalVariables, ((l, r) =>
                    {
                        MaskItem<bool, LocalVariable_Mask<bool>> itemRet;
                        itemRet = new MaskItem<bool, LocalVariable_Mask<bool>>();
                        itemRet.Specific = LocalVariableCommon.GetEqualsMask(l, r);
                        itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                        return itemRet;
                    }
                    ), out ret.LocalVariables.Overall);
                    ret.LocalVariables.Overall = ret.LocalVariables.Overall && ret.LocalVariables.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.LocalVariables = new MaskItem<bool, IEnumerable<MaskItem<bool, LocalVariable_Mask<bool>>>>();
                    ret.LocalVariables.Overall = true;
                }
            }
            else
            {
                ret.LocalVariables = new MaskItem<bool, IEnumerable<MaskItem<bool, LocalVariable_Mask<bool>>>>();
                ret.LocalVariables.Overall = false;
            }
            if (item.References.HasBeenSet == rhs.References.HasBeenSet)
            {
                if (item.References.HasBeenSet)
                {
                    ret.References = new MaskItem<bool, IEnumerable<MaskItem<bool, ScriptReference_Mask<bool>>>>();
                    ret.References.Specific = item.References.SelectAgainst<ScriptReference, MaskItem<bool, ScriptReference_Mask<bool>>>(rhs.References, ((l, r) =>
                    {
                        MaskItem<bool, ScriptReference_Mask<bool>> itemRet;
                        itemRet = new MaskItem<bool, ScriptReference_Mask<bool>>();
                        itemRet.Specific = ScriptReferenceCommon.GetEqualsMask(l, r);
                        itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                        return itemRet;
                    }
                    ), out ret.References.Overall);
                    ret.References.Overall = ret.References.Overall && ret.References.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.References = new MaskItem<bool, IEnumerable<MaskItem<bool, ScriptReference_Mask<bool>>>>();
                    ret.References.Overall = true;
                }
            }
            else
            {
                ret.References = new MaskItem<bool, IEnumerable<MaskItem<bool, ScriptReference_Mask<bool>>>>();
                ret.References.Overall = false;
            }
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IScriptGetter item,
            string name = null,
            Script_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IScriptGetter item,
            FileGeneration fg,
            string name = null,
            Script_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Script)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Script)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MetadataSummary?.Overall ?? true)
                {
                    item.MetadataSummary?.ToString(fg, "MetadataSummary");
                }
                if (printMask?.CompiledScript ?? true)
                {
                    fg.AppendLine($"CompiledScript => {item.CompiledScript}");
                }
                if (printMask?.SourceCode ?? true)
                {
                    fg.AppendLine($"SourceCode => {item.SourceCode}");
                }
                if (printMask?.LocalVariables?.Overall ?? true)
                {
                    fg.AppendLine("LocalVariables =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.LocalVariables)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.References?.Overall ?? true)
                {
                    fg.AppendLine("References =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.References)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IScriptGetter item,
            Script_Mask<bool?> checkMask)
        {
            if (checkMask.CompiledScript.HasValue && checkMask.CompiledScript.Value != item.CompiledScript_Property.HasBeenSet) return false;
            if (checkMask.SourceCode.HasValue && checkMask.SourceCode.Value != item.SourceCode_Property.HasBeenSet) return false;
            if (checkMask.LocalVariables.Overall.HasValue && checkMask.LocalVariables.Overall.Value != item.LocalVariables.HasBeenSet) return false;
            if (checkMask.References.Overall.HasValue && checkMask.References.Overall.Value != item.References.HasBeenSet) return false;
            return true;
        }

        public static Script_Mask<bool> GetHasBeenSetMask(IScriptGetter item)
        {
            var ret = new Script_Mask<bool>();
            ret.MetadataSummary = new MaskItem<bool, ScriptMetaSummary_Mask<bool>>(true, ScriptMetaSummaryCommon.GetHasBeenSetMask(item.MetadataSummary_Property.Item));
            ret.CompiledScript = item.CompiledScript_Property.HasBeenSet;
            ret.SourceCode = item.SourceCode_Property.HasBeenSet;
            ret.LocalVariables = new MaskItem<bool, IEnumerable<MaskItem<bool, LocalVariable_Mask<bool>>>>(item.LocalVariables.HasBeenSet, item.LocalVariables.Select((i) => new MaskItem<bool, LocalVariable_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.References = new MaskItem<bool, IEnumerable<MaskItem<bool, ScriptReference_Mask<bool>>>>(item.References.HasBeenSet, item.References.Select((i) => new MaskItem<bool, ScriptReference_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static Script_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Script_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Script_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Script_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Script_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Script_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Script_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IScriptGetter item,
            bool doMasks,
            out Script_ErrorMask errorMask,
            string name = null)
        {
            Script_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Script_ErrorMask()) : default(Func<Script_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IScriptGetter item,
            Func<Script_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.Script"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.Script");
                    }
                    LoquiXmlTranslation<ScriptMetaSummary, ScriptMetaSummary_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: item.MetadataSummary_Property,
                        name: nameof(item.MetadataSummary),
                        fieldIndex: (int)Script_FieldIndex.MetadataSummary,
                        errorMask: errorMask);
                    if (item.CompiledScript_Property.HasBeenSet)
                    {
                        ByteArrayXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.CompiledScript),
                            item: item.CompiledScript_Property,
                            fieldIndex: (int)Script_FieldIndex.CompiledScript,
                            errorMask: errorMask);
                    }
                    if (item.SourceCode_Property.HasBeenSet)
                    {
                        StringXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.SourceCode),
                            item: item.SourceCode_Property,
                            fieldIndex: (int)Script_FieldIndex.SourceCode,
                            errorMask: errorMask);
                    }
                    ListXmlTranslation<LocalVariable, MaskItem<Exception, LocalVariable_ErrorMask>>.Instance.Write(
                        writer: writer,
                        name: nameof(item.LocalVariables),
                        item: item.LocalVariables,
                        fieldIndex: (int)Script_FieldIndex.LocalVariables,
                        errorMask: errorMask,
                        transl: (LocalVariable subItem, bool listDoMasks, out MaskItem<Exception, LocalVariable_ErrorMask> listSubMask) =>
                        {
                            LoquiXmlTranslation<LocalVariable, LocalVariable_ErrorMask>.Instance.Write(
                                writer: writer,
                                item: subItem,
                                name: "Item",
                                doMasks: errorMask != null,
                                errorMask: out listSubMask);
                        }
                        );
                    ListXmlTranslation<ScriptReference, MaskItem<Exception, ScriptReference_ErrorMask>>.Instance.Write(
                        writer: writer,
                        name: nameof(item.References),
                        item: item.References,
                        fieldIndex: (int)Script_FieldIndex.References,
                        errorMask: errorMask,
                        transl: (ScriptReference subItem, bool listDoMasks, out MaskItem<Exception, ScriptReference_ErrorMask> listSubMask) =>
                        {
                            LoquiXmlTranslation<ScriptReference, ScriptReference_ErrorMask>.Instance.Write(
                                writer: writer,
                                item: subItem,
                                name: "Item",
                                doMasks: errorMask != null,
                                errorMask: out listSubMask);
                        }
                        );
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IScriptGetter item,
            bool doMasks,
            out Script_ErrorMask errorMask)
        {
            Script_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Script_ErrorMask()) : default(Func<Script_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IScriptGetter item,
            Func<Script_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Script_Registration.SCPT_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            IScriptGetter item,
            MutagenWriter writer,
            Func<Script_ErrorMask> errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                errorMask: errorMask);
            LoquiBinaryTranslation<ScriptMetaSummary, ScriptMetaSummary_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.MetadataSummary_Property,
                fieldIndex: (int)Script_FieldIndex.MetadataSummary,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CompiledScript_Property,
                fieldIndex: (int)Script_FieldIndex.CompiledScript,
                errorMask: errorMask,
                header: Script_Registration.SCDA_HEADER,
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SourceCode_Property,
                fieldIndex: (int)Script_FieldIndex.SourceCode,
                errorMask: errorMask,
                header: Script_Registration.SCTX_HEADER,
                nullable: false,
                nullTerminate: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<LocalVariable, MaskItem<Exception, LocalVariable_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.LocalVariables,
                fieldIndex: (int)Script_FieldIndex.LocalVariables,
                errorMask: errorMask,
                transl: (LocalVariable subItem, bool listDoMasks, out MaskItem<Exception, LocalVariable_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<LocalVariable, LocalVariable_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ScriptReference, MaskItem<Exception, ScriptReference_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.References,
                fieldIndex: (int)Script_FieldIndex.References,
                errorMask: errorMask,
                transl: (ScriptReference subItem, bool listDoMasks, out MaskItem<Exception, ScriptReference_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<ScriptReference, ScriptReference_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Script_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Script_Mask<T>>
    {
        #region Ctors
        public Script_Mask()
        {
        }

        public Script_Mask(T initialValue)
        {
            this.MetadataSummary = new MaskItem<T, ScriptMetaSummary_Mask<T>>(initialValue, new ScriptMetaSummary_Mask<T>(initialValue));
            this.CompiledScript = initialValue;
            this.SourceCode = initialValue;
            this.LocalVariables = new MaskItem<T, IEnumerable<MaskItem<T, LocalVariable_Mask<T>>>>(initialValue, null);
            this.References = new MaskItem<T, IEnumerable<MaskItem<T, ScriptReference_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, ScriptMetaSummary_Mask<T>> MetadataSummary { get; set; }
        public T CompiledScript;
        public T SourceCode;
        public MaskItem<T, IEnumerable<MaskItem<T, LocalVariable_Mask<T>>>> LocalVariables;
        public MaskItem<T, IEnumerable<MaskItem<T, ScriptReference_Mask<T>>>> References;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Script_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Script_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.MetadataSummary, rhs.MetadataSummary)) return false;
            if (!object.Equals(this.CompiledScript, rhs.CompiledScript)) return false;
            if (!object.Equals(this.SourceCode, rhs.SourceCode)) return false;
            if (!object.Equals(this.LocalVariables, rhs.LocalVariables)) return false;
            if (!object.Equals(this.References, rhs.References)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MetadataSummary?.GetHashCode());
            ret = ret.CombineHashCode(this.CompiledScript?.GetHashCode());
            ret = ret.CombineHashCode(this.SourceCode?.GetHashCode());
            ret = ret.CombineHashCode(this.LocalVariables?.GetHashCode());
            ret = ret.CombineHashCode(this.References?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (MetadataSummary != null)
            {
                if (!eval(this.MetadataSummary.Overall)) return false;
                if (MetadataSummary.Specific != null && !MetadataSummary.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.CompiledScript)) return false;
            if (!eval(this.SourceCode)) return false;
            if (LocalVariables != null)
            {
                if (!eval(this.LocalVariables.Overall)) return false;
                if (LocalVariables.Specific != null)
                {
                    foreach (var item in LocalVariables.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            if (References != null)
            {
                if (!eval(this.References.Overall)) return false;
                if (References.Specific != null)
                {
                    foreach (var item in References.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Script_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Script_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Script_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.MetadataSummary != null)
            {
                obj.MetadataSummary = new MaskItem<R, ScriptMetaSummary_Mask<R>>();
                obj.MetadataSummary.Overall = eval(this.MetadataSummary.Overall);
                if (this.MetadataSummary.Specific != null)
                {
                    obj.MetadataSummary.Specific = this.MetadataSummary.Specific.Translate(eval);
                }
            }
            obj.CompiledScript = eval(this.CompiledScript);
            obj.SourceCode = eval(this.SourceCode);
            if (LocalVariables != null)
            {
                obj.LocalVariables = new MaskItem<R, IEnumerable<MaskItem<R, LocalVariable_Mask<R>>>>();
                obj.LocalVariables.Overall = eval(this.LocalVariables.Overall);
                if (LocalVariables.Specific != null)
                {
                    List<MaskItem<R, LocalVariable_Mask<R>>> l = new List<MaskItem<R, LocalVariable_Mask<R>>>();
                    obj.LocalVariables.Specific = l;
                    foreach (var item in LocalVariables.Specific)
                    {
                        MaskItem<R, LocalVariable_Mask<R>> mask = default(MaskItem<R, LocalVariable_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, LocalVariable_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (References != null)
            {
                obj.References = new MaskItem<R, IEnumerable<MaskItem<R, ScriptReference_Mask<R>>>>();
                obj.References.Overall = eval(this.References.Overall);
                if (References.Specific != null)
                {
                    List<MaskItem<R, ScriptReference_Mask<R>>> l = new List<MaskItem<R, ScriptReference_Mask<R>>>();
                    obj.References.Specific = l;
                    foreach (var item in References.Specific)
                    {
                        MaskItem<R, ScriptReference_Mask<R>> mask = default(MaskItem<R, ScriptReference_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, ScriptReference_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.LocalVariables.Specific = null;
            this.References.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Script_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Script_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Script_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MetadataSummary?.Overall ?? true)
                {
                    MetadataSummary?.ToString(fg);
                }
                if (printMask?.CompiledScript ?? true)
                {
                    fg.AppendLine($"CompiledScript => {CompiledScript}");
                }
                if (printMask?.SourceCode ?? true)
                {
                    fg.AppendLine($"SourceCode => {SourceCode}");
                }
                if (printMask?.LocalVariables?.Overall ?? true)
                {
                    fg.AppendLine("LocalVariables =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (LocalVariables.Overall != null)
                        {
                            fg.AppendLine(LocalVariables.Overall.ToString());
                        }
                        if (LocalVariables.Specific != null)
                        {
                            foreach (var subItem in LocalVariables.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.References?.Overall ?? true)
                {
                    fg.AppendLine("References =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (References.Overall != null)
                        {
                            fg.AppendLine(References.Overall.ToString());
                        }
                        if (References.Specific != null)
                        {
                            foreach (var subItem in References.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Script_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Script_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, ScriptMetaSummary_ErrorMask> MetadataSummary;
        public Exception CompiledScript;
        public Exception SourceCode;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, LocalVariable_ErrorMask>>> LocalVariables;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ScriptReference_ErrorMask>>> References;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.MetadataSummary:
                    this.MetadataSummary = new MaskItem<Exception, ScriptMetaSummary_ErrorMask>(ex, null);
                    break;
                case Script_FieldIndex.CompiledScript:
                    this.CompiledScript = ex;
                    break;
                case Script_FieldIndex.SourceCode:
                    this.SourceCode = ex;
                    break;
                case Script_FieldIndex.LocalVariables:
                    this.LocalVariables = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LocalVariable_ErrorMask>>>(ex, null);
                    break;
                case Script_FieldIndex.References:
                    this.References = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ScriptReference_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.MetadataSummary:
                    this.MetadataSummary = (MaskItem<Exception, ScriptMetaSummary_ErrorMask>)obj;
                    break;
                case Script_FieldIndex.CompiledScript:
                    this.CompiledScript = (Exception)obj;
                    break;
                case Script_FieldIndex.SourceCode:
                    this.SourceCode = (Exception)obj;
                    break;
                case Script_FieldIndex.LocalVariables:
                    this.LocalVariables = (MaskItem<Exception, IEnumerable<MaskItem<Exception, LocalVariable_ErrorMask>>>)obj;
                    break;
                case Script_FieldIndex.References:
                    this.References = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ScriptReference_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (MetadataSummary != null) return true;
            if (CompiledScript != null) return true;
            if (SourceCode != null) return true;
            if (LocalVariables != null) return true;
            if (References != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Script_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            MetadataSummary?.ToString(fg);
            fg.AppendLine($"CompiledScript => {CompiledScript}");
            fg.AppendLine($"SourceCode => {SourceCode}");
            fg.AppendLine("LocalVariables =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (LocalVariables.Overall != null)
                {
                    fg.AppendLine(LocalVariables.Overall.ToString());
                }
                if (LocalVariables.Specific != null)
                {
                    foreach (var subItem in LocalVariables.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("References =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (References.Overall != null)
                {
                    fg.AppendLine(References.Overall.ToString());
                }
                if (References.Specific != null)
                {
                    foreach (var subItem in References.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Script_ErrorMask Combine(Script_ErrorMask rhs)
        {
            var ret = new Script_ErrorMask();
            ret.MetadataSummary = new MaskItem<Exception, ScriptMetaSummary_ErrorMask>(this.MetadataSummary.Overall.Combine(rhs.MetadataSummary.Overall), ((IErrorMask<ScriptMetaSummary_ErrorMask>)this.MetadataSummary.Specific).Combine(rhs.MetadataSummary.Specific));
            ret.CompiledScript = this.CompiledScript.Combine(rhs.CompiledScript);
            ret.SourceCode = this.SourceCode.Combine(rhs.SourceCode);
            ret.LocalVariables = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LocalVariable_ErrorMask>>>(this.LocalVariables.Overall.Combine(rhs.LocalVariables.Overall), new List<MaskItem<Exception, LocalVariable_ErrorMask>>(this.LocalVariables.Specific.And(rhs.LocalVariables.Specific)));
            ret.References = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ScriptReference_ErrorMask>>>(this.References.Overall.Combine(rhs.References.Overall), new List<MaskItem<Exception, ScriptReference_ErrorMask>>(this.References.Specific.And(rhs.References.Specific)));
            return ret;
        }
        public static Script_ErrorMask Combine(Script_ErrorMask lhs, Script_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Script_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public MaskItem<bool, ScriptMetaSummary_CopyMask> MetadataSummary;
        public bool CompiledScript;
        public bool SourceCode;
        public MaskItem<CopyOption, LocalVariable_CopyMask> LocalVariables;
        public MaskItem<CopyOption, ScriptReference_CopyMask> References;
        #endregion

    }
    #endregion




    #endregion

}
