/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class SeasonalIngredientProduction :
        ISeasonalIngredientProduction,
        ILoquiObjectSetter<SeasonalIngredientProduction>,
        IEquatable<SeasonalIngredientProduction>,
        IEqualsMask
    {
        #region Ctor
        public SeasonalIngredientProduction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Spring
        public Byte Spring { get; set; } = default;
        #endregion
        #region Summer
        public Byte Summer { get; set; } = default;
        #endregion
        #region Fall
        public Byte Fall { get; set; } = default;
        #endregion
        #region Winter
        public Byte Winter { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SeasonalIngredientProductionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISeasonalIngredientProductionGetter rhs)) return false;
            return ((SeasonalIngredientProductionCommon)((ISeasonalIngredientProductionGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(SeasonalIngredientProduction? obj)
        {
            return ((SeasonalIngredientProductionCommon)((ISeasonalIngredientProductionGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SeasonalIngredientProductionCommon)((ISeasonalIngredientProductionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => SeasonalIngredientProductionXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SeasonalIngredientProductionXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static SeasonalIngredientProduction CreateFromXml(
            XElement node,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SeasonalIngredientProduction CreateFromXml(
            XElement node,
            out SeasonalIngredientProduction.ErrorMask errorMask,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SeasonalIngredientProduction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static SeasonalIngredientProduction CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new SeasonalIngredientProduction();
            ((SeasonalIngredientProductionSetterCommon)((ISeasonalIngredientProductionGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static SeasonalIngredientProduction CreateFromXml(
            string path,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SeasonalIngredientProduction CreateFromXml(
            string path,
            out SeasonalIngredientProduction.ErrorMask errorMask,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SeasonalIngredientProduction CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SeasonalIngredientProduction CreateFromXml(
            Stream stream,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SeasonalIngredientProduction CreateFromXml(
            Stream stream,
            out SeasonalIngredientProduction.ErrorMask errorMask,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SeasonalIngredientProduction CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Spring = initialValue;
                this.Summer = initialValue;
                this.Fall = initialValue;
                this.Winter = initialValue;
            }

            public Mask(
                TItem Spring,
                TItem Summer,
                TItem Fall,
                TItem Winter)
            {
                this.Spring = Spring;
                this.Summer = Summer;
                this.Fall = Fall;
                this.Winter = Winter;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Spring;
            public TItem Summer;
            public TItem Fall;
            public TItem Winter;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Spring, rhs.Spring)) return false;
                if (!object.Equals(this.Summer, rhs.Summer)) return false;
                if (!object.Equals(this.Fall, rhs.Fall)) return false;
                if (!object.Equals(this.Winter, rhs.Winter)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Spring);
                hash.Add(this.Summer);
                hash.Add(this.Fall);
                hash.Add(this.Winter);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Spring)) return false;
                if (!eval(this.Summer)) return false;
                if (!eval(this.Fall)) return false;
                if (!eval(this.Winter)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Spring)) return true;
                if (eval(this.Summer)) return true;
                if (eval(this.Fall)) return true;
                if (eval(this.Winter)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SeasonalIngredientProduction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Spring = eval(this.Spring);
                obj.Summer = eval(this.Summer);
                obj.Fall = eval(this.Fall);
                obj.Winter = eval(this.Winter);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(SeasonalIngredientProduction.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, SeasonalIngredientProduction.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(SeasonalIngredientProduction.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Spring ?? true)
                    {
                        fg.AppendItem(Spring, "Spring");
                    }
                    if (printMask?.Summer ?? true)
                    {
                        fg.AppendItem(Summer, "Summer");
                    }
                    if (printMask?.Fall ?? true)
                    {
                        fg.AppendItem(Fall, "Fall");
                    }
                    if (printMask?.Winter ?? true)
                    {
                        fg.AppendItem(Winter, "Winter");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Spring;
            public Exception? Summer;
            public Exception? Fall;
            public Exception? Winter;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                SeasonalIngredientProduction_FieldIndex enu = (SeasonalIngredientProduction_FieldIndex)index;
                switch (enu)
                {
                    case SeasonalIngredientProduction_FieldIndex.Spring:
                        return Spring;
                    case SeasonalIngredientProduction_FieldIndex.Summer:
                        return Summer;
                    case SeasonalIngredientProduction_FieldIndex.Fall:
                        return Fall;
                    case SeasonalIngredientProduction_FieldIndex.Winter:
                        return Winter;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                SeasonalIngredientProduction_FieldIndex enu = (SeasonalIngredientProduction_FieldIndex)index;
                switch (enu)
                {
                    case SeasonalIngredientProduction_FieldIndex.Spring:
                        this.Spring = ex;
                        break;
                    case SeasonalIngredientProduction_FieldIndex.Summer:
                        this.Summer = ex;
                        break;
                    case SeasonalIngredientProduction_FieldIndex.Fall:
                        this.Fall = ex;
                        break;
                    case SeasonalIngredientProduction_FieldIndex.Winter:
                        this.Winter = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                SeasonalIngredientProduction_FieldIndex enu = (SeasonalIngredientProduction_FieldIndex)index;
                switch (enu)
                {
                    case SeasonalIngredientProduction_FieldIndex.Spring:
                        this.Spring = (Exception?)obj;
                        break;
                    case SeasonalIngredientProduction_FieldIndex.Summer:
                        this.Summer = (Exception?)obj;
                        break;
                    case SeasonalIngredientProduction_FieldIndex.Fall:
                        this.Fall = (Exception?)obj;
                        break;
                    case SeasonalIngredientProduction_FieldIndex.Winter:
                        this.Winter = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Spring != null) return true;
                if (Summer != null) return true;
                if (Fall != null) return true;
                if (Winter != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Spring, "Spring");
                fg.AppendItem(Summer, "Summer");
                fg.AppendItem(Fall, "Fall");
                fg.AppendItem(Winter, "Winter");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Spring = this.Spring.Combine(rhs.Spring);
                ret.Summer = this.Summer.Combine(rhs.Summer);
                ret.Fall = this.Fall.Combine(rhs.Fall);
                ret.Winter = this.Winter.Combine(rhs.Winter);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Spring;
            public bool Summer;
            public bool Fall;
            public bool Winter;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Spring = defaultOn;
                this.Summer = defaultOn;
                this.Fall = defaultOn;
                this.Winter = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Spring, null));
                ret.Add((Summer, null));
                ret.Add((Fall, null));
                ret.Add((Winter, null));
            }
        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SeasonalIngredientProduction_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SeasonalIngredientProductionBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SeasonalIngredientProductionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static SeasonalIngredientProduction CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static SeasonalIngredientProduction CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SeasonalIngredientProduction();
            ((SeasonalIngredientProductionSetterCommon)((ISeasonalIngredientProductionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SeasonalIngredientProduction item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISeasonalIngredientProductionGetter)rhs, include);

        void IClearable.Clear()
        {
            ((SeasonalIngredientProductionSetterCommon)((ISeasonalIngredientProductionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SeasonalIngredientProduction GetNew()
        {
            return new SeasonalIngredientProduction();
        }

    }
    #endregion

    #region Interface
    public partial interface ISeasonalIngredientProduction :
        ISeasonalIngredientProductionGetter,
        ILoquiObjectSetter<ISeasonalIngredientProduction>
    {
        new Byte Spring { get; set; }
        new Byte Summer { get; set; }
        new Byte Fall { get; set; }
        new Byte Winter { get; set; }
    }

    public partial interface ISeasonalIngredientProductionGetter :
        ILoquiObject,
        ILoquiObject<ISeasonalIngredientProductionGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => SeasonalIngredientProduction_Registration.Instance;
        Byte Spring { get; }
        Byte Summer { get; }
        Byte Fall { get; }
        Byte Winter { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SeasonalIngredientProductionMixIn
    {
        public static void Clear(this ISeasonalIngredientProduction item)
        {
            ((SeasonalIngredientProductionSetterCommon)((ISeasonalIngredientProductionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SeasonalIngredientProduction.Mask<bool> GetEqualsMask(
            this ISeasonalIngredientProductionGetter item,
            ISeasonalIngredientProductionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SeasonalIngredientProductionCommon)((ISeasonalIngredientProductionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISeasonalIngredientProductionGetter item,
            string? name = null,
            SeasonalIngredientProduction.Mask<bool>? printMask = null)
        {
            return ((SeasonalIngredientProductionCommon)((ISeasonalIngredientProductionGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISeasonalIngredientProductionGetter item,
            FileGeneration fg,
            string? name = null,
            SeasonalIngredientProduction.Mask<bool>? printMask = null)
        {
            ((SeasonalIngredientProductionCommon)((ISeasonalIngredientProductionGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISeasonalIngredientProductionGetter item,
            SeasonalIngredientProduction.Mask<bool?> checkMask)
        {
            return ((SeasonalIngredientProductionCommon)((ISeasonalIngredientProductionGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SeasonalIngredientProduction.Mask<bool> GetHasBeenSetMask(this ISeasonalIngredientProductionGetter item)
        {
            var ret = new SeasonalIngredientProduction.Mask<bool>(false);
            ((SeasonalIngredientProductionCommon)((ISeasonalIngredientProductionGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ISeasonalIngredientProductionGetter item,
            ISeasonalIngredientProductionGetter rhs)
        {
            return ((SeasonalIngredientProductionCommon)((ISeasonalIngredientProductionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISeasonalIngredientProduction lhs,
            ISeasonalIngredientProductionGetter rhs)
        {
            ((SeasonalIngredientProductionSetterTranslationCommon)((ISeasonalIngredientProductionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ISeasonalIngredientProduction lhs,
            ISeasonalIngredientProductionGetter rhs,
            SeasonalIngredientProduction.TranslationMask? copyMask = null)
        {
            ((SeasonalIngredientProductionSetterTranslationCommon)((ISeasonalIngredientProductionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISeasonalIngredientProduction lhs,
            ISeasonalIngredientProductionGetter rhs,
            out SeasonalIngredientProduction.ErrorMask errorMask,
            SeasonalIngredientProduction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SeasonalIngredientProductionSetterTranslationCommon)((ISeasonalIngredientProductionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = SeasonalIngredientProduction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISeasonalIngredientProduction lhs,
            ISeasonalIngredientProductionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SeasonalIngredientProductionSetterTranslationCommon)((ISeasonalIngredientProductionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static SeasonalIngredientProduction DeepCopy(
            this ISeasonalIngredientProductionGetter item,
            SeasonalIngredientProduction.TranslationMask? copyMask = null)
        {
            return ((SeasonalIngredientProductionSetterTranslationCommon)((ISeasonalIngredientProductionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SeasonalIngredientProduction DeepCopy(
            this ISeasonalIngredientProductionGetter item,
            out SeasonalIngredientProduction.ErrorMask errorMask,
            SeasonalIngredientProduction.TranslationMask? copyMask = null)
        {
            return ((SeasonalIngredientProductionSetterTranslationCommon)((ISeasonalIngredientProductionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SeasonalIngredientProduction DeepCopy(
            this ISeasonalIngredientProductionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SeasonalIngredientProductionSetterTranslationCommon)((ISeasonalIngredientProductionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISeasonalIngredientProduction item,
            XElement node,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISeasonalIngredientProduction item,
            XElement node,
            out SeasonalIngredientProduction.ErrorMask errorMask,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SeasonalIngredientProduction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ISeasonalIngredientProduction item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((SeasonalIngredientProductionSetterCommon)((ISeasonalIngredientProductionGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISeasonalIngredientProduction item,
            string path,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISeasonalIngredientProduction item,
            string path,
            out SeasonalIngredientProduction.ErrorMask errorMask,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISeasonalIngredientProduction item,
            string path,
            ErrorMaskBuilder? errorMask,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ISeasonalIngredientProduction item,
            Stream stream,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISeasonalIngredientProduction item,
            Stream stream,
            out SeasonalIngredientProduction.ErrorMask errorMask,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISeasonalIngredientProduction item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISeasonalIngredientProduction item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ISeasonalIngredientProduction item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SeasonalIngredientProductionSetterCommon)((ISeasonalIngredientProductionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum SeasonalIngredientProduction_FieldIndex
    {
        Spring = 0,
        Summer = 1,
        Fall = 2,
        Winter = 3,
    }
    #endregion

    #region Registration
    public partial class SeasonalIngredientProduction_Registration : ILoquiRegistration
    {
        public static readonly SeasonalIngredientProduction_Registration Instance = new SeasonalIngredientProduction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 190,
            version: 0);

        public const string GUID = "00b07de3-bac8-4cf6-8f3d-947654512854";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(SeasonalIngredientProduction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SeasonalIngredientProduction.ErrorMask);

        public static readonly Type ClassType = typeof(SeasonalIngredientProduction);

        public static readonly Type GetterType = typeof(ISeasonalIngredientProductionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISeasonalIngredientProduction);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.SeasonalIngredientProduction";

        public const string Name = "SeasonalIngredientProduction";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SPRING":
                    return (ushort)SeasonalIngredientProduction_FieldIndex.Spring;
                case "SUMMER":
                    return (ushort)SeasonalIngredientProduction_FieldIndex.Summer;
                case "FALL":
                    return (ushort)SeasonalIngredientProduction_FieldIndex.Fall;
                case "WINTER":
                    return (ushort)SeasonalIngredientProduction_FieldIndex.Winter;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SeasonalIngredientProduction_FieldIndex enu = (SeasonalIngredientProduction_FieldIndex)index;
            switch (enu)
            {
                case SeasonalIngredientProduction_FieldIndex.Spring:
                case SeasonalIngredientProduction_FieldIndex.Summer:
                case SeasonalIngredientProduction_FieldIndex.Fall:
                case SeasonalIngredientProduction_FieldIndex.Winter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SeasonalIngredientProduction_FieldIndex enu = (SeasonalIngredientProduction_FieldIndex)index;
            switch (enu)
            {
                case SeasonalIngredientProduction_FieldIndex.Spring:
                case SeasonalIngredientProduction_FieldIndex.Summer:
                case SeasonalIngredientProduction_FieldIndex.Fall:
                case SeasonalIngredientProduction_FieldIndex.Winter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SeasonalIngredientProduction_FieldIndex enu = (SeasonalIngredientProduction_FieldIndex)index;
            switch (enu)
            {
                case SeasonalIngredientProduction_FieldIndex.Spring:
                case SeasonalIngredientProduction_FieldIndex.Summer:
                case SeasonalIngredientProduction_FieldIndex.Fall:
                case SeasonalIngredientProduction_FieldIndex.Winter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            SeasonalIngredientProduction_FieldIndex enu = (SeasonalIngredientProduction_FieldIndex)index;
            switch (enu)
            {
                case SeasonalIngredientProduction_FieldIndex.Spring:
                    return "Spring";
                case SeasonalIngredientProduction_FieldIndex.Summer:
                    return "Summer";
                case SeasonalIngredientProduction_FieldIndex.Fall:
                    return "Fall";
                case SeasonalIngredientProduction_FieldIndex.Winter:
                    return "Winter";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SeasonalIngredientProduction_FieldIndex enu = (SeasonalIngredientProduction_FieldIndex)index;
            switch (enu)
            {
                case SeasonalIngredientProduction_FieldIndex.Spring:
                case SeasonalIngredientProduction_FieldIndex.Summer:
                case SeasonalIngredientProduction_FieldIndex.Fall:
                case SeasonalIngredientProduction_FieldIndex.Winter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            SeasonalIngredientProduction_FieldIndex enu = (SeasonalIngredientProduction_FieldIndex)index;
            switch (enu)
            {
                case SeasonalIngredientProduction_FieldIndex.Spring:
                case SeasonalIngredientProduction_FieldIndex.Summer:
                case SeasonalIngredientProduction_FieldIndex.Fall:
                case SeasonalIngredientProduction_FieldIndex.Winter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            SeasonalIngredientProduction_FieldIndex enu = (SeasonalIngredientProduction_FieldIndex)index;
            switch (enu)
            {
                case SeasonalIngredientProduction_FieldIndex.Spring:
                    return typeof(Byte);
                case SeasonalIngredientProduction_FieldIndex.Summer:
                    return typeof(Byte);
                case SeasonalIngredientProduction_FieldIndex.Fall:
                    return typeof(Byte);
                case SeasonalIngredientProduction_FieldIndex.Winter:
                    return typeof(Byte);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SeasonalIngredientProductionXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.PFPC;
        public static readonly Type BinaryWriteTranslation = typeof(SeasonalIngredientProductionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SeasonalIngredientProductionSetterCommon
    {
        public static readonly SeasonalIngredientProductionSetterCommon Instance = new SeasonalIngredientProductionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISeasonalIngredientProduction item)
        {
            ClearPartial();
            item.Spring = default;
            item.Summer = default;
            item.Fall = default;
            item.Winter = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            ISeasonalIngredientProduction item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SeasonalIngredientProductionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISeasonalIngredientProduction item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.PFPC)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: SeasonalIngredientProductionBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class SeasonalIngredientProductionCommon
    {
        public static readonly SeasonalIngredientProductionCommon Instance = new SeasonalIngredientProductionCommon();

        public SeasonalIngredientProduction.Mask<bool> GetEqualsMask(
            ISeasonalIngredientProductionGetter item,
            ISeasonalIngredientProductionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SeasonalIngredientProduction.Mask<bool>(false);
            ((SeasonalIngredientProductionCommon)((ISeasonalIngredientProductionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISeasonalIngredientProductionGetter item,
            ISeasonalIngredientProductionGetter rhs,
            SeasonalIngredientProduction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Spring = item.Spring == rhs.Spring;
            ret.Summer = item.Summer == rhs.Summer;
            ret.Fall = item.Fall == rhs.Fall;
            ret.Winter = item.Winter == rhs.Winter;
        }
        
        public string ToString(
            ISeasonalIngredientProductionGetter item,
            string? name = null,
            SeasonalIngredientProduction.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISeasonalIngredientProductionGetter item,
            FileGeneration fg,
            string? name = null,
            SeasonalIngredientProduction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SeasonalIngredientProduction =>");
            }
            else
            {
                fg.AppendLine($"{name} (SeasonalIngredientProduction) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISeasonalIngredientProductionGetter item,
            FileGeneration fg,
            SeasonalIngredientProduction.Mask<bool>? printMask = null)
        {
            if (printMask?.Spring ?? true)
            {
                fg.AppendItem(item.Spring, "Spring");
            }
            if (printMask?.Summer ?? true)
            {
                fg.AppendItem(item.Summer, "Summer");
            }
            if (printMask?.Fall ?? true)
            {
                fg.AppendItem(item.Fall, "Fall");
            }
            if (printMask?.Winter ?? true)
            {
                fg.AppendItem(item.Winter, "Winter");
            }
        }
        
        public bool HasBeenSet(
            ISeasonalIngredientProductionGetter item,
            SeasonalIngredientProduction.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ISeasonalIngredientProductionGetter item,
            SeasonalIngredientProduction.Mask<bool> mask)
        {
            mask.Spring = true;
            mask.Summer = true;
            mask.Fall = true;
            mask.Winter = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISeasonalIngredientProductionGetter? lhs,
            ISeasonalIngredientProductionGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Spring != rhs.Spring) return false;
            if (lhs.Summer != rhs.Summer) return false;
            if (lhs.Fall != rhs.Fall) return false;
            if (lhs.Winter != rhs.Winter) return false;
            return true;
        }
        
        public virtual int GetHashCode(ISeasonalIngredientProductionGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Spring);
            hash.Add(item.Summer);
            hash.Add(item.Fall);
            hash.Add(item.Winter);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return SeasonalIngredientProduction.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ISeasonalIngredientProductionGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(ISeasonalIngredientProductionGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class SeasonalIngredientProductionSetterTranslationCommon
    {
        public static readonly SeasonalIngredientProductionSetterTranslationCommon Instance = new SeasonalIngredientProductionSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ISeasonalIngredientProduction item,
            ISeasonalIngredientProductionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)SeasonalIngredientProduction_FieldIndex.Spring) ?? true))
            {
                item.Spring = rhs.Spring;
            }
            if ((copyMask?.GetShouldTranslate((int)SeasonalIngredientProduction_FieldIndex.Summer) ?? true))
            {
                item.Summer = rhs.Summer;
            }
            if ((copyMask?.GetShouldTranslate((int)SeasonalIngredientProduction_FieldIndex.Fall) ?? true))
            {
                item.Fall = rhs.Fall;
            }
            if ((copyMask?.GetShouldTranslate((int)SeasonalIngredientProduction_FieldIndex.Winter) ?? true))
            {
                item.Winter = rhs.Winter;
            }
        }
        
        #endregion
        
        public SeasonalIngredientProduction DeepCopy(
            ISeasonalIngredientProductionGetter item,
            SeasonalIngredientProduction.TranslationMask? copyMask = null)
        {
            SeasonalIngredientProduction ret = (SeasonalIngredientProduction)((SeasonalIngredientProductionCommon)((ISeasonalIngredientProductionGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public SeasonalIngredientProduction DeepCopy(
            ISeasonalIngredientProductionGetter item,
            out SeasonalIngredientProduction.ErrorMask errorMask,
            SeasonalIngredientProduction.TranslationMask? copyMask = null)
        {
            SeasonalIngredientProduction ret = (SeasonalIngredientProduction)((SeasonalIngredientProductionCommon)((ISeasonalIngredientProductionGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public SeasonalIngredientProduction DeepCopy(
            ISeasonalIngredientProductionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SeasonalIngredientProduction ret = (SeasonalIngredientProduction)((SeasonalIngredientProductionCommon)((ISeasonalIngredientProductionGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class SeasonalIngredientProduction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SeasonalIngredientProduction_Registration.Instance;
        public static SeasonalIngredientProduction_Registration Registration => SeasonalIngredientProduction_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SeasonalIngredientProductionCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SeasonalIngredientProductionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SeasonalIngredientProductionSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISeasonalIngredientProductionGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISeasonalIngredientProductionGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISeasonalIngredientProductionGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SeasonalIngredientProductionXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static SeasonalIngredientProductionXmlWriteTranslation Instance = new SeasonalIngredientProductionXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISeasonalIngredientProductionGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)SeasonalIngredientProduction_FieldIndex.Spring) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Spring),
                    item: item.Spring,
                    fieldIndex: (int)SeasonalIngredientProduction_FieldIndex.Spring,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SeasonalIngredientProduction_FieldIndex.Summer) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Summer),
                    item: item.Summer,
                    fieldIndex: (int)SeasonalIngredientProduction_FieldIndex.Summer,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SeasonalIngredientProduction_FieldIndex.Fall) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Fall),
                    item: item.Fall,
                    fieldIndex: (int)SeasonalIngredientProduction_FieldIndex.Fall,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SeasonalIngredientProduction_FieldIndex.Winter) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Winter),
                    item: item.Winter,
                    fieldIndex: (int)SeasonalIngredientProduction_FieldIndex.Winter,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ISeasonalIngredientProductionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.SeasonalIngredientProduction");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.SeasonalIngredientProduction");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISeasonalIngredientProductionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ISeasonalIngredientProductionGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ISeasonalIngredientProductionGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class SeasonalIngredientProductionXmlCreateTranslation
    {
        public readonly static SeasonalIngredientProductionXmlCreateTranslation Instance = new SeasonalIngredientProductionXmlCreateTranslation();

        public static void FillPublicXml(
            ISeasonalIngredientProduction item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SeasonalIngredientProductionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISeasonalIngredientProduction item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Spring":
                    errorMask?.PushIndex((int)SeasonalIngredientProduction_FieldIndex.Spring);
                    try
                    {
                        item.Spring = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Summer":
                    errorMask?.PushIndex((int)SeasonalIngredientProduction_FieldIndex.Summer);
                    try
                    {
                        item.Summer = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fall":
                    errorMask?.PushIndex((int)SeasonalIngredientProduction_FieldIndex.Fall);
                    try
                    {
                        item.Fall = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Winter":
                    errorMask?.PushIndex((int)SeasonalIngredientProduction_FieldIndex.Winter);
                    try
                    {
                        item.Winter = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class SeasonalIngredientProductionXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISeasonalIngredientProductionGetter item,
            XElement node,
            out SeasonalIngredientProduction.ErrorMask errorMask,
            SeasonalIngredientProduction.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((SeasonalIngredientProductionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SeasonalIngredientProduction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISeasonalIngredientProductionGetter item,
            string path,
            out SeasonalIngredientProduction.ErrorMask errorMask,
            SeasonalIngredientProduction.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISeasonalIngredientProductionGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISeasonalIngredientProductionGetter item,
            Stream stream,
            out SeasonalIngredientProduction.ErrorMask errorMask,
            SeasonalIngredientProduction.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISeasonalIngredientProductionGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISeasonalIngredientProductionGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((SeasonalIngredientProductionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ISeasonalIngredientProductionGetter item,
            XElement node,
            string? name = null,
            SeasonalIngredientProduction.TranslationMask? translationMask = null)
        {
            ((SeasonalIngredientProductionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ISeasonalIngredientProductionGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((SeasonalIngredientProductionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISeasonalIngredientProductionGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((SeasonalIngredientProductionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SeasonalIngredientProductionBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static SeasonalIngredientProductionBinaryWriteTranslation Instance = new SeasonalIngredientProductionBinaryWriteTranslation();

        public static void WriteEmbedded(
            ISeasonalIngredientProductionGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Spring);
            writer.Write(item.Summer);
            writer.Write(item.Fall);
            writer.Write(item.Winter);
        }

        public void Write(
            MutagenWriter writer,
            ISeasonalIngredientProductionGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.PFPC),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISeasonalIngredientProductionGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SeasonalIngredientProductionBinaryCreateTranslation
    {
        public readonly static SeasonalIngredientProductionBinaryCreateTranslation Instance = new SeasonalIngredientProductionBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ISeasonalIngredientProduction item,
            MutagenFrame frame)
        {
            item.Spring = frame.ReadUInt8();
            item.Summer = frame.ReadUInt8();
            item.Fall = frame.ReadUInt8();
            item.Winter = frame.ReadUInt8();
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class SeasonalIngredientProductionBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISeasonalIngredientProductionGetter item,
            MutagenWriter writer)
        {
            ((SeasonalIngredientProductionBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SeasonalIngredientProductionBinaryOverlay :
        BinaryOverlay,
        ISeasonalIngredientProductionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SeasonalIngredientProduction_Registration.Instance;
        public static SeasonalIngredientProduction_Registration Registration => SeasonalIngredientProduction_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SeasonalIngredientProductionCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SeasonalIngredientProductionSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISeasonalIngredientProductionGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISeasonalIngredientProductionGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISeasonalIngredientProductionGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISeasonalIngredientProductionGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => SeasonalIngredientProductionXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SeasonalIngredientProductionXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SeasonalIngredientProductionBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SeasonalIngredientProductionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Byte Spring => _data.Span[0x0];
        public Byte Summer => _data.Span[0x1];
        public Byte Fall => _data.Span[0x2];
        public Byte Winter => _data.Span[0x3];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SeasonalIngredientProductionBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static SeasonalIngredientProductionBinaryOverlay SeasonalIngredientProductionFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SeasonalIngredientProductionBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x4 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static SeasonalIngredientProductionBinaryOverlay SeasonalIngredientProductionFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return SeasonalIngredientProductionFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SeasonalIngredientProductionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

