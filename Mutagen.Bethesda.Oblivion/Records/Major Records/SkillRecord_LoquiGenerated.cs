/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class SkillRecord :
        OblivionMajorRecord,
        ISkillRecordInternal,
        ILoquiObjectSetter<SkillRecord>,
        IEquatable<SkillRecord>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkillRecord_Registration.Instance;
        public new static SkillRecord_Registration Registration => SkillRecord_Registration.Instance;
        protected override object CommonInstance => SkillRecordCommon.Instance;

        #region Ctor
        protected SkillRecord()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Skill
        public bool Skill_IsSet
        {
            get => _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Skill];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)SkillRecord_FieldIndex.Skill, nameof(Skill_IsSet));
        }
        bool ISkillRecordGetter.Skill_IsSet => Skill_IsSet;
        private ActorValue _Skill;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ActorValue Skill
        {
            get => this._Skill;
            set => Skill_Set(value);
        }
        ActorValue ISkillRecordGetter.Skill => this.Skill;
        public void Skill_Set(
            ActorValue value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Skill, value, _hasBeenSetTracker, markSet, (int)SkillRecord_FieldIndex.Skill, nameof(Skill), nameof(Skill_IsSet));
        }
        public void Skill_Unset()
        {
            this.Skill_Set(default(ActorValue), false);
        }
        #endregion
        #region Description
        public bool Description_IsSet
        {
            get => _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Description];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)SkillRecord_FieldIndex.Description, nameof(Description_IsSet));
        }
        bool ISkillRecordGetter.Description_IsSet => Description_IsSet;
        private String _Description;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Description
        {
            get => this._Description;
            set => Description_Set(value);
        }
        String ISkillRecordGetter.Description => this.Description;
        public void Description_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Description, value, _hasBeenSetTracker, markSet, (int)SkillRecord_FieldIndex.Description, nameof(Description), nameof(Description_IsSet));
        }
        public void Description_Unset()
        {
            this.Description_Set(default(String), false);
        }
        #endregion
        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Icon];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)SkillRecord_FieldIndex.Icon, nameof(Icon_IsSet));
        }
        bool ISkillRecordGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String ISkillRecordGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Icon, value, _hasBeenSetTracker, markSet, (int)SkillRecord_FieldIndex.Icon, nameof(Icon), nameof(Icon_IsSet));
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region Action
        private ActorValue _Action;
        public ActorValue Action
        {
            get => this._Action;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Action, value, nameof(Action));
            }
        }
        #endregion
        #region Attribute
        private ActorValue _Attribute;
        public ActorValue Attribute
        {
            get => this._Attribute;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Attribute, value, nameof(Attribute));
            }
        }
        #endregion
        #region Specialization
        private Specialization _Specialization;
        public Specialization Specialization
        {
            get => this._Specialization;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Specialization, value, nameof(Specialization));
            }
        }
        #endregion
        #region UseValueFirst
        private Single _UseValueFirst;
        public Single UseValueFirst
        {
            get => this._UseValueFirst;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._UseValueFirst, value, nameof(UseValueFirst));
            }
        }
        #endregion
        #region UseValueSecond
        private Single _UseValueSecond;
        public Single UseValueSecond
        {
            get => this._UseValueSecond;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._UseValueSecond, value, nameof(UseValueSecond));
            }
        }
        #endregion
        #region ApprenticeText
        public bool ApprenticeText_IsSet
        {
            get => _hasBeenSetTracker[(int)SkillRecord_FieldIndex.ApprenticeText];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)SkillRecord_FieldIndex.ApprenticeText, nameof(ApprenticeText_IsSet));
        }
        bool ISkillRecordGetter.ApprenticeText_IsSet => ApprenticeText_IsSet;
        private String _ApprenticeText;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String ApprenticeText
        {
            get => this._ApprenticeText;
            set => ApprenticeText_Set(value);
        }
        String ISkillRecordGetter.ApprenticeText => this.ApprenticeText;
        public void ApprenticeText_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _ApprenticeText, value, _hasBeenSetTracker, markSet, (int)SkillRecord_FieldIndex.ApprenticeText, nameof(ApprenticeText), nameof(ApprenticeText_IsSet));
        }
        public void ApprenticeText_Unset()
        {
            this.ApprenticeText_Set(default(String), false);
        }
        #endregion
        #region JourneymanText
        public bool JourneymanText_IsSet
        {
            get => _hasBeenSetTracker[(int)SkillRecord_FieldIndex.JourneymanText];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)SkillRecord_FieldIndex.JourneymanText, nameof(JourneymanText_IsSet));
        }
        bool ISkillRecordGetter.JourneymanText_IsSet => JourneymanText_IsSet;
        private String _JourneymanText;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String JourneymanText
        {
            get => this._JourneymanText;
            set => JourneymanText_Set(value);
        }
        String ISkillRecordGetter.JourneymanText => this.JourneymanText;
        public void JourneymanText_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _JourneymanText, value, _hasBeenSetTracker, markSet, (int)SkillRecord_FieldIndex.JourneymanText, nameof(JourneymanText), nameof(JourneymanText_IsSet));
        }
        public void JourneymanText_Unset()
        {
            this.JourneymanText_Set(default(String), false);
        }
        #endregion
        #region ExpertText
        public bool ExpertText_IsSet
        {
            get => _hasBeenSetTracker[(int)SkillRecord_FieldIndex.ExpertText];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)SkillRecord_FieldIndex.ExpertText, nameof(ExpertText_IsSet));
        }
        bool ISkillRecordGetter.ExpertText_IsSet => ExpertText_IsSet;
        private String _ExpertText;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String ExpertText
        {
            get => this._ExpertText;
            set => ExpertText_Set(value);
        }
        String ISkillRecordGetter.ExpertText => this.ExpertText;
        public void ExpertText_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _ExpertText, value, _hasBeenSetTracker, markSet, (int)SkillRecord_FieldIndex.ExpertText, nameof(ExpertText), nameof(ExpertText_IsSet));
        }
        public void ExpertText_Unset()
        {
            this.ExpertText_Set(default(String), false);
        }
        #endregion
        #region MasterText
        public bool MasterText_IsSet
        {
            get => _hasBeenSetTracker[(int)SkillRecord_FieldIndex.MasterText];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)SkillRecord_FieldIndex.MasterText, nameof(MasterText_IsSet));
        }
        bool ISkillRecordGetter.MasterText_IsSet => MasterText_IsSet;
        private String _MasterText;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String MasterText
        {
            get => this._MasterText;
            set => MasterText_Set(value);
        }
        String ISkillRecordGetter.MasterText => this.MasterText;
        public void MasterText_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _MasterText, value, _hasBeenSetTracker, markSet, (int)SkillRecord_FieldIndex.MasterText, nameof(MasterText), nameof(MasterText_IsSet));
        }
        public void MasterText_Unset()
        {
            this.MasterText_Set(default(String), false);
        }
        #endregion
        #region DATADataTypeState
        private SkillRecord.DATADataType _DATADataTypeState;
        public SkillRecord.DATADataType DATADataTypeState
        {
            get => this._DATADataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._DATADataTypeState, value, nameof(DATADataTypeState));
        }
        SkillRecord.DATADataType ISkillRecordInternal.DATADataTypeState
        {
            get => this.DATADataTypeState;
            set => this.DATADataTypeState = value;
        }
        SkillRecord.DATADataType ISkillRecordInternalGetter.DATADataTypeState
        {
            get => this.DATADataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISkillRecordInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            SkillRecordMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is SkillRecord rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SkillRecord rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Skill_IsSet != rhs.Skill_IsSet) return false;
            if (Skill_IsSet)
            {
                if (this.Skill != rhs.Skill) return false;
            }
            if (Description_IsSet != rhs.Description_IsSet) return false;
            if (Description_IsSet)
            {
                if (!string.Equals(this.Description, rhs.Description)) return false;
            }
            if (Icon_IsSet != rhs.Icon_IsSet) return false;
            if (Icon_IsSet)
            {
                if (!string.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (this.Action != rhs.Action) return false;
            if (this.Attribute != rhs.Attribute) return false;
            if (this.Specialization != rhs.Specialization) return false;
            if (!this.UseValueFirst.EqualsWithin(rhs.UseValueFirst)) return false;
            if (!this.UseValueSecond.EqualsWithin(rhs.UseValueSecond)) return false;
            if (ApprenticeText_IsSet != rhs.ApprenticeText_IsSet) return false;
            if (ApprenticeText_IsSet)
            {
                if (!string.Equals(this.ApprenticeText, rhs.ApprenticeText)) return false;
            }
            if (JourneymanText_IsSet != rhs.JourneymanText_IsSet) return false;
            if (JourneymanText_IsSet)
            {
                if (!string.Equals(this.JourneymanText, rhs.JourneymanText)) return false;
            }
            if (ExpertText_IsSet != rhs.ExpertText_IsSet) return false;
            if (ExpertText_IsSet)
            {
                if (!string.Equals(this.ExpertText, rhs.ExpertText)) return false;
            }
            if (MasterText_IsSet != rhs.MasterText_IsSet) return false;
            if (MasterText_IsSet)
            {
                if (!string.Equals(this.MasterText, rhs.MasterText)) return false;
            }
            if (this.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Skill_IsSet)
            {
                ret = HashHelper.GetHashCode(Skill).CombineHashCode(ret);
            }
            if (Description_IsSet)
            {
                ret = HashHelper.GetHashCode(Description).CombineHashCode(ret);
            }
            if (Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Action).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Attribute).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Specialization).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UseValueFirst).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UseValueSecond).CombineHashCode(ret);
            if (ApprenticeText_IsSet)
            {
                ret = HashHelper.GetHashCode(ApprenticeText).CombineHashCode(ret);
            }
            if (JourneymanText_IsSet)
            {
                ret = HashHelper.GetHashCode(JourneymanText).CombineHashCode(ret);
            }
            if (ExpertText_IsSet)
            {
                ret = HashHelper.GetHashCode(ExpertText).CombineHashCode(ret);
            }
            if (MasterText_IsSet)
            {
                ret = HashHelper.GetHashCode(MasterText).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        protected override IXmlWriteTranslator XmlWriteTranslator => SkillRecordXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static SkillRecord CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            SkillRecord_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SkillRecord CreateFromXml(
            XElement node,
            out SkillRecord_ErrorMask errorMask,
            bool doMasks = true,
            SkillRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = SkillRecord_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static SkillRecord CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new SkillRecord() : null;
                    break;
                default:
                    break;
            }
            var ret = new SkillRecord();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    SkillRecordXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static SkillRecord CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            SkillRecord_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SkillRecord CreateFromXml(
            string path,
            out SkillRecord_ErrorMask errorMask,
            SkillRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkillRecord CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            SkillRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SkillRecord CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            SkillRecord_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SkillRecord CreateFromXml(
            Stream stream,
            out SkillRecord_ErrorMask errorMask,
            SkillRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkillRecord CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            SkillRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            SkillRecord item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= SkillRecord.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                    return _hasBeenSetTracker[index];
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                case SkillRecord_FieldIndex.DATADataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = SkillRecord_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public SkillRecord(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public SkillRecord(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        partial void PostDuplicate(SkillRecord obj, SkillRecord rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new SkillRecord(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        protected override IBinaryWriteTranslator BinaryWriteTranslator => SkillRecordBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static SkillRecord CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static SkillRecord CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out SkillRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SkillRecord_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static SkillRecord CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<SkillRecord>(
                record: new SkillRecord(),
                frame: frame,
                errorMask: errorMask,
                recType: SkillRecord_Registration.SKIL_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            SkillRecord item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            SkillRecord item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x58444E49: // INDX
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (EnumBinaryTranslation<ActorValue>.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out ActorValue SkillParse))
                    {
                        item.Skill = SkillParse;
                    }
                    else
                    {
                        item.Skill = default(ActorValue);
                    }
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.Skill);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String DescriptionParse))
                    {
                        item.Description = DescriptionParse;
                    }
                    else
                    {
                        item.Description = default(String);
                    }
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.Description);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String IconParse))
                    {
                        item.Icon = IconParse;
                    }
                    else
                    {
                        item.Icon = default(String);
                    }
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.Icon);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = DATADataType.Has;
                    }
                    if (EnumBinaryTranslation<ActorValue>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out ActorValue ActionParse))
                    {
                        item.Action = ActionParse;
                    }
                    else
                    {
                        item.Action = default(ActorValue);
                    }
                    if (EnumBinaryTranslation<ActorValue>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out ActorValue AttributeParse))
                    {
                        item.Attribute = AttributeParse;
                    }
                    else
                    {
                        item.Attribute = default(ActorValue);
                    }
                    if (EnumBinaryTranslation<Specialization>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out Specialization SpecializationParse))
                    {
                        item.Specialization = SpecializationParse;
                    }
                    else
                    {
                        item.Specialization = default(Specialization);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single UseValueFirstParse))
                    {
                        item.UseValueFirst = UseValueFirstParse;
                    }
                    else
                    {
                        item.UseValueFirst = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single UseValueSecondParse))
                    {
                        item.UseValueSecond = UseValueSecondParse;
                    }
                    else
                    {
                        item.UseValueSecond = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.UseValueSecond);
                }
                case 0x4D414E41: // ANAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String ApprenticeTextParse))
                    {
                        item.ApprenticeText = ApprenticeTextParse;
                    }
                    else
                    {
                        item.ApprenticeText = default(String);
                    }
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.ApprenticeText);
                }
                case 0x4D414E4A: // JNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String JourneymanTextParse))
                    {
                        item.JourneymanText = JourneymanTextParse;
                    }
                    else
                    {
                        item.JourneymanText = default(String);
                    }
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.JourneymanText);
                }
                case 0x4D414E45: // ENAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String ExpertTextParse))
                    {
                        item.ExpertText = ExpertTextParse;
                    }
                    else
                    {
                        item.ExpertText = default(String);
                    }
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.ExpertText);
                }
                case 0x4D414E4D: // MNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String MasterTextParse))
                    {
                        item.MasterText = MasterTextParse;
                    }
                    else
                    {
                        item.MasterText = default(String);
                    }
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.MasterText);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public SkillRecord Copy(
            SkillRecord_CopyMask copyMask = null,
            SkillRecord def = null)
        {
            return SkillRecord.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static SkillRecord Copy(
            SkillRecord item,
            SkillRecord_CopyMask copyMask = null,
            SkillRecord def = null)
        {
            SkillRecord ret;
            if (item.GetType().Equals(typeof(SkillRecord)))
            {
                ret = new SkillRecord();
            }
            else
            {
                ret = (SkillRecord)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static SkillRecord Copy_ToLoqui(
            SkillRecord item,
            SkillRecord_CopyMask copyMask = null,
            SkillRecord def = null)
        {
            SkillRecord ret;
            if (item.GetType().Equals(typeof(SkillRecord)))
            {
                ret = new SkillRecord() as SkillRecord;
            }
            else
            {
                ret = (SkillRecord)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            SkillRecord rhs,
            SkillRecord_CopyMask copyMask,
            SkillRecord def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            SkillRecord rhs,
            out SkillRecord_ErrorMask errorMask,
            SkillRecord_CopyMask copyMask = null,
            SkillRecord def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SkillRecordCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = SkillRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            SkillRecord rhs,
            ErrorMaskBuilder errorMask,
            SkillRecord_CopyMask copyMask = null,
            SkillRecord def = null)
        {
            SkillRecordCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    this.Skill = (ActorValue)obj;
                    break;
                case SkillRecord_FieldIndex.Description:
                    this.Description = (String)obj;
                    break;
                case SkillRecord_FieldIndex.Icon:
                    this.Icon = (String)obj;
                    break;
                case SkillRecord_FieldIndex.Action:
                    this.Action = (ActorValue)obj;
                    break;
                case SkillRecord_FieldIndex.Attribute:
                    this.Attribute = (ActorValue)obj;
                    break;
                case SkillRecord_FieldIndex.Specialization:
                    this.Specialization = (Specialization)obj;
                    break;
                case SkillRecord_FieldIndex.UseValueFirst:
                    this.UseValueFirst = (Single)obj;
                    break;
                case SkillRecord_FieldIndex.UseValueSecond:
                    this.UseValueSecond = (Single)obj;
                    break;
                case SkillRecord_FieldIndex.ApprenticeText:
                    this.ApprenticeText = (String)obj;
                    break;
                case SkillRecord_FieldIndex.JourneymanText:
                    this.JourneymanText = (String)obj;
                    break;
                case SkillRecord_FieldIndex.ExpertText:
                    this.ExpertText = (String)obj;
                    break;
                case SkillRecord_FieldIndex.MasterText:
                    this.MasterText = (String)obj;
                    break;
                case SkillRecord_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (SkillRecord.DATADataType)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            SkillRecordCommon.Instance.Clear(this);
        }

        public new static SkillRecord Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new SkillRecord();
            foreach (var pair in fields)
            {
                CopyInInternal_SkillRecord(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_SkillRecord(SkillRecord obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out SkillRecord_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    obj.Skill = (ActorValue)pair.Value;
                    break;
                case SkillRecord_FieldIndex.Description:
                    obj.Description = (String)pair.Value;
                    break;
                case SkillRecord_FieldIndex.Icon:
                    obj.Icon = (String)pair.Value;
                    break;
                case SkillRecord_FieldIndex.Action:
                    obj.Action = (ActorValue)pair.Value;
                    break;
                case SkillRecord_FieldIndex.Attribute:
                    obj.Attribute = (ActorValue)pair.Value;
                    break;
                case SkillRecord_FieldIndex.Specialization:
                    obj.Specialization = (Specialization)pair.Value;
                    break;
                case SkillRecord_FieldIndex.UseValueFirst:
                    obj.UseValueFirst = (Single)pair.Value;
                    break;
                case SkillRecord_FieldIndex.UseValueSecond:
                    obj.UseValueSecond = (Single)pair.Value;
                    break;
                case SkillRecord_FieldIndex.ApprenticeText:
                    obj.ApprenticeText = (String)pair.Value;
                    break;
                case SkillRecord_FieldIndex.JourneymanText:
                    obj.JourneymanText = (String)pair.Value;
                    break;
                case SkillRecord_FieldIndex.ExpertText:
                    obj.ExpertText = (String)pair.Value;
                    break;
                case SkillRecord_FieldIndex.MasterText:
                    obj.MasterText = (String)pair.Value;
                    break;
                case SkillRecord_FieldIndex.DATADataTypeState:
                    obj.DATADataTypeState = (SkillRecord.DATADataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ISkillRecord :
        ISkillRecordGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<ISkillRecordInternal>
    {
        new ActorValue Skill { get; set; }
        new bool Skill_IsSet { get; set; }
        void Skill_Set(ActorValue value, bool hasBeenSet = true);
        void Skill_Unset();

        new String Description { get; set; }
        new bool Description_IsSet { get; set; }
        void Description_Set(String value, bool hasBeenSet = true);
        void Description_Unset();

        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String value, bool hasBeenSet = true);
        void Icon_Unset();

        new ActorValue Action { get; set; }

        new ActorValue Attribute { get; set; }

        new Specialization Specialization { get; set; }

        new Single UseValueFirst { get; set; }

        new Single UseValueSecond { get; set; }

        new String ApprenticeText { get; set; }
        new bool ApprenticeText_IsSet { get; set; }
        void ApprenticeText_Set(String value, bool hasBeenSet = true);
        void ApprenticeText_Unset();

        new String JourneymanText { get; set; }
        new bool JourneymanText_IsSet { get; set; }
        void JourneymanText_Set(String value, bool hasBeenSet = true);
        void JourneymanText_Unset();

        new String ExpertText { get; set; }
        new bool ExpertText_IsSet { get; set; }
        void ExpertText_Set(String value, bool hasBeenSet = true);
        void ExpertText_Unset();

        new String MasterText { get; set; }
        new bool MasterText_IsSet { get; set; }
        void MasterText_Set(String value, bool hasBeenSet = true);
        void MasterText_Unset();

        void CopyFieldsFrom(
            SkillRecord rhs,
            ErrorMaskBuilder errorMask = null,
            SkillRecord_CopyMask copyMask = null,
            SkillRecord def = null);
    }

    public partial interface ISkillRecordInternal :
        IOblivionMajorRecordInternal,
        ISkillRecord,
        ISkillRecordInternalGetter
    {
        new SkillRecord.DATADataType DATADataTypeState { get; set; }

    }

    public partial interface ISkillRecordGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<ISkillRecordInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Skill
        ActorValue Skill { get; }
        bool Skill_IsSet { get; }

        #endregion
        #region Description
        String Description { get; }
        bool Description_IsSet { get; }

        #endregion
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region Action
        ActorValue Action { get; }

        #endregion
        #region Attribute
        ActorValue Attribute { get; }

        #endregion
        #region Specialization
        Specialization Specialization { get; }

        #endregion
        #region UseValueFirst
        Single UseValueFirst { get; }

        #endregion
        #region UseValueSecond
        Single UseValueSecond { get; }

        #endregion
        #region ApprenticeText
        String ApprenticeText { get; }
        bool ApprenticeText_IsSet { get; }

        #endregion
        #region JourneymanText
        String JourneymanText { get; }
        bool JourneymanText_IsSet { get; }

        #endregion
        #region ExpertText
        String ExpertText { get; }
        bool ExpertText_IsSet { get; }

        #endregion
        #region MasterText
        String MasterText { get; }
        bool MasterText_IsSet { get; }

        #endregion

    }

    public partial interface ISkillRecordInternalGetter :
        IOblivionMajorRecordInternalGetter,
        ISkillRecordGetter
    {
        #region DATADataTypeState
        SkillRecord.DATADataType DATADataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class SkillRecordMixIn
    {
        public static void Clear(this ISkillRecordInternal item)
        {
            ((SkillRecordCommon)item.CommonInstance).Clear(item: item);
        }

        public static SkillRecord_Mask<bool> GetEqualsMask(
            this ISkillRecordInternalGetter item,
            ISkillRecordInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SkillRecordCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISkillRecordInternalGetter item,
            string name = null,
            SkillRecord_Mask<bool> printMask = null)
        {
            return ((SkillRecordCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISkillRecordInternalGetter item,
            FileGeneration fg,
            string name = null,
            SkillRecord_Mask<bool> printMask = null)
        {
            ((SkillRecordCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISkillRecordInternalGetter item,
            SkillRecord_Mask<bool?> checkMask)
        {
            return ((SkillRecordCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SkillRecord_Mask<bool> GetHasBeenSetMask(this ISkillRecordInternalGetter item)
        {
            var ret = new SkillRecord_Mask<bool>();
            ((SkillRecordCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum SkillRecord_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Skill = 5,
        Description = 6,
        Icon = 7,
        Action = 8,
        Attribute = 9,
        Specialization = 10,
        UseValueFirst = 11,
        UseValueSecond = 12,
        ApprenticeText = 13,
        JourneymanText = 14,
        ExpertText = 15,
        MasterText = 16,
        DATADataTypeState = 17,
    }
    #endregion

    #region Registration
    public class SkillRecord_Registration : ILoquiRegistration
    {
        public static readonly SkillRecord_Registration Instance = new SkillRecord_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 42,
            version: 0);

        public const string GUID = "d6afa219-e0d6-4f44-83d4-2d0298897f4d";

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(SkillRecord_Mask<>);

        public static readonly Type ErrorMaskType = typeof(SkillRecord_ErrorMask);

        public static readonly Type ClassType = typeof(SkillRecord);

        public static readonly Type GetterType = typeof(ISkillRecordGetter);

        public static readonly Type InternalGetterType = typeof(ISkillRecordInternalGetter);

        public static readonly Type SetterType = typeof(ISkillRecord);

        public static readonly Type InternalSetterType = typeof(ISkillRecordInternal);

        public static readonly Type CommonType = typeof(SkillRecordCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.SkillRecord";

        public const string Name = "SkillRecord";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SKILL":
                    return (ushort)SkillRecord_FieldIndex.Skill;
                case "DESCRIPTION":
                    return (ushort)SkillRecord_FieldIndex.Description;
                case "ICON":
                    return (ushort)SkillRecord_FieldIndex.Icon;
                case "ACTION":
                    return (ushort)SkillRecord_FieldIndex.Action;
                case "ATTRIBUTE":
                    return (ushort)SkillRecord_FieldIndex.Attribute;
                case "SPECIALIZATION":
                    return (ushort)SkillRecord_FieldIndex.Specialization;
                case "USEVALUEFIRST":
                    return (ushort)SkillRecord_FieldIndex.UseValueFirst;
                case "USEVALUESECOND":
                    return (ushort)SkillRecord_FieldIndex.UseValueSecond;
                case "APPRENTICETEXT":
                    return (ushort)SkillRecord_FieldIndex.ApprenticeText;
                case "JOURNEYMANTEXT":
                    return (ushort)SkillRecord_FieldIndex.JourneymanText;
                case "EXPERTTEXT":
                    return (ushort)SkillRecord_FieldIndex.ExpertText;
                case "MASTERTEXT":
                    return (ushort)SkillRecord_FieldIndex.MasterText;
                case "DATADATATYPESTATE":
                    return (ushort)SkillRecord_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                case SkillRecord_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                case SkillRecord_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                case SkillRecord_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    return "Skill";
                case SkillRecord_FieldIndex.Description:
                    return "Description";
                case SkillRecord_FieldIndex.Icon:
                    return "Icon";
                case SkillRecord_FieldIndex.Action:
                    return "Action";
                case SkillRecord_FieldIndex.Attribute:
                    return "Attribute";
                case SkillRecord_FieldIndex.Specialization:
                    return "Specialization";
                case SkillRecord_FieldIndex.UseValueFirst:
                    return "UseValueFirst";
                case SkillRecord_FieldIndex.UseValueSecond:
                    return "UseValueSecond";
                case SkillRecord_FieldIndex.ApprenticeText:
                    return "ApprenticeText";
                case SkillRecord_FieldIndex.JourneymanText:
                    return "JourneymanText";
                case SkillRecord_FieldIndex.ExpertText:
                    return "ExpertText";
                case SkillRecord_FieldIndex.MasterText:
                    return "MasterText";
                case SkillRecord_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                case SkillRecord_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                case SkillRecord_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    return typeof(ActorValue);
                case SkillRecord_FieldIndex.Description:
                    return typeof(String);
                case SkillRecord_FieldIndex.Icon:
                    return typeof(String);
                case SkillRecord_FieldIndex.Action:
                    return typeof(ActorValue);
                case SkillRecord_FieldIndex.Attribute:
                    return typeof(ActorValue);
                case SkillRecord_FieldIndex.Specialization:
                    return typeof(Specialization);
                case SkillRecord_FieldIndex.UseValueFirst:
                    return typeof(Single);
                case SkillRecord_FieldIndex.UseValueSecond:
                    return typeof(Single);
                case SkillRecord_FieldIndex.ApprenticeText:
                    return typeof(String);
                case SkillRecord_FieldIndex.JourneymanText:
                    return typeof(String);
                case SkillRecord_FieldIndex.ExpertText:
                    return typeof(String);
                case SkillRecord_FieldIndex.MasterText:
                    return typeof(String);
                case SkillRecord_FieldIndex.DATADataTypeState:
                    return typeof(SkillRecord.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlTranslation = typeof(SkillRecordXmlWriteTranslation);
        public static readonly RecordType SKIL_HEADER = new RecordType("SKIL");
        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType JNAM_HEADER = new RecordType("JNAM");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SKIL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 7;
        public static readonly Type BinaryTranslation = typeof(SkillRecordBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SkillRecordCommon : OblivionMajorRecordCommon
    {
        public static readonly SkillRecordCommon Instance = new SkillRecordCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            SkillRecord item,
            SkillRecord rhs,
            SkillRecord def,
            ErrorMaskBuilder errorMask,
            SkillRecord_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Skill ?? true)
            {
                errorMask?.PushIndex((int)SkillRecord_FieldIndex.Skill);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Skill,
                        rhsHasBeenSet: rhs.Skill_IsSet,
                        defItem: def?.Skill ?? default(ActorValue),
                        defHasBeenSet: def?.Skill_IsSet ?? false,
                        outRhsItem: out var rhsSkillItem,
                        outDefItem: out var defSkillItem))
                    {
                        item.Skill = rhsSkillItem;
                    }
                    else
                    {
                        item.Skill_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Description ?? true)
            {
                errorMask?.PushIndex((int)SkillRecord_FieldIndex.Description);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Description,
                        rhsHasBeenSet: rhs.Description_IsSet,
                        defItem: def?.Description ?? default(String),
                        defHasBeenSet: def?.Description_IsSet ?? false,
                        outRhsItem: out var rhsDescriptionItem,
                        outDefItem: out var defDescriptionItem))
                    {
                        item.Description = rhsDescriptionItem;
                    }
                    else
                    {
                        item.Description_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)SkillRecord_FieldIndex.Icon);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Icon,
                        rhsHasBeenSet: rhs.Icon_IsSet,
                        defItem: def?.Icon ?? default(String),
                        defHasBeenSet: def?.Icon_IsSet ?? false,
                        outRhsItem: out var rhsIconItem,
                        outDefItem: out var defIconItem))
                    {
                        item.Icon = rhsIconItem;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Action ?? true)
            {
                errorMask?.PushIndex((int)SkillRecord_FieldIndex.Action);
                try
                {
                    item.Action = rhs.Action;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Attribute ?? true)
            {
                errorMask?.PushIndex((int)SkillRecord_FieldIndex.Attribute);
                try
                {
                    item.Attribute = rhs.Attribute;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Specialization ?? true)
            {
                errorMask?.PushIndex((int)SkillRecord_FieldIndex.Specialization);
                try
                {
                    item.Specialization = rhs.Specialization;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.UseValueFirst ?? true)
            {
                errorMask?.PushIndex((int)SkillRecord_FieldIndex.UseValueFirst);
                try
                {
                    item.UseValueFirst = rhs.UseValueFirst;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.UseValueSecond ?? true)
            {
                errorMask?.PushIndex((int)SkillRecord_FieldIndex.UseValueSecond);
                try
                {
                    item.UseValueSecond = rhs.UseValueSecond;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ApprenticeText ?? true)
            {
                errorMask?.PushIndex((int)SkillRecord_FieldIndex.ApprenticeText);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.ApprenticeText,
                        rhsHasBeenSet: rhs.ApprenticeText_IsSet,
                        defItem: def?.ApprenticeText ?? default(String),
                        defHasBeenSet: def?.ApprenticeText_IsSet ?? false,
                        outRhsItem: out var rhsApprenticeTextItem,
                        outDefItem: out var defApprenticeTextItem))
                    {
                        item.ApprenticeText = rhsApprenticeTextItem;
                    }
                    else
                    {
                        item.ApprenticeText_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.JourneymanText ?? true)
            {
                errorMask?.PushIndex((int)SkillRecord_FieldIndex.JourneymanText);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.JourneymanText,
                        rhsHasBeenSet: rhs.JourneymanText_IsSet,
                        defItem: def?.JourneymanText ?? default(String),
                        defHasBeenSet: def?.JourneymanText_IsSet ?? false,
                        outRhsItem: out var rhsJourneymanTextItem,
                        outDefItem: out var defJourneymanTextItem))
                    {
                        item.JourneymanText = rhsJourneymanTextItem;
                    }
                    else
                    {
                        item.JourneymanText_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ExpertText ?? true)
            {
                errorMask?.PushIndex((int)SkillRecord_FieldIndex.ExpertText);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.ExpertText,
                        rhsHasBeenSet: rhs.ExpertText_IsSet,
                        defItem: def?.ExpertText ?? default(String),
                        defHasBeenSet: def?.ExpertText_IsSet ?? false,
                        outRhsItem: out var rhsExpertTextItem,
                        outDefItem: out var defExpertTextItem))
                    {
                        item.ExpertText = rhsExpertTextItem;
                    }
                    else
                    {
                        item.ExpertText_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MasterText ?? true)
            {
                errorMask?.PushIndex((int)SkillRecord_FieldIndex.MasterText);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.MasterText,
                        rhsHasBeenSet: rhs.MasterText_IsSet,
                        defItem: def?.MasterText ?? default(String),
                        defHasBeenSet: def?.MasterText_IsSet ?? false,
                        outRhsItem: out var rhsMasterTextItem,
                        outDefItem: out var defMasterTextItem))
                    {
                        item.MasterText = rhsMasterTextItem;
                    }
                    else
                    {
                        item.MasterText_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(ISkillRecordInternal item)
        {
            ClearPartial();
            item.Skill_Unset();
            item.Description_Unset();
            item.Icon_Unset();
            item.Action = default(ActorValue);
            item.Attribute = default(ActorValue);
            item.Specialization = default(Specialization);
            item.UseValueFirst = default(Single);
            item.UseValueSecond = default(Single);
            item.ApprenticeText_Unset();
            item.JourneymanText_Unset();
            item.ExpertText_Unset();
            item.MasterText_Unset();
            base.Clear(item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ISkillRecordInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISkillRecordInternal)item);
        }

        public SkillRecord_Mask<bool> GetEqualsMask(
            ISkillRecordInternalGetter item,
            ISkillRecordInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SkillRecord_Mask<bool>();
            ((SkillRecordCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            ISkillRecordInternalGetter item,
            ISkillRecordInternalGetter rhs,
            SkillRecord_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Skill = item.Skill_IsSet == rhs.Skill_IsSet && item.Skill == rhs.Skill;
            ret.Description = item.Description_IsSet == rhs.Description_IsSet && string.Equals(item.Description, rhs.Description);
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && string.Equals(item.Icon, rhs.Icon);
            ret.Action = item.Action == rhs.Action;
            ret.Attribute = item.Attribute == rhs.Attribute;
            ret.Specialization = item.Specialization == rhs.Specialization;
            ret.UseValueFirst = item.UseValueFirst.EqualsWithin(rhs.UseValueFirst);
            ret.UseValueSecond = item.UseValueSecond.EqualsWithin(rhs.UseValueSecond);
            ret.ApprenticeText = item.ApprenticeText_IsSet == rhs.ApprenticeText_IsSet && string.Equals(item.ApprenticeText, rhs.ApprenticeText);
            ret.JourneymanText = item.JourneymanText_IsSet == rhs.JourneymanText_IsSet && string.Equals(item.JourneymanText, rhs.JourneymanText);
            ret.ExpertText = item.ExpertText_IsSet == rhs.ExpertText_IsSet && string.Equals(item.ExpertText, rhs.ExpertText);
            ret.MasterText = item.MasterText_IsSet == rhs.MasterText_IsSet && string.Equals(item.MasterText, rhs.MasterText);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            ISkillRecordInternalGetter item,
            string name = null,
            SkillRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            ISkillRecordInternalGetter item,
            FileGeneration fg,
            string name = null,
            SkillRecord_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SkillRecord =>");
            }
            else
            {
                fg.AppendLine($"{name} (SkillRecord) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            ISkillRecordInternalGetter item,
            FileGeneration fg,
            SkillRecord_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Skill ?? true)
            {
                fg.AppendLine($"Skill => {item.Skill}");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendLine($"Description => {item.Description}");
            }
            if (printMask?.Icon ?? true)
            {
                fg.AppendLine($"Icon => {item.Icon}");
            }
            if (printMask?.Action ?? true)
            {
                fg.AppendLine($"Action => {item.Action}");
            }
            if (printMask?.Attribute ?? true)
            {
                fg.AppendLine($"Attribute => {item.Attribute}");
            }
            if (printMask?.Specialization ?? true)
            {
                fg.AppendLine($"Specialization => {item.Specialization}");
            }
            if (printMask?.UseValueFirst ?? true)
            {
                fg.AppendLine($"UseValueFirst => {item.UseValueFirst}");
            }
            if (printMask?.UseValueSecond ?? true)
            {
                fg.AppendLine($"UseValueSecond => {item.UseValueSecond}");
            }
            if (printMask?.ApprenticeText ?? true)
            {
                fg.AppendLine($"ApprenticeText => {item.ApprenticeText}");
            }
            if (printMask?.JourneymanText ?? true)
            {
                fg.AppendLine($"JourneymanText => {item.JourneymanText}");
            }
            if (printMask?.ExpertText ?? true)
            {
                fg.AppendLine($"ExpertText => {item.ExpertText}");
            }
            if (printMask?.MasterText ?? true)
            {
                fg.AppendLine($"MasterText => {item.MasterText}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            ISkillRecordInternalGetter item,
            SkillRecord_Mask<bool?> checkMask)
        {
            if (checkMask.Skill.HasValue && checkMask.Skill.Value != item.Skill_IsSet) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_IsSet) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            if (checkMask.ApprenticeText.HasValue && checkMask.ApprenticeText.Value != item.ApprenticeText_IsSet) return false;
            if (checkMask.JourneymanText.HasValue && checkMask.JourneymanText.Value != item.JourneymanText_IsSet) return false;
            if (checkMask.ExpertText.HasValue && checkMask.ExpertText.Value != item.ExpertText_IsSet) return false;
            if (checkMask.MasterText.HasValue && checkMask.MasterText.Value != item.MasterText_IsSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            ISkillRecordInternalGetter item,
            SkillRecord_Mask<bool> mask)
        {
            mask.Skill = item.Skill_IsSet;
            mask.Description = item.Description_IsSet;
            mask.Icon = item.Icon_IsSet;
            mask.Action = true;
            mask.Attribute = true;
            mask.Specialization = true;
            mask.UseValueFirst = true;
            mask.UseValueSecond = true;
            mask.ApprenticeText = item.ApprenticeText_IsSet;
            mask.JourneymanText = item.JourneymanText_IsSet;
            mask.ExpertText = item.ExpertText_IsSet;
            mask.MasterText = item.MasterText_IsSet;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static SkillRecord_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SkillRecord_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (SkillRecord_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (SkillRecord_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (SkillRecord_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (SkillRecord_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static SkillRecord_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SkillRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SkillRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (SkillRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SkillRecord_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class SkillRecordXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static SkillRecordXmlWriteTranslation Instance = new SkillRecordXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISkillRecordInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Skill_IsSet
                && (translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Skill) ?? true))
            {
                EnumXmlTranslation<ActorValue>.Instance.Write(
                    node: node,
                    name: nameof(item.Skill),
                    item: item.Skill,
                    fieldIndex: (int)SkillRecord_FieldIndex.Skill,
                    errorMask: errorMask);
            }
            if (item.Description_IsSet
                && (translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)SkillRecord_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)SkillRecord_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(SkillRecord.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Action) ?? true))
                {
                    EnumXmlTranslation<ActorValue>.Instance.Write(
                        node: node,
                        name: nameof(item.Action),
                        item: item.Action,
                        fieldIndex: (int)SkillRecord_FieldIndex.Action,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Attribute) ?? true))
                {
                    EnumXmlTranslation<ActorValue>.Instance.Write(
                        node: node,
                        name: nameof(item.Attribute),
                        item: item.Attribute,
                        fieldIndex: (int)SkillRecord_FieldIndex.Attribute,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Specialization) ?? true))
                {
                    EnumXmlTranslation<Specialization>.Instance.Write(
                        node: node,
                        name: nameof(item.Specialization),
                        item: item.Specialization,
                        fieldIndex: (int)SkillRecord_FieldIndex.Specialization,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.UseValueFirst) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.UseValueFirst),
                        item: item.UseValueFirst,
                        fieldIndex: (int)SkillRecord_FieldIndex.UseValueFirst,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.UseValueSecond) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.UseValueSecond),
                        item: item.UseValueSecond,
                        fieldIndex: (int)SkillRecord_FieldIndex.UseValueSecond,
                        errorMask: errorMask);
                }
            }
            if (item.ApprenticeText_IsSet
                && (translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.ApprenticeText) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ApprenticeText),
                    item: item.ApprenticeText,
                    fieldIndex: (int)SkillRecord_FieldIndex.ApprenticeText,
                    errorMask: errorMask);
            }
            if (item.JourneymanText_IsSet
                && (translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.JourneymanText) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.JourneymanText),
                    item: item.JourneymanText,
                    fieldIndex: (int)SkillRecord_FieldIndex.JourneymanText,
                    errorMask: errorMask);
            }
            if (item.ExpertText_IsSet
                && (translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.ExpertText) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ExpertText),
                    item: item.ExpertText,
                    fieldIndex: (int)SkillRecord_FieldIndex.ExpertText,
                    errorMask: errorMask);
            }
            if (item.MasterText_IsSet
                && (translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.MasterText) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MasterText),
                    item: item.MasterText,
                    fieldIndex: (int)SkillRecord_FieldIndex.MasterText,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<SkillRecord.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)SkillRecord_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ISkillRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.SkillRecord");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.SkillRecord");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISkillRecordInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISkillRecordInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISkillRecordInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class SkillRecordXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static SkillRecordXmlCreateTranslation Instance = new SkillRecordXmlCreateTranslation();

        public static void FillPublicXml(
            ISkillRecordInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SkillRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISkillRecordInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Skill":
                    try
                    {
                        errorMask?.PushIndex((int)SkillRecord_FieldIndex.Skill);
                        if (EnumXmlTranslation<ActorValue>.Instance.Parse(
                            node: node,
                            item: out ActorValue SkillParse,
                            errorMask: errorMask))
                        {
                            item.Skill = SkillParse;
                        }
                        else
                        {
                            item.Skill = default(ActorValue);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    try
                    {
                        errorMask?.PushIndex((int)SkillRecord_FieldIndex.Description);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String DescriptionParse,
                            errorMask: errorMask))
                        {
                            item.Description = DescriptionParse;
                        }
                        else
                        {
                            item.Description = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)SkillRecord_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Action":
                    try
                    {
                        errorMask?.PushIndex((int)SkillRecord_FieldIndex.Action);
                        if (EnumXmlTranslation<ActorValue>.Instance.Parse(
                            node: node,
                            item: out ActorValue ActionParse,
                            errorMask: errorMask))
                        {
                            item.Action = ActionParse;
                        }
                        else
                        {
                            item.Action = default(ActorValue);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= SkillRecord.DATADataType.Has;
                    break;
                case "Attribute":
                    try
                    {
                        errorMask?.PushIndex((int)SkillRecord_FieldIndex.Attribute);
                        if (EnumXmlTranslation<ActorValue>.Instance.Parse(
                            node: node,
                            item: out ActorValue AttributeParse,
                            errorMask: errorMask))
                        {
                            item.Attribute = AttributeParse;
                        }
                        else
                        {
                            item.Attribute = default(ActorValue);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Specialization":
                    try
                    {
                        errorMask?.PushIndex((int)SkillRecord_FieldIndex.Specialization);
                        if (EnumXmlTranslation<Specialization>.Instance.Parse(
                            node: node,
                            item: out Specialization SpecializationParse,
                            errorMask: errorMask))
                        {
                            item.Specialization = SpecializationParse;
                        }
                        else
                        {
                            item.Specialization = default(Specialization);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UseValueFirst":
                    try
                    {
                        errorMask?.PushIndex((int)SkillRecord_FieldIndex.UseValueFirst);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single UseValueFirstParse,
                            errorMask: errorMask))
                        {
                            item.UseValueFirst = UseValueFirstParse;
                        }
                        else
                        {
                            item.UseValueFirst = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UseValueSecond":
                    try
                    {
                        errorMask?.PushIndex((int)SkillRecord_FieldIndex.UseValueSecond);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single UseValueSecondParse,
                            errorMask: errorMask))
                        {
                            item.UseValueSecond = UseValueSecondParse;
                        }
                        else
                        {
                            item.UseValueSecond = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ApprenticeText":
                    try
                    {
                        errorMask?.PushIndex((int)SkillRecord_FieldIndex.ApprenticeText);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String ApprenticeTextParse,
                            errorMask: errorMask))
                        {
                            item.ApprenticeText = ApprenticeTextParse;
                        }
                        else
                        {
                            item.ApprenticeText = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "JourneymanText":
                    try
                    {
                        errorMask?.PushIndex((int)SkillRecord_FieldIndex.JourneymanText);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String JourneymanTextParse,
                            errorMask: errorMask))
                        {
                            item.JourneymanText = JourneymanTextParse;
                        }
                        else
                        {
                            item.JourneymanText = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ExpertText":
                    try
                    {
                        errorMask?.PushIndex((int)SkillRecord_FieldIndex.ExpertText);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String ExpertTextParse,
                            errorMask: errorMask))
                        {
                            item.ExpertText = ExpertTextParse;
                        }
                        else
                        {
                            item.ExpertText = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MasterText":
                    try
                    {
                        errorMask?.PushIndex((int)SkillRecord_FieldIndex.MasterText);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String MasterTextParse,
                            errorMask: errorMask))
                        {
                            item.MasterText = MasterTextParse;
                        }
                        else
                        {
                            item.MasterText = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)SkillRecord_FieldIndex.DATADataTypeState);
                        if (EnumXmlTranslation<SkillRecord.DATADataType>.Instance.Parse(
                            node: node,
                            item: out SkillRecord.DATADataType DATADataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.DATADataTypeState = DATADataTypeStateParse;
                        }
                        else
                        {
                            item.DATADataTypeState = default(SkillRecord.DATADataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class SkillRecordXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISkillRecordInternalGetter item,
            XElement node,
            out SkillRecord_ErrorMask errorMask,
            bool doMasks = true,
            SkillRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SkillRecordXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkillRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISkillRecordInternalGetter item,
            string path,
            out SkillRecord_ErrorMask errorMask,
            SkillRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkillRecordInternalGetter item,
            Stream stream,
            out SkillRecord_ErrorMask errorMask,
            SkillRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class SkillRecord_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<SkillRecord_Mask<T>>
    {
        #region Ctors
        public SkillRecord_Mask()
        {
        }

        public SkillRecord_Mask(T initialValue)
        {
            this.Skill = initialValue;
            this.Description = initialValue;
            this.Icon = initialValue;
            this.Action = initialValue;
            this.Attribute = initialValue;
            this.Specialization = initialValue;
            this.UseValueFirst = initialValue;
            this.UseValueSecond = initialValue;
            this.ApprenticeText = initialValue;
            this.JourneymanText = initialValue;
            this.ExpertText = initialValue;
            this.MasterText = initialValue;
            this.DATADataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Skill;
        public T Description;
        public T Icon;
        public T Action;
        public T Attribute;
        public T Specialization;
        public T UseValueFirst;
        public T UseValueSecond;
        public T ApprenticeText;
        public T JourneymanText;
        public T ExpertText;
        public T MasterText;
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is SkillRecord_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SkillRecord_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Skill, rhs.Skill)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Action, rhs.Action)) return false;
            if (!object.Equals(this.Attribute, rhs.Attribute)) return false;
            if (!object.Equals(this.Specialization, rhs.Specialization)) return false;
            if (!object.Equals(this.UseValueFirst, rhs.UseValueFirst)) return false;
            if (!object.Equals(this.UseValueSecond, rhs.UseValueSecond)) return false;
            if (!object.Equals(this.ApprenticeText, rhs.ApprenticeText)) return false;
            if (!object.Equals(this.JourneymanText, rhs.JourneymanText)) return false;
            if (!object.Equals(this.ExpertText, rhs.ExpertText)) return false;
            if (!object.Equals(this.MasterText, rhs.MasterText)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Skill?.GetHashCode());
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Action?.GetHashCode());
            ret = ret.CombineHashCode(this.Attribute?.GetHashCode());
            ret = ret.CombineHashCode(this.Specialization?.GetHashCode());
            ret = ret.CombineHashCode(this.UseValueFirst?.GetHashCode());
            ret = ret.CombineHashCode(this.UseValueSecond?.GetHashCode());
            ret = ret.CombineHashCode(this.ApprenticeText?.GetHashCode());
            ret = ret.CombineHashCode(this.JourneymanText?.GetHashCode());
            ret = ret.CombineHashCode(this.ExpertText?.GetHashCode());
            ret = ret.CombineHashCode(this.MasterText?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Skill)) return false;
            if (!eval(this.Description)) return false;
            if (!eval(this.Icon)) return false;
            if (!eval(this.Action)) return false;
            if (!eval(this.Attribute)) return false;
            if (!eval(this.Specialization)) return false;
            if (!eval(this.UseValueFirst)) return false;
            if (!eval(this.UseValueSecond)) return false;
            if (!eval(this.ApprenticeText)) return false;
            if (!eval(this.JourneymanText)) return false;
            if (!eval(this.ExpertText)) return false;
            if (!eval(this.MasterText)) return false;
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new SkillRecord_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new SkillRecord_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(SkillRecord_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Skill = eval(this.Skill);
            obj.Description = eval(this.Description);
            obj.Icon = eval(this.Icon);
            obj.Action = eval(this.Action);
            obj.Attribute = eval(this.Attribute);
            obj.Specialization = eval(this.Specialization);
            obj.UseValueFirst = eval(this.UseValueFirst);
            obj.UseValueSecond = eval(this.UseValueSecond);
            obj.ApprenticeText = eval(this.ApprenticeText);
            obj.JourneymanText = eval(this.JourneymanText);
            obj.ExpertText = eval(this.ExpertText);
            obj.MasterText = eval(this.MasterText);
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(SkillRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, SkillRecord_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(SkillRecord_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Skill ?? true)
                {
                    fg.AppendLine($"Skill => {Skill}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Action ?? true)
                {
                    fg.AppendLine($"Action => {Action}");
                }
                if (printMask?.Attribute ?? true)
                {
                    fg.AppendLine($"Attribute => {Attribute}");
                }
                if (printMask?.Specialization ?? true)
                {
                    fg.AppendLine($"Specialization => {Specialization}");
                }
                if (printMask?.UseValueFirst ?? true)
                {
                    fg.AppendLine($"UseValueFirst => {UseValueFirst}");
                }
                if (printMask?.UseValueSecond ?? true)
                {
                    fg.AppendLine($"UseValueSecond => {UseValueSecond}");
                }
                if (printMask?.ApprenticeText ?? true)
                {
                    fg.AppendLine($"ApprenticeText => {ApprenticeText}");
                }
                if (printMask?.JourneymanText ?? true)
                {
                    fg.AppendLine($"JourneymanText => {JourneymanText}");
                }
                if (printMask?.ExpertText ?? true)
                {
                    fg.AppendLine($"ExpertText => {ExpertText}");
                }
                if (printMask?.MasterText ?? true)
                {
                    fg.AppendLine($"MasterText => {MasterText}");
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class SkillRecord_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<SkillRecord_ErrorMask>
    {
        #region Members
        public Exception Skill;
        public Exception Description;
        public Exception Icon;
        public Exception Action;
        public Exception Attribute;
        public Exception Specialization;
        public Exception UseValueFirst;
        public Exception UseValueSecond;
        public Exception ApprenticeText;
        public Exception JourneymanText;
        public Exception ExpertText;
        public Exception MasterText;
        public Exception DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    return Skill;
                case SkillRecord_FieldIndex.Description:
                    return Description;
                case SkillRecord_FieldIndex.Icon:
                    return Icon;
                case SkillRecord_FieldIndex.Action:
                    return Action;
                case SkillRecord_FieldIndex.Attribute:
                    return Attribute;
                case SkillRecord_FieldIndex.Specialization:
                    return Specialization;
                case SkillRecord_FieldIndex.UseValueFirst:
                    return UseValueFirst;
                case SkillRecord_FieldIndex.UseValueSecond:
                    return UseValueSecond;
                case SkillRecord_FieldIndex.ApprenticeText:
                    return ApprenticeText;
                case SkillRecord_FieldIndex.JourneymanText:
                    return JourneymanText;
                case SkillRecord_FieldIndex.ExpertText:
                    return ExpertText;
                case SkillRecord_FieldIndex.MasterText:
                    return MasterText;
                case SkillRecord_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    this.Skill = ex;
                    break;
                case SkillRecord_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case SkillRecord_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case SkillRecord_FieldIndex.Action:
                    this.Action = ex;
                    break;
                case SkillRecord_FieldIndex.Attribute:
                    this.Attribute = ex;
                    break;
                case SkillRecord_FieldIndex.Specialization:
                    this.Specialization = ex;
                    break;
                case SkillRecord_FieldIndex.UseValueFirst:
                    this.UseValueFirst = ex;
                    break;
                case SkillRecord_FieldIndex.UseValueSecond:
                    this.UseValueSecond = ex;
                    break;
                case SkillRecord_FieldIndex.ApprenticeText:
                    this.ApprenticeText = ex;
                    break;
                case SkillRecord_FieldIndex.JourneymanText:
                    this.JourneymanText = ex;
                    break;
                case SkillRecord_FieldIndex.ExpertText:
                    this.ExpertText = ex;
                    break;
                case SkillRecord_FieldIndex.MasterText:
                    this.MasterText = ex;
                    break;
                case SkillRecord_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    this.Skill = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.Action:
                    this.Action = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.Attribute:
                    this.Attribute = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.Specialization:
                    this.Specialization = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.UseValueFirst:
                    this.UseValueFirst = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.UseValueSecond:
                    this.UseValueSecond = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.ApprenticeText:
                    this.ApprenticeText = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.JourneymanText:
                    this.JourneymanText = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.ExpertText:
                    this.ExpertText = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.MasterText:
                    this.MasterText = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Skill != null) return true;
            if (Description != null) return true;
            if (Icon != null) return true;
            if (Action != null) return true;
            if (Attribute != null) return true;
            if (Specialization != null) return true;
            if (UseValueFirst != null) return true;
            if (UseValueSecond != null) return true;
            if (ApprenticeText != null) return true;
            if (JourneymanText != null) return true;
            if (ExpertText != null) return true;
            if (MasterText != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("SkillRecord_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Skill => {Skill}");
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Action => {Action}");
            fg.AppendLine($"Attribute => {Attribute}");
            fg.AppendLine($"Specialization => {Specialization}");
            fg.AppendLine($"UseValueFirst => {UseValueFirst}");
            fg.AppendLine($"UseValueSecond => {UseValueSecond}");
            fg.AppendLine($"ApprenticeText => {ApprenticeText}");
            fg.AppendLine($"JourneymanText => {JourneymanText}");
            fg.AppendLine($"ExpertText => {ExpertText}");
            fg.AppendLine($"MasterText => {MasterText}");
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public SkillRecord_ErrorMask Combine(SkillRecord_ErrorMask rhs)
        {
            var ret = new SkillRecord_ErrorMask();
            ret.Skill = this.Skill.Combine(rhs.Skill);
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Action = this.Action.Combine(rhs.Action);
            ret.Attribute = this.Attribute.Combine(rhs.Attribute);
            ret.Specialization = this.Specialization.Combine(rhs.Specialization);
            ret.UseValueFirst = this.UseValueFirst.Combine(rhs.UseValueFirst);
            ret.UseValueSecond = this.UseValueSecond.Combine(rhs.UseValueSecond);
            ret.ApprenticeText = this.ApprenticeText.Combine(rhs.ApprenticeText);
            ret.JourneymanText = this.JourneymanText.Combine(rhs.JourneymanText);
            ret.ExpertText = this.ExpertText.Combine(rhs.ExpertText);
            ret.MasterText = this.MasterText.Combine(rhs.MasterText);
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static SkillRecord_ErrorMask Combine(SkillRecord_ErrorMask lhs, SkillRecord_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static SkillRecord_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new SkillRecord_ErrorMask();
        }
        #endregion

    }
    public class SkillRecord_CopyMask : OblivionMajorRecord_CopyMask
    {
        public SkillRecord_CopyMask()
        {
        }

        public SkillRecord_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Skill = defaultOn;
            this.Description = defaultOn;
            this.Icon = defaultOn;
            this.Action = defaultOn;
            this.Attribute = defaultOn;
            this.Specialization = defaultOn;
            this.UseValueFirst = defaultOn;
            this.UseValueSecond = defaultOn;
            this.ApprenticeText = defaultOn;
            this.JourneymanText = defaultOn;
            this.ExpertText = defaultOn;
            this.MasterText = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #region Members
        public bool Skill;
        public bool Description;
        public bool Icon;
        public bool Action;
        public bool Attribute;
        public bool Specialization;
        public bool UseValueFirst;
        public bool UseValueSecond;
        public bool ApprenticeText;
        public bool JourneymanText;
        public bool ExpertText;
        public bool MasterText;
        public bool DATADataTypeState;
        #endregion

    }

    public class SkillRecord_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Skill;
        public bool Description;
        public bool Icon;
        public bool Action;
        public bool Attribute;
        public bool Specialization;
        public bool UseValueFirst;
        public bool UseValueSecond;
        public bool ApprenticeText;
        public bool JourneymanText;
        public bool ExpertText;
        public bool MasterText;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public SkillRecord_TranslationMask()
            : base()
        {
        }

        public SkillRecord_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Skill = defaultOn;
            this.Description = defaultOn;
            this.Icon = defaultOn;
            this.Action = defaultOn;
            this.Attribute = defaultOn;
            this.Specialization = defaultOn;
            this.UseValueFirst = defaultOn;
            this.UseValueSecond = defaultOn;
            this.ApprenticeText = defaultOn;
            this.JourneymanText = defaultOn;
            this.ExpertText = defaultOn;
            this.MasterText = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Skill, null));
            ret.Add((Description, null));
            ret.Add((Icon, null));
            ret.Add((Action, null));
            ret.Add((Attribute, null));
            ret.Add((Specialization, null));
            ret.Add((UseValueFirst, null));
            ret.Add((UseValueSecond, null));
            ret.Add((ApprenticeText, null));
            ret.Add((JourneymanText, null));
            ret.Add((ExpertText, null));
            ret.Add((MasterText, null));
            ret.Add((DATADataTypeState, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class SkillRecordBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static SkillRecordBinaryWriteTranslation Instance = new SkillRecordBinaryWriteTranslation();

        public static void Write_Embedded(
            ISkillRecordInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            ISkillRecordInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Skill_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                    writer,
                    item.Skill,
                    length: 4,
                    header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.INDX_HEADER),
                    nullable: false);
            }
            if (item.Description_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Description,
                    header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.DESC_HEADER),
                    nullable: false);
            }
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.DATADataTypeState.HasFlag(SkillRecord.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(SkillRecord_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                        writer,
                        item.Action,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                        writer,
                        item.Attribute,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Specialization>.Instance.Write(
                        writer,
                        item.Specialization,
                        length: 4);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.UseValueFirst);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.UseValueSecond);
                }
            }
            if (item.ApprenticeText_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ApprenticeText,
                    header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.ANAM_HEADER),
                    nullable: false);
            }
            if (item.JourneymanText_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.JourneymanText,
                    header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.JNAM_HEADER),
                    nullable: false);
            }
            if (item.ExpertText_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ExpertText,
                    header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.ENAM_HEADER),
                    nullable: false);
            }
            if (item.MasterText_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MasterText,
                    header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.MNAM_HEADER),
                    nullable: false);
            }
        }

        public void Write(
            MutagenWriter writer,
            ISkillRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: SkillRecord_Registration.SKIL_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ISkillRecordInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ISkillRecordInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ISkillRecordInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class SkillRecordBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static SkillRecordBinaryCreateTranslation Instance = new SkillRecordBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class SkillRecordBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISkillRecordInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out SkillRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SkillRecordBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SkillRecord_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    #endregion

    #endregion

}
