/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Loqui.Internal;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class SkillRecord : 
        MajorRecord,
        ISkillRecord,
        ILoquiObject<SkillRecord>,
        ILoquiObjectSetter,
        IPropertySupporter<ActorValue>,
        IPropertySupporter<String>,
        IPropertySupporter<Specialization>,
        IPropertySupporter<Single>,
        IEquatable<SkillRecord>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkillRecord_Registration.Instance;
        public new static SkillRecord_Registration Registration => SkillRecord_Registration.Instance;

        #region Ctor
        public SkillRecord()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Skill
        protected ActorValue _Skill;
        protected PropertyForwarder<SkillRecord, ActorValue> _SkillForwarder;
        public INotifyingSetItem<ActorValue> Skill_Property => _SkillForwarder ?? (_SkillForwarder = new PropertyForwarder<SkillRecord, ActorValue>(this, (int)SkillRecord_FieldIndex.Skill));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ActorValue Skill
        {
            get => this._Skill;
            set => this.SetSkill(value);
        }
        protected void SetSkill(
            ActorValue item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Skill];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Skill == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Skill] = hasBeenSet;
            }
            if (_ActorValue_subscriptions != null)
            {
                var tmp = Skill;
                _Skill = item;
                _ActorValue_subscriptions.FireSubscriptions(
                    index: (int)SkillRecord_FieldIndex.Skill,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Skill = item;
            }
        }
        protected void UnsetSkill()
        {
            _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Skill] = false;
            Skill = default(ActorValue);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<ActorValue> ISkillRecord.Skill_Property => this.Skill_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<ActorValue> ISkillRecordGetter.Skill_Property => this.Skill_Property;
        #endregion
        #region Description
        protected String _Description;
        protected PropertyForwarder<SkillRecord, String> _DescriptionForwarder;
        public INotifyingSetItem<String> Description_Property => _DescriptionForwarder ?? (_DescriptionForwarder = new PropertyForwarder<SkillRecord, String>(this, (int)SkillRecord_FieldIndex.Description));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Description
        {
            get => this._Description;
            set => this.SetDescription(value);
        }
        protected void SetDescription(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Description];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Description == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Description] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = Description;
                _Description = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)SkillRecord_FieldIndex.Description,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Description = item;
            }
        }
        protected void UnsetDescription()
        {
            _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Description] = false;
            Description = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> ISkillRecord.Description_Property => this.Description_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> ISkillRecordGetter.Description_Property => this.Description_Property;
        #endregion
        #region Icon
        protected String _Icon;
        protected PropertyForwarder<SkillRecord, String> _IconForwarder;
        public INotifyingSetItem<String> Icon_Property => _IconForwarder ?? (_IconForwarder = new PropertyForwarder<SkillRecord, String>(this, (int)SkillRecord_FieldIndex.Icon));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => this.SetIcon(value);
        }
        protected void SetIcon(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Icon];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Icon == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Icon] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = Icon;
                _Icon = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)SkillRecord_FieldIndex.Icon,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Icon = item;
            }
        }
        protected void UnsetIcon()
        {
            _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Icon] = false;
            Icon = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> ISkillRecord.Icon_Property => this.Icon_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> ISkillRecordGetter.Icon_Property => this.Icon_Property;
        #endregion
        #region Action
        protected ActorValue _Action;
        protected PropertyForwarder<SkillRecord, ActorValue> _ActionForwarder;
        public INotifyingSetItem<ActorValue> Action_Property => _ActionForwarder ?? (_ActionForwarder = new PropertyForwarder<SkillRecord, ActorValue>(this, (int)SkillRecord_FieldIndex.Action));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ActorValue Action
        {
            get => this._Action;
            set => this.SetAction(value);
        }
        protected void SetAction(
            ActorValue item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Action];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Action == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Action] = hasBeenSet;
            }
            if (_ActorValue_subscriptions != null)
            {
                var tmp = Action;
                _Action = item;
                _ActorValue_subscriptions.FireSubscriptions(
                    index: (int)SkillRecord_FieldIndex.Action,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Action = item;
            }
        }
        protected void UnsetAction()
        {
            _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Action] = false;
            Action = default(ActorValue);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<ActorValue> ISkillRecord.Action_Property => this.Action_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<ActorValue> ISkillRecordGetter.Action_Property => this.Action_Property;
        #endregion
        #region Attribute
        protected ActorValue _Attribute;
        protected PropertyForwarder<SkillRecord, ActorValue> _AttributeForwarder;
        public INotifyingSetItem<ActorValue> Attribute_Property => _AttributeForwarder ?? (_AttributeForwarder = new PropertyForwarder<SkillRecord, ActorValue>(this, (int)SkillRecord_FieldIndex.Attribute));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ActorValue Attribute
        {
            get => this._Attribute;
            set => this.SetAttribute(value);
        }
        protected void SetAttribute(
            ActorValue item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Attribute];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Attribute == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Attribute] = hasBeenSet;
            }
            if (_ActorValue_subscriptions != null)
            {
                var tmp = Attribute;
                _Attribute = item;
                _ActorValue_subscriptions.FireSubscriptions(
                    index: (int)SkillRecord_FieldIndex.Attribute,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Attribute = item;
            }
        }
        protected void UnsetAttribute()
        {
            _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Attribute] = false;
            Attribute = default(ActorValue);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<ActorValue> ISkillRecord.Attribute_Property => this.Attribute_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<ActorValue> ISkillRecordGetter.Attribute_Property => this.Attribute_Property;
        #endregion
        #region Specialization
        protected Specialization _Specialization;
        protected PropertyForwarder<SkillRecord, Specialization> _SpecializationForwarder;
        public INotifyingSetItem<Specialization> Specialization_Property => _SpecializationForwarder ?? (_SpecializationForwarder = new PropertyForwarder<SkillRecord, Specialization>(this, (int)SkillRecord_FieldIndex.Specialization));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Specialization Specialization
        {
            get => this._Specialization;
            set => this.SetSpecialization(value);
        }
        protected void SetSpecialization(
            Specialization item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Specialization];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Specialization == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Specialization] = hasBeenSet;
            }
            if (_Specialization_subscriptions != null)
            {
                var tmp = Specialization;
                _Specialization = item;
                _Specialization_subscriptions.FireSubscriptions(
                    index: (int)SkillRecord_FieldIndex.Specialization,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Specialization = item;
            }
        }
        protected void UnsetSpecialization()
        {
            _hasBeenSetTracker[(int)SkillRecord_FieldIndex.Specialization] = false;
            Specialization = default(Specialization);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Specialization> ISkillRecord.Specialization_Property => this.Specialization_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Specialization> ISkillRecordGetter.Specialization_Property => this.Specialization_Property;
        #endregion
        #region UseValueFirst
        protected Single _UseValueFirst;
        protected PropertyForwarder<SkillRecord, Single> _UseValueFirstForwarder;
        public INotifyingSetItem<Single> UseValueFirst_Property => _UseValueFirstForwarder ?? (_UseValueFirstForwarder = new PropertyForwarder<SkillRecord, Single>(this, (int)SkillRecord_FieldIndex.UseValueFirst));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single UseValueFirst
        {
            get => this._UseValueFirst;
            set => this.SetUseValueFirst(value);
        }
        protected void SetUseValueFirst(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)SkillRecord_FieldIndex.UseValueFirst];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && UseValueFirst == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)SkillRecord_FieldIndex.UseValueFirst] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = UseValueFirst;
                _UseValueFirst = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)SkillRecord_FieldIndex.UseValueFirst,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _UseValueFirst = item;
            }
        }
        protected void UnsetUseValueFirst()
        {
            _hasBeenSetTracker[(int)SkillRecord_FieldIndex.UseValueFirst] = false;
            UseValueFirst = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ISkillRecord.UseValueFirst_Property => this.UseValueFirst_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ISkillRecordGetter.UseValueFirst_Property => this.UseValueFirst_Property;
        #endregion
        #region UseValueSecond
        protected Single _UseValueSecond;
        protected PropertyForwarder<SkillRecord, Single> _UseValueSecondForwarder;
        public INotifyingSetItem<Single> UseValueSecond_Property => _UseValueSecondForwarder ?? (_UseValueSecondForwarder = new PropertyForwarder<SkillRecord, Single>(this, (int)SkillRecord_FieldIndex.UseValueSecond));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single UseValueSecond
        {
            get => this._UseValueSecond;
            set => this.SetUseValueSecond(value);
        }
        protected void SetUseValueSecond(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)SkillRecord_FieldIndex.UseValueSecond];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && UseValueSecond == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)SkillRecord_FieldIndex.UseValueSecond] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = UseValueSecond;
                _UseValueSecond = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)SkillRecord_FieldIndex.UseValueSecond,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _UseValueSecond = item;
            }
        }
        protected void UnsetUseValueSecond()
        {
            _hasBeenSetTracker[(int)SkillRecord_FieldIndex.UseValueSecond] = false;
            UseValueSecond = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ISkillRecord.UseValueSecond_Property => this.UseValueSecond_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ISkillRecordGetter.UseValueSecond_Property => this.UseValueSecond_Property;
        #endregion
        #region ApprenticeText
        protected String _ApprenticeText;
        protected PropertyForwarder<SkillRecord, String> _ApprenticeTextForwarder;
        public INotifyingSetItem<String> ApprenticeText_Property => _ApprenticeTextForwarder ?? (_ApprenticeTextForwarder = new PropertyForwarder<SkillRecord, String>(this, (int)SkillRecord_FieldIndex.ApprenticeText));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String ApprenticeText
        {
            get => this._ApprenticeText;
            set => this.SetApprenticeText(value);
        }
        protected void SetApprenticeText(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)SkillRecord_FieldIndex.ApprenticeText];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ApprenticeText == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)SkillRecord_FieldIndex.ApprenticeText] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = ApprenticeText;
                _ApprenticeText = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)SkillRecord_FieldIndex.ApprenticeText,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ApprenticeText = item;
            }
        }
        protected void UnsetApprenticeText()
        {
            _hasBeenSetTracker[(int)SkillRecord_FieldIndex.ApprenticeText] = false;
            ApprenticeText = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> ISkillRecord.ApprenticeText_Property => this.ApprenticeText_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> ISkillRecordGetter.ApprenticeText_Property => this.ApprenticeText_Property;
        #endregion
        #region JourneymanText
        protected String _JourneymanText;
        protected PropertyForwarder<SkillRecord, String> _JourneymanTextForwarder;
        public INotifyingSetItem<String> JourneymanText_Property => _JourneymanTextForwarder ?? (_JourneymanTextForwarder = new PropertyForwarder<SkillRecord, String>(this, (int)SkillRecord_FieldIndex.JourneymanText));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String JourneymanText
        {
            get => this._JourneymanText;
            set => this.SetJourneymanText(value);
        }
        protected void SetJourneymanText(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)SkillRecord_FieldIndex.JourneymanText];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && JourneymanText == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)SkillRecord_FieldIndex.JourneymanText] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = JourneymanText;
                _JourneymanText = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)SkillRecord_FieldIndex.JourneymanText,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _JourneymanText = item;
            }
        }
        protected void UnsetJourneymanText()
        {
            _hasBeenSetTracker[(int)SkillRecord_FieldIndex.JourneymanText] = false;
            JourneymanText = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> ISkillRecord.JourneymanText_Property => this.JourneymanText_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> ISkillRecordGetter.JourneymanText_Property => this.JourneymanText_Property;
        #endregion
        #region ExpertText
        protected String _ExpertText;
        protected PropertyForwarder<SkillRecord, String> _ExpertTextForwarder;
        public INotifyingSetItem<String> ExpertText_Property => _ExpertTextForwarder ?? (_ExpertTextForwarder = new PropertyForwarder<SkillRecord, String>(this, (int)SkillRecord_FieldIndex.ExpertText));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String ExpertText
        {
            get => this._ExpertText;
            set => this.SetExpertText(value);
        }
        protected void SetExpertText(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)SkillRecord_FieldIndex.ExpertText];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ExpertText == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)SkillRecord_FieldIndex.ExpertText] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = ExpertText;
                _ExpertText = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)SkillRecord_FieldIndex.ExpertText,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ExpertText = item;
            }
        }
        protected void UnsetExpertText()
        {
            _hasBeenSetTracker[(int)SkillRecord_FieldIndex.ExpertText] = false;
            ExpertText = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> ISkillRecord.ExpertText_Property => this.ExpertText_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> ISkillRecordGetter.ExpertText_Property => this.ExpertText_Property;
        #endregion
        #region MasterText
        protected String _MasterText;
        protected PropertyForwarder<SkillRecord, String> _MasterTextForwarder;
        public INotifyingSetItem<String> MasterText_Property => _MasterTextForwarder ?? (_MasterTextForwarder = new PropertyForwarder<SkillRecord, String>(this, (int)SkillRecord_FieldIndex.MasterText));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String MasterText
        {
            get => this._MasterText;
            set => this.SetMasterText(value);
        }
        protected void SetMasterText(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)SkillRecord_FieldIndex.MasterText];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && MasterText == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)SkillRecord_FieldIndex.MasterText] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = MasterText;
                _MasterText = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)SkillRecord_FieldIndex.MasterText,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _MasterText = item;
            }
        }
        protected void UnsetMasterText()
        {
            _hasBeenSetTracker[(int)SkillRecord_FieldIndex.MasterText] = false;
            MasterText = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> ISkillRecord.MasterText_Property => this.MasterText_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> ISkillRecordGetter.MasterText_Property => this.MasterText_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => SkillRecordCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => SkillRecordCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => SkillRecordCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            SkillRecordCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<SkillRecord>.GetEqualsMask(SkillRecord rhs) => SkillRecordCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ISkillRecordGetter>.GetEqualsMask(ISkillRecordGetter rhs) => SkillRecordCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return SkillRecordCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            SkillRecord_Mask<bool> printMask = null)
        {
            return SkillRecordCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            SkillRecordCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new SkillRecord_Mask<bool> GetHasBeenSetMask()
        {
            return SkillRecordCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is SkillRecord rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SkillRecord rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Skill_Property.HasBeenSet != rhs.Skill_Property.HasBeenSet) return false;
            if (Skill_Property.HasBeenSet)
            {
                if (this.Skill != rhs.Skill) return false;
            }
            if (Description_Property.HasBeenSet != rhs.Description_Property.HasBeenSet) return false;
            if (Description_Property.HasBeenSet)
            {
                if (!object.Equals(this.Description, rhs.Description)) return false;
            }
            if (Icon_Property.HasBeenSet != rhs.Icon_Property.HasBeenSet) return false;
            if (Icon_Property.HasBeenSet)
            {
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (this.Action != rhs.Action) return false;
            if (this.Attribute != rhs.Attribute) return false;
            if (this.Specialization != rhs.Specialization) return false;
            if (!this.UseValueFirst.EqualsWithin(rhs.UseValueFirst)) return false;
            if (!this.UseValueSecond.EqualsWithin(rhs.UseValueSecond)) return false;
            if (ApprenticeText_Property.HasBeenSet != rhs.ApprenticeText_Property.HasBeenSet) return false;
            if (ApprenticeText_Property.HasBeenSet)
            {
                if (!object.Equals(this.ApprenticeText, rhs.ApprenticeText)) return false;
            }
            if (JourneymanText_Property.HasBeenSet != rhs.JourneymanText_Property.HasBeenSet) return false;
            if (JourneymanText_Property.HasBeenSet)
            {
                if (!object.Equals(this.JourneymanText, rhs.JourneymanText)) return false;
            }
            if (ExpertText_Property.HasBeenSet != rhs.ExpertText_Property.HasBeenSet) return false;
            if (ExpertText_Property.HasBeenSet)
            {
                if (!object.Equals(this.ExpertText, rhs.ExpertText)) return false;
            }
            if (MasterText_Property.HasBeenSet != rhs.MasterText_Property.HasBeenSet) return false;
            if (MasterText_Property.HasBeenSet)
            {
                if (!object.Equals(this.MasterText, rhs.MasterText)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Skill_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Skill).CombineHashCode(ret);
            }
            if (Description_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Description).CombineHashCode(ret);
            }
            if (Icon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Action).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Attribute).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Specialization).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UseValueFirst).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UseValueSecond).CombineHashCode(ret);
            if (ApprenticeText_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ApprenticeText).CombineHashCode(ret);
            }
            if (JourneymanText_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(JourneymanText).CombineHashCode(ret);
            }
            if (ExpertText_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ExpertText).CombineHashCode(ret);
            }
            if (MasterText_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MasterText).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static SkillRecord Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static SkillRecord Create_XML(
            XElement root,
            out SkillRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (SkillRecord Object, SkillRecord_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            SkillRecord_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SkillRecord_ErrorMask()) : default(Func<SkillRecord_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static SkillRecord Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static SkillRecord Create_XML(
            string path,
            out SkillRecord_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static SkillRecord Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static SkillRecord Create_XML(
            Stream stream,
            out SkillRecord_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<SkillRecord, SkillRecord_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out SkillRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<SkillRecord, SkillRecord_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out SkillRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out SkillRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out SkillRecord_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out SkillRecord_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as SkillRecord_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out SkillRecord_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out SkillRecord_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            SkillRecordCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static SkillRecord Create_XML_Internal(
            XElement root,
            Func<SkillRecord_ErrorMask> errorMask)
        {
            var ret = new SkillRecord();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            SkillRecord item,
            XElement root,
            string name,
            Func<SkillRecord_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Skill":
                    var SkilltryGet = EnumXmlTranslation<ActorValue>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)SkillRecord_FieldIndex.Skill,
                        errorMask: errorMask).Bubble((o) => o.Value);
                    if (SkilltryGet.Succeeded)
                    {
                        item.SetSkill(item: SkilltryGet.Value);
                    }
                    else
                    {
                        item.UnsetSkill();
                    }
                    break;
                case "Description":
                    var DescriptiontryGet = StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)SkillRecord_FieldIndex.Description,
                        errorMask: errorMask);
                    if (DescriptiontryGet.Succeeded)
                    {
                        item.SetDescription(item: DescriptiontryGet.Value);
                    }
                    else
                    {
                        item.UnsetDescription();
                    }
                    break;
                case "Icon":
                    var IcontryGet = StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)SkillRecord_FieldIndex.Icon,
                        errorMask: errorMask);
                    if (IcontryGet.Succeeded)
                    {
                        item.SetIcon(item: IcontryGet.Value);
                    }
                    else
                    {
                        item.UnsetIcon();
                    }
                    break;
                case "Action":
                    var ActiontryGet = EnumXmlTranslation<ActorValue>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)SkillRecord_FieldIndex.Action,
                        errorMask: errorMask).Bubble((o) => o.Value);
                    if (ActiontryGet.Succeeded)
                    {
                        item.SetAction(item: ActiontryGet.Value);
                    }
                    else
                    {
                        item.UnsetAction();
                    }
                    break;
                case "Attribute":
                    var AttributetryGet = EnumXmlTranslation<ActorValue>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)SkillRecord_FieldIndex.Attribute,
                        errorMask: errorMask).Bubble((o) => o.Value);
                    if (AttributetryGet.Succeeded)
                    {
                        item.SetAttribute(item: AttributetryGet.Value);
                    }
                    else
                    {
                        item.UnsetAttribute();
                    }
                    break;
                case "Specialization":
                    var SpecializationtryGet = EnumXmlTranslation<Specialization>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)SkillRecord_FieldIndex.Specialization,
                        errorMask: errorMask).Bubble((o) => o.Value);
                    if (SpecializationtryGet.Succeeded)
                    {
                        item.SetSpecialization(item: SpecializationtryGet.Value);
                    }
                    else
                    {
                        item.UnsetSpecialization();
                    }
                    break;
                case "UseValueFirst":
                    var UseValueFirsttryGet = FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)SkillRecord_FieldIndex.UseValueFirst,
                        errorMask: errorMask);
                    if (UseValueFirsttryGet.Succeeded)
                    {
                        item.SetUseValueFirst(item: UseValueFirsttryGet.Value);
                    }
                    else
                    {
                        item.UnsetUseValueFirst();
                    }
                    break;
                case "UseValueSecond":
                    var UseValueSecondtryGet = FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)SkillRecord_FieldIndex.UseValueSecond,
                        errorMask: errorMask);
                    if (UseValueSecondtryGet.Succeeded)
                    {
                        item.SetUseValueSecond(item: UseValueSecondtryGet.Value);
                    }
                    else
                    {
                        item.UnsetUseValueSecond();
                    }
                    break;
                case "ApprenticeText":
                    var ApprenticeTexttryGet = StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)SkillRecord_FieldIndex.ApprenticeText,
                        errorMask: errorMask);
                    if (ApprenticeTexttryGet.Succeeded)
                    {
                        item.SetApprenticeText(item: ApprenticeTexttryGet.Value);
                    }
                    else
                    {
                        item.UnsetApprenticeText();
                    }
                    break;
                case "JourneymanText":
                    var JourneymanTexttryGet = StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)SkillRecord_FieldIndex.JourneymanText,
                        errorMask: errorMask);
                    if (JourneymanTexttryGet.Succeeded)
                    {
                        item.SetJourneymanText(item: JourneymanTexttryGet.Value);
                    }
                    else
                    {
                        item.UnsetJourneymanText();
                    }
                    break;
                case "ExpertText":
                    var ExpertTexttryGet = StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)SkillRecord_FieldIndex.ExpertText,
                        errorMask: errorMask);
                    if (ExpertTexttryGet.Succeeded)
                    {
                        item.SetExpertText(item: ExpertTexttryGet.Value);
                    }
                    else
                    {
                        item.UnsetExpertText();
                    }
                    break;
                case "MasterText":
                    var MasterTexttryGet = StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)SkillRecord_FieldIndex.MasterText,
                        errorMask: errorMask);
                    if (MasterTexttryGet.Succeeded)
                    {
                        item.SetMasterText(item: MasterTexttryGet.Value);
                    }
                    else
                    {
                        item.UnsetMasterText();
                    }
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region IPropertySupporter ActorValue
        protected ObjectCentralizationSubscriptions<ActorValue> _ActorValue_subscriptions;
        ActorValue IPropertySupporter<ActorValue>.Get(int index)
        {
            return GetActorValue(index: index);
        }

        protected ActorValue GetActorValue(int index)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.Skill:
                    return Skill;
                case SkillRecord_FieldIndex.Action:
                    return Action;
                case SkillRecord_FieldIndex.Attribute:
                    return Attribute;
                default:
                    throw new ArgumentException($"Unknown index for field type ActorValue: {index}");
            }
        }

        void IPropertySupporter<ActorValue>.Set(
            int index,
            ActorValue item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetActorValue(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetActorValue(
            int index,
            ActorValue item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.Skill:
                    SetSkill(item, hasBeenSet, cmds);
                    break;
                case SkillRecord_FieldIndex.Action:
                    SetAction(item, hasBeenSet, cmds);
                    break;
                case SkillRecord_FieldIndex.Attribute:
                    SetAttribute(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ActorValue: {index}");
            }
        }

        bool IPropertySupporter<ActorValue>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<ActorValue>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<ActorValue>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetActorValue(
                index: index,
                cmds: cmds);
        }

        protected void UnsetActorValue(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.Skill:
                    _hasBeenSetTracker[index] = false;
                    Skill = default(ActorValue);
                    break;
                case SkillRecord_FieldIndex.Action:
                    _hasBeenSetTracker[index] = false;
                    Action = default(ActorValue);
                    break;
                case SkillRecord_FieldIndex.Attribute:
                    _hasBeenSetTracker[index] = false;
                    Attribute = default(ActorValue);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ActorValue: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ActorValue>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<ActorValue> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ActorValue_subscriptions == null)
            {
                _ActorValue_subscriptions = new ObjectCentralizationSubscriptions<ActorValue>();
            }
            _ActorValue_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ActorValue>.Unsubscribe(
            int index,
            object owner)
        {
            _ActorValue_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<ActorValue>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        ActorValue IPropertySupporter<ActorValue>.DefaultValue(int index)
        {
            return DefaultValueActorValue(index: index);
        }

        protected ActorValue DefaultValueActorValue(int index)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                    return default(ActorValue);
                default:
                    throw new ArgumentException($"Unknown index for field type ActorValue: {index}");
            }
        }

        #endregion

        #region IPropertySupporter String
        String IPropertySupporter<String>.Get(int index)
        {
            return GetString(index: index);
        }

        protected override String GetString(int index)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.Description:
                    return Description;
                case SkillRecord_FieldIndex.Icon:
                    return Icon;
                case SkillRecord_FieldIndex.ApprenticeText:
                    return ApprenticeText;
                case SkillRecord_FieldIndex.JourneymanText:
                    return JourneymanText;
                case SkillRecord_FieldIndex.ExpertText:
                    return ExpertText;
                case SkillRecord_FieldIndex.MasterText:
                    return MasterText;
                default:
                    return base.GetString(index: index);
            }
        }

        void IPropertySupporter<String>.Set(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetString(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected override void SetString(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.Description:
                    SetDescription(item, hasBeenSet, cmds);
                    break;
                case SkillRecord_FieldIndex.Icon:
                    SetIcon(item, hasBeenSet, cmds);
                    break;
                case SkillRecord_FieldIndex.ApprenticeText:
                    SetApprenticeText(item, hasBeenSet, cmds);
                    break;
                case SkillRecord_FieldIndex.JourneymanText:
                    SetJourneymanText(item, hasBeenSet, cmds);
                    break;
                case SkillRecord_FieldIndex.ExpertText:
                    SetExpertText(item, hasBeenSet, cmds);
                    break;
                case SkillRecord_FieldIndex.MasterText:
                    SetMasterText(item, hasBeenSet, cmds);
                    break;
                default:
                    base.SetString(
                        index: index,
                        item: item,
                        hasBeenSet: hasBeenSet,
                        cmds: cmds);
                    break;
            }
        }

        bool IPropertySupporter<String>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<String>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<String>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetString(
                index: index,
                cmds: cmds);
        }

        protected override void UnsetString(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.Description:
                    _hasBeenSetTracker[index] = false;
                    Description = default(String);
                    break;
                case SkillRecord_FieldIndex.Icon:
                    _hasBeenSetTracker[index] = false;
                    Icon = default(String);
                    break;
                case SkillRecord_FieldIndex.ApprenticeText:
                    _hasBeenSetTracker[index] = false;
                    ApprenticeText = default(String);
                    break;
                case SkillRecord_FieldIndex.JourneymanText:
                    _hasBeenSetTracker[index] = false;
                    JourneymanText = default(String);
                    break;
                case SkillRecord_FieldIndex.ExpertText:
                    _hasBeenSetTracker[index] = false;
                    ExpertText = default(String);
                    break;
                case SkillRecord_FieldIndex.MasterText:
                    _hasBeenSetTracker[index] = false;
                    MasterText = default(String);
                    break;
                default:
                    base.UnsetString(
                        index: index,
                        cmds: cmds);
                    break;
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<String> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_String_subscriptions == null)
            {
                _String_subscriptions = new ObjectCentralizationSubscriptions<String>();
            }
            _String_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Unsubscribe(
            int index,
            object owner)
        {
            _String_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<String>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        String IPropertySupporter<String>.DefaultValue(int index)
        {
            return DefaultValueString(index: index);
        }

        protected override String DefaultValueString(int index)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                    return default(String);
                default:
                    return base.DefaultValueString(index: index);
            }
        }

        #endregion

        #region IPropertySupporter Specialization
        protected ObjectCentralizationSubscriptions<Specialization> _Specialization_subscriptions;
        Specialization IPropertySupporter<Specialization>.Get(int index)
        {
            return GetSpecialization(index: index);
        }

        protected Specialization GetSpecialization(int index)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.Specialization:
                    return Specialization;
                default:
                    throw new ArgumentException($"Unknown index for field type Specialization: {index}");
            }
        }

        void IPropertySupporter<Specialization>.Set(
            int index,
            Specialization item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetSpecialization(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetSpecialization(
            int index,
            Specialization item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.Specialization:
                    SetSpecialization(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Specialization: {index}");
            }
        }

        bool IPropertySupporter<Specialization>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Specialization>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Specialization>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetSpecialization(
                index: index,
                cmds: cmds);
        }

        protected void UnsetSpecialization(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.Specialization:
                    _hasBeenSetTracker[index] = false;
                    Specialization = default(Specialization);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Specialization: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Specialization>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Specialization> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Specialization_subscriptions == null)
            {
                _Specialization_subscriptions = new ObjectCentralizationSubscriptions<Specialization>();
            }
            _Specialization_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Specialization>.Unsubscribe(
            int index,
            object owner)
        {
            _Specialization_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Specialization>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Specialization IPropertySupporter<Specialization>.DefaultValue(int index)
        {
            return DefaultValueSpecialization(index: index);
        }

        protected Specialization DefaultValueSpecialization(int index)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.Specialization:
                    return default(Specialization);
                default:
                    throw new ArgumentException($"Unknown index for field type Specialization: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Single
        protected ObjectCentralizationSubscriptions<Single> _Single_subscriptions;
        Single IPropertySupporter<Single>.Get(int index)
        {
            return GetSingle(index: index);
        }

        protected Single GetSingle(int index)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.UseValueFirst:
                    return UseValueFirst;
                case SkillRecord_FieldIndex.UseValueSecond:
                    return UseValueSecond;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        void IPropertySupporter<Single>.Set(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetSingle(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetSingle(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.UseValueFirst:
                    SetUseValueFirst(item, hasBeenSet, cmds);
                    break;
                case SkillRecord_FieldIndex.UseValueSecond:
                    SetUseValueSecond(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        bool IPropertySupporter<Single>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Single>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Single>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetSingle(
                index: index,
                cmds: cmds);
        }

        protected void UnsetSingle(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.UseValueFirst:
                    _hasBeenSetTracker[index] = false;
                    UseValueFirst = default(Single);
                    break;
                case SkillRecord_FieldIndex.UseValueSecond:
                    _hasBeenSetTracker[index] = false;
                    UseValueSecond = default(Single);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Single> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Single_subscriptions == null)
            {
                _Single_subscriptions = new ObjectCentralizationSubscriptions<Single>();
            }
            _Single_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Unsubscribe(
            int index,
            object owner)
        {
            _Single_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Single>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Single IPropertySupporter<Single>.DefaultValue(int index)
        {
            return DefaultValueSingle(index: index);
        }

        protected Single DefaultValueSingle(int index)
        {
            switch ((SkillRecord_FieldIndex)index)
            {
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                    return default(Single);
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = SkillRecord_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static SkillRecord Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static SkillRecord Create_Binary(
            MutagenFrame frame,
            out SkillRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (SkillRecord Object, SkillRecord_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            SkillRecord_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SkillRecord_ErrorMask()) : default(Func<SkillRecord_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static SkillRecord Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static SkillRecord Create_Binary(
            string path,
            out SkillRecord_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static SkillRecord Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static SkillRecord Create_Binary(
            Stream stream,
            out SkillRecord_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out SkillRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as SkillRecord_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out SkillRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out SkillRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            SkillRecordCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static SkillRecord Create_Binary_Internal(
            MutagenFrame frame,
            Func<SkillRecord_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return UtilityTranslation.MajorRecordParse<SkillRecord, SkillRecord_ErrorMask>(
                record: new SkillRecord(),
                frame: frame,
                errorMask: errorMask,
                recType: SkillRecord_Registration.SKIL_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            SkillRecord item,
            MutagenFrame frame,
            Func<SkillRecord_ErrorMask> errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            SkillRecord item,
            MutagenFrame frame,
            Func<SkillRecord_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "INDX":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var SkilltryGet = Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Parse(
                        frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)SkillRecord_FieldIndex.Skill,
                        errorMask: errorMask);
                    if (SkilltryGet.Succeeded)
                    {
                        item.SetSkill(item: SkilltryGet.Value);
                    }
                    else
                    {
                        item.UnsetSkill();
                    }
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.Skill);
                case "DESC":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var DescriptiontryGet = StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)SkillRecord_FieldIndex.Description,
                        parseWhole: true,
                        errorMask: errorMask);
                    if (DescriptiontryGet.Succeeded)
                    {
                        item.SetDescription(item: DescriptiontryGet.Value);
                    }
                    else
                    {
                        item.UnsetDescription();
                    }
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.Description);
                case "ICON":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var IcontryGet = StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)SkillRecord_FieldIndex.Icon,
                        parseWhole: true,
                        errorMask: errorMask);
                    if (IcontryGet.Succeeded)
                    {
                        item.SetIcon(item: IcontryGet.Value);
                    }
                    else
                    {
                        item.UnsetIcon();
                    }
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.Icon);
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        var ActiontryGet = Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Parse(
                            frame: dataFrame.SpawnWithLength(4),
                            fieldIndex: (int)SkillRecord_FieldIndex.Action,
                            errorMask: errorMask);
                        if (ActiontryGet.Succeeded)
                        {
                            item.SetAction(item: ActiontryGet.Value);
                        }
                        else
                        {
                            item.UnsetAction();
                        }
                        var AttributetryGet = Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Parse(
                            frame: dataFrame.SpawnWithLength(4),
                            fieldIndex: (int)SkillRecord_FieldIndex.Attribute,
                            errorMask: errorMask);
                        if (AttributetryGet.Succeeded)
                        {
                            item.SetAttribute(item: AttributetryGet.Value);
                        }
                        else
                        {
                            item.UnsetAttribute();
                        }
                        var SpecializationtryGet = Mutagen.Bethesda.Binary.EnumBinaryTranslation<Specialization>.Instance.Parse(
                            frame: dataFrame.SpawnWithLength(4),
                            fieldIndex: (int)SkillRecord_FieldIndex.Specialization,
                            errorMask: errorMask);
                        if (SpecializationtryGet.Succeeded)
                        {
                            item.SetSpecialization(item: SpecializationtryGet.Value);
                        }
                        else
                        {
                            item.UnsetSpecialization();
                        }
                        var UseValueFirsttryGet = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame.Spawn(snapToFinalPosition: false),
                            fieldIndex: (int)SkillRecord_FieldIndex.UseValueFirst,
                            errorMask: errorMask);
                        if (UseValueFirsttryGet.Succeeded)
                        {
                            item.SetUseValueFirst(item: UseValueFirsttryGet.Value);
                        }
                        else
                        {
                            item.UnsetUseValueFirst();
                        }
                        var UseValueSecondtryGet = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame.Spawn(snapToFinalPosition: false),
                            fieldIndex: (int)SkillRecord_FieldIndex.UseValueSecond,
                            errorMask: errorMask);
                        if (UseValueSecondtryGet.Succeeded)
                        {
                            item.SetUseValueSecond(item: UseValueSecondtryGet.Value);
                        }
                        else
                        {
                            item.UnsetUseValueSecond();
                        }
                    }
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.UseValueSecond);
                case "ANAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var ApprenticeTexttryGet = StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)SkillRecord_FieldIndex.ApprenticeText,
                        parseWhole: true,
                        errorMask: errorMask);
                    if (ApprenticeTexttryGet.Succeeded)
                    {
                        item.SetApprenticeText(item: ApprenticeTexttryGet.Value);
                    }
                    else
                    {
                        item.UnsetApprenticeText();
                    }
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.ApprenticeText);
                case "JNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var JourneymanTexttryGet = StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)SkillRecord_FieldIndex.JourneymanText,
                        parseWhole: true,
                        errorMask: errorMask);
                    if (JourneymanTexttryGet.Succeeded)
                    {
                        item.SetJourneymanText(item: JourneymanTexttryGet.Value);
                    }
                    else
                    {
                        item.UnsetJourneymanText();
                    }
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.JourneymanText);
                case "ENAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var ExpertTexttryGet = StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)SkillRecord_FieldIndex.ExpertText,
                        parseWhole: true,
                        errorMask: errorMask);
                    if (ExpertTexttryGet.Succeeded)
                    {
                        item.SetExpertText(item: ExpertTexttryGet.Value);
                    }
                    else
                    {
                        item.UnsetExpertText();
                    }
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.ExpertText);
                case "MNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var MasterTexttryGet = StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)SkillRecord_FieldIndex.MasterText,
                        parseWhole: true,
                        errorMask: errorMask);
                    if (MasterTexttryGet.Succeeded)
                    {
                        item.SetMasterText(item: MasterTexttryGet.Value);
                    }
                    else
                    {
                        item.UnsetMasterText();
                    }
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.MasterText);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public SkillRecord Copy(
            SkillRecord_CopyMask copyMask = null,
            ISkillRecordGetter def = null)
        {
            return SkillRecord.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static SkillRecord Copy(
            ISkillRecord item,
            SkillRecord_CopyMask copyMask = null,
            ISkillRecordGetter def = null)
        {
            SkillRecord ret;
            if (item.GetType().Equals(typeof(SkillRecord)))
            {
                ret = new SkillRecord();
            }
            else
            {
                ret = (SkillRecord)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static SkillRecord Copy_ToLoqui(
            ISkillRecordGetter item,
            SkillRecord_CopyMask copyMask = null,
            ISkillRecordGetter def = null)
        {
            SkillRecord ret;
            if (item.GetType().Equals(typeof(SkillRecord)))
            {
                ret = new SkillRecord() as SkillRecord;
            }
            else
            {
                ret = (SkillRecord)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ISkillRecordGetter rhs,
            SkillRecord_CopyMask copyMask,
            ISkillRecordGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ISkillRecordGetter rhs,
            out SkillRecord_ErrorMask errorMask,
            SkillRecord_CopyMask copyMask = null,
            ISkillRecordGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            SkillRecord_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new SkillRecord_ErrorMask();
                }
                return retErrorMask;
            };
            SkillRecordCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    this.SetSkill(
                        (ActorValue)obj,
                        cmds: cmds);
                    break;
                case SkillRecord_FieldIndex.Description:
                    this.SetDescription(
                        (String)obj,
                        cmds: cmds);
                    break;
                case SkillRecord_FieldIndex.Icon:
                    this.SetIcon(
                        (String)obj,
                        cmds: cmds);
                    break;
                case SkillRecord_FieldIndex.Action:
                    this.SetAction(
                        (ActorValue)obj,
                        cmds: cmds);
                    break;
                case SkillRecord_FieldIndex.Attribute:
                    this.SetAttribute(
                        (ActorValue)obj,
                        cmds: cmds);
                    break;
                case SkillRecord_FieldIndex.Specialization:
                    this.SetSpecialization(
                        (Specialization)obj,
                        cmds: cmds);
                    break;
                case SkillRecord_FieldIndex.UseValueFirst:
                    this.SetUseValueFirst(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case SkillRecord_FieldIndex.UseValueSecond:
                    this.SetUseValueSecond(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case SkillRecord_FieldIndex.ApprenticeText:
                    this.SetApprenticeText(
                        (String)obj,
                        cmds: cmds);
                    break;
                case SkillRecord_FieldIndex.JourneymanText:
                    this.SetJourneymanText(
                        (String)obj,
                        cmds: cmds);
                    break;
                case SkillRecord_FieldIndex.ExpertText:
                    this.SetExpertText(
                        (String)obj,
                        cmds: cmds);
                    break;
                case SkillRecord_FieldIndex.MasterText:
                    this.SetMasterText(
                        (String)obj,
                        cmds: cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            SkillRecordCommon.Clear(this, cmds);
        }


        public new static SkillRecord Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new SkillRecord();
            foreach (var pair in fields)
            {
                CopyInInternal_SkillRecord(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_SkillRecord(SkillRecord obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out SkillRecord_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    obj.SetSkill(
                        (ActorValue)pair.Value,
                        cmds: null);
                    break;
                case SkillRecord_FieldIndex.Description:
                    obj.SetDescription(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case SkillRecord_FieldIndex.Icon:
                    obj.SetIcon(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case SkillRecord_FieldIndex.Action:
                    obj.SetAction(
                        (ActorValue)pair.Value,
                        cmds: null);
                    break;
                case SkillRecord_FieldIndex.Attribute:
                    obj.SetAttribute(
                        (ActorValue)pair.Value,
                        cmds: null);
                    break;
                case SkillRecord_FieldIndex.Specialization:
                    obj.SetSpecialization(
                        (Specialization)pair.Value,
                        cmds: null);
                    break;
                case SkillRecord_FieldIndex.UseValueFirst:
                    obj.SetUseValueFirst(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case SkillRecord_FieldIndex.UseValueSecond:
                    obj.SetUseValueSecond(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case SkillRecord_FieldIndex.ApprenticeText:
                    obj.SetApprenticeText(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case SkillRecord_FieldIndex.JourneymanText:
                    obj.SetJourneymanText(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case SkillRecord_FieldIndex.ExpertText:
                    obj.SetExpertText(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case SkillRecord_FieldIndex.MasterText:
                    obj.SetMasterText(
                        (String)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, SkillRecord obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ISkillRecord : ISkillRecordGetter, IMajorRecord, ILoquiClass<ISkillRecord, ISkillRecordGetter>, ILoquiClass<SkillRecord, ISkillRecordGetter>
    {
        new ActorValue Skill { get; set; }
        new INotifyingSetItem<ActorValue> Skill_Property { get; }

        new String Description { get; set; }
        new INotifyingSetItem<String> Description_Property { get; }

        new String Icon { get; set; }
        new INotifyingSetItem<String> Icon_Property { get; }

        new ActorValue Action { get; set; }
        new INotifyingItem<ActorValue> Action_Property { get; }

        new ActorValue Attribute { get; set; }
        new INotifyingItem<ActorValue> Attribute_Property { get; }

        new Specialization Specialization { get; set; }
        new INotifyingItem<Specialization> Specialization_Property { get; }

        new Single UseValueFirst { get; set; }
        new INotifyingItem<Single> UseValueFirst_Property { get; }

        new Single UseValueSecond { get; set; }
        new INotifyingItem<Single> UseValueSecond_Property { get; }

        new String ApprenticeText { get; set; }
        new INotifyingSetItem<String> ApprenticeText_Property { get; }

        new String JourneymanText { get; set; }
        new INotifyingSetItem<String> JourneymanText_Property { get; }

        new String ExpertText { get; set; }
        new INotifyingSetItem<String> ExpertText_Property { get; }

        new String MasterText { get; set; }
        new INotifyingSetItem<String> MasterText_Property { get; }

    }

    public partial interface ISkillRecordGetter : IMajorRecordGetter
    {
        #region Skill
        ActorValue Skill { get; }
        INotifyingSetItemGetter<ActorValue> Skill_Property { get; }

        #endregion
        #region Description
        String Description { get; }
        INotifyingSetItemGetter<String> Description_Property { get; }

        #endregion
        #region Icon
        String Icon { get; }
        INotifyingSetItemGetter<String> Icon_Property { get; }

        #endregion
        #region Action
        ActorValue Action { get; }
        INotifyingItemGetter<ActorValue> Action_Property { get; }

        #endregion
        #region Attribute
        ActorValue Attribute { get; }
        INotifyingItemGetter<ActorValue> Attribute_Property { get; }

        #endregion
        #region Specialization
        Specialization Specialization { get; }
        INotifyingItemGetter<Specialization> Specialization_Property { get; }

        #endregion
        #region UseValueFirst
        Single UseValueFirst { get; }
        INotifyingItemGetter<Single> UseValueFirst_Property { get; }

        #endregion
        #region UseValueSecond
        Single UseValueSecond { get; }
        INotifyingItemGetter<Single> UseValueSecond_Property { get; }

        #endregion
        #region ApprenticeText
        String ApprenticeText { get; }
        INotifyingSetItemGetter<String> ApprenticeText_Property { get; }

        #endregion
        #region JourneymanText
        String JourneymanText { get; }
        INotifyingSetItemGetter<String> JourneymanText_Property { get; }

        #endregion
        #region ExpertText
        String ExpertText { get; }
        INotifyingSetItemGetter<String> ExpertText_Property { get; }

        #endregion
        #region MasterText
        String MasterText { get; }
        INotifyingSetItemGetter<String> MasterText_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum SkillRecord_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Skill = 5,
        Description = 6,
        Icon = 7,
        Action = 8,
        Attribute = 9,
        Specialization = 10,
        UseValueFirst = 11,
        UseValueSecond = 12,
        ApprenticeText = 13,
        JourneymanText = 14,
        ExpertText = 15,
        MasterText = 16,
    }
    #endregion

    #region Registration
    public class SkillRecord_Registration : ILoquiRegistration
    {
        public static readonly SkillRecord_Registration Instance = new SkillRecord_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 42,
            version: 0);

        public const string GUID = "d6afa219-e0d6-4f44-83d4-2d0298897f4d";

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 17;

        public static readonly Type MaskType = typeof(SkillRecord_Mask<>);

        public static readonly Type ErrorMaskType = typeof(SkillRecord_ErrorMask);

        public static readonly Type ClassType = typeof(SkillRecord);

        public static readonly Type GetterType = typeof(ISkillRecordGetter);

        public static readonly Type SetterType = typeof(ISkillRecord);

        public static readonly Type CommonType = typeof(SkillRecordCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.SkillRecord";

        public const string Name = "SkillRecord";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SKILL":
                    return (ushort)SkillRecord_FieldIndex.Skill;
                case "DESCRIPTION":
                    return (ushort)SkillRecord_FieldIndex.Description;
                case "ICON":
                    return (ushort)SkillRecord_FieldIndex.Icon;
                case "ACTION":
                    return (ushort)SkillRecord_FieldIndex.Action;
                case "ATTRIBUTE":
                    return (ushort)SkillRecord_FieldIndex.Attribute;
                case "SPECIALIZATION":
                    return (ushort)SkillRecord_FieldIndex.Specialization;
                case "USEVALUEFIRST":
                    return (ushort)SkillRecord_FieldIndex.UseValueFirst;
                case "USEVALUESECOND":
                    return (ushort)SkillRecord_FieldIndex.UseValueSecond;
                case "APPRENTICETEXT":
                    return (ushort)SkillRecord_FieldIndex.ApprenticeText;
                case "JOURNEYMANTEXT":
                    return (ushort)SkillRecord_FieldIndex.JourneymanText;
                case "EXPERTTEXT":
                    return (ushort)SkillRecord_FieldIndex.ExpertText;
                case "MASTERTEXT":
                    return (ushort)SkillRecord_FieldIndex.MasterText;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    return "Skill";
                case SkillRecord_FieldIndex.Description:
                    return "Description";
                case SkillRecord_FieldIndex.Icon:
                    return "Icon";
                case SkillRecord_FieldIndex.Action:
                    return "Action";
                case SkillRecord_FieldIndex.Attribute:
                    return "Attribute";
                case SkillRecord_FieldIndex.Specialization:
                    return "Specialization";
                case SkillRecord_FieldIndex.UseValueFirst:
                    return "UseValueFirst";
                case SkillRecord_FieldIndex.UseValueSecond:
                    return "UseValueSecond";
                case SkillRecord_FieldIndex.ApprenticeText:
                    return "ApprenticeText";
                case SkillRecord_FieldIndex.JourneymanText:
                    return "JourneymanText";
                case SkillRecord_FieldIndex.ExpertText:
                    return "ExpertText";
                case SkillRecord_FieldIndex.MasterText:
                    return "MasterText";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    return typeof(ActorValue);
                case SkillRecord_FieldIndex.Description:
                    return typeof(String);
                case SkillRecord_FieldIndex.Icon:
                    return typeof(String);
                case SkillRecord_FieldIndex.Action:
                    return typeof(ActorValue);
                case SkillRecord_FieldIndex.Attribute:
                    return typeof(ActorValue);
                case SkillRecord_FieldIndex.Specialization:
                    return typeof(Specialization);
                case SkillRecord_FieldIndex.UseValueFirst:
                    return typeof(Single);
                case SkillRecord_FieldIndex.UseValueSecond:
                    return typeof(Single);
                case SkillRecord_FieldIndex.ApprenticeText:
                    return typeof(String);
                case SkillRecord_FieldIndex.JourneymanText:
                    return typeof(String);
                case SkillRecord_FieldIndex.ExpertText:
                    return typeof(String);
                case SkillRecord_FieldIndex.MasterText:
                    return typeof(String);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType SKIL_HEADER = new RecordType("SKIL");
        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType JNAM_HEADER = new RecordType("JNAM");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SKIL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 7;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class SkillRecordCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ISkillRecord item,
            ISkillRecordGetter rhs,
            ISkillRecordGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            SkillRecord_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Skill ?? true)
            {
                try
                {
                    item.Skill_Property.SetToWithDefault(
                        rhs: rhs.Skill_Property,
                        def: def?.Skill_Property);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SkillRecord_FieldIndex.Skill, ex);
                }
            }
            if (copyMask?.Description ?? true)
            {
                try
                {
                    item.Description_Property.SetToWithDefault(
                        rhs: rhs.Description_Property,
                        def: def?.Description_Property);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SkillRecord_FieldIndex.Description, ex);
                }
            }
            if (copyMask?.Icon ?? true)
            {
                try
                {
                    item.Icon_Property.SetToWithDefault(
                        rhs: rhs.Icon_Property,
                        def: def?.Icon_Property);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SkillRecord_FieldIndex.Icon, ex);
                }
            }
            if (copyMask?.Action ?? true)
            {
                try
                {
                    item.Action_Property.Set(
                        value: rhs.Action,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SkillRecord_FieldIndex.Action, ex);
                }
            }
            if (copyMask?.Attribute ?? true)
            {
                try
                {
                    item.Attribute_Property.Set(
                        value: rhs.Attribute,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SkillRecord_FieldIndex.Attribute, ex);
                }
            }
            if (copyMask?.Specialization ?? true)
            {
                try
                {
                    item.Specialization_Property.Set(
                        value: rhs.Specialization,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SkillRecord_FieldIndex.Specialization, ex);
                }
            }
            if (copyMask?.UseValueFirst ?? true)
            {
                try
                {
                    item.UseValueFirst_Property.Set(
                        value: rhs.UseValueFirst,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SkillRecord_FieldIndex.UseValueFirst, ex);
                }
            }
            if (copyMask?.UseValueSecond ?? true)
            {
                try
                {
                    item.UseValueSecond_Property.Set(
                        value: rhs.UseValueSecond,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SkillRecord_FieldIndex.UseValueSecond, ex);
                }
            }
            if (copyMask?.ApprenticeText ?? true)
            {
                try
                {
                    item.ApprenticeText_Property.SetToWithDefault(
                        rhs: rhs.ApprenticeText_Property,
                        def: def?.ApprenticeText_Property);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SkillRecord_FieldIndex.ApprenticeText, ex);
                }
            }
            if (copyMask?.JourneymanText ?? true)
            {
                try
                {
                    item.JourneymanText_Property.SetToWithDefault(
                        rhs: rhs.JourneymanText_Property,
                        def: def?.JourneymanText_Property);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SkillRecord_FieldIndex.JourneymanText, ex);
                }
            }
            if (copyMask?.ExpertText ?? true)
            {
                try
                {
                    item.ExpertText_Property.SetToWithDefault(
                        rhs: rhs.ExpertText_Property,
                        def: def?.ExpertText_Property);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SkillRecord_FieldIndex.ExpertText, ex);
                }
            }
            if (copyMask?.MasterText ?? true)
            {
                try
                {
                    item.MasterText_Property.SetToWithDefault(
                        rhs: rhs.MasterText_Property,
                        def: def?.MasterText_Property);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SkillRecord_FieldIndex.MasterText, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ISkillRecord obj,
            NotifyingFireParameters cmds = null)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case SkillRecord_FieldIndex.Skill:
                    obj.Skill_Property.HasBeenSet = on;
                    break;
                case SkillRecord_FieldIndex.Description:
                    obj.Description_Property.HasBeenSet = on;
                    break;
                case SkillRecord_FieldIndex.Icon:
                    obj.Icon_Property.HasBeenSet = on;
                    break;
                case SkillRecord_FieldIndex.ApprenticeText:
                    obj.ApprenticeText_Property.HasBeenSet = on;
                    break;
                case SkillRecord_FieldIndex.JourneymanText:
                    obj.JourneymanText_Property.HasBeenSet = on;
                    break;
                case SkillRecord_FieldIndex.ExpertText:
                    obj.ExpertText_Property.HasBeenSet = on;
                    break;
                case SkillRecord_FieldIndex.MasterText:
                    obj.MasterText_Property.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ISkillRecord obj,
            NotifyingUnsetParameters cmds = null)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    obj.Skill_Property.Unset(cmds);
                    break;
                case SkillRecord_FieldIndex.Description:
                    obj.Description_Property.Unset(cmds);
                    break;
                case SkillRecord_FieldIndex.Icon:
                    obj.Icon_Property.Unset(cmds);
                    break;
                case SkillRecord_FieldIndex.Action:
                    obj.Action = default(ActorValue);
                    break;
                case SkillRecord_FieldIndex.Attribute:
                    obj.Attribute = default(ActorValue);
                    break;
                case SkillRecord_FieldIndex.Specialization:
                    obj.Specialization = default(Specialization);
                    break;
                case SkillRecord_FieldIndex.UseValueFirst:
                    obj.UseValueFirst = default(Single);
                    break;
                case SkillRecord_FieldIndex.UseValueSecond:
                    obj.UseValueSecond = default(Single);
                    break;
                case SkillRecord_FieldIndex.ApprenticeText:
                    obj.ApprenticeText_Property.Unset(cmds);
                    break;
                case SkillRecord_FieldIndex.JourneymanText:
                    obj.JourneymanText_Property.Unset(cmds);
                    break;
                case SkillRecord_FieldIndex.ExpertText:
                    obj.ExpertText_Property.Unset(cmds);
                    break;
                case SkillRecord_FieldIndex.MasterText:
                    obj.MasterText_Property.Unset(cmds);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ISkillRecord obj)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                    return true;
                case SkillRecord_FieldIndex.Skill:
                    return obj.Skill_Property.HasBeenSet;
                case SkillRecord_FieldIndex.Description:
                    return obj.Description_Property.HasBeenSet;
                case SkillRecord_FieldIndex.Icon:
                    return obj.Icon_Property.HasBeenSet;
                case SkillRecord_FieldIndex.ApprenticeText:
                    return obj.ApprenticeText_Property.HasBeenSet;
                case SkillRecord_FieldIndex.JourneymanText:
                    return obj.JourneymanText_Property.HasBeenSet;
                case SkillRecord_FieldIndex.ExpertText:
                    return obj.ExpertText_Property.HasBeenSet;
                case SkillRecord_FieldIndex.MasterText:
                    return obj.MasterText_Property.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ISkillRecordGetter obj)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    return obj.Skill;
                case SkillRecord_FieldIndex.Description:
                    return obj.Description;
                case SkillRecord_FieldIndex.Icon:
                    return obj.Icon;
                case SkillRecord_FieldIndex.Action:
                    return obj.Action;
                case SkillRecord_FieldIndex.Attribute:
                    return obj.Attribute;
                case SkillRecord_FieldIndex.Specialization:
                    return obj.Specialization;
                case SkillRecord_FieldIndex.UseValueFirst:
                    return obj.UseValueFirst;
                case SkillRecord_FieldIndex.UseValueSecond:
                    return obj.UseValueSecond;
                case SkillRecord_FieldIndex.ApprenticeText:
                    return obj.ApprenticeText;
                case SkillRecord_FieldIndex.JourneymanText:
                    return obj.JourneymanText;
                case SkillRecord_FieldIndex.ExpertText:
                    return obj.ExpertText;
                case SkillRecord_FieldIndex.MasterText:
                    return obj.MasterText;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ISkillRecord item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Skill_Property.Unset(cmds.ToUnsetParams());
            item.Description_Property.Unset(cmds.ToUnsetParams());
            item.Icon_Property.Unset(cmds.ToUnsetParams());
            item.Action = default(ActorValue);
            item.Attribute = default(ActorValue);
            item.Specialization = default(Specialization);
            item.UseValueFirst = default(Single);
            item.UseValueSecond = default(Single);
            item.ApprenticeText_Property.Unset(cmds.ToUnsetParams());
            item.JourneymanText_Property.Unset(cmds.ToUnsetParams());
            item.ExpertText_Property.Unset(cmds.ToUnsetParams());
            item.MasterText_Property.Unset(cmds.ToUnsetParams());
        }

        public static SkillRecord_Mask<bool> GetEqualsMask(
            this ISkillRecordGetter item,
            ISkillRecordGetter rhs)
        {
            var ret = new SkillRecord_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ISkillRecordGetter item,
            ISkillRecordGetter rhs,
            SkillRecord_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Skill = item.Skill_Property.Equals(rhs.Skill_Property, (l, r) => l == r);
            ret.Description = item.Description_Property.Equals(rhs.Description_Property, (l, r) => object.Equals(l, r));
            ret.Icon = item.Icon_Property.Equals(rhs.Icon_Property, (l, r) => object.Equals(l, r));
            ret.Action = item.Action == rhs.Action;
            ret.Attribute = item.Attribute == rhs.Attribute;
            ret.Specialization = item.Specialization == rhs.Specialization;
            ret.UseValueFirst = item.UseValueFirst == rhs.UseValueFirst;
            ret.UseValueSecond = item.UseValueSecond == rhs.UseValueSecond;
            ret.ApprenticeText = item.ApprenticeText_Property.Equals(rhs.ApprenticeText_Property, (l, r) => object.Equals(l, r));
            ret.JourneymanText = item.JourneymanText_Property.Equals(rhs.JourneymanText_Property, (l, r) => object.Equals(l, r));
            ret.ExpertText = item.ExpertText_Property.Equals(rhs.ExpertText_Property, (l, r) => object.Equals(l, r));
            ret.MasterText = item.MasterText_Property.Equals(rhs.MasterText_Property, (l, r) => object.Equals(l, r));
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ISkillRecordGetter item,
            string name = null,
            SkillRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ISkillRecordGetter item,
            FileGeneration fg,
            string name = null,
            SkillRecord_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(SkillRecord)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(SkillRecord)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Skill ?? true)
                {
                    fg.AppendLine($"Skill => {item.Skill}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {item.Description}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.Action ?? true)
                {
                    fg.AppendLine($"Action => {item.Action}");
                }
                if (printMask?.Attribute ?? true)
                {
                    fg.AppendLine($"Attribute => {item.Attribute}");
                }
                if (printMask?.Specialization ?? true)
                {
                    fg.AppendLine($"Specialization => {item.Specialization}");
                }
                if (printMask?.UseValueFirst ?? true)
                {
                    fg.AppendLine($"UseValueFirst => {item.UseValueFirst}");
                }
                if (printMask?.UseValueSecond ?? true)
                {
                    fg.AppendLine($"UseValueSecond => {item.UseValueSecond}");
                }
                if (printMask?.ApprenticeText ?? true)
                {
                    fg.AppendLine($"ApprenticeText => {item.ApprenticeText}");
                }
                if (printMask?.JourneymanText ?? true)
                {
                    fg.AppendLine($"JourneymanText => {item.JourneymanText}");
                }
                if (printMask?.ExpertText ?? true)
                {
                    fg.AppendLine($"ExpertText => {item.ExpertText}");
                }
                if (printMask?.MasterText ?? true)
                {
                    fg.AppendLine($"MasterText => {item.MasterText}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ISkillRecordGetter item,
            SkillRecord_Mask<bool?> checkMask)
        {
            if (checkMask.Skill.HasValue && checkMask.Skill.Value != item.Skill_Property.HasBeenSet) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_Property.HasBeenSet) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_Property.HasBeenSet) return false;
            if (checkMask.ApprenticeText.HasValue && checkMask.ApprenticeText.Value != item.ApprenticeText_Property.HasBeenSet) return false;
            if (checkMask.JourneymanText.HasValue && checkMask.JourneymanText.Value != item.JourneymanText_Property.HasBeenSet) return false;
            if (checkMask.ExpertText.HasValue && checkMask.ExpertText.Value != item.ExpertText_Property.HasBeenSet) return false;
            if (checkMask.MasterText.HasValue && checkMask.MasterText.Value != item.MasterText_Property.HasBeenSet) return false;
            return true;
        }

        public static SkillRecord_Mask<bool> GetHasBeenSetMask(ISkillRecordGetter item)
        {
            var ret = new SkillRecord_Mask<bool>();
            ret.Skill = item.Skill_Property.HasBeenSet;
            ret.Description = item.Description_Property.HasBeenSet;
            ret.Icon = item.Icon_Property.HasBeenSet;
            ret.Action = true;
            ret.Attribute = true;
            ret.Specialization = true;
            ret.UseValueFirst = true;
            ret.UseValueSecond = true;
            ret.ApprenticeText = item.ApprenticeText_Property.HasBeenSet;
            ret.JourneymanText = item.JourneymanText_Property.HasBeenSet;
            ret.ExpertText = item.ExpertText_Property.HasBeenSet;
            ret.MasterText = item.MasterText_Property.HasBeenSet;
            return ret;
        }

        public static SkillRecord_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static SkillRecord_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (SkillRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (SkillRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (SkillRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SkillRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (SkillRecord_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            ISkillRecordGetter item,
            bool doMasks,
            out SkillRecord_ErrorMask errorMask,
            string name = null)
        {
            SkillRecord_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SkillRecord_ErrorMask()) : default(Func<SkillRecord_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XElement node,
            ISkillRecordGetter item,
            Func<SkillRecord_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.SkillRecord");
                node.Add(elem);
                if (name != null)
                {
                    elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.SkillRecord");
                }
                if (item.Skill_Property.HasBeenSet)
                {
                    EnumXmlTranslation<ActorValue>.Instance.Write(
                        node: elem,
                        name: nameof(item.Skill),
                        item: item.Skill_Property,
                        fieldIndex: (int)SkillRecord_FieldIndex.Skill,
                        errorMask: errorMask);
                }
                if (item.Description_Property.HasBeenSet)
                {
                    StringXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.Description),
                        item: item.Description_Property,
                        fieldIndex: (int)SkillRecord_FieldIndex.Description,
                        errorMask: errorMask);
                }
                if (item.Icon_Property.HasBeenSet)
                {
                    StringXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.Icon),
                        item: item.Icon_Property,
                        fieldIndex: (int)SkillRecord_FieldIndex.Icon,
                        errorMask: errorMask);
                }
                EnumXmlTranslation<ActorValue>.Instance.Write(
                    node: elem,
                    name: nameof(item.Action),
                    item: item.Action_Property,
                    fieldIndex: (int)SkillRecord_FieldIndex.Action,
                    errorMask: errorMask);
                EnumXmlTranslation<ActorValue>.Instance.Write(
                    node: elem,
                    name: nameof(item.Attribute),
                    item: item.Attribute_Property,
                    fieldIndex: (int)SkillRecord_FieldIndex.Attribute,
                    errorMask: errorMask);
                EnumXmlTranslation<Specialization>.Instance.Write(
                    node: elem,
                    name: nameof(item.Specialization),
                    item: item.Specialization_Property,
                    fieldIndex: (int)SkillRecord_FieldIndex.Specialization,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.UseValueFirst),
                    item: item.UseValueFirst_Property,
                    fieldIndex: (int)SkillRecord_FieldIndex.UseValueFirst,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.UseValueSecond),
                    item: item.UseValueSecond_Property,
                    fieldIndex: (int)SkillRecord_FieldIndex.UseValueSecond,
                    errorMask: errorMask);
                if (item.ApprenticeText_Property.HasBeenSet)
                {
                    StringXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.ApprenticeText),
                        item: item.ApprenticeText_Property,
                        fieldIndex: (int)SkillRecord_FieldIndex.ApprenticeText,
                        errorMask: errorMask);
                }
                if (item.JourneymanText_Property.HasBeenSet)
                {
                    StringXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.JourneymanText),
                        item: item.JourneymanText_Property,
                        fieldIndex: (int)SkillRecord_FieldIndex.JourneymanText,
                        errorMask: errorMask);
                }
                if (item.ExpertText_Property.HasBeenSet)
                {
                    StringXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.ExpertText),
                        item: item.ExpertText_Property,
                        fieldIndex: (int)SkillRecord_FieldIndex.ExpertText,
                        errorMask: errorMask);
                }
                if (item.MasterText_Property.HasBeenSet)
                {
                    StringXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.MasterText),
                        item: item.MasterText_Property,
                        fieldIndex: (int)SkillRecord_FieldIndex.MasterText,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            SkillRecord item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out SkillRecord_ErrorMask errorMask)
        {
            SkillRecord_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SkillRecord_ErrorMask()) : default(Func<SkillRecord_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            SkillRecord item,
            RecordTypeConverter recordTypeConverter,
            Func<SkillRecord_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: SkillRecord_Registration.SKIL_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            SkillRecord item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<SkillRecord_ErrorMask> errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                writer,
                item.Skill_Property,
                length: 4,
                fieldIndex: (int)SkillRecord_FieldIndex.Skill,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.INDX_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description_Property,
                fieldIndex: (int)SkillRecord_FieldIndex.Description,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.DESC_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Icon_Property,
                fieldIndex: (int)SkillRecord_FieldIndex.Icon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.ICON_HEADER),
                nullable: false);
            using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(SkillRecord_Registration.DATA_HEADER)))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                    writer,
                    item.Action_Property,
                    length: 4,
                    fieldIndex: (int)SkillRecord_FieldIndex.Action,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                    writer,
                    item.Attribute_Property,
                    length: 4,
                    fieldIndex: (int)SkillRecord_FieldIndex.Attribute,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Specialization>.Instance.Write(
                    writer,
                    item.Specialization_Property,
                    length: 4,
                    fieldIndex: (int)SkillRecord_FieldIndex.Specialization,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.UseValueFirst_Property,
                    fieldIndex: (int)SkillRecord_FieldIndex.UseValueFirst,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.UseValueSecond_Property,
                    fieldIndex: (int)SkillRecord_FieldIndex.UseValueSecond,
                    errorMask: errorMask);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ApprenticeText_Property,
                fieldIndex: (int)SkillRecord_FieldIndex.ApprenticeText,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.ANAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.JourneymanText_Property,
                fieldIndex: (int)SkillRecord_FieldIndex.JourneymanText,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.JNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ExpertText_Property,
                fieldIndex: (int)SkillRecord_FieldIndex.ExpertText,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.ENAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MasterText_Property,
                fieldIndex: (int)SkillRecord_FieldIndex.MasterText,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.MNAM_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class SkillRecord_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<SkillRecord_Mask<T>>
    {
        #region Ctors
        public SkillRecord_Mask()
        {
        }

        public SkillRecord_Mask(T initialValue)
        {
            this.Skill = initialValue;
            this.Description = initialValue;
            this.Icon = initialValue;
            this.Action = initialValue;
            this.Attribute = initialValue;
            this.Specialization = initialValue;
            this.UseValueFirst = initialValue;
            this.UseValueSecond = initialValue;
            this.ApprenticeText = initialValue;
            this.JourneymanText = initialValue;
            this.ExpertText = initialValue;
            this.MasterText = initialValue;
        }
        #endregion

        #region Members
        public T Skill;
        public T Description;
        public T Icon;
        public T Action;
        public T Attribute;
        public T Specialization;
        public T UseValueFirst;
        public T UseValueSecond;
        public T ApprenticeText;
        public T JourneymanText;
        public T ExpertText;
        public T MasterText;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is SkillRecord_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SkillRecord_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Skill, rhs.Skill)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Action, rhs.Action)) return false;
            if (!object.Equals(this.Attribute, rhs.Attribute)) return false;
            if (!object.Equals(this.Specialization, rhs.Specialization)) return false;
            if (!object.Equals(this.UseValueFirst, rhs.UseValueFirst)) return false;
            if (!object.Equals(this.UseValueSecond, rhs.UseValueSecond)) return false;
            if (!object.Equals(this.ApprenticeText, rhs.ApprenticeText)) return false;
            if (!object.Equals(this.JourneymanText, rhs.JourneymanText)) return false;
            if (!object.Equals(this.ExpertText, rhs.ExpertText)) return false;
            if (!object.Equals(this.MasterText, rhs.MasterText)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Skill?.GetHashCode());
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Action?.GetHashCode());
            ret = ret.CombineHashCode(this.Attribute?.GetHashCode());
            ret = ret.CombineHashCode(this.Specialization?.GetHashCode());
            ret = ret.CombineHashCode(this.UseValueFirst?.GetHashCode());
            ret = ret.CombineHashCode(this.UseValueSecond?.GetHashCode());
            ret = ret.CombineHashCode(this.ApprenticeText?.GetHashCode());
            ret = ret.CombineHashCode(this.JourneymanText?.GetHashCode());
            ret = ret.CombineHashCode(this.ExpertText?.GetHashCode());
            ret = ret.CombineHashCode(this.MasterText?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Skill)) return false;
            if (!eval(this.Description)) return false;
            if (!eval(this.Icon)) return false;
            if (!eval(this.Action)) return false;
            if (!eval(this.Attribute)) return false;
            if (!eval(this.Specialization)) return false;
            if (!eval(this.UseValueFirst)) return false;
            if (!eval(this.UseValueSecond)) return false;
            if (!eval(this.ApprenticeText)) return false;
            if (!eval(this.JourneymanText)) return false;
            if (!eval(this.ExpertText)) return false;
            if (!eval(this.MasterText)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new SkillRecord_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new SkillRecord_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(SkillRecord_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Skill = eval(this.Skill);
            obj.Description = eval(this.Description);
            obj.Icon = eval(this.Icon);
            obj.Action = eval(this.Action);
            obj.Attribute = eval(this.Attribute);
            obj.Specialization = eval(this.Specialization);
            obj.UseValueFirst = eval(this.UseValueFirst);
            obj.UseValueSecond = eval(this.UseValueSecond);
            obj.ApprenticeText = eval(this.ApprenticeText);
            obj.JourneymanText = eval(this.JourneymanText);
            obj.ExpertText = eval(this.ExpertText);
            obj.MasterText = eval(this.MasterText);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(SkillRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, SkillRecord_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(SkillRecord_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Skill ?? true)
                {
                    fg.AppendLine($"Skill => {Skill}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Action ?? true)
                {
                    fg.AppendLine($"Action => {Action}");
                }
                if (printMask?.Attribute ?? true)
                {
                    fg.AppendLine($"Attribute => {Attribute}");
                }
                if (printMask?.Specialization ?? true)
                {
                    fg.AppendLine($"Specialization => {Specialization}");
                }
                if (printMask?.UseValueFirst ?? true)
                {
                    fg.AppendLine($"UseValueFirst => {UseValueFirst}");
                }
                if (printMask?.UseValueSecond ?? true)
                {
                    fg.AppendLine($"UseValueSecond => {UseValueSecond}");
                }
                if (printMask?.ApprenticeText ?? true)
                {
                    fg.AppendLine($"ApprenticeText => {ApprenticeText}");
                }
                if (printMask?.JourneymanText ?? true)
                {
                    fg.AppendLine($"JourneymanText => {JourneymanText}");
                }
                if (printMask?.ExpertText ?? true)
                {
                    fg.AppendLine($"ExpertText => {ExpertText}");
                }
                if (printMask?.MasterText ?? true)
                {
                    fg.AppendLine($"MasterText => {MasterText}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class SkillRecord_ErrorMask : MajorRecord_ErrorMask, IErrorMask<SkillRecord_ErrorMask>
    {
        #region Members
        public Exception Skill;
        public Exception Description;
        public Exception Icon;
        public Exception Action;
        public Exception Attribute;
        public Exception Specialization;
        public Exception UseValueFirst;
        public Exception UseValueSecond;
        public Exception ApprenticeText;
        public Exception JourneymanText;
        public Exception ExpertText;
        public Exception MasterText;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    return Skill;
                case SkillRecord_FieldIndex.Description:
                    return Description;
                case SkillRecord_FieldIndex.Icon:
                    return Icon;
                case SkillRecord_FieldIndex.Action:
                    return Action;
                case SkillRecord_FieldIndex.Attribute:
                    return Attribute;
                case SkillRecord_FieldIndex.Specialization:
                    return Specialization;
                case SkillRecord_FieldIndex.UseValueFirst:
                    return UseValueFirst;
                case SkillRecord_FieldIndex.UseValueSecond:
                    return UseValueSecond;
                case SkillRecord_FieldIndex.ApprenticeText:
                    return ApprenticeText;
                case SkillRecord_FieldIndex.JourneymanText:
                    return JourneymanText;
                case SkillRecord_FieldIndex.ExpertText:
                    return ExpertText;
                case SkillRecord_FieldIndex.MasterText:
                    return MasterText;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    this.Skill = ex;
                    break;
                case SkillRecord_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case SkillRecord_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case SkillRecord_FieldIndex.Action:
                    this.Action = ex;
                    break;
                case SkillRecord_FieldIndex.Attribute:
                    this.Attribute = ex;
                    break;
                case SkillRecord_FieldIndex.Specialization:
                    this.Specialization = ex;
                    break;
                case SkillRecord_FieldIndex.UseValueFirst:
                    this.UseValueFirst = ex;
                    break;
                case SkillRecord_FieldIndex.UseValueSecond:
                    this.UseValueSecond = ex;
                    break;
                case SkillRecord_FieldIndex.ApprenticeText:
                    this.ApprenticeText = ex;
                    break;
                case SkillRecord_FieldIndex.JourneymanText:
                    this.JourneymanText = ex;
                    break;
                case SkillRecord_FieldIndex.ExpertText:
                    this.ExpertText = ex;
                    break;
                case SkillRecord_FieldIndex.MasterText:
                    this.MasterText = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    this.Skill = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.Action:
                    this.Action = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.Attribute:
                    this.Attribute = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.Specialization:
                    this.Specialization = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.UseValueFirst:
                    this.UseValueFirst = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.UseValueSecond:
                    this.UseValueSecond = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.ApprenticeText:
                    this.ApprenticeText = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.JourneymanText:
                    this.JourneymanText = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.ExpertText:
                    this.ExpertText = (Exception)obj;
                    break;
                case SkillRecord_FieldIndex.MasterText:
                    this.MasterText = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Skill != null) return true;
            if (Description != null) return true;
            if (Icon != null) return true;
            if (Action != null) return true;
            if (Attribute != null) return true;
            if (Specialization != null) return true;
            if (UseValueFirst != null) return true;
            if (UseValueSecond != null) return true;
            if (ApprenticeText != null) return true;
            if (JourneymanText != null) return true;
            if (ExpertText != null) return true;
            if (MasterText != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("SkillRecord_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Skill => {Skill}");
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Action => {Action}");
            fg.AppendLine($"Attribute => {Attribute}");
            fg.AppendLine($"Specialization => {Specialization}");
            fg.AppendLine($"UseValueFirst => {UseValueFirst}");
            fg.AppendLine($"UseValueSecond => {UseValueSecond}");
            fg.AppendLine($"ApprenticeText => {ApprenticeText}");
            fg.AppendLine($"JourneymanText => {JourneymanText}");
            fg.AppendLine($"ExpertText => {ExpertText}");
            fg.AppendLine($"MasterText => {MasterText}");
        }
        #endregion

        #region Combine
        public SkillRecord_ErrorMask Combine(SkillRecord_ErrorMask rhs)
        {
            var ret = new SkillRecord_ErrorMask();
            ret.Skill = this.Skill.Combine(rhs.Skill);
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Action = this.Action.Combine(rhs.Action);
            ret.Attribute = this.Attribute.Combine(rhs.Attribute);
            ret.Specialization = this.Specialization.Combine(rhs.Specialization);
            ret.UseValueFirst = this.UseValueFirst.Combine(rhs.UseValueFirst);
            ret.UseValueSecond = this.UseValueSecond.Combine(rhs.UseValueSecond);
            ret.ApprenticeText = this.ApprenticeText.Combine(rhs.ApprenticeText);
            ret.JourneymanText = this.JourneymanText.Combine(rhs.JourneymanText);
            ret.ExpertText = this.ExpertText.Combine(rhs.ExpertText);
            ret.MasterText = this.MasterText.Combine(rhs.MasterText);
            return ret;
        }
        public static SkillRecord_ErrorMask Combine(SkillRecord_ErrorMask lhs, SkillRecord_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class SkillRecord_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool Skill;
        public bool Description;
        public bool Icon;
        public bool Action;
        public bool Attribute;
        public bool Specialization;
        public bool UseValueFirst;
        public bool UseValueSecond;
        public bool ApprenticeText;
        public bool JourneymanText;
        public bool ExpertText;
        public bool MasterText;
        #endregion

    }
    #endregion





    #endregion

}
