/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class SoulGem : 
        ItemAbstract,
        ISoulGem,
        ILoquiObject<SoulGem>,
        ILoquiObjectSetter,
        INamed,
        ILinkSubContainer,
        IEquatable<SoulGem>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoulGem_Registration.Instance;
        public new static SoulGem_Registration Registration => SoulGem_Registration.Instance;

        #region Ctor
        protected SoulGem()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)SoulGem_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)SoulGem_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool ISoulGemGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String ISoulGemGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)SoulGem_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)SoulGem_FieldIndex.Model];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)SoulGem_FieldIndex.Model, nameof(Model_IsSet));
        }
        bool ISoulGemGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Model, value, _hasBeenSetTracker, markSet, (int)SoulGem_FieldIndex.Model, nameof(Model), nameof(Model_IsSet));
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model ISoulGemGetter.Model => this.Model;
        #endregion
        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)SoulGem_FieldIndex.Icon];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)SoulGem_FieldIndex.Icon, nameof(Icon_IsSet));
        }
        bool ISoulGemGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String ISoulGemGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Icon, value, _hasBeenSetTracker, markSet, (int)SoulGem_FieldIndex.Icon, nameof(Icon), nameof(Icon_IsSet));
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region Script
        public FormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Script> ISoulGemGetter.Script_Property => this.Script_Property;
        #endregion
        #region Value
        private UInt32 _Value;
        public UInt32 Value
        {
            get => this._Value;
            set => this.RaiseAndSetIfChanged(ref this._Value, value, nameof(Value));
        }
        #endregion
        #region Weight
        private Single _Weight;
        public Single Weight
        {
            get => this._Weight;
            set => this.RaiseAndSetIfChanged(ref this._Weight, value, nameof(Weight));
        }
        #endregion
        #region ContainedSoul
        public bool ContainedSoul_IsSet
        {
            get => _hasBeenSetTracker[(int)SoulGem_FieldIndex.ContainedSoul];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)SoulGem_FieldIndex.ContainedSoul, nameof(ContainedSoul_IsSet));
        }
        bool ISoulGemGetter.ContainedSoul_IsSet => ContainedSoul_IsSet;
        private SoulLevel _ContainedSoul;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public SoulLevel ContainedSoul
        {
            get => this._ContainedSoul;
            set => ContainedSoul_Set(value);
        }
        SoulLevel ISoulGemGetter.ContainedSoul => this.ContainedSoul;
        public void ContainedSoul_Set(
            SoulLevel value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _ContainedSoul, value, _hasBeenSetTracker, markSet, (int)SoulGem_FieldIndex.ContainedSoul, nameof(ContainedSoul), nameof(ContainedSoul_IsSet));
        }
        public void ContainedSoul_Unset()
        {
            this.ContainedSoul_Set(default(SoulLevel), false);
        }
        #endregion
        #region MaximumCapacity
        public bool MaximumCapacity_IsSet
        {
            get => _hasBeenSetTracker[(int)SoulGem_FieldIndex.MaximumCapacity];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)SoulGem_FieldIndex.MaximumCapacity, nameof(MaximumCapacity_IsSet));
        }
        bool ISoulGemGetter.MaximumCapacity_IsSet => MaximumCapacity_IsSet;
        private SoulLevel _MaximumCapacity;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public SoulLevel MaximumCapacity
        {
            get => this._MaximumCapacity;
            set => MaximumCapacity_Set(value);
        }
        SoulLevel ISoulGemGetter.MaximumCapacity => this.MaximumCapacity;
        public void MaximumCapacity_Set(
            SoulLevel value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _MaximumCapacity, value, _hasBeenSetTracker, markSet, (int)SoulGem_FieldIndex.MaximumCapacity, nameof(MaximumCapacity), nameof(MaximumCapacity_IsSet));
        }
        public void MaximumCapacity_Unset()
        {
            this.MaximumCapacity_Set(default(SoulLevel), false);
        }
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => SoulGemCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => SoulGemCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => SoulGemCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            SoulGemCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<SoulGem>.GetEqualsMask(SoulGem rhs) => SoulGemCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ISoulGemGetter>.GetEqualsMask(ISoulGemGetter rhs) => SoulGemCommon.GetEqualsMask(this, rhs);
        #region To String
        public string ToString(
            string name = null,
            SoulGem_Mask<bool> printMask = null)
        {
            return SoulGemCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            SoulGemCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new SoulGem_Mask<bool> GetHasBeenSetMask()
        {
            return SoulGemCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is SoulGem rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SoulGem rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_IsSet != rhs.Name_IsSet) return false;
            if (Name_IsSet)
            {
                if (!object.Equals(this.Name, rhs.Name)) return false;
            }
            if (Model_IsSet != rhs.Model_IsSet) return false;
            if (Model_IsSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (Icon_IsSet != rhs.Icon_IsSet) return false;
            if (Icon_IsSet)
            {
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (!this.Script_Property.Equals(rhs.Script_Property)) return false;
            }
            if (this.Value != rhs.Value) return false;
            if (!this.Weight.EqualsWithin(rhs.Weight)) return false;
            if (ContainedSoul_IsSet != rhs.ContainedSoul_IsSet) return false;
            if (ContainedSoul_IsSet)
            {
                if (this.ContainedSoul != rhs.ContainedSoul) return false;
            }
            if (MaximumCapacity_IsSet != rhs.MaximumCapacity_IsSet) return false;
            if (MaximumCapacity_IsSet)
            {
                if (this.MaximumCapacity != rhs.MaximumCapacity) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_IsSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (Model_IsSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Value).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Weight).CombineHashCode(ret);
            if (ContainedSoul_IsSet)
            {
                ret = HashHelper.GetHashCode(ContainedSoul).CombineHashCode(ret);
            }
            if (MaximumCapacity_IsSet)
            {
                ret = HashHelper.GetHashCode(MaximumCapacity).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static SoulGem Create_Xml(
            XElement root,
            SoulGem_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SoulGem Create_Xml(
            XElement root,
            out SoulGem_ErrorMask errorMask,
            bool doMasks = true,
            SoulGem_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = SoulGem_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static SoulGem Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new SoulGem();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static SoulGem Create_Xml(
            string path,
            SoulGem_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static SoulGem Create_Xml(
            string path,
            out SoulGem_ErrorMask errorMask,
            SoulGem_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SoulGem Create_Xml(
            Stream stream,
            SoulGem_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static SoulGem Create_Xml(
            Stream stream,
            out SoulGem_ErrorMask errorMask,
            SoulGem_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out SoulGem_ErrorMask errorMask,
            SoulGem_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = SoulGem_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<SoulGem>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out SoulGem_ErrorMask errorMask,
            SoulGem_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out SoulGem_ErrorMask errorMask,
            SoulGem_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement root,
            out ItemAbstract_ErrorMask errorMask,
            ItemAbstract_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = SoulGem_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void CopyIn_Xml(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = SoulGem_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out SoulGem_ErrorMask errorMask,
            bool doMasks = true,
            SoulGem_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoulGem_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out SoulGem_ErrorMask errorMask,
            SoulGem_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out SoulGem_ErrorMask errorMask,
            SoulGem_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out ItemAbstract_ErrorMask errorMask,
            bool doMasks = true,
            ItemAbstract_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoulGem_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoulGem_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            SoulGemCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            SoulGem item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)SoulGem_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)SoulGem_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            root: root,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)SoulGem_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)SoulGem_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.Script_Property,
                        fieldIndex: (int)SoulGem_FieldIndex.Script,
                        errorMask: errorMask);
                    break;
                case "Value":
                    try
                    {
                        errorMask?.PushIndex((int)SoulGem_FieldIndex.Value);
                        if (UInt32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt32 ValueParse,
                            errorMask: errorMask))
                        {
                            item.Value = ValueParse;
                        }
                        else
                        {
                            item.Value = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weight":
                    try
                    {
                        errorMask?.PushIndex((int)SoulGem_FieldIndex.Weight);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single WeightParse,
                            errorMask: errorMask))
                        {
                            item.Weight = WeightParse;
                        }
                        else
                        {
                            item.Weight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ContainedSoul":
                    try
                    {
                        errorMask?.PushIndex((int)SoulGem_FieldIndex.ContainedSoul);
                        if (EnumXmlTranslation<SoulLevel>.Instance.Parse(
                            root: root,
                            item: out SoulLevel ContainedSoulParse,
                            errorMask: errorMask))
                        {
                            item.ContainedSoul = ContainedSoulParse;
                        }
                        else
                        {
                            item.ContainedSoul = default(SoulLevel);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaximumCapacity":
                    try
                    {
                        errorMask?.PushIndex((int)SoulGem_FieldIndex.MaximumCapacity);
                        if (EnumXmlTranslation<SoulLevel>.Instance.Parse(
                            root: root,
                            item: out SoulLevel MaximumCapacityParse,
                            errorMask: errorMask))
                        {
                            item.MaximumCapacity = MaximumCapacityParse;
                        }
                        else
                        {
                            item.MaximumCapacity = default(SoulLevel);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ItemAbstract.Fill_Xml_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((SoulGem_FieldIndex)index)
            {
                case SoulGem_FieldIndex.Name:
                case SoulGem_FieldIndex.Model:
                case SoulGem_FieldIndex.Icon:
                case SoulGem_FieldIndex.ContainedSoul:
                case SoulGem_FieldIndex.MaximumCapacity:
                    return _hasBeenSetTracker[index];
                case SoulGem_FieldIndex.Script:
                    return Script_Property.HasBeenSet;
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = SoulGem_Registration.TRIGGERING_RECORD_TYPE;
        public DATADataType DATADataTypeState;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Script_Property;
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod,
            NotifyingFireParameters cmds = null)
            
        {
            base.Link(
                modList,
                sourceMod,
                cmds);
            Script_Property.Link(
                modList,
                sourceMod,
                cmds);
        }

        public SoulGem(FormKey formKey)
        {
            this.FormKey = formKey;
        }

        partial void PostDuplicate(SoulGem obj, SoulGem rhs, Func<FormKey> getNextFormKey);
        public override MajorRecord Duplicate(Func<FormKey> getNextFormKey)
        {
            var ret = new SoulGem(getNextFormKey());
            ret.CopyFieldsFrom(this);
            PostDuplicate(ret, this, getNextFormKey);
            return ret;
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static SoulGem Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                frame: frame,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static SoulGem Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out SoulGem_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SoulGem_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static SoulGem Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<SoulGem>(
                record: new SoulGem(),
                frame: frame,
                errorMask: errorMask,
                recType: SoulGem_Registration.SLGM_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static SoulGem Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences);
            }
        }

        public static SoulGem Create_Binary(
            string path,
            MasterReferences masterReferences,
            out SoulGem_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences,
                    errorMask: out errorMask);
            }
        }

        public static SoulGem Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences);
            }
        }

        public static SoulGem Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out SoulGem_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out SoulGem_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SoulGem_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out SoulGem_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        masterReferences: masterReferences,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out SoulGem_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    masterReferences: masterReferences,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out ItemAbstract_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = SoulGem_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = SoulGem_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            SoulGemCommon.Write_Binary(
                item: this,
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            SoulGem item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ItemAbstract.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            SoulGem item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)SoulGem_FieldIndex.Name);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.Name);
                case 0x4C444F4D: // MODL
                    try
                    {
                        errorMask?.PushIndex((int)SoulGem_FieldIndex.Model);
                        if (LoquiBinaryTranslation<Model>.Instance.Parse(
                            frame: frame.Spawn(snapToFinalPosition: false),
                            masterReferences: masterReferences,
                            item: out Model ModelParse,
                            errorMask: errorMask))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.Model);
                case 0x4E4F4349: // ICON
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)SoulGem_FieldIndex.Icon);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.Icon);
                case 0x49524353: // SCRI
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Script_Property,
                        fieldIndex: (int)SoulGem_FieldIndex.Script,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.Script);
                case 0x41544144: // DATA
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        if (!dataFrame.Complete)
                        {
                            item.DATADataTypeState = DATADataType.Has;
                        }
                        try
                        {
                            errorMask?.PushIndex((int)SoulGem_FieldIndex.Value);
                            if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out UInt32 ValueParse,
                                errorMask: errorMask))
                            {
                                item.Value = ValueParse;
                            }
                            else
                            {
                                item.Value = default(UInt32);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)SoulGem_FieldIndex.Weight);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single WeightParse,
                                errorMask: errorMask))
                            {
                                item.Weight = WeightParse;
                            }
                            else
                            {
                                item.Weight = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.Weight);
                case 0x4C554F53: // SOUL
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)SoulGem_FieldIndex.ContainedSoul);
                        if (EnumBinaryTranslation<SoulLevel>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out SoulLevel ContainedSoulParse,
                            errorMask: errorMask))
                        {
                            item.ContainedSoul = ContainedSoulParse;
                        }
                        else
                        {
                            item.ContainedSoul = default(SoulLevel);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.ContainedSoul);
                case 0x50434C53: // SLCP
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)SoulGem_FieldIndex.MaximumCapacity);
                        if (EnumBinaryTranslation<SoulLevel>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out SoulLevel MaximumCapacityParse,
                            errorMask: errorMask))
                        {
                            item.MaximumCapacity = MaximumCapacityParse;
                        }
                        else
                        {
                            item.MaximumCapacity = default(SoulLevel);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.MaximumCapacity);
                default:
                    return ItemAbstract.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public SoulGem Copy(
            SoulGem_CopyMask copyMask = null,
            ISoulGemGetter def = null)
        {
            return SoulGem.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static SoulGem Copy(
            ISoulGem item,
            SoulGem_CopyMask copyMask = null,
            ISoulGemGetter def = null)
        {
            SoulGem ret;
            if (item.GetType().Equals(typeof(SoulGem)))
            {
                ret = new SoulGem();
            }
            else
            {
                ret = (SoulGem)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static SoulGem Copy_ToLoqui(
            ISoulGemGetter item,
            SoulGem_CopyMask copyMask = null,
            ISoulGemGetter def = null)
        {
            SoulGem ret;
            if (item.GetType().Equals(typeof(SoulGem)))
            {
                ret = new SoulGem() as SoulGem;
            }
            else
            {
                ret = (SoulGem)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(
            IMajorRecordGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (ISoulGemGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ISoulGemGetter rhs,
            SoulGem_CopyMask copyMask,
            ISoulGemGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ISoulGemGetter rhs,
            out SoulGem_ErrorMask errorMask,
            SoulGem_CopyMask copyMask = null,
            ISoulGemGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoulGemCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = SoulGem_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ISoulGemGetter rhs,
            ErrorMaskBuilder errorMask,
            SoulGem_CopyMask copyMask = null,
            ISoulGemGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            SoulGemCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case SoulGem_FieldIndex.Model:
                    this.Model = (Model)obj;
                    break;
                case SoulGem_FieldIndex.Icon:
                    this.Icon = (String)obj;
                    break;
                case SoulGem_FieldIndex.Script:
                    this.Script_Property.Set(
                        (FormIDSetLink<Script>)obj,
                        cmds);
                    break;
                case SoulGem_FieldIndex.Value:
                    this.Value = (UInt32)obj;
                    break;
                case SoulGem_FieldIndex.Weight:
                    this.Weight = (Single)obj;
                    break;
                case SoulGem_FieldIndex.ContainedSoul:
                    this.ContainedSoul = (SoulLevel)obj;
                    break;
                case SoulGem_FieldIndex.MaximumCapacity:
                    this.MaximumCapacity = (SoulLevel)obj;
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            SoulGemCommon.Clear(this, cmds);
        }


        public new static SoulGem Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new SoulGem();
            foreach (var pair in fields)
            {
                CopyInInternal_SoulGem(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_SoulGem(SoulGem obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out SoulGem_FieldIndex enu))
            {
                CopyInInternal_ItemAbstract(obj, pair);
            }
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case SoulGem_FieldIndex.Model:
                    obj.Model = (Model)pair.Value;
                    break;
                case SoulGem_FieldIndex.Icon:
                    obj.Icon = (String)pair.Value;
                    break;
                case SoulGem_FieldIndex.Script:
                    obj.Script_Property.Set(
                        (FormIDSetLink<Script>)pair.Value,
                        null);
                    break;
                case SoulGem_FieldIndex.Value:
                    obj.Value = (UInt32)pair.Value;
                    break;
                case SoulGem_FieldIndex.Weight:
                    obj.Weight = (Single)pair.Value;
                    break;
                case SoulGem_FieldIndex.ContainedSoul:
                    obj.ContainedSoul = (SoulLevel)pair.Value;
                    break;
                case SoulGem_FieldIndex.MaximumCapacity:
                    obj.MaximumCapacity = (SoulLevel)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, SoulGem obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ISoulGem : ISoulGemGetter, IItemAbstract, ILoquiClass<ISoulGem, ISoulGemGetter>, ILoquiClass<SoulGem, ISoulGemGetter>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String item, bool hasBeenSet = true);
        void Name_Unset();

        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model item, bool hasBeenSet = true);
        void Model_Unset();

        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String item, bool hasBeenSet = true);
        void Icon_Unset();

        new Script Script { get; set; }
        new UInt32 Value { get; set; }

        new Single Weight { get; set; }

        new SoulLevel ContainedSoul { get; set; }
        new bool ContainedSoul_IsSet { get; set; }
        void ContainedSoul_Set(SoulLevel item, bool hasBeenSet = true);
        void ContainedSoul_Unset();

        new SoulLevel MaximumCapacity { get; set; }
        new bool MaximumCapacity_IsSet { get; set; }
        void MaximumCapacity_Set(SoulLevel item, bool hasBeenSet = true);
        void MaximumCapacity_Unset();

    }

    public partial interface ISoulGemGetter : IItemAbstractGetter
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Model
        Model Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region Script
        Script Script { get; }
        FormIDSetLink<Script> Script_Property { get; }

        #endregion
        #region Value
        UInt32 Value { get; }

        #endregion
        #region Weight
        Single Weight { get; }

        #endregion
        #region ContainedSoul
        SoulLevel ContainedSoul { get; }
        bool ContainedSoul_IsSet { get; }

        #endregion
        #region MaximumCapacity
        SoulLevel MaximumCapacity { get; }
        bool MaximumCapacity_IsSet { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum SoulGem_FieldIndex
    {
        MajorRecordFlags = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Model = 6,
        Icon = 7,
        Script = 8,
        Value = 9,
        Weight = 10,
        ContainedSoul = 11,
        MaximumCapacity = 12,
    }
    #endregion

    #region Registration
    public class SoulGem_Registration : ILoquiRegistration
    {
        public static readonly SoulGem_Registration Instance = new SoulGem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 96,
            version: 0);

        public const string GUID = "89d80e87-52e9-4c7c-8a27-bb4303d77edf";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(SoulGem_Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoulGem_ErrorMask);

        public static readonly Type ClassType = typeof(SoulGem);

        public static readonly Type GetterType = typeof(ISoulGemGetter);

        public static readonly Type SetterType = typeof(ISoulGem);

        public static readonly Type CommonType = typeof(SoulGemCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.SoulGem";

        public const string Name = "SoulGem";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)SoulGem_FieldIndex.Name;
                case "MODEL":
                    return (ushort)SoulGem_FieldIndex.Model;
                case "ICON":
                    return (ushort)SoulGem_FieldIndex.Icon;
                case "SCRIPT":
                    return (ushort)SoulGem_FieldIndex.Script;
                case "VALUE":
                    return (ushort)SoulGem_FieldIndex.Value;
                case "WEIGHT":
                    return (ushort)SoulGem_FieldIndex.Weight;
                case "CONTAINEDSOUL":
                    return (ushort)SoulGem_FieldIndex.ContainedSoul;
                case "MAXIMUMCAPACITY":
                    return (ushort)SoulGem_FieldIndex.MaximumCapacity;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                case SoulGem_FieldIndex.Model:
                case SoulGem_FieldIndex.Icon:
                case SoulGem_FieldIndex.Script:
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                case SoulGem_FieldIndex.ContainedSoul:
                case SoulGem_FieldIndex.MaximumCapacity:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Model:
                    return true;
                case SoulGem_FieldIndex.Name:
                case SoulGem_FieldIndex.Icon:
                case SoulGem_FieldIndex.Script:
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                case SoulGem_FieldIndex.ContainedSoul:
                case SoulGem_FieldIndex.MaximumCapacity:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                case SoulGem_FieldIndex.Model:
                case SoulGem_FieldIndex.Icon:
                case SoulGem_FieldIndex.Script:
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                case SoulGem_FieldIndex.ContainedSoul:
                case SoulGem_FieldIndex.MaximumCapacity:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                    return "Name";
                case SoulGem_FieldIndex.Model:
                    return "Model";
                case SoulGem_FieldIndex.Icon:
                    return "Icon";
                case SoulGem_FieldIndex.Script:
                    return "Script";
                case SoulGem_FieldIndex.Value:
                    return "Value";
                case SoulGem_FieldIndex.Weight:
                    return "Weight";
                case SoulGem_FieldIndex.ContainedSoul:
                    return "ContainedSoul";
                case SoulGem_FieldIndex.MaximumCapacity:
                    return "MaximumCapacity";
                default:
                    return ItemAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                case SoulGem_FieldIndex.Model:
                case SoulGem_FieldIndex.Icon:
                case SoulGem_FieldIndex.Script:
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                case SoulGem_FieldIndex.ContainedSoul:
                case SoulGem_FieldIndex.MaximumCapacity:
                    return false;
                default:
                    return ItemAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                case SoulGem_FieldIndex.Model:
                case SoulGem_FieldIndex.Icon:
                case SoulGem_FieldIndex.Script:
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                case SoulGem_FieldIndex.ContainedSoul:
                case SoulGem_FieldIndex.MaximumCapacity:
                    return false;
                default:
                    return ItemAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                    return typeof(String);
                case SoulGem_FieldIndex.Model:
                    return typeof(Model);
                case SoulGem_FieldIndex.Icon:
                    return typeof(String);
                case SoulGem_FieldIndex.Script:
                    return typeof(FormIDSetLink<Script>);
                case SoulGem_FieldIndex.Value:
                    return typeof(UInt32);
                case SoulGem_FieldIndex.Weight:
                    return typeof(Single);
                case SoulGem_FieldIndex.ContainedSoul:
                    return typeof(SoulLevel);
                case SoulGem_FieldIndex.MaximumCapacity:
                    return typeof(SoulLevel);
                default:
                    return ItemAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType SLGM_HEADER = new RecordType("SLGM");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType SOUL_HEADER = new RecordType("SOUL");
        public static readonly RecordType SLCP_HEADER = new RecordType("SLCP");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SLGM_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 6;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class SoulGemCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ISoulGem item,
            ISoulGemGetter rhs,
            ISoulGemGetter def,
            ErrorMaskBuilder errorMask,
            SoulGem_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            ItemAbstractCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)SoulGem_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)SoulGem_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.Model = rhsModelItem;
                                break;
                            case CopyOption.CopyIn:
                                ModelCommon.CopyFieldsFrom(
                                    item: item.Model,
                                    rhs: rhs.Model,
                                    def: def?.Model,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Model.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.Model = Model.Copy(
                                    rhsModelItem,
                                    copyMask?.Model?.Specific,
                                    def: defModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Model_Set(
                            item: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)SoulGem_FieldIndex.Icon);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Icon,
                        rhsHasBeenSet: rhs.Icon_IsSet,
                        defItem: def?.Icon ?? default(String),
                        defHasBeenSet: def?.Icon_IsSet ?? false,
                        outRhsItem: out var rhsIconItem,
                        outDefItem: out var defIconItem))
                    {
                        item.Icon = rhsIconItem;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Script ?? true)
            {
                errorMask?.PushIndex((int)SoulGem_FieldIndex.Script);
                try
                {
                    item.Script_Property.SetToWithDefault(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Value ?? true)
            {
                errorMask?.PushIndex((int)SoulGem_FieldIndex.Value);
                try
                {
                    item.Value = rhs.Value;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Weight ?? true)
            {
                errorMask?.PushIndex((int)SoulGem_FieldIndex.Weight);
                try
                {
                    item.Weight = rhs.Weight;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ContainedSoul ?? true)
            {
                errorMask?.PushIndex((int)SoulGem_FieldIndex.ContainedSoul);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.ContainedSoul,
                        rhsHasBeenSet: rhs.ContainedSoul_IsSet,
                        defItem: def?.ContainedSoul ?? default(SoulLevel),
                        defHasBeenSet: def?.ContainedSoul_IsSet ?? false,
                        outRhsItem: out var rhsContainedSoulItem,
                        outDefItem: out var defContainedSoulItem))
                    {
                        item.ContainedSoul = rhsContainedSoulItem;
                    }
                    else
                    {
                        item.ContainedSoul_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaximumCapacity ?? true)
            {
                errorMask?.PushIndex((int)SoulGem_FieldIndex.MaximumCapacity);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.MaximumCapacity,
                        rhsHasBeenSet: rhs.MaximumCapacity_IsSet,
                        defItem: def?.MaximumCapacity ?? default(SoulLevel),
                        defHasBeenSet: def?.MaximumCapacity_IsSet ?? false,
                        outRhsItem: out var rhsMaximumCapacityItem,
                        outDefItem: out var defMaximumCapacityItem))
                    {
                        item.MaximumCapacity = rhsMaximumCapacityItem;
                    }
                    else
                    {
                        item.MaximumCapacity_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ISoulGem obj,
            NotifyingFireParameters cmds = null)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case SoulGem_FieldIndex.Name:
                    obj.Name_IsSet = on;
                    break;
                case SoulGem_FieldIndex.Model:
                    obj.Model_IsSet = on;
                    break;
                case SoulGem_FieldIndex.Icon:
                    obj.Icon_IsSet = on;
                    break;
                case SoulGem_FieldIndex.Script:
                    obj.Script_Property.HasBeenSet = on;
                    break;
                case SoulGem_FieldIndex.ContainedSoul:
                    obj.ContainedSoul_IsSet = on;
                    break;
                case SoulGem_FieldIndex.MaximumCapacity:
                    obj.MaximumCapacity_IsSet = on;
                    break;
                default:
                    ItemAbstractCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ISoulGem obj,
            NotifyingUnsetParameters cmds = null)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                    obj.Name_Unset();
                    break;
                case SoulGem_FieldIndex.Model:
                    obj.Model_Unset();
                    break;
                case SoulGem_FieldIndex.Icon:
                    obj.Icon_Unset();
                    break;
                case SoulGem_FieldIndex.Script:
                    obj.Script_Property.Unset(cmds);
                    break;
                case SoulGem_FieldIndex.Value:
                    obj.Value = default(UInt32);
                    break;
                case SoulGem_FieldIndex.Weight:
                    obj.Weight = default(Single);
                    break;
                case SoulGem_FieldIndex.ContainedSoul:
                    obj.ContainedSoul_Unset();
                    break;
                case SoulGem_FieldIndex.MaximumCapacity:
                    obj.MaximumCapacity_Unset();
                    break;
                default:
                    ItemAbstractCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ISoulGem obj)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                    return true;
                case SoulGem_FieldIndex.Name:
                    return obj.Name_IsSet;
                case SoulGem_FieldIndex.Model:
                    return obj.Model_IsSet;
                case SoulGem_FieldIndex.Icon:
                    return obj.Icon_IsSet;
                case SoulGem_FieldIndex.Script:
                    return obj.Script_Property.HasBeenSet;
                case SoulGem_FieldIndex.ContainedSoul:
                    return obj.ContainedSoul_IsSet;
                case SoulGem_FieldIndex.MaximumCapacity:
                    return obj.MaximumCapacity_IsSet;
                default:
                    return ItemAbstractCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ISoulGemGetter obj)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                    return obj.Name;
                case SoulGem_FieldIndex.Model:
                    return obj.Model;
                case SoulGem_FieldIndex.Icon:
                    return obj.Icon;
                case SoulGem_FieldIndex.Script:
                    return obj.Script;
                case SoulGem_FieldIndex.Value:
                    return obj.Value;
                case SoulGem_FieldIndex.Weight:
                    return obj.Weight;
                case SoulGem_FieldIndex.ContainedSoul:
                    return obj.ContainedSoul;
                case SoulGem_FieldIndex.MaximumCapacity:
                    return obj.MaximumCapacity;
                default:
                    return ItemAbstractCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ISoulGem item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Name_Unset();
            item.Model_Unset();
            item.Icon_Unset();
            item.Script_Property.Unset(cmds.ToUnsetParams());
            item.Value = default(UInt32);
            item.Weight = default(Single);
            item.ContainedSoul_Unset();
            item.MaximumCapacity_Unset();
        }

        public static SoulGem_Mask<bool> GetEqualsMask(
            this ISoulGemGetter item,
            ISoulGemGetter rhs)
        {
            var ret = new SoulGem_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ISoulGemGetter item,
            ISoulGemGetter rhs,
            SoulGem_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && object.Equals(item.Name, rhs.Name);
            ret.Model = IHasBeenSetExt.LoquiEqualsHelper(item.Model_IsSet, rhs.Model_IsSet, item.Model, rhs.Model, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && object.Equals(item.Icon, rhs.Icon);
            ret.Script = item.Script_Property.Equals(rhs.Script_Property, (l, r) => l == r);
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight == rhs.Weight;
            ret.ContainedSoul = item.ContainedSoul_IsSet == rhs.ContainedSoul_IsSet && item.ContainedSoul == rhs.ContainedSoul;
            ret.MaximumCapacity = item.MaximumCapacity_IsSet == rhs.MaximumCapacity_IsSet && item.MaximumCapacity == rhs.MaximumCapacity;
            ItemAbstractCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ISoulGemGetter item,
            string name = null,
            SoulGem_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ISoulGemGetter item,
            FileGeneration fg,
            string name = null,
            SoulGem_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(SoulGem)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(SoulGem)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {item.Script_Property}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {item.Value}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {item.Weight}");
                }
                if (printMask?.ContainedSoul ?? true)
                {
                    fg.AppendLine($"ContainedSoul => {item.ContainedSoul}");
                }
                if (printMask?.MaximumCapacity ?? true)
                {
                    fg.AppendLine($"MaximumCapacity => {item.MaximumCapacity}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ISoulGemGetter item,
            SoulGem_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.ContainedSoul.HasValue && checkMask.ContainedSoul.Value != item.ContainedSoul_IsSet) return false;
            if (checkMask.MaximumCapacity.HasValue && checkMask.MaximumCapacity.Value != item.MaximumCapacity_IsSet) return false;
            return true;
        }

        public static SoulGem_Mask<bool> GetHasBeenSetMask(ISoulGemGetter item)
        {
            var ret = new SoulGem_Mask<bool>();
            ret.Name = item.Name_IsSet;
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, ModelCommon.GetHasBeenSetMask(item.Model));
            ret.Icon = item.Icon_IsSet;
            ret.Script = item.Script_Property.HasBeenSet;
            ret.Value = true;
            ret.Weight = true;
            ret.ContainedSoul = item.ContainedSoul_IsSet;
            ret.MaximumCapacity = item.MaximumCapacity_IsSet;
            return ret;
        }

        public static SoulGem_FieldIndex? ConvertFieldIndex(ItemAbstract_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static SoulGem_FieldIndex ConvertFieldIndex(ItemAbstract_FieldIndex index)
        {
            switch (index)
            {
                case ItemAbstract_FieldIndex.MajorRecordFlags:
                    return (SoulGem_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.FormKey:
                    return (SoulGem_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.Version:
                    return (SoulGem_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.EditorID:
                    return (SoulGem_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.RecordType:
                    return (SoulGem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static SoulGem_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static SoulGem_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (SoulGem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SoulGem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (SoulGem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SoulGem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (SoulGem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            SoulGem item,
            bool doMasks,
            out SoulGem_ErrorMask errorMask,
            SoulGem_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoulGem_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            SoulGem item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.SoulGem");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.SoulGem");
            }
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)SoulGem_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Model) ?? true))
            {
                LoquiXmlTranslation<Model>.Instance.Write(
                    node: elem,
                    item: item.Model,
                    name: nameof(item.Model),
                    fieldIndex: (int)SoulGem_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SoulGem_FieldIndex.Model));
            }
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)SoulGem_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.Script_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Script),
                    item: item.Script_Property?.FormKey,
                    fieldIndex: (int)SoulGem_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Value) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Value),
                    item: item.Value,
                    fieldIndex: (int)SoulGem_FieldIndex.Value,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Weight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Weight),
                    item: item.Weight,
                    fieldIndex: (int)SoulGem_FieldIndex.Weight,
                    errorMask: errorMask);
            }
            if (item.ContainedSoul_IsSet
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.ContainedSoul) ?? true))
            {
                EnumXmlTranslation<SoulLevel>.Instance.Write(
                    node: elem,
                    name: nameof(item.ContainedSoul),
                    item: item.ContainedSoul,
                    fieldIndex: (int)SoulGem_FieldIndex.ContainedSoul,
                    errorMask: errorMask);
            }
            if (item.MaximumCapacity_IsSet
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.MaximumCapacity) ?? true))
            {
                EnumXmlTranslation<SoulLevel>.Instance.Write(
                    node: elem,
                    name: nameof(item.MaximumCapacity),
                    item: item.MaximumCapacity,
                    fieldIndex: (int)SoulGem_FieldIndex.MaximumCapacity,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            SoulGem item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out SoulGem_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                masterReferences: masterReferences,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = SoulGem_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            SoulGem item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: SoulGem_Registration.SLGM_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            SoulGem item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    fieldIndex: (int)SoulGem_FieldIndex.Name,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(SoulGem_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Model_IsSet)
            {
                LoquiBinaryTranslation<Model>.Instance.Write(
                    writer: writer,
                    item: item.Model,
                    fieldIndex: (int)SoulGem_FieldIndex.Model,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    fieldIndex: (int)SoulGem_FieldIndex.Icon,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(SoulGem_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.Script_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Script_Property,
                    fieldIndex: (int)SoulGem_FieldIndex.Script,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(SoulGem_Registration.SCRI_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.DATADataTypeState.HasFlag(SoulGem.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(SoulGem_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Value,
                        fieldIndex: (int)SoulGem_FieldIndex.Value,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Weight,
                        fieldIndex: (int)SoulGem_FieldIndex.Weight,
                        errorMask: errorMask);
                }
            }
            if (item.ContainedSoul_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoulLevel>.Instance.Write(
                    writer,
                    item.ContainedSoul,
                    length: 1,
                    fieldIndex: (int)SoulGem_FieldIndex.ContainedSoul,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(SoulGem_Registration.SOUL_HEADER),
                    nullable: false);
            }
            if (item.MaximumCapacity_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoulLevel>.Instance.Write(
                    writer,
                    item.MaximumCapacity,
                    length: 1,
                    fieldIndex: (int)SoulGem_FieldIndex.MaximumCapacity,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(SoulGem_Registration.SLCP_HEADER),
                    nullable: false);
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class SoulGem_Mask<T> : ItemAbstract_Mask<T>, IMask<T>, IEquatable<SoulGem_Mask<T>>
    {
        #region Ctors
        public SoulGem_Mask()
        {
        }

        public SoulGem_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Icon = initialValue;
            this.Script = initialValue;
            this.Value = initialValue;
            this.Weight = initialValue;
            this.ContainedSoul = initialValue;
            this.MaximumCapacity = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Icon;
        public T Script;
        public T Value;
        public T Weight;
        public T ContainedSoul;
        public T MaximumCapacity;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is SoulGem_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SoulGem_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Value, rhs.Value)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            if (!object.Equals(this.ContainedSoul, rhs.ContainedSoul)) return false;
            if (!object.Equals(this.MaximumCapacity, rhs.MaximumCapacity)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Value?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(this.ContainedSoul?.GetHashCode());
            ret = ret.CombineHashCode(this.MaximumCapacity?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Icon)) return false;
            if (!eval(this.Script)) return false;
            if (!eval(this.Value)) return false;
            if (!eval(this.Weight)) return false;
            if (!eval(this.ContainedSoul)) return false;
            if (!eval(this.MaximumCapacity)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new SoulGem_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new SoulGem_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(SoulGem_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Icon = eval(this.Icon);
            obj.Script = eval(this.Script);
            obj.Value = eval(this.Value);
            obj.Weight = eval(this.Weight);
            obj.ContainedSoul = eval(this.ContainedSoul);
            obj.MaximumCapacity = eval(this.MaximumCapacity);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(SoulGem_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, SoulGem_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(SoulGem_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {Value}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
                if (printMask?.ContainedSoul ?? true)
                {
                    fg.AppendLine($"ContainedSoul => {ContainedSoul}");
                }
                if (printMask?.MaximumCapacity ?? true)
                {
                    fg.AppendLine($"MaximumCapacity => {MaximumCapacity}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class SoulGem_ErrorMask : ItemAbstract_ErrorMask, IErrorMask<SoulGem_ErrorMask>
    {
        #region Members
        public Exception Name;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Icon;
        public Exception Script;
        public Exception Value;
        public Exception Weight;
        public Exception ContainedSoul;
        public Exception MaximumCapacity;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                    return Name;
                case SoulGem_FieldIndex.Model:
                    return Model;
                case SoulGem_FieldIndex.Icon:
                    return Icon;
                case SoulGem_FieldIndex.Script:
                    return Script;
                case SoulGem_FieldIndex.Value:
                    return Value;
                case SoulGem_FieldIndex.Weight:
                    return Weight;
                case SoulGem_FieldIndex.ContainedSoul:
                    return ContainedSoul;
                case SoulGem_FieldIndex.MaximumCapacity:
                    return MaximumCapacity;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case SoulGem_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case SoulGem_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case SoulGem_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case SoulGem_FieldIndex.Value:
                    this.Value = ex;
                    break;
                case SoulGem_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                case SoulGem_FieldIndex.ContainedSoul:
                    this.ContainedSoul = ex;
                    break;
                case SoulGem_FieldIndex.MaximumCapacity:
                    this.MaximumCapacity = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case SoulGem_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case SoulGem_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case SoulGem_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case SoulGem_FieldIndex.Value:
                    this.Value = (Exception)obj;
                    break;
                case SoulGem_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                case SoulGem_FieldIndex.ContainedSoul:
                    this.ContainedSoul = (Exception)obj;
                    break;
                case SoulGem_FieldIndex.MaximumCapacity:
                    this.MaximumCapacity = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Model != null) return true;
            if (Icon != null) return true;
            if (Script != null) return true;
            if (Value != null) return true;
            if (Weight != null) return true;
            if (ContainedSoul != null) return true;
            if (MaximumCapacity != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("SoulGem_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            Model?.ToString(fg);
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Value => {Value}");
            fg.AppendLine($"Weight => {Weight}");
            fg.AppendLine($"ContainedSoul => {ContainedSoul}");
            fg.AppendLine($"MaximumCapacity => {MaximumCapacity}");
        }
        #endregion

        #region Combine
        public SoulGem_ErrorMask Combine(SoulGem_ErrorMask rhs)
        {
            var ret = new SoulGem_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Value = this.Value.Combine(rhs.Value);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            ret.ContainedSoul = this.ContainedSoul.Combine(rhs.ContainedSoul);
            ret.MaximumCapacity = this.MaximumCapacity.Combine(rhs.MaximumCapacity);
            return ret;
        }
        public static SoulGem_ErrorMask Combine(SoulGem_ErrorMask lhs, SoulGem_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static SoulGem_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new SoulGem_ErrorMask();
        }
        #endregion

    }
    public class SoulGem_CopyMask : ItemAbstract_CopyMask
    {
        public SoulGem_CopyMask()
        {
        }

        public SoulGem_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Name = defaultOn;
            this.Model = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.Icon = defaultOn;
            this.Script = defaultOn;
            this.Value = defaultOn;
            this.Weight = defaultOn;
            this.ContainedSoul = defaultOn;
            this.MaximumCapacity = defaultOn;
        }

        #region Members
        public bool Name;
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Icon;
        public bool Script;
        public bool Value;
        public bool Weight;
        public bool ContainedSoul;
        public bool MaximumCapacity;
        #endregion

    }

    public class SoulGem_TranslationMask : ItemAbstract_TranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Name;
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Icon;
        public bool Script;
        public bool Value;
        public bool Weight;
        public bool ContainedSoul;
        public bool MaximumCapacity;
        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Icon, null));
            ret.Add((Script, null));
            ret.Add((Value, null));
            ret.Add((Weight, null));
            ret.Add((ContainedSoul, null));
            ret.Add((MaximumCapacity, null));
        }
    }
    #endregion

    #endregion

}
