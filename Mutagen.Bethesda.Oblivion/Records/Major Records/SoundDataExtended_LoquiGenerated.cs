/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class SoundDataExtended : 
        SoundData,
        ISoundDataExtended,
        ISoundDataExtendedInternal,
        ILoquiObject<SoundDataExtended>,
        ILoquiObjectSetter,
        IEquatable<SoundDataExtended>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundDataExtended_Registration.Instance;
        public new static SoundDataExtended_Registration Registration => SoundDataExtended_Registration.Instance;

        #region Ctor
        public SoundDataExtended()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region StaticAttenuation
        private Single _StaticAttenuation;
        public Single StaticAttenuation
        {
            get => _StaticAttenuation;
            set
            {
                this._StaticAttenuation = value.PutInRange(StaticAttenuation_Range.Min, StaticAttenuation_Range.Max);
            }
        }
        public static RangeFloat StaticAttenuation_Range = new RangeFloat(0f, 655.35f);
        #endregion
        #region StopTime
        private Single _StopTime;
        public Single StopTime
        {
            get => _StopTime;
            set
            {
                this._StopTime = value.PutInRange(StopTime_Range.Min, StopTime_Range.Max);
            }
        }
        public static RangeFloat StopTime_Range = new RangeFloat(0f, 1434.375f);
        #endregion
        #region StartTime
        private Single _StartTime;
        public Single StartTime
        {
            get => _StartTime;
            set
            {
                this._StartTime = value.PutInRange(StartTime_Range.Min, StartTime_Range.Max);
            }
        }
        public static RangeFloat StartTime_Range = new RangeFloat(0f, 1434.375f);
        #endregion

        IMask<bool> IEqualsMask<SoundDataExtended>.GetEqualsMask(SoundDataExtended rhs, EqualsMaskHelper.Include include) => SoundDataExtendedCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ISoundDataExtendedGetter>.GetEqualsMask(ISoundDataExtendedGetter rhs, EqualsMaskHelper.Include include) => SoundDataExtendedCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            SoundDataExtended_Mask<bool> printMask = null)
        {
            return SoundDataExtendedCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            SoundDataExtendedCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new SoundDataExtended_Mask<bool> GetHasBeenSetMask()
        {
            return SoundDataExtendedCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is SoundDataExtended rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SoundDataExtended rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!this.StaticAttenuation.EqualsWithin(rhs.StaticAttenuation)) return false;
            if (!this.StopTime.EqualsWithin(rhs.StopTime)) return false;
            if (!this.StartTime.EqualsWithin(rhs.StartTime)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(StaticAttenuation).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(StopTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(StartTime).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static SoundDataExtended Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            SoundDataExtended_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SoundDataExtended Create_Xml(
            XElement node,
            out SoundDataExtended_ErrorMask errorMask,
            bool doMasks = true,
            SoundDataExtended_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = SoundDataExtended_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static SoundDataExtended Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new SoundDataExtended() : null;
                    break;
                default:
                    break;
            }
            var ret = new SoundDataExtended();
            try
            {
                foreach (var elem in node.Elements())
                {
                    SoundDataExtendedCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static SoundDataExtended Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            SoundDataExtended_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SoundDataExtended Create_Xml(
            string path,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SoundDataExtended Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            SoundDataExtended_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SoundDataExtended Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            SoundDataExtended_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SoundDataExtended Create_Xml(
            Stream stream,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SoundDataExtended Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            SoundDataExtended_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out SoundDataExtended_ErrorMask errorMask,
            bool doMasks = true,
            SoundDataExtended_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            SoundDataExtendedXmlTranslation.Instance.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoundDataExtended_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out SoundData_ErrorMask errorMask,
            bool doMasks = true,
            SoundData_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            SoundDataExtendedXmlTranslation.Instance.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoundDataExtended_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            SoundDataExtendedXmlTranslation.Instance.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((SoundDataExtended_FieldIndex)index)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = SoundDataExtended_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static SoundDataExtended Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static SoundDataExtended Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out SoundDataExtended_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SoundDataExtended_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static SoundDataExtended Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new SoundDataExtended();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(SoundDataExtended_Registration.SNDX_HEADER)));
            UtilityTranslation.RecordParse(
                record: ret,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs);
            return ret;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out SoundDataExtended_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            SoundDataExtendedBinaryTranslation.Instance.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SoundDataExtended_ErrorMask.Factory(errorMaskBuilder);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out SoundData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            SoundDataExtendedBinaryTranslation.Instance.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = SoundDataExtended_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            SoundDataExtendedBinaryTranslation.Instance.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            SoundDataExtended item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            SoundData.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
            SoundDataExtendedBinaryTranslation.FillBinary_StaticAttenuation_Custom_Public(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            SoundDataExtendedBinaryTranslation.FillBinary_StopTime_Custom_Public(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            SoundDataExtendedBinaryTranslation.FillBinary_StartTime_Custom_Public(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        #endregion

        public SoundDataExtended Copy(
            SoundDataExtended_CopyMask copyMask = null,
            ISoundDataExtendedGetter def = null)
        {
            return SoundDataExtended.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static SoundDataExtended Copy(
            ISoundDataExtended item,
            SoundDataExtended_CopyMask copyMask = null,
            ISoundDataExtendedGetter def = null)
        {
            SoundDataExtended ret;
            if (item.GetType().Equals(typeof(SoundDataExtended)))
            {
                ret = new SoundDataExtended();
            }
            else
            {
                ret = (SoundDataExtended)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static SoundDataExtended Copy_ToLoqui(
            ISoundDataExtendedGetter item,
            SoundDataExtended_CopyMask copyMask = null,
            ISoundDataExtendedGetter def = null)
        {
            SoundDataExtended ret;
            if (item.GetType().Equals(typeof(SoundDataExtended)))
            {
                ret = new SoundDataExtended() as SoundDataExtended;
            }
            else
            {
                ret = (SoundDataExtended)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(ISoundDataGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (ISoundDataExtendedGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ISoundDataExtendedGetter rhs,
            SoundDataExtended_CopyMask copyMask,
            ISoundDataExtendedGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ISoundDataExtendedGetter rhs,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_CopyMask copyMask = null,
            ISoundDataExtendedGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundDataExtendedCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = SoundDataExtended_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ISoundDataExtendedGetter rhs,
            ErrorMaskBuilder errorMask,
            SoundDataExtended_CopyMask copyMask = null,
            ISoundDataExtendedGetter def = null,
            bool doMasks = true)
        {
            SoundDataExtendedCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    this.StaticAttenuation = (Single)obj;
                    break;
                case SoundDataExtended_FieldIndex.StopTime:
                    this.StopTime = (Single)obj;
                    break;
                case SoundDataExtended_FieldIndex.StartTime:
                    this.StartTime = (Single)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            CallClearPartial_Internal();
            SoundDataExtendedCommon.Clear(this);
        }


        public new static SoundDataExtended Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new SoundDataExtended();
            foreach (var pair in fields)
            {
                CopyInInternal_SoundDataExtended(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_SoundDataExtended(SoundDataExtended obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out SoundDataExtended_FieldIndex enu))
            {
                CopyInInternal_SoundData(obj, pair);
            }
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    obj.StaticAttenuation = (Single)pair.Value;
                    break;
                case SoundDataExtended_FieldIndex.StopTime:
                    obj.StopTime = (Single)pair.Value;
                    break;
                case SoundDataExtended_FieldIndex.StartTime:
                    obj.StartTime = (Single)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ISoundDataExtended : ISoundDataExtendedGetter, ISoundData, ILoquiClass<ISoundDataExtended, ISoundDataExtendedGetter>, ILoquiClass<SoundDataExtended, ISoundDataExtendedGetter>
    {
        new Single StaticAttenuation { get; set; }

        new Single StopTime { get; set; }

        new Single StartTime { get; set; }

    }

    public partial interface ISoundDataExtendedInternal : ISoundDataExtended, ISoundDataExtendedInternalGetter, ISoundDataInternal
    {
    }

    public partial interface ISoundDataExtendedGetter : ISoundDataGetter
    {
        #region StaticAttenuation
        Single StaticAttenuation { get; }

        #endregion
        #region StopTime
        Single StopTime { get; }

        #endregion
        #region StartTime
        Single StartTime { get; }

        #endregion

    }

    public partial interface ISoundDataExtendedInternalGetter : ISoundDataExtendedGetter, ISoundDataInternalGetter
    {

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum SoundDataExtended_FieldIndex
    {
        MinimumAttenuationDistance = 0,
        MaximumAttenuationDistance = 1,
        FrequencyAdjustment = 2,
        Flags = 3,
        StaticAttenuation = 4,
        StopTime = 5,
        StartTime = 6,
    }
    #endregion

    #region Registration
    public class SoundDataExtended_Registration : ILoquiRegistration
    {
        public static readonly SoundDataExtended_Registration Instance = new SoundDataExtended_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 41,
            version: 0);

        public const string GUID = "3af22aab-9cdf-4fac-a210-9c06331d2180";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(SoundDataExtended_Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundDataExtended_ErrorMask);

        public static readonly Type ClassType = typeof(SoundDataExtended);

        public static readonly Type GetterType = typeof(ISoundDataExtendedGetter);

        public static readonly Type InternalGetterType = typeof(ISoundDataExtendedInternalGetter);

        public static readonly Type SetterType = typeof(ISoundDataExtended);

        public static readonly Type InternalSetterType = typeof(ISoundDataExtendedInternal);

        public static readonly Type CommonType = typeof(SoundDataExtendedCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.SoundDataExtended";

        public const string Name = "SoundDataExtended";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "STATICATTENUATION":
                    return (ushort)SoundDataExtended_FieldIndex.StaticAttenuation;
                case "STOPTIME":
                    return (ushort)SoundDataExtended_FieldIndex.StopTime;
                case "STARTTIME":
                    return (ushort)SoundDataExtended_FieldIndex.StartTime;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return false;
                default:
                    return SoundData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return false;
                default:
                    return SoundData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return false;
                default:
                    return SoundData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    return "StaticAttenuation";
                case SoundDataExtended_FieldIndex.StopTime:
                    return "StopTime";
                case SoundDataExtended_FieldIndex.StartTime:
                    return "StartTime";
                default:
                    return SoundData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return false;
                default:
                    return SoundData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return false;
                default:
                    return SoundData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    return typeof(Single);
                case SoundDataExtended_FieldIndex.StopTime:
                    return typeof(Single);
                case SoundDataExtended_FieldIndex.StartTime:
                    return typeof(Single);
                default:
                    return SoundData_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType SNDX_HEADER = new RecordType("SNDX");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SNDX_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class SoundDataExtendedCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ISoundDataExtended item,
            ISoundDataExtendedGetter rhs,
            ISoundDataExtendedGetter def,
            ErrorMaskBuilder errorMask,
            SoundDataExtended_CopyMask copyMask)
        {
            SoundDataCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.StaticAttenuation ?? true)
            {
                errorMask?.PushIndex((int)SoundDataExtended_FieldIndex.StaticAttenuation);
                try
                {
                    item.StaticAttenuation = rhs.StaticAttenuation;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.StopTime ?? true)
            {
                errorMask?.PushIndex((int)SoundDataExtended_FieldIndex.StopTime);
                try
                {
                    item.StopTime = rhs.StopTime;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.StartTime ?? true)
            {
                errorMask?.PushIndex((int)SoundDataExtended_FieldIndex.StartTime);
                try
                {
                    item.StartTime = rhs.StartTime;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(ISoundDataExtended item)
        {
            item.StaticAttenuation = default(Single);
            item.StopTime = default(Single);
            item.StartTime = default(Single);
        }

        public static SoundDataExtended_Mask<bool> GetEqualsMask(
            this ISoundDataExtendedGetter item,
            ISoundDataExtendedGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundDataExtended_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            ISoundDataExtendedGetter item,
            ISoundDataExtendedGetter rhs,
            SoundDataExtended_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.StaticAttenuation = item.StaticAttenuation.EqualsWithin(rhs.StaticAttenuation);
            ret.StopTime = item.StopTime.EqualsWithin(rhs.StopTime);
            ret.StartTime = item.StartTime.EqualsWithin(rhs.StartTime);
            SoundDataCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ISoundDataExtendedGetter item,
            string name = null,
            SoundDataExtended_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ISoundDataExtendedGetter item,
            FileGeneration fg,
            string name = null,
            SoundDataExtended_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(SoundDataExtended)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(SoundDataExtended)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.StaticAttenuation ?? true)
                {
                    fg.AppendLine($"StaticAttenuation => {item.StaticAttenuation}");
                }
                if (printMask?.StopTime ?? true)
                {
                    fg.AppendLine($"StopTime => {item.StopTime}");
                }
                if (printMask?.StartTime ?? true)
                {
                    fg.AppendLine($"StartTime => {item.StartTime}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ISoundDataExtendedGetter item,
            SoundDataExtended_Mask<bool?> checkMask)
        {
            return true;
        }

        public static SoundDataExtended_Mask<bool> GetHasBeenSetMask(ISoundDataExtendedGetter item)
        {
            var ret = new SoundDataExtended_Mask<bool>();
            ret.StaticAttenuation = true;
            ret.StopTime = true;
            ret.StartTime = true;
            return ret;
        }

        public static SoundDataExtended_FieldIndex? ConvertFieldIndex(SoundData_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static SoundDataExtended_FieldIndex ConvertFieldIndex(SoundData_FieldIndex index)
        {
            switch (index)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                    return (SoundDataExtended_FieldIndex)((int)index);
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                    return (SoundDataExtended_FieldIndex)((int)index);
                case SoundData_FieldIndex.FrequencyAdjustment:
                    return (SoundDataExtended_FieldIndex)((int)index);
                case SoundData_FieldIndex.Flags:
                    return (SoundDataExtended_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        public static void FillPublic_Xml(
            this SoundDataExtended item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SoundDataExtendedCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this SoundDataExtended item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "StaticAttenuation":
                    try
                    {
                        errorMask?.PushIndex((int)SoundDataExtended_FieldIndex.StaticAttenuation);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single StaticAttenuationParse,
                            errorMask: errorMask))
                        {
                            item.StaticAttenuation = StaticAttenuationParse;
                        }
                        else
                        {
                            item.StaticAttenuation = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StopTime":
                    try
                    {
                        errorMask?.PushIndex((int)SoundDataExtended_FieldIndex.StopTime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single StopTimeParse,
                            errorMask: errorMask))
                        {
                            item.StopTime = StopTimeParse;
                        }
                        else
                        {
                            item.StopTime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StartTime":
                    try
                    {
                        errorMask?.PushIndex((int)SoundDataExtended_FieldIndex.StartTime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single StartTimeParse,
                            errorMask: errorMask))
                        {
                            item.StartTime = StartTimeParse;
                        }
                        else
                        {
                            item.StartTime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SoundDataCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class SoundDataExtendedXmlTranslation : SoundDataXmlTranslation
    {
        public new readonly static SoundDataExtendedXmlTranslation Instance = new SoundDataExtendedXmlTranslation();

        public static void WriteToNode_Xml(
            ISoundDataExtendedInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            SoundDataXmlTranslation.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.StaticAttenuation) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.StaticAttenuation),
                    item: item.StaticAttenuation,
                    fieldIndex: (int)SoundDataExtended_FieldIndex.StaticAttenuation,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.StopTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.StopTime),
                    item: item.StopTime,
                    fieldIndex: (int)SoundDataExtended_FieldIndex.StopTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.StartTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.StartTime),
                    item: item.StartTime,
                    fieldIndex: (int)SoundDataExtended_FieldIndex.StartTime,
                    errorMask: errorMask);
            }
        }

        #region Xml Write
        public void Write_Xml(
            XElement node,
            ISoundDataExtendedInternalGetter item,
            bool doMasks,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoundDataExtended_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Xml(
            XElement node,
            ISoundDataExtendedInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.SoundDataExtended");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.SoundDataExtended");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

    }
    #endregion

    #region Mask
    public class SoundDataExtended_Mask<T> : SoundData_Mask<T>, IMask<T>, IEquatable<SoundDataExtended_Mask<T>>
    {
        #region Ctors
        public SoundDataExtended_Mask()
        {
        }

        public SoundDataExtended_Mask(T initialValue)
        {
            this.StaticAttenuation = initialValue;
            this.StopTime = initialValue;
            this.StartTime = initialValue;
        }
        #endregion

        #region Members
        public T StaticAttenuation;
        public T StopTime;
        public T StartTime;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is SoundDataExtended_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SoundDataExtended_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.StaticAttenuation, rhs.StaticAttenuation)) return false;
            if (!object.Equals(this.StopTime, rhs.StopTime)) return false;
            if (!object.Equals(this.StartTime, rhs.StartTime)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.StaticAttenuation?.GetHashCode());
            ret = ret.CombineHashCode(this.StopTime?.GetHashCode());
            ret = ret.CombineHashCode(this.StartTime?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.StaticAttenuation)) return false;
            if (!eval(this.StopTime)) return false;
            if (!eval(this.StartTime)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new SoundDataExtended_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new SoundDataExtended_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(SoundDataExtended_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.StaticAttenuation = eval(this.StaticAttenuation);
            obj.StopTime = eval(this.StopTime);
            obj.StartTime = eval(this.StartTime);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(SoundDataExtended_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, SoundDataExtended_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(SoundDataExtended_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.StaticAttenuation ?? true)
                {
                    fg.AppendLine($"StaticAttenuation => {StaticAttenuation}");
                }
                if (printMask?.StopTime ?? true)
                {
                    fg.AppendLine($"StopTime => {StopTime}");
                }
                if (printMask?.StartTime ?? true)
                {
                    fg.AppendLine($"StartTime => {StartTime}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class SoundDataExtended_ErrorMask : SoundData_ErrorMask, IErrorMask<SoundDataExtended_ErrorMask>
    {
        #region Members
        public Exception StaticAttenuation;
        public Exception StopTime;
        public Exception StartTime;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    return StaticAttenuation;
                case SoundDataExtended_FieldIndex.StopTime:
                    return StopTime;
                case SoundDataExtended_FieldIndex.StartTime:
                    return StartTime;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    this.StaticAttenuation = ex;
                    break;
                case SoundDataExtended_FieldIndex.StopTime:
                    this.StopTime = ex;
                    break;
                case SoundDataExtended_FieldIndex.StartTime:
                    this.StartTime = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    this.StaticAttenuation = (Exception)obj;
                    break;
                case SoundDataExtended_FieldIndex.StopTime:
                    this.StopTime = (Exception)obj;
                    break;
                case SoundDataExtended_FieldIndex.StartTime:
                    this.StartTime = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (StaticAttenuation != null) return true;
            if (StopTime != null) return true;
            if (StartTime != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("SoundDataExtended_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"StaticAttenuation => {StaticAttenuation}");
            fg.AppendLine($"StopTime => {StopTime}");
            fg.AppendLine($"StartTime => {StartTime}");
        }
        #endregion

        #region Combine
        public SoundDataExtended_ErrorMask Combine(SoundDataExtended_ErrorMask rhs)
        {
            var ret = new SoundDataExtended_ErrorMask();
            ret.StaticAttenuation = this.StaticAttenuation.Combine(rhs.StaticAttenuation);
            ret.StopTime = this.StopTime.Combine(rhs.StopTime);
            ret.StartTime = this.StartTime.Combine(rhs.StartTime);
            return ret;
        }
        public static SoundDataExtended_ErrorMask Combine(SoundDataExtended_ErrorMask lhs, SoundDataExtended_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static SoundDataExtended_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new SoundDataExtended_ErrorMask();
        }
        #endregion

    }
    public class SoundDataExtended_CopyMask : SoundData_CopyMask
    {
        public SoundDataExtended_CopyMask()
        {
        }

        public SoundDataExtended_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.StaticAttenuation = defaultOn;
            this.StopTime = defaultOn;
            this.StartTime = defaultOn;
        }

        #region Members
        public bool StaticAttenuation;
        public bool StopTime;
        public bool StartTime;
        #endregion

    }

    public class SoundDataExtended_TranslationMask : SoundData_TranslationMask
    {
        #region Members
        public bool StaticAttenuation;
        public bool StopTime;
        public bool StartTime;
        #endregion

        #region Ctors
        public SoundDataExtended_TranslationMask()
            : base()
        {
        }

        public SoundDataExtended_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.StaticAttenuation = defaultOn;
            this.StopTime = defaultOn;
            this.StartTime = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((StaticAttenuation, null));
            ret.Add((StopTime, null));
            ret.Add((StartTime, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class SoundDataExtendedBinaryTranslation : SoundDataBinaryTranslation
    {
        public new readonly static SoundDataExtendedBinaryTranslation Instance = new SoundDataExtendedBinaryTranslation();

        static partial void FillBinary_StaticAttenuation_Custom(
            MutagenFrame frame,
            SoundDataExtended item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinary_StaticAttenuation_Custom_Public(
            MutagenFrame frame,
            SoundDataExtended item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinary_StaticAttenuation_Custom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinary_StaticAttenuation_Custom(
            MutagenWriter writer,
            ISoundDataExtendedInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_StaticAttenuation(
            MutagenWriter writer,
            ISoundDataExtendedInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_StaticAttenuation_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinary_StopTime_Custom(
            MutagenFrame frame,
            SoundDataExtended item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinary_StopTime_Custom_Public(
            MutagenFrame frame,
            SoundDataExtended item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinary_StopTime_Custom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinary_StopTime_Custom(
            MutagenWriter writer,
            ISoundDataExtendedInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_StopTime(
            MutagenWriter writer,
            ISoundDataExtendedInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_StopTime_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinary_StartTime_Custom(
            MutagenFrame frame,
            SoundDataExtended item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinary_StartTime_Custom_Public(
            MutagenFrame frame,
            SoundDataExtended item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinary_StartTime_Custom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinary_StartTime_Custom(
            MutagenWriter writer,
            ISoundDataExtendedInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_StartTime(
            MutagenWriter writer,
            ISoundDataExtendedInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_StartTime_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_Binary_Embedded(
            ISoundDataExtendedInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            SoundDataBinaryTranslation.Write_Binary_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            SoundDataExtendedBinaryTranslation.WriteBinary_StaticAttenuation(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            SoundDataExtendedBinaryTranslation.WriteBinary_StopTime(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            SoundDataExtendedBinaryTranslation.WriteBinary_StartTime(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        #region Binary Write
        public void Write_Binary(
            MutagenWriter writer,
            ISoundDataExtendedInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out SoundDataExtended_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = SoundDataExtended_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Binary(
            MutagenWriter writer,
            ISoundDataExtendedInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: SoundDataExtended_Registration.SNDX_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

    }
    #endregion

    #endregion

}
