/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class SoundData : ISoundData, ILoquiObjectSetter, IEquatable<SoundData>
    {
        ILoquiRegistration ILoquiObject.Registration => SoundData_Registration.Instance;
        public static SoundData_Registration Registration => SoundData_Registration.Instance;

        #region Ctor
        public SoundData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MinimumAttenuationDistance
        protected readonly INotifyingItem<UInt16> _MinimumAttenuationDistance = NotifyingItem.Factory<UInt16>();
        public INotifyingItem<UInt16> MinimumAttenuationDistance_Property => _MinimumAttenuationDistance;
        public UInt16 MinimumAttenuationDistance
        {
            get => this._MinimumAttenuationDistance.Item;
            set => this._MinimumAttenuationDistance.Set(value);
        }
        INotifyingItem<UInt16> ISoundData.MinimumAttenuationDistance_Property => this.MinimumAttenuationDistance_Property;
        INotifyingItemGetter<UInt16> ISoundDataGetter.MinimumAttenuationDistance_Property => this.MinimumAttenuationDistance_Property;
        #endregion
        #region MaximumAttenuationDistance
        protected readonly INotifyingItem<UInt16> _MaximumAttenuationDistance = NotifyingItem.Factory<UInt16>();
        public INotifyingItem<UInt16> MaximumAttenuationDistance_Property => _MaximumAttenuationDistance;
        public UInt16 MaximumAttenuationDistance
        {
            get => this._MaximumAttenuationDistance.Item;
            set => this._MaximumAttenuationDistance.Set(value);
        }
        INotifyingItem<UInt16> ISoundData.MaximumAttenuationDistance_Property => this.MaximumAttenuationDistance_Property;
        INotifyingItemGetter<UInt16> ISoundDataGetter.MaximumAttenuationDistance_Property => this.MaximumAttenuationDistance_Property;
        #endregion
        #region FrequencyAdjustment
        protected readonly INotifyingItem<SByte> _FrequencyAdjustment = NotifyingItem.Factory<SByte>();
        public INotifyingItem<SByte> FrequencyAdjustment_Property => _FrequencyAdjustment;
        public SByte FrequencyAdjustment
        {
            get => this._FrequencyAdjustment.Item;
            set => this._FrequencyAdjustment.Set(value);
        }
        INotifyingItem<SByte> ISoundData.FrequencyAdjustment_Property => this.FrequencyAdjustment_Property;
        INotifyingItemGetter<SByte> ISoundDataGetter.FrequencyAdjustment_Property => this.FrequencyAdjustment_Property;
        #endregion
        #region Flags
        protected readonly INotifyingItem<SoundData.Flag> _Flags = NotifyingItem.Factory<SoundData.Flag>();
        public INotifyingItem<SoundData.Flag> Flags_Property => _Flags;
        public SoundData.Flag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        INotifyingItem<SoundData.Flag> ISoundData.Flags_Property => this.Flags_Property;
        INotifyingItemGetter<SoundData.Flag> ISoundDataGetter.Flags_Property => this.Flags_Property;
        #endregion

        #region Loqui Getter Interface

        protected virtual object GetNthObject(ushort index) => SoundDataCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected virtual bool GetNthObjectHasBeenSet(ushort index) => SoundDataCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected virtual void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => SoundDataCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected virtual void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            SoundDataCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return SoundDataCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            SoundData_Mask<bool> printMask = null)
        {
            return SoundDataCommon.ToString(this, name: name, printMask: printMask);
        }

        public virtual void ToString(
            FileGeneration fg,
            string name = null)
        {
            SoundDataCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public SoundData_Mask<bool> GetHasBeenSetMask()
        {
            return SoundDataCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is SoundData rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SoundData rhs)
        {
            if (rhs == null) return false;
            if (MinimumAttenuationDistance != rhs.MinimumAttenuationDistance) return false;
            if (MaximumAttenuationDistance != rhs.MaximumAttenuationDistance) return false;
            if (FrequencyAdjustment != rhs.FrequencyAdjustment) return false;
            if (Flags != rhs.Flags) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(MinimumAttenuationDistance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaximumAttenuationDistance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FrequencyAdjustment).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static SoundData Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static SoundData Create_XML(
            XElement root,
            out SoundData_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static SoundData Create_XML(
            XElement root,
            bool doMasks,
            out SoundData_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (SoundData Object, SoundData_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            SoundData_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SoundData_ErrorMask()) : default(Func<SoundData_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static SoundData Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static SoundData Create_XML(
            string path,
            out SoundData_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static SoundData Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static SoundData Create_XML(
            Stream stream,
            out SoundData_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public virtual void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<SoundData, SoundData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out SoundData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<SoundData, SoundData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out SoundData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out SoundData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out SoundData_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (SoundData_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out SoundData_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out SoundData_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public virtual void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected virtual object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            SoundDataCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static SoundData Create_XML_Internal(
            XElement root,
            Func<SoundData_ErrorMask> errorMask)
        {
            var ret = new SoundData();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            SoundData item,
            XElement root,
            string name,
            Func<SoundData_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "MinimumAttenuationDistance":
                    item._MinimumAttenuationDistance.SetIfSucceeded(UInt16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)SoundData_FieldIndex.MinimumAttenuationDistance,
                        errorMask: errorMask));
                    break;
                case "MaximumAttenuationDistance":
                    item._MaximumAttenuationDistance.SetIfSucceeded(UInt16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)SoundData_FieldIndex.MaximumAttenuationDistance,
                        errorMask: errorMask));
                    break;
                case "FrequencyAdjustment":
                    item._FrequencyAdjustment.SetIfSucceeded(Int8XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)SoundData_FieldIndex.FrequencyAdjustment,
                        errorMask: errorMask));
                    break;
                case "Flags":
                    item._Flags.SetIfSucceeded(EnumXmlTranslation<SoundData.Flag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)SoundData_FieldIndex.Flags,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static SoundData Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static SoundData Create_Binary(
            MutagenFrame frame,
            out SoundData_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static SoundData Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out SoundData_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (SoundData Object, SoundData_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            SoundData_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SoundData_ErrorMask()) : default(Func<SoundData_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static SoundData Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static SoundData Create_Binary(
            string path,
            out SoundData_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static SoundData Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static SoundData Create_Binary(
            Stream stream,
            out SoundData_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<SoundData, SoundData_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out SoundData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<SoundData, SoundData_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out SoundData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out SoundData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out SoundData_ErrorMask errorMask)
        {
            errorMask = (SoundData_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out SoundData_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out SoundData_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public virtual void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public virtual void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected virtual object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            SoundDataCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        static partial void FillBinary_MinimumAttenuationDistance_Custom(
            MutagenFrame frame,
            SoundData item,
            int fieldIndex,
            Func<SoundData_ErrorMask> errorMask);

        static partial void WriteBinary_MinimumAttenuationDistance_Custom(
            MutagenWriter writer,
            SoundData item,
            int fieldIndex,
            Func<SoundData_ErrorMask> errorMask);

        public static void WriteBinary_MinimumAttenuationDistance(
            MutagenWriter writer,
            SoundData item,
            int fieldIndex,
            Func<SoundData_ErrorMask> errorMask)
        {
            WriteBinary_MinimumAttenuationDistance_Custom(
                writer: writer,
                item: item,
                fieldIndex: fieldIndex,
                errorMask: errorMask);
        }

        static partial void FillBinary_MaximumAttenuationDistance_Custom(
            MutagenFrame frame,
            SoundData item,
            int fieldIndex,
            Func<SoundData_ErrorMask> errorMask);

        static partial void WriteBinary_MaximumAttenuationDistance_Custom(
            MutagenWriter writer,
            SoundData item,
            int fieldIndex,
            Func<SoundData_ErrorMask> errorMask);

        public static void WriteBinary_MaximumAttenuationDistance(
            MutagenWriter writer,
            SoundData item,
            int fieldIndex,
            Func<SoundData_ErrorMask> errorMask)
        {
            WriteBinary_MaximumAttenuationDistance_Custom(
                writer: writer,
                item: item,
                fieldIndex: fieldIndex,
                errorMask: errorMask);
        }

        private static SoundData Create_Binary_Internal(
            MutagenFrame frame,
            Func<SoundData_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new SoundData();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    SoundData_Registration.SNDD_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            SoundData item,
            MutagenFrame frame,
            Func<SoundData_ErrorMask> errorMask)
        {
            FillBinary_MinimumAttenuationDistance_Custom(
                frame: frame,
                item: item,
                fieldIndex: (int)SoundData_FieldIndex.MinimumAttenuationDistance,
                errorMask: errorMask);
            FillBinary_MaximumAttenuationDistance_Custom(
                frame: frame,
                item: item,
                fieldIndex: (int)SoundData_FieldIndex.MaximumAttenuationDistance,
                errorMask: errorMask);
            item._FrequencyAdjustment.SetIfSucceeded(Mutagen.Bethesda.Binary.Int8BinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)SoundData_FieldIndex.FrequencyAdjustment,
                errorMask: errorMask));
            frame.Position += 1;
            item._Flags.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoundData.Flag>.Instance.Parse(
                frame: frame.Spawn(new ContentLength(4)),
                fieldIndex: (int)SoundData_FieldIndex.Flags,
                errorMask: errorMask));
        }

        #endregion

        public SoundData Copy(
            SoundData_CopyMask copyMask = null,
            ISoundDataGetter def = null)
        {
            return SoundData.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static SoundData Copy(
            ISoundData item,
            SoundData_CopyMask copyMask = null,
            ISoundDataGetter def = null)
        {
            SoundData ret;
            if (item.GetType().Equals(typeof(SoundData)))
            {
                ret = new SoundData();
            }
            else
            {
                ret = (SoundData)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            SoundData_CopyMask copyMask = null,
            ISoundDataGetter def = null)
            where CopyType : class, ISoundData
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(SoundData)))
            {
                ret = new SoundData() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static SoundData Copy_ToLoqui(
            ISoundDataGetter item,
            SoundData_CopyMask copyMask = null,
            ISoundDataGetter def = null)
        {
            SoundData ret;
            if (item.GetType().Equals(typeof(SoundData)))
            {
                ret = new SoundData() as SoundData;
            }
            else
            {
                ret = (SoundData)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected virtual void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                    this._MinimumAttenuationDistance.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                    this._MaximumAttenuationDistance.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case SoundData_FieldIndex.FrequencyAdjustment:
                    this._FrequencyAdjustment.Set(
                        (SByte)obj,
                        cmds);
                    break;
                case SoundData_FieldIndex.Flags:
                    this._Flags.Set(
                        (SoundData.Flag)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public virtual void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            SoundDataCommon.Clear(this, cmds);
        }


        public static SoundData Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new SoundData();
            foreach (var pair in fields)
            {
                CopyInInternal_SoundData(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_SoundData(SoundData obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out SoundData_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                    obj._MinimumAttenuationDistance.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                    obj._MaximumAttenuationDistance.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                case SoundData_FieldIndex.FrequencyAdjustment:
                    obj._FrequencyAdjustment.Set(
                        (SByte)pair.Value,
                        null);
                    break;
                case SoundData_FieldIndex.Flags:
                    obj._Flags.Set(
                        (SoundData.Flag)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, SoundData obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ISoundData : ISoundDataGetter, ILoquiClass<ISoundData, ISoundDataGetter>, ILoquiClass<SoundData, ISoundDataGetter>
    {
        new UInt16 MinimumAttenuationDistance { get; set; }
        new INotifyingItem<UInt16> MinimumAttenuationDistance_Property { get; }

        new UInt16 MaximumAttenuationDistance { get; set; }
        new INotifyingItem<UInt16> MaximumAttenuationDistance_Property { get; }

        new SByte FrequencyAdjustment { get; set; }
        new INotifyingItem<SByte> FrequencyAdjustment_Property { get; }

        new SoundData.Flag Flags { get; set; }
        new INotifyingItem<SoundData.Flag> Flags_Property { get; }

    }

    public interface ISoundDataGetter : ILoquiObject
    {
        #region MinimumAttenuationDistance
        UInt16 MinimumAttenuationDistance { get; }
        INotifyingItemGetter<UInt16> MinimumAttenuationDistance_Property { get; }

        #endregion
        #region MaximumAttenuationDistance
        UInt16 MaximumAttenuationDistance { get; }
        INotifyingItemGetter<UInt16> MaximumAttenuationDistance_Property { get; }

        #endregion
        #region FrequencyAdjustment
        SByte FrequencyAdjustment { get; }
        INotifyingItemGetter<SByte> FrequencyAdjustment_Property { get; }

        #endregion
        #region Flags
        SoundData.Flag Flags { get; }
        INotifyingItemGetter<SoundData.Flag> Flags_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum SoundData_FieldIndex
    {
        MinimumAttenuationDistance = 0,
        MaximumAttenuationDistance = 1,
        FrequencyAdjustment = 2,
        Flags = 3,
    }
    #endregion

    #region Registration
    public class SoundData_Registration : ILoquiRegistration
    {
        public static readonly SoundData_Registration Instance = new SoundData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 40,
            version: 0);

        public const string GUID = "4849cf00-7d46-4b82-bec2-e7eb7f54e563";

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(SoundData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundData_ErrorMask);

        public static readonly Type ClassType = typeof(SoundData);

        public static readonly Type GetterType = typeof(ISoundDataGetter);

        public static readonly Type SetterType = typeof(ISoundData);

        public static readonly Type CommonType = typeof(SoundDataCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.SoundData";

        public const string Name = "SoundData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MINIMUMATTENUATIONDISTANCE":
                    return (ushort)SoundData_FieldIndex.MinimumAttenuationDistance;
                case "MAXIMUMATTENUATIONDISTANCE":
                    return (ushort)SoundData_FieldIndex.MaximumAttenuationDistance;
                case "FREQUENCYADJUSTMENT":
                    return (ushort)SoundData_FieldIndex.FrequencyAdjustment;
                case "FLAGS":
                    return (ushort)SoundData_FieldIndex.Flags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                case SoundData_FieldIndex.FrequencyAdjustment:
                case SoundData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                case SoundData_FieldIndex.FrequencyAdjustment:
                case SoundData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                case SoundData_FieldIndex.FrequencyAdjustment:
                case SoundData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                    return "MinimumAttenuationDistance";
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                    return "MaximumAttenuationDistance";
                case SoundData_FieldIndex.FrequencyAdjustment:
                    return "FrequencyAdjustment";
                case SoundData_FieldIndex.Flags:
                    return "Flags";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                case SoundData_FieldIndex.FrequencyAdjustment:
                case SoundData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                case SoundData_FieldIndex.FrequencyAdjustment:
                case SoundData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                    return typeof(UInt16);
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                    return typeof(UInt16);
                case SoundData_FieldIndex.FrequencyAdjustment:
                    return typeof(SByte);
                case SoundData_FieldIndex.Flags:
                    return typeof(SoundData.Flag);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType SNDD_HEADER = new RecordType("SNDD");
        public static readonly RecordType SNDX_HEADER = new RecordType("SNDX");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        SNDD_HEADER,
                        SNDX_HEADER
                    })
            );
        });
        public const int NumStructFields = 4;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class SoundDataCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ISoundData item,
            ISoundDataGetter rhs,
            SoundData_CopyMask copyMask = null,
            ISoundDataGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            SoundDataCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ISoundData item,
            ISoundDataGetter rhs,
            out SoundData_ErrorMask errorMask,
            SoundData_CopyMask copyMask = null,
            ISoundDataGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            SoundDataCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ISoundData item,
            ISoundDataGetter rhs,
            ISoundDataGetter def,
            bool doMasks,
            out SoundData_ErrorMask errorMask,
            SoundData_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            SoundData_ErrorMask retErrorMask = null;
            Func<SoundData_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new SoundData_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this ISoundData item,
            ISoundDataGetter rhs,
            ISoundDataGetter def,
            bool doMasks,
            Func<SoundData_ErrorMask> errorMask,
            SoundData_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.MinimumAttenuationDistance ?? true)
            {
                try
                {
                    item.MinimumAttenuationDistance_Property.Set(
                        value: rhs.MinimumAttenuationDistance,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SoundData_FieldIndex.MinimumAttenuationDistance, ex);
                }
            }
            if (copyMask?.MaximumAttenuationDistance ?? true)
            {
                try
                {
                    item.MaximumAttenuationDistance_Property.Set(
                        value: rhs.MaximumAttenuationDistance,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SoundData_FieldIndex.MaximumAttenuationDistance, ex);
                }
            }
            if (copyMask?.FrequencyAdjustment ?? true)
            {
                try
                {
                    item.FrequencyAdjustment_Property.Set(
                        value: rhs.FrequencyAdjustment,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SoundData_FieldIndex.FrequencyAdjustment, ex);
                }
            }
            if (copyMask?.Flags ?? true)
            {
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SoundData_FieldIndex.Flags, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ISoundData obj,
            NotifyingFireParameters cmds = null)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                case SoundData_FieldIndex.FrequencyAdjustment:
                case SoundData_FieldIndex.Flags:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ISoundData obj,
            NotifyingUnsetParameters cmds = null)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                    obj.MinimumAttenuationDistance = default(UInt16);
                    break;
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                    obj.MaximumAttenuationDistance = default(UInt16);
                    break;
                case SoundData_FieldIndex.FrequencyAdjustment:
                    obj.FrequencyAdjustment = default(SByte);
                    break;
                case SoundData_FieldIndex.Flags:
                    obj.Flags = default(SoundData.Flag);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ISoundData obj)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                case SoundData_FieldIndex.FrequencyAdjustment:
                case SoundData_FieldIndex.Flags:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ISoundDataGetter obj)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                    return obj.MinimumAttenuationDistance;
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                    return obj.MaximumAttenuationDistance;
                case SoundData_FieldIndex.FrequencyAdjustment:
                    return obj.FrequencyAdjustment;
                case SoundData_FieldIndex.Flags:
                    return obj.Flags;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ISoundData item,
            NotifyingUnsetParameters cmds = null)
        {
            item.MinimumAttenuationDistance = default(UInt16);
            item.MaximumAttenuationDistance = default(UInt16);
            item.FrequencyAdjustment = default(SByte);
            item.Flags = default(SoundData.Flag);
        }

        public static SoundData_Mask<bool> GetEqualsMask(
            this ISoundDataGetter item,
            ISoundDataGetter rhs)
        {
            var ret = new SoundData_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ISoundDataGetter item,
            ISoundDataGetter rhs,
            SoundData_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.MinimumAttenuationDistance = item.MinimumAttenuationDistance == rhs.MinimumAttenuationDistance;
            ret.MaximumAttenuationDistance = item.MaximumAttenuationDistance == rhs.MaximumAttenuationDistance;
            ret.FrequencyAdjustment = item.FrequencyAdjustment == rhs.FrequencyAdjustment;
            ret.Flags = item.Flags == rhs.Flags;
        }

        public static string ToString(
            this ISoundDataGetter item,
            string name = null,
            SoundData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ISoundDataGetter item,
            FileGeneration fg,
            string name = null,
            SoundData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(SoundData)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(SoundData)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MinimumAttenuationDistance ?? true)
                {
                    fg.AppendLine($"MinimumAttenuationDistance => {item.MinimumAttenuationDistance}");
                }
                if (printMask?.MaximumAttenuationDistance ?? true)
                {
                    fg.AppendLine($"MaximumAttenuationDistance => {item.MaximumAttenuationDistance}");
                }
                if (printMask?.FrequencyAdjustment ?? true)
                {
                    fg.AppendLine($"FrequencyAdjustment => {item.FrequencyAdjustment}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ISoundDataGetter item,
            SoundData_Mask<bool?> checkMask)
        {
            return true;
        }

        public static SoundData_Mask<bool> GetHasBeenSetMask(ISoundDataGetter item)
        {
            var ret = new SoundData_Mask<bool>();
            ret.MinimumAttenuationDistance = true;
            ret.MaximumAttenuationDistance = true;
            ret.FrequencyAdjustment = true;
            ret.Flags = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            ISoundDataGetter item,
            bool doMasks,
            out SoundData_ErrorMask errorMask,
            string name = null)
        {
            SoundData_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SoundData_ErrorMask()) : default(Func<SoundData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            ISoundDataGetter item,
            Func<SoundData_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.SoundData"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.SoundData");
                    }
                    UInt16XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.MinimumAttenuationDistance),
                        item: item.MinimumAttenuationDistance_Property,
                        fieldIndex: (int)SoundData_FieldIndex.MinimumAttenuationDistance,
                        errorMask: errorMask);
                    UInt16XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.MaximumAttenuationDistance),
                        item: item.MaximumAttenuationDistance_Property,
                        fieldIndex: (int)SoundData_FieldIndex.MaximumAttenuationDistance,
                        errorMask: errorMask);
                    Int8XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.FrequencyAdjustment),
                        item: item.FrequencyAdjustment_Property,
                        fieldIndex: (int)SoundData_FieldIndex.FrequencyAdjustment,
                        errorMask: errorMask);
                    EnumXmlTranslation<SoundData.Flag>.Instance.Write(
                        writer: writer,
                        name: nameof(item.Flags),
                        item: item.Flags_Property,
                        fieldIndex: (int)SoundData_FieldIndex.Flags,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            SoundData item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out SoundData_ErrorMask errorMask)
        {
            SoundData_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SoundData_ErrorMask()) : default(Func<SoundData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            SoundData item,
            RecordTypeConverter recordTypeConverter,
            Func<SoundData_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: SoundData_Registration.SNDD_HEADER,
                    type: ObjectType.Subrecord))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            SoundData item,
            MutagenWriter writer,
            Func<SoundData_ErrorMask> errorMask)
        {
            SoundData.WriteBinary_MinimumAttenuationDistance(
                writer: writer,
                item: item,
                fieldIndex: (int)SoundData_FieldIndex.MinimumAttenuationDistance,
                errorMask: errorMask);
            SoundData.WriteBinary_MaximumAttenuationDistance(
                writer: writer,
                item: item,
                fieldIndex: (int)SoundData_FieldIndex.MaximumAttenuationDistance,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.Int8BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FrequencyAdjustment_Property,
                fieldIndex: (int)SoundData_FieldIndex.FrequencyAdjustment,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Marker);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoundData.Flag>.Instance.Write(
                writer,
                item.Flags_Property,
                length: new ContentLength(4),
                fieldIndex: (int)SoundData_FieldIndex.Flags,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class SoundData_Mask<T> : IMask<T>, IEquatable<SoundData_Mask<T>>
    {
        #region Ctors
        public SoundData_Mask()
        {
        }

        public SoundData_Mask(T initialValue)
        {
            this.MinimumAttenuationDistance = initialValue;
            this.MaximumAttenuationDistance = initialValue;
            this.FrequencyAdjustment = initialValue;
            this.Flags = initialValue;
        }
        #endregion

        #region Members
        public T MinimumAttenuationDistance;
        public T MaximumAttenuationDistance;
        public T FrequencyAdjustment;
        public T Flags;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is SoundData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SoundData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.MinimumAttenuationDistance, rhs.MinimumAttenuationDistance)) return false;
            if (!object.Equals(this.MaximumAttenuationDistance, rhs.MaximumAttenuationDistance)) return false;
            if (!object.Equals(this.FrequencyAdjustment, rhs.FrequencyAdjustment)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MinimumAttenuationDistance?.GetHashCode());
            ret = ret.CombineHashCode(this.MaximumAttenuationDistance?.GetHashCode());
            ret = ret.CombineHashCode(this.FrequencyAdjustment?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public virtual bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.MinimumAttenuationDistance)) return false;
            if (!eval(this.MaximumAttenuationDistance)) return false;
            if (!eval(this.FrequencyAdjustment)) return false;
            if (!eval(this.Flags)) return false;
            return true;
        }
        #endregion

        #region Translate
        public SoundData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new SoundData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(SoundData_Mask<R> obj, Func<T, R> eval)
        {
            obj.MinimumAttenuationDistance = eval(this.MinimumAttenuationDistance);
            obj.MaximumAttenuationDistance = eval(this.MaximumAttenuationDistance);
            obj.FrequencyAdjustment = eval(this.FrequencyAdjustment);
            obj.Flags = eval(this.Flags);
        }
        #endregion

        #region Clear Enumerables
        public virtual void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(SoundData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, SoundData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(SoundData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MinimumAttenuationDistance ?? true)
                {
                    fg.AppendLine($"MinimumAttenuationDistance => {MinimumAttenuationDistance}");
                }
                if (printMask?.MaximumAttenuationDistance ?? true)
                {
                    fg.AppendLine($"MaximumAttenuationDistance => {MaximumAttenuationDistance}");
                }
                if (printMask?.FrequencyAdjustment ?? true)
                {
                    fg.AppendLine($"FrequencyAdjustment => {FrequencyAdjustment}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class SoundData_ErrorMask : IErrorMask, IErrorMask<SoundData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception MinimumAttenuationDistance;
        public Exception MaximumAttenuationDistance;
        public Exception FrequencyAdjustment;
        public Exception Flags;
        #endregion

        #region IErrorMask
        public virtual void SetNthException(int index, Exception ex)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                    this.MinimumAttenuationDistance = ex;
                    break;
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                    this.MaximumAttenuationDistance = ex;
                    break;
                case SoundData_FieldIndex.FrequencyAdjustment:
                    this.FrequencyAdjustment = ex;
                    break;
                case SoundData_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthMask(int index, object obj)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                    this.MinimumAttenuationDistance = (Exception)obj;
                    break;
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                    this.MaximumAttenuationDistance = (Exception)obj;
                    break;
                case SoundData_FieldIndex.FrequencyAdjustment:
                    this.FrequencyAdjustment = (Exception)obj;
                    break;
                case SoundData_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual bool IsInError()
        {
            if (Overall != null) return true;
            if (MinimumAttenuationDistance != null) return true;
            if (MaximumAttenuationDistance != null) return true;
            if (FrequencyAdjustment != null) return true;
            if (Flags != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public virtual void ToString(FileGeneration fg)
        {
            fg.AppendLine("SoundData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected virtual void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"MinimumAttenuationDistance => {MinimumAttenuationDistance}");
            fg.AppendLine($"MaximumAttenuationDistance => {MaximumAttenuationDistance}");
            fg.AppendLine($"FrequencyAdjustment => {FrequencyAdjustment}");
            fg.AppendLine($"Flags => {Flags}");
        }
        #endregion

        #region Combine
        public SoundData_ErrorMask Combine(SoundData_ErrorMask rhs)
        {
            var ret = new SoundData_ErrorMask();
            ret.MinimumAttenuationDistance = this.MinimumAttenuationDistance.Combine(rhs.MinimumAttenuationDistance);
            ret.MaximumAttenuationDistance = this.MaximumAttenuationDistance.Combine(rhs.MaximumAttenuationDistance);
            ret.FrequencyAdjustment = this.FrequencyAdjustment.Combine(rhs.FrequencyAdjustment);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            return ret;
        }
        public static SoundData_ErrorMask Combine(SoundData_ErrorMask lhs, SoundData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class SoundData_CopyMask
    {
        #region Members
        public bool MinimumAttenuationDistance;
        public bool MaximumAttenuationDistance;
        public bool FrequencyAdjustment;
        public bool Flags;
        #endregion

    }
    #endregion




    #endregion

}
