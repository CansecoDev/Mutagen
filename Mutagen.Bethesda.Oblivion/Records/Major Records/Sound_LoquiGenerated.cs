/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Sound : 
        MajorRecord,
        ISound,
        ILoquiObject<Sound>,
        ILoquiObjectSetter,
        IPropertySupporter<String>,
        IPropertySupporter<SoundData>,
        IEquatable<Sound>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Sound_Registration.Instance;
        public new static Sound_Registration Registration => Sound_Registration.Instance;

        #region Ctor
        public Sound()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region File
        protected String _File;
        protected PropertyForwarder<Sound, String> _FileForwarder;
        public INotifyingSetItem<String> File_Property => _FileForwarder ?? (_FileForwarder = new PropertyForwarder<Sound, String>(this, (int)Sound_FieldIndex.File));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String File
        {
            get => this._File;
            set => this.SetFile(value);
        }
        protected void SetFile(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Sound_FieldIndex.File];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && File == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Sound_FieldIndex.File] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = File;
                _File = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)Sound_FieldIndex.File,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _File = item;
            }
        }
        protected void UnsetFile()
        {
            _hasBeenSetTracker[(int)Sound_FieldIndex.File] = false;
            File = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> ISound.File_Property => this.File_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> ISoundGetter.File_Property => this.File_Property;
        #endregion
        #region Data
        protected SoundData _Data;
        protected PropertyForwarder<Sound, SoundData> _DataForwarder;
        public INotifyingSetItem<SoundData> Data_Property => _DataForwarder ?? (_DataForwarder = new PropertyForwarder<Sound, SoundData>(this, (int)Sound_FieldIndex.Data));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public SoundData Data
        {
            get => this._Data;
            set => this.SetData(value);
        }
        protected void SetData(
            SoundData item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Sound_FieldIndex.Data];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Data, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Sound_FieldIndex.Data] = hasBeenSet;
            }
            if (_SoundData_subscriptions != null)
            {
                var tmp = Data;
                _Data = item;
                _SoundData_subscriptions.FireSubscriptions(
                    index: (int)Sound_FieldIndex.Data,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Data = item;
            }
        }
        protected void UnsetData()
        {
            _hasBeenSetTracker[(int)Sound_FieldIndex.Data] = false;
            Data = default(SoundData);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<SoundData> ISound.Data_Property => this.Data_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<SoundData> ISoundGetter.Data_Property => this.Data_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => SoundCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => SoundCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => SoundCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            SoundCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Sound>.GetEqualsMask(Sound rhs) => SoundCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ISoundGetter>.GetEqualsMask(ISoundGetter rhs) => SoundCommon.GetEqualsMask(this, rhs);
        #region To String
        public string ToString(
            string name = null,
            Sound_Mask<bool> printMask = null)
        {
            return SoundCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            SoundCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Sound_Mask<bool> GetHasBeenSetMask()
        {
            return SoundCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Sound rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Sound rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (File_Property.HasBeenSet != rhs.File_Property.HasBeenSet) return false;
            if (File_Property.HasBeenSet)
            {
                if (!object.Equals(this.File, rhs.File)) return false;
            }
            if (Data_Property.HasBeenSet != rhs.Data_Property.HasBeenSet) return false;
            if (Data_Property.HasBeenSet)
            {
                if (!object.Equals(this.Data, rhs.Data)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (File_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(File).CombineHashCode(ret);
            }
            if (Data_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Data).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static Sound Create_Xml(
            XElement root,
            Sound_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Sound Create_Xml(
            XElement root,
            out Sound_ErrorMask errorMask,
            bool doMasks = true,
            Sound_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Sound_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Sound Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new Sound();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Sound Create_Xml(
            string path,
            Sound_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Sound Create_Xml(
            string path,
            out Sound_ErrorMask errorMask,
            Sound_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Sound Create_Xml(
            Stream stream,
            Sound_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Sound Create_Xml(
            Stream stream,
            out Sound_ErrorMask errorMask,
            Sound_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out Sound_ErrorMask errorMask,
            Sound_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Sound_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Sound>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Sound_ErrorMask errorMask,
            Sound_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Sound_ErrorMask errorMask,
            Sound_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Sound_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Sound_ErrorMask errorMask,
            bool doMasks = true,
            Sound_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Sound_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Sound_ErrorMask errorMask,
            Sound_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out Sound_ErrorMask errorMask,
            Sound_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Sound_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            SoundCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            Sound item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "File":
                    try
                    {
                        errorMask?.PushIndex((int)Sound_FieldIndex.File);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String FileParse,
                            errorMask: errorMask))
                        {
                            item.File = FileParse;
                        }
                        else
                        {
                            item.UnsetFile();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Data":
                    try
                    {
                        errorMask?.PushIndex((int)Sound_FieldIndex.Data);
                        if (LoquiXmlTranslation<SoundData>.Instance.Parse(
                            root: root,
                            item: out SoundData DataParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Sound_FieldIndex.Data)))
                        {
                            item.Data = DataParse;
                        }
                        else
                        {
                            item.UnsetData();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecord.Fill_Xml_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Sound_FieldIndex)index)
            {
                case Sound_FieldIndex.File:
                case Sound_FieldIndex.Data:
                    return _hasBeenSetTracker[index];
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region IPropertySupporter String
        String IPropertySupporter<String>.Get(int index)
        {
            return GetString(index: index);
        }

        protected override String GetString(int index)
        {
            switch ((Sound_FieldIndex)index)
            {
                case Sound_FieldIndex.File:
                    return File;
                default:
                    return base.GetString(index: index);
            }
        }

        void IPropertySupporter<String>.Set(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetString(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected override void SetString(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Sound_FieldIndex)index)
            {
                case Sound_FieldIndex.File:
                    SetFile(item, hasBeenSet, cmds);
                    break;
                default:
                    base.SetString(
                        index: index,
                        item: item,
                        hasBeenSet: hasBeenSet,
                        cmds: cmds);
                    break;
            }
        }

        bool IPropertySupporter<String>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<String>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<String>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetString(
                index: index,
                cmds: cmds);
        }

        protected override void UnsetString(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Sound_FieldIndex)index)
            {
                case Sound_FieldIndex.File:
                    SetFile(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                default:
                    base.UnsetString(
                        index: index,
                        cmds: cmds);
                    break;
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<String> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_String_subscriptions == null)
            {
                _String_subscriptions = new ObjectCentralizationSubscriptions<String>();
            }
            _String_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Unsubscribe(
            int index,
            object owner)
        {
            _String_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<String>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        String IPropertySupporter<String>.DefaultValue(int index)
        {
            return DefaultValueString(index: index);
        }

        protected override String DefaultValueString(int index)
        {
            switch ((Sound_FieldIndex)index)
            {
                case Sound_FieldIndex.File:
                    return default(String);
                default:
                    return base.DefaultValueString(index: index);
            }
        }

        #endregion

        #region IPropertySupporter SoundData
        protected ObjectCentralizationSubscriptions<SoundData> _SoundData_subscriptions;
        SoundData IPropertySupporter<SoundData>.Get(int index)
        {
            return GetSoundData(index: index);
        }

        protected SoundData GetSoundData(int index)
        {
            switch ((Sound_FieldIndex)index)
            {
                case Sound_FieldIndex.Data:
                    return Data;
                default:
                    throw new ArgumentException($"Unknown index for field type SoundData: {index}");
            }
        }

        void IPropertySupporter<SoundData>.Set(
            int index,
            SoundData item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetSoundData(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetSoundData(
            int index,
            SoundData item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Sound_FieldIndex)index)
            {
                case Sound_FieldIndex.Data:
                    SetData(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type SoundData: {index}");
            }
        }

        bool IPropertySupporter<SoundData>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<SoundData>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<SoundData>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetSoundData(
                index: index,
                cmds: cmds);
        }

        protected void UnsetSoundData(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Sound_FieldIndex)index)
            {
                case Sound_FieldIndex.Data:
                    SetData(
                        item: default(SoundData),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type SoundData: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<SoundData>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<SoundData> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_SoundData_subscriptions == null)
            {
                _SoundData_subscriptions = new ObjectCentralizationSubscriptions<SoundData>();
            }
            _SoundData_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<SoundData>.Unsubscribe(
            int index,
            object owner)
        {
            _SoundData_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<SoundData>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        SoundData IPropertySupporter<SoundData>.DefaultValue(int index)
        {
            return DefaultValueSoundData(index: index);
        }

        protected SoundData DefaultValueSoundData(int index)
        {
            switch ((Sound_FieldIndex)index)
            {
                case Sound_FieldIndex.Data:
                    return default(SoundData);
                default:
                    throw new ArgumentException($"Unknown index for field type SoundData: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Sound_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Sound Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Sound Create_Binary(
            MutagenFrame frame,
            out Sound_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Sound_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Sound Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Sound>(
                record: new Sound(),
                frame: frame,
                errorMask: errorMask,
                recType: Sound_Registration.SOUN_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Sound Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Sound Create_Binary(
            string path,
            out Sound_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Sound Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Sound Create_Binary(
            Stream stream,
            out Sound_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Sound_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Sound_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out Sound_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Sound_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Sound_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            SoundCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Sound item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Sound item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4D414E46: // FNAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Sound_FieldIndex.File);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String FileParse,
                            errorMask: errorMask))
                        {
                            item.File = FileParse;
                        }
                        else
                        {
                            item.UnsetFile();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Sound_FieldIndex.File);
                case 0x44444E53: // SNDD
                    try
                    {
                        errorMask?.PushIndex((int)Sound_FieldIndex.Data);
                        if (LoquiBinaryTranslation<SoundData>.Instance.Parse(
                            frame: frame,
                            item: out SoundData DataParse,
                            errorMask: errorMask))
                        {
                            item.Data = DataParse;
                        }
                        else
                        {
                            item.UnsetData();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Sound_FieldIndex.Data);
                case 0x58444E53: // SNDX
                    try
                    {
                        errorMask?.PushIndex((int)Sound_FieldIndex.Data);
                        if (LoquiBinaryTranslation<SoundDataExtended>.Instance.Parse(
                            frame: frame,
                            item: out SoundDataExtended DataParse,
                            errorMask: errorMask))
                        {
                            item.Data = DataParse;
                        }
                        else
                        {
                            item.UnsetData();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Sound_FieldIndex.Data);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Sound Copy(
            Sound_CopyMask copyMask = null,
            ISoundGetter def = null)
        {
            return Sound.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Sound Copy(
            ISound item,
            Sound_CopyMask copyMask = null,
            ISoundGetter def = null)
        {
            Sound ret;
            if (item.GetType().Equals(typeof(Sound)))
            {
                ret = new Sound();
            }
            else
            {
                ret = (Sound)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Sound Copy_ToLoqui(
            ISoundGetter item,
            Sound_CopyMask copyMask = null,
            ISoundGetter def = null)
        {
            Sound ret;
            if (item.GetType().Equals(typeof(Sound)))
            {
                ret = new Sound() as Sound;
            }
            else
            {
                ret = (Sound)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ISoundGetter rhs,
            Sound_CopyMask copyMask,
            ISoundGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ISoundGetter rhs,
            out Sound_ErrorMask errorMask,
            Sound_CopyMask copyMask = null,
            ISoundGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Sound_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ISoundGetter rhs,
            ErrorMaskBuilder errorMask,
            Sound_CopyMask copyMask = null,
            ISoundGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            SoundCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    this.SetFile(
                        (String)obj,
                        cmds: cmds);
                    break;
                case Sound_FieldIndex.Data:
                    this.SetData(
                        (SoundData)obj,
                        cmds: cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            SoundCommon.Clear(this, cmds);
        }


        public new static Sound Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Sound();
            foreach (var pair in fields)
            {
                CopyInInternal_Sound(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Sound(Sound obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Sound_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    obj.SetFile(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case Sound_FieldIndex.Data:
                    obj.SetData(
                        (SoundData)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Sound obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ISound : ISoundGetter, IMajorRecord, ILoquiClass<ISound, ISoundGetter>, ILoquiClass<Sound, ISoundGetter>
    {
        new String File { get; set; }
        new INotifyingSetItem<String> File_Property { get; }

        new SoundData Data { get; set; }
        new INotifyingSetItem<SoundData> Data_Property { get; }

    }

    public partial interface ISoundGetter : IMajorRecordGetter
    {
        #region File
        String File { get; }
        INotifyingSetItemGetter<String> File_Property { get; }

        #endregion
        #region Data
        SoundData Data { get; }
        INotifyingSetItemGetter<SoundData> Data_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Sound_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        File = 5,
        Data = 6,
    }
    #endregion

    #region Registration
    public class Sound_Registration : ILoquiRegistration
    {
        public static readonly Sound_Registration Instance = new Sound_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 39,
            version: 0);

        public const string GUID = "449f0e34-9512-4a5f-a83f-7e3dbb0cee42";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(Sound_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Sound_ErrorMask);

        public static readonly Type ClassType = typeof(Sound);

        public static readonly Type GetterType = typeof(ISoundGetter);

        public static readonly Type SetterType = typeof(ISound);

        public static readonly Type CommonType = typeof(SoundCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Sound";

        public const string Name = "Sound";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FILE":
                    return (ushort)Sound_FieldIndex.File;
                case "DATA":
                    return (ushort)Sound_FieldIndex.Data;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                case Sound_FieldIndex.Data:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.Data:
                    return true;
                case Sound_FieldIndex.File:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                case Sound_FieldIndex.Data:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    return "File";
                case Sound_FieldIndex.Data:
                    return "Data";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                case Sound_FieldIndex.Data:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                case Sound_FieldIndex.Data:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    return typeof(String);
                case Sound_FieldIndex.Data:
                    return typeof(SoundData);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType SOUN_HEADER = new RecordType("SOUN");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType SNDD_HEADER = new RecordType("SNDD");
        public static readonly RecordType SNDX_HEADER = new RecordType("SNDX");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SOUN_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class SoundCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ISound item,
            ISoundGetter rhs,
            ISoundGetter def,
            ErrorMaskBuilder errorMask,
            Sound_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.File ?? true)
            {
                errorMask?.PushIndex((int)Sound_FieldIndex.File);
                try
                {
                    item.File_Property.SetToWithDefault(
                        rhs: rhs.File_Property,
                        def: def?.File_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Data.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Sound_FieldIndex.Data);
                try
                {
                    item.Data_Property.SetToWithDefault(
                        rhs.Data_Property,
                        def?.Data_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Data.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    SoundDataCommon.CopyFieldsFrom(
                                        item: item.Data,
                                        rhs: rhs.Data,
                                        def: def?.Data,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.Data.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(SoundData);
                                    return SoundData.Copy(
                                        r,
                                        copyMask?.Data?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Data?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ISound obj,
            NotifyingFireParameters cmds = null)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    obj.File_Property.HasBeenSet = on;
                    break;
                case Sound_FieldIndex.Data:
                    obj.Data_Property.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ISound obj,
            NotifyingUnsetParameters cmds = null)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    obj.File_Property.Unset(cmds);
                    break;
                case Sound_FieldIndex.Data:
                    obj.Data_Property.Unset(cmds);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ISound obj)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    return obj.File_Property.HasBeenSet;
                case Sound_FieldIndex.Data:
                    return obj.Data_Property.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ISoundGetter obj)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    return obj.File;
                case Sound_FieldIndex.Data:
                    return obj.Data;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ISound item,
            NotifyingUnsetParameters cmds = null)
        {
            item.File_Property.Unset(cmds.ToUnsetParams());
            item.Data_Property.Unset(cmds.ToUnsetParams());
        }

        public static Sound_Mask<bool> GetEqualsMask(
            this ISoundGetter item,
            ISoundGetter rhs)
        {
            var ret = new Sound_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ISoundGetter item,
            ISoundGetter rhs,
            Sound_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.File = item.File_Property.Equals(rhs.File_Property, (l, r) => object.Equals(l, r));
            ret.Data = item.Data_Property.LoquiEqualsHelper(rhs.Data_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ISoundGetter item,
            string name = null,
            Sound_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ISoundGetter item,
            FileGeneration fg,
            string name = null,
            Sound_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Sound)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Sound)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.File ?? true)
                {
                    fg.AppendLine($"File => {item.File}");
                }
                if (printMask?.Data?.Overall ?? true)
                {
                    item.Data?.ToString(fg, "Data");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ISoundGetter item,
            Sound_Mask<bool?> checkMask)
        {
            if (checkMask.File.HasValue && checkMask.File.Value != item.File_Property.HasBeenSet) return false;
            if (checkMask.Data.Overall.HasValue && checkMask.Data.Overall.Value != item.Data_Property.HasBeenSet) return false;
            if (checkMask.Data.Specific != null && (item.Data == null || !item.Data.HasBeenSet(checkMask.Data.Specific))) return false;
            return true;
        }

        public static Sound_Mask<bool> GetHasBeenSetMask(ISoundGetter item)
        {
            var ret = new Sound_Mask<bool>();
            ret.File = item.File_Property.HasBeenSet;
            ret.Data = new MaskItem<bool, SoundData_Mask<bool>>(item.Data_Property.HasBeenSet, SoundDataCommon.GetHasBeenSetMask(item.Data));
            return ret;
        }

        public static Sound_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Sound_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Sound_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Sound_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Sound_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Sound_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Sound_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Sound item,
            bool doMasks,
            out Sound_ErrorMask errorMask,
            Sound_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Sound_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Sound item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Sound");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Sound");
            }
            if (item.File_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Sound_FieldIndex.File) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.File),
                    item: item.File_Property,
                    fieldIndex: (int)Sound_FieldIndex.File,
                    errorMask: errorMask);
            }
            if (item.Data_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Sound_FieldIndex.Data) ?? true))
            {
                LoquiXmlTranslation<SoundData>.Instance.Write(
                    node: elem,
                    item: item.Data_Property,
                    name: nameof(item.Data),
                    fieldIndex: (int)Sound_FieldIndex.Data,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Sound_FieldIndex.Data));
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Sound item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Sound_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Sound_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Sound item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Sound_Registration.SOUN_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Sound item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.File_Property,
                fieldIndex: (int)Sound_FieldIndex.File,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Sound_Registration.FNAM_HEADER),
                nullable: false);
            LoquiBinaryTranslation<SoundData>.Instance.Write(
                writer: writer,
                item: item.Data_Property,
                fieldIndex: (int)Sound_FieldIndex.Data,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Sound_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Sound_Mask<T>>
    {
        #region Ctors
        public Sound_Mask()
        {
        }

        public Sound_Mask(T initialValue)
        {
            this.File = initialValue;
            this.Data = new MaskItem<T, SoundData_Mask<T>>(initialValue, new SoundData_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T File;
        public MaskItem<T, SoundData_Mask<T>> Data { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Sound_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Sound_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.File, rhs.File)) return false;
            if (!object.Equals(this.Data, rhs.Data)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.File?.GetHashCode());
            ret = ret.CombineHashCode(this.Data?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.File)) return false;
            if (Data != null)
            {
                if (!eval(this.Data.Overall)) return false;
                if (this.Data.Specific != null && !this.Data.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public new Sound_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Sound_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Sound_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.File = eval(this.File);
            if (this.Data != null)
            {
                obj.Data = new MaskItem<R, SoundData_Mask<R>>();
                obj.Data.Overall = eval(this.Data.Overall);
                if (this.Data.Specific != null)
                {
                    obj.Data.Specific = this.Data.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Sound_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Sound_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Sound_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.File ?? true)
                {
                    fg.AppendLine($"File => {File}");
                }
                if (printMask?.Data?.Overall ?? true)
                {
                    Data?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Sound_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Sound_ErrorMask>
    {
        #region Members
        public Exception File;
        public MaskItem<Exception, SoundData_ErrorMask> Data;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    return File;
                case Sound_FieldIndex.Data:
                    return Data;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    this.File = ex;
                    break;
                case Sound_FieldIndex.Data:
                    this.Data = new MaskItem<Exception, SoundData_ErrorMask>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    this.File = (Exception)obj;
                    break;
                case Sound_FieldIndex.Data:
                    this.Data = (MaskItem<Exception, SoundData_ErrorMask>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (File != null) return true;
            if (Data != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Sound_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"File => {File}");
            Data?.ToString(fg);
        }
        #endregion

        #region Combine
        public Sound_ErrorMask Combine(Sound_ErrorMask rhs)
        {
            var ret = new Sound_ErrorMask();
            ret.File = this.File.Combine(rhs.File);
            ret.Data = new MaskItem<Exception, SoundData_ErrorMask>(this.Data.Overall.Combine(rhs.Data.Overall), ((IErrorMask<SoundData_ErrorMask>)this.Data.Specific).Combine(rhs.Data.Specific));
            return ret;
        }
        public static Sound_ErrorMask Combine(Sound_ErrorMask lhs, Sound_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Sound_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Sound_ErrorMask();
        }
        #endregion

    }
    public class Sound_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool File;
        public MaskItem<CopyOption, SoundData_CopyMask> Data;
        #endregion

    }
    public class Sound_TranslationMask : MajorRecord_TranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool File;
        public MaskItem<bool, SoundData_TranslationMask> Data;
        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((File, null));
            ret.Add((Data?.Overall ?? true, Data?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
