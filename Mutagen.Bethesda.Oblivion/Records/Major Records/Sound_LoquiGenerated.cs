/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Sound : MajorRecord, ISound, ILoquiObjectSetter, IEquatable<Sound>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Sound_Registration.Instance;
        public new static Sound_Registration Registration => Sound_Registration.Instance;

        #region Ctor
        public Sound()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region File
        protected readonly INotifyingSetItem<FilePath> _File = NotifyingSetItem.Factory<FilePath>(markAsSet: false);
        public INotifyingSetItem<FilePath> File_Property => _File;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public FilePath File
        {
            get => this._File.Item;
            set => this._File.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<FilePath> ISound.File_Property => this.File_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<FilePath> ISoundGetter.File_Property => this.File_Property;
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<SoundData> _Data = new NotifyingSetItem<SoundData>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public INotifyingSetItem<SoundData> Data_Property => this._Data;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SoundData ISoundGetter.Data => this.Data;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public SoundData Data { get => _Data.Item; set => _Data.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<SoundData> ISound.Data_Property => this.Data_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<SoundData> ISoundGetter.Data_Property => this.Data_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => SoundCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => SoundCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => SoundCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            SoundCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return SoundCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Sound_Mask<bool> printMask = null)
        {
            return SoundCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            SoundCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new Sound_Mask<bool> GetHasBeenSetMask()
        {
            return SoundCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Sound rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Sound rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (File_Property.HasBeenSet != rhs.File_Property.HasBeenSet) return false;
            if (File_Property.HasBeenSet)
            {
                if (!object.Equals(File, rhs.File)) return false;
            }
            if (Data_Property.HasBeenSet != rhs.Data_Property.HasBeenSet) return false;
            if (Data_Property.HasBeenSet)
            {
                if (!object.Equals(Data, rhs.Data)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (File_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(File).CombineHashCode(ret);
            }
            if (Data_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Data).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Sound Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Sound Create_XML(
            XElement root,
            out Sound_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Sound Create_XML(
            XElement root,
            bool doMasks,
            out Sound_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Sound Object, Sound_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Sound_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Sound_ErrorMask()) : default(Func<Sound_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Sound Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Sound Create_XML(
            string path,
            out Sound_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Sound Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Sound Create_XML(
            Stream stream,
            out Sound_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Sound, Sound_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Sound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Sound, Sound_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Sound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Sound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Sound_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Sound_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Sound_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Sound_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Sound_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            SoundCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Sound Create_XML_Internal(
            XElement root,
            Func<Sound_ErrorMask> errorMask)
        {
            var ret = new Sound();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Sound item,
            XElement root,
            string name,
            Func<Sound_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "File":
                    item._File.SetIfSucceeded(FilePathXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Sound_FieldIndex.File,
                        errorMask: errorMask));
                    break;
                case "Data":
                    item._Data.SetIfSucceeded(LoquiXmlTranslation<SoundData, SoundData_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Sound_FieldIndex.Data,
                        errorMask: errorMask));
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Sound Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Sound Create_Binary(
            MutagenFrame frame,
            out Sound_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Sound Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Sound_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Sound Object, Sound_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Sound_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Sound_ErrorMask()) : default(Func<Sound_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Sound Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Sound Create_Binary(
            string path,
            out Sound_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Sound Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Sound Create_Binary(
            Stream stream,
            out Sound_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<Sound, Sound_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out Sound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<Sound, Sound_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out Sound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out Sound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Sound_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Sound_ErrorMask errorMask)
        {
            errorMask = (Sound_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Sound_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Sound_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            SoundCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Sound Create_Binary_Internal(
            MutagenFrame frame,
            Func<Sound_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return UtilityTranslation.MajorRecordParse<Sound, Sound_ErrorMask, Sound_FieldIndex>(
                record: new Sound(),
                frame: frame,
                errorMask: errorMask,
                recType: Sound_Registration.SOUN_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            Sound item,
            MutagenFrame frame,
            Func<Sound_ErrorMask> errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<Sound_FieldIndex?> Fill_Binary_RecordTypes(
            Sound item,
            MutagenFrame frame,
            Func<Sound_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "FNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._File.SetIfSucceeded(Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Sound_FieldIndex.File,
                        errorMask: errorMask));
                    return TryGet<Sound_FieldIndex?>.Succeed(Sound_FieldIndex.File);
                case "SNDD":
                    item._Data.SetIfSucceeded(LoquiBinaryTranslation<SoundData, SoundData_ErrorMask>.Instance.Parse(
                        frame: frame,
                        fieldIndex: (int)Sound_FieldIndex.Data,
                        errorMask: errorMask));
                    return TryGet<Sound_FieldIndex?>.Succeed(Sound_FieldIndex.Data);
                case "SNDX":
                    item._Data.SetIfSucceeded(LoquiBinaryTranslation<SoundDataExtended, SoundDataExtended_ErrorMask>.Instance.Parse(
                        frame: frame,
                        fieldIndex: (int)Sound_FieldIndex.Data,
                        errorMask: errorMask));
                    return TryGet<Sound_FieldIndex?>.Succeed(Sound_FieldIndex.Data);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        errorMask: errorMask).Bubble((i) => SoundCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public Sound Copy(
            Sound_CopyMask copyMask = null,
            ISoundGetter def = null)
        {
            return Sound.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Sound Copy(
            ISound item,
            Sound_CopyMask copyMask = null,
            ISoundGetter def = null)
        {
            Sound ret;
            if (item.GetType().Equals(typeof(Sound)))
            {
                ret = new Sound();
            }
            else
            {
                ret = (Sound)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            Sound_CopyMask copyMask = null,
            ISoundGetter def = null)
            where CopyType : class, ISound
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Sound)))
            {
                ret = new Sound() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Sound Copy_ToLoqui(
            ISoundGetter item,
            Sound_CopyMask copyMask = null,
            ISoundGetter def = null)
        {
            Sound ret;
            if (item.GetType().Equals(typeof(Sound)))
            {
                ret = new Sound() as Sound;
            }
            else
            {
                ret = (Sound)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    this._File.Set(
                        (FilePath)obj,
                        cmds);
                    break;
                case Sound_FieldIndex.Data:
                    this._Data.Set(
                        (SoundData)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            SoundCommon.Clear(this, cmds);
        }


        public new static Sound Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Sound();
            foreach (var pair in fields)
            {
                CopyInInternal_Sound(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Sound(Sound obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Sound_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    obj._File.Set(
                        (FilePath)pair.Value,
                        null);
                    break;
                case Sound_FieldIndex.Data:
                    obj._Data.Set(
                        (SoundData)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Sound obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ISound : ISoundGetter, IMajorRecord, ILoquiClass<ISound, ISoundGetter>, ILoquiClass<Sound, ISoundGetter>
    {
        new FilePath File { get; set; }
        new INotifyingSetItem<FilePath> File_Property { get; }

        new SoundData Data { get; set; }
        new INotifyingSetItem<SoundData> Data_Property { get; }

    }

    public interface ISoundGetter : IMajorRecordGetter
    {
        #region File
        FilePath File { get; }
        INotifyingSetItemGetter<FilePath> File_Property { get; }

        #endregion
        #region Data
        SoundData Data { get; }
        INotifyingSetItemGetter<SoundData> Data_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Sound_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        File = 5,
        Data = 6,
    }
    #endregion

    #region Registration
    public class Sound_Registration : ILoquiRegistration
    {
        public static readonly Sound_Registration Instance = new Sound_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 39,
            version: 0);

        public const string GUID = "449f0e34-9512-4a5f-a83f-7e3dbb0cee42";

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(Sound_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Sound_ErrorMask);

        public static readonly Type ClassType = typeof(Sound);

        public static readonly Type GetterType = typeof(ISoundGetter);

        public static readonly Type SetterType = typeof(ISound);

        public static readonly Type CommonType = typeof(SoundCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Sound";

        public const string Name = "Sound";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FILE":
                    return (ushort)Sound_FieldIndex.File;
                case "DATA":
                    return (ushort)Sound_FieldIndex.Data;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                case Sound_FieldIndex.Data:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.Data:
                    return true;
                case Sound_FieldIndex.File:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                case Sound_FieldIndex.Data:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    return "File";
                case Sound_FieldIndex.Data:
                    return "Data";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                case Sound_FieldIndex.Data:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                case Sound_FieldIndex.Data:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    return typeof(FilePath);
                case Sound_FieldIndex.Data:
                    return typeof(SoundData);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType SOUN_HEADER = new RecordType("SOUN");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType SNDD_HEADER = new RecordType("SNDD");
        public static readonly RecordType SNDX_HEADER = new RecordType("SNDX");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SOUN_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class SoundCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ISound item,
            ISoundGetter rhs,
            Sound_CopyMask copyMask = null,
            ISoundGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            SoundCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ISound item,
            ISoundGetter rhs,
            out Sound_ErrorMask errorMask,
            Sound_CopyMask copyMask = null,
            ISoundGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            SoundCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ISound item,
            ISoundGetter rhs,
            ISoundGetter def,
            bool doMasks,
            out Sound_ErrorMask errorMask,
            Sound_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            Sound_ErrorMask retErrorMask = null;
            Func<Sound_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Sound_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this ISound item,
            ISoundGetter rhs,
            ISoundGetter def,
            bool doMasks,
            Func<Sound_ErrorMask> errorMask,
            Sound_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.File ?? true)
            {
                try
                {
                    item.File_Property.SetToWithDefault(
                        rhs: rhs.File_Property,
                        def: def?.File_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Sound_FieldIndex.File, ex);
                }
            }
            if (copyMask?.Data.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Data_Property.SetToWithDefault(
                        rhs.Data_Property,
                        def?.Data_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Data.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    SoundDataCommon.CopyFieldsFrom(
                                        item: item.Data,
                                        rhs: rhs.Data,
                                        def: def?.Data,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<SoundData_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Data.Specific == null)
                                            {
                                                baseMask.Data = new MaskItem<Exception, SoundData_ErrorMask>(null, new SoundData_ErrorMask());
                                            }
                                            return baseMask.Data.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Data.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(SoundData);
                                    return SoundData.Copy(
                                        r,
                                        copyMask?.Data?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Data?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Sound_FieldIndex.Data, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ISound obj,
            NotifyingFireParameters cmds = null)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    obj.File_Property.HasBeenSet = on;
                    break;
                case Sound_FieldIndex.Data:
                    obj.Data_Property.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ISound obj,
            NotifyingUnsetParameters cmds = null)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    obj.File_Property.Unset(cmds);
                    break;
                case Sound_FieldIndex.Data:
                    obj.Data_Property.Unset(cmds);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ISound obj)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    return obj.File_Property.HasBeenSet;
                case Sound_FieldIndex.Data:
                    return obj.Data_Property.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ISoundGetter obj)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    return obj.File;
                case Sound_FieldIndex.Data:
                    return obj.Data;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ISound item,
            NotifyingUnsetParameters cmds = null)
        {
            item.File_Property.Unset(cmds.ToUnsetParams());
            item.Data_Property.Unset(cmds.ToUnsetParams());
        }

        public static Sound_Mask<bool> GetEqualsMask(
            this ISoundGetter item,
            ISoundGetter rhs)
        {
            var ret = new Sound_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ISoundGetter item,
            ISoundGetter rhs,
            Sound_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.File = item.File_Property.Equals(rhs.File_Property, (l, r) => object.Equals(l, r));
            ret.Data = item.Data_Property.LoquiEqualsHelper(rhs.Data_Property, (loqLhs, loqRhs) => SoundDataCommon.GetEqualsMask(loqLhs, loqRhs));
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ISoundGetter item,
            string name = null,
            Sound_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ISoundGetter item,
            FileGeneration fg,
            string name = null,
            Sound_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Sound)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Sound)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.File ?? true)
                {
                    fg.AppendLine($"File => {item.File}");
                }
                if (printMask?.Data?.Overall ?? true)
                {
                    item.Data?.ToString(fg, "Data");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ISoundGetter item,
            Sound_Mask<bool?> checkMask)
        {
            if (checkMask.File.HasValue && checkMask.File.Value != item.File_Property.HasBeenSet) return false;
            if (checkMask.Data.Overall.HasValue && checkMask.Data.Overall.Value != item.Data_Property.HasBeenSet) return false;
            if (checkMask.Data.Specific != null && (item.Data_Property.Item == null || !item.Data_Property.Item.HasBeenSet(checkMask.Data.Specific))) return false;
            return true;
        }

        public static Sound_Mask<bool> GetHasBeenSetMask(ISoundGetter item)
        {
            var ret = new Sound_Mask<bool>();
            ret.File = item.File_Property.HasBeenSet;
            ret.Data = new MaskItem<bool, SoundData_Mask<bool>>(item.Data_Property.HasBeenSet, SoundDataCommon.GetHasBeenSetMask(item.Data_Property.Item));
            return ret;
        }

        public static Sound_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Sound_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Sound_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Sound_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Sound_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Sound_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Sound_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            ISoundGetter item,
            bool doMasks,
            out Sound_ErrorMask errorMask,
            string name = null)
        {
            Sound_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Sound_ErrorMask()) : default(Func<Sound_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            ISoundGetter item,
            Func<Sound_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.Sound"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.Sound");
                    }
                    if (item.File_Property.HasBeenSet)
                    {
                        FilePathXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.File),
                            item: item.File_Property,
                            fieldIndex: (int)Sound_FieldIndex.File,
                            errorMask: errorMask);
                    }
                    if (item.Data_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<SoundData, SoundData_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Data_Property,
                            name: nameof(item.Data),
                            fieldIndex: (int)Sound_FieldIndex.Data,
                            errorMask: errorMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Sound item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Sound_ErrorMask errorMask)
        {
            Sound_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Sound_ErrorMask()) : default(Func<Sound_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            Sound item,
            RecordTypeConverter recordTypeConverter,
            Func<Sound_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Sound_Registration.SOUN_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Sound item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Sound_ErrorMask> errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.File_Property,
                fieldIndex: (int)Sound_FieldIndex.File,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Sound_Registration.FNAM_HEADER),
                nullable: false);
            LoquiBinaryTranslation<SoundData, SoundData_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Data_Property,
                fieldIndex: (int)Sound_FieldIndex.Data,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Sound_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Sound_Mask<T>>
    {
        #region Ctors
        public Sound_Mask()
        {
        }

        public Sound_Mask(T initialValue)
        {
            this.File = initialValue;
            this.Data = new MaskItem<T, SoundData_Mask<T>>(initialValue, new SoundData_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T File;
        public MaskItem<T, SoundData_Mask<T>> Data { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Sound_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Sound_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.File, rhs.File)) return false;
            if (!object.Equals(this.Data, rhs.Data)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.File?.GetHashCode());
            ret = ret.CombineHashCode(this.Data?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.File)) return false;
            if (Data != null)
            {
                if (!eval(this.Data.Overall)) return false;
                if (this.Data.Specific != null && !this.Data.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public new Sound_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Sound_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Sound_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.File = eval(this.File);
            if (this.Data != null)
            {
                obj.Data = new MaskItem<R, SoundData_Mask<R>>();
                obj.Data.Overall = eval(this.Data.Overall);
                if (this.Data.Specific != null)
                {
                    obj.Data.Specific = this.Data.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Sound_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Sound_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Sound_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.File ?? true)
                {
                    fg.AppendLine($"File => {File}");
                }
                if (printMask?.Data?.Overall ?? true)
                {
                    Data?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Sound_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Sound_ErrorMask>
    {
        #region Members
        public Exception File;
        public MaskItem<Exception, SoundData_ErrorMask> Data;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    this.File = ex;
                    break;
                case Sound_FieldIndex.Data:
                    this.Data = new MaskItem<Exception, SoundData_ErrorMask>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Sound_FieldIndex enu = (Sound_FieldIndex)index;
            switch (enu)
            {
                case Sound_FieldIndex.File:
                    this.File = (Exception)obj;
                    break;
                case Sound_FieldIndex.Data:
                    this.Data = (MaskItem<Exception, SoundData_ErrorMask>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (File != null) return true;
            if (Data != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Sound_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"File => {File}");
            Data?.ToString(fg);
        }
        #endregion

        #region Combine
        public Sound_ErrorMask Combine(Sound_ErrorMask rhs)
        {
            var ret = new Sound_ErrorMask();
            ret.File = this.File.Combine(rhs.File);
            ret.Data = new MaskItem<Exception, SoundData_ErrorMask>(this.Data.Overall.Combine(rhs.Data.Overall), ((IErrorMask<SoundData_ErrorMask>)this.Data.Specific).Combine(rhs.Data.Specific));
            return ret;
        }
        public static Sound_ErrorMask Combine(Sound_ErrorMask lhs, Sound_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Sound_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool File;
        public MaskItem<CopyOption, SoundData_CopyMask> Data;
        #endregion

    }
    #endregion




    #endregion

}
