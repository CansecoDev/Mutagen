/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class SpellUnleveled : 
        Spell,
        ISpellUnleveled,
        ILoquiObject<SpellUnleveled>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<SpellUnleveled>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SpellUnleveled_Registration.Instance;
        public new static SpellUnleveled_Registration Registration => SpellUnleveled_Registration.Instance;

        #region Ctor
        protected SpellUnleveled()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Type
        private Spell.SpellType _Type;
        public Spell.SpellType Type
        {
            get => this._Type;
            set
            {
                this.SPITDataTypeState |= SPITDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Type, value, nameof(Type));
            }
        }
        #endregion
        #region Cost
        private UInt32 _Cost;
        public UInt32 Cost
        {
            get => this._Cost;
            set
            {
                this.SPITDataTypeState |= SPITDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Cost, value, nameof(Cost));
            }
        }
        #endregion
        #region Level
        private Spell.SpellLevel _Level;
        public Spell.SpellLevel Level
        {
            get => this._Level;
            set
            {
                this.SPITDataTypeState |= SPITDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Level, value, nameof(Level));
            }
        }
        #endregion
        #region Flag
        private Spell.SpellFlag _Flag;
        public Spell.SpellFlag Flag
        {
            get => this._Flag;
            set
            {
                this.SPITDataTypeState |= SPITDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flag, value, nameof(Flag));
            }
        }
        #endregion
        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<Effect> _Effects = new SourceSetList<Effect>();
        public ISourceSetList<Effect> Effects => _Effects;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Effect> EffectsEnumerable
        {
            get => _Effects.Items;
            set => _Effects.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<Effect> ISpellUnleveled.Effects => _Effects;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<Effect> ISpellUnleveledGetter.Effects => _Effects;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => SpellUnleveledCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => SpellUnleveledCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => SpellUnleveledCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            SpellUnleveledCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<SpellUnleveled>.GetEqualsMask(SpellUnleveled rhs, EqualsMaskHelper.Include include) => SpellUnleveledCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ISpellUnleveledGetter>.GetEqualsMask(ISpellUnleveledGetter rhs, EqualsMaskHelper.Include include) => SpellUnleveledCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            SpellUnleveled_Mask<bool> printMask = null)
        {
            return SpellUnleveledCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            SpellUnleveledCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new SpellUnleveled_Mask<bool> GetHasBeenSetMask()
        {
            return SpellUnleveledCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is SpellUnleveled rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SpellUnleveled rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (this.Type != rhs.Type) return false;
            if (this.Cost != rhs.Cost) return false;
            if (this.Level != rhs.Level) return false;
            if (this.Flag != rhs.Flag) return false;
            if (Effects.HasBeenSet != rhs.Effects.HasBeenSet) return false;
            if (Effects.HasBeenSet)
            {
                if (!this.Effects.SequenceEqual(rhs.Effects)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Type).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Cost).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Level).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flag).CombineHashCode(ret);
            if (Effects.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Effects).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static SpellUnleveled Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            SpellUnleveled_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SpellUnleveled Create_Xml(
            XElement node,
            out SpellUnleveled_ErrorMask errorMask,
            bool doMasks = true,
            SpellUnleveled_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static SpellUnleveled Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            var ret = new SpellUnleveled();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    SpellUnleveledCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static SpellUnleveled Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            SpellUnleveled_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SpellUnleveled Create_Xml(
            string path,
            out SpellUnleveled_ErrorMask errorMask,
            SpellUnleveled_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SpellUnleveled Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            SpellUnleveled_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SpellUnleveled Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            SpellUnleveled_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SpellUnleveled Create_Xml(
            Stream stream,
            out SpellUnleveled_ErrorMask errorMask,
            SpellUnleveled_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SpellUnleveled Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            SpellUnleveled_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out SpellUnleveled_ErrorMask errorMask,
            SpellUnleveled_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<SpellUnleveled>.Instance.CopyIn(
                missing: missing,
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            NotifyingFireParameters cmds = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out SpellUnleveled_ErrorMask errorMask,
            SpellUnleveled_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out SpellUnleveled_ErrorMask errorMask,
            SpellUnleveled_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement node,
            out Spell_ErrorMask errorMask,
            Spell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void CopyIn_Xml(
            XElement node,
            out SpellAbstract_ErrorMask errorMask,
            SpellAbstract_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void CopyIn_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out SpellUnleveled_ErrorMask errorMask,
            bool doMasks = true,
            SpellUnleveled_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out SpellUnleveled_ErrorMask errorMask,
            SpellUnleveled_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out SpellUnleveled_ErrorMask errorMask,
            SpellUnleveled_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out Spell_ErrorMask errorMask,
            bool doMasks = true,
            Spell_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out SpellAbstract_ErrorMask errorMask,
            bool doMasks = true,
            SpellAbstract_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            SpellUnleveledCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            SpellUnleveled item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasSPITDataType":
                    item.SPITDataTypeState |= SpellUnleveled.SPITDataType.Has;
                    break;
                default:
                    Spell.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((SpellUnleveled_FieldIndex)index)
            {
                case SpellUnleveled_FieldIndex.Effects:
                    return Effects.HasBeenSet;
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = SpellUnleveled_Registration.TRIGGERING_RECORD_TYPE;
        public SPITDataType SPITDataTypeState;
        [Flags]
        public enum SPITDataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Effects.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod,
            NotifyingFireParameters cmds = null)
            
        {
            base.Link(
                modList,
                sourceMod,
                cmds);
            foreach (var item in Effects.Items)
            {
                item.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
        }

        public SpellUnleveled(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        partial void PostDuplicate(SpellUnleveled obj, SpellUnleveled rhs, Func<FormKey> getNextFormKey, IList<(MajorRecord Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override MajorRecord Duplicate(Func<FormKey> getNextFormKey, IList<(MajorRecord Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new SpellUnleveled(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static SpellUnleveled Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static SpellUnleveled Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out SpellUnleveled_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static SpellUnleveled Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<SpellUnleveled>(
                record: new SpellUnleveled(),
                frame: frame,
                errorMask: errorMask,
                recType: SpellUnleveled_Registration.SPEL_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static SpellUnleveled Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static SpellUnleveled Create_Binary(
            string path,
            MasterReferences masterReferences,
            out SpellUnleveled_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static SpellUnleveled Create_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        public static SpellUnleveled Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static SpellUnleveled Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out SpellUnleveled_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static SpellUnleveled Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out SpellUnleveled_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out SpellUnleveled_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public override void Write_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: errorMask);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }
        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out SpellUnleveled_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }
        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Spell_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out SpellAbstract_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            SpellUnleveledCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            SpellUnleveled item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            Spell.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            SpellUnleveled item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x54495053: // SPIT
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        if (!dataFrame.Complete)
                        {
                            item.SPITDataTypeState = SPITDataType.Has;
                        }
                        try
                        {
                            errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Type);
                            if (EnumBinaryTranslation<Spell.SpellType>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out Spell.SpellType TypeParse,
                                errorMask: errorMask))
                            {
                                item.Type = TypeParse;
                            }
                            else
                            {
                                item.Type = default(Spell.SpellType);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Cost);
                            if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out UInt32 CostParse,
                                errorMask: errorMask))
                            {
                                item.Cost = CostParse;
                            }
                            else
                            {
                                item.Cost = default(UInt32);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Level);
                            if (EnumBinaryTranslation<Spell.SpellLevel>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out Spell.SpellLevel LevelParse,
                                errorMask: errorMask))
                            {
                                item.Level = LevelParse;
                            }
                            else
                            {
                                item.Level = default(Spell.SpellLevel);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Flag);
                            if (EnumBinaryTranslation<Spell.SpellFlag>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out Spell.SpellFlag FlagParse,
                                errorMask: errorMask))
                            {
                                item.Flag = FlagParse;
                            }
                            else
                            {
                                item.Flag = default(Spell.SpellFlag);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)SpellUnleveled_FieldIndex.Flag);
                case 0x44494645: // EFID
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Effect>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: SpellUnleveled_Registration.EFID_HEADER,
                        item: item.Effects,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Effects,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out Effect listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<Effect>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        }
                        );
                    return TryGet<int?>.Succeed((int)SpellUnleveled_FieldIndex.Effects);
                default:
                    return Spell.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public SpellUnleveled Copy(
            SpellUnleveled_CopyMask copyMask = null,
            ISpellUnleveledGetter def = null)
        {
            return SpellUnleveled.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static SpellUnleveled Copy(
            ISpellUnleveled item,
            SpellUnleveled_CopyMask copyMask = null,
            ISpellUnleveledGetter def = null)
        {
            SpellUnleveled ret;
            if (item.GetType().Equals(typeof(SpellUnleveled)))
            {
                ret = new SpellUnleveled();
            }
            else
            {
                ret = (SpellUnleveled)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static SpellUnleveled Copy_ToLoqui(
            ISpellUnleveledGetter item,
            SpellUnleveled_CopyMask copyMask = null,
            ISpellUnleveledGetter def = null)
        {
            SpellUnleveled ret;
            if (item.GetType().Equals(typeof(SpellUnleveled)))
            {
                ret = new SpellUnleveled() as SpellUnleveled;
            }
            else
            {
                ret = (SpellUnleveled)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(
            IMajorRecordGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (ISpellUnleveledGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ISpellUnleveledGetter rhs,
            SpellUnleveled_CopyMask copyMask,
            ISpellUnleveledGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ISpellUnleveledGetter rhs,
            out SpellUnleveled_ErrorMask errorMask,
            SpellUnleveled_CopyMask copyMask = null,
            ISpellUnleveledGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SpellUnleveledCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ISpellUnleveledGetter rhs,
            ErrorMaskBuilder errorMask,
            SpellUnleveled_CopyMask copyMask = null,
            ISpellUnleveledGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            SpellUnleveledCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    this.Type = (Spell.SpellType)obj;
                    break;
                case SpellUnleveled_FieldIndex.Cost:
                    this.Cost = (UInt32)obj;
                    break;
                case SpellUnleveled_FieldIndex.Level:
                    this.Level = (Spell.SpellLevel)obj;
                    break;
                case SpellUnleveled_FieldIndex.Flag:
                    this.Flag = (Spell.SpellFlag)obj;
                    break;
                case SpellUnleveled_FieldIndex.Effects:
                    this._Effects.SetTo((IEnumerable<Effect>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            SpellUnleveledCommon.Clear(this, cmds);
        }


        public new static SpellUnleveled Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new SpellUnleveled();
            foreach (var pair in fields)
            {
                CopyInInternal_SpellUnleveled(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_SpellUnleveled(SpellUnleveled obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out SpellUnleveled_FieldIndex enu))
            {
                CopyInInternal_Spell(obj, pair);
            }
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    obj.Type = (Spell.SpellType)pair.Value;
                    break;
                case SpellUnleveled_FieldIndex.Cost:
                    obj.Cost = (UInt32)pair.Value;
                    break;
                case SpellUnleveled_FieldIndex.Level:
                    obj.Level = (Spell.SpellLevel)pair.Value;
                    break;
                case SpellUnleveled_FieldIndex.Flag:
                    obj.Flag = (Spell.SpellFlag)pair.Value;
                    break;
                case SpellUnleveled_FieldIndex.Effects:
                    obj._Effects.SetTo((IEnumerable<Effect>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, SpellUnleveled obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ISpellUnleveled : ISpellUnleveledGetter, ISpell, ILoquiClass<ISpellUnleveled, ISpellUnleveledGetter>, ILoquiClass<SpellUnleveled, ISpellUnleveledGetter>
    {
        new Spell.SpellType Type { get; set; }

        new UInt32 Cost { get; set; }

        new Spell.SpellLevel Level { get; set; }

        new Spell.SpellFlag Flag { get; set; }

        new ISourceSetList<Effect> Effects { get; }
    }

    public partial interface ISpellUnleveledGetter : ISpellGetter
    {
        #region Type
        Spell.SpellType Type { get; }

        #endregion
        #region Cost
        UInt32 Cost { get; }

        #endregion
        #region Level
        Spell.SpellLevel Level { get; }

        #endregion
        #region Flag
        Spell.SpellFlag Flag { get; }

        #endregion
        #region Effects
        IObservableSetList<Effect> Effects { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum SpellUnleveled_FieldIndex
    {
        MajorRecordFlags = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Type = 6,
        Cost = 7,
        Level = 8,
        Flag = 9,
        Effects = 10,
    }
    #endregion

    #region Registration
    public class SpellUnleveled_Registration : ILoquiRegistration
    {
        public static readonly SpellUnleveled_Registration Instance = new SpellUnleveled_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 28,
            version: 0);

        public const string GUID = "6e7673df-39d3-4704-b1ef-ac774f9d01c3";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(SpellUnleveled_Mask<>);

        public static readonly Type ErrorMaskType = typeof(SpellUnleveled_ErrorMask);

        public static readonly Type ClassType = typeof(SpellUnleveled);

        public static readonly Type GetterType = typeof(ISpellUnleveledGetter);

        public static readonly Type SetterType = typeof(ISpellUnleveled);

        public static readonly Type CommonType = typeof(SpellUnleveledCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.SpellUnleveled";

        public const string Name = "SpellUnleveled";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TYPE":
                    return (ushort)SpellUnleveled_FieldIndex.Type;
                case "COST":
                    return (ushort)SpellUnleveled_FieldIndex.Cost;
                case "LEVEL":
                    return (ushort)SpellUnleveled_FieldIndex.Level;
                case "FLAG":
                    return (ushort)SpellUnleveled_FieldIndex.Flag;
                case "EFFECTS":
                    return (ushort)SpellUnleveled_FieldIndex.Effects;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Effects:
                    return true;
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                    return false;
                default:
                    return Spell_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Effects:
                    return true;
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                    return false;
                default:
                    return Spell_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                case SpellUnleveled_FieldIndex.Effects:
                    return false;
                default:
                    return Spell_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    return "Type";
                case SpellUnleveled_FieldIndex.Cost:
                    return "Cost";
                case SpellUnleveled_FieldIndex.Level:
                    return "Level";
                case SpellUnleveled_FieldIndex.Flag:
                    return "Flag";
                case SpellUnleveled_FieldIndex.Effects:
                    return "Effects";
                default:
                    return Spell_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                case SpellUnleveled_FieldIndex.Effects:
                    return false;
                default:
                    return Spell_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                case SpellUnleveled_FieldIndex.Effects:
                    return false;
                default:
                    return Spell_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    return typeof(Spell.SpellType);
                case SpellUnleveled_FieldIndex.Cost:
                    return typeof(UInt32);
                case SpellUnleveled_FieldIndex.Level:
                    return typeof(Spell.SpellLevel);
                case SpellUnleveled_FieldIndex.Flag:
                    return typeof(Spell.SpellFlag);
                case SpellUnleveled_FieldIndex.Effects:
                    return typeof(SourceSetList<Effect>);
                default:
                    return Spell_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType SPEL_HEADER = new RecordType("SPEL");
        public static readonly RecordType SPIT_HEADER = new RecordType("SPIT");
        public static readonly RecordType EFID_HEADER = new RecordType("EFID");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SPEL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class SpellUnleveledCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ISpellUnleveled item,
            ISpellUnleveledGetter rhs,
            ISpellUnleveledGetter def,
            ErrorMaskBuilder errorMask,
            SpellUnleveled_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            SpellCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Type ?? true)
            {
                errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Type);
                try
                {
                    item.Type = rhs.Type;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Cost ?? true)
            {
                errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Cost);
                try
                {
                    item.Cost = rhs.Cost;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Level ?? true)
            {
                errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Level);
                try
                {
                    item.Level = rhs.Level;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flag ?? true)
            {
                errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Flag);
                try
                {
                    item.Flag = rhs.Flag;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Effects.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Effects);
                try
                {
                    item.Effects.SetToWithDefault(
                        rhs: rhs.Effects,
                        def: def?.Effects,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Effects.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return Effect.Copy(
                                        r,
                                        copyMask?.Effects?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Effects.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ISpellUnleveled obj,
            NotifyingFireParameters cmds = null)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case SpellUnleveled_FieldIndex.Effects:
                    obj.Effects.HasBeenSet = on;
                    break;
                default:
                    SpellCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ISpellUnleveled obj,
            NotifyingUnsetParameters cmds = null)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    obj.Type = default(Spell.SpellType);
                    break;
                case SpellUnleveled_FieldIndex.Cost:
                    obj.Cost = default(UInt32);
                    break;
                case SpellUnleveled_FieldIndex.Level:
                    obj.Level = default(Spell.SpellLevel);
                    break;
                case SpellUnleveled_FieldIndex.Flag:
                    obj.Flag = default(Spell.SpellFlag);
                    break;
                case SpellUnleveled_FieldIndex.Effects:
                    obj.Effects.Unset();
                    break;
                default:
                    SpellCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ISpellUnleveled obj)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                    return true;
                case SpellUnleveled_FieldIndex.Effects:
                    return obj.Effects.HasBeenSet;
                default:
                    return SpellCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ISpellUnleveledGetter obj)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    return obj.Type;
                case SpellUnleveled_FieldIndex.Cost:
                    return obj.Cost;
                case SpellUnleveled_FieldIndex.Level:
                    return obj.Level;
                case SpellUnleveled_FieldIndex.Flag:
                    return obj.Flag;
                case SpellUnleveled_FieldIndex.Effects:
                    return obj.Effects;
                default:
                    return SpellCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ISpellUnleveled item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Type = default(Spell.SpellType);
            item.Cost = default(UInt32);
            item.Level = default(Spell.SpellLevel);
            item.Flag = default(Spell.SpellFlag);
            item.Effects.Unset();
        }

        public static SpellUnleveled_Mask<bool> GetEqualsMask(
            this ISpellUnleveledGetter item,
            ISpellUnleveledGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SpellUnleveled_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            ISpellUnleveledGetter item,
            ISpellUnleveledGetter rhs,
            SpellUnleveled_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Type = item.Type == rhs.Type;
            ret.Cost = item.Cost == rhs.Cost;
            ret.Level = item.Level == rhs.Level;
            ret.Flag = item.Flag == rhs.Flag;
            ret.Effects = item.Effects.CollectionEqualsHelper(
                rhs.Effects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            SpellCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ISpellUnleveledGetter item,
            string name = null,
            SpellUnleveled_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ISpellUnleveledGetter item,
            FileGeneration fg,
            string name = null,
            SpellUnleveled_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(SpellUnleveled)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(SpellUnleveled)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {item.Type}");
                }
                if (printMask?.Cost ?? true)
                {
                    fg.AppendLine($"Cost => {item.Cost}");
                }
                if (printMask?.Level ?? true)
                {
                    fg.AppendLine($"Level => {item.Level}");
                }
                if (printMask?.Flag ?? true)
                {
                    fg.AppendLine($"Flag => {item.Flag}");
                }
                if (printMask?.Effects?.Overall ?? true)
                {
                    fg.AppendLine("Effects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Effects)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ISpellUnleveledGetter item,
            SpellUnleveled_Mask<bool?> checkMask)
        {
            if (checkMask.Effects.Overall.HasValue && checkMask.Effects.Overall.Value != item.Effects.HasBeenSet) return false;
            return true;
        }

        public static SpellUnleveled_Mask<bool> GetHasBeenSetMask(ISpellUnleveledGetter item)
        {
            var ret = new SpellUnleveled_Mask<bool>();
            ret.Type = true;
            ret.Cost = true;
            ret.Level = true;
            ret.Flag = true;
            ret.Effects = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Effect_Mask<bool>>>>(item.Effects.HasBeenSet, item.Effects.WithIndex().Select((i) => new MaskItemIndexed<bool, Effect_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            return ret;
        }

        public static SpellUnleveled_FieldIndex? ConvertFieldIndex(Spell_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static SpellUnleveled_FieldIndex ConvertFieldIndex(Spell_FieldIndex index)
        {
            switch (index)
            {
                case Spell_FieldIndex.MajorRecordFlags:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case Spell_FieldIndex.FormKey:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case Spell_FieldIndex.Version:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case Spell_FieldIndex.EditorID:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case Spell_FieldIndex.RecordType:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case Spell_FieldIndex.Name:
                    return (SpellUnleveled_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static SpellUnleveled_FieldIndex? ConvertFieldIndex(SpellAbstract_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static SpellUnleveled_FieldIndex ConvertFieldIndex(SpellAbstract_FieldIndex index)
        {
            switch (index)
            {
                case SpellAbstract_FieldIndex.MajorRecordFlags:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case SpellAbstract_FieldIndex.FormKey:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case SpellAbstract_FieldIndex.Version:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case SpellAbstract_FieldIndex.EditorID:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case SpellAbstract_FieldIndex.RecordType:
                    return (SpellUnleveled_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static SpellUnleveled_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static SpellUnleveled_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (SpellUnleveled_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            SpellUnleveled item,
            bool doMasks,
            out SpellUnleveled_ErrorMask errorMask,
            SpellUnleveled_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            SpellUnleveled item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.SpellUnleveled");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.SpellUnleveled");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this SpellUnleveled item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            SpellCommon.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.SPITDataTypeState.HasFlag(SpellUnleveled.SPITDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.Type) ?? true))
                {
                    EnumXmlTranslation<Spell.SpellType>.Instance.Write(
                        node: node,
                        name: nameof(item.Type),
                        item: item.Type,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Type,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.Cost) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Cost),
                        item: item.Cost,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Cost,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.Level) ?? true))
                {
                    EnumXmlTranslation<Spell.SpellLevel>.Instance.Write(
                        node: node,
                        name: nameof(item.Level),
                        item: item.Level,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Level,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.Flag) ?? true))
                {
                    EnumXmlTranslation<Spell.SpellFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flag),
                        item: item.Flag,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Flag,
                        errorMask: errorMask);
                }
            }
            if (item.Effects.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.Effects) ?? true))
            {
                ListXmlTranslation<Effect>.Instance.Write(
                    node: node,
                    name: nameof(item.Effects),
                    item: item.Effects,
                    fieldIndex: (int)SpellUnleveled_FieldIndex.Effects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SpellUnleveled_FieldIndex.Effects),
                    transl: (XElement subNode, Effect subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<Effect>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }

        public static void FillPublic_Xml(
            this SpellUnleveled item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SpellUnleveledCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this SpellUnleveled item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Type":
                    try
                    {
                        errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Type);
                        if (EnumXmlTranslation<Spell.SpellType>.Instance.Parse(
                            node: node,
                            item: out Spell.SpellType TypeParse,
                            errorMask: errorMask))
                        {
                            item.Type = TypeParse;
                        }
                        else
                        {
                            item.Type = default(Spell.SpellType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.SPITDataTypeState |= SpellUnleveled.SPITDataType.Has;
                    break;
                case "Cost":
                    try
                    {
                        errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Cost);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 CostParse,
                            errorMask: errorMask))
                        {
                            item.Cost = CostParse;
                        }
                        else
                        {
                            item.Cost = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Level":
                    try
                    {
                        errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Level);
                        if (EnumXmlTranslation<Spell.SpellLevel>.Instance.Parse(
                            node: node,
                            item: out Spell.SpellLevel LevelParse,
                            errorMask: errorMask))
                        {
                            item.Level = LevelParse;
                        }
                        else
                        {
                            item.Level = default(Spell.SpellLevel);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flag":
                    try
                    {
                        errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Flag);
                        if (EnumXmlTranslation<Spell.SpellFlag>.Instance.Parse(
                            node: node,
                            item: out Spell.SpellFlag FlagParse,
                            errorMask: errorMask))
                        {
                            item.Flag = FlagParse;
                        }
                        else
                        {
                            item.Flag = default(Spell.SpellFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Effects":
                    try
                    {
                        errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Effects);
                        if (ListXmlTranslation<Effect>.Instance.Parse(
                            node: node,
                            enumer: out var EffectsItem,
                            transl: LoquiXmlTranslation<Effect>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Effects.SetTo(EffectsItem);
                        }
                        else
                        {
                            item.Effects.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SpellCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            SpellUnleveled item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out SpellUnleveled_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = SpellUnleveled_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            SpellUnleveled item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: SpellUnleveled_Registration.SPEL_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            SpellUnleveled item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            SpellCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.SPITDataTypeState.HasFlag(SpellUnleveled.SPITDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(SpellUnleveled_Registration.SPIT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Spell.SpellType>.Instance.Write(
                        writer,
                        item.Type,
                        length: 4,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Type,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Cost,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Cost,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Spell.SpellLevel>.Instance.Write(
                        writer,
                        item.Level,
                        length: 4,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Level,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Spell.SpellFlag>.Instance.Write(
                        writer,
                        item.Flag,
                        length: 4,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Flag,
                        errorMask: errorMask);
                }
            }
            if (item.Effects.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<Effect>.Instance.Write(
                    writer: writer,
                    items: item.Effects,
                    fieldIndex: (int)SpellUnleveled_FieldIndex.Effects,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, Effect subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        LoquiBinaryTranslation<Effect>.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class SpellUnleveled_Mask<T> : Spell_Mask<T>, IMask<T>, IEquatable<SpellUnleveled_Mask<T>>
    {
        #region Ctors
        public SpellUnleveled_Mask()
        {
        }

        public SpellUnleveled_Mask(T initialValue)
        {
            this.Type = initialValue;
            this.Cost = initialValue;
            this.Level = initialValue;
            this.Flag = initialValue;
            this.Effects = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Effect_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Type;
        public T Cost;
        public T Level;
        public T Flag;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Effect_Mask<T>>>> Effects;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is SpellUnleveled_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SpellUnleveled_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Type, rhs.Type)) return false;
            if (!object.Equals(this.Cost, rhs.Cost)) return false;
            if (!object.Equals(this.Level, rhs.Level)) return false;
            if (!object.Equals(this.Flag, rhs.Flag)) return false;
            if (!object.Equals(this.Effects, rhs.Effects)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Type?.GetHashCode());
            ret = ret.CombineHashCode(this.Cost?.GetHashCode());
            ret = ret.CombineHashCode(this.Level?.GetHashCode());
            ret = ret.CombineHashCode(this.Flag?.GetHashCode());
            ret = ret.CombineHashCode(this.Effects?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Type)) return false;
            if (!eval(this.Cost)) return false;
            if (!eval(this.Level)) return false;
            if (!eval(this.Flag)) return false;
            if (this.Effects != null)
            {
                if (!eval(this.Effects.Overall)) return false;
                if (this.Effects.Specific != null)
                {
                    foreach (var item in this.Effects.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new SpellUnleveled_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new SpellUnleveled_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(SpellUnleveled_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Type = eval(this.Type);
            obj.Cost = eval(this.Cost);
            obj.Level = eval(this.Level);
            obj.Flag = eval(this.Flag);
            if (Effects != null)
            {
                obj.Effects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Effect_Mask<R>>>>();
                obj.Effects.Overall = eval(this.Effects.Overall);
                if (Effects.Specific != null)
                {
                    List<MaskItemIndexed<R, Effect_Mask<R>>> l = new List<MaskItemIndexed<R, Effect_Mask<R>>>();
                    obj.Effects.Specific = l;
                    foreach (var item in Effects.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Effect_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Effect_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Effects.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(SpellUnleveled_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, SpellUnleveled_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(SpellUnleveled_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {Type}");
                }
                if (printMask?.Cost ?? true)
                {
                    fg.AppendLine($"Cost => {Cost}");
                }
                if (printMask?.Level ?? true)
                {
                    fg.AppendLine($"Level => {Level}");
                }
                if (printMask?.Flag ?? true)
                {
                    fg.AppendLine($"Flag => {Flag}");
                }
                if (printMask?.Effects?.Overall ?? true)
                {
                    fg.AppendLine("Effects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Effects.Overall != null)
                        {
                            fg.AppendLine(Effects.Overall.ToString());
                        }
                        if (Effects.Specific != null)
                        {
                            foreach (var subItem in Effects.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class SpellUnleveled_ErrorMask : Spell_ErrorMask, IErrorMask<SpellUnleveled_ErrorMask>
    {
        #region Members
        public Exception Type;
        public Exception Cost;
        public Exception Level;
        public Exception Flag;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>> Effects;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    return Type;
                case SpellUnleveled_FieldIndex.Cost:
                    return Cost;
                case SpellUnleveled_FieldIndex.Level:
                    return Level;
                case SpellUnleveled_FieldIndex.Flag:
                    return Flag;
                case SpellUnleveled_FieldIndex.Effects:
                    return Effects;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    this.Type = ex;
                    break;
                case SpellUnleveled_FieldIndex.Cost:
                    this.Cost = ex;
                    break;
                case SpellUnleveled_FieldIndex.Level:
                    this.Level = ex;
                    break;
                case SpellUnleveled_FieldIndex.Flag:
                    this.Flag = ex;
                    break;
                case SpellUnleveled_FieldIndex.Effects:
                    this.Effects = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    this.Type = (Exception)obj;
                    break;
                case SpellUnleveled_FieldIndex.Cost:
                    this.Cost = (Exception)obj;
                    break;
                case SpellUnleveled_FieldIndex.Level:
                    this.Level = (Exception)obj;
                    break;
                case SpellUnleveled_FieldIndex.Flag:
                    this.Flag = (Exception)obj;
                    break;
                case SpellUnleveled_FieldIndex.Effects:
                    this.Effects = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Type != null) return true;
            if (Cost != null) return true;
            if (Level != null) return true;
            if (Flag != null) return true;
            if (Effects != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("SpellUnleveled_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Type => {Type}");
            fg.AppendLine($"Cost => {Cost}");
            fg.AppendLine($"Level => {Level}");
            fg.AppendLine($"Flag => {Flag}");
            fg.AppendLine("Effects =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Effects.Overall != null)
                {
                    fg.AppendLine(Effects.Overall.ToString());
                }
                if (Effects.Specific != null)
                {
                    foreach (var subItem in Effects.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public SpellUnleveled_ErrorMask Combine(SpellUnleveled_ErrorMask rhs)
        {
            var ret = new SpellUnleveled_ErrorMask();
            ret.Type = this.Type.Combine(rhs.Type);
            ret.Cost = this.Cost.Combine(rhs.Cost);
            ret.Level = this.Level.Combine(rhs.Level);
            ret.Flag = this.Flag.Combine(rhs.Flag);
            ret.Effects = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>>(this.Effects.Overall.Combine(rhs.Effects.Overall), new List<MaskItem<Exception, Effect_ErrorMask>>(this.Effects.Specific.And(rhs.Effects.Specific)));
            return ret;
        }
        public static SpellUnleveled_ErrorMask Combine(SpellUnleveled_ErrorMask lhs, SpellUnleveled_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static SpellUnleveled_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new SpellUnleveled_ErrorMask();
        }
        #endregion

    }
    public class SpellUnleveled_CopyMask : Spell_CopyMask
    {
        public SpellUnleveled_CopyMask()
        {
        }

        public SpellUnleveled_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Type = defaultOn;
            this.Cost = defaultOn;
            this.Level = defaultOn;
            this.Flag = defaultOn;
            this.Effects = new MaskItem<CopyOption, Effect_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool Type;
        public bool Cost;
        public bool Level;
        public bool Flag;
        public MaskItem<CopyOption, Effect_CopyMask> Effects;
        #endregion

    }

    public class SpellUnleveled_TranslationMask : Spell_TranslationMask
    {
        #region Members
        public bool Type;
        public bool Cost;
        public bool Level;
        public bool Flag;
        public MaskItem<bool, Effect_TranslationMask> Effects;
        #endregion

        #region Ctors
        public SpellUnleveled_TranslationMask()
            : base()
        {
        }

        public SpellUnleveled_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Type = defaultOn;
            this.Cost = defaultOn;
            this.Level = defaultOn;
            this.Flag = defaultOn;
            this.Effects = new MaskItem<bool, Effect_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Type, null));
            ret.Add((Cost, null));
            ret.Add((Level, null));
            ret.Add((Flag, null));
            ret.Add((Effects?.Overall ?? true, Effects?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
