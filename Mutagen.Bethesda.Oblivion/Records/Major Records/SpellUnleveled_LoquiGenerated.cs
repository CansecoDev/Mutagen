/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class SpellUnleveled : Spell, ISpellUnleveled, ILoquiObjectSetter, IEquatable<SpellUnleveled>
    {
        ILoquiRegistration ILoquiObject.Registration => SpellUnleveled_Registration.Instance;
        public new static SpellUnleveled_Registration Registration => SpellUnleveled_Registration.Instance;

        #region Ctor
        public SpellUnleveled()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Type
        protected readonly INotifyingItem<Spell.SpellType> _Type = NotifyingItem.Factory<Spell.SpellType>();
        public INotifyingItem<Spell.SpellType> Type_Property => _Type;
        public Spell.SpellType Type
        {
            get => this._Type.Item;
            set => this._Type.Set(value);
        }
        INotifyingItem<Spell.SpellType> ISpellUnleveled.Type_Property => this.Type_Property;
        INotifyingItemGetter<Spell.SpellType> ISpellUnleveledGetter.Type_Property => this.Type_Property;
        #endregion
        #region Cost
        protected readonly INotifyingItem<UInt32> _Cost = NotifyingItem.Factory<UInt32>();
        public INotifyingItem<UInt32> Cost_Property => _Cost;
        public UInt32 Cost
        {
            get => this._Cost.Item;
            set => this._Cost.Set(value);
        }
        INotifyingItem<UInt32> ISpellUnleveled.Cost_Property => this.Cost_Property;
        INotifyingItemGetter<UInt32> ISpellUnleveledGetter.Cost_Property => this.Cost_Property;
        #endregion
        #region Level
        protected readonly INotifyingItem<Spell.SpellLevel> _Level = NotifyingItem.Factory<Spell.SpellLevel>();
        public INotifyingItem<Spell.SpellLevel> Level_Property => _Level;
        public Spell.SpellLevel Level
        {
            get => this._Level.Item;
            set => this._Level.Set(value);
        }
        INotifyingItem<Spell.SpellLevel> ISpellUnleveled.Level_Property => this.Level_Property;
        INotifyingItemGetter<Spell.SpellLevel> ISpellUnleveledGetter.Level_Property => this.Level_Property;
        #endregion
        #region Flag
        protected readonly INotifyingItem<Spell.SpellFlag> _Flag = NotifyingItem.Factory<Spell.SpellFlag>();
        public INotifyingItem<Spell.SpellFlag> Flag_Property => _Flag;
        public Spell.SpellFlag Flag
        {
            get => this._Flag.Item;
            set => this._Flag.Set(value);
        }
        INotifyingItem<Spell.SpellFlag> ISpellUnleveled.Flag_Property => this.Flag_Property;
        INotifyingItemGetter<Spell.SpellFlag> ISpellUnleveledGetter.Flag_Property => this.Flag_Property;
        #endregion
        #region Effects
        private readonly INotifyingList<Effect> _Effects = new NotifyingList<Effect>();
        public INotifyingList<Effect> Effects => _Effects;
        #region Interface Members
        INotifyingList<Effect> ISpellUnleveled.Effects => _Effects;
        INotifyingListGetter<Effect> ISpellUnleveledGetter.Effects => _Effects;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => SpellUnleveledCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => SpellUnleveledCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => SpellUnleveledCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            SpellUnleveledCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return SpellUnleveledCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            SpellUnleveled_Mask<bool> printMask = null)
        {
            return SpellUnleveledCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            SpellUnleveledCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new SpellUnleveled_Mask<bool> GetHasBeenSetMask()
        {
            return SpellUnleveledCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is SpellUnleveled rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SpellUnleveled rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Type != rhs.Type) return false;
            if (Cost != rhs.Cost) return false;
            if (Level != rhs.Level) return false;
            if (Flag != rhs.Flag) return false;
            if (Effects.HasBeenSet != rhs.Effects.HasBeenSet) return false;
            if (Effects.HasBeenSet)
            {
                if (!Effects.SequenceEqual(rhs.Effects)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Type).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Cost).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Level).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flag).CombineHashCode(ret);
            if (Effects.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Effects).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static SpellUnleveled Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static SpellUnleveled Create_XML(
            XElement root,
            out SpellUnleveled_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static SpellUnleveled Create_XML(
            XElement root,
            bool doMasks,
            out SpellUnleveled_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (SpellUnleveled Object, SpellUnleveled_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            SpellUnleveled_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SpellUnleveled_ErrorMask()) : default(Func<SpellUnleveled_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static SpellUnleveled Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static SpellUnleveled Create_XML(
            string path,
            out SpellUnleveled_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static SpellUnleveled Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static SpellUnleveled Create_XML(
            Stream stream,
            out SpellUnleveled_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<SpellUnleveled, SpellUnleveled_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out SpellUnleveled_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<SpellUnleveled, SpellUnleveled_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out SpellUnleveled_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out SpellUnleveled_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out Spell_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out SpellUnleveled_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out SpellUnleveled_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out SpellUnleveled_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out SpellUnleveled_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (SpellUnleveled_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out SpellUnleveled_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out SpellUnleveled_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            SpellUnleveledCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static SpellUnleveled Create_XML_Internal(
            XElement root,
            Func<SpellUnleveled_ErrorMask> errorMask)
        {
            var ret = new SpellUnleveled();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            SpellUnleveled item,
            XElement root,
            string name,
            Func<SpellUnleveled_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Type":
                    item._Type.SetIfSucceeded(EnumXmlTranslation<Spell.SpellType>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Type,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Cost":
                    item._Cost.SetIfSucceeded(UInt32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Cost,
                        errorMask: errorMask));
                    break;
                case "Level":
                    item._Level.SetIfSucceeded(EnumXmlTranslation<Spell.SpellLevel>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Level,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Flag":
                    item._Flag.SetIfSucceeded(EnumXmlTranslation<Spell.SpellFlag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Flag,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Effects":
                    item._Effects.SetIfSucceeded(ListXmlTranslation<Effect, MaskItem<Exception, Effect_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Effects,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, Effect_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<Effect, Effect_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                default:
                    Spell.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static SpellUnleveled Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static SpellUnleveled Create_Binary(
            MutagenFrame frame,
            out SpellUnleveled_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static SpellUnleveled Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out SpellUnleveled_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (SpellUnleveled Object, SpellUnleveled_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            SpellUnleveled_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SpellUnleveled_ErrorMask()) : default(Func<SpellUnleveled_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static SpellUnleveled Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static SpellUnleveled Create_Binary(
            string path,
            out SpellUnleveled_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static SpellUnleveled Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static SpellUnleveled Create_Binary(
            Stream stream,
            out SpellUnleveled_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<SpellUnleveled, SpellUnleveled_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out SpellUnleveled_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<SpellUnleveled, SpellUnleveled_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out SpellUnleveled_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out SpellUnleveled_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out Spell_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out SpellUnleveled_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out SpellUnleveled_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out SpellUnleveled_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out SpellUnleveled_ErrorMask errorMask)
        {
            errorMask = (SpellUnleveled_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out SpellUnleveled_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out SpellUnleveled_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            SpellUnleveledCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static SpellUnleveled Create_Binary_Internal(
            MutagenFrame frame,
            Func<SpellUnleveled_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new SpellUnleveled();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseRecord(
                    frame,
                    SpellUnleveled_Registration.SPEL_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            SpellUnleveled item,
            MutagenFrame frame,
            Func<SpellUnleveled_ErrorMask> errorMask)
        {
            Spell.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<SpellUnleveled_FieldIndex?> Fill_Binary_RecordTypes(
            SpellUnleveled item,
            MutagenFrame frame,
            Func<SpellUnleveled_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                frame: frame,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "SPIT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.Spawn(contentLength))
                    {
                        item._Type.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<Spell.SpellType>.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(4)),
                            fieldIndex: (int)SpellUnleveled_FieldIndex.Type,
                            errorMask: errorMask));
                        item._Cost.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)SpellUnleveled_FieldIndex.Cost,
                            errorMask: errorMask));
                        item._Level.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<Spell.SpellLevel>.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(4)),
                            fieldIndex: (int)SpellUnleveled_FieldIndex.Level,
                            errorMask: errorMask));
                        item._Flag.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<Spell.SpellFlag>.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(4)),
                            fieldIndex: (int)SpellUnleveled_FieldIndex.Flag,
                            errorMask: errorMask));
                    }
                    return TryGet<SpellUnleveled_FieldIndex?>.Succeed(SpellUnleveled_FieldIndex.Flag);
                case "EFID":
                    var EffectstryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<Effect, MaskItem<Exception, Effect_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: SpellUnleveled_Registration.EFID_HEADER,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Effects,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, Effect_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<Effect, Effect_ErrorMask>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._Effects.SetIfSucceeded(EffectstryGet);
                    return TryGet<SpellUnleveled_FieldIndex?>.Succeed(SpellUnleveled_FieldIndex.Effects);
                default:
                    return Spell.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        errorMask: errorMask).Bubble((i) => SpellUnleveledCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public SpellUnleveled Copy(
            SpellUnleveled_CopyMask copyMask = null,
            ISpellUnleveledGetter def = null)
        {
            return SpellUnleveled.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static SpellUnleveled Copy(
            ISpellUnleveled item,
            SpellUnleveled_CopyMask copyMask = null,
            ISpellUnleveledGetter def = null)
        {
            SpellUnleveled ret;
            if (item.GetType().Equals(typeof(SpellUnleveled)))
            {
                ret = new SpellUnleveled();
            }
            else
            {
                ret = (SpellUnleveled)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            SpellUnleveled_CopyMask copyMask = null,
            ISpellUnleveledGetter def = null)
            where CopyType : class, ISpellUnleveled
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(SpellUnleveled)))
            {
                ret = new SpellUnleveled() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static SpellUnleveled Copy_ToLoqui(
            ISpellUnleveledGetter item,
            SpellUnleveled_CopyMask copyMask = null,
            ISpellUnleveledGetter def = null)
        {
            SpellUnleveled ret;
            if (item.GetType().Equals(typeof(SpellUnleveled)))
            {
                ret = new SpellUnleveled() as SpellUnleveled;
            }
            else
            {
                ret = (SpellUnleveled)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    this._Type.Set(
                        (Spell.SpellType)obj,
                        cmds);
                    break;
                case SpellUnleveled_FieldIndex.Cost:
                    this._Cost.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case SpellUnleveled_FieldIndex.Level:
                    this._Level.Set(
                        (Spell.SpellLevel)obj,
                        cmds);
                    break;
                case SpellUnleveled_FieldIndex.Flag:
                    this._Flag.Set(
                        (Spell.SpellFlag)obj,
                        cmds);
                    break;
                case SpellUnleveled_FieldIndex.Effects:
                    this._Effects.SetTo((IEnumerable<Effect>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            SpellUnleveledCommon.Clear(this, cmds);
        }


        public new static SpellUnleveled Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new SpellUnleveled();
            foreach (var pair in fields)
            {
                CopyInInternal_SpellUnleveled(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_SpellUnleveled(SpellUnleveled obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out SpellUnleveled_FieldIndex enu))
            {
                CopyInInternal_Spell(obj, pair);
            }
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    obj._Type.Set(
                        (Spell.SpellType)pair.Value,
                        null);
                    break;
                case SpellUnleveled_FieldIndex.Cost:
                    obj._Cost.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case SpellUnleveled_FieldIndex.Level:
                    obj._Level.Set(
                        (Spell.SpellLevel)pair.Value,
                        null);
                    break;
                case SpellUnleveled_FieldIndex.Flag:
                    obj._Flag.Set(
                        (Spell.SpellFlag)pair.Value,
                        null);
                    break;
                case SpellUnleveled_FieldIndex.Effects:
                    obj._Effects.SetTo((IEnumerable<Effect>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, SpellUnleveled obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ISpellUnleveled : ISpellUnleveledGetter, ISpell, ILoquiClass<ISpellUnleveled, ISpellUnleveledGetter>, ILoquiClass<SpellUnleveled, ISpellUnleveledGetter>
    {
        new Spell.SpellType Type { get; set; }
        new INotifyingItem<Spell.SpellType> Type_Property { get; }

        new UInt32 Cost { get; set; }
        new INotifyingItem<UInt32> Cost_Property { get; }

        new Spell.SpellLevel Level { get; set; }
        new INotifyingItem<Spell.SpellLevel> Level_Property { get; }

        new Spell.SpellFlag Flag { get; set; }
        new INotifyingItem<Spell.SpellFlag> Flag_Property { get; }

        new INotifyingList<Effect> Effects { get; }
    }

    public interface ISpellUnleveledGetter : ISpellGetter
    {
        #region Type
        Spell.SpellType Type { get; }
        INotifyingItemGetter<Spell.SpellType> Type_Property { get; }

        #endregion
        #region Cost
        UInt32 Cost { get; }
        INotifyingItemGetter<UInt32> Cost_Property { get; }

        #endregion
        #region Level
        Spell.SpellLevel Level { get; }
        INotifyingItemGetter<Spell.SpellLevel> Level_Property { get; }

        #endregion
        #region Flag
        Spell.SpellFlag Flag { get; }
        INotifyingItemGetter<Spell.SpellFlag> Flag_Property { get; }

        #endregion
        #region Effects
        INotifyingListGetter<Effect> Effects { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum SpellUnleveled_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Type = 6,
        Cost = 7,
        Level = 8,
        Flag = 9,
        Effects = 10,
    }
    #endregion

    #region Registration
    public class SpellUnleveled_Registration : ILoquiRegistration
    {
        public static readonly SpellUnleveled_Registration Instance = new SpellUnleveled_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 28,
            version: 0);

        public const string GUID = "6e7673df-39d3-4704-b1ef-ac774f9d01c3";

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(SpellUnleveled_Mask<>);

        public static readonly Type ErrorMaskType = typeof(SpellUnleveled_ErrorMask);

        public static readonly Type ClassType = typeof(SpellUnleveled);

        public static readonly Type GetterType = typeof(ISpellUnleveledGetter);

        public static readonly Type SetterType = typeof(ISpellUnleveled);

        public static readonly Type CommonType = typeof(SpellUnleveledCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.SpellUnleveled";

        public const string Name = "SpellUnleveled";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TYPE":
                    return (ushort)SpellUnleveled_FieldIndex.Type;
                case "COST":
                    return (ushort)SpellUnleveled_FieldIndex.Cost;
                case "LEVEL":
                    return (ushort)SpellUnleveled_FieldIndex.Level;
                case "FLAG":
                    return (ushort)SpellUnleveled_FieldIndex.Flag;
                case "EFFECTS":
                    return (ushort)SpellUnleveled_FieldIndex.Effects;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Effects:
                    return true;
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                    return false;
                default:
                    return Spell_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Effects:
                    return true;
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                    return false;
                default:
                    return Spell_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                case SpellUnleveled_FieldIndex.Effects:
                    return false;
                default:
                    return Spell_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    return "Type";
                case SpellUnleveled_FieldIndex.Cost:
                    return "Cost";
                case SpellUnleveled_FieldIndex.Level:
                    return "Level";
                case SpellUnleveled_FieldIndex.Flag:
                    return "Flag";
                case SpellUnleveled_FieldIndex.Effects:
                    return "Effects";
                default:
                    return Spell_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                case SpellUnleveled_FieldIndex.Effects:
                    return false;
                default:
                    return Spell_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                case SpellUnleveled_FieldIndex.Effects:
                    return false;
                default:
                    return Spell_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    return typeof(Spell.SpellType);
                case SpellUnleveled_FieldIndex.Cost:
                    return typeof(UInt32);
                case SpellUnleveled_FieldIndex.Level:
                    return typeof(Spell.SpellLevel);
                case SpellUnleveled_FieldIndex.Flag:
                    return typeof(Spell.SpellFlag);
                case SpellUnleveled_FieldIndex.Effects:
                    return typeof(NotifyingList<Effect>);
                default:
                    return Spell_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType SPEL_HEADER = new RecordType("SPEL");
        public static readonly RecordType SPIT_HEADER = new RecordType("SPIT");
        public static readonly RecordType EFID_HEADER = new RecordType("EFID");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SPEL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class SpellUnleveledCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ISpellUnleveled item,
            ISpellUnleveledGetter rhs,
            SpellUnleveled_CopyMask copyMask = null,
            ISpellUnleveledGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            SpellUnleveledCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ISpellUnleveled item,
            ISpellUnleveledGetter rhs,
            out SpellUnleveled_ErrorMask errorMask,
            SpellUnleveled_CopyMask copyMask = null,
            ISpellUnleveledGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            SpellUnleveledCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ISpellUnleveled item,
            ISpellUnleveledGetter rhs,
            ISpellUnleveledGetter def,
            bool doMasks,
            out SpellUnleveled_ErrorMask errorMask,
            SpellUnleveled_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            SpellUnleveled_ErrorMask retErrorMask = null;
            Func<SpellUnleveled_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new SpellUnleveled_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this ISpellUnleveled item,
            ISpellUnleveledGetter rhs,
            ISpellUnleveledGetter def,
            bool doMasks,
            Func<SpellUnleveled_ErrorMask> errorMask,
            SpellUnleveled_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            SpellCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Type ?? true)
            {
                try
                {
                    item.Type_Property.Set(
                        value: rhs.Type,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SpellUnleveled_FieldIndex.Type, ex);
                }
            }
            if (copyMask?.Cost ?? true)
            {
                try
                {
                    item.Cost_Property.Set(
                        value: rhs.Cost,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SpellUnleveled_FieldIndex.Cost, ex);
                }
            }
            if (copyMask?.Level ?? true)
            {
                try
                {
                    item.Level_Property.Set(
                        value: rhs.Level,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SpellUnleveled_FieldIndex.Level, ex);
                }
            }
            if (copyMask?.Flag ?? true)
            {
                try
                {
                    item.Flag_Property.Set(
                        value: rhs.Flag,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SpellUnleveled_FieldIndex.Flag, ex);
                }
            }
            if (copyMask?.Effects.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Effects.SetToWithDefault(
                        rhs.Effects,
                        def?.Effects,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Effects.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Effect);
                                    return Effect.Copy(
                                        r,
                                        copyMask?.Effects?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Effects.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)SpellUnleveled_FieldIndex.Effects, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ISpellUnleveled obj,
            NotifyingFireParameters? cmds = null)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case SpellUnleveled_FieldIndex.Effects:
                    obj.Effects.HasBeenSet = on;
                    break;
                default:
                    SpellCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ISpellUnleveled obj,
            NotifyingUnsetParameters? cmds = null)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    obj.Type = default(Spell.SpellType);
                    break;
                case SpellUnleveled_FieldIndex.Cost:
                    obj.Cost = default(UInt32);
                    break;
                case SpellUnleveled_FieldIndex.Level:
                    obj.Level = default(Spell.SpellLevel);
                    break;
                case SpellUnleveled_FieldIndex.Flag:
                    obj.Flag = default(Spell.SpellFlag);
                    break;
                case SpellUnleveled_FieldIndex.Effects:
                    obj.Effects.Unset(cmds);
                    break;
                default:
                    SpellCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ISpellUnleveled obj)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                    return true;
                case SpellUnleveled_FieldIndex.Effects:
                    return obj.Effects.HasBeenSet;
                default:
                    return SpellCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ISpellUnleveledGetter obj)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    return obj.Type;
                case SpellUnleveled_FieldIndex.Cost:
                    return obj.Cost;
                case SpellUnleveled_FieldIndex.Level:
                    return obj.Level;
                case SpellUnleveled_FieldIndex.Flag:
                    return obj.Flag;
                case SpellUnleveled_FieldIndex.Effects:
                    return obj.Effects;
                default:
                    return SpellCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ISpellUnleveled item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Type = default(Spell.SpellType);
            item.Cost = default(UInt32);
            item.Level = default(Spell.SpellLevel);
            item.Flag = default(Spell.SpellFlag);
            item.Effects.Unset(cmds.ToUnsetParams());
        }

        public static SpellUnleveled_Mask<bool> GetEqualsMask(
            this ISpellUnleveledGetter item,
            ISpellUnleveledGetter rhs)
        {
            var ret = new SpellUnleveled_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ISpellUnleveledGetter item,
            ISpellUnleveledGetter rhs,
            SpellUnleveled_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Type = item.Type == rhs.Type;
            ret.Cost = item.Cost == rhs.Cost;
            ret.Level = item.Level == rhs.Level;
            ret.Flag = item.Flag == rhs.Flag;
            if (item.Effects.HasBeenSet == rhs.Effects.HasBeenSet)
            {
                if (item.Effects.HasBeenSet)
                {
                    ret.Effects = new MaskItem<bool, IEnumerable<MaskItem<bool, Effect_Mask<bool>>>>();
                    ret.Effects.Specific = item.Effects.SelectAgainst<Effect, MaskItem<bool, Effect_Mask<bool>>>(rhs.Effects, ((l, r) =>
                    {
                        MaskItem<bool, Effect_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => EffectCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.Effects.Overall);
                    ret.Effects.Overall = ret.Effects.Overall && ret.Effects.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Effects = new MaskItem<bool, IEnumerable<MaskItem<bool, Effect_Mask<bool>>>>();
                    ret.Effects.Overall = true;
                }
            }
            else
            {
                ret.Effects = new MaskItem<bool, IEnumerable<MaskItem<bool, Effect_Mask<bool>>>>();
                ret.Effects.Overall = false;
            }
            SpellCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ISpellUnleveledGetter item,
            string name = null,
            SpellUnleveled_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ISpellUnleveledGetter item,
            FileGeneration fg,
            string name = null,
            SpellUnleveled_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(SpellUnleveled)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(SpellUnleveled)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {item.Type}");
                }
                if (printMask?.Cost ?? true)
                {
                    fg.AppendLine($"Cost => {item.Cost}");
                }
                if (printMask?.Level ?? true)
                {
                    fg.AppendLine($"Level => {item.Level}");
                }
                if (printMask?.Flag ?? true)
                {
                    fg.AppendLine($"Flag => {item.Flag}");
                }
                if (printMask?.Effects?.Overall ?? true)
                {
                    fg.AppendLine("Effects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Effects)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ISpellUnleveledGetter item,
            SpellUnleveled_Mask<bool?> checkMask)
        {
            if (checkMask.Effects.Overall.HasValue && checkMask.Effects.Overall.Value != item.Effects.HasBeenSet) return false;
            return true;
        }

        public static SpellUnleveled_Mask<bool> GetHasBeenSetMask(ISpellUnleveledGetter item)
        {
            var ret = new SpellUnleveled_Mask<bool>();
            ret.Type = true;
            ret.Cost = true;
            ret.Level = true;
            ret.Flag = true;
            ret.Effects = new MaskItem<bool, IEnumerable<MaskItem<bool, Effect_Mask<bool>>>>(item.Effects.HasBeenSet, item.Effects.Select((i) => new MaskItem<bool, Effect_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static SpellUnleveled_FieldIndex? ConvertFieldIndex(Spell_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static SpellUnleveled_FieldIndex ConvertFieldIndex(Spell_FieldIndex index)
        {
            switch (index)
            {
                case Spell_FieldIndex.MajorRecordFlags:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case Spell_FieldIndex.FormID:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case Spell_FieldIndex.Version:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case Spell_FieldIndex.EditorID:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case Spell_FieldIndex.RecordType:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case Spell_FieldIndex.Name:
                    return (SpellUnleveled_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static SpellUnleveled_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static SpellUnleveled_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (SpellUnleveled_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static SpellUnleveled_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static SpellUnleveled_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (SpellUnleveled_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            ISpellUnleveledGetter item,
            bool doMasks,
            out SpellUnleveled_ErrorMask errorMask,
            string name = null)
        {
            SpellUnleveled_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SpellUnleveled_ErrorMask()) : default(Func<SpellUnleveled_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            ISpellUnleveledGetter item,
            Func<SpellUnleveled_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.SpellUnleveled"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.SpellUnleveled");
                    }
                    EnumXmlTranslation<Spell.SpellType>.Instance.Write(
                        writer: writer,
                        name: nameof(item.Type),
                        item: item.Type_Property,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Type,
                        errorMask: errorMask);
                    UInt32XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Cost),
                        item: item.Cost_Property,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Cost,
                        errorMask: errorMask);
                    EnumXmlTranslation<Spell.SpellLevel>.Instance.Write(
                        writer: writer,
                        name: nameof(item.Level),
                        item: item.Level_Property,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Level,
                        errorMask: errorMask);
                    EnumXmlTranslation<Spell.SpellFlag>.Instance.Write(
                        writer: writer,
                        name: nameof(item.Flag),
                        item: item.Flag_Property,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Flag,
                        errorMask: errorMask);
                    if (item.Effects.HasBeenSet)
                    {
                        ListXmlTranslation<Effect, MaskItem<Exception, Effect_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Effects),
                            item: item.Effects,
                            fieldIndex: (int)SpellUnleveled_FieldIndex.Effects,
                            errorMask: errorMask,
                            transl: (Effect subItem, bool listDoMasks, out MaskItem<Exception, Effect_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<Effect, Effect_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            SpellUnleveled item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out SpellUnleveled_ErrorMask errorMask)
        {
            SpellUnleveled_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SpellUnleveled_ErrorMask()) : default(Func<SpellUnleveled_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            SpellUnleveled item,
            RecordTypeConverter recordTypeConverter,
            Func<SpellUnleveled_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: SpellUnleveled_Registration.SPEL_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            SpellUnleveled item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<SpellUnleveled_ErrorMask> errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            using (HeaderExport.ExportSubRecordHeader(writer, SpellUnleveled_Registration.SPIT_HEADER))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Spell.SpellType>.Instance.Write(
                    writer,
                    item.Type_Property,
                    length: new ContentLength(4),
                    fieldIndex: (int)SpellUnleveled_FieldIndex.Type,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Cost_Property,
                    fieldIndex: (int)SpellUnleveled_FieldIndex.Cost,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Spell.SpellLevel>.Instance.Write(
                    writer,
                    item.Level_Property,
                    length: new ContentLength(4),
                    fieldIndex: (int)SpellUnleveled_FieldIndex.Level,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Spell.SpellFlag>.Instance.Write(
                    writer,
                    item.Flag_Property,
                    length: new ContentLength(4),
                    fieldIndex: (int)SpellUnleveled_FieldIndex.Flag,
                    errorMask: errorMask);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<Effect, MaskItem<Exception, Effect_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Effects,
                fieldIndex: (int)SpellUnleveled_FieldIndex.Effects,
                errorMask: errorMask,
                transl: (Effect subItem, bool listDoMasks, out MaskItem<Exception, Effect_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<Effect, Effect_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class SpellUnleveled_Mask<T> : Spell_Mask<T>, IMask<T>, IEquatable<SpellUnleveled_Mask<T>>
    {
        #region Ctors
        public SpellUnleveled_Mask()
        {
        }

        public SpellUnleveled_Mask(T initialValue)
        {
            this.Type = initialValue;
            this.Cost = initialValue;
            this.Level = initialValue;
            this.Flag = initialValue;
            this.Effects = new MaskItem<T, IEnumerable<MaskItem<T, Effect_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Type;
        public T Cost;
        public T Level;
        public T Flag;
        public MaskItem<T, IEnumerable<MaskItem<T, Effect_Mask<T>>>> Effects;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is SpellUnleveled_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SpellUnleveled_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Type, rhs.Type)) return false;
            if (!object.Equals(this.Cost, rhs.Cost)) return false;
            if (!object.Equals(this.Level, rhs.Level)) return false;
            if (!object.Equals(this.Flag, rhs.Flag)) return false;
            if (!object.Equals(this.Effects, rhs.Effects)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Type?.GetHashCode());
            ret = ret.CombineHashCode(this.Cost?.GetHashCode());
            ret = ret.CombineHashCode(this.Level?.GetHashCode());
            ret = ret.CombineHashCode(this.Flag?.GetHashCode());
            ret = ret.CombineHashCode(this.Effects?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Type)) return false;
            if (!eval(this.Cost)) return false;
            if (!eval(this.Level)) return false;
            if (!eval(this.Flag)) return false;
            if (this.Effects != null)
            {
                if (!eval(this.Effects.Overall)) return false;
                if (this.Effects.Specific != null)
                {
                    foreach (var item in this.Effects.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new SpellUnleveled_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new SpellUnleveled_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(SpellUnleveled_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Type = eval(this.Type);
            obj.Cost = eval(this.Cost);
            obj.Level = eval(this.Level);
            obj.Flag = eval(this.Flag);
            if (Effects != null)
            {
                obj.Effects = new MaskItem<R, IEnumerable<MaskItem<R, Effect_Mask<R>>>>();
                obj.Effects.Overall = eval(this.Effects.Overall);
                if (Effects.Specific != null)
                {
                    List<MaskItem<R, Effect_Mask<R>>> l = new List<MaskItem<R, Effect_Mask<R>>>();
                    obj.Effects.Specific = l;
                    foreach (var item in Effects.Specific)
                    {
                        MaskItem<R, Effect_Mask<R>> mask = default(MaskItem<R, Effect_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Effect_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Effects.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(SpellUnleveled_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, SpellUnleveled_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(SpellUnleveled_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {Type}");
                }
                if (printMask?.Cost ?? true)
                {
                    fg.AppendLine($"Cost => {Cost}");
                }
                if (printMask?.Level ?? true)
                {
                    fg.AppendLine($"Level => {Level}");
                }
                if (printMask?.Flag ?? true)
                {
                    fg.AppendLine($"Flag => {Flag}");
                }
                if (printMask?.Effects?.Overall ?? true)
                {
                    fg.AppendLine("Effects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Effects.Overall != null)
                        {
                            fg.AppendLine(Effects.Overall.ToString());
                        }
                        if (Effects.Specific != null)
                        {
                            foreach (var subItem in Effects.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class SpellUnleveled_ErrorMask : Spell_ErrorMask, IErrorMask<SpellUnleveled_ErrorMask>
    {
        #region Members
        public Exception Type;
        public Exception Cost;
        public Exception Level;
        public Exception Flag;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>> Effects;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    this.Type = ex;
                    break;
                case SpellUnleveled_FieldIndex.Cost:
                    this.Cost = ex;
                    break;
                case SpellUnleveled_FieldIndex.Level:
                    this.Level = ex;
                    break;
                case SpellUnleveled_FieldIndex.Flag:
                    this.Flag = ex;
                    break;
                case SpellUnleveled_FieldIndex.Effects:
                    this.Effects = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    this.Type = (Exception)obj;
                    break;
                case SpellUnleveled_FieldIndex.Cost:
                    this.Cost = (Exception)obj;
                    break;
                case SpellUnleveled_FieldIndex.Level:
                    this.Level = (Exception)obj;
                    break;
                case SpellUnleveled_FieldIndex.Flag:
                    this.Flag = (Exception)obj;
                    break;
                case SpellUnleveled_FieldIndex.Effects:
                    this.Effects = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Type != null) return true;
            if (Cost != null) return true;
            if (Level != null) return true;
            if (Flag != null) return true;
            if (Effects != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("SpellUnleveled_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Type => {Type}");
            fg.AppendLine($"Cost => {Cost}");
            fg.AppendLine($"Level => {Level}");
            fg.AppendLine($"Flag => {Flag}");
            fg.AppendLine("Effects =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Effects.Overall != null)
                {
                    fg.AppendLine(Effects.Overall.ToString());
                }
                if (Effects.Specific != null)
                {
                    foreach (var subItem in Effects.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public SpellUnleveled_ErrorMask Combine(SpellUnleveled_ErrorMask rhs)
        {
            var ret = new SpellUnleveled_ErrorMask();
            ret.Type = this.Type.Combine(rhs.Type);
            ret.Cost = this.Cost.Combine(rhs.Cost);
            ret.Level = this.Level.Combine(rhs.Level);
            ret.Flag = this.Flag.Combine(rhs.Flag);
            ret.Effects = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>>(this.Effects.Overall.Combine(rhs.Effects.Overall), new List<MaskItem<Exception, Effect_ErrorMask>>(this.Effects.Specific.And(rhs.Effects.Specific)));
            return ret;
        }
        public static SpellUnleveled_ErrorMask Combine(SpellUnleveled_ErrorMask lhs, SpellUnleveled_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class SpellUnleveled_CopyMask : Spell_CopyMask
    {
        #region Members
        public bool Type;
        public bool Cost;
        public bool Level;
        public bool Flag;
        public MaskItem<CopyOption, Effect_CopyMask> Effects;
        #endregion

    }
    #endregion




    #endregion

}
