/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public abstract partial class Spell :
        SpellAbstract,
        ISpellInternal,
        ILoquiObjectSetter<Spell>,
        INamed,
        ILinkSubContainer,
        IEquatable<Spell>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Spell_Registration.Instance;
        public new static Spell_Registration Registration => Spell_Registration.Instance;
        protected override object CommonInstance => SpellCommon.Instance;

        #region Ctor
        protected Spell()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Spell_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Spell_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool ISpellGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String ISpellGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)Spell_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISpellInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            SpellMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Spell rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Spell rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_IsSet != rhs.Name_IsSet) return false;
            if (Name_IsSet)
            {
                if (!string.Equals(this.Name, rhs.Name)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_IsSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        protected override object XmlWriteTranslator => SpellXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static Spell CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Spell_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Spell CreateFromXml(
            XElement node,
            out Spell_ErrorMask errorMask,
            bool doMasks = true,
            Spell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Spell_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Spell CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return null;
                    break;
                default:
                    break;
            }
            Spell ret;
            if (!LoquiXmlTranslation.Instance.TryCreate(node, out ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown Spell subclass: {node.Name.LocalName}");
            }
            return ret;
        }

        public static Spell CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Spell_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Spell CreateFromXml(
            string path,
            out Spell_ErrorMask errorMask,
            Spell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Spell CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Spell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Spell CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Spell_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Spell CreateFromXml(
            Stream stream,
            out Spell_ErrorMask errorMask,
            Spell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Spell CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Spell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            Spell item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    SpellAbstract.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Spell_FieldIndex)index)
            {
                case Spell_FieldIndex.Name:
                    return _hasBeenSetTracker[index];
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
        }

        public Spell(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Spell(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => SpellBinaryWriteTranslation.Instance;
        protected static TryGet<int?> FillBinaryRecordTypes(
            Spell item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Spell_FieldIndex.Name);
                }
                default:
                    return SpellAbstract.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Spell Copy(
            Spell_CopyMask copyMask = null,
            Spell def = null)
        {
            return Spell.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Spell Copy(
            Spell item,
            Spell_CopyMask copyMask = null,
            Spell def = null)
        {
            Spell ret = (Spell)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Spell Copy_ToLoqui(
            Spell item,
            Spell_CopyMask copyMask = null,
            Spell def = null)
        {
            Spell ret = (Spell)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            Spell rhs,
            Spell_CopyMask copyMask,
            Spell def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            Spell rhs,
            out Spell_ErrorMask errorMask,
            Spell_CopyMask copyMask = null,
            Spell def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SpellCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Spell_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            Spell rhs,
            ErrorMaskBuilder errorMask,
            Spell_CopyMask copyMask = null,
            Spell def = null)
        {
            SpellCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Spell_FieldIndex enu = (Spell_FieldIndex)index;
            switch (enu)
            {
                case Spell_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            SpellCommon.Instance.Clear(this);
        }

        protected new static void CopyInInternal_Spell(Spell obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Spell_FieldIndex enu))
            {
                CopyInInternal_SpellAbstract(obj, pair);
            }
            switch (enu)
            {
                case Spell_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ISpell :
        ISpellInternalGetter,
        ISpellAbstract,
        ILoquiObjectSetter<ISpellInternal>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        void CopyFieldsFrom(
            Spell rhs,
            ErrorMaskBuilder errorMask = null,
            Spell_CopyMask copyMask = null,
            Spell def = null);
    }

    public partial interface ISpellInternal :
        ISpellAbstractInternal,
        ISpell,
        ISpellInternalGetter
    {
    }

    public partial interface ISpellGetter :
        ISpellAbstractGetter,
        ILoquiObject<ISpellInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion

    }

    public partial interface ISpellInternalGetter :
        ISpellAbstractInternalGetter,
        ISpellGetter
    {

    }

    #endregion

    #region Common MixIn
    public static class SpellMixIn
    {
        public static void Clear(this ISpellInternal item)
        {
            ((SpellCommon)item.CommonInstance).Clear(item: item);
        }

        public static Spell_Mask<bool> GetEqualsMask(
            this ISpellInternalGetter item,
            ISpellInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SpellCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISpellInternalGetter item,
            string name = null,
            Spell_Mask<bool> printMask = null)
        {
            return ((SpellCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISpellInternalGetter item,
            FileGeneration fg,
            string name = null,
            Spell_Mask<bool> printMask = null)
        {
            ((SpellCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISpellInternalGetter item,
            Spell_Mask<bool?> checkMask)
        {
            return ((SpellCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Spell_Mask<bool> GetHasBeenSetMask(this ISpellInternalGetter item)
        {
            var ret = new Spell_Mask<bool>();
            ((SpellCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Spell_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
    }
    #endregion

    #region Registration
    public class Spell_Registration : ILoquiRegistration
    {
        public static readonly Spell_Registration Instance = new Spell_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 63,
            version: 0);

        public const string GUID = "44825ec2-b86b-4bd0-9d30-06761a7db25c";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(Spell_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Spell_ErrorMask);

        public static readonly Type ClassType = typeof(Spell);

        public static readonly Type GetterType = typeof(ISpellGetter);

        public static readonly Type InternalGetterType = typeof(ISpellInternalGetter);

        public static readonly Type SetterType = typeof(ISpell);

        public static readonly Type InternalSetterType = typeof(ISpellInternal);

        public static readonly Type CommonType = typeof(SpellCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Spell";

        public const string Name = "Spell";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Spell_FieldIndex.Name;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Spell_FieldIndex enu = (Spell_FieldIndex)index;
            switch (enu)
            {
                case Spell_FieldIndex.Name:
                    return false;
                default:
                    return SpellAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Spell_FieldIndex enu = (Spell_FieldIndex)index;
            switch (enu)
            {
                case Spell_FieldIndex.Name:
                    return false;
                default:
                    return SpellAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Spell_FieldIndex enu = (Spell_FieldIndex)index;
            switch (enu)
            {
                case Spell_FieldIndex.Name:
                    return false;
                default:
                    return SpellAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Spell_FieldIndex enu = (Spell_FieldIndex)index;
            switch (enu)
            {
                case Spell_FieldIndex.Name:
                    return "Name";
                default:
                    return SpellAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Spell_FieldIndex enu = (Spell_FieldIndex)index;
            switch (enu)
            {
                case Spell_FieldIndex.Name:
                    return false;
                default:
                    return SpellAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Spell_FieldIndex enu = (Spell_FieldIndex)index;
            switch (enu)
            {
                case Spell_FieldIndex.Name:
                    return false;
                default:
                    return SpellAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Spell_FieldIndex enu = (Spell_FieldIndex)index;
            switch (enu)
            {
                case Spell_FieldIndex.Name:
                    return typeof(String);
                default:
                    return SpellAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SpellXmlWriteTranslation);
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType LVSP_HEADER = new RecordType("LVSP");
        public static readonly RecordType SPEL_HEADER = new RecordType("SPEL");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        FULL_HEADER,
                        LVSP_HEADER,
                        SPEL_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(SpellBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SpellCommon : SpellAbstractCommon
    {
        public static readonly SpellCommon Instance = new SpellCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Spell item,
            Spell rhs,
            Spell def,
            ErrorMaskBuilder errorMask,
            Spell_CopyMask copyMask)
        {
            SpellAbstractCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Spell_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(ISpellInternal item)
        {
            ClearPartial();
            item.Name_Unset();
            base.Clear(item);
        }

        public override void Clear(ISpellAbstractInternal item)
        {
            Clear(item: (ISpellInternal)item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ISpellInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISpellInternal)item);
        }

        public Spell_Mask<bool> GetEqualsMask(
            ISpellInternalGetter item,
            ISpellInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Spell_Mask<bool>();
            ((SpellCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            ISpellInternalGetter item,
            ISpellInternalGetter rhs,
            Spell_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            ISpellInternalGetter item,
            string name = null,
            Spell_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            ISpellInternalGetter item,
            FileGeneration fg,
            string name = null,
            Spell_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Spell =>");
            }
            else
            {
                fg.AppendLine($"{name} (Spell) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            ISpellInternalGetter item,
            FileGeneration fg,
            Spell_Mask<bool> printMask = null)
        {
            SpellAbstractCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
        }

        public bool HasBeenSet(
            ISpellInternalGetter item,
            Spell_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            ISpellInternalGetter item,
            Spell_Mask<bool> mask)
        {
            mask.Name = item.Name_IsSet;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static Spell_FieldIndex ConvertFieldIndex(SpellAbstract_FieldIndex index)
        {
            switch (index)
            {
                case SpellAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (Spell_FieldIndex)((int)index);
                case SpellAbstract_FieldIndex.FormKey:
                    return (Spell_FieldIndex)((int)index);
                case SpellAbstract_FieldIndex.Version:
                    return (Spell_FieldIndex)((int)index);
                case SpellAbstract_FieldIndex.EditorID:
                    return (Spell_FieldIndex)((int)index);
                case SpellAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (Spell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Spell_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Spell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Spell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Spell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Spell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Spell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Spell_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Spell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Spell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Spell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Spell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class SpellXmlWriteTranslation :
        SpellAbstractXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static SpellXmlWriteTranslation Instance = new SpellXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISpellInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            SpellAbstractXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Spell_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Spell_FieldIndex.Name,
                    errorMask: errorMask);
            }
        }

        public virtual void Write(
            XElement node,
            ISpellInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Spell");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Spell");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISpellInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISpellAbstractInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISpellInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISpellInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISpellInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class SpellXmlCreateTranslation : SpellAbstractXmlCreateTranslation
    {
        public new readonly static SpellXmlCreateTranslation Instance = new SpellXmlCreateTranslation();

        public static void FillPublicXml(
            ISpellInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SpellXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISpellInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Spell_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SpellAbstractXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class SpellXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISpellInternalGetter item,
            XElement node,
            out Spell_ErrorMask errorMask,
            bool doMasks = true,
            Spell_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SpellXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Spell_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISpellInternalGetter item,
            string path,
            out Spell_ErrorMask errorMask,
            Spell_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISpellInternalGetter item,
            Stream stream,
            out Spell_ErrorMask errorMask,
            Spell_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class Spell_Mask<T> : SpellAbstract_Mask<T>, IMask<T>, IEquatable<Spell_Mask<T>>
    {
        #region Ctors
        public Spell_Mask()
        {
        }

        public Spell_Mask(T initialValue)
        {
            this.Name = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Spell_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Spell_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Spell_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Spell_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Spell_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Spell_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Spell_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Spell_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Spell_ErrorMask : SpellAbstract_ErrorMask, IErrorMask<Spell_ErrorMask>
    {
        #region Members
        public Exception Name;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Spell_FieldIndex enu = (Spell_FieldIndex)index;
            switch (enu)
            {
                case Spell_FieldIndex.Name:
                    return Name;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Spell_FieldIndex enu = (Spell_FieldIndex)index;
            switch (enu)
            {
                case Spell_FieldIndex.Name:
                    this.Name = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Spell_FieldIndex enu = (Spell_FieldIndex)index;
            switch (enu)
            {
                case Spell_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Spell_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
        }
        #endregion

        #region Combine
        public Spell_ErrorMask Combine(Spell_ErrorMask rhs)
        {
            var ret = new Spell_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            return ret;
        }
        public static Spell_ErrorMask Combine(Spell_ErrorMask lhs, Spell_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Spell_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Spell_ErrorMask();
        }
        #endregion

    }
    public class Spell_CopyMask : SpellAbstract_CopyMask
    {
        public Spell_CopyMask()
        {
        }

        public Spell_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Name = defaultOn;
        }

        #region Members
        public bool Name;
        #endregion

    }

    public class Spell_TranslationMask : SpellAbstract_TranslationMask
    {
        #region Members
        public bool Name;
        #endregion

        #region Ctors
        public Spell_TranslationMask()
            : base()
        {
        }

        public Spell_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class SpellBinaryWriteTranslation :
        SpellAbstractBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static SpellBinaryWriteTranslation Instance = new SpellBinaryWriteTranslation();

        public static void Write_RecordTypes(
            ISpellInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(Spell_Registration.FULL_HEADER),
                    nullable: false);
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            ISpellInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ISpellInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            ISpellAbstractInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ISpellInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ISpellInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ISpellInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class SpellBinaryCreateTranslation : SpellAbstractBinaryCreateTranslation
    {
        public new readonly static SpellBinaryCreateTranslation Instance = new SpellBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class SpellBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISpellInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Spell_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SpellBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Spell_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    #endregion

    #endregion

}
