/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Subspace : MajorRecord, ISubspace, ILoquiObject<Subspace>, ILoquiObjectSetter, IEquatable<Subspace>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Subspace_Registration.Instance;
        public new static Subspace_Registration Registration => Subspace_Registration.Instance;

        #region Ctor
        public Subspace()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region X
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _X = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> X_Property => _X;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single X
        {
            get => this._X.Item;
            set => this._X.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ISubspace.X_Property => this.X_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ISubspaceGetter.X_Property => this.X_Property;
        #endregion
        #region Y
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _Y = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> Y_Property => _Y;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Y
        {
            get => this._Y.Item;
            set => this._Y.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ISubspace.Y_Property => this.Y_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ISubspaceGetter.Y_Property => this.Y_Property;
        #endregion
        #region Z
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _Z = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> Z_Property => _Z;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Z
        {
            get => this._Z.Item;
            set => this._Z.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ISubspace.Z_Property => this.Z_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ISubspaceGetter.Z_Property => this.Z_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => SubspaceCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => SubspaceCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => SubspaceCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            SubspaceCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Subspace>.GetEqualsMask(Subspace rhs) => SubspaceCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ISubspaceGetter>.GetEqualsMask(ISubspaceGetter rhs) => SubspaceCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return SubspaceCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Subspace_Mask<bool> printMask = null)
        {
            return SubspaceCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            SubspaceCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Subspace_Mask<bool> GetHasBeenSetMask()
        {
            return SubspaceCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Subspace rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Subspace rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (X != rhs.X) return false;
            if (Y != rhs.Y) return false;
            if (Z != rhs.Z) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(X).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Y).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Z).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Subspace Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Subspace Create_XML(
            XElement root,
            out Subspace_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Subspace Create_XML(
            XElement root,
            bool doMasks,
            out Subspace_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Subspace Object, Subspace_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Subspace_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Subspace_ErrorMask()) : default(Func<Subspace_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Subspace Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Subspace Create_XML(
            string path,
            out Subspace_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Subspace Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Subspace Create_XML(
            Stream stream,
            out Subspace_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Subspace_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Subspace_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Subspace_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Subspace_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            SubspaceCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                writer: writer,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Subspace Create_XML_Internal(
            XElement root,
            Func<Subspace_ErrorMask> errorMask)
        {
            var ret = new Subspace();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Subspace item,
            XElement root,
            string name,
            Func<Subspace_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "X":
                    item._X.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Subspace_FieldIndex.X,
                        errorMask: errorMask));
                    break;
                case "Y":
                    item._Y.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Subspace_FieldIndex.Y,
                        errorMask: errorMask));
                    break;
                case "Z":
                    item._Z.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Subspace_FieldIndex.Z,
                        errorMask: errorMask));
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Subspace_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Subspace Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Subspace Create_Binary(
            MutagenFrame frame,
            out Subspace_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Subspace Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Subspace_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Subspace Object, Subspace_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Subspace_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Subspace_ErrorMask()) : default(Func<Subspace_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Subspace Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Subspace Create_Binary(
            string path,
            out Subspace_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Subspace Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Subspace Create_Binary(
            Stream stream,
            out Subspace_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Subspace_ErrorMask errorMask)
        {
            errorMask = (Subspace_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Subspace_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Subspace_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            SubspaceCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Subspace Create_Binary_Internal(
            MutagenFrame frame,
            Func<Subspace_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return UtilityTranslation.MajorRecordParse<Subspace, Subspace_ErrorMask, Subspace_FieldIndex>(
                record: new Subspace(),
                frame: frame,
                errorMask: errorMask,
                recType: Subspace_Registration.SBSP_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            Subspace item,
            MutagenFrame frame,
            Func<Subspace_ErrorMask> errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<Subspace_FieldIndex?> Fill_Binary_RecordTypes(
            Subspace item,
            MutagenFrame frame,
            Func<Subspace_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "DNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        item._X.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Subspace_FieldIndex.X,
                            errorMask: errorMask));
                        item._Y.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Subspace_FieldIndex.Y,
                            errorMask: errorMask));
                        item._Z.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Subspace_FieldIndex.Z,
                            errorMask: errorMask));
                    }
                    return TryGet<Subspace_FieldIndex?>.Succeed(Subspace_FieldIndex.Z);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => SubspaceCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public Subspace Copy(
            Subspace_CopyMask copyMask = null,
            ISubspaceGetter def = null)
        {
            return Subspace.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Subspace Copy(
            ISubspace item,
            Subspace_CopyMask copyMask = null,
            ISubspaceGetter def = null)
        {
            Subspace ret;
            if (item.GetType().Equals(typeof(Subspace)))
            {
                ret = new Subspace();
            }
            else
            {
                ret = (Subspace)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Subspace Copy_ToLoqui(
            ISubspaceGetter item,
            Subspace_CopyMask copyMask = null,
            ISubspaceGetter def = null)
        {
            Subspace ret;
            if (item.GetType().Equals(typeof(Subspace)))
            {
                ret = new Subspace() as Subspace;
            }
            else
            {
                ret = (Subspace)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ISubspaceGetter rhs,
            Subspace_CopyMask copyMask,
            ISubspaceGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ISubspaceGetter rhs,
            out Subspace_ErrorMask errorMask,
            Subspace_CopyMask copyMask = null,
            ISubspaceGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            Subspace_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Subspace_ErrorMask();
                }
                return retErrorMask;
            };
            SubspaceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                    this._X.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Subspace_FieldIndex.Y:
                    this._Y.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Subspace_FieldIndex.Z:
                    this._Z.Set(
                        (Single)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            SubspaceCommon.Clear(this, cmds);
        }


        public new static Subspace Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Subspace();
            foreach (var pair in fields)
            {
                CopyInInternal_Subspace(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Subspace(Subspace obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Subspace_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                    obj._X.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Subspace_FieldIndex.Y:
                    obj._Y.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Subspace_FieldIndex.Z:
                    obj._Z.Set(
                        (Single)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Subspace obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ISubspace : ISubspaceGetter, IMajorRecord, ILoquiClass<ISubspace, ISubspaceGetter>, ILoquiClass<Subspace, ISubspaceGetter>
    {
        new Single X { get; set; }
        new INotifyingItem<Single> X_Property { get; }

        new Single Y { get; set; }
        new INotifyingItem<Single> Y_Property { get; }

        new Single Z { get; set; }
        new INotifyingItem<Single> Z_Property { get; }

    }

    public partial interface ISubspaceGetter : IMajorRecordGetter
    {
        #region X
        Single X { get; }
        INotifyingItemGetter<Single> X_Property { get; }

        #endregion
        #region Y
        Single Y { get; }
        INotifyingItemGetter<Single> Y_Property { get; }

        #endregion
        #region Z
        Single Z { get; }
        INotifyingItemGetter<Single> Z_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Subspace_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        X = 5,
        Y = 6,
        Z = 7,
    }
    #endregion

    #region Registration
    public class Subspace_Registration : ILoquiRegistration
    {
        public static readonly Subspace_Registration Instance = new Subspace_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 99,
            version: 0);

        public const string GUID = "138316d3-f53c-491f-ad98-a9732f8547af";

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Subspace_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Subspace_ErrorMask);

        public static readonly Type ClassType = typeof(Subspace);

        public static readonly Type GetterType = typeof(ISubspaceGetter);

        public static readonly Type SetterType = typeof(ISubspace);

        public static readonly Type CommonType = typeof(SubspaceCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Subspace";

        public const string Name = "Subspace";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "X":
                    return (ushort)Subspace_FieldIndex.X;
                case "Y":
                    return (ushort)Subspace_FieldIndex.Y;
                case "Z":
                    return (ushort)Subspace_FieldIndex.Z;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                case Subspace_FieldIndex.Y:
                case Subspace_FieldIndex.Z:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                case Subspace_FieldIndex.Y:
                case Subspace_FieldIndex.Z:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                case Subspace_FieldIndex.Y:
                case Subspace_FieldIndex.Z:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                    return "X";
                case Subspace_FieldIndex.Y:
                    return "Y";
                case Subspace_FieldIndex.Z:
                    return "Z";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                case Subspace_FieldIndex.Y:
                case Subspace_FieldIndex.Z:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                case Subspace_FieldIndex.Y:
                case Subspace_FieldIndex.Z:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                    return typeof(Single);
                case Subspace_FieldIndex.Y:
                    return typeof(Single);
                case Subspace_FieldIndex.Z:
                    return typeof(Single);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType SBSP_HEADER = new RecordType("SBSP");
        public static readonly RecordType DNAM_HEADER = new RecordType("DNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SBSP_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class SubspaceCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ISubspace item,
            ISubspaceGetter rhs,
            ISubspaceGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            Subspace_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.X ?? true)
            {
                try
                {
                    item.X_Property.Set(
                        value: rhs.X,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Subspace_FieldIndex.X, ex);
                }
            }
            if (copyMask?.Y ?? true)
            {
                try
                {
                    item.Y_Property.Set(
                        value: rhs.Y,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Subspace_FieldIndex.Y, ex);
                }
            }
            if (copyMask?.Z ?? true)
            {
                try
                {
                    item.Z_Property.Set(
                        value: rhs.Z,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Subspace_FieldIndex.Z, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ISubspace obj,
            NotifyingFireParameters cmds = null)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                case Subspace_FieldIndex.Y:
                case Subspace_FieldIndex.Z:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ISubspace obj,
            NotifyingUnsetParameters cmds = null)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                    obj.X = default(Single);
                    break;
                case Subspace_FieldIndex.Y:
                    obj.Y = default(Single);
                    break;
                case Subspace_FieldIndex.Z:
                    obj.Z = default(Single);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ISubspace obj)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                case Subspace_FieldIndex.Y:
                case Subspace_FieldIndex.Z:
                    return true;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ISubspaceGetter obj)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                    return obj.X;
                case Subspace_FieldIndex.Y:
                    return obj.Y;
                case Subspace_FieldIndex.Z:
                    return obj.Z;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ISubspace item,
            NotifyingUnsetParameters cmds = null)
        {
            item.X = default(Single);
            item.Y = default(Single);
            item.Z = default(Single);
        }

        public static Subspace_Mask<bool> GetEqualsMask(
            this ISubspaceGetter item,
            ISubspaceGetter rhs)
        {
            var ret = new Subspace_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ISubspaceGetter item,
            ISubspaceGetter rhs,
            Subspace_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.X = item.X == rhs.X;
            ret.Y = item.Y == rhs.Y;
            ret.Z = item.Z == rhs.Z;
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ISubspaceGetter item,
            string name = null,
            Subspace_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ISubspaceGetter item,
            FileGeneration fg,
            string name = null,
            Subspace_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Subspace)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Subspace)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.X ?? true)
                {
                    fg.AppendLine($"X => {item.X}");
                }
                if (printMask?.Y ?? true)
                {
                    fg.AppendLine($"Y => {item.Y}");
                }
                if (printMask?.Z ?? true)
                {
                    fg.AppendLine($"Z => {item.Z}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ISubspaceGetter item,
            Subspace_Mask<bool?> checkMask)
        {
            return true;
        }

        public static Subspace_Mask<bool> GetHasBeenSetMask(ISubspaceGetter item)
        {
            var ret = new Subspace_Mask<bool>();
            ret.X = true;
            ret.Y = true;
            ret.Z = true;
            return ret;
        }

        public static Subspace_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Subspace_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Subspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Subspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Subspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Subspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Subspace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            ISubspaceGetter item,
            bool doMasks,
            out Subspace_ErrorMask errorMask,
            string name = null)
        {
            Subspace_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Subspace_ErrorMask()) : default(Func<Subspace_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            ISubspaceGetter item,
            Func<Subspace_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.Subspace"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.Subspace");
                    }
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.X),
                        item: item.X_Property,
                        fieldIndex: (int)Subspace_FieldIndex.X,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Y),
                        item: item.Y_Property,
                        fieldIndex: (int)Subspace_FieldIndex.Y,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Z),
                        item: item.Z_Property,
                        fieldIndex: (int)Subspace_FieldIndex.Z,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Subspace item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Subspace_ErrorMask errorMask)
        {
            Subspace_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Subspace_ErrorMask()) : default(Func<Subspace_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            Subspace item,
            RecordTypeConverter recordTypeConverter,
            Func<Subspace_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Subspace_Registration.SBSP_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Subspace item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Subspace_ErrorMask> errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            using (HeaderExport.ExportSubRecordHeader(writer, Subspace_Registration.DNAM_HEADER))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.X_Property,
                    fieldIndex: (int)Subspace_FieldIndex.X,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Y_Property,
                    fieldIndex: (int)Subspace_FieldIndex.Y,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Z_Property,
                    fieldIndex: (int)Subspace_FieldIndex.Z,
                    errorMask: errorMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Subspace_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Subspace_Mask<T>>
    {
        #region Ctors
        public Subspace_Mask()
        {
        }

        public Subspace_Mask(T initialValue)
        {
            this.X = initialValue;
            this.Y = initialValue;
            this.Z = initialValue;
        }
        #endregion

        #region Members
        public T X;
        public T Y;
        public T Z;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Subspace_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Subspace_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.X, rhs.X)) return false;
            if (!object.Equals(this.Y, rhs.Y)) return false;
            if (!object.Equals(this.Z, rhs.Z)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.X?.GetHashCode());
            ret = ret.CombineHashCode(this.Y?.GetHashCode());
            ret = ret.CombineHashCode(this.Z?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.X)) return false;
            if (!eval(this.Y)) return false;
            if (!eval(this.Z)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Subspace_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Subspace_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Subspace_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.X = eval(this.X);
            obj.Y = eval(this.Y);
            obj.Z = eval(this.Z);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Subspace_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Subspace_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Subspace_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.X ?? true)
                {
                    fg.AppendLine($"X => {X}");
                }
                if (printMask?.Y ?? true)
                {
                    fg.AppendLine($"Y => {Y}");
                }
                if (printMask?.Z ?? true)
                {
                    fg.AppendLine($"Z => {Z}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Subspace_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Subspace_ErrorMask>
    {
        #region Members
        public Exception X;
        public Exception Y;
        public Exception Z;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                    this.X = ex;
                    break;
                case Subspace_FieldIndex.Y:
                    this.Y = ex;
                    break;
                case Subspace_FieldIndex.Z:
                    this.Z = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                    this.X = (Exception)obj;
                    break;
                case Subspace_FieldIndex.Y:
                    this.Y = (Exception)obj;
                    break;
                case Subspace_FieldIndex.Z:
                    this.Z = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (X != null) return true;
            if (Y != null) return true;
            if (Z != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Subspace_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"X => {X}");
            fg.AppendLine($"Y => {Y}");
            fg.AppendLine($"Z => {Z}");
        }
        #endregion

        #region Combine
        public Subspace_ErrorMask Combine(Subspace_ErrorMask rhs)
        {
            var ret = new Subspace_ErrorMask();
            ret.X = this.X.Combine(rhs.X);
            ret.Y = this.Y.Combine(rhs.Y);
            ret.Z = this.Z.Combine(rhs.Z);
            return ret;
        }
        public static Subspace_ErrorMask Combine(Subspace_ErrorMask lhs, Subspace_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Subspace_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool X;
        public bool Y;
        public bool Z;
        #endregion

    }
    #endregion




    #endregion

}
