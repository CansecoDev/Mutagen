/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Subspace :
        OblivionMajorRecord,
        ISubspaceInternal,
        ILoquiObjectSetter<Subspace>,
        IEquatable<Subspace>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Subspace_Registration.Instance;
        public new static Subspace_Registration Registration => Subspace_Registration.Instance;
        protected override object CommonInstance => SubspaceCommon.Instance;

        #region Ctor
        protected Subspace()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region X
        private Single _X;
        public Single X
        {
            get => this._X;
            set
            {
                this.DNAMDataTypeState |= DNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._X, value, nameof(X));
            }
        }
        #endregion
        #region Y
        private Single _Y;
        public Single Y
        {
            get => this._Y;
            set
            {
                this.DNAMDataTypeState |= DNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Y, value, nameof(Y));
            }
        }
        #endregion
        #region Z
        private Single _Z;
        public Single Z
        {
            get => this._Z;
            set
            {
                this.DNAMDataTypeState |= DNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Z, value, nameof(Z));
            }
        }
        #endregion
        #region DNAMDataTypeState
        private Subspace.DNAMDataType _DNAMDataTypeState;
        public Subspace.DNAMDataType DNAMDataTypeState
        {
            get => this._DNAMDataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._DNAMDataTypeState, value, nameof(DNAMDataTypeState));
        }
        Subspace.DNAMDataType ISubspaceInternal.DNAMDataTypeState
        {
            get => this.DNAMDataTypeState;
            set => this.DNAMDataTypeState = value;
        }
        Subspace.DNAMDataType ISubspaceInternalGetter.DNAMDataTypeState
        {
            get => this.DNAMDataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISubspaceInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            SubspaceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Subspace rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Subspace rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!this.X.EqualsWithin(rhs.X)) return false;
            if (!this.Y.EqualsWithin(rhs.Y)) return false;
            if (!this.Z.EqualsWithin(rhs.Z)) return false;
            if (this.DNAMDataTypeState != rhs.DNAMDataTypeState) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(X).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Y).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Z).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DNAMDataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        protected override object XmlWriteTranslator => SubspaceXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static Subspace CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Subspace_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Subspace CreateFromXml(
            XElement node,
            out Subspace_ErrorMask errorMask,
            bool doMasks = true,
            Subspace_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Subspace_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Subspace CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Subspace() : null;
                    break;
                default:
                    break;
            }
            var ret = new Subspace();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    SubspaceXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Subspace CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Subspace_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Subspace CreateFromXml(
            string path,
            out Subspace_ErrorMask errorMask,
            Subspace_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Subspace CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Subspace_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Subspace CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Subspace_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Subspace CreateFromXml(
            Stream stream,
            out Subspace_ErrorMask errorMask,
            Subspace_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Subspace CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Subspace_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            Subspace item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasDNAMDataType":
                    item.DNAMDataTypeState |= Subspace.DNAMDataType.Has;
                    break;
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Subspace_FieldIndex)index)
            {
                case Subspace_FieldIndex.X:
                case Subspace_FieldIndex.Y:
                case Subspace_FieldIndex.Z:
                case Subspace_FieldIndex.DNAMDataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Subspace_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DNAMDataType
        {
            Has = 1
        }
        public Subspace(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Subspace(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        partial void PostDuplicate(Subspace obj, Subspace rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Subspace(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => SubspaceBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static Subspace CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Subspace CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Subspace_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Subspace_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Subspace CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Subspace>(
                record: new Subspace(),
                frame: frame,
                errorMask: errorMask,
                recType: Subspace_Registration.SBSP_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            Subspace item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            Subspace item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4D414E44: // DNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DNAMDataTypeState = DNAMDataType.Has;
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single XParse))
                    {
                        item.X = XParse;
                    }
                    else
                    {
                        item.X = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single YParse))
                    {
                        item.Y = YParse;
                    }
                    else
                    {
                        item.Y = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single ZParse))
                    {
                        item.Z = ZParse;
                    }
                    else
                    {
                        item.Z = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)Subspace_FieldIndex.Z);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Subspace Copy(
            Subspace_CopyMask copyMask = null,
            Subspace def = null)
        {
            return Subspace.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Subspace Copy(
            Subspace item,
            Subspace_CopyMask copyMask = null,
            Subspace def = null)
        {
            Subspace ret;
            if (item.GetType().Equals(typeof(Subspace)))
            {
                ret = new Subspace();
            }
            else
            {
                ret = (Subspace)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Subspace Copy_ToLoqui(
            Subspace item,
            Subspace_CopyMask copyMask = null,
            Subspace def = null)
        {
            Subspace ret;
            if (item.GetType().Equals(typeof(Subspace)))
            {
                ret = new Subspace() as Subspace;
            }
            else
            {
                ret = (Subspace)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            Subspace rhs,
            Subspace_CopyMask copyMask,
            Subspace def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            Subspace rhs,
            out Subspace_ErrorMask errorMask,
            Subspace_CopyMask copyMask = null,
            Subspace def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SubspaceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Subspace_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            Subspace rhs,
            ErrorMaskBuilder errorMask,
            Subspace_CopyMask copyMask = null,
            Subspace def = null)
        {
            SubspaceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                    this.X = (Single)obj;
                    break;
                case Subspace_FieldIndex.Y:
                    this.Y = (Single)obj;
                    break;
                case Subspace_FieldIndex.Z:
                    this.Z = (Single)obj;
                    break;
                case Subspace_FieldIndex.DNAMDataTypeState:
                    this.DNAMDataTypeState = (Subspace.DNAMDataType)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            SubspaceCommon.Instance.Clear(this);
        }

        public new static Subspace Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Subspace();
            foreach (var pair in fields)
            {
                CopyInInternal_Subspace(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Subspace(Subspace obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Subspace_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                    obj.X = (Single)pair.Value;
                    break;
                case Subspace_FieldIndex.Y:
                    obj.Y = (Single)pair.Value;
                    break;
                case Subspace_FieldIndex.Z:
                    obj.Z = (Single)pair.Value;
                    break;
                case Subspace_FieldIndex.DNAMDataTypeState:
                    obj.DNAMDataTypeState = (Subspace.DNAMDataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ISubspace :
        ISubspaceGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<ISubspaceInternal>
    {
        new Single X { get; set; }

        new Single Y { get; set; }

        new Single Z { get; set; }

        void CopyFieldsFrom(
            Subspace rhs,
            ErrorMaskBuilder errorMask = null,
            Subspace_CopyMask copyMask = null,
            Subspace def = null);
    }

    public partial interface ISubspaceInternal :
        IOblivionMajorRecordInternal,
        ISubspace,
        ISubspaceInternalGetter
    {
        new Subspace.DNAMDataType DNAMDataTypeState { get; set; }

    }

    public partial interface ISubspaceGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<ISubspaceInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region X
        Single X { get; }

        #endregion
        #region Y
        Single Y { get; }

        #endregion
        #region Z
        Single Z { get; }

        #endregion

    }

    public partial interface ISubspaceInternalGetter :
        IOblivionMajorRecordInternalGetter,
        ISubspaceGetter
    {
        #region DNAMDataTypeState
        Subspace.DNAMDataType DNAMDataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class SubspaceMixIn
    {
        public static void Clear(this ISubspaceInternal item)
        {
            ((SubspaceCommon)item.CommonInstance).Clear(item: item);
        }

        public static Subspace_Mask<bool> GetEqualsMask(
            this ISubspaceInternalGetter item,
            ISubspaceInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SubspaceCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISubspaceInternalGetter item,
            string name = null,
            Subspace_Mask<bool> printMask = null)
        {
            return ((SubspaceCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISubspaceInternalGetter item,
            FileGeneration fg,
            string name = null,
            Subspace_Mask<bool> printMask = null)
        {
            ((SubspaceCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISubspaceInternalGetter item,
            Subspace_Mask<bool?> checkMask)
        {
            return ((SubspaceCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Subspace_Mask<bool> GetHasBeenSetMask(this ISubspaceInternalGetter item)
        {
            var ret = new Subspace_Mask<bool>();
            ((SubspaceCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Subspace_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        X = 5,
        Y = 6,
        Z = 7,
        DNAMDataTypeState = 8,
    }
    #endregion

    #region Registration
    public class Subspace_Registration : ILoquiRegistration
    {
        public static readonly Subspace_Registration Instance = new Subspace_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 99,
            version: 0);

        public const string GUID = "138316d3-f53c-491f-ad98-a9732f8547af";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(Subspace_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Subspace_ErrorMask);

        public static readonly Type ClassType = typeof(Subspace);

        public static readonly Type GetterType = typeof(ISubspaceGetter);

        public static readonly Type InternalGetterType = typeof(ISubspaceInternalGetter);

        public static readonly Type SetterType = typeof(ISubspace);

        public static readonly Type InternalSetterType = typeof(ISubspaceInternal);

        public static readonly Type CommonType = typeof(SubspaceCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Subspace";

        public const string Name = "Subspace";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "X":
                    return (ushort)Subspace_FieldIndex.X;
                case "Y":
                    return (ushort)Subspace_FieldIndex.Y;
                case "Z":
                    return (ushort)Subspace_FieldIndex.Z;
                case "DNAMDATATYPESTATE":
                    return (ushort)Subspace_FieldIndex.DNAMDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                case Subspace_FieldIndex.Y:
                case Subspace_FieldIndex.Z:
                case Subspace_FieldIndex.DNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                case Subspace_FieldIndex.Y:
                case Subspace_FieldIndex.Z:
                case Subspace_FieldIndex.DNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                case Subspace_FieldIndex.Y:
                case Subspace_FieldIndex.Z:
                case Subspace_FieldIndex.DNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                    return "X";
                case Subspace_FieldIndex.Y:
                    return "Y";
                case Subspace_FieldIndex.Z:
                    return "Z";
                case Subspace_FieldIndex.DNAMDataTypeState:
                    return "DNAMDataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                case Subspace_FieldIndex.Y:
                case Subspace_FieldIndex.Z:
                case Subspace_FieldIndex.DNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                case Subspace_FieldIndex.Y:
                case Subspace_FieldIndex.Z:
                case Subspace_FieldIndex.DNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                    return typeof(Single);
                case Subspace_FieldIndex.Y:
                    return typeof(Single);
                case Subspace_FieldIndex.Z:
                    return typeof(Single);
                case Subspace_FieldIndex.DNAMDataTypeState:
                    return typeof(Subspace.DNAMDataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SubspaceXmlWriteTranslation);
        public static readonly RecordType SBSP_HEADER = new RecordType("SBSP");
        public static readonly RecordType DNAM_HEADER = new RecordType("DNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SBSP_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(SubspaceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SubspaceCommon : OblivionMajorRecordCommon
    {
        public static readonly SubspaceCommon Instance = new SubspaceCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Subspace item,
            Subspace rhs,
            Subspace def,
            ErrorMaskBuilder errorMask,
            Subspace_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.X ?? true)
            {
                errorMask?.PushIndex((int)Subspace_FieldIndex.X);
                try
                {
                    item.X = rhs.X;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Y ?? true)
            {
                errorMask?.PushIndex((int)Subspace_FieldIndex.Y);
                try
                {
                    item.Y = rhs.Y;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Z ?? true)
            {
                errorMask?.PushIndex((int)Subspace_FieldIndex.Z);
                try
                {
                    item.Z = rhs.Z;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(ISubspaceInternal item)
        {
            ClearPartial();
            item.X = default(Single);
            item.Y = default(Single);
            item.Z = default(Single);
            base.Clear(item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ISubspaceInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISubspaceInternal)item);
        }

        public Subspace_Mask<bool> GetEqualsMask(
            ISubspaceInternalGetter item,
            ISubspaceInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Subspace_Mask<bool>();
            ((SubspaceCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            ISubspaceInternalGetter item,
            ISubspaceInternalGetter rhs,
            Subspace_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.X = item.X.EqualsWithin(rhs.X);
            ret.Y = item.Y.EqualsWithin(rhs.Y);
            ret.Z = item.Z.EqualsWithin(rhs.Z);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            ISubspaceInternalGetter item,
            string name = null,
            Subspace_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            ISubspaceInternalGetter item,
            FileGeneration fg,
            string name = null,
            Subspace_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Subspace =>");
            }
            else
            {
                fg.AppendLine($"{name} (Subspace) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            ISubspaceInternalGetter item,
            FileGeneration fg,
            Subspace_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.X ?? true)
            {
                fg.AppendLine($"X => {item.X}");
            }
            if (printMask?.Y ?? true)
            {
                fg.AppendLine($"Y => {item.Y}");
            }
            if (printMask?.Z ?? true)
            {
                fg.AppendLine($"Z => {item.Z}");
            }
            if (printMask?.DNAMDataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            ISubspaceInternalGetter item,
            Subspace_Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            ISubspaceInternalGetter item,
            Subspace_Mask<bool> mask)
        {
            mask.X = true;
            mask.Y = true;
            mask.Z = true;
            mask.DNAMDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static Subspace_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Subspace_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Subspace_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Subspace_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Subspace_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Subspace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Subspace_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Subspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Subspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Subspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Subspace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class SubspaceXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static SubspaceXmlWriteTranslation Instance = new SubspaceXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISubspaceInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.DNAMDataTypeState.HasFlag(Subspace.DNAMDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Subspace_FieldIndex.X) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.X),
                        item: item.X,
                        fieldIndex: (int)Subspace_FieldIndex.X,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Subspace_FieldIndex.Y) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Y),
                        item: item.Y,
                        fieldIndex: (int)Subspace_FieldIndex.Y,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Subspace_FieldIndex.Z) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Z),
                        item: item.Z,
                        fieldIndex: (int)Subspace_FieldIndex.Z,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Subspace_FieldIndex.DNAMDataTypeState) ?? true))
            {
                EnumXmlTranslation<Subspace.DNAMDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DNAMDataTypeState),
                    item: item.DNAMDataTypeState,
                    fieldIndex: (int)Subspace_FieldIndex.DNAMDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ISubspaceInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Subspace");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Subspace");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISubspaceInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISubspaceInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISubspaceInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class SubspaceXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static SubspaceXmlCreateTranslation Instance = new SubspaceXmlCreateTranslation();

        public static void FillPublicXml(
            ISubspaceInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SubspaceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISubspaceInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "X":
                    try
                    {
                        errorMask?.PushIndex((int)Subspace_FieldIndex.X);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single XParse,
                            errorMask: errorMask))
                        {
                            item.X = XParse;
                        }
                        else
                        {
                            item.X = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DNAMDataTypeState |= Subspace.DNAMDataType.Has;
                    break;
                case "Y":
                    try
                    {
                        errorMask?.PushIndex((int)Subspace_FieldIndex.Y);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single YParse,
                            errorMask: errorMask))
                        {
                            item.Y = YParse;
                        }
                        else
                        {
                            item.Y = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Z":
                    try
                    {
                        errorMask?.PushIndex((int)Subspace_FieldIndex.Z);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ZParse,
                            errorMask: errorMask))
                        {
                            item.Z = ZParse;
                        }
                        else
                        {
                            item.Z = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DNAMDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Subspace_FieldIndex.DNAMDataTypeState);
                        if (EnumXmlTranslation<Subspace.DNAMDataType>.Instance.Parse(
                            node: node,
                            item: out Subspace.DNAMDataType DNAMDataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.DNAMDataTypeState = DNAMDataTypeStateParse;
                        }
                        else
                        {
                            item.DNAMDataTypeState = default(Subspace.DNAMDataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class SubspaceXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISubspaceInternalGetter item,
            XElement node,
            out Subspace_ErrorMask errorMask,
            bool doMasks = true,
            Subspace_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SubspaceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Subspace_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISubspaceInternalGetter item,
            string path,
            out Subspace_ErrorMask errorMask,
            Subspace_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISubspaceInternalGetter item,
            Stream stream,
            out Subspace_ErrorMask errorMask,
            Subspace_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class Subspace_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Subspace_Mask<T>>
    {
        #region Ctors
        public Subspace_Mask()
        {
        }

        public Subspace_Mask(T initialValue)
        {
            this.X = initialValue;
            this.Y = initialValue;
            this.Z = initialValue;
            this.DNAMDataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T X;
        public T Y;
        public T Z;
        public T DNAMDataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Subspace_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Subspace_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.X, rhs.X)) return false;
            if (!object.Equals(this.Y, rhs.Y)) return false;
            if (!object.Equals(this.Z, rhs.Z)) return false;
            if (!object.Equals(this.DNAMDataTypeState, rhs.DNAMDataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.X?.GetHashCode());
            ret = ret.CombineHashCode(this.Y?.GetHashCode());
            ret = ret.CombineHashCode(this.Z?.GetHashCode());
            ret = ret.CombineHashCode(this.DNAMDataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.X)) return false;
            if (!eval(this.Y)) return false;
            if (!eval(this.Z)) return false;
            if (!eval(this.DNAMDataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Subspace_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Subspace_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Subspace_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.X = eval(this.X);
            obj.Y = eval(this.Y);
            obj.Z = eval(this.Z);
            obj.DNAMDataTypeState = eval(this.DNAMDataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Subspace_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Subspace_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Subspace_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.X ?? true)
                {
                    fg.AppendLine($"X => {X}");
                }
                if (printMask?.Y ?? true)
                {
                    fg.AppendLine($"Y => {Y}");
                }
                if (printMask?.Z ?? true)
                {
                    fg.AppendLine($"Z => {Z}");
                }
                if (printMask?.DNAMDataTypeState ?? true)
                {
                    fg.AppendLine($"DNAMDataTypeState => {DNAMDataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Subspace_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Subspace_ErrorMask>
    {
        #region Members
        public Exception X;
        public Exception Y;
        public Exception Z;
        public Exception DNAMDataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                    return X;
                case Subspace_FieldIndex.Y:
                    return Y;
                case Subspace_FieldIndex.Z:
                    return Z;
                case Subspace_FieldIndex.DNAMDataTypeState:
                    return DNAMDataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                    this.X = ex;
                    break;
                case Subspace_FieldIndex.Y:
                    this.Y = ex;
                    break;
                case Subspace_FieldIndex.Z:
                    this.Z = ex;
                    break;
                case Subspace_FieldIndex.DNAMDataTypeState:
                    this.DNAMDataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Subspace_FieldIndex enu = (Subspace_FieldIndex)index;
            switch (enu)
            {
                case Subspace_FieldIndex.X:
                    this.X = (Exception)obj;
                    break;
                case Subspace_FieldIndex.Y:
                    this.Y = (Exception)obj;
                    break;
                case Subspace_FieldIndex.Z:
                    this.Z = (Exception)obj;
                    break;
                case Subspace_FieldIndex.DNAMDataTypeState:
                    this.DNAMDataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (X != null) return true;
            if (Y != null) return true;
            if (Z != null) return true;
            if (DNAMDataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Subspace_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"X => {X}");
            fg.AppendLine($"Y => {Y}");
            fg.AppendLine($"Z => {Z}");
            fg.AppendLine($"DNAMDataTypeState => {DNAMDataTypeState}");
        }
        #endregion

        #region Combine
        public Subspace_ErrorMask Combine(Subspace_ErrorMask rhs)
        {
            var ret = new Subspace_ErrorMask();
            ret.X = this.X.Combine(rhs.X);
            ret.Y = this.Y.Combine(rhs.Y);
            ret.Z = this.Z.Combine(rhs.Z);
            ret.DNAMDataTypeState = this.DNAMDataTypeState.Combine(rhs.DNAMDataTypeState);
            return ret;
        }
        public static Subspace_ErrorMask Combine(Subspace_ErrorMask lhs, Subspace_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Subspace_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Subspace_ErrorMask();
        }
        #endregion

    }
    public class Subspace_CopyMask : OblivionMajorRecord_CopyMask
    {
        public Subspace_CopyMask()
        {
        }

        public Subspace_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.X = defaultOn;
            this.Y = defaultOn;
            this.Z = defaultOn;
            this.DNAMDataTypeState = defaultOn;
        }

        #region Members
        public bool X;
        public bool Y;
        public bool Z;
        public bool DNAMDataTypeState;
        #endregion

    }

    public class Subspace_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool X;
        public bool Y;
        public bool Z;
        public bool DNAMDataTypeState;
        #endregion

        #region Ctors
        public Subspace_TranslationMask()
            : base()
        {
        }

        public Subspace_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.X = defaultOn;
            this.Y = defaultOn;
            this.Z = defaultOn;
            this.DNAMDataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((X, null));
            ret.Add((Y, null));
            ret.Add((Z, null));
            ret.Add((DNAMDataTypeState, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class SubspaceBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static SubspaceBinaryWriteTranslation Instance = new SubspaceBinaryWriteTranslation();

        public static void Write_Embedded(
            ISubspaceInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            ISubspaceInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.DNAMDataTypeState.HasFlag(Subspace.DNAMDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Subspace_Registration.DNAM_HEADER)))
                {
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.X);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Y);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Z);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            ISubspaceInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Subspace_Registration.SBSP_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ISubspaceInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ISubspaceInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ISubspaceInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class SubspaceBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static SubspaceBinaryCreateTranslation Instance = new SubspaceBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class SubspaceBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISubspaceInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Subspace_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SubspaceBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Subspace_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    #endregion

    #endregion

}
