/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Loqui.Internal;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Tree : 
        MajorRecord,
        ITree,
        ILoquiObject<Tree>,
        ILoquiObjectSetter,
        IPropertySupporter<Model>,
        IPropertySupporter<String>,
        IPropertySupporter<Single>,
        IPropertySupporter<Int32>,
        IEquatable<Tree>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Tree_Registration.Instance;
        public new static Tree_Registration Registration => Tree_Registration.Instance;

        #region Ctor
        public Tree()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        protected Model _Model;
        protected PropertyForwarder<Tree, Model> _ModelForwarder;
        public INotifyingSetItem<Model> Model_Property => _ModelForwarder ?? (_ModelForwarder = new PropertyForwarder<Tree, Model>(this, (int)Tree_FieldIndex.Model));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => this._Model;
            set => this.SetModel(value);
        }
        protected void SetModel(
            Model item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Tree_FieldIndex.Model];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Model, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Tree_FieldIndex.Model] = hasBeenSet;
            }
            if (_Model_subscriptions != null)
            {
                var tmp = Model;
                _Model = item;
                _Model_subscriptions.FireSubscriptions(
                    index: (int)Tree_FieldIndex.Model,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Model = item;
            }
        }
        protected void UnsetModel()
        {
            _hasBeenSetTracker[(int)Tree_FieldIndex.Model] = false;
            Model = default(Model);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> ITree.Model_Property => this.Model_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> ITreeGetter.Model_Property => this.Model_Property;
        #endregion
        #region Icon
        protected String _Icon;
        protected PropertyForwarder<Tree, String> _IconForwarder;
        public INotifyingSetItem<String> Icon_Property => _IconForwarder ?? (_IconForwarder = new PropertyForwarder<Tree, String>(this, (int)Tree_FieldIndex.Icon));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => this.SetIcon(value);
        }
        protected void SetIcon(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Tree_FieldIndex.Icon];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Icon == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Tree_FieldIndex.Icon] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = Icon;
                _Icon = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)Tree_FieldIndex.Icon,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Icon = item;
            }
        }
        protected void UnsetIcon()
        {
            _hasBeenSetTracker[(int)Tree_FieldIndex.Icon] = false;
            Icon = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> ITree.Icon_Property => this.Icon_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> ITreeGetter.Icon_Property => this.Icon_Property;
        #endregion
        #region SpeedTreeSeeds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<UInt32> _SpeedTreeSeeds = new NotifyingList<UInt32>();
        public INotifyingList<UInt32> SpeedTreeSeeds => _SpeedTreeSeeds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<UInt32> SpeedTreeSeedsEnumerable
        {
            get => _SpeedTreeSeeds;
            set => _SpeedTreeSeeds.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<UInt32> ITree.SpeedTreeSeeds => _SpeedTreeSeeds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<UInt32> ITreeGetter.SpeedTreeSeeds => _SpeedTreeSeeds;
        #endregion

        #endregion
        #region LeafCurvature
        protected Single _LeafCurvature;
        protected PropertyForwarder<Tree, Single> _LeafCurvatureForwarder;
        public INotifyingSetItem<Single> LeafCurvature_Property => _LeafCurvatureForwarder ?? (_LeafCurvatureForwarder = new PropertyForwarder<Tree, Single>(this, (int)Tree_FieldIndex.LeafCurvature));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single LeafCurvature
        {
            get => this._LeafCurvature;
            set => this.SetLeafCurvature(value);
        }
        protected void SetLeafCurvature(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Tree_FieldIndex.LeafCurvature];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && LeafCurvature == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Tree_FieldIndex.LeafCurvature] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = LeafCurvature;
                _LeafCurvature = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Tree_FieldIndex.LeafCurvature,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _LeafCurvature = item;
            }
        }
        protected void UnsetLeafCurvature()
        {
            _hasBeenSetTracker[(int)Tree_FieldIndex.LeafCurvature] = false;
            LeafCurvature = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ITree.LeafCurvature_Property => this.LeafCurvature_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ITreeGetter.LeafCurvature_Property => this.LeafCurvature_Property;
        #endregion
        #region MinimumLeafAngle
        protected Single _MinimumLeafAngle;
        protected PropertyForwarder<Tree, Single> _MinimumLeafAngleForwarder;
        public INotifyingSetItem<Single> MinimumLeafAngle_Property => _MinimumLeafAngleForwarder ?? (_MinimumLeafAngleForwarder = new PropertyForwarder<Tree, Single>(this, (int)Tree_FieldIndex.MinimumLeafAngle));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single MinimumLeafAngle
        {
            get => this._MinimumLeafAngle;
            set => this.SetMinimumLeafAngle(value);
        }
        protected void SetMinimumLeafAngle(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Tree_FieldIndex.MinimumLeafAngle];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && MinimumLeafAngle == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Tree_FieldIndex.MinimumLeafAngle] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = MinimumLeafAngle;
                _MinimumLeafAngle = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Tree_FieldIndex.MinimumLeafAngle,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _MinimumLeafAngle = item;
            }
        }
        protected void UnsetMinimumLeafAngle()
        {
            _hasBeenSetTracker[(int)Tree_FieldIndex.MinimumLeafAngle] = false;
            MinimumLeafAngle = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ITree.MinimumLeafAngle_Property => this.MinimumLeafAngle_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ITreeGetter.MinimumLeafAngle_Property => this.MinimumLeafAngle_Property;
        #endregion
        #region MaximumLeafAngle
        protected Single _MaximumLeafAngle;
        protected PropertyForwarder<Tree, Single> _MaximumLeafAngleForwarder;
        public INotifyingSetItem<Single> MaximumLeafAngle_Property => _MaximumLeafAngleForwarder ?? (_MaximumLeafAngleForwarder = new PropertyForwarder<Tree, Single>(this, (int)Tree_FieldIndex.MaximumLeafAngle));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single MaximumLeafAngle
        {
            get => this._MaximumLeafAngle;
            set => this.SetMaximumLeafAngle(value);
        }
        protected void SetMaximumLeafAngle(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Tree_FieldIndex.MaximumLeafAngle];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && MaximumLeafAngle == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Tree_FieldIndex.MaximumLeafAngle] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = MaximumLeafAngle;
                _MaximumLeafAngle = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Tree_FieldIndex.MaximumLeafAngle,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _MaximumLeafAngle = item;
            }
        }
        protected void UnsetMaximumLeafAngle()
        {
            _hasBeenSetTracker[(int)Tree_FieldIndex.MaximumLeafAngle] = false;
            MaximumLeafAngle = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ITree.MaximumLeafAngle_Property => this.MaximumLeafAngle_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ITreeGetter.MaximumLeafAngle_Property => this.MaximumLeafAngle_Property;
        #endregion
        #region BranchDimmingValue
        protected Single _BranchDimmingValue;
        protected PropertyForwarder<Tree, Single> _BranchDimmingValueForwarder;
        public INotifyingSetItem<Single> BranchDimmingValue_Property => _BranchDimmingValueForwarder ?? (_BranchDimmingValueForwarder = new PropertyForwarder<Tree, Single>(this, (int)Tree_FieldIndex.BranchDimmingValue));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single BranchDimmingValue
        {
            get => this._BranchDimmingValue;
            set => this.SetBranchDimmingValue(value);
        }
        protected void SetBranchDimmingValue(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Tree_FieldIndex.BranchDimmingValue];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && BranchDimmingValue == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Tree_FieldIndex.BranchDimmingValue] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = BranchDimmingValue;
                _BranchDimmingValue = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Tree_FieldIndex.BranchDimmingValue,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _BranchDimmingValue = item;
            }
        }
        protected void UnsetBranchDimmingValue()
        {
            _hasBeenSetTracker[(int)Tree_FieldIndex.BranchDimmingValue] = false;
            BranchDimmingValue = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ITree.BranchDimmingValue_Property => this.BranchDimmingValue_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ITreeGetter.BranchDimmingValue_Property => this.BranchDimmingValue_Property;
        #endregion
        #region LeafDimmingValue
        protected Single _LeafDimmingValue;
        protected PropertyForwarder<Tree, Single> _LeafDimmingValueForwarder;
        public INotifyingSetItem<Single> LeafDimmingValue_Property => _LeafDimmingValueForwarder ?? (_LeafDimmingValueForwarder = new PropertyForwarder<Tree, Single>(this, (int)Tree_FieldIndex.LeafDimmingValue));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single LeafDimmingValue
        {
            get => this._LeafDimmingValue;
            set => this.SetLeafDimmingValue(value);
        }
        protected void SetLeafDimmingValue(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Tree_FieldIndex.LeafDimmingValue];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && LeafDimmingValue == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Tree_FieldIndex.LeafDimmingValue] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = LeafDimmingValue;
                _LeafDimmingValue = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Tree_FieldIndex.LeafDimmingValue,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _LeafDimmingValue = item;
            }
        }
        protected void UnsetLeafDimmingValue()
        {
            _hasBeenSetTracker[(int)Tree_FieldIndex.LeafDimmingValue] = false;
            LeafDimmingValue = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ITree.LeafDimmingValue_Property => this.LeafDimmingValue_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ITreeGetter.LeafDimmingValue_Property => this.LeafDimmingValue_Property;
        #endregion
        #region ShadowRadius
        protected Int32 _ShadowRadius;
        protected PropertyForwarder<Tree, Int32> _ShadowRadiusForwarder;
        public INotifyingSetItem<Int32> ShadowRadius_Property => _ShadowRadiusForwarder ?? (_ShadowRadiusForwarder = new PropertyForwarder<Tree, Int32>(this, (int)Tree_FieldIndex.ShadowRadius));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 ShadowRadius
        {
            get => this._ShadowRadius;
            set => this.SetShadowRadius(value);
        }
        protected void SetShadowRadius(
            Int32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Tree_FieldIndex.ShadowRadius];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ShadowRadius == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Tree_FieldIndex.ShadowRadius] = hasBeenSet;
            }
            if (_Int32_subscriptions != null)
            {
                var tmp = ShadowRadius;
                _ShadowRadius = item;
                _Int32_subscriptions.FireSubscriptions(
                    index: (int)Tree_FieldIndex.ShadowRadius,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ShadowRadius = item;
            }
        }
        protected void UnsetShadowRadius()
        {
            _hasBeenSetTracker[(int)Tree_FieldIndex.ShadowRadius] = false;
            ShadowRadius = default(Int32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Int32> ITree.ShadowRadius_Property => this.ShadowRadius_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Int32> ITreeGetter.ShadowRadius_Property => this.ShadowRadius_Property;
        #endregion
        #region RockingSpeed
        protected Single _RockingSpeed;
        protected PropertyForwarder<Tree, Single> _RockingSpeedForwarder;
        public INotifyingSetItem<Single> RockingSpeed_Property => _RockingSpeedForwarder ?? (_RockingSpeedForwarder = new PropertyForwarder<Tree, Single>(this, (int)Tree_FieldIndex.RockingSpeed));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single RockingSpeed
        {
            get => this._RockingSpeed;
            set => this.SetRockingSpeed(value);
        }
        protected void SetRockingSpeed(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Tree_FieldIndex.RockingSpeed];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && RockingSpeed == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Tree_FieldIndex.RockingSpeed] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = RockingSpeed;
                _RockingSpeed = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Tree_FieldIndex.RockingSpeed,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _RockingSpeed = item;
            }
        }
        protected void UnsetRockingSpeed()
        {
            _hasBeenSetTracker[(int)Tree_FieldIndex.RockingSpeed] = false;
            RockingSpeed = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ITree.RockingSpeed_Property => this.RockingSpeed_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ITreeGetter.RockingSpeed_Property => this.RockingSpeed_Property;
        #endregion
        #region RustleSpeed
        protected Single _RustleSpeed;
        protected PropertyForwarder<Tree, Single> _RustleSpeedForwarder;
        public INotifyingSetItem<Single> RustleSpeed_Property => _RustleSpeedForwarder ?? (_RustleSpeedForwarder = new PropertyForwarder<Tree, Single>(this, (int)Tree_FieldIndex.RustleSpeed));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single RustleSpeed
        {
            get => this._RustleSpeed;
            set => this.SetRustleSpeed(value);
        }
        protected void SetRustleSpeed(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Tree_FieldIndex.RustleSpeed];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && RustleSpeed == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Tree_FieldIndex.RustleSpeed] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = RustleSpeed;
                _RustleSpeed = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Tree_FieldIndex.RustleSpeed,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _RustleSpeed = item;
            }
        }
        protected void UnsetRustleSpeed()
        {
            _hasBeenSetTracker[(int)Tree_FieldIndex.RustleSpeed] = false;
            RustleSpeed = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ITree.RustleSpeed_Property => this.RustleSpeed_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ITreeGetter.RustleSpeed_Property => this.RustleSpeed_Property;
        #endregion
        #region BillboardWidth
        protected Single _BillboardWidth;
        protected PropertyForwarder<Tree, Single> _BillboardWidthForwarder;
        public INotifyingSetItem<Single> BillboardWidth_Property => _BillboardWidthForwarder ?? (_BillboardWidthForwarder = new PropertyForwarder<Tree, Single>(this, (int)Tree_FieldIndex.BillboardWidth));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single BillboardWidth
        {
            get => this._BillboardWidth;
            set => this.SetBillboardWidth(value);
        }
        protected void SetBillboardWidth(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Tree_FieldIndex.BillboardWidth];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && BillboardWidth == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Tree_FieldIndex.BillboardWidth] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = BillboardWidth;
                _BillboardWidth = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Tree_FieldIndex.BillboardWidth,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _BillboardWidth = item;
            }
        }
        protected void UnsetBillboardWidth()
        {
            _hasBeenSetTracker[(int)Tree_FieldIndex.BillboardWidth] = false;
            BillboardWidth = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ITree.BillboardWidth_Property => this.BillboardWidth_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ITreeGetter.BillboardWidth_Property => this.BillboardWidth_Property;
        #endregion
        #region BillboardHeight
        protected Single _BillboardHeight;
        protected PropertyForwarder<Tree, Single> _BillboardHeightForwarder;
        public INotifyingSetItem<Single> BillboardHeight_Property => _BillboardHeightForwarder ?? (_BillboardHeightForwarder = new PropertyForwarder<Tree, Single>(this, (int)Tree_FieldIndex.BillboardHeight));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single BillboardHeight
        {
            get => this._BillboardHeight;
            set => this.SetBillboardHeight(value);
        }
        protected void SetBillboardHeight(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Tree_FieldIndex.BillboardHeight];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && BillboardHeight == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Tree_FieldIndex.BillboardHeight] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = BillboardHeight;
                _BillboardHeight = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Tree_FieldIndex.BillboardHeight,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _BillboardHeight = item;
            }
        }
        protected void UnsetBillboardHeight()
        {
            _hasBeenSetTracker[(int)Tree_FieldIndex.BillboardHeight] = false;
            BillboardHeight = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ITree.BillboardHeight_Property => this.BillboardHeight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ITreeGetter.BillboardHeight_Property => this.BillboardHeight_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => TreeCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => TreeCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => TreeCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TreeCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Tree>.GetEqualsMask(Tree rhs) => TreeCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ITreeGetter>.GetEqualsMask(ITreeGetter rhs) => TreeCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return TreeCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Tree_Mask<bool> printMask = null)
        {
            return TreeCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            TreeCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Tree_Mask<bool> GetHasBeenSetMask()
        {
            return TreeCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Tree rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Tree rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (Icon_Property.HasBeenSet != rhs.Icon_Property.HasBeenSet) return false;
            if (Icon_Property.HasBeenSet)
            {
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (SpeedTreeSeeds.HasBeenSet != rhs.SpeedTreeSeeds.HasBeenSet) return false;
            if (SpeedTreeSeeds.HasBeenSet)
            {
                if (!this.SpeedTreeSeeds.SequenceEqual(rhs.SpeedTreeSeeds)) return false;
            }
            if (!this.LeafCurvature.EqualsWithin(rhs.LeafCurvature)) return false;
            if (!this.MinimumLeafAngle.EqualsWithin(rhs.MinimumLeafAngle)) return false;
            if (!this.MaximumLeafAngle.EqualsWithin(rhs.MaximumLeafAngle)) return false;
            if (!this.BranchDimmingValue.EqualsWithin(rhs.BranchDimmingValue)) return false;
            if (!this.LeafDimmingValue.EqualsWithin(rhs.LeafDimmingValue)) return false;
            if (this.ShadowRadius != rhs.ShadowRadius) return false;
            if (!this.RockingSpeed.EqualsWithin(rhs.RockingSpeed)) return false;
            if (!this.RustleSpeed.EqualsWithin(rhs.RustleSpeed)) return false;
            if (!this.BillboardWidth.EqualsWithin(rhs.BillboardWidth)) return false;
            if (!this.BillboardHeight.EqualsWithin(rhs.BillboardHeight)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (Icon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (SpeedTreeSeeds.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(SpeedTreeSeeds).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(LeafCurvature).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MinimumLeafAngle).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaximumLeafAngle).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BranchDimmingValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LeafDimmingValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ShadowRadius).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RockingSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RustleSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BillboardWidth).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BillboardHeight).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Tree Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Tree Create_XML(
            XElement root,
            out Tree_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Tree Object, Tree_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Tree_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Tree_ErrorMask()) : default(Func<Tree_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Tree Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Tree Create_XML(
            string path,
            out Tree_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Tree Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Tree Create_XML(
            Stream stream,
            out Tree_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Tree, Tree_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Tree_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Tree, Tree_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Tree_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Tree_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Tree_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out Tree_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as Tree_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out Tree_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out Tree_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            TreeCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Tree Create_XML_Internal(
            XElement root,
            Func<Tree_ErrorMask> errorMask)
        {
            var ret = new Tree();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Tree item,
            XElement root,
            string name,
            Func<Tree_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Model":
                    var ModeltryGet = LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Tree_FieldIndex.Model,
                        errorMask: errorMask);
                    if (ModeltryGet.Succeeded)
                    {
                        item.SetModel(item: ModeltryGet.Value);
                    }
                    else
                    {
                        item.UnsetModel();
                    }
                    break;
                case "Icon":
                    var IcontryGet = StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)Tree_FieldIndex.Icon,
                        errorMask: errorMask);
                    if (IcontryGet.Succeeded)
                    {
                        item.SetIcon(item: IcontryGet.Value);
                    }
                    else
                    {
                        item.UnsetIcon();
                    }
                    break;
                case "SpeedTreeSeeds":
                    item._SpeedTreeSeeds.SetIfSucceededOrDefault(ListXmlTranslation<UInt32, Exception>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Tree_FieldIndex.SpeedTreeSeeds,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return UInt32XmlTranslation.Instance.Parse(
                                r,
                                nullable: false,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask).Bubble((o) => o.Value);
                        }
                        ));
                    break;
                case "LeafCurvature":
                    var LeafCurvaturetryGet = FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Tree_FieldIndex.LeafCurvature,
                        errorMask: errorMask);
                    if (LeafCurvaturetryGet.Succeeded)
                    {
                        item.SetLeafCurvature(item: LeafCurvaturetryGet.Value);
                    }
                    else
                    {
                        item.UnsetLeafCurvature();
                    }
                    break;
                case "MinimumLeafAngle":
                    var MinimumLeafAngletryGet = FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Tree_FieldIndex.MinimumLeafAngle,
                        errorMask: errorMask);
                    if (MinimumLeafAngletryGet.Succeeded)
                    {
                        item.SetMinimumLeafAngle(item: MinimumLeafAngletryGet.Value);
                    }
                    else
                    {
                        item.UnsetMinimumLeafAngle();
                    }
                    break;
                case "MaximumLeafAngle":
                    var MaximumLeafAngletryGet = FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Tree_FieldIndex.MaximumLeafAngle,
                        errorMask: errorMask);
                    if (MaximumLeafAngletryGet.Succeeded)
                    {
                        item.SetMaximumLeafAngle(item: MaximumLeafAngletryGet.Value);
                    }
                    else
                    {
                        item.UnsetMaximumLeafAngle();
                    }
                    break;
                case "BranchDimmingValue":
                    var BranchDimmingValuetryGet = FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Tree_FieldIndex.BranchDimmingValue,
                        errorMask: errorMask);
                    if (BranchDimmingValuetryGet.Succeeded)
                    {
                        item.SetBranchDimmingValue(item: BranchDimmingValuetryGet.Value);
                    }
                    else
                    {
                        item.UnsetBranchDimmingValue();
                    }
                    break;
                case "LeafDimmingValue":
                    var LeafDimmingValuetryGet = FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Tree_FieldIndex.LeafDimmingValue,
                        errorMask: errorMask);
                    if (LeafDimmingValuetryGet.Succeeded)
                    {
                        item.SetLeafDimmingValue(item: LeafDimmingValuetryGet.Value);
                    }
                    else
                    {
                        item.UnsetLeafDimmingValue();
                    }
                    break;
                case "ShadowRadius":
                    var ShadowRadiustryGet = Int32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Tree_FieldIndex.ShadowRadius,
                        errorMask: errorMask);
                    if (ShadowRadiustryGet.Succeeded)
                    {
                        item.SetShadowRadius(item: ShadowRadiustryGet.Value);
                    }
                    else
                    {
                        item.UnsetShadowRadius();
                    }
                    break;
                case "RockingSpeed":
                    var RockingSpeedtryGet = FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Tree_FieldIndex.RockingSpeed,
                        errorMask: errorMask);
                    if (RockingSpeedtryGet.Succeeded)
                    {
                        item.SetRockingSpeed(item: RockingSpeedtryGet.Value);
                    }
                    else
                    {
                        item.UnsetRockingSpeed();
                    }
                    break;
                case "RustleSpeed":
                    var RustleSpeedtryGet = FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Tree_FieldIndex.RustleSpeed,
                        errorMask: errorMask);
                    if (RustleSpeedtryGet.Succeeded)
                    {
                        item.SetRustleSpeed(item: RustleSpeedtryGet.Value);
                    }
                    else
                    {
                        item.UnsetRustleSpeed();
                    }
                    break;
                case "BillboardWidth":
                    var BillboardWidthtryGet = FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Tree_FieldIndex.BillboardWidth,
                        errorMask: errorMask);
                    if (BillboardWidthtryGet.Succeeded)
                    {
                        item.SetBillboardWidth(item: BillboardWidthtryGet.Value);
                    }
                    else
                    {
                        item.UnsetBillboardWidth();
                    }
                    break;
                case "BillboardHeight":
                    var BillboardHeighttryGet = FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Tree_FieldIndex.BillboardHeight,
                        errorMask: errorMask);
                    if (BillboardHeighttryGet.Succeeded)
                    {
                        item.SetBillboardHeight(item: BillboardHeighttryGet.Value);
                    }
                    else
                    {
                        item.UnsetBillboardHeight();
                    }
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region IPropertySupporter Model
        protected ObjectCentralizationSubscriptions<Model> _Model_subscriptions;
        Model IPropertySupporter<Model>.Get(int index)
        {
            return GetModel(index: index);
        }

        protected Model GetModel(int index)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.Model:
                    return Model;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        void IPropertySupporter<Model>.Set(
            int index,
            Model item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetModel(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetModel(
            int index,
            Model item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.Model:
                    SetModel(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        bool IPropertySupporter<Model>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Model>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Model>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetModel(
                index: index,
                cmds: cmds);
        }

        protected void UnsetModel(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.Model:
                    _hasBeenSetTracker[index] = false;
                    Model = default(Model);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Model>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Model> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Model_subscriptions == null)
            {
                _Model_subscriptions = new ObjectCentralizationSubscriptions<Model>();
            }
            _Model_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Model>.Unsubscribe(
            int index,
            object owner)
        {
            _Model_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Model>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Model IPropertySupporter<Model>.DefaultValue(int index)
        {
            return DefaultValueModel(index: index);
        }

        protected Model DefaultValueModel(int index)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.Model:
                    return default(Model);
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        #endregion

        #region IPropertySupporter String
        String IPropertySupporter<String>.Get(int index)
        {
            return GetString(index: index);
        }

        protected override String GetString(int index)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.Icon:
                    return Icon;
                default:
                    return base.GetString(index: index);
            }
        }

        void IPropertySupporter<String>.Set(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetString(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected override void SetString(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.Icon:
                    SetIcon(item, hasBeenSet, cmds);
                    break;
                default:
                    base.SetString(
                        index: index,
                        item: item,
                        hasBeenSet: hasBeenSet,
                        cmds: cmds);
                    break;
            }
        }

        bool IPropertySupporter<String>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<String>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<String>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetString(
                index: index,
                cmds: cmds);
        }

        protected override void UnsetString(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.Icon:
                    _hasBeenSetTracker[index] = false;
                    Icon = default(String);
                    break;
                default:
                    base.UnsetString(
                        index: index,
                        cmds: cmds);
                    break;
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<String> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_String_subscriptions == null)
            {
                _String_subscriptions = new ObjectCentralizationSubscriptions<String>();
            }
            _String_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Unsubscribe(
            int index,
            object owner)
        {
            _String_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<String>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        String IPropertySupporter<String>.DefaultValue(int index)
        {
            return DefaultValueString(index: index);
        }

        protected override String DefaultValueString(int index)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.Icon:
                    return default(String);
                default:
                    return base.DefaultValueString(index: index);
            }
        }

        #endregion

        #region IPropertySupporter Single
        protected ObjectCentralizationSubscriptions<Single> _Single_subscriptions;
        Single IPropertySupporter<Single>.Get(int index)
        {
            return GetSingle(index: index);
        }

        protected Single GetSingle(int index)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.LeafCurvature:
                    return LeafCurvature;
                case Tree_FieldIndex.MinimumLeafAngle:
                    return MinimumLeafAngle;
                case Tree_FieldIndex.MaximumLeafAngle:
                    return MaximumLeafAngle;
                case Tree_FieldIndex.BranchDimmingValue:
                    return BranchDimmingValue;
                case Tree_FieldIndex.LeafDimmingValue:
                    return LeafDimmingValue;
                case Tree_FieldIndex.RockingSpeed:
                    return RockingSpeed;
                case Tree_FieldIndex.RustleSpeed:
                    return RustleSpeed;
                case Tree_FieldIndex.BillboardWidth:
                    return BillboardWidth;
                case Tree_FieldIndex.BillboardHeight:
                    return BillboardHeight;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        void IPropertySupporter<Single>.Set(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetSingle(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetSingle(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.LeafCurvature:
                    SetLeafCurvature(item, hasBeenSet, cmds);
                    break;
                case Tree_FieldIndex.MinimumLeafAngle:
                    SetMinimumLeafAngle(item, hasBeenSet, cmds);
                    break;
                case Tree_FieldIndex.MaximumLeafAngle:
                    SetMaximumLeafAngle(item, hasBeenSet, cmds);
                    break;
                case Tree_FieldIndex.BranchDimmingValue:
                    SetBranchDimmingValue(item, hasBeenSet, cmds);
                    break;
                case Tree_FieldIndex.LeafDimmingValue:
                    SetLeafDimmingValue(item, hasBeenSet, cmds);
                    break;
                case Tree_FieldIndex.RockingSpeed:
                    SetRockingSpeed(item, hasBeenSet, cmds);
                    break;
                case Tree_FieldIndex.RustleSpeed:
                    SetRustleSpeed(item, hasBeenSet, cmds);
                    break;
                case Tree_FieldIndex.BillboardWidth:
                    SetBillboardWidth(item, hasBeenSet, cmds);
                    break;
                case Tree_FieldIndex.BillboardHeight:
                    SetBillboardHeight(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        bool IPropertySupporter<Single>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Single>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Single>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetSingle(
                index: index,
                cmds: cmds);
        }

        protected void UnsetSingle(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.LeafCurvature:
                    _hasBeenSetTracker[index] = false;
                    LeafCurvature = default(Single);
                    break;
                case Tree_FieldIndex.MinimumLeafAngle:
                    _hasBeenSetTracker[index] = false;
                    MinimumLeafAngle = default(Single);
                    break;
                case Tree_FieldIndex.MaximumLeafAngle:
                    _hasBeenSetTracker[index] = false;
                    MaximumLeafAngle = default(Single);
                    break;
                case Tree_FieldIndex.BranchDimmingValue:
                    _hasBeenSetTracker[index] = false;
                    BranchDimmingValue = default(Single);
                    break;
                case Tree_FieldIndex.LeafDimmingValue:
                    _hasBeenSetTracker[index] = false;
                    LeafDimmingValue = default(Single);
                    break;
                case Tree_FieldIndex.RockingSpeed:
                    _hasBeenSetTracker[index] = false;
                    RockingSpeed = default(Single);
                    break;
                case Tree_FieldIndex.RustleSpeed:
                    _hasBeenSetTracker[index] = false;
                    RustleSpeed = default(Single);
                    break;
                case Tree_FieldIndex.BillboardWidth:
                    _hasBeenSetTracker[index] = false;
                    BillboardWidth = default(Single);
                    break;
                case Tree_FieldIndex.BillboardHeight:
                    _hasBeenSetTracker[index] = false;
                    BillboardHeight = default(Single);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Single> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Single_subscriptions == null)
            {
                _Single_subscriptions = new ObjectCentralizationSubscriptions<Single>();
            }
            _Single_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Unsubscribe(
            int index,
            object owner)
        {
            _Single_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Single>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Single IPropertySupporter<Single>.DefaultValue(int index)
        {
            return DefaultValueSingle(index: index);
        }

        protected Single DefaultValueSingle(int index)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                    return default(Single);
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Int32
        protected ObjectCentralizationSubscriptions<Int32> _Int32_subscriptions;
        Int32 IPropertySupporter<Int32>.Get(int index)
        {
            return GetInt32(index: index);
        }

        protected Int32 GetInt32(int index)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.ShadowRadius:
                    return ShadowRadius;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        void IPropertySupporter<Int32>.Set(
            int index,
            Int32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetInt32(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetInt32(
            int index,
            Int32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.ShadowRadius:
                    SetShadowRadius(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        bool IPropertySupporter<Int32>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Int32>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Int32>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetInt32(
                index: index,
                cmds: cmds);
        }

        protected void UnsetInt32(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.ShadowRadius:
                    _hasBeenSetTracker[index] = false;
                    ShadowRadius = default(Int32);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Int32>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Int32> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Int32_subscriptions == null)
            {
                _Int32_subscriptions = new ObjectCentralizationSubscriptions<Int32>();
            }
            _Int32_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Int32>.Unsubscribe(
            int index,
            object owner)
        {
            _Int32_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Int32>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Int32 IPropertySupporter<Int32>.DefaultValue(int index)
        {
            return DefaultValueInt32(index: index);
        }

        protected Int32 DefaultValueInt32(int index)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.ShadowRadius:
                    return default(Int32);
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Tree_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Tree Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Tree Create_Binary(
            MutagenFrame frame,
            out Tree_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Tree Object, Tree_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Tree_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Tree_ErrorMask()) : default(Func<Tree_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Tree Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Tree Create_Binary(
            string path,
            out Tree_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Tree Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Tree Create_Binary(
            Stream stream,
            out Tree_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Tree_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as Tree_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out Tree_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Tree_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            TreeCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Tree Create_Binary_Internal(
            MutagenFrame frame,
            Func<Tree_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return UtilityTranslation.MajorRecordParse<Tree, Tree_ErrorMask, Tree_FieldIndex>(
                record: new Tree(),
                frame: frame,
                errorMask: errorMask,
                recType: Tree_Registration.TREE_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            Tree item,
            MutagenFrame frame,
            Func<Tree_ErrorMask> errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<Tree_FieldIndex?> Fill_Binary_RecordTypes(
            Tree item,
            MutagenFrame frame,
            Func<Tree_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "MODL":
                    {
                        var ModeltryGet = LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Parse(
                            frame: frame.Spawn(snapToFinalPosition: false),
                            fieldIndex: (int)Tree_FieldIndex.Model,
                            errorMask: errorMask);
                        if (ModeltryGet.Succeeded)
                        {
                            item.SetModel(item: ModeltryGet.Value);
                        }
                        else
                        {
                            item.UnsetModel();
                        }
                    }
                    return TryGet<Tree_FieldIndex?>.Succeed(Tree_FieldIndex.Model);
                case "ICON":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var IcontryGet = StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Tree_FieldIndex.Icon,
                        parseWhole: true,
                        errorMask: errorMask);
                    if (IcontryGet.Succeeded)
                    {
                        item.SetIcon(item: IcontryGet.Value);
                    }
                    else
                    {
                        item.UnsetIcon();
                    }
                    return TryGet<Tree_FieldIndex?>.Succeed(Tree_FieldIndex.Icon);
                case "SNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.SpeedTreeSeeds.SetIfSucceededOrDefault(Mutagen.Bethesda.Binary.ListBinaryTranslation<UInt32, Exception>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Tree_FieldIndex.SpeedTreeSeeds,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                                r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    return TryGet<Tree_FieldIndex?>.Succeed(Tree_FieldIndex.SpeedTreeSeeds);
                case "CNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        var LeafCurvaturetryGet = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Tree_FieldIndex.LeafCurvature,
                            errorMask: errorMask);
                        if (LeafCurvaturetryGet.Succeeded)
                        {
                            item.SetLeafCurvature(item: LeafCurvaturetryGet.Value);
                        }
                        else
                        {
                            item.UnsetLeafCurvature();
                        }
                        var MinimumLeafAngletryGet = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Tree_FieldIndex.MinimumLeafAngle,
                            errorMask: errorMask);
                        if (MinimumLeafAngletryGet.Succeeded)
                        {
                            item.SetMinimumLeafAngle(item: MinimumLeafAngletryGet.Value);
                        }
                        else
                        {
                            item.UnsetMinimumLeafAngle();
                        }
                        var MaximumLeafAngletryGet = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Tree_FieldIndex.MaximumLeafAngle,
                            errorMask: errorMask);
                        if (MaximumLeafAngletryGet.Succeeded)
                        {
                            item.SetMaximumLeafAngle(item: MaximumLeafAngletryGet.Value);
                        }
                        else
                        {
                            item.UnsetMaximumLeafAngle();
                        }
                        var BranchDimmingValuetryGet = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Tree_FieldIndex.BranchDimmingValue,
                            errorMask: errorMask);
                        if (BranchDimmingValuetryGet.Succeeded)
                        {
                            item.SetBranchDimmingValue(item: BranchDimmingValuetryGet.Value);
                        }
                        else
                        {
                            item.UnsetBranchDimmingValue();
                        }
                        var LeafDimmingValuetryGet = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Tree_FieldIndex.LeafDimmingValue,
                            errorMask: errorMask);
                        if (LeafDimmingValuetryGet.Succeeded)
                        {
                            item.SetLeafDimmingValue(item: LeafDimmingValuetryGet.Value);
                        }
                        else
                        {
                            item.UnsetLeafDimmingValue();
                        }
                        var ShadowRadiustryGet = Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Tree_FieldIndex.ShadowRadius,
                            errorMask: errorMask);
                        if (ShadowRadiustryGet.Succeeded)
                        {
                            item.SetShadowRadius(item: ShadowRadiustryGet.Value);
                        }
                        else
                        {
                            item.UnsetShadowRadius();
                        }
                        var RockingSpeedtryGet = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Tree_FieldIndex.RockingSpeed,
                            errorMask: errorMask);
                        if (RockingSpeedtryGet.Succeeded)
                        {
                            item.SetRockingSpeed(item: RockingSpeedtryGet.Value);
                        }
                        else
                        {
                            item.UnsetRockingSpeed();
                        }
                        var RustleSpeedtryGet = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Tree_FieldIndex.RustleSpeed,
                            errorMask: errorMask);
                        if (RustleSpeedtryGet.Succeeded)
                        {
                            item.SetRustleSpeed(item: RustleSpeedtryGet.Value);
                        }
                        else
                        {
                            item.UnsetRustleSpeed();
                        }
                    }
                    return TryGet<Tree_FieldIndex?>.Succeed(Tree_FieldIndex.RustleSpeed);
                case "BNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        var BillboardWidthtryGet = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Tree_FieldIndex.BillboardWidth,
                            errorMask: errorMask);
                        if (BillboardWidthtryGet.Succeeded)
                        {
                            item.SetBillboardWidth(item: BillboardWidthtryGet.Value);
                        }
                        else
                        {
                            item.UnsetBillboardWidth();
                        }
                        var BillboardHeighttryGet = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Tree_FieldIndex.BillboardHeight,
                            errorMask: errorMask);
                        if (BillboardHeighttryGet.Succeeded)
                        {
                            item.SetBillboardHeight(item: BillboardHeighttryGet.Value);
                        }
                        else
                        {
                            item.UnsetBillboardHeight();
                        }
                    }
                    return TryGet<Tree_FieldIndex?>.Succeed(Tree_FieldIndex.BillboardHeight);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => TreeCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public Tree Copy(
            Tree_CopyMask copyMask = null,
            ITreeGetter def = null)
        {
            return Tree.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Tree Copy(
            ITree item,
            Tree_CopyMask copyMask = null,
            ITreeGetter def = null)
        {
            Tree ret;
            if (item.GetType().Equals(typeof(Tree)))
            {
                ret = new Tree();
            }
            else
            {
                ret = (Tree)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Tree Copy_ToLoqui(
            ITreeGetter item,
            Tree_CopyMask copyMask = null,
            ITreeGetter def = null)
        {
            Tree ret;
            if (item.GetType().Equals(typeof(Tree)))
            {
                ret = new Tree() as Tree;
            }
            else
            {
                ret = (Tree)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ITreeGetter rhs,
            Tree_CopyMask copyMask,
            ITreeGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ITreeGetter rhs,
            out Tree_ErrorMask errorMask,
            Tree_CopyMask copyMask = null,
            ITreeGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            Tree_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Tree_ErrorMask();
                }
                return retErrorMask;
            };
            TreeCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    this.SetModel(
                        (Model)obj,
                        cmds: cmds);
                    break;
                case Tree_FieldIndex.Icon:
                    this.SetIcon(
                        (String)obj,
                        cmds: cmds);
                    break;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    this._SpeedTreeSeeds.SetTo((IEnumerable<UInt32>)obj, cmds);
                    break;
                case Tree_FieldIndex.LeafCurvature:
                    this.SetLeafCurvature(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Tree_FieldIndex.MinimumLeafAngle:
                    this.SetMinimumLeafAngle(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Tree_FieldIndex.MaximumLeafAngle:
                    this.SetMaximumLeafAngle(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Tree_FieldIndex.BranchDimmingValue:
                    this.SetBranchDimmingValue(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Tree_FieldIndex.LeafDimmingValue:
                    this.SetLeafDimmingValue(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Tree_FieldIndex.ShadowRadius:
                    this.SetShadowRadius(
                        (Int32)obj,
                        cmds: cmds);
                    break;
                case Tree_FieldIndex.RockingSpeed:
                    this.SetRockingSpeed(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Tree_FieldIndex.RustleSpeed:
                    this.SetRustleSpeed(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Tree_FieldIndex.BillboardWidth:
                    this.SetBillboardWidth(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Tree_FieldIndex.BillboardHeight:
                    this.SetBillboardHeight(
                        (Single)obj,
                        cmds: cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TreeCommon.Clear(this, cmds);
        }


        public new static Tree Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Tree();
            foreach (var pair in fields)
            {
                CopyInInternal_Tree(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Tree(Tree obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Tree_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    obj.SetModel(
                        (Model)pair.Value,
                        cmds: null);
                    break;
                case Tree_FieldIndex.Icon:
                    obj.SetIcon(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    obj._SpeedTreeSeeds.SetTo((IEnumerable<UInt32>)pair.Value, null);
                    break;
                case Tree_FieldIndex.LeafCurvature:
                    obj.SetLeafCurvature(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Tree_FieldIndex.MinimumLeafAngle:
                    obj.SetMinimumLeafAngle(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Tree_FieldIndex.MaximumLeafAngle:
                    obj.SetMaximumLeafAngle(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Tree_FieldIndex.BranchDimmingValue:
                    obj.SetBranchDimmingValue(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Tree_FieldIndex.LeafDimmingValue:
                    obj.SetLeafDimmingValue(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Tree_FieldIndex.ShadowRadius:
                    obj.SetShadowRadius(
                        (Int32)pair.Value,
                        cmds: null);
                    break;
                case Tree_FieldIndex.RockingSpeed:
                    obj.SetRockingSpeed(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Tree_FieldIndex.RustleSpeed:
                    obj.SetRustleSpeed(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Tree_FieldIndex.BillboardWidth:
                    obj.SetBillboardWidth(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Tree_FieldIndex.BillboardHeight:
                    obj.SetBillboardHeight(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Tree obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ITree : ITreeGetter, IMajorRecord, ILoquiClass<ITree, ITreeGetter>, ILoquiClass<Tree, ITreeGetter>
    {
        new Model Model { get; set; }
        new INotifyingSetItem<Model> Model_Property { get; }

        new String Icon { get; set; }
        new INotifyingSetItem<String> Icon_Property { get; }

        new INotifyingList<UInt32> SpeedTreeSeeds { get; }
        new Single LeafCurvature { get; set; }
        new INotifyingItem<Single> LeafCurvature_Property { get; }

        new Single MinimumLeafAngle { get; set; }
        new INotifyingItem<Single> MinimumLeafAngle_Property { get; }

        new Single MaximumLeafAngle { get; set; }
        new INotifyingItem<Single> MaximumLeafAngle_Property { get; }

        new Single BranchDimmingValue { get; set; }
        new INotifyingItem<Single> BranchDimmingValue_Property { get; }

        new Single LeafDimmingValue { get; set; }
        new INotifyingItem<Single> LeafDimmingValue_Property { get; }

        new Int32 ShadowRadius { get; set; }
        new INotifyingItem<Int32> ShadowRadius_Property { get; }

        new Single RockingSpeed { get; set; }
        new INotifyingItem<Single> RockingSpeed_Property { get; }

        new Single RustleSpeed { get; set; }
        new INotifyingItem<Single> RustleSpeed_Property { get; }

        new Single BillboardWidth { get; set; }
        new INotifyingItem<Single> BillboardWidth_Property { get; }

        new Single BillboardHeight { get; set; }
        new INotifyingItem<Single> BillboardHeight_Property { get; }

    }

    public partial interface ITreeGetter : IMajorRecordGetter
    {
        #region Model
        Model Model { get; }
        INotifyingSetItemGetter<Model> Model_Property { get; }

        #endregion
        #region Icon
        String Icon { get; }
        INotifyingSetItemGetter<String> Icon_Property { get; }

        #endregion
        #region SpeedTreeSeeds
        INotifyingListGetter<UInt32> SpeedTreeSeeds { get; }
        #endregion
        #region LeafCurvature
        Single LeafCurvature { get; }
        INotifyingItemGetter<Single> LeafCurvature_Property { get; }

        #endregion
        #region MinimumLeafAngle
        Single MinimumLeafAngle { get; }
        INotifyingItemGetter<Single> MinimumLeafAngle_Property { get; }

        #endregion
        #region MaximumLeafAngle
        Single MaximumLeafAngle { get; }
        INotifyingItemGetter<Single> MaximumLeafAngle_Property { get; }

        #endregion
        #region BranchDimmingValue
        Single BranchDimmingValue { get; }
        INotifyingItemGetter<Single> BranchDimmingValue_Property { get; }

        #endregion
        #region LeafDimmingValue
        Single LeafDimmingValue { get; }
        INotifyingItemGetter<Single> LeafDimmingValue_Property { get; }

        #endregion
        #region ShadowRadius
        Int32 ShadowRadius { get; }
        INotifyingItemGetter<Int32> ShadowRadius_Property { get; }

        #endregion
        #region RockingSpeed
        Single RockingSpeed { get; }
        INotifyingItemGetter<Single> RockingSpeed_Property { get; }

        #endregion
        #region RustleSpeed
        Single RustleSpeed { get; }
        INotifyingItemGetter<Single> RustleSpeed_Property { get; }

        #endregion
        #region BillboardWidth
        Single BillboardWidth { get; }
        INotifyingItemGetter<Single> BillboardWidth_Property { get; }

        #endregion
        #region BillboardHeight
        Single BillboardHeight { get; }
        INotifyingItemGetter<Single> BillboardHeight_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Tree_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Model = 5,
        Icon = 6,
        SpeedTreeSeeds = 7,
        LeafCurvature = 8,
        MinimumLeafAngle = 9,
        MaximumLeafAngle = 10,
        BranchDimmingValue = 11,
        LeafDimmingValue = 12,
        ShadowRadius = 13,
        RockingSpeed = 14,
        RustleSpeed = 15,
        BillboardWidth = 16,
        BillboardHeight = 17,
    }
    #endregion

    #region Registration
    public class Tree_Registration : ILoquiRegistration
    {
        public static readonly Tree_Registration Instance = new Tree_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 79,
            version: 0);

        public const string GUID = "82606775-b1a1-4c44-9052-b021c5ccc13a";

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(Tree_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Tree_ErrorMask);

        public static readonly Type ClassType = typeof(Tree);

        public static readonly Type GetterType = typeof(ITreeGetter);

        public static readonly Type SetterType = typeof(ITree);

        public static readonly Type CommonType = typeof(TreeCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Tree";

        public const string Name = "Tree";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)Tree_FieldIndex.Model;
                case "ICON":
                    return (ushort)Tree_FieldIndex.Icon;
                case "SPEEDTREESEEDS":
                    return (ushort)Tree_FieldIndex.SpeedTreeSeeds;
                case "LEAFCURVATURE":
                    return (ushort)Tree_FieldIndex.LeafCurvature;
                case "MINIMUMLEAFANGLE":
                    return (ushort)Tree_FieldIndex.MinimumLeafAngle;
                case "MAXIMUMLEAFANGLE":
                    return (ushort)Tree_FieldIndex.MaximumLeafAngle;
                case "BRANCHDIMMINGVALUE":
                    return (ushort)Tree_FieldIndex.BranchDimmingValue;
                case "LEAFDIMMINGVALUE":
                    return (ushort)Tree_FieldIndex.LeafDimmingValue;
                case "SHADOWRADIUS":
                    return (ushort)Tree_FieldIndex.ShadowRadius;
                case "ROCKINGSPEED":
                    return (ushort)Tree_FieldIndex.RockingSpeed;
                case "RUSTLESPEED":
                    return (ushort)Tree_FieldIndex.RustleSpeed;
                case "BILLBOARDWIDTH":
                    return (ushort)Tree_FieldIndex.BillboardWidth;
                case "BILLBOARDHEIGHT":
                    return (ushort)Tree_FieldIndex.BillboardHeight;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return true;
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return true;
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return "Model";
                case Tree_FieldIndex.Icon:
                    return "Icon";
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return "SpeedTreeSeeds";
                case Tree_FieldIndex.LeafCurvature:
                    return "LeafCurvature";
                case Tree_FieldIndex.MinimumLeafAngle:
                    return "MinimumLeafAngle";
                case Tree_FieldIndex.MaximumLeafAngle:
                    return "MaximumLeafAngle";
                case Tree_FieldIndex.BranchDimmingValue:
                    return "BranchDimmingValue";
                case Tree_FieldIndex.LeafDimmingValue:
                    return "LeafDimmingValue";
                case Tree_FieldIndex.ShadowRadius:
                    return "ShadowRadius";
                case Tree_FieldIndex.RockingSpeed:
                    return "RockingSpeed";
                case Tree_FieldIndex.RustleSpeed:
                    return "RustleSpeed";
                case Tree_FieldIndex.BillboardWidth:
                    return "BillboardWidth";
                case Tree_FieldIndex.BillboardHeight:
                    return "BillboardHeight";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return typeof(Model);
                case Tree_FieldIndex.Icon:
                    return typeof(String);
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return typeof(NotifyingList<UInt32>);
                case Tree_FieldIndex.LeafCurvature:
                    return typeof(Single);
                case Tree_FieldIndex.MinimumLeafAngle:
                    return typeof(Single);
                case Tree_FieldIndex.MaximumLeafAngle:
                    return typeof(Single);
                case Tree_FieldIndex.BranchDimmingValue:
                    return typeof(Single);
                case Tree_FieldIndex.LeafDimmingValue:
                    return typeof(Single);
                case Tree_FieldIndex.ShadowRadius:
                    return typeof(Int32);
                case Tree_FieldIndex.RockingSpeed:
                    return typeof(Single);
                case Tree_FieldIndex.RustleSpeed:
                    return typeof(Single);
                case Tree_FieldIndex.BillboardWidth:
                    return typeof(Single);
                case Tree_FieldIndex.BillboardHeight:
                    return typeof(Single);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType TREE_HEADER = new RecordType("TREE");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType BNAM_HEADER = new RecordType("BNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = TREE_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class TreeCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ITree item,
            ITreeGetter rhs,
            ITreeGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            Tree_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Model_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new Model_ErrorMask();
                                            baseMask.SetNthMask((int)Tree_FieldIndex.Model, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Tree_FieldIndex.Model, ex);
                }
            }
            if (copyMask?.Icon ?? true)
            {
                try
                {
                    item.Icon_Property.SetToWithDefault(
                        rhs: rhs.Icon_Property,
                        def: def?.Icon_Property);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Tree_FieldIndex.Icon, ex);
                }
            }
            if (copyMask?.SpeedTreeSeeds != CopyOption.Skip)
            {
                try
                {
                    item.SpeedTreeSeeds.SetToWithDefault(
                        rhs.SpeedTreeSeeds,
                        def?.SpeedTreeSeeds,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Tree_FieldIndex.SpeedTreeSeeds, ex);
                }
            }
            if (copyMask?.LeafCurvature ?? true)
            {
                try
                {
                    item.LeafCurvature_Property.Set(
                        value: rhs.LeafCurvature,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Tree_FieldIndex.LeafCurvature, ex);
                }
            }
            if (copyMask?.MinimumLeafAngle ?? true)
            {
                try
                {
                    item.MinimumLeafAngle_Property.Set(
                        value: rhs.MinimumLeafAngle,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Tree_FieldIndex.MinimumLeafAngle, ex);
                }
            }
            if (copyMask?.MaximumLeafAngle ?? true)
            {
                try
                {
                    item.MaximumLeafAngle_Property.Set(
                        value: rhs.MaximumLeafAngle,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Tree_FieldIndex.MaximumLeafAngle, ex);
                }
            }
            if (copyMask?.BranchDimmingValue ?? true)
            {
                try
                {
                    item.BranchDimmingValue_Property.Set(
                        value: rhs.BranchDimmingValue,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Tree_FieldIndex.BranchDimmingValue, ex);
                }
            }
            if (copyMask?.LeafDimmingValue ?? true)
            {
                try
                {
                    item.LeafDimmingValue_Property.Set(
                        value: rhs.LeafDimmingValue,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Tree_FieldIndex.LeafDimmingValue, ex);
                }
            }
            if (copyMask?.ShadowRadius ?? true)
            {
                try
                {
                    item.ShadowRadius_Property.Set(
                        value: rhs.ShadowRadius,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Tree_FieldIndex.ShadowRadius, ex);
                }
            }
            if (copyMask?.RockingSpeed ?? true)
            {
                try
                {
                    item.RockingSpeed_Property.Set(
                        value: rhs.RockingSpeed,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Tree_FieldIndex.RockingSpeed, ex);
                }
            }
            if (copyMask?.RustleSpeed ?? true)
            {
                try
                {
                    item.RustleSpeed_Property.Set(
                        value: rhs.RustleSpeed,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Tree_FieldIndex.RustleSpeed, ex);
                }
            }
            if (copyMask?.BillboardWidth ?? true)
            {
                try
                {
                    item.BillboardWidth_Property.Set(
                        value: rhs.BillboardWidth,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Tree_FieldIndex.BillboardWidth, ex);
                }
            }
            if (copyMask?.BillboardHeight ?? true)
            {
                try
                {
                    item.BillboardHeight_Property.Set(
                        value: rhs.BillboardHeight,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Tree_FieldIndex.BillboardHeight, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ITree obj,
            NotifyingFireParameters cmds = null)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Tree_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                case Tree_FieldIndex.Icon:
                    obj.Icon_Property.HasBeenSet = on;
                    break;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    obj.SpeedTreeSeeds.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ITree obj,
            NotifyingUnsetParameters cmds = null)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case Tree_FieldIndex.Icon:
                    obj.Icon_Property.Unset(cmds);
                    break;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    obj.SpeedTreeSeeds.Unset(cmds);
                    break;
                case Tree_FieldIndex.LeafCurvature:
                    obj.LeafCurvature = default(Single);
                    break;
                case Tree_FieldIndex.MinimumLeafAngle:
                    obj.MinimumLeafAngle = default(Single);
                    break;
                case Tree_FieldIndex.MaximumLeafAngle:
                    obj.MaximumLeafAngle = default(Single);
                    break;
                case Tree_FieldIndex.BranchDimmingValue:
                    obj.BranchDimmingValue = default(Single);
                    break;
                case Tree_FieldIndex.LeafDimmingValue:
                    obj.LeafDimmingValue = default(Single);
                    break;
                case Tree_FieldIndex.ShadowRadius:
                    obj.ShadowRadius = default(Int32);
                    break;
                case Tree_FieldIndex.RockingSpeed:
                    obj.RockingSpeed = default(Single);
                    break;
                case Tree_FieldIndex.RustleSpeed:
                    obj.RustleSpeed = default(Single);
                    break;
                case Tree_FieldIndex.BillboardWidth:
                    obj.BillboardWidth = default(Single);
                    break;
                case Tree_FieldIndex.BillboardHeight:
                    obj.BillboardHeight = default(Single);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ITree obj)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                    return true;
                case Tree_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                case Tree_FieldIndex.Icon:
                    return obj.Icon_Property.HasBeenSet;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return obj.SpeedTreeSeeds.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ITreeGetter obj)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return obj.Model;
                case Tree_FieldIndex.Icon:
                    return obj.Icon;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return obj.SpeedTreeSeeds;
                case Tree_FieldIndex.LeafCurvature:
                    return obj.LeafCurvature;
                case Tree_FieldIndex.MinimumLeafAngle:
                    return obj.MinimumLeafAngle;
                case Tree_FieldIndex.MaximumLeafAngle:
                    return obj.MaximumLeafAngle;
                case Tree_FieldIndex.BranchDimmingValue:
                    return obj.BranchDimmingValue;
                case Tree_FieldIndex.LeafDimmingValue:
                    return obj.LeafDimmingValue;
                case Tree_FieldIndex.ShadowRadius:
                    return obj.ShadowRadius;
                case Tree_FieldIndex.RockingSpeed:
                    return obj.RockingSpeed;
                case Tree_FieldIndex.RustleSpeed:
                    return obj.RustleSpeed;
                case Tree_FieldIndex.BillboardWidth:
                    return obj.BillboardWidth;
                case Tree_FieldIndex.BillboardHeight:
                    return obj.BillboardHeight;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ITree item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.Icon_Property.Unset(cmds.ToUnsetParams());
            item.SpeedTreeSeeds.Unset(cmds.ToUnsetParams());
            item.LeafCurvature = default(Single);
            item.MinimumLeafAngle = default(Single);
            item.MaximumLeafAngle = default(Single);
            item.BranchDimmingValue = default(Single);
            item.LeafDimmingValue = default(Single);
            item.ShadowRadius = default(Int32);
            item.RockingSpeed = default(Single);
            item.RustleSpeed = default(Single);
            item.BillboardWidth = default(Single);
            item.BillboardHeight = default(Single);
        }

        public static Tree_Mask<bool> GetEqualsMask(
            this ITreeGetter item,
            ITreeGetter rhs)
        {
            var ret = new Tree_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ITreeGetter item,
            ITreeGetter rhs,
            Tree_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Icon = item.Icon_Property.Equals(rhs.Icon_Property, (l, r) => object.Equals(l, r));
            if (item.SpeedTreeSeeds.HasBeenSet == rhs.SpeedTreeSeeds.HasBeenSet)
            {
                if (item.SpeedTreeSeeds.HasBeenSet)
                {
                    ret.SpeedTreeSeeds = new MaskItem<bool, IEnumerable<bool>>();
                    ret.SpeedTreeSeeds.Specific = item.SpeedTreeSeeds.SelectAgainst<UInt32, bool>(rhs.SpeedTreeSeeds, ((l, r) => object.Equals(l, r)), out ret.SpeedTreeSeeds.Overall);
                    ret.SpeedTreeSeeds.Overall = ret.SpeedTreeSeeds.Overall && ret.SpeedTreeSeeds.Specific.All((b) => b);
                }
                else
                {
                    ret.SpeedTreeSeeds = new MaskItem<bool, IEnumerable<bool>>();
                    ret.SpeedTreeSeeds.Overall = true;
                }
            }
            else
            {
                ret.SpeedTreeSeeds = new MaskItem<bool, IEnumerable<bool>>();
                ret.SpeedTreeSeeds.Overall = false;
            }
            ret.LeafCurvature = item.LeafCurvature == rhs.LeafCurvature;
            ret.MinimumLeafAngle = item.MinimumLeafAngle == rhs.MinimumLeafAngle;
            ret.MaximumLeafAngle = item.MaximumLeafAngle == rhs.MaximumLeafAngle;
            ret.BranchDimmingValue = item.BranchDimmingValue == rhs.BranchDimmingValue;
            ret.LeafDimmingValue = item.LeafDimmingValue == rhs.LeafDimmingValue;
            ret.ShadowRadius = item.ShadowRadius == rhs.ShadowRadius;
            ret.RockingSpeed = item.RockingSpeed == rhs.RockingSpeed;
            ret.RustleSpeed = item.RustleSpeed == rhs.RustleSpeed;
            ret.BillboardWidth = item.BillboardWidth == rhs.BillboardWidth;
            ret.BillboardHeight = item.BillboardHeight == rhs.BillboardHeight;
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ITreeGetter item,
            string name = null,
            Tree_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ITreeGetter item,
            FileGeneration fg,
            string name = null,
            Tree_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Tree)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Tree)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.SpeedTreeSeeds?.Overall ?? true)
                {
                    fg.AppendLine("SpeedTreeSeeds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.SpeedTreeSeeds)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.LeafCurvature ?? true)
                {
                    fg.AppendLine($"LeafCurvature => {item.LeafCurvature}");
                }
                if (printMask?.MinimumLeafAngle ?? true)
                {
                    fg.AppendLine($"MinimumLeafAngle => {item.MinimumLeafAngle}");
                }
                if (printMask?.MaximumLeafAngle ?? true)
                {
                    fg.AppendLine($"MaximumLeafAngle => {item.MaximumLeafAngle}");
                }
                if (printMask?.BranchDimmingValue ?? true)
                {
                    fg.AppendLine($"BranchDimmingValue => {item.BranchDimmingValue}");
                }
                if (printMask?.LeafDimmingValue ?? true)
                {
                    fg.AppendLine($"LeafDimmingValue => {item.LeafDimmingValue}");
                }
                if (printMask?.ShadowRadius ?? true)
                {
                    fg.AppendLine($"ShadowRadius => {item.ShadowRadius}");
                }
                if (printMask?.RockingSpeed ?? true)
                {
                    fg.AppendLine($"RockingSpeed => {item.RockingSpeed}");
                }
                if (printMask?.RustleSpeed ?? true)
                {
                    fg.AppendLine($"RustleSpeed => {item.RustleSpeed}");
                }
                if (printMask?.BillboardWidth ?? true)
                {
                    fg.AppendLine($"BillboardWidth => {item.BillboardWidth}");
                }
                if (printMask?.BillboardHeight ?? true)
                {
                    fg.AppendLine($"BillboardHeight => {item.BillboardHeight}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ITreeGetter item,
            Tree_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_Property.HasBeenSet) return false;
            if (checkMask.SpeedTreeSeeds.Overall.HasValue && checkMask.SpeedTreeSeeds.Overall.Value != item.SpeedTreeSeeds.HasBeenSet) return false;
            return true;
        }

        public static Tree_Mask<bool> GetHasBeenSetMask(ITreeGetter item)
        {
            var ret = new Tree_Mask<bool>();
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model));
            ret.Icon = item.Icon_Property.HasBeenSet;
            ret.SpeedTreeSeeds = new MaskItem<bool, IEnumerable<bool>>(item.SpeedTreeSeeds.HasBeenSet, null);
            ret.LeafCurvature = true;
            ret.MinimumLeafAngle = true;
            ret.MaximumLeafAngle = true;
            ret.BranchDimmingValue = true;
            ret.LeafDimmingValue = true;
            ret.ShadowRadius = true;
            ret.RockingSpeed = true;
            ret.RustleSpeed = true;
            ret.BillboardWidth = true;
            ret.BillboardHeight = true;
            return ret;
        }

        public static Tree_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Tree_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Tree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            ITreeGetter item,
            bool doMasks,
            out Tree_ErrorMask errorMask,
            string name = null)
        {
            Tree_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Tree_ErrorMask()) : default(Func<Tree_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XElement node,
            ITreeGetter item,
            Func<Tree_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Tree");
                node.Add(elem);
                if (name != null)
                {
                    elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Tree");
                }
                if (item.Model_Property.HasBeenSet)
                {
                    LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Write(
                        node: elem,
                        item: item.Model_Property,
                        name: nameof(item.Model),
                        fieldIndex: (int)Tree_FieldIndex.Model,
                        errorMask: errorMask);
                }
                if (item.Icon_Property.HasBeenSet)
                {
                    StringXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.Icon),
                        item: item.Icon_Property,
                        fieldIndex: (int)Tree_FieldIndex.Icon,
                        errorMask: errorMask);
                }
                if (item.SpeedTreeSeeds.HasBeenSet)
                {
                    ListXmlTranslation<UInt32, Exception>.Instance.Write(
                        node: elem,
                        name: nameof(item.SpeedTreeSeeds),
                        item: item.SpeedTreeSeeds,
                        fieldIndex: (int)Tree_FieldIndex.SpeedTreeSeeds,
                        errorMask: errorMask,
                        transl: (XElement subNode, UInt32 subItem, bool listDoMasks, out Exception listSubMask) =>
                        {
                            UInt32XmlTranslation.Instance.Write(
                                node: subNode,
                                name: "Item",
                                item: subItem,
                                doMasks: errorMask != null,
                                errorMask: out listSubMask);
                        }
                        );
                }
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.LeafCurvature),
                    item: item.LeafCurvature_Property,
                    fieldIndex: (int)Tree_FieldIndex.LeafCurvature,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.MinimumLeafAngle),
                    item: item.MinimumLeafAngle_Property,
                    fieldIndex: (int)Tree_FieldIndex.MinimumLeafAngle,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.MaximumLeafAngle),
                    item: item.MaximumLeafAngle_Property,
                    fieldIndex: (int)Tree_FieldIndex.MaximumLeafAngle,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.BranchDimmingValue),
                    item: item.BranchDimmingValue_Property,
                    fieldIndex: (int)Tree_FieldIndex.BranchDimmingValue,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.LeafDimmingValue),
                    item: item.LeafDimmingValue_Property,
                    fieldIndex: (int)Tree_FieldIndex.LeafDimmingValue,
                    errorMask: errorMask);
                Int32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.ShadowRadius),
                    item: item.ShadowRadius_Property,
                    fieldIndex: (int)Tree_FieldIndex.ShadowRadius,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RockingSpeed),
                    item: item.RockingSpeed_Property,
                    fieldIndex: (int)Tree_FieldIndex.RockingSpeed,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RustleSpeed),
                    item: item.RustleSpeed_Property,
                    fieldIndex: (int)Tree_FieldIndex.RustleSpeed,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.BillboardWidth),
                    item: item.BillboardWidth_Property,
                    fieldIndex: (int)Tree_FieldIndex.BillboardWidth,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.BillboardHeight),
                    item: item.BillboardHeight_Property,
                    fieldIndex: (int)Tree_FieldIndex.BillboardHeight,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Tree item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Tree_ErrorMask errorMask)
        {
            Tree_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Tree_ErrorMask()) : default(Func<Tree_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            Tree item,
            RecordTypeConverter recordTypeConverter,
            Func<Tree_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Tree_Registration.TREE_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Tree item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Tree_ErrorMask> errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                fieldIndex: (int)Tree_FieldIndex.Model,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Icon_Property,
                fieldIndex: (int)Tree_FieldIndex.Icon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Tree_Registration.ICON_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<UInt32, Exception>.Instance.Write(
                writer: writer,
                item: item.SpeedTreeSeeds,
                fieldIndex: (int)Tree_FieldIndex.SpeedTreeSeeds,
                recordType: Tree_Registration.SNAM_HEADER,
                errorMask: errorMask,
                transl: (MutagenWriter subWriter, UInt32 subItem, bool listDoMasks, out Exception listSubMask) =>
                {
                    Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            using (HeaderExport.ExportSubRecordHeader(writer, Tree_Registration.CNAM_HEADER))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LeafCurvature_Property,
                    fieldIndex: (int)Tree_FieldIndex.LeafCurvature,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MinimumLeafAngle_Property,
                    fieldIndex: (int)Tree_FieldIndex.MinimumLeafAngle,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MaximumLeafAngle_Property,
                    fieldIndex: (int)Tree_FieldIndex.MaximumLeafAngle,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BranchDimmingValue_Property,
                    fieldIndex: (int)Tree_FieldIndex.BranchDimmingValue,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LeafDimmingValue_Property,
                    fieldIndex: (int)Tree_FieldIndex.LeafDimmingValue,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ShadowRadius_Property,
                    fieldIndex: (int)Tree_FieldIndex.ShadowRadius,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.RockingSpeed_Property,
                    fieldIndex: (int)Tree_FieldIndex.RockingSpeed,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.RustleSpeed_Property,
                    fieldIndex: (int)Tree_FieldIndex.RustleSpeed,
                    errorMask: errorMask);
            }
            using (HeaderExport.ExportSubRecordHeader(writer, Tree_Registration.BNAM_HEADER))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BillboardWidth_Property,
                    fieldIndex: (int)Tree_FieldIndex.BillboardWidth,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BillboardHeight_Property,
                    fieldIndex: (int)Tree_FieldIndex.BillboardHeight,
                    errorMask: errorMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Tree_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Tree_Mask<T>>
    {
        #region Ctors
        public Tree_Mask()
        {
        }

        public Tree_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Icon = initialValue;
            this.SpeedTreeSeeds = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.LeafCurvature = initialValue;
            this.MinimumLeafAngle = initialValue;
            this.MaximumLeafAngle = initialValue;
            this.BranchDimmingValue = initialValue;
            this.LeafDimmingValue = initialValue;
            this.ShadowRadius = initialValue;
            this.RockingSpeed = initialValue;
            this.RustleSpeed = initialValue;
            this.BillboardWidth = initialValue;
            this.BillboardHeight = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Icon;
        public MaskItem<T, IEnumerable<T>> SpeedTreeSeeds;
        public T LeafCurvature;
        public T MinimumLeafAngle;
        public T MaximumLeafAngle;
        public T BranchDimmingValue;
        public T LeafDimmingValue;
        public T ShadowRadius;
        public T RockingSpeed;
        public T RustleSpeed;
        public T BillboardWidth;
        public T BillboardHeight;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Tree_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Tree_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.SpeedTreeSeeds, rhs.SpeedTreeSeeds)) return false;
            if (!object.Equals(this.LeafCurvature, rhs.LeafCurvature)) return false;
            if (!object.Equals(this.MinimumLeafAngle, rhs.MinimumLeafAngle)) return false;
            if (!object.Equals(this.MaximumLeafAngle, rhs.MaximumLeafAngle)) return false;
            if (!object.Equals(this.BranchDimmingValue, rhs.BranchDimmingValue)) return false;
            if (!object.Equals(this.LeafDimmingValue, rhs.LeafDimmingValue)) return false;
            if (!object.Equals(this.ShadowRadius, rhs.ShadowRadius)) return false;
            if (!object.Equals(this.RockingSpeed, rhs.RockingSpeed)) return false;
            if (!object.Equals(this.RustleSpeed, rhs.RustleSpeed)) return false;
            if (!object.Equals(this.BillboardWidth, rhs.BillboardWidth)) return false;
            if (!object.Equals(this.BillboardHeight, rhs.BillboardHeight)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.SpeedTreeSeeds?.GetHashCode());
            ret = ret.CombineHashCode(this.LeafCurvature?.GetHashCode());
            ret = ret.CombineHashCode(this.MinimumLeafAngle?.GetHashCode());
            ret = ret.CombineHashCode(this.MaximumLeafAngle?.GetHashCode());
            ret = ret.CombineHashCode(this.BranchDimmingValue?.GetHashCode());
            ret = ret.CombineHashCode(this.LeafDimmingValue?.GetHashCode());
            ret = ret.CombineHashCode(this.ShadowRadius?.GetHashCode());
            ret = ret.CombineHashCode(this.RockingSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.RustleSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.BillboardWidth?.GetHashCode());
            ret = ret.CombineHashCode(this.BillboardHeight?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Icon)) return false;
            if (this.SpeedTreeSeeds != null)
            {
                if (!eval(this.SpeedTreeSeeds.Overall)) return false;
                if (this.SpeedTreeSeeds.Specific != null)
                {
                    foreach (var item in this.SpeedTreeSeeds.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (!eval(this.LeafCurvature)) return false;
            if (!eval(this.MinimumLeafAngle)) return false;
            if (!eval(this.MaximumLeafAngle)) return false;
            if (!eval(this.BranchDimmingValue)) return false;
            if (!eval(this.LeafDimmingValue)) return false;
            if (!eval(this.ShadowRadius)) return false;
            if (!eval(this.RockingSpeed)) return false;
            if (!eval(this.RustleSpeed)) return false;
            if (!eval(this.BillboardWidth)) return false;
            if (!eval(this.BillboardHeight)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Tree_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Tree_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Tree_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Icon = eval(this.Icon);
            if (SpeedTreeSeeds != null)
            {
                obj.SpeedTreeSeeds = new MaskItem<R, IEnumerable<R>>();
                obj.SpeedTreeSeeds.Overall = eval(this.SpeedTreeSeeds.Overall);
                if (SpeedTreeSeeds.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.SpeedTreeSeeds.Specific = l;
                    foreach (var item in SpeedTreeSeeds.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            obj.LeafCurvature = eval(this.LeafCurvature);
            obj.MinimumLeafAngle = eval(this.MinimumLeafAngle);
            obj.MaximumLeafAngle = eval(this.MaximumLeafAngle);
            obj.BranchDimmingValue = eval(this.BranchDimmingValue);
            obj.LeafDimmingValue = eval(this.LeafDimmingValue);
            obj.ShadowRadius = eval(this.ShadowRadius);
            obj.RockingSpeed = eval(this.RockingSpeed);
            obj.RustleSpeed = eval(this.RustleSpeed);
            obj.BillboardWidth = eval(this.BillboardWidth);
            obj.BillboardHeight = eval(this.BillboardHeight);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.SpeedTreeSeeds.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Tree_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Tree_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Tree_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.SpeedTreeSeeds?.Overall ?? true)
                {
                    fg.AppendLine("SpeedTreeSeeds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (SpeedTreeSeeds.Overall != null)
                        {
                            fg.AppendLine(SpeedTreeSeeds.Overall.ToString());
                        }
                        if (SpeedTreeSeeds.Specific != null)
                        {
                            foreach (var subItem in SpeedTreeSeeds.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.LeafCurvature ?? true)
                {
                    fg.AppendLine($"LeafCurvature => {LeafCurvature}");
                }
                if (printMask?.MinimumLeafAngle ?? true)
                {
                    fg.AppendLine($"MinimumLeafAngle => {MinimumLeafAngle}");
                }
                if (printMask?.MaximumLeafAngle ?? true)
                {
                    fg.AppendLine($"MaximumLeafAngle => {MaximumLeafAngle}");
                }
                if (printMask?.BranchDimmingValue ?? true)
                {
                    fg.AppendLine($"BranchDimmingValue => {BranchDimmingValue}");
                }
                if (printMask?.LeafDimmingValue ?? true)
                {
                    fg.AppendLine($"LeafDimmingValue => {LeafDimmingValue}");
                }
                if (printMask?.ShadowRadius ?? true)
                {
                    fg.AppendLine($"ShadowRadius => {ShadowRadius}");
                }
                if (printMask?.RockingSpeed ?? true)
                {
                    fg.AppendLine($"RockingSpeed => {RockingSpeed}");
                }
                if (printMask?.RustleSpeed ?? true)
                {
                    fg.AppendLine($"RustleSpeed => {RustleSpeed}");
                }
                if (printMask?.BillboardWidth ?? true)
                {
                    fg.AppendLine($"BillboardWidth => {BillboardWidth}");
                }
                if (printMask?.BillboardHeight ?? true)
                {
                    fg.AppendLine($"BillboardHeight => {BillboardHeight}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Tree_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Tree_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Icon;
        public MaskItem<Exception, IEnumerable<Exception>> SpeedTreeSeeds;
        public Exception LeafCurvature;
        public Exception MinimumLeafAngle;
        public Exception MaximumLeafAngle;
        public Exception BranchDimmingValue;
        public Exception LeafDimmingValue;
        public Exception ShadowRadius;
        public Exception RockingSpeed;
        public Exception RustleSpeed;
        public Exception BillboardWidth;
        public Exception BillboardHeight;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return Model;
                case Tree_FieldIndex.Icon:
                    return Icon;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return SpeedTreeSeeds;
                case Tree_FieldIndex.LeafCurvature:
                    return LeafCurvature;
                case Tree_FieldIndex.MinimumLeafAngle:
                    return MinimumLeafAngle;
                case Tree_FieldIndex.MaximumLeafAngle:
                    return MaximumLeafAngle;
                case Tree_FieldIndex.BranchDimmingValue:
                    return BranchDimmingValue;
                case Tree_FieldIndex.LeafDimmingValue:
                    return LeafDimmingValue;
                case Tree_FieldIndex.ShadowRadius:
                    return ShadowRadius;
                case Tree_FieldIndex.RockingSpeed:
                    return RockingSpeed;
                case Tree_FieldIndex.RustleSpeed:
                    return RustleSpeed;
                case Tree_FieldIndex.BillboardWidth:
                    return BillboardWidth;
                case Tree_FieldIndex.BillboardHeight:
                    return BillboardHeight;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Tree_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    this.SpeedTreeSeeds = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Tree_FieldIndex.LeafCurvature:
                    this.LeafCurvature = ex;
                    break;
                case Tree_FieldIndex.MinimumLeafAngle:
                    this.MinimumLeafAngle = ex;
                    break;
                case Tree_FieldIndex.MaximumLeafAngle:
                    this.MaximumLeafAngle = ex;
                    break;
                case Tree_FieldIndex.BranchDimmingValue:
                    this.BranchDimmingValue = ex;
                    break;
                case Tree_FieldIndex.LeafDimmingValue:
                    this.LeafDimmingValue = ex;
                    break;
                case Tree_FieldIndex.ShadowRadius:
                    this.ShadowRadius = ex;
                    break;
                case Tree_FieldIndex.RockingSpeed:
                    this.RockingSpeed = ex;
                    break;
                case Tree_FieldIndex.RustleSpeed:
                    this.RustleSpeed = ex;
                    break;
                case Tree_FieldIndex.BillboardWidth:
                    this.BillboardWidth = ex;
                    break;
                case Tree_FieldIndex.BillboardHeight:
                    this.BillboardHeight = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Tree_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    this.SpeedTreeSeeds = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Tree_FieldIndex.LeafCurvature:
                    this.LeafCurvature = (Exception)obj;
                    break;
                case Tree_FieldIndex.MinimumLeafAngle:
                    this.MinimumLeafAngle = (Exception)obj;
                    break;
                case Tree_FieldIndex.MaximumLeafAngle:
                    this.MaximumLeafAngle = (Exception)obj;
                    break;
                case Tree_FieldIndex.BranchDimmingValue:
                    this.BranchDimmingValue = (Exception)obj;
                    break;
                case Tree_FieldIndex.LeafDimmingValue:
                    this.LeafDimmingValue = (Exception)obj;
                    break;
                case Tree_FieldIndex.ShadowRadius:
                    this.ShadowRadius = (Exception)obj;
                    break;
                case Tree_FieldIndex.RockingSpeed:
                    this.RockingSpeed = (Exception)obj;
                    break;
                case Tree_FieldIndex.RustleSpeed:
                    this.RustleSpeed = (Exception)obj;
                    break;
                case Tree_FieldIndex.BillboardWidth:
                    this.BillboardWidth = (Exception)obj;
                    break;
                case Tree_FieldIndex.BillboardHeight:
                    this.BillboardHeight = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (Icon != null) return true;
            if (SpeedTreeSeeds != null) return true;
            if (LeafCurvature != null) return true;
            if (MinimumLeafAngle != null) return true;
            if (MaximumLeafAngle != null) return true;
            if (BranchDimmingValue != null) return true;
            if (LeafDimmingValue != null) return true;
            if (ShadowRadius != null) return true;
            if (RockingSpeed != null) return true;
            if (RustleSpeed != null) return true;
            if (BillboardWidth != null) return true;
            if (BillboardHeight != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Tree_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            Model?.ToString(fg);
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine("SpeedTreeSeeds =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (SpeedTreeSeeds.Overall != null)
                {
                    fg.AppendLine(SpeedTreeSeeds.Overall.ToString());
                }
                if (SpeedTreeSeeds.Specific != null)
                {
                    foreach (var subItem in SpeedTreeSeeds.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"LeafCurvature => {LeafCurvature}");
            fg.AppendLine($"MinimumLeafAngle => {MinimumLeafAngle}");
            fg.AppendLine($"MaximumLeafAngle => {MaximumLeafAngle}");
            fg.AppendLine($"BranchDimmingValue => {BranchDimmingValue}");
            fg.AppendLine($"LeafDimmingValue => {LeafDimmingValue}");
            fg.AppendLine($"ShadowRadius => {ShadowRadius}");
            fg.AppendLine($"RockingSpeed => {RockingSpeed}");
            fg.AppendLine($"RustleSpeed => {RustleSpeed}");
            fg.AppendLine($"BillboardWidth => {BillboardWidth}");
            fg.AppendLine($"BillboardHeight => {BillboardHeight}");
        }
        #endregion

        #region Combine
        public Tree_ErrorMask Combine(Tree_ErrorMask rhs)
        {
            var ret = new Tree_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.SpeedTreeSeeds = new MaskItem<Exception, IEnumerable<Exception>>(this.SpeedTreeSeeds.Overall.Combine(rhs.SpeedTreeSeeds.Overall), new List<Exception>(this.SpeedTreeSeeds.Specific.And(rhs.SpeedTreeSeeds.Specific)));
            ret.LeafCurvature = this.LeafCurvature.Combine(rhs.LeafCurvature);
            ret.MinimumLeafAngle = this.MinimumLeafAngle.Combine(rhs.MinimumLeafAngle);
            ret.MaximumLeafAngle = this.MaximumLeafAngle.Combine(rhs.MaximumLeafAngle);
            ret.BranchDimmingValue = this.BranchDimmingValue.Combine(rhs.BranchDimmingValue);
            ret.LeafDimmingValue = this.LeafDimmingValue.Combine(rhs.LeafDimmingValue);
            ret.ShadowRadius = this.ShadowRadius.Combine(rhs.ShadowRadius);
            ret.RockingSpeed = this.RockingSpeed.Combine(rhs.RockingSpeed);
            ret.RustleSpeed = this.RustleSpeed.Combine(rhs.RustleSpeed);
            ret.BillboardWidth = this.BillboardWidth.Combine(rhs.BillboardWidth);
            ret.BillboardHeight = this.BillboardHeight.Combine(rhs.BillboardHeight);
            return ret;
        }
        public static Tree_ErrorMask Combine(Tree_ErrorMask lhs, Tree_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Tree_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Icon;
        public CopyOption SpeedTreeSeeds;
        public bool LeafCurvature;
        public bool MinimumLeafAngle;
        public bool MaximumLeafAngle;
        public bool BranchDimmingValue;
        public bool LeafDimmingValue;
        public bool ShadowRadius;
        public bool RockingSpeed;
        public bool RustleSpeed;
        public bool BillboardWidth;
        public bool BillboardHeight;
        #endregion

    }
    #endregion





    #endregion

}
