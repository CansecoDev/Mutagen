/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Tree :
        OblivionMajorRecord,
        ITreeInternal,
        ILoquiObjectSetter<Tree>,
        IEquatable<Tree>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Tree_Registration.Instance;
        public new static Tree_Registration Registration => Tree_Registration.Instance;
        protected override object CommonInstance => TreeCommon.Instance;

        #region Ctor
        protected Tree()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)Tree_FieldIndex.Model];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Tree_FieldIndex.Model, nameof(Model_IsSet));
        }
        bool ITreeGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Model, value, _hasBeenSetTracker, hasBeenSet, (int)Tree_FieldIndex.Model, nameof(Model), nameof(Model_IsSet));
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter ITreeGetter.Model => this.Model;
        #endregion
        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)Tree_FieldIndex.Icon];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Tree_FieldIndex.Icon, nameof(Icon_IsSet));
        }
        bool ITreeGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String ITreeGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Icon, value, _hasBeenSetTracker, markSet, (int)Tree_FieldIndex.Icon, nameof(Icon), nameof(Icon_IsSet));
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region SpeedTreeSeeds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<UInt32> _SpeedTreeSeeds = new SourceSetList<UInt32>();
        public ISourceSetList<UInt32> SpeedTreeSeeds => _SpeedTreeSeeds;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<UInt32> ITree.SpeedTreeSeeds => _SpeedTreeSeeds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<UInt32> ITreeGetter.SpeedTreeSeeds => _SpeedTreeSeeds;
        #endregion

        #endregion
        #region LeafCurvature
        private Single _LeafCurvature;
        public Single LeafCurvature
        {
            get => this._LeafCurvature;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._LeafCurvature, value, nameof(LeafCurvature));
            }
        }
        #endregion
        #region MinimumLeafAngle
        private Single _MinimumLeafAngle;
        public Single MinimumLeafAngle
        {
            get => this._MinimumLeafAngle;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._MinimumLeafAngle, value, nameof(MinimumLeafAngle));
            }
        }
        #endregion
        #region MaximumLeafAngle
        private Single _MaximumLeafAngle;
        public Single MaximumLeafAngle
        {
            get => this._MaximumLeafAngle;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._MaximumLeafAngle, value, nameof(MaximumLeafAngle));
            }
        }
        #endregion
        #region BranchDimmingValue
        private Single _BranchDimmingValue;
        public Single BranchDimmingValue
        {
            get => this._BranchDimmingValue;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._BranchDimmingValue, value, nameof(BranchDimmingValue));
            }
        }
        #endregion
        #region LeafDimmingValue
        private Single _LeafDimmingValue;
        public Single LeafDimmingValue
        {
            get => this._LeafDimmingValue;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._LeafDimmingValue, value, nameof(LeafDimmingValue));
            }
        }
        #endregion
        #region ShadowRadius
        private Int32 _ShadowRadius;
        public Int32 ShadowRadius
        {
            get => this._ShadowRadius;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._ShadowRadius, value, nameof(ShadowRadius));
            }
        }
        #endregion
        #region RockingSpeed
        private Single _RockingSpeed;
        public Single RockingSpeed
        {
            get => this._RockingSpeed;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._RockingSpeed, value, nameof(RockingSpeed));
            }
        }
        #endregion
        #region RustleSpeed
        private Single _RustleSpeed;
        public Single RustleSpeed
        {
            get => this._RustleSpeed;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._RustleSpeed, value, nameof(RustleSpeed));
            }
        }
        #endregion
        #region BillboardWidth
        private Single _BillboardWidth;
        public Single BillboardWidth
        {
            get => this._BillboardWidth;
            set
            {
                this.BNAMDataTypeState |= BNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._BillboardWidth, value, nameof(BillboardWidth));
            }
        }
        #endregion
        #region BillboardHeight
        private Single _BillboardHeight;
        public Single BillboardHeight
        {
            get => this._BillboardHeight;
            set
            {
                this.BNAMDataTypeState |= BNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._BillboardHeight, value, nameof(BillboardHeight));
            }
        }
        #endregion
        #region CNAMDataTypeState
        private Tree.CNAMDataType _CNAMDataTypeState;
        public Tree.CNAMDataType CNAMDataTypeState
        {
            get => this._CNAMDataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._CNAMDataTypeState, value, nameof(CNAMDataTypeState));
        }
        Tree.CNAMDataType ITreeInternal.CNAMDataTypeState
        {
            get => this.CNAMDataTypeState;
            set => this.CNAMDataTypeState = value;
        }
        Tree.CNAMDataType ITreeInternalGetter.CNAMDataTypeState
        {
            get => this.CNAMDataTypeState;
        }
        #endregion
        #region BNAMDataTypeState
        private Tree.BNAMDataType _BNAMDataTypeState;
        public Tree.BNAMDataType BNAMDataTypeState
        {
            get => this._BNAMDataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._BNAMDataTypeState, value, nameof(BNAMDataTypeState));
        }
        Tree.BNAMDataType ITreeInternal.BNAMDataTypeState
        {
            get => this.BNAMDataTypeState;
            set => this.BNAMDataTypeState = value;
        }
        Tree.BNAMDataType ITreeInternalGetter.BNAMDataTypeState
        {
            get => this.BNAMDataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITreeInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            TreeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ITreeInternalGetter rhs)) return false;
            return ((TreeCommon)((ILoquiObject)this).CommonInstance).Equals(this, rhs);
        }

        public bool Equals(Tree obj)
        {
            return ((TreeCommon)((ILoquiObject)this).CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((TreeCommon)((ILoquiObject)this).CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => TreeXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static Tree CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Tree_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Tree CreateFromXml(
            XElement node,
            out Tree_ErrorMask errorMask,
            bool doMasks = true,
            Tree_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Tree_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Tree CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Tree() : null;
                    break;
                default:
                    break;
            }
            var ret = new Tree();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    TreeXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Tree CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Tree_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Tree CreateFromXml(
            string path,
            out Tree_ErrorMask errorMask,
            Tree_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Tree CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Tree_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Tree CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Tree_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Tree CreateFromXml(
            Stream stream,
            out Tree_ErrorMask errorMask,
            Tree_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Tree CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Tree_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            Tree item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasCNAMDataType":
                    item.CNAMDataTypeState |= Tree.CNAMDataType.Has;
                    break;
                case "HasBNAMDataType":
                    item.BNAMDataTypeState |= Tree.BNAMDataType.Has;
                    break;
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                    return _hasBeenSetTracker[index];
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return SpeedTreeSeeds.HasBeenSet;
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                case Tree_FieldIndex.CNAMDataTypeState:
                case Tree_FieldIndex.BNAMDataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Tree_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum CNAMDataType
        {
            Has = 1
        }
        [Flags]
        public enum BNAMDataType
        {
            Has = 1
        }
        public Tree(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Tree(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => TreeBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static Tree CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Tree CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Tree_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Tree_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Tree CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Tree>(
                record: new Tree(),
                frame: frame,
                errorMask: errorMask,
                recType: Tree_Registration.TREE_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            Tree item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            Tree item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.Model);
                        item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String IconParse))
                    {
                        item.Icon = IconParse;
                    }
                    else
                    {
                        item.Icon = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Icon);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<UInt32>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.SpeedTreeSeeds,
                        transl: UInt32BinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.SpeedTreeSeeds);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.CNAMDataTypeState = CNAMDataType.Has;
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single LeafCurvatureParse))
                    {
                        item.LeafCurvature = LeafCurvatureParse;
                    }
                    else
                    {
                        item.LeafCurvature = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single MinimumLeafAngleParse))
                    {
                        item.MinimumLeafAngle = MinimumLeafAngleParse;
                    }
                    else
                    {
                        item.MinimumLeafAngle = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single MaximumLeafAngleParse))
                    {
                        item.MaximumLeafAngle = MaximumLeafAngleParse;
                    }
                    else
                    {
                        item.MaximumLeafAngle = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single BranchDimmingValueParse))
                    {
                        item.BranchDimmingValue = BranchDimmingValueParse;
                    }
                    else
                    {
                        item.BranchDimmingValue = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single LeafDimmingValueParse))
                    {
                        item.LeafDimmingValue = LeafDimmingValueParse;
                    }
                    else
                    {
                        item.LeafDimmingValue = default(Single);
                    }
                    item.ShadowRadius = dataFrame.ReadInt32();
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single RockingSpeedParse))
                    {
                        item.RockingSpeed = RockingSpeedParse;
                    }
                    else
                    {
                        item.RockingSpeed = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single RustleSpeedParse))
                    {
                        item.RustleSpeed = RustleSpeedParse;
                    }
                    else
                    {
                        item.RustleSpeed = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.RustleSpeed);
                }
                case 0x4D414E42: // BNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.BNAMDataTypeState = BNAMDataType.Has;
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single BillboardWidthParse))
                    {
                        item.BillboardWidth = BillboardWidthParse;
                    }
                    else
                    {
                        item.BillboardWidth = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single BillboardHeightParse))
                    {
                        item.BillboardHeight = BillboardHeightParse;
                    }
                    else
                    {
                        item.BillboardHeight = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.BillboardHeight);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Tree Copy(
            Tree_CopyMask copyMask = null,
            Tree def = null)
        {
            return Tree.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Tree Copy(
            Tree item,
            Tree_CopyMask copyMask = null,
            Tree def = null)
        {
            Tree ret;
            if (item.GetType().Equals(typeof(Tree)))
            {
                ret = new Tree();
            }
            else
            {
                ret = (Tree)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Tree Copy_ToLoqui(
            Tree item,
            Tree_CopyMask copyMask = null,
            Tree def = null)
        {
            Tree ret;
            if (item.GetType().Equals(typeof(Tree)))
            {
                ret = new Tree() as Tree;
            }
            else
            {
                ret = (Tree)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            Tree rhs,
            Tree_CopyMask copyMask,
            Tree def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            Tree rhs,
            out Tree_ErrorMask errorMask,
            Tree_CopyMask copyMask = null,
            Tree def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TreeCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Tree_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            Tree rhs,
            ErrorMaskBuilder errorMask,
            Tree_CopyMask copyMask = null,
            Tree def = null)
        {
            TreeCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    this.Model = (Model)obj;
                    break;
                case Tree_FieldIndex.Icon:
                    this.Icon = (String)obj;
                    break;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    this._SpeedTreeSeeds.SetTo((ISetList<UInt32>)obj);
                    break;
                case Tree_FieldIndex.LeafCurvature:
                    this.LeafCurvature = (Single)obj;
                    break;
                case Tree_FieldIndex.MinimumLeafAngle:
                    this.MinimumLeafAngle = (Single)obj;
                    break;
                case Tree_FieldIndex.MaximumLeafAngle:
                    this.MaximumLeafAngle = (Single)obj;
                    break;
                case Tree_FieldIndex.BranchDimmingValue:
                    this.BranchDimmingValue = (Single)obj;
                    break;
                case Tree_FieldIndex.LeafDimmingValue:
                    this.LeafDimmingValue = (Single)obj;
                    break;
                case Tree_FieldIndex.ShadowRadius:
                    this.ShadowRadius = (Int32)obj;
                    break;
                case Tree_FieldIndex.RockingSpeed:
                    this.RockingSpeed = (Single)obj;
                    break;
                case Tree_FieldIndex.RustleSpeed:
                    this.RustleSpeed = (Single)obj;
                    break;
                case Tree_FieldIndex.BillboardWidth:
                    this.BillboardWidth = (Single)obj;
                    break;
                case Tree_FieldIndex.BillboardHeight:
                    this.BillboardHeight = (Single)obj;
                    break;
                case Tree_FieldIndex.CNAMDataTypeState:
                    this.CNAMDataTypeState = (Tree.CNAMDataType)obj;
                    break;
                case Tree_FieldIndex.BNAMDataTypeState:
                    this.BNAMDataTypeState = (Tree.BNAMDataType)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            TreeCommon.Instance.Clear(this);
        }

        public new static Tree Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Tree();
            foreach (var pair in fields)
            {
                CopyInInternal_Tree(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Tree(Tree obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Tree_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    obj.Model = (Model)pair.Value;
                    break;
                case Tree_FieldIndex.Icon:
                    obj.Icon = (String)pair.Value;
                    break;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    obj._SpeedTreeSeeds.SetTo((ISetList<UInt32>)pair.Value);
                    break;
                case Tree_FieldIndex.LeafCurvature:
                    obj.LeafCurvature = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.MinimumLeafAngle:
                    obj.MinimumLeafAngle = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.MaximumLeafAngle:
                    obj.MaximumLeafAngle = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.BranchDimmingValue:
                    obj.BranchDimmingValue = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.LeafDimmingValue:
                    obj.LeafDimmingValue = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.ShadowRadius:
                    obj.ShadowRadius = (Int32)pair.Value;
                    break;
                case Tree_FieldIndex.RockingSpeed:
                    obj.RockingSpeed = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.RustleSpeed:
                    obj.RustleSpeed = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.BillboardWidth:
                    obj.BillboardWidth = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.BillboardHeight:
                    obj.BillboardHeight = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.CNAMDataTypeState:
                    obj.CNAMDataTypeState = (Tree.CNAMDataType)pair.Value;
                    break;
                case Tree_FieldIndex.BNAMDataTypeState:
                    obj.BNAMDataTypeState = (Tree.BNAMDataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ITree :
        ITreeInternalGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<ITreeInternal>
    {
        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model value, bool hasBeenSet = true);
        void Model_Unset();

        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String value, bool hasBeenSet = true);
        void Icon_Unset();

        new ISetList<UInt32> SpeedTreeSeeds { get; }
        new Single LeafCurvature { get; set; }

        new Single MinimumLeafAngle { get; set; }

        new Single MaximumLeafAngle { get; set; }

        new Single BranchDimmingValue { get; set; }

        new Single LeafDimmingValue { get; set; }

        new Int32 ShadowRadius { get; set; }

        new Single RockingSpeed { get; set; }

        new Single RustleSpeed { get; set; }

        new Single BillboardWidth { get; set; }

        new Single BillboardHeight { get; set; }

        void CopyFieldsFrom(
            Tree rhs,
            ErrorMaskBuilder errorMask = null,
            Tree_CopyMask copyMask = null,
            Tree def = null);
    }

    public partial interface ITreeInternal :
        IOblivionMajorRecordInternal,
        ITree,
        ITreeInternalGetter
    {
        new Tree.CNAMDataType CNAMDataTypeState { get; set; }

        new Tree.BNAMDataType BNAMDataTypeState { get; set; }

    }

    public partial interface ITreeGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<ITreeInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Model
        IModelGetter Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region SpeedTreeSeeds
        IReadOnlySetList<UInt32> SpeedTreeSeeds { get; }
        #endregion
        #region LeafCurvature
        Single LeafCurvature { get; }

        #endregion
        #region MinimumLeafAngle
        Single MinimumLeafAngle { get; }

        #endregion
        #region MaximumLeafAngle
        Single MaximumLeafAngle { get; }

        #endregion
        #region BranchDimmingValue
        Single BranchDimmingValue { get; }

        #endregion
        #region LeafDimmingValue
        Single LeafDimmingValue { get; }

        #endregion
        #region ShadowRadius
        Int32 ShadowRadius { get; }

        #endregion
        #region RockingSpeed
        Single RockingSpeed { get; }

        #endregion
        #region RustleSpeed
        Single RustleSpeed { get; }

        #endregion
        #region BillboardWidth
        Single BillboardWidth { get; }

        #endregion
        #region BillboardHeight
        Single BillboardHeight { get; }

        #endregion

    }

    public partial interface ITreeInternalGetter :
        IOblivionMajorRecordInternalGetter,
        ITreeGetter
    {
        #region CNAMDataTypeState
        Tree.CNAMDataType CNAMDataTypeState { get; }

        #endregion
        #region BNAMDataTypeState
        Tree.BNAMDataType BNAMDataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class TreeMixIn
    {
        public static void Clear(this ITreeInternal item)
        {
            ((TreeCommon)((ILoquiObject)item).CommonInstance).Clear(item: item);
        }

        public static Tree_Mask<bool> GetEqualsMask(
            this ITreeInternalGetter item,
            ITreeInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TreeCommon)((ILoquiObject)item).CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITreeInternalGetter item,
            string name = null,
            Tree_Mask<bool> printMask = null)
        {
            return ((TreeCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITreeInternalGetter item,
            FileGeneration fg,
            string name = null,
            Tree_Mask<bool> printMask = null)
        {
            ((TreeCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITreeInternalGetter item,
            Tree_Mask<bool?> checkMask)
        {
            return ((TreeCommon)((ILoquiObject)item).CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Tree_Mask<bool> GetHasBeenSetMask(this ITreeInternalGetter item)
        {
            var ret = new Tree_Mask<bool>();
            ((TreeCommon)((ILoquiObject)item).CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITreeInternalGetter item,
            ITreeInternalGetter rhs)
        {
            return ((TreeCommon)((ILoquiObject)item).CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Tree_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Model = 5,
        Icon = 6,
        SpeedTreeSeeds = 7,
        LeafCurvature = 8,
        MinimumLeafAngle = 9,
        MaximumLeafAngle = 10,
        BranchDimmingValue = 11,
        LeafDimmingValue = 12,
        ShadowRadius = 13,
        RockingSpeed = 14,
        RustleSpeed = 15,
        BillboardWidth = 16,
        BillboardHeight = 17,
        CNAMDataTypeState = 18,
        BNAMDataTypeState = 19,
    }
    #endregion

    #region Registration
    public class Tree_Registration : ILoquiRegistration
    {
        public static readonly Tree_Registration Instance = new Tree_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 79,
            version: 0);

        public const string GUID = "82606775-b1a1-4c44-9052-b021c5ccc13a";

        public const ushort AdditionalFieldCount = 15;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(Tree_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Tree_ErrorMask);

        public static readonly Type ClassType = typeof(Tree);

        public static readonly Type GetterType = typeof(ITreeGetter);

        public static readonly Type InternalGetterType = typeof(ITreeInternalGetter);

        public static readonly Type SetterType = typeof(ITree);

        public static readonly Type InternalSetterType = typeof(ITreeInternal);

        public static readonly Type CommonType = typeof(TreeCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Tree";

        public const string Name = "Tree";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)Tree_FieldIndex.Model;
                case "ICON":
                    return (ushort)Tree_FieldIndex.Icon;
                case "SPEEDTREESEEDS":
                    return (ushort)Tree_FieldIndex.SpeedTreeSeeds;
                case "LEAFCURVATURE":
                    return (ushort)Tree_FieldIndex.LeafCurvature;
                case "MINIMUMLEAFANGLE":
                    return (ushort)Tree_FieldIndex.MinimumLeafAngle;
                case "MAXIMUMLEAFANGLE":
                    return (ushort)Tree_FieldIndex.MaximumLeafAngle;
                case "BRANCHDIMMINGVALUE":
                    return (ushort)Tree_FieldIndex.BranchDimmingValue;
                case "LEAFDIMMINGVALUE":
                    return (ushort)Tree_FieldIndex.LeafDimmingValue;
                case "SHADOWRADIUS":
                    return (ushort)Tree_FieldIndex.ShadowRadius;
                case "ROCKINGSPEED":
                    return (ushort)Tree_FieldIndex.RockingSpeed;
                case "RUSTLESPEED":
                    return (ushort)Tree_FieldIndex.RustleSpeed;
                case "BILLBOARDWIDTH":
                    return (ushort)Tree_FieldIndex.BillboardWidth;
                case "BILLBOARDHEIGHT":
                    return (ushort)Tree_FieldIndex.BillboardHeight;
                case "CNAMDATATYPESTATE":
                    return (ushort)Tree_FieldIndex.CNAMDataTypeState;
                case "BNAMDATATYPESTATE":
                    return (ushort)Tree_FieldIndex.BNAMDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return true;
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                case Tree_FieldIndex.CNAMDataTypeState:
                case Tree_FieldIndex.BNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return true;
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                case Tree_FieldIndex.CNAMDataTypeState:
                case Tree_FieldIndex.BNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                case Tree_FieldIndex.CNAMDataTypeState:
                case Tree_FieldIndex.BNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return "Model";
                case Tree_FieldIndex.Icon:
                    return "Icon";
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return "SpeedTreeSeeds";
                case Tree_FieldIndex.LeafCurvature:
                    return "LeafCurvature";
                case Tree_FieldIndex.MinimumLeafAngle:
                    return "MinimumLeafAngle";
                case Tree_FieldIndex.MaximumLeafAngle:
                    return "MaximumLeafAngle";
                case Tree_FieldIndex.BranchDimmingValue:
                    return "BranchDimmingValue";
                case Tree_FieldIndex.LeafDimmingValue:
                    return "LeafDimmingValue";
                case Tree_FieldIndex.ShadowRadius:
                    return "ShadowRadius";
                case Tree_FieldIndex.RockingSpeed:
                    return "RockingSpeed";
                case Tree_FieldIndex.RustleSpeed:
                    return "RustleSpeed";
                case Tree_FieldIndex.BillboardWidth:
                    return "BillboardWidth";
                case Tree_FieldIndex.BillboardHeight:
                    return "BillboardHeight";
                case Tree_FieldIndex.CNAMDataTypeState:
                    return "CNAMDataTypeState";
                case Tree_FieldIndex.BNAMDataTypeState:
                    return "BNAMDataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                case Tree_FieldIndex.CNAMDataTypeState:
                case Tree_FieldIndex.BNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                case Tree_FieldIndex.CNAMDataTypeState:
                case Tree_FieldIndex.BNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return typeof(Model);
                case Tree_FieldIndex.Icon:
                    return typeof(String);
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return typeof(ISetList<UInt32>);
                case Tree_FieldIndex.LeafCurvature:
                    return typeof(Single);
                case Tree_FieldIndex.MinimumLeafAngle:
                    return typeof(Single);
                case Tree_FieldIndex.MaximumLeafAngle:
                    return typeof(Single);
                case Tree_FieldIndex.BranchDimmingValue:
                    return typeof(Single);
                case Tree_FieldIndex.LeafDimmingValue:
                    return typeof(Single);
                case Tree_FieldIndex.ShadowRadius:
                    return typeof(Int32);
                case Tree_FieldIndex.RockingSpeed:
                    return typeof(Single);
                case Tree_FieldIndex.RustleSpeed:
                    return typeof(Single);
                case Tree_FieldIndex.BillboardWidth:
                    return typeof(Single);
                case Tree_FieldIndex.BillboardHeight:
                    return typeof(Single);
                case Tree_FieldIndex.CNAMDataTypeState:
                    return typeof(Tree.CNAMDataType);
                case Tree_FieldIndex.BNAMDataTypeState:
                    return typeof(Tree.BNAMDataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TreeXmlWriteTranslation);
        public static readonly RecordType TREE_HEADER = new RecordType("TREE");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType BNAM_HEADER = new RecordType("BNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = TREE_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryWriteTranslation = typeof(TreeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TreeCommon : OblivionMajorRecordCommon
    {
        public static readonly TreeCommon Instance = new TreeCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Tree item,
            Tree rhs,
            Tree def,
            ErrorMaskBuilder errorMask,
            Tree_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                ModelCommon.CopyFieldsFrom(
                                    item: item.Model,
                                    rhs: rhs.Model,
                                    def: def?.Model,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Model.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Model = Model.Copy(
                                    rhsModelItem,
                                    copyMask?.Model?.Specific,
                                    def: defModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Model_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.Icon);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Icon,
                        rhsHasBeenSet: rhs.Icon_IsSet,
                        defItem: def?.Icon ?? default(String),
                        defHasBeenSet: def?.Icon_IsSet ?? false,
                        outRhsItem: out var rhsIconItem,
                        outDefItem: out var defIconItem))
                    {
                        item.Icon = rhsIconItem;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SpeedTreeSeeds != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.SpeedTreeSeeds);
                try
                {
                    item.SpeedTreeSeeds.SetToWithDefault(
                        rhs.SpeedTreeSeeds,
                        def?.SpeedTreeSeeds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LeafCurvature ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.LeafCurvature);
                try
                {
                    item.LeafCurvature = rhs.LeafCurvature;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MinimumLeafAngle ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.MinimumLeafAngle);
                try
                {
                    item.MinimumLeafAngle = rhs.MinimumLeafAngle;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaximumLeafAngle ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.MaximumLeafAngle);
                try
                {
                    item.MaximumLeafAngle = rhs.MaximumLeafAngle;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BranchDimmingValue ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.BranchDimmingValue);
                try
                {
                    item.BranchDimmingValue = rhs.BranchDimmingValue;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LeafDimmingValue ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.LeafDimmingValue);
                try
                {
                    item.LeafDimmingValue = rhs.LeafDimmingValue;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ShadowRadius ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.ShadowRadius);
                try
                {
                    item.ShadowRadius = rhs.ShadowRadius;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RockingSpeed ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.RockingSpeed);
                try
                {
                    item.RockingSpeed = rhs.RockingSpeed;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RustleSpeed ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.RustleSpeed);
                try
                {
                    item.RustleSpeed = rhs.RustleSpeed;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BillboardWidth ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.BillboardWidth);
                try
                {
                    item.BillboardWidth = rhs.BillboardWidth;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BillboardHeight ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.BillboardHeight);
                try
                {
                    item.BillboardHeight = rhs.BillboardHeight;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(ITreeInternal item)
        {
            ClearPartial();
            item.Model_Unset();
            item.Icon_Unset();
            item.SpeedTreeSeeds.Unset();
            item.LeafCurvature = default(Single);
            item.MinimumLeafAngle = default(Single);
            item.MaximumLeafAngle = default(Single);
            item.BranchDimmingValue = default(Single);
            item.LeafDimmingValue = default(Single);
            item.ShadowRadius = default(Int32);
            item.RockingSpeed = default(Single);
            item.RustleSpeed = default(Single);
            item.BillboardWidth = default(Single);
            item.BillboardHeight = default(Single);
            base.Clear(item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ITreeInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ITreeInternal)item);
        }

        public Tree_Mask<bool> GetEqualsMask(
            ITreeInternalGetter item,
            ITreeInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Tree_Mask<bool>();
            ((TreeCommon)((ILoquiObject)item).CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            ITreeInternalGetter item,
            ITreeInternalGetter rhs,
            Tree_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && string.Equals(item.Icon, rhs.Icon);
            ret.SpeedTreeSeeds = item.SpeedTreeSeeds.CollectionEqualsHelper(
                rhs.SpeedTreeSeeds,
                (l, r) => l == r,
                include);
            ret.LeafCurvature = item.LeafCurvature.EqualsWithin(rhs.LeafCurvature);
            ret.MinimumLeafAngle = item.MinimumLeafAngle.EqualsWithin(rhs.MinimumLeafAngle);
            ret.MaximumLeafAngle = item.MaximumLeafAngle.EqualsWithin(rhs.MaximumLeafAngle);
            ret.BranchDimmingValue = item.BranchDimmingValue.EqualsWithin(rhs.BranchDimmingValue);
            ret.LeafDimmingValue = item.LeafDimmingValue.EqualsWithin(rhs.LeafDimmingValue);
            ret.ShadowRadius = item.ShadowRadius == rhs.ShadowRadius;
            ret.RockingSpeed = item.RockingSpeed.EqualsWithin(rhs.RockingSpeed);
            ret.RustleSpeed = item.RustleSpeed.EqualsWithin(rhs.RustleSpeed);
            ret.BillboardWidth = item.BillboardWidth.EqualsWithin(rhs.BillboardWidth);
            ret.BillboardHeight = item.BillboardHeight.EqualsWithin(rhs.BillboardHeight);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            ITreeInternalGetter item,
            string name = null,
            Tree_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            ITreeInternalGetter item,
            FileGeneration fg,
            string name = null,
            Tree_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Tree =>");
            }
            else
            {
                fg.AppendLine($"{name} (Tree) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            ITreeInternalGetter item,
            FileGeneration fg,
            Tree_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.Icon ?? true)
            {
                fg.AppendLine($"Icon => {item.Icon}");
            }
            if (printMask?.SpeedTreeSeeds?.Overall ?? true)
            {
                fg.AppendLine("SpeedTreeSeeds =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.SpeedTreeSeeds)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.LeafCurvature ?? true)
            {
                fg.AppendLine($"LeafCurvature => {item.LeafCurvature}");
            }
            if (printMask?.MinimumLeafAngle ?? true)
            {
                fg.AppendLine($"MinimumLeafAngle => {item.MinimumLeafAngle}");
            }
            if (printMask?.MaximumLeafAngle ?? true)
            {
                fg.AppendLine($"MaximumLeafAngle => {item.MaximumLeafAngle}");
            }
            if (printMask?.BranchDimmingValue ?? true)
            {
                fg.AppendLine($"BranchDimmingValue => {item.BranchDimmingValue}");
            }
            if (printMask?.LeafDimmingValue ?? true)
            {
                fg.AppendLine($"LeafDimmingValue => {item.LeafDimmingValue}");
            }
            if (printMask?.ShadowRadius ?? true)
            {
                fg.AppendLine($"ShadowRadius => {item.ShadowRadius}");
            }
            if (printMask?.RockingSpeed ?? true)
            {
                fg.AppendLine($"RockingSpeed => {item.RockingSpeed}");
            }
            if (printMask?.RustleSpeed ?? true)
            {
                fg.AppendLine($"RustleSpeed => {item.RustleSpeed}");
            }
            if (printMask?.BillboardWidth ?? true)
            {
                fg.AppendLine($"BillboardWidth => {item.BillboardWidth}");
            }
            if (printMask?.BillboardHeight ?? true)
            {
                fg.AppendLine($"BillboardHeight => {item.BillboardHeight}");
            }
            if (printMask?.CNAMDataTypeState ?? true)
            {
            }
            if (printMask?.BNAMDataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            ITreeInternalGetter item,
            Tree_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            if (checkMask.SpeedTreeSeeds.Overall.HasValue && checkMask.SpeedTreeSeeds.Overall.Value != item.SpeedTreeSeeds.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            ITreeInternalGetter item,
            Tree_Mask<bool> mask)
        {
            mask.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, item.Model.GetHasBeenSetMask());
            mask.Icon = item.Icon_IsSet;
            mask.SpeedTreeSeeds = new MaskItem<bool, IEnumerable<(int, bool)>>(item.SpeedTreeSeeds.HasBeenSet, null);
            mask.LeafCurvature = true;
            mask.MinimumLeafAngle = true;
            mask.MaximumLeafAngle = true;
            mask.BranchDimmingValue = true;
            mask.LeafDimmingValue = true;
            mask.ShadowRadius = true;
            mask.RockingSpeed = true;
            mask.RustleSpeed = true;
            mask.BillboardWidth = true;
            mask.BillboardHeight = true;
            mask.CNAMDataTypeState = true;
            mask.BNAMDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static Tree_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Tree_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Tree_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Tree_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Tree_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Tree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Tree_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Tree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Equals and Hash
        public virtual bool Equals(
            ITreeInternalGetter lhs,
            ITreeInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Model_IsSet != rhs.Model_IsSet) return false;
            if (lhs.Model_IsSet)
            {
                if (!object.Equals(lhs.Model, rhs.Model)) return false;
            }
            if (lhs.Icon_IsSet != rhs.Icon_IsSet) return false;
            if (lhs.Icon_IsSet)
            {
                if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            }
            if (lhs.SpeedTreeSeeds.HasBeenSet != rhs.SpeedTreeSeeds.HasBeenSet) return false;
            if (lhs.SpeedTreeSeeds.HasBeenSet)
            {
                if (!lhs.SpeedTreeSeeds.SequenceEqual(rhs.SpeedTreeSeeds)) return false;
            }
            if (!lhs.LeafCurvature.EqualsWithin(rhs.LeafCurvature)) return false;
            if (!lhs.MinimumLeafAngle.EqualsWithin(rhs.MinimumLeafAngle)) return false;
            if (!lhs.MaximumLeafAngle.EqualsWithin(rhs.MaximumLeafAngle)) return false;
            if (!lhs.BranchDimmingValue.EqualsWithin(rhs.BranchDimmingValue)) return false;
            if (!lhs.LeafDimmingValue.EqualsWithin(rhs.LeafDimmingValue)) return false;
            if (lhs.ShadowRadius != rhs.ShadowRadius) return false;
            if (!lhs.RockingSpeed.EqualsWithin(rhs.RockingSpeed)) return false;
            if (!lhs.RustleSpeed.EqualsWithin(rhs.RustleSpeed)) return false;
            if (!lhs.BillboardWidth.EqualsWithin(rhs.BillboardWidth)) return false;
            if (!lhs.BillboardHeight.EqualsWithin(rhs.BillboardHeight)) return false;
            if (lhs.CNAMDataTypeState != rhs.CNAMDataTypeState) return false;
            if (lhs.BNAMDataTypeState != rhs.BNAMDataTypeState) return false;
            return true;
        }

        public override bool Equals(
            IOblivionMajorRecordInternalGetter lhs,
            IOblivionMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (ITreeInternalGetter)lhs,
                rhs: rhs as ITreeInternalGetter);
        }

        public override bool Equals(
            IMajorRecordInternalGetter lhs,
            IMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (ITreeInternalGetter)lhs,
                rhs: rhs as ITreeInternalGetter);
        }

        public virtual int GetHashCode(ITreeInternalGetter item)
        {
            int ret = 0;
            if (item.Model_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Model).CombineHashCode(ret);
            }
            if (item.Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Icon).CombineHashCode(ret);
            }
            if (item.SpeedTreeSeeds.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.SpeedTreeSeeds).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.LeafCurvature).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MinimumLeafAngle).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MaximumLeafAngle).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BranchDimmingValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LeafDimmingValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ShadowRadius).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RockingSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RustleSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BillboardWidth).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BillboardHeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CNAMDataTypeState).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BNAMDataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        public override int GetHashCode(IOblivionMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (ITreeInternalGetter)item);
        }

        public override int GetHashCode(IMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (ITreeInternalGetter)item);
        }

        #endregion


        #region Mutagen
        partial void PostDuplicate(Tree obj, Tree rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Tree(getNextFormKey());
            ret.CopyFieldsFrom((Tree)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Tree)item, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class TreeXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static TreeXmlWriteTranslation Instance = new TreeXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITreeInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.Model) ?? true))
            {
                var loquiItem = item.Model;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)Tree_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.Model));
            }
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Tree_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.SpeedTreeSeeds.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.SpeedTreeSeeds) ?? true))
            {
                ListXmlTranslation<UInt32>.Instance.Write(
                    node: node,
                    name: nameof(item.SpeedTreeSeeds),
                    item: item.SpeedTreeSeeds,
                    fieldIndex: (int)Tree_FieldIndex.SpeedTreeSeeds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.SpeedTreeSeeds),
                    transl: (XElement subNode, UInt32 subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        UInt32XmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if (item.CNAMDataTypeState.HasFlag(Tree.CNAMDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafCurvature) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LeafCurvature),
                        item: item.LeafCurvature,
                        fieldIndex: (int)Tree_FieldIndex.LeafCurvature,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.MinimumLeafAngle) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MinimumLeafAngle),
                        item: item.MinimumLeafAngle,
                        fieldIndex: (int)Tree_FieldIndex.MinimumLeafAngle,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.MaximumLeafAngle) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MaximumLeafAngle),
                        item: item.MaximumLeafAngle,
                        fieldIndex: (int)Tree_FieldIndex.MaximumLeafAngle,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.BranchDimmingValue) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BranchDimmingValue),
                        item: item.BranchDimmingValue,
                        fieldIndex: (int)Tree_FieldIndex.BranchDimmingValue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafDimmingValue) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LeafDimmingValue),
                        item: item.LeafDimmingValue,
                        fieldIndex: (int)Tree_FieldIndex.LeafDimmingValue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.ShadowRadius) ?? true))
                {
                    Int32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ShadowRadius),
                        item: item.ShadowRadius,
                        fieldIndex: (int)Tree_FieldIndex.ShadowRadius,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.RockingSpeed) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.RockingSpeed),
                        item: item.RockingSpeed,
                        fieldIndex: (int)Tree_FieldIndex.RockingSpeed,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.RustleSpeed) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.RustleSpeed),
                        item: item.RustleSpeed,
                        fieldIndex: (int)Tree_FieldIndex.RustleSpeed,
                        errorMask: errorMask);
                }
            }
            if (item.BNAMDataTypeState.HasFlag(Tree.BNAMDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.BillboardWidth) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BillboardWidth),
                        item: item.BillboardWidth,
                        fieldIndex: (int)Tree_FieldIndex.BillboardWidth,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.BillboardHeight) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BillboardHeight),
                        item: item.BillboardHeight,
                        fieldIndex: (int)Tree_FieldIndex.BillboardHeight,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.CNAMDataTypeState) ?? true))
            {
                EnumXmlTranslation<Tree.CNAMDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.CNAMDataTypeState),
                    item: item.CNAMDataTypeState,
                    fieldIndex: (int)Tree_FieldIndex.CNAMDataTypeState,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.BNAMDataTypeState) ?? true))
            {
                EnumXmlTranslation<Tree.BNAMDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.BNAMDataTypeState),
                    item: item.BNAMDataTypeState,
                    fieldIndex: (int)Tree_FieldIndex.BNAMDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ITreeInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Tree");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Tree");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ITreeInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ITreeInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ITreeInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class TreeXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static TreeXmlCreateTranslation Instance = new TreeXmlCreateTranslation();

        public static void FillPublicXml(
            ITreeInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TreeXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITreeInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SpeedTreeSeeds":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.SpeedTreeSeeds);
                        if (ListXmlTranslation<UInt32>.Instance.Parse(
                            node: node,
                            enumer: out var SpeedTreeSeedsItem,
                            transl: UInt32XmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.SpeedTreeSeeds.SetTo(SpeedTreeSeedsItem);
                        }
                        else
                        {
                            item.SpeedTreeSeeds.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeafCurvature":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.LeafCurvature);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single LeafCurvatureParse,
                            errorMask: errorMask))
                        {
                            item.LeafCurvature = LeafCurvatureParse;
                        }
                        else
                        {
                            item.LeafCurvature = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.CNAMDataTypeState |= Tree.CNAMDataType.Has;
                    break;
                case "MinimumLeafAngle":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.MinimumLeafAngle);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single MinimumLeafAngleParse,
                            errorMask: errorMask))
                        {
                            item.MinimumLeafAngle = MinimumLeafAngleParse;
                        }
                        else
                        {
                            item.MinimumLeafAngle = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaximumLeafAngle":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.MaximumLeafAngle);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single MaximumLeafAngleParse,
                            errorMask: errorMask))
                        {
                            item.MaximumLeafAngle = MaximumLeafAngleParse;
                        }
                        else
                        {
                            item.MaximumLeafAngle = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BranchDimmingValue":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.BranchDimmingValue);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single BranchDimmingValueParse,
                            errorMask: errorMask))
                        {
                            item.BranchDimmingValue = BranchDimmingValueParse;
                        }
                        else
                        {
                            item.BranchDimmingValue = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeafDimmingValue":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.LeafDimmingValue);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single LeafDimmingValueParse,
                            errorMask: errorMask))
                        {
                            item.LeafDimmingValue = LeafDimmingValueParse;
                        }
                        else
                        {
                            item.LeafDimmingValue = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ShadowRadius":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.ShadowRadius);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 ShadowRadiusParse,
                            errorMask: errorMask))
                        {
                            item.ShadowRadius = ShadowRadiusParse;
                        }
                        else
                        {
                            item.ShadowRadius = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RockingSpeed":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.RockingSpeed);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single RockingSpeedParse,
                            errorMask: errorMask))
                        {
                            item.RockingSpeed = RockingSpeedParse;
                        }
                        else
                        {
                            item.RockingSpeed = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RustleSpeed":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.RustleSpeed);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single RustleSpeedParse,
                            errorMask: errorMask))
                        {
                            item.RustleSpeed = RustleSpeedParse;
                        }
                        else
                        {
                            item.RustleSpeed = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BillboardWidth":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.BillboardWidth);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single BillboardWidthParse,
                            errorMask: errorMask))
                        {
                            item.BillboardWidth = BillboardWidthParse;
                        }
                        else
                        {
                            item.BillboardWidth = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.BNAMDataTypeState |= Tree.BNAMDataType.Has;
                    break;
                case "BillboardHeight":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.BillboardHeight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single BillboardHeightParse,
                            errorMask: errorMask))
                        {
                            item.BillboardHeight = BillboardHeightParse;
                        }
                        else
                        {
                            item.BillboardHeight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CNAMDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.CNAMDataTypeState);
                        if (EnumXmlTranslation<Tree.CNAMDataType>.Instance.Parse(
                            node: node,
                            item: out Tree.CNAMDataType CNAMDataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.CNAMDataTypeState = CNAMDataTypeStateParse;
                        }
                        else
                        {
                            item.CNAMDataTypeState = default(Tree.CNAMDataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BNAMDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.BNAMDataTypeState);
                        if (EnumXmlTranslation<Tree.BNAMDataType>.Instance.Parse(
                            node: node,
                            item: out Tree.BNAMDataType BNAMDataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.BNAMDataTypeState = BNAMDataTypeStateParse;
                        }
                        else
                        {
                            item.BNAMDataTypeState = default(Tree.BNAMDataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class TreeXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITreeInternalGetter item,
            XElement node,
            out Tree_ErrorMask errorMask,
            bool doMasks = true,
            Tree_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((TreeXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Tree_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITreeInternalGetter item,
            string path,
            out Tree_ErrorMask errorMask,
            Tree_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITreeInternalGetter item,
            Stream stream,
            out Tree_ErrorMask errorMask,
            Tree_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class Tree_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Tree_Mask<T>>
    {
        #region Ctors
        public Tree_Mask()
        {
        }

        public Tree_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Icon = initialValue;
            this.SpeedTreeSeeds = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.LeafCurvature = initialValue;
            this.MinimumLeafAngle = initialValue;
            this.MaximumLeafAngle = initialValue;
            this.BranchDimmingValue = initialValue;
            this.LeafDimmingValue = initialValue;
            this.ShadowRadius = initialValue;
            this.RockingSpeed = initialValue;
            this.RustleSpeed = initialValue;
            this.BillboardWidth = initialValue;
            this.BillboardHeight = initialValue;
            this.CNAMDataTypeState = initialValue;
            this.BNAMDataTypeState = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Icon;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> SpeedTreeSeeds;
        public T LeafCurvature;
        public T MinimumLeafAngle;
        public T MaximumLeafAngle;
        public T BranchDimmingValue;
        public T LeafDimmingValue;
        public T ShadowRadius;
        public T RockingSpeed;
        public T RustleSpeed;
        public T BillboardWidth;
        public T BillboardHeight;
        public T CNAMDataTypeState;
        public T BNAMDataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Tree_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Tree_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.SpeedTreeSeeds, rhs.SpeedTreeSeeds)) return false;
            if (!object.Equals(this.LeafCurvature, rhs.LeafCurvature)) return false;
            if (!object.Equals(this.MinimumLeafAngle, rhs.MinimumLeafAngle)) return false;
            if (!object.Equals(this.MaximumLeafAngle, rhs.MaximumLeafAngle)) return false;
            if (!object.Equals(this.BranchDimmingValue, rhs.BranchDimmingValue)) return false;
            if (!object.Equals(this.LeafDimmingValue, rhs.LeafDimmingValue)) return false;
            if (!object.Equals(this.ShadowRadius, rhs.ShadowRadius)) return false;
            if (!object.Equals(this.RockingSpeed, rhs.RockingSpeed)) return false;
            if (!object.Equals(this.RustleSpeed, rhs.RustleSpeed)) return false;
            if (!object.Equals(this.BillboardWidth, rhs.BillboardWidth)) return false;
            if (!object.Equals(this.BillboardHeight, rhs.BillboardHeight)) return false;
            if (!object.Equals(this.CNAMDataTypeState, rhs.CNAMDataTypeState)) return false;
            if (!object.Equals(this.BNAMDataTypeState, rhs.BNAMDataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.SpeedTreeSeeds?.GetHashCode());
            ret = ret.CombineHashCode(this.LeafCurvature?.GetHashCode());
            ret = ret.CombineHashCode(this.MinimumLeafAngle?.GetHashCode());
            ret = ret.CombineHashCode(this.MaximumLeafAngle?.GetHashCode());
            ret = ret.CombineHashCode(this.BranchDimmingValue?.GetHashCode());
            ret = ret.CombineHashCode(this.LeafDimmingValue?.GetHashCode());
            ret = ret.CombineHashCode(this.ShadowRadius?.GetHashCode());
            ret = ret.CombineHashCode(this.RockingSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.RustleSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.BillboardWidth?.GetHashCode());
            ret = ret.CombineHashCode(this.BillboardHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.CNAMDataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(this.BNAMDataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Icon)) return false;
            if (this.SpeedTreeSeeds != null)
            {
                if (!eval(this.SpeedTreeSeeds.Overall)) return false;
                if (this.SpeedTreeSeeds.Specific != null)
                {
                    foreach (var item in this.SpeedTreeSeeds.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (!eval(this.LeafCurvature)) return false;
            if (!eval(this.MinimumLeafAngle)) return false;
            if (!eval(this.MaximumLeafAngle)) return false;
            if (!eval(this.BranchDimmingValue)) return false;
            if (!eval(this.LeafDimmingValue)) return false;
            if (!eval(this.ShadowRadius)) return false;
            if (!eval(this.RockingSpeed)) return false;
            if (!eval(this.RustleSpeed)) return false;
            if (!eval(this.BillboardWidth)) return false;
            if (!eval(this.BillboardHeight)) return false;
            if (!eval(this.CNAMDataTypeState)) return false;
            if (!eval(this.BNAMDataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Tree_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Tree_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Tree_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Icon = eval(this.Icon);
            if (SpeedTreeSeeds != null)
            {
                obj.SpeedTreeSeeds = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.SpeedTreeSeeds.Overall = eval(this.SpeedTreeSeeds.Overall);
                if (SpeedTreeSeeds.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.SpeedTreeSeeds.Specific = l;
                    foreach (var item in SpeedTreeSeeds.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            obj.LeafCurvature = eval(this.LeafCurvature);
            obj.MinimumLeafAngle = eval(this.MinimumLeafAngle);
            obj.MaximumLeafAngle = eval(this.MaximumLeafAngle);
            obj.BranchDimmingValue = eval(this.BranchDimmingValue);
            obj.LeafDimmingValue = eval(this.LeafDimmingValue);
            obj.ShadowRadius = eval(this.ShadowRadius);
            obj.RockingSpeed = eval(this.RockingSpeed);
            obj.RustleSpeed = eval(this.RustleSpeed);
            obj.BillboardWidth = eval(this.BillboardWidth);
            obj.BillboardHeight = eval(this.BillboardHeight);
            obj.CNAMDataTypeState = eval(this.CNAMDataTypeState);
            obj.BNAMDataTypeState = eval(this.BNAMDataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.SpeedTreeSeeds.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Tree_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Tree_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Tree_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.SpeedTreeSeeds?.Overall ?? true)
                {
                    fg.AppendLine("SpeedTreeSeeds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (SpeedTreeSeeds.Overall != null)
                        {
                            fg.AppendLine(SpeedTreeSeeds.Overall.ToString());
                        }
                        if (SpeedTreeSeeds.Specific != null)
                        {
                            foreach (var subItem in SpeedTreeSeeds.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.LeafCurvature ?? true)
                {
                    fg.AppendLine($"LeafCurvature => {LeafCurvature}");
                }
                if (printMask?.MinimumLeafAngle ?? true)
                {
                    fg.AppendLine($"MinimumLeafAngle => {MinimumLeafAngle}");
                }
                if (printMask?.MaximumLeafAngle ?? true)
                {
                    fg.AppendLine($"MaximumLeafAngle => {MaximumLeafAngle}");
                }
                if (printMask?.BranchDimmingValue ?? true)
                {
                    fg.AppendLine($"BranchDimmingValue => {BranchDimmingValue}");
                }
                if (printMask?.LeafDimmingValue ?? true)
                {
                    fg.AppendLine($"LeafDimmingValue => {LeafDimmingValue}");
                }
                if (printMask?.ShadowRadius ?? true)
                {
                    fg.AppendLine($"ShadowRadius => {ShadowRadius}");
                }
                if (printMask?.RockingSpeed ?? true)
                {
                    fg.AppendLine($"RockingSpeed => {RockingSpeed}");
                }
                if (printMask?.RustleSpeed ?? true)
                {
                    fg.AppendLine($"RustleSpeed => {RustleSpeed}");
                }
                if (printMask?.BillboardWidth ?? true)
                {
                    fg.AppendLine($"BillboardWidth => {BillboardWidth}");
                }
                if (printMask?.BillboardHeight ?? true)
                {
                    fg.AppendLine($"BillboardHeight => {BillboardHeight}");
                }
                if (printMask?.CNAMDataTypeState ?? true)
                {
                    fg.AppendLine($"CNAMDataTypeState => {CNAMDataTypeState}");
                }
                if (printMask?.BNAMDataTypeState ?? true)
                {
                    fg.AppendLine($"BNAMDataTypeState => {BNAMDataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Tree_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Tree_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Icon;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> SpeedTreeSeeds;
        public Exception LeafCurvature;
        public Exception MinimumLeafAngle;
        public Exception MaximumLeafAngle;
        public Exception BranchDimmingValue;
        public Exception LeafDimmingValue;
        public Exception ShadowRadius;
        public Exception RockingSpeed;
        public Exception RustleSpeed;
        public Exception BillboardWidth;
        public Exception BillboardHeight;
        public Exception CNAMDataTypeState;
        public Exception BNAMDataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return Model;
                case Tree_FieldIndex.Icon:
                    return Icon;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return SpeedTreeSeeds;
                case Tree_FieldIndex.LeafCurvature:
                    return LeafCurvature;
                case Tree_FieldIndex.MinimumLeafAngle:
                    return MinimumLeafAngle;
                case Tree_FieldIndex.MaximumLeafAngle:
                    return MaximumLeafAngle;
                case Tree_FieldIndex.BranchDimmingValue:
                    return BranchDimmingValue;
                case Tree_FieldIndex.LeafDimmingValue:
                    return LeafDimmingValue;
                case Tree_FieldIndex.ShadowRadius:
                    return ShadowRadius;
                case Tree_FieldIndex.RockingSpeed:
                    return RockingSpeed;
                case Tree_FieldIndex.RustleSpeed:
                    return RustleSpeed;
                case Tree_FieldIndex.BillboardWidth:
                    return BillboardWidth;
                case Tree_FieldIndex.BillboardHeight:
                    return BillboardHeight;
                case Tree_FieldIndex.CNAMDataTypeState:
                    return CNAMDataTypeState;
                case Tree_FieldIndex.BNAMDataTypeState:
                    return BNAMDataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Tree_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    this.SpeedTreeSeeds = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case Tree_FieldIndex.LeafCurvature:
                    this.LeafCurvature = ex;
                    break;
                case Tree_FieldIndex.MinimumLeafAngle:
                    this.MinimumLeafAngle = ex;
                    break;
                case Tree_FieldIndex.MaximumLeafAngle:
                    this.MaximumLeafAngle = ex;
                    break;
                case Tree_FieldIndex.BranchDimmingValue:
                    this.BranchDimmingValue = ex;
                    break;
                case Tree_FieldIndex.LeafDimmingValue:
                    this.LeafDimmingValue = ex;
                    break;
                case Tree_FieldIndex.ShadowRadius:
                    this.ShadowRadius = ex;
                    break;
                case Tree_FieldIndex.RockingSpeed:
                    this.RockingSpeed = ex;
                    break;
                case Tree_FieldIndex.RustleSpeed:
                    this.RustleSpeed = ex;
                    break;
                case Tree_FieldIndex.BillboardWidth:
                    this.BillboardWidth = ex;
                    break;
                case Tree_FieldIndex.BillboardHeight:
                    this.BillboardHeight = ex;
                    break;
                case Tree_FieldIndex.CNAMDataTypeState:
                    this.CNAMDataTypeState = ex;
                    break;
                case Tree_FieldIndex.BNAMDataTypeState:
                    this.BNAMDataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Tree_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    this.SpeedTreeSeeds = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case Tree_FieldIndex.LeafCurvature:
                    this.LeafCurvature = (Exception)obj;
                    break;
                case Tree_FieldIndex.MinimumLeafAngle:
                    this.MinimumLeafAngle = (Exception)obj;
                    break;
                case Tree_FieldIndex.MaximumLeafAngle:
                    this.MaximumLeafAngle = (Exception)obj;
                    break;
                case Tree_FieldIndex.BranchDimmingValue:
                    this.BranchDimmingValue = (Exception)obj;
                    break;
                case Tree_FieldIndex.LeafDimmingValue:
                    this.LeafDimmingValue = (Exception)obj;
                    break;
                case Tree_FieldIndex.ShadowRadius:
                    this.ShadowRadius = (Exception)obj;
                    break;
                case Tree_FieldIndex.RockingSpeed:
                    this.RockingSpeed = (Exception)obj;
                    break;
                case Tree_FieldIndex.RustleSpeed:
                    this.RustleSpeed = (Exception)obj;
                    break;
                case Tree_FieldIndex.BillboardWidth:
                    this.BillboardWidth = (Exception)obj;
                    break;
                case Tree_FieldIndex.BillboardHeight:
                    this.BillboardHeight = (Exception)obj;
                    break;
                case Tree_FieldIndex.CNAMDataTypeState:
                    this.CNAMDataTypeState = (Exception)obj;
                    break;
                case Tree_FieldIndex.BNAMDataTypeState:
                    this.BNAMDataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (Icon != null) return true;
            if (SpeedTreeSeeds != null) return true;
            if (LeafCurvature != null) return true;
            if (MinimumLeafAngle != null) return true;
            if (MaximumLeafAngle != null) return true;
            if (BranchDimmingValue != null) return true;
            if (LeafDimmingValue != null) return true;
            if (ShadowRadius != null) return true;
            if (RockingSpeed != null) return true;
            if (RustleSpeed != null) return true;
            if (BillboardWidth != null) return true;
            if (BillboardHeight != null) return true;
            if (CNAMDataTypeState != null) return true;
            if (BNAMDataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Tree_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            Model?.ToString(fg);
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine("SpeedTreeSeeds =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (SpeedTreeSeeds.Overall != null)
                {
                    fg.AppendLine(SpeedTreeSeeds.Overall.ToString());
                }
                if (SpeedTreeSeeds.Specific != null)
                {
                    foreach (var subItem in SpeedTreeSeeds.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"LeafCurvature => {LeafCurvature}");
            fg.AppendLine($"MinimumLeafAngle => {MinimumLeafAngle}");
            fg.AppendLine($"MaximumLeafAngle => {MaximumLeafAngle}");
            fg.AppendLine($"BranchDimmingValue => {BranchDimmingValue}");
            fg.AppendLine($"LeafDimmingValue => {LeafDimmingValue}");
            fg.AppendLine($"ShadowRadius => {ShadowRadius}");
            fg.AppendLine($"RockingSpeed => {RockingSpeed}");
            fg.AppendLine($"RustleSpeed => {RustleSpeed}");
            fg.AppendLine($"BillboardWidth => {BillboardWidth}");
            fg.AppendLine($"BillboardHeight => {BillboardHeight}");
            fg.AppendLine($"CNAMDataTypeState => {CNAMDataTypeState}");
            fg.AppendLine($"BNAMDataTypeState => {BNAMDataTypeState}");
        }
        #endregion

        #region Combine
        public Tree_ErrorMask Combine(Tree_ErrorMask rhs)
        {
            var ret = new Tree_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.SpeedTreeSeeds = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.SpeedTreeSeeds.Overall.Combine(rhs.SpeedTreeSeeds.Overall), new List<(int Index, Exception Value)>(this.SpeedTreeSeeds.Specific.And(rhs.SpeedTreeSeeds.Specific)));
            ret.LeafCurvature = this.LeafCurvature.Combine(rhs.LeafCurvature);
            ret.MinimumLeafAngle = this.MinimumLeafAngle.Combine(rhs.MinimumLeafAngle);
            ret.MaximumLeafAngle = this.MaximumLeafAngle.Combine(rhs.MaximumLeafAngle);
            ret.BranchDimmingValue = this.BranchDimmingValue.Combine(rhs.BranchDimmingValue);
            ret.LeafDimmingValue = this.LeafDimmingValue.Combine(rhs.LeafDimmingValue);
            ret.ShadowRadius = this.ShadowRadius.Combine(rhs.ShadowRadius);
            ret.RockingSpeed = this.RockingSpeed.Combine(rhs.RockingSpeed);
            ret.RustleSpeed = this.RustleSpeed.Combine(rhs.RustleSpeed);
            ret.BillboardWidth = this.BillboardWidth.Combine(rhs.BillboardWidth);
            ret.BillboardHeight = this.BillboardHeight.Combine(rhs.BillboardHeight);
            ret.CNAMDataTypeState = this.CNAMDataTypeState.Combine(rhs.CNAMDataTypeState);
            ret.BNAMDataTypeState = this.BNAMDataTypeState.Combine(rhs.BNAMDataTypeState);
            return ret;
        }
        public static Tree_ErrorMask Combine(Tree_ErrorMask lhs, Tree_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Tree_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Tree_ErrorMask();
        }
        #endregion

    }
    public class Tree_CopyMask : OblivionMajorRecord_CopyMask
    {
        public Tree_CopyMask()
        {
        }

        public Tree_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Model = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.Icon = defaultOn;
            this.SpeedTreeSeeds = deepCopyOption;
            this.LeafCurvature = defaultOn;
            this.MinimumLeafAngle = defaultOn;
            this.MaximumLeafAngle = defaultOn;
            this.BranchDimmingValue = defaultOn;
            this.LeafDimmingValue = defaultOn;
            this.ShadowRadius = defaultOn;
            this.RockingSpeed = defaultOn;
            this.RustleSpeed = defaultOn;
            this.BillboardWidth = defaultOn;
            this.BillboardHeight = defaultOn;
            this.CNAMDataTypeState = defaultOn;
            this.BNAMDataTypeState = defaultOn;
        }

        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Icon;
        public CopyOption SpeedTreeSeeds;
        public bool LeafCurvature;
        public bool MinimumLeafAngle;
        public bool MaximumLeafAngle;
        public bool BranchDimmingValue;
        public bool LeafDimmingValue;
        public bool ShadowRadius;
        public bool RockingSpeed;
        public bool RustleSpeed;
        public bool BillboardWidth;
        public bool BillboardHeight;
        public bool CNAMDataTypeState;
        public bool BNAMDataTypeState;
        #endregion

    }

    public class Tree_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Icon;
        public bool SpeedTreeSeeds;
        public bool LeafCurvature;
        public bool MinimumLeafAngle;
        public bool MaximumLeafAngle;
        public bool BranchDimmingValue;
        public bool LeafDimmingValue;
        public bool ShadowRadius;
        public bool RockingSpeed;
        public bool RustleSpeed;
        public bool BillboardWidth;
        public bool BillboardHeight;
        public bool CNAMDataTypeState;
        public bool BNAMDataTypeState;
        #endregion

        #region Ctors
        public Tree_TranslationMask()
            : base()
        {
        }

        public Tree_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.Icon = defaultOn;
            this.SpeedTreeSeeds = defaultOn;
            this.LeafCurvature = defaultOn;
            this.MinimumLeafAngle = defaultOn;
            this.MaximumLeafAngle = defaultOn;
            this.BranchDimmingValue = defaultOn;
            this.LeafDimmingValue = defaultOn;
            this.ShadowRadius = defaultOn;
            this.RockingSpeed = defaultOn;
            this.RustleSpeed = defaultOn;
            this.BillboardWidth = defaultOn;
            this.BillboardHeight = defaultOn;
            this.CNAMDataTypeState = defaultOn;
            this.BNAMDataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Icon, null));
            ret.Add((SpeedTreeSeeds, null));
            ret.Add((LeafCurvature, null));
            ret.Add((MinimumLeafAngle, null));
            ret.Add((MaximumLeafAngle, null));
            ret.Add((BranchDimmingValue, null));
            ret.Add((LeafDimmingValue, null));
            ret.Add((ShadowRadius, null));
            ret.Add((RockingSpeed, null));
            ret.Add((RustleSpeed, null));
            ret.Add((BillboardWidth, null));
            ret.Add((BillboardHeight, null));
            ret.Add((CNAMDataTypeState, null));
            ret.Add((BNAMDataTypeState, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class TreeBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static TreeBinaryWriteTranslation Instance = new TreeBinaryWriteTranslation();

        public static void Write_Embedded(
            ITreeInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            ITreeInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Model_IsSet)
            {
                var loquiItem = item.Model;
                ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    header: recordTypeConverter.ConvertToCustom(Tree_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.SpeedTreeSeeds.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<UInt32>.Instance.Write(
                    writer: writer,
                    items: item.SpeedTreeSeeds,
                    recordType: Tree_Registration.SNAM_HEADER,
                    transl: UInt32BinaryTranslation.Instance.Write);
            }
            if (item.CNAMDataTypeState.HasFlag(Tree.CNAMDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Tree_Registration.CNAM_HEADER)))
                {
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.LeafCurvature);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.MinimumLeafAngle);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.MaximumLeafAngle);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.BranchDimmingValue);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.LeafDimmingValue);
                    writer.Write(item.ShadowRadius);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.RockingSpeed);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.RustleSpeed);
                }
            }
            if (item.BNAMDataTypeState.HasFlag(Tree.BNAMDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Tree_Registration.BNAM_HEADER)))
                {
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.BillboardWidth);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.BillboardHeight);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            ITreeInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Tree_Registration.TREE_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ITreeInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ITreeInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ITreeInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class TreeBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static TreeBinaryCreateTranslation Instance = new TreeBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class TreeBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITreeInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Tree_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((TreeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Tree_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    public partial class TreeBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        ITreeInternalGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Tree_Registration.Instance;
        public new static Tree_Registration Registration => Tree_Registration.Instance;
        protected override object CommonInstance => TreeCommon.Instance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITreeInternalGetter)rhs, include);

        protected override object XmlWriteTranslator => TreeXmlWriteTranslation.Instance;
        protected override object BinaryWriteTranslator => TreeBinaryWriteTranslation.Instance;

        #region Model
        public IModelGetter Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        #region Icon
        private int? _IconLocation;
        public bool Icon_IsSet => _IconLocation.HasValue;
        public String Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _IconLocation.Value, _package.Meta)) : default;
        #endregion
        public IReadOnlySetList<UInt32> SpeedTreeSeeds { get; private set; } = EmptySetList<UInt32>.Instance;
        private int? _CNAMLocation;
        public Tree.CNAMDataType CNAMDataTypeState { get; private set; }
        #region LeafCurvature
        private int _LeafCurvatureLocation => _CNAMLocation.Value + 0x0;
        private bool _LeafCurvature_IsSet => _CNAMLocation.HasValue;
        public Single LeafCurvature => _LeafCurvature_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_LeafCurvatureLocation, 4)) : default;
        #endregion
        #region MinimumLeafAngle
        private int _MinimumLeafAngleLocation => _CNAMLocation.Value + 0x4;
        private bool _MinimumLeafAngle_IsSet => _CNAMLocation.HasValue;
        public Single MinimumLeafAngle => _MinimumLeafAngle_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_MinimumLeafAngleLocation, 4)) : default;
        #endregion
        #region MaximumLeafAngle
        private int _MaximumLeafAngleLocation => _CNAMLocation.Value + 0x8;
        private bool _MaximumLeafAngle_IsSet => _CNAMLocation.HasValue;
        public Single MaximumLeafAngle => _MaximumLeafAngle_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_MaximumLeafAngleLocation, 4)) : default;
        #endregion
        #region BranchDimmingValue
        private int _BranchDimmingValueLocation => _CNAMLocation.Value + 0xC;
        private bool _BranchDimmingValue_IsSet => _CNAMLocation.HasValue;
        public Single BranchDimmingValue => _BranchDimmingValue_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_BranchDimmingValueLocation, 4)) : default;
        #endregion
        #region LeafDimmingValue
        private int _LeafDimmingValueLocation => _CNAMLocation.Value + 0x10;
        private bool _LeafDimmingValue_IsSet => _CNAMLocation.HasValue;
        public Single LeafDimmingValue => _LeafDimmingValue_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_LeafDimmingValueLocation, 4)) : default;
        #endregion
        #region ShadowRadius
        private int _ShadowRadiusLocation => _CNAMLocation.Value + 0x14;
        private bool _ShadowRadius_IsSet => _CNAMLocation.HasValue;
        public Int32 ShadowRadius => _ShadowRadius_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_ShadowRadiusLocation, 4)) : default;
        #endregion
        #region RockingSpeed
        private int _RockingSpeedLocation => _CNAMLocation.Value + 0x18;
        private bool _RockingSpeed_IsSet => _CNAMLocation.HasValue;
        public Single RockingSpeed => _RockingSpeed_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_RockingSpeedLocation, 4)) : default;
        #endregion
        #region RustleSpeed
        private int _RustleSpeedLocation => _CNAMLocation.Value + 0x1C;
        private bool _RustleSpeed_IsSet => _CNAMLocation.HasValue;
        public Single RustleSpeed => _RustleSpeed_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_RustleSpeedLocation, 4)) : default;
        #endregion
        private int? _BNAMLocation;
        public Tree.BNAMDataType BNAMDataTypeState { get; private set; }
        #region BillboardWidth
        private int _BillboardWidthLocation => _BNAMLocation.Value + 0x0;
        private bool _BillboardWidth_IsSet => _BNAMLocation.HasValue;
        public Single BillboardWidth => _BillboardWidth_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_BillboardWidthLocation, 4)) : default;
        #endregion
        #region BillboardHeight
        private int _BillboardHeightLocation => _BNAMLocation.Value + 0x4;
        private bool _BillboardHeight_IsSet => _BNAMLocation.HasValue;
        public Single BillboardHeight => _BillboardHeight_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_BillboardHeightLocation, 4)) : default;
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected TreeBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static TreeBinaryWrapper TreeFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new TreeBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed)
        {
            switch (type.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryWrapper.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Icon);
                }
                case 0x4D414E53: // SNAM
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.SpeedTreeSeeds = BinaryWrapperSetList<UInt32>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => BinaryPrimitives.ReadUInt32LittleEndian(s));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.SpeedTreeSeeds);
                }
                case 0x4D414E43: // CNAM
                {
                    _CNAMLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.CNAMDataTypeState = Tree.CNAMDataType.Has;
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.RustleSpeed);
                }
                case 0x4D414E42: // BNAM
                {
                    _BNAMLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.BNAMDataTypeState = Tree.BNAMDataType.Has;
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.BillboardHeight);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
    }

    #endregion

    #endregion

}
