/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Tree : 
        OblivionMajorRecord,
        ITree,
        ILoquiObject<Tree>,
        ILoquiObjectSetter,
        IEquatable<Tree>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Tree_Registration.Instance;
        public new static Tree_Registration Registration => Tree_Registration.Instance;

        #region Ctor
        protected Tree()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)Tree_FieldIndex.Model];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Tree_FieldIndex.Model, nameof(Model_IsSet));
        }
        bool ITreeGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Model, value, _hasBeenSetTracker, markSet, (int)Tree_FieldIndex.Model, nameof(Model), nameof(Model_IsSet));
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model ITreeGetter.Model => this.Model;
        #endregion
        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)Tree_FieldIndex.Icon];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Tree_FieldIndex.Icon, nameof(Icon_IsSet));
        }
        bool ITreeGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String ITreeGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Icon, value, _hasBeenSetTracker, markSet, (int)Tree_FieldIndex.Icon, nameof(Icon), nameof(Icon_IsSet));
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region SpeedTreeSeeds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<UInt32> _SpeedTreeSeeds = new SourceSetList<UInt32>();
        public ISourceSetList<UInt32> SpeedTreeSeeds => _SpeedTreeSeeds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<UInt32> SpeedTreeSeedsEnumerable
        {
            get => _SpeedTreeSeeds.Items;
            set => _SpeedTreeSeeds.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<UInt32> ITree.SpeedTreeSeeds => _SpeedTreeSeeds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<UInt32> ITreeGetter.SpeedTreeSeeds => _SpeedTreeSeeds;
        #endregion

        #endregion
        #region LeafCurvature
        private Single _LeafCurvature;
        public Single LeafCurvature
        {
            get => this._LeafCurvature;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._LeafCurvature, value, nameof(LeafCurvature));
            }
        }
        #endregion
        #region MinimumLeafAngle
        private Single _MinimumLeafAngle;
        public Single MinimumLeafAngle
        {
            get => this._MinimumLeafAngle;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._MinimumLeafAngle, value, nameof(MinimumLeafAngle));
            }
        }
        #endregion
        #region MaximumLeafAngle
        private Single _MaximumLeafAngle;
        public Single MaximumLeafAngle
        {
            get => this._MaximumLeafAngle;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._MaximumLeafAngle, value, nameof(MaximumLeafAngle));
            }
        }
        #endregion
        #region BranchDimmingValue
        private Single _BranchDimmingValue;
        public Single BranchDimmingValue
        {
            get => this._BranchDimmingValue;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._BranchDimmingValue, value, nameof(BranchDimmingValue));
            }
        }
        #endregion
        #region LeafDimmingValue
        private Single _LeafDimmingValue;
        public Single LeafDimmingValue
        {
            get => this._LeafDimmingValue;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._LeafDimmingValue, value, nameof(LeafDimmingValue));
            }
        }
        #endregion
        #region ShadowRadius
        private Int32 _ShadowRadius;
        public Int32 ShadowRadius
        {
            get => this._ShadowRadius;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._ShadowRadius, value, nameof(ShadowRadius));
            }
        }
        #endregion
        #region RockingSpeed
        private Single _RockingSpeed;
        public Single RockingSpeed
        {
            get => this._RockingSpeed;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._RockingSpeed, value, nameof(RockingSpeed));
            }
        }
        #endregion
        #region RustleSpeed
        private Single _RustleSpeed;
        public Single RustleSpeed
        {
            get => this._RustleSpeed;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._RustleSpeed, value, nameof(RustleSpeed));
            }
        }
        #endregion
        #region BillboardWidth
        private Single _BillboardWidth;
        public Single BillboardWidth
        {
            get => this._BillboardWidth;
            set
            {
                this.BNAMDataTypeState |= BNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._BillboardWidth, value, nameof(BillboardWidth));
            }
        }
        #endregion
        #region BillboardHeight
        private Single _BillboardHeight;
        public Single BillboardHeight
        {
            get => this._BillboardHeight;
            set
            {
                this.BNAMDataTypeState |= BNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._BillboardHeight, value, nameof(BillboardHeight));
            }
        }
        #endregion

        IMask<bool> IEqualsMask<Tree>.GetEqualsMask(Tree rhs, EqualsMaskHelper.Include include) => TreeCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ITreeGetter>.GetEqualsMask(ITreeGetter rhs, EqualsMaskHelper.Include include) => TreeCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            Tree_Mask<bool> printMask = null)
        {
            return TreeCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            TreeCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Tree_Mask<bool> GetHasBeenSetMask()
        {
            return TreeCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Tree rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Tree rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Model_IsSet != rhs.Model_IsSet) return false;
            if (Model_IsSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (Icon_IsSet != rhs.Icon_IsSet) return false;
            if (Icon_IsSet)
            {
                if (!string.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (SpeedTreeSeeds.HasBeenSet != rhs.SpeedTreeSeeds.HasBeenSet) return false;
            if (SpeedTreeSeeds.HasBeenSet)
            {
                if (!this.SpeedTreeSeeds.SequenceEqual(rhs.SpeedTreeSeeds)) return false;
            }
            if (!this.LeafCurvature.EqualsWithin(rhs.LeafCurvature)) return false;
            if (!this.MinimumLeafAngle.EqualsWithin(rhs.MinimumLeafAngle)) return false;
            if (!this.MaximumLeafAngle.EqualsWithin(rhs.MaximumLeafAngle)) return false;
            if (!this.BranchDimmingValue.EqualsWithin(rhs.BranchDimmingValue)) return false;
            if (!this.LeafDimmingValue.EqualsWithin(rhs.LeafDimmingValue)) return false;
            if (this.ShadowRadius != rhs.ShadowRadius) return false;
            if (!this.RockingSpeed.EqualsWithin(rhs.RockingSpeed)) return false;
            if (!this.RustleSpeed.EqualsWithin(rhs.RustleSpeed)) return false;
            if (!this.BillboardWidth.EqualsWithin(rhs.BillboardWidth)) return false;
            if (!this.BillboardHeight.EqualsWithin(rhs.BillboardHeight)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Model_IsSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (SpeedTreeSeeds.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(SpeedTreeSeeds).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(LeafCurvature).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MinimumLeafAngle).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaximumLeafAngle).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BranchDimmingValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LeafDimmingValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ShadowRadius).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RockingSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RustleSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BillboardWidth).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BillboardHeight).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static Tree Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Tree_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Tree Create_Xml(
            XElement node,
            out Tree_ErrorMask errorMask,
            bool doMasks = true,
            Tree_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Tree_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Tree Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Tree() : null;
                    break;
                default:
                    break;
            }
            var ret = new Tree();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    TreeCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Tree Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Tree_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Tree Create_Xml(
            string path,
            out Tree_ErrorMask errorMask,
            Tree_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Tree Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            Tree_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Tree Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Tree_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Tree Create_Xml(
            Stream stream,
            out Tree_ErrorMask errorMask,
            Tree_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Tree Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Tree_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Tree_ErrorMask errorMask,
            bool doMasks = true,
            Tree_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Tree_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Tree_ErrorMask errorMask,
            Tree_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out Tree_ErrorMask errorMask,
            Tree_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            OblivionMajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Tree_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Tree_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            TreeCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            Tree item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasCNAMDataType":
                    item.CNAMDataTypeState |= Tree.CNAMDataType.Has;
                    break;
                case "HasBNAMDataType":
                    item.BNAMDataTypeState |= Tree.BNAMDataType.Has;
                    break;
                default:
                    OblivionMajorRecord.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Tree_FieldIndex)index)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                    return _hasBeenSetTracker[index];
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return SpeedTreeSeeds.HasBeenSet;
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Tree_Registration.TRIGGERING_RECORD_TYPE;
        public CNAMDataType CNAMDataTypeState;
        [Flags]
        public enum CNAMDataType
        {
            Has = 1
        }
        public BNAMDataType BNAMDataTypeState;
        [Flags]
        public enum BNAMDataType
        {
            Has = 1
        }
        public Tree(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        partial void PostDuplicate(Tree obj, Tree rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Tree(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static Tree Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Tree Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Tree_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Tree_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Tree Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Tree>(
                record: new Tree(),
                frame: frame,
                errorMask: errorMask,
                recType: Tree_Registration.TREE_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Tree_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Tree_ErrorMask.Factory(errorMaskBuilder);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Tree_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Tree_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            TreeCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Tree item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Tree item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.Model);
                        if (LoquiBinaryTranslation<Model>.Instance.Parse(
                            frame: frame,
                            masterReferences: masterReferences,
                            item: out Model ModelParse,
                            errorMask: errorMask))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String IconParse))
                    {
                        item.Icon = IconParse;
                    }
                    else
                    {
                        item.Icon = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Icon);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<UInt32>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.SpeedTreeSeeds,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        transl: UInt32BinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.SpeedTreeSeeds);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.CNAMDataTypeState = CNAMDataType.Has;
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single LeafCurvatureParse))
                    {
                        item.LeafCurvature = LeafCurvatureParse;
                    }
                    else
                    {
                        item.LeafCurvature = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single MinimumLeafAngleParse))
                    {
                        item.MinimumLeafAngle = MinimumLeafAngleParse;
                    }
                    else
                    {
                        item.MinimumLeafAngle = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single MaximumLeafAngleParse))
                    {
                        item.MaximumLeafAngle = MaximumLeafAngleParse;
                    }
                    else
                    {
                        item.MaximumLeafAngle = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single BranchDimmingValueParse))
                    {
                        item.BranchDimmingValue = BranchDimmingValueParse;
                    }
                    else
                    {
                        item.BranchDimmingValue = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single LeafDimmingValueParse))
                    {
                        item.LeafDimmingValue = LeafDimmingValueParse;
                    }
                    else
                    {
                        item.LeafDimmingValue = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Int32 ShadowRadiusParse))
                    {
                        item.ShadowRadius = ShadowRadiusParse;
                    }
                    else
                    {
                        item.ShadowRadius = default(Int32);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single RockingSpeedParse))
                    {
                        item.RockingSpeed = RockingSpeedParse;
                    }
                    else
                    {
                        item.RockingSpeed = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single RustleSpeedParse))
                    {
                        item.RustleSpeed = RustleSpeedParse;
                    }
                    else
                    {
                        item.RustleSpeed = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.RustleSpeed);
                }
                case 0x4D414E42: // BNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.BNAMDataTypeState = BNAMDataType.Has;
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single BillboardWidthParse))
                    {
                        item.BillboardWidth = BillboardWidthParse;
                    }
                    else
                    {
                        item.BillboardWidth = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single BillboardHeightParse))
                    {
                        item.BillboardHeight = BillboardHeightParse;
                    }
                    else
                    {
                        item.BillboardHeight = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.BillboardHeight);
                }
                default:
                    return OblivionMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Tree Copy(
            Tree_CopyMask copyMask = null,
            ITreeGetter def = null)
        {
            return Tree.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Tree Copy(
            ITree item,
            Tree_CopyMask copyMask = null,
            ITreeGetter def = null)
        {
            Tree ret;
            if (item.GetType().Equals(typeof(Tree)))
            {
                ret = new Tree();
            }
            else
            {
                ret = (Tree)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Tree Copy_ToLoqui(
            ITreeGetter item,
            Tree_CopyMask copyMask = null,
            ITreeGetter def = null)
        {
            Tree ret;
            if (item.GetType().Equals(typeof(Tree)))
            {
                ret = new Tree() as Tree;
            }
            else
            {
                ret = (Tree)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(IMajorRecordGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (ITreeGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ITreeGetter rhs,
            Tree_CopyMask copyMask,
            ITreeGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ITreeGetter rhs,
            out Tree_ErrorMask errorMask,
            Tree_CopyMask copyMask = null,
            ITreeGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TreeCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Tree_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ITreeGetter rhs,
            ErrorMaskBuilder errorMask,
            Tree_CopyMask copyMask = null,
            ITreeGetter def = null,
            bool doMasks = true)
        {
            TreeCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    this.Model = (Model)obj;
                    break;
                case Tree_FieldIndex.Icon:
                    this.Icon = (String)obj;
                    break;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    this._SpeedTreeSeeds.SetTo((IEnumerable<UInt32>)obj);
                    break;
                case Tree_FieldIndex.LeafCurvature:
                    this.LeafCurvature = (Single)obj;
                    break;
                case Tree_FieldIndex.MinimumLeafAngle:
                    this.MinimumLeafAngle = (Single)obj;
                    break;
                case Tree_FieldIndex.MaximumLeafAngle:
                    this.MaximumLeafAngle = (Single)obj;
                    break;
                case Tree_FieldIndex.BranchDimmingValue:
                    this.BranchDimmingValue = (Single)obj;
                    break;
                case Tree_FieldIndex.LeafDimmingValue:
                    this.LeafDimmingValue = (Single)obj;
                    break;
                case Tree_FieldIndex.ShadowRadius:
                    this.ShadowRadius = (Int32)obj;
                    break;
                case Tree_FieldIndex.RockingSpeed:
                    this.RockingSpeed = (Single)obj;
                    break;
                case Tree_FieldIndex.RustleSpeed:
                    this.RustleSpeed = (Single)obj;
                    break;
                case Tree_FieldIndex.BillboardWidth:
                    this.BillboardWidth = (Single)obj;
                    break;
                case Tree_FieldIndex.BillboardHeight:
                    this.BillboardHeight = (Single)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            CallClearPartial_Internal();
            TreeCommon.Clear(this);
        }


        public new static Tree Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Tree();
            foreach (var pair in fields)
            {
                CopyInInternal_Tree(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Tree(Tree obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Tree_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    obj.Model = (Model)pair.Value;
                    break;
                case Tree_FieldIndex.Icon:
                    obj.Icon = (String)pair.Value;
                    break;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    obj._SpeedTreeSeeds.SetTo((IEnumerable<UInt32>)pair.Value);
                    break;
                case Tree_FieldIndex.LeafCurvature:
                    obj.LeafCurvature = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.MinimumLeafAngle:
                    obj.MinimumLeafAngle = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.MaximumLeafAngle:
                    obj.MaximumLeafAngle = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.BranchDimmingValue:
                    obj.BranchDimmingValue = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.LeafDimmingValue:
                    obj.LeafDimmingValue = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.ShadowRadius:
                    obj.ShadowRadius = (Int32)pair.Value;
                    break;
                case Tree_FieldIndex.RockingSpeed:
                    obj.RockingSpeed = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.RustleSpeed:
                    obj.RustleSpeed = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.BillboardWidth:
                    obj.BillboardWidth = (Single)pair.Value;
                    break;
                case Tree_FieldIndex.BillboardHeight:
                    obj.BillboardHeight = (Single)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ITree : ITreeGetter, IOblivionMajorRecord, ILoquiClass<ITree, ITreeGetter>, ILoquiClass<Tree, ITreeGetter>
    {
        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model item, bool hasBeenSet = true);
        void Model_Unset();

        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String item, bool hasBeenSet = true);
        void Icon_Unset();

        new ISourceSetList<UInt32> SpeedTreeSeeds { get; }
        new Single LeafCurvature { get; set; }

        new Single MinimumLeafAngle { get; set; }

        new Single MaximumLeafAngle { get; set; }

        new Single BranchDimmingValue { get; set; }

        new Single LeafDimmingValue { get; set; }

        new Int32 ShadowRadius { get; set; }

        new Single RockingSpeed { get; set; }

        new Single RustleSpeed { get; set; }

        new Single BillboardWidth { get; set; }

        new Single BillboardHeight { get; set; }

    }

    public partial interface ITreeGetter : IOblivionMajorRecordGetter
    {
        #region Model
        Model Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region SpeedTreeSeeds
        IObservableSetList<UInt32> SpeedTreeSeeds { get; }
        #endregion
        #region LeafCurvature
        Single LeafCurvature { get; }

        #endregion
        #region MinimumLeafAngle
        Single MinimumLeafAngle { get; }

        #endregion
        #region MaximumLeafAngle
        Single MaximumLeafAngle { get; }

        #endregion
        #region BranchDimmingValue
        Single BranchDimmingValue { get; }

        #endregion
        #region LeafDimmingValue
        Single LeafDimmingValue { get; }

        #endregion
        #region ShadowRadius
        Int32 ShadowRadius { get; }

        #endregion
        #region RockingSpeed
        Single RockingSpeed { get; }

        #endregion
        #region RustleSpeed
        Single RustleSpeed { get; }

        #endregion
        #region BillboardWidth
        Single BillboardWidth { get; }

        #endregion
        #region BillboardHeight
        Single BillboardHeight { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Tree_FieldIndex
    {
        FormKey = 0,
        Version = 1,
        EditorID = 2,
        RecordType = 3,
        OblivionMajorRecordFlags = 4,
        Model = 5,
        Icon = 6,
        SpeedTreeSeeds = 7,
        LeafCurvature = 8,
        MinimumLeafAngle = 9,
        MaximumLeafAngle = 10,
        BranchDimmingValue = 11,
        LeafDimmingValue = 12,
        ShadowRadius = 13,
        RockingSpeed = 14,
        RustleSpeed = 15,
        BillboardWidth = 16,
        BillboardHeight = 17,
    }
    #endregion

    #region Registration
    public class Tree_Registration : ILoquiRegistration
    {
        public static readonly Tree_Registration Instance = new Tree_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 79,
            version: 0);

        public const string GUID = "82606775-b1a1-4c44-9052-b021c5ccc13a";

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(Tree_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Tree_ErrorMask);

        public static readonly Type ClassType = typeof(Tree);

        public static readonly Type GetterType = typeof(ITreeGetter);

        public static readonly Type SetterType = typeof(ITree);

        public static readonly Type CommonType = typeof(TreeCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Tree";

        public const string Name = "Tree";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)Tree_FieldIndex.Model;
                case "ICON":
                    return (ushort)Tree_FieldIndex.Icon;
                case "SPEEDTREESEEDS":
                    return (ushort)Tree_FieldIndex.SpeedTreeSeeds;
                case "LEAFCURVATURE":
                    return (ushort)Tree_FieldIndex.LeafCurvature;
                case "MINIMUMLEAFANGLE":
                    return (ushort)Tree_FieldIndex.MinimumLeafAngle;
                case "MAXIMUMLEAFANGLE":
                    return (ushort)Tree_FieldIndex.MaximumLeafAngle;
                case "BRANCHDIMMINGVALUE":
                    return (ushort)Tree_FieldIndex.BranchDimmingValue;
                case "LEAFDIMMINGVALUE":
                    return (ushort)Tree_FieldIndex.LeafDimmingValue;
                case "SHADOWRADIUS":
                    return (ushort)Tree_FieldIndex.ShadowRadius;
                case "ROCKINGSPEED":
                    return (ushort)Tree_FieldIndex.RockingSpeed;
                case "RUSTLESPEED":
                    return (ushort)Tree_FieldIndex.RustleSpeed;
                case "BILLBOARDWIDTH":
                    return (ushort)Tree_FieldIndex.BillboardWidth;
                case "BILLBOARDHEIGHT":
                    return (ushort)Tree_FieldIndex.BillboardHeight;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return true;
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return true;
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return "Model";
                case Tree_FieldIndex.Icon:
                    return "Icon";
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return "SpeedTreeSeeds";
                case Tree_FieldIndex.LeafCurvature:
                    return "LeafCurvature";
                case Tree_FieldIndex.MinimumLeafAngle:
                    return "MinimumLeafAngle";
                case Tree_FieldIndex.MaximumLeafAngle:
                    return "MaximumLeafAngle";
                case Tree_FieldIndex.BranchDimmingValue:
                    return "BranchDimmingValue";
                case Tree_FieldIndex.LeafDimmingValue:
                    return "LeafDimmingValue";
                case Tree_FieldIndex.ShadowRadius:
                    return "ShadowRadius";
                case Tree_FieldIndex.RockingSpeed:
                    return "RockingSpeed";
                case Tree_FieldIndex.RustleSpeed:
                    return "RustleSpeed";
                case Tree_FieldIndex.BillboardWidth:
                    return "BillboardWidth";
                case Tree_FieldIndex.BillboardHeight:
                    return "BillboardHeight";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return typeof(Model);
                case Tree_FieldIndex.Icon:
                    return typeof(String);
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return typeof(SourceSetList<UInt32>);
                case Tree_FieldIndex.LeafCurvature:
                    return typeof(Single);
                case Tree_FieldIndex.MinimumLeafAngle:
                    return typeof(Single);
                case Tree_FieldIndex.MaximumLeafAngle:
                    return typeof(Single);
                case Tree_FieldIndex.BranchDimmingValue:
                    return typeof(Single);
                case Tree_FieldIndex.LeafDimmingValue:
                    return typeof(Single);
                case Tree_FieldIndex.ShadowRadius:
                    return typeof(Int32);
                case Tree_FieldIndex.RockingSpeed:
                    return typeof(Single);
                case Tree_FieldIndex.RustleSpeed:
                    return typeof(Single);
                case Tree_FieldIndex.BillboardWidth:
                    return typeof(Single);
                case Tree_FieldIndex.BillboardHeight:
                    return typeof(Single);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType TREE_HEADER = new RecordType("TREE");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType BNAM_HEADER = new RecordType("BNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = TREE_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class TreeCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ITree item,
            ITreeGetter rhs,
            ITreeGetter def,
            ErrorMaskBuilder errorMask,
            Tree_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.Model = rhsModelItem;
                                break;
                            case CopyOption.CopyIn:
                                ModelCommon.CopyFieldsFrom(
                                    item: item.Model,
                                    rhs: rhs.Model,
                                    def: def?.Model,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Model.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Model = Model.Copy(
                                    rhsModelItem,
                                    copyMask?.Model?.Specific,
                                    def: defModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Model_Set(
                            item: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.Icon);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Icon,
                        rhsHasBeenSet: rhs.Icon_IsSet,
                        defItem: def?.Icon ?? default(String),
                        defHasBeenSet: def?.Icon_IsSet ?? false,
                        outRhsItem: out var rhsIconItem,
                        outDefItem: out var defIconItem))
                    {
                        item.Icon = rhsIconItem;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SpeedTreeSeeds != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.SpeedTreeSeeds);
                try
                {
                    item.SpeedTreeSeeds.SetToWithDefault(
                        rhs.SpeedTreeSeeds,
                        def?.SpeedTreeSeeds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LeafCurvature ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.LeafCurvature);
                try
                {
                    item.LeafCurvature = rhs.LeafCurvature;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MinimumLeafAngle ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.MinimumLeafAngle);
                try
                {
                    item.MinimumLeafAngle = rhs.MinimumLeafAngle;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaximumLeafAngle ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.MaximumLeafAngle);
                try
                {
                    item.MaximumLeafAngle = rhs.MaximumLeafAngle;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BranchDimmingValue ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.BranchDimmingValue);
                try
                {
                    item.BranchDimmingValue = rhs.BranchDimmingValue;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LeafDimmingValue ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.LeafDimmingValue);
                try
                {
                    item.LeafDimmingValue = rhs.LeafDimmingValue;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ShadowRadius ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.ShadowRadius);
                try
                {
                    item.ShadowRadius = rhs.ShadowRadius;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RockingSpeed ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.RockingSpeed);
                try
                {
                    item.RockingSpeed = rhs.RockingSpeed;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RustleSpeed ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.RustleSpeed);
                try
                {
                    item.RustleSpeed = rhs.RustleSpeed;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BillboardWidth ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.BillboardWidth);
                try
                {
                    item.BillboardWidth = rhs.BillboardWidth;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BillboardHeight ?? true)
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.BillboardHeight);
                try
                {
                    item.BillboardHeight = rhs.BillboardHeight;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(ITree item)
        {
            item.Model_Unset();
            item.Icon_Unset();
            item.SpeedTreeSeeds.Unset();
            item.LeafCurvature = default(Single);
            item.MinimumLeafAngle = default(Single);
            item.MaximumLeafAngle = default(Single);
            item.BranchDimmingValue = default(Single);
            item.LeafDimmingValue = default(Single);
            item.ShadowRadius = default(Int32);
            item.RockingSpeed = default(Single);
            item.RustleSpeed = default(Single);
            item.BillboardWidth = default(Single);
            item.BillboardHeight = default(Single);
        }

        public static Tree_Mask<bool> GetEqualsMask(
            this ITreeGetter item,
            ITreeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Tree_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            ITreeGetter item,
            ITreeGetter rhs,
            Tree_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && string.Equals(item.Icon, rhs.Icon);
            ret.SpeedTreeSeeds = item.SpeedTreeSeeds.CollectionEqualsHelper(
                rhs.SpeedTreeSeeds,
                (l, r) => l == r,
                include);
            ret.LeafCurvature = item.LeafCurvature.EqualsWithin(rhs.LeafCurvature);
            ret.MinimumLeafAngle = item.MinimumLeafAngle.EqualsWithin(rhs.MinimumLeafAngle);
            ret.MaximumLeafAngle = item.MaximumLeafAngle.EqualsWithin(rhs.MaximumLeafAngle);
            ret.BranchDimmingValue = item.BranchDimmingValue.EqualsWithin(rhs.BranchDimmingValue);
            ret.LeafDimmingValue = item.LeafDimmingValue.EqualsWithin(rhs.LeafDimmingValue);
            ret.ShadowRadius = item.ShadowRadius == rhs.ShadowRadius;
            ret.RockingSpeed = item.RockingSpeed.EqualsWithin(rhs.RockingSpeed);
            ret.RustleSpeed = item.RustleSpeed.EqualsWithin(rhs.RustleSpeed);
            ret.BillboardWidth = item.BillboardWidth.EqualsWithin(rhs.BillboardWidth);
            ret.BillboardHeight = item.BillboardHeight.EqualsWithin(rhs.BillboardHeight);
            OblivionMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ITreeGetter item,
            string name = null,
            Tree_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ITreeGetter item,
            FileGeneration fg,
            string name = null,
            Tree_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Tree)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Tree)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.SpeedTreeSeeds?.Overall ?? true)
                {
                    fg.AppendLine("SpeedTreeSeeds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.SpeedTreeSeeds)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.LeafCurvature ?? true)
                {
                    fg.AppendLine($"LeafCurvature => {item.LeafCurvature}");
                }
                if (printMask?.MinimumLeafAngle ?? true)
                {
                    fg.AppendLine($"MinimumLeafAngle => {item.MinimumLeafAngle}");
                }
                if (printMask?.MaximumLeafAngle ?? true)
                {
                    fg.AppendLine($"MaximumLeafAngle => {item.MaximumLeafAngle}");
                }
                if (printMask?.BranchDimmingValue ?? true)
                {
                    fg.AppendLine($"BranchDimmingValue => {item.BranchDimmingValue}");
                }
                if (printMask?.LeafDimmingValue ?? true)
                {
                    fg.AppendLine($"LeafDimmingValue => {item.LeafDimmingValue}");
                }
                if (printMask?.ShadowRadius ?? true)
                {
                    fg.AppendLine($"ShadowRadius => {item.ShadowRadius}");
                }
                if (printMask?.RockingSpeed ?? true)
                {
                    fg.AppendLine($"RockingSpeed => {item.RockingSpeed}");
                }
                if (printMask?.RustleSpeed ?? true)
                {
                    fg.AppendLine($"RustleSpeed => {item.RustleSpeed}");
                }
                if (printMask?.BillboardWidth ?? true)
                {
                    fg.AppendLine($"BillboardWidth => {item.BillboardWidth}");
                }
                if (printMask?.BillboardHeight ?? true)
                {
                    fg.AppendLine($"BillboardHeight => {item.BillboardHeight}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ITreeGetter item,
            Tree_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            if (checkMask.SpeedTreeSeeds.Overall.HasValue && checkMask.SpeedTreeSeeds.Overall.Value != item.SpeedTreeSeeds.HasBeenSet) return false;
            return true;
        }

        public static Tree_Mask<bool> GetHasBeenSetMask(ITreeGetter item)
        {
            var ret = new Tree_Mask<bool>();
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, ModelCommon.GetHasBeenSetMask(item.Model));
            ret.Icon = item.Icon_IsSet;
            ret.SpeedTreeSeeds = new MaskItem<bool, IEnumerable<(int, bool)>>(item.SpeedTreeSeeds.HasBeenSet, null);
            ret.LeafCurvature = true;
            ret.MinimumLeafAngle = true;
            ret.MaximumLeafAngle = true;
            ret.BranchDimmingValue = true;
            ret.LeafDimmingValue = true;
            ret.ShadowRadius = true;
            ret.RockingSpeed = true;
            ret.RustleSpeed = true;
            ret.BillboardWidth = true;
            ret.BillboardHeight = true;
            return ret;
        }

        public static Tree_FieldIndex? ConvertFieldIndex(OblivionMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Tree_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Tree_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Tree_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Tree_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.RecordType:
                    return (Tree_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Tree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Tree_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Tree_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.FormKey:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Tree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Tree item,
            bool doMasks,
            out Tree_ErrorMask errorMask,
            Tree_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Tree_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Tree item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Tree");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Tree");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this Tree item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordCommon.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.Model) ?? true))
            {
                LoquiXmlTranslation<Model>.Instance.Write(
                    node: node,
                    item: item.Model,
                    name: nameof(item.Model),
                    fieldIndex: (int)Tree_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.Model));
            }
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Tree_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.SpeedTreeSeeds.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.SpeedTreeSeeds) ?? true))
            {
                ListXmlTranslation<UInt32>.Instance.Write(
                    node: node,
                    name: nameof(item.SpeedTreeSeeds),
                    item: item.SpeedTreeSeeds,
                    fieldIndex: (int)Tree_FieldIndex.SpeedTreeSeeds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.SpeedTreeSeeds),
                    transl: (XElement subNode, UInt32 subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        UInt32XmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.CNAMDataTypeState.HasFlag(Tree.CNAMDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafCurvature) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LeafCurvature),
                        item: item.LeafCurvature,
                        fieldIndex: (int)Tree_FieldIndex.LeafCurvature,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.MinimumLeafAngle) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MinimumLeafAngle),
                        item: item.MinimumLeafAngle,
                        fieldIndex: (int)Tree_FieldIndex.MinimumLeafAngle,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.MaximumLeafAngle) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MaximumLeafAngle),
                        item: item.MaximumLeafAngle,
                        fieldIndex: (int)Tree_FieldIndex.MaximumLeafAngle,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.BranchDimmingValue) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BranchDimmingValue),
                        item: item.BranchDimmingValue,
                        fieldIndex: (int)Tree_FieldIndex.BranchDimmingValue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafDimmingValue) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LeafDimmingValue),
                        item: item.LeafDimmingValue,
                        fieldIndex: (int)Tree_FieldIndex.LeafDimmingValue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.ShadowRadius) ?? true))
                {
                    Int32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ShadowRadius),
                        item: item.ShadowRadius,
                        fieldIndex: (int)Tree_FieldIndex.ShadowRadius,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.RockingSpeed) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.RockingSpeed),
                        item: item.RockingSpeed,
                        fieldIndex: (int)Tree_FieldIndex.RockingSpeed,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.RustleSpeed) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.RustleSpeed),
                        item: item.RustleSpeed,
                        fieldIndex: (int)Tree_FieldIndex.RustleSpeed,
                        errorMask: errorMask);
                }
            }
            if (item.BNAMDataTypeState.HasFlag(Tree.BNAMDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.BillboardWidth) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BillboardWidth),
                        item: item.BillboardWidth,
                        fieldIndex: (int)Tree_FieldIndex.BillboardWidth,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.BillboardHeight) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BillboardHeight),
                        item: item.BillboardHeight,
                        fieldIndex: (int)Tree_FieldIndex.BillboardHeight,
                        errorMask: errorMask);
                }
            }
        }

        public static void FillPublic_Xml(
            this Tree item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TreeCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this Tree item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SpeedTreeSeeds":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.SpeedTreeSeeds);
                        if (ListXmlTranslation<UInt32>.Instance.Parse(
                            node: node,
                            enumer: out var SpeedTreeSeedsItem,
                            transl: UInt32XmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.SpeedTreeSeeds.SetTo(SpeedTreeSeedsItem);
                        }
                        else
                        {
                            item.SpeedTreeSeeds.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeafCurvature":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.LeafCurvature);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single LeafCurvatureParse,
                            errorMask: errorMask))
                        {
                            item.LeafCurvature = LeafCurvatureParse;
                        }
                        else
                        {
                            item.LeafCurvature = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.CNAMDataTypeState |= Tree.CNAMDataType.Has;
                    break;
                case "MinimumLeafAngle":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.MinimumLeafAngle);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single MinimumLeafAngleParse,
                            errorMask: errorMask))
                        {
                            item.MinimumLeafAngle = MinimumLeafAngleParse;
                        }
                        else
                        {
                            item.MinimumLeafAngle = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaximumLeafAngle":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.MaximumLeafAngle);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single MaximumLeafAngleParse,
                            errorMask: errorMask))
                        {
                            item.MaximumLeafAngle = MaximumLeafAngleParse;
                        }
                        else
                        {
                            item.MaximumLeafAngle = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BranchDimmingValue":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.BranchDimmingValue);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single BranchDimmingValueParse,
                            errorMask: errorMask))
                        {
                            item.BranchDimmingValue = BranchDimmingValueParse;
                        }
                        else
                        {
                            item.BranchDimmingValue = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeafDimmingValue":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.LeafDimmingValue);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single LeafDimmingValueParse,
                            errorMask: errorMask))
                        {
                            item.LeafDimmingValue = LeafDimmingValueParse;
                        }
                        else
                        {
                            item.LeafDimmingValue = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ShadowRadius":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.ShadowRadius);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 ShadowRadiusParse,
                            errorMask: errorMask))
                        {
                            item.ShadowRadius = ShadowRadiusParse;
                        }
                        else
                        {
                            item.ShadowRadius = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RockingSpeed":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.RockingSpeed);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single RockingSpeedParse,
                            errorMask: errorMask))
                        {
                            item.RockingSpeed = RockingSpeedParse;
                        }
                        else
                        {
                            item.RockingSpeed = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RustleSpeed":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.RustleSpeed);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single RustleSpeedParse,
                            errorMask: errorMask))
                        {
                            item.RustleSpeed = RustleSpeedParse;
                        }
                        else
                        {
                            item.RustleSpeed = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BillboardWidth":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.BillboardWidth);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single BillboardWidthParse,
                            errorMask: errorMask))
                        {
                            item.BillboardWidth = BillboardWidthParse;
                        }
                        else
                        {
                            item.BillboardWidth = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.BNAMDataTypeState |= Tree.BNAMDataType.Has;
                    break;
                case "BillboardHeight":
                    try
                    {
                        errorMask?.PushIndex((int)Tree_FieldIndex.BillboardHeight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single BillboardHeightParse,
                            errorMask: errorMask))
                        {
                            item.BillboardHeight = BillboardHeightParse;
                        }
                        else
                        {
                            item.BillboardHeight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Tree item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Tree_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Tree_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Tree item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Tree_Registration.TREE_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Tree item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Model_IsSet)
            {
                LoquiBinaryTranslation<Model>.Instance.Write(
                    writer: writer,
                    item: item.Model,
                    fieldIndex: (int)Tree_FieldIndex.Model,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    header: recordTypeConverter.ConvertToCustom(Tree_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.SpeedTreeSeeds.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<UInt32>.Instance.Write(
                    writer: writer,
                    items: item.SpeedTreeSeeds,
                    recordType: Tree_Registration.SNAM_HEADER,
                    transl: UInt32BinaryTranslation.Instance.Write);
            }
            if (item.CNAMDataTypeState.HasFlag(Tree.CNAMDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Tree_Registration.CNAM_HEADER)))
                {
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.LeafCurvature);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.MinimumLeafAngle);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.MaximumLeafAngle);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.BranchDimmingValue);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.LeafDimmingValue);
                    Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.ShadowRadius);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.RockingSpeed);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.RustleSpeed);
                }
            }
            if (item.BNAMDataTypeState.HasFlag(Tree.BNAMDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Tree_Registration.BNAM_HEADER)))
                {
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.BillboardWidth);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.BillboardHeight);
                }
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Tree_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Tree_Mask<T>>
    {
        #region Ctors
        public Tree_Mask()
        {
        }

        public Tree_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Icon = initialValue;
            this.SpeedTreeSeeds = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.LeafCurvature = initialValue;
            this.MinimumLeafAngle = initialValue;
            this.MaximumLeafAngle = initialValue;
            this.BranchDimmingValue = initialValue;
            this.LeafDimmingValue = initialValue;
            this.ShadowRadius = initialValue;
            this.RockingSpeed = initialValue;
            this.RustleSpeed = initialValue;
            this.BillboardWidth = initialValue;
            this.BillboardHeight = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Icon;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> SpeedTreeSeeds;
        public T LeafCurvature;
        public T MinimumLeafAngle;
        public T MaximumLeafAngle;
        public T BranchDimmingValue;
        public T LeafDimmingValue;
        public T ShadowRadius;
        public T RockingSpeed;
        public T RustleSpeed;
        public T BillboardWidth;
        public T BillboardHeight;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Tree_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Tree_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.SpeedTreeSeeds, rhs.SpeedTreeSeeds)) return false;
            if (!object.Equals(this.LeafCurvature, rhs.LeafCurvature)) return false;
            if (!object.Equals(this.MinimumLeafAngle, rhs.MinimumLeafAngle)) return false;
            if (!object.Equals(this.MaximumLeafAngle, rhs.MaximumLeafAngle)) return false;
            if (!object.Equals(this.BranchDimmingValue, rhs.BranchDimmingValue)) return false;
            if (!object.Equals(this.LeafDimmingValue, rhs.LeafDimmingValue)) return false;
            if (!object.Equals(this.ShadowRadius, rhs.ShadowRadius)) return false;
            if (!object.Equals(this.RockingSpeed, rhs.RockingSpeed)) return false;
            if (!object.Equals(this.RustleSpeed, rhs.RustleSpeed)) return false;
            if (!object.Equals(this.BillboardWidth, rhs.BillboardWidth)) return false;
            if (!object.Equals(this.BillboardHeight, rhs.BillboardHeight)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.SpeedTreeSeeds?.GetHashCode());
            ret = ret.CombineHashCode(this.LeafCurvature?.GetHashCode());
            ret = ret.CombineHashCode(this.MinimumLeafAngle?.GetHashCode());
            ret = ret.CombineHashCode(this.MaximumLeafAngle?.GetHashCode());
            ret = ret.CombineHashCode(this.BranchDimmingValue?.GetHashCode());
            ret = ret.CombineHashCode(this.LeafDimmingValue?.GetHashCode());
            ret = ret.CombineHashCode(this.ShadowRadius?.GetHashCode());
            ret = ret.CombineHashCode(this.RockingSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.RustleSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.BillboardWidth?.GetHashCode());
            ret = ret.CombineHashCode(this.BillboardHeight?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Icon)) return false;
            if (this.SpeedTreeSeeds != null)
            {
                if (!eval(this.SpeedTreeSeeds.Overall)) return false;
                if (this.SpeedTreeSeeds.Specific != null)
                {
                    foreach (var item in this.SpeedTreeSeeds.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (!eval(this.LeafCurvature)) return false;
            if (!eval(this.MinimumLeafAngle)) return false;
            if (!eval(this.MaximumLeafAngle)) return false;
            if (!eval(this.BranchDimmingValue)) return false;
            if (!eval(this.LeafDimmingValue)) return false;
            if (!eval(this.ShadowRadius)) return false;
            if (!eval(this.RockingSpeed)) return false;
            if (!eval(this.RustleSpeed)) return false;
            if (!eval(this.BillboardWidth)) return false;
            if (!eval(this.BillboardHeight)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Tree_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Tree_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Tree_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Icon = eval(this.Icon);
            if (SpeedTreeSeeds != null)
            {
                obj.SpeedTreeSeeds = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.SpeedTreeSeeds.Overall = eval(this.SpeedTreeSeeds.Overall);
                if (SpeedTreeSeeds.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.SpeedTreeSeeds.Specific = l;
                    foreach (var item in SpeedTreeSeeds.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            obj.LeafCurvature = eval(this.LeafCurvature);
            obj.MinimumLeafAngle = eval(this.MinimumLeafAngle);
            obj.MaximumLeafAngle = eval(this.MaximumLeafAngle);
            obj.BranchDimmingValue = eval(this.BranchDimmingValue);
            obj.LeafDimmingValue = eval(this.LeafDimmingValue);
            obj.ShadowRadius = eval(this.ShadowRadius);
            obj.RockingSpeed = eval(this.RockingSpeed);
            obj.RustleSpeed = eval(this.RustleSpeed);
            obj.BillboardWidth = eval(this.BillboardWidth);
            obj.BillboardHeight = eval(this.BillboardHeight);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.SpeedTreeSeeds.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Tree_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Tree_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Tree_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.SpeedTreeSeeds?.Overall ?? true)
                {
                    fg.AppendLine("SpeedTreeSeeds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (SpeedTreeSeeds.Overall != null)
                        {
                            fg.AppendLine(SpeedTreeSeeds.Overall.ToString());
                        }
                        if (SpeedTreeSeeds.Specific != null)
                        {
                            foreach (var subItem in SpeedTreeSeeds.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.LeafCurvature ?? true)
                {
                    fg.AppendLine($"LeafCurvature => {LeafCurvature}");
                }
                if (printMask?.MinimumLeafAngle ?? true)
                {
                    fg.AppendLine($"MinimumLeafAngle => {MinimumLeafAngle}");
                }
                if (printMask?.MaximumLeafAngle ?? true)
                {
                    fg.AppendLine($"MaximumLeafAngle => {MaximumLeafAngle}");
                }
                if (printMask?.BranchDimmingValue ?? true)
                {
                    fg.AppendLine($"BranchDimmingValue => {BranchDimmingValue}");
                }
                if (printMask?.LeafDimmingValue ?? true)
                {
                    fg.AppendLine($"LeafDimmingValue => {LeafDimmingValue}");
                }
                if (printMask?.ShadowRadius ?? true)
                {
                    fg.AppendLine($"ShadowRadius => {ShadowRadius}");
                }
                if (printMask?.RockingSpeed ?? true)
                {
                    fg.AppendLine($"RockingSpeed => {RockingSpeed}");
                }
                if (printMask?.RustleSpeed ?? true)
                {
                    fg.AppendLine($"RustleSpeed => {RustleSpeed}");
                }
                if (printMask?.BillboardWidth ?? true)
                {
                    fg.AppendLine($"BillboardWidth => {BillboardWidth}");
                }
                if (printMask?.BillboardHeight ?? true)
                {
                    fg.AppendLine($"BillboardHeight => {BillboardHeight}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Tree_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Tree_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Icon;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> SpeedTreeSeeds;
        public Exception LeafCurvature;
        public Exception MinimumLeafAngle;
        public Exception MaximumLeafAngle;
        public Exception BranchDimmingValue;
        public Exception LeafDimmingValue;
        public Exception ShadowRadius;
        public Exception RockingSpeed;
        public Exception RustleSpeed;
        public Exception BillboardWidth;
        public Exception BillboardHeight;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return Model;
                case Tree_FieldIndex.Icon:
                    return Icon;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return SpeedTreeSeeds;
                case Tree_FieldIndex.LeafCurvature:
                    return LeafCurvature;
                case Tree_FieldIndex.MinimumLeafAngle:
                    return MinimumLeafAngle;
                case Tree_FieldIndex.MaximumLeafAngle:
                    return MaximumLeafAngle;
                case Tree_FieldIndex.BranchDimmingValue:
                    return BranchDimmingValue;
                case Tree_FieldIndex.LeafDimmingValue:
                    return LeafDimmingValue;
                case Tree_FieldIndex.ShadowRadius:
                    return ShadowRadius;
                case Tree_FieldIndex.RockingSpeed:
                    return RockingSpeed;
                case Tree_FieldIndex.RustleSpeed:
                    return RustleSpeed;
                case Tree_FieldIndex.BillboardWidth:
                    return BillboardWidth;
                case Tree_FieldIndex.BillboardHeight:
                    return BillboardHeight;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Tree_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    this.SpeedTreeSeeds = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case Tree_FieldIndex.LeafCurvature:
                    this.LeafCurvature = ex;
                    break;
                case Tree_FieldIndex.MinimumLeafAngle:
                    this.MinimumLeafAngle = ex;
                    break;
                case Tree_FieldIndex.MaximumLeafAngle:
                    this.MaximumLeafAngle = ex;
                    break;
                case Tree_FieldIndex.BranchDimmingValue:
                    this.BranchDimmingValue = ex;
                    break;
                case Tree_FieldIndex.LeafDimmingValue:
                    this.LeafDimmingValue = ex;
                    break;
                case Tree_FieldIndex.ShadowRadius:
                    this.ShadowRadius = ex;
                    break;
                case Tree_FieldIndex.RockingSpeed:
                    this.RockingSpeed = ex;
                    break;
                case Tree_FieldIndex.RustleSpeed:
                    this.RustleSpeed = ex;
                    break;
                case Tree_FieldIndex.BillboardWidth:
                    this.BillboardWidth = ex;
                    break;
                case Tree_FieldIndex.BillboardHeight:
                    this.BillboardHeight = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Tree_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Tree_FieldIndex.SpeedTreeSeeds:
                    this.SpeedTreeSeeds = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case Tree_FieldIndex.LeafCurvature:
                    this.LeafCurvature = (Exception)obj;
                    break;
                case Tree_FieldIndex.MinimumLeafAngle:
                    this.MinimumLeafAngle = (Exception)obj;
                    break;
                case Tree_FieldIndex.MaximumLeafAngle:
                    this.MaximumLeafAngle = (Exception)obj;
                    break;
                case Tree_FieldIndex.BranchDimmingValue:
                    this.BranchDimmingValue = (Exception)obj;
                    break;
                case Tree_FieldIndex.LeafDimmingValue:
                    this.LeafDimmingValue = (Exception)obj;
                    break;
                case Tree_FieldIndex.ShadowRadius:
                    this.ShadowRadius = (Exception)obj;
                    break;
                case Tree_FieldIndex.RockingSpeed:
                    this.RockingSpeed = (Exception)obj;
                    break;
                case Tree_FieldIndex.RustleSpeed:
                    this.RustleSpeed = (Exception)obj;
                    break;
                case Tree_FieldIndex.BillboardWidth:
                    this.BillboardWidth = (Exception)obj;
                    break;
                case Tree_FieldIndex.BillboardHeight:
                    this.BillboardHeight = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (Icon != null) return true;
            if (SpeedTreeSeeds != null) return true;
            if (LeafCurvature != null) return true;
            if (MinimumLeafAngle != null) return true;
            if (MaximumLeafAngle != null) return true;
            if (BranchDimmingValue != null) return true;
            if (LeafDimmingValue != null) return true;
            if (ShadowRadius != null) return true;
            if (RockingSpeed != null) return true;
            if (RustleSpeed != null) return true;
            if (BillboardWidth != null) return true;
            if (BillboardHeight != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Tree_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            Model?.ToString(fg);
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine("SpeedTreeSeeds =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (SpeedTreeSeeds.Overall != null)
                {
                    fg.AppendLine(SpeedTreeSeeds.Overall.ToString());
                }
                if (SpeedTreeSeeds.Specific != null)
                {
                    foreach (var subItem in SpeedTreeSeeds.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"LeafCurvature => {LeafCurvature}");
            fg.AppendLine($"MinimumLeafAngle => {MinimumLeafAngle}");
            fg.AppendLine($"MaximumLeafAngle => {MaximumLeafAngle}");
            fg.AppendLine($"BranchDimmingValue => {BranchDimmingValue}");
            fg.AppendLine($"LeafDimmingValue => {LeafDimmingValue}");
            fg.AppendLine($"ShadowRadius => {ShadowRadius}");
            fg.AppendLine($"RockingSpeed => {RockingSpeed}");
            fg.AppendLine($"RustleSpeed => {RustleSpeed}");
            fg.AppendLine($"BillboardWidth => {BillboardWidth}");
            fg.AppendLine($"BillboardHeight => {BillboardHeight}");
        }
        #endregion

        #region Combine
        public Tree_ErrorMask Combine(Tree_ErrorMask rhs)
        {
            var ret = new Tree_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.SpeedTreeSeeds = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.SpeedTreeSeeds.Overall.Combine(rhs.SpeedTreeSeeds.Overall), new List<(int Index, Exception Value)>(this.SpeedTreeSeeds.Specific.And(rhs.SpeedTreeSeeds.Specific)));
            ret.LeafCurvature = this.LeafCurvature.Combine(rhs.LeafCurvature);
            ret.MinimumLeafAngle = this.MinimumLeafAngle.Combine(rhs.MinimumLeafAngle);
            ret.MaximumLeafAngle = this.MaximumLeafAngle.Combine(rhs.MaximumLeafAngle);
            ret.BranchDimmingValue = this.BranchDimmingValue.Combine(rhs.BranchDimmingValue);
            ret.LeafDimmingValue = this.LeafDimmingValue.Combine(rhs.LeafDimmingValue);
            ret.ShadowRadius = this.ShadowRadius.Combine(rhs.ShadowRadius);
            ret.RockingSpeed = this.RockingSpeed.Combine(rhs.RockingSpeed);
            ret.RustleSpeed = this.RustleSpeed.Combine(rhs.RustleSpeed);
            ret.BillboardWidth = this.BillboardWidth.Combine(rhs.BillboardWidth);
            ret.BillboardHeight = this.BillboardHeight.Combine(rhs.BillboardHeight);
            return ret;
        }
        public static Tree_ErrorMask Combine(Tree_ErrorMask lhs, Tree_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Tree_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Tree_ErrorMask();
        }
        #endregion

    }
    public class Tree_CopyMask : OblivionMajorRecord_CopyMask
    {
        public Tree_CopyMask()
        {
        }

        public Tree_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Model = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.Icon = defaultOn;
            this.SpeedTreeSeeds = deepCopyOption;
            this.LeafCurvature = defaultOn;
            this.MinimumLeafAngle = defaultOn;
            this.MaximumLeafAngle = defaultOn;
            this.BranchDimmingValue = defaultOn;
            this.LeafDimmingValue = defaultOn;
            this.ShadowRadius = defaultOn;
            this.RockingSpeed = defaultOn;
            this.RustleSpeed = defaultOn;
            this.BillboardWidth = defaultOn;
            this.BillboardHeight = defaultOn;
        }

        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Icon;
        public CopyOption SpeedTreeSeeds;
        public bool LeafCurvature;
        public bool MinimumLeafAngle;
        public bool MaximumLeafAngle;
        public bool BranchDimmingValue;
        public bool LeafDimmingValue;
        public bool ShadowRadius;
        public bool RockingSpeed;
        public bool RustleSpeed;
        public bool BillboardWidth;
        public bool BillboardHeight;
        #endregion

    }

    public class Tree_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Icon;
        public bool SpeedTreeSeeds;
        public bool LeafCurvature;
        public bool MinimumLeafAngle;
        public bool MaximumLeafAngle;
        public bool BranchDimmingValue;
        public bool LeafDimmingValue;
        public bool ShadowRadius;
        public bool RockingSpeed;
        public bool RustleSpeed;
        public bool BillboardWidth;
        public bool BillboardHeight;
        #endregion

        #region Ctors
        public Tree_TranslationMask()
            : base()
        {
        }

        public Tree_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.Icon = defaultOn;
            this.SpeedTreeSeeds = defaultOn;
            this.LeafCurvature = defaultOn;
            this.MinimumLeafAngle = defaultOn;
            this.MaximumLeafAngle = defaultOn;
            this.BranchDimmingValue = defaultOn;
            this.LeafDimmingValue = defaultOn;
            this.ShadowRadius = defaultOn;
            this.RockingSpeed = defaultOn;
            this.RustleSpeed = defaultOn;
            this.BillboardWidth = defaultOn;
            this.BillboardHeight = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Icon, null));
            ret.Add((SpeedTreeSeeds, null));
            ret.Add((LeafCurvature, null));
            ret.Add((MinimumLeafAngle, null));
            ret.Add((MaximumLeafAngle, null));
            ret.Add((BranchDimmingValue, null));
            ret.Add((LeafDimmingValue, null));
            ret.Add((ShadowRadius, null));
            ret.Add((RockingSpeed, null));
            ret.Add((RustleSpeed, null));
            ret.Add((BillboardWidth, null));
            ret.Add((BillboardHeight, null));
        }
    }
    #endregion

    #endregion

}
