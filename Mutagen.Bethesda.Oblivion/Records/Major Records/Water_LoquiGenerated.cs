/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Windows.Media;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Water : 
        MajorRecord,
        IWater,
        ILoquiObject<Water>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<Water>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Water_Registration.Instance;
        public new static Water_Registration Registration => Water_Registration.Instance;

        #region Ctor
        protected Water()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Texture
        public bool Texture_IsSet
        {
            get => _hasBeenSetTracker[(int)Water_FieldIndex.Texture];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Water_FieldIndex.Texture, nameof(Texture_IsSet));
        }
        bool IWaterGetter.Texture_IsSet => Texture_IsSet;
        private String _Texture;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Texture
        {
            get => this._Texture;
            set => Texture_Set(value);
        }
        String IWaterGetter.Texture => this.Texture;
        public void Texture_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Texture, value, _hasBeenSetTracker, markSet, (int)Water_FieldIndex.Texture, nameof(Texture), nameof(Texture_IsSet));
        }
        public void Texture_Unset()
        {
            this.Texture_Set(default(String), false);
        }
        #endregion
        #region Opacity
        public bool Opacity_IsSet
        {
            get => _hasBeenSetTracker[(int)Water_FieldIndex.Opacity];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Water_FieldIndex.Opacity, nameof(Opacity_IsSet));
        }
        bool IWaterGetter.Opacity_IsSet => Opacity_IsSet;
        private Byte _Opacity;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Opacity
        {
            get => this._Opacity;
            set => Opacity_Set(value);
        }
        Byte IWaterGetter.Opacity => this.Opacity;
        public void Opacity_Set(
            Byte value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Opacity, value, _hasBeenSetTracker, markSet, (int)Water_FieldIndex.Opacity, nameof(Opacity), nameof(Opacity_IsSet));
        }
        public void Opacity_Unset()
        {
            this.Opacity_Set(default(Byte), false);
        }
        #endregion
        #region Flags
        public bool Flags_IsSet
        {
            get => _hasBeenSetTracker[(int)Water_FieldIndex.Flags];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Water_FieldIndex.Flags, nameof(Flags_IsSet));
        }
        bool IWaterGetter.Flags_IsSet => Flags_IsSet;
        private Water.Flag _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Water.Flag Flags
        {
            get => this._Flags;
            set => Flags_Set(value);
        }
        Water.Flag IWaterGetter.Flags => this.Flags;
        public void Flags_Set(
            Water.Flag value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Flags, value, _hasBeenSetTracker, markSet, (int)Water_FieldIndex.Flags, nameof(Flags), nameof(Flags_IsSet));
        }
        public void Flags_Unset()
        {
            this.Flags_Set(default(Water.Flag), false);
        }
        #endregion
        #region MaterialID
        public bool MaterialID_IsSet
        {
            get => _hasBeenSetTracker[(int)Water_FieldIndex.MaterialID];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Water_FieldIndex.MaterialID, nameof(MaterialID_IsSet));
        }
        bool IWaterGetter.MaterialID_IsSet => MaterialID_IsSet;
        private String _MaterialID;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String MaterialID
        {
            get => this._MaterialID;
            set => MaterialID_Set(value);
        }
        String IWaterGetter.MaterialID => this.MaterialID;
        public void MaterialID_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _MaterialID, value, _hasBeenSetTracker, markSet, (int)Water_FieldIndex.MaterialID, nameof(MaterialID), nameof(MaterialID_IsSet));
        }
        public void MaterialID_Unset()
        {
            this.MaterialID_Set(default(String), false);
        }
        #endregion
        #region Sound
        public FormIDSetLink<Sound> Sound_Property { get; } = new FormIDSetLink<Sound>();
        public Sound Sound { get => Sound_Property.Item; set => Sound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Sound> IWaterGetter.Sound_Property => this.Sound_Property;
        #endregion
        #region WindVelocity
        private Single _WindVelocity;
        public Single WindVelocity
        {
            get => this._WindVelocity;
            set => this.RaiseAndSetIfChanged(ref this._WindVelocity, value, nameof(WindVelocity));
        }
        #endregion
        #region WindDirection
        private Single _WindDirection;
        public Single WindDirection
        {
            get => this._WindDirection;
            set => this.RaiseAndSetIfChanged(ref this._WindDirection, value, nameof(WindDirection));
        }
        #endregion
        #region WaveAmplitude
        private Single _WaveAmplitude;
        public Single WaveAmplitude
        {
            get => this._WaveAmplitude;
            set => this.RaiseAndSetIfChanged(ref this._WaveAmplitude, value, nameof(WaveAmplitude));
        }
        #endregion
        #region WaveFrequency
        private Single _WaveFrequency;
        public Single WaveFrequency
        {
            get => this._WaveFrequency;
            set => this.RaiseAndSetIfChanged(ref this._WaveFrequency, value, nameof(WaveFrequency));
        }
        #endregion
        #region SunPower
        private Single _SunPower;
        public Single SunPower
        {
            get => this._SunPower;
            set => this.RaiseAndSetIfChanged(ref this._SunPower, value, nameof(SunPower));
        }
        #endregion
        #region ReflectivityAmount
        private Single _ReflectivityAmount;
        public Single ReflectivityAmount
        {
            get => this._ReflectivityAmount;
            set => this.RaiseAndSetIfChanged(ref this._ReflectivityAmount, value, nameof(ReflectivityAmount));
        }
        #endregion
        #region FresnelAmount
        private Single _FresnelAmount;
        public Single FresnelAmount
        {
            get => this._FresnelAmount;
            set => this.RaiseAndSetIfChanged(ref this._FresnelAmount, value, nameof(FresnelAmount));
        }
        #endregion
        #region ScrollXSpeed
        private Single _ScrollXSpeed;
        public Single ScrollXSpeed
        {
            get => this._ScrollXSpeed;
            set => this.RaiseAndSetIfChanged(ref this._ScrollXSpeed, value, nameof(ScrollXSpeed));
        }
        #endregion
        #region ScrollYSpeed
        private Single _ScrollYSpeed;
        public Single ScrollYSpeed
        {
            get => this._ScrollYSpeed;
            set => this.RaiseAndSetIfChanged(ref this._ScrollYSpeed, value, nameof(ScrollYSpeed));
        }
        #endregion
        #region FogDistanceNearPlane
        private Single _FogDistanceNearPlane;
        public Single FogDistanceNearPlane
        {
            get => this._FogDistanceNearPlane;
            set => this.RaiseAndSetIfChanged(ref this._FogDistanceNearPlane, value, nameof(FogDistanceNearPlane));
        }
        #endregion
        #region FogDistanceFarPlane
        private Single _FogDistanceFarPlane;
        public Single FogDistanceFarPlane
        {
            get => this._FogDistanceFarPlane;
            set => this.RaiseAndSetIfChanged(ref this._FogDistanceFarPlane, value, nameof(FogDistanceFarPlane));
        }
        #endregion
        #region ShallowColor
        private Color _ShallowColor;
        public Color ShallowColor
        {
            get => this._ShallowColor;
            set => this.RaiseAndSetIfChanged(ref this._ShallowColor, value, nameof(ShallowColor));
        }
        #endregion
        #region DeepColor
        private Color _DeepColor;
        public Color DeepColor
        {
            get => this._DeepColor;
            set => this.RaiseAndSetIfChanged(ref this._DeepColor, value, nameof(DeepColor));
        }
        #endregion
        #region ReflectionColor
        private Color _ReflectionColor;
        public Color ReflectionColor
        {
            get => this._ReflectionColor;
            set => this.RaiseAndSetIfChanged(ref this._ReflectionColor, value, nameof(ReflectionColor));
        }
        #endregion
        #region TextureBlend
        private Byte _TextureBlend;
        public Byte TextureBlend
        {
            get => this._TextureBlend;
            set => this.RaiseAndSetIfChanged(ref this._TextureBlend, value, nameof(TextureBlend));
        }
        #endregion
        #region RainSimulatorForce
        private Single _RainSimulatorForce;
        public Single RainSimulatorForce
        {
            get => this._RainSimulatorForce;
            set => this.RaiseAndSetIfChanged(ref this._RainSimulatorForce, value, nameof(RainSimulatorForce));
        }
        #endregion
        #region RainSimulatorVelocity
        private Single _RainSimulatorVelocity;
        public Single RainSimulatorVelocity
        {
            get => this._RainSimulatorVelocity;
            set => this.RaiseAndSetIfChanged(ref this._RainSimulatorVelocity, value, nameof(RainSimulatorVelocity));
        }
        #endregion
        #region RainSimulatorFalloff
        private Single _RainSimulatorFalloff;
        public Single RainSimulatorFalloff
        {
            get => this._RainSimulatorFalloff;
            set => this.RaiseAndSetIfChanged(ref this._RainSimulatorFalloff, value, nameof(RainSimulatorFalloff));
        }
        #endregion
        #region RainSimulatorDampner
        private Single _RainSimulatorDampner;
        public Single RainSimulatorDampner
        {
            get => this._RainSimulatorDampner;
            set => this.RaiseAndSetIfChanged(ref this._RainSimulatorDampner, value, nameof(RainSimulatorDampner));
        }
        #endregion
        #region RainSimulatorStartingSize
        private Single _RainSimulatorStartingSize;
        public Single RainSimulatorStartingSize
        {
            get => this._RainSimulatorStartingSize;
            set => this.RaiseAndSetIfChanged(ref this._RainSimulatorStartingSize, value, nameof(RainSimulatorStartingSize));
        }
        #endregion
        #region DisplacementSimulatorForce
        private Single _DisplacementSimulatorForce;
        public Single DisplacementSimulatorForce
        {
            get => this._DisplacementSimulatorForce;
            set => this.RaiseAndSetIfChanged(ref this._DisplacementSimulatorForce, value, nameof(DisplacementSimulatorForce));
        }
        #endregion
        #region DisplacementSimulatorVelocity
        private Single _DisplacementSimulatorVelocity;
        public Single DisplacementSimulatorVelocity
        {
            get => this._DisplacementSimulatorVelocity;
            set => this.RaiseAndSetIfChanged(ref this._DisplacementSimulatorVelocity, value, nameof(DisplacementSimulatorVelocity));
        }
        #endregion
        #region DisplacementSimulatorFalloff
        private Single _DisplacementSimulatorFalloff;
        public Single DisplacementSimulatorFalloff
        {
            get => this._DisplacementSimulatorFalloff;
            set => this.RaiseAndSetIfChanged(ref this._DisplacementSimulatorFalloff, value, nameof(DisplacementSimulatorFalloff));
        }
        #endregion
        #region DisplacementSimulatorDampner
        private Single _DisplacementSimulatorDampner;
        public Single DisplacementSimulatorDampner
        {
            get => this._DisplacementSimulatorDampner;
            set => this.RaiseAndSetIfChanged(ref this._DisplacementSimulatorDampner, value, nameof(DisplacementSimulatorDampner));
        }
        #endregion
        #region DisplacementSimulatorStartingSize
        private Single _DisplacementSimulatorStartingSize;
        public Single DisplacementSimulatorStartingSize
        {
            get => this._DisplacementSimulatorStartingSize;
            set => this.RaiseAndSetIfChanged(ref this._DisplacementSimulatorStartingSize, value, nameof(DisplacementSimulatorStartingSize));
        }
        #endregion
        #region Damage
        private UInt16 _Damage;
        public UInt16 Damage
        {
            get => this._Damage;
            set => this.RaiseAndSetIfChanged(ref this._Damage, value, nameof(Damage));
        }
        #endregion
        #region RelatedWaters
        public bool RelatedWaters_IsSet
        {
            get => _hasBeenSetTracker[(int)Water_FieldIndex.RelatedWaters];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Water_FieldIndex.RelatedWaters, nameof(RelatedWaters_IsSet));
        }
        bool IWaterGetter.RelatedWaters_IsSet => RelatedWaters_IsSet;
        private RelatedWaters _RelatedWaters;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RelatedWaters RelatedWaters
        {
            get => _RelatedWaters;
            set => RelatedWaters_Set(value);
        }
        public void RelatedWaters_Set(
            RelatedWaters value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _RelatedWaters, value, _hasBeenSetTracker, markSet, (int)Water_FieldIndex.RelatedWaters, nameof(RelatedWaters), nameof(RelatedWaters_IsSet));
        }
        public void RelatedWaters_Unset()
        {
            this.RelatedWaters_Set(default(RelatedWaters), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RelatedWaters IWaterGetter.RelatedWaters => this.RelatedWaters;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => WaterCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => WaterCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => WaterCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            WaterCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Water>.GetEqualsMask(Water rhs) => WaterCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IWaterGetter>.GetEqualsMask(IWaterGetter rhs) => WaterCommon.GetEqualsMask(this, rhs);
        #region To String
        public string ToString(
            string name = null,
            Water_Mask<bool> printMask = null)
        {
            return WaterCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            WaterCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Water_Mask<bool> GetHasBeenSetMask()
        {
            return WaterCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Water rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Water rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Texture_IsSet != rhs.Texture_IsSet) return false;
            if (Texture_IsSet)
            {
                if (!object.Equals(this.Texture, rhs.Texture)) return false;
            }
            if (Opacity_IsSet != rhs.Opacity_IsSet) return false;
            if (Opacity_IsSet)
            {
                if (this.Opacity != rhs.Opacity) return false;
            }
            if (Flags_IsSet != rhs.Flags_IsSet) return false;
            if (Flags_IsSet)
            {
                if (this.Flags != rhs.Flags) return false;
            }
            if (MaterialID_IsSet != rhs.MaterialID_IsSet) return false;
            if (MaterialID_IsSet)
            {
                if (!object.Equals(this.MaterialID, rhs.MaterialID)) return false;
            }
            if (Sound_Property.HasBeenSet != rhs.Sound_Property.HasBeenSet) return false;
            if (Sound_Property.HasBeenSet)
            {
                if (!this.Sound_Property.Equals(rhs.Sound_Property)) return false;
            }
            if (!this.WindVelocity.EqualsWithin(rhs.WindVelocity)) return false;
            if (!this.WindDirection.EqualsWithin(rhs.WindDirection)) return false;
            if (!this.WaveAmplitude.EqualsWithin(rhs.WaveAmplitude)) return false;
            if (!this.WaveFrequency.EqualsWithin(rhs.WaveFrequency)) return false;
            if (!this.SunPower.EqualsWithin(rhs.SunPower)) return false;
            if (!this.ReflectivityAmount.EqualsWithin(rhs.ReflectivityAmount)) return false;
            if (!this.FresnelAmount.EqualsWithin(rhs.FresnelAmount)) return false;
            if (!this.ScrollXSpeed.EqualsWithin(rhs.ScrollXSpeed)) return false;
            if (!this.ScrollYSpeed.EqualsWithin(rhs.ScrollYSpeed)) return false;
            if (!this.FogDistanceNearPlane.EqualsWithin(rhs.FogDistanceNearPlane)) return false;
            if (!this.FogDistanceFarPlane.EqualsWithin(rhs.FogDistanceFarPlane)) return false;
            if (this.ShallowColor != rhs.ShallowColor) return false;
            if (this.DeepColor != rhs.DeepColor) return false;
            if (this.ReflectionColor != rhs.ReflectionColor) return false;
            if (this.TextureBlend != rhs.TextureBlend) return false;
            if (!this.RainSimulatorForce.EqualsWithin(rhs.RainSimulatorForce)) return false;
            if (!this.RainSimulatorVelocity.EqualsWithin(rhs.RainSimulatorVelocity)) return false;
            if (!this.RainSimulatorFalloff.EqualsWithin(rhs.RainSimulatorFalloff)) return false;
            if (!this.RainSimulatorDampner.EqualsWithin(rhs.RainSimulatorDampner)) return false;
            if (!this.RainSimulatorStartingSize.EqualsWithin(rhs.RainSimulatorStartingSize)) return false;
            if (!this.DisplacementSimulatorForce.EqualsWithin(rhs.DisplacementSimulatorForce)) return false;
            if (!this.DisplacementSimulatorVelocity.EqualsWithin(rhs.DisplacementSimulatorVelocity)) return false;
            if (!this.DisplacementSimulatorFalloff.EqualsWithin(rhs.DisplacementSimulatorFalloff)) return false;
            if (!this.DisplacementSimulatorDampner.EqualsWithin(rhs.DisplacementSimulatorDampner)) return false;
            if (!this.DisplacementSimulatorStartingSize.EqualsWithin(rhs.DisplacementSimulatorStartingSize)) return false;
            if (this.Damage != rhs.Damage) return false;
            if (RelatedWaters_IsSet != rhs.RelatedWaters_IsSet) return false;
            if (RelatedWaters_IsSet)
            {
                if (!object.Equals(this.RelatedWaters, rhs.RelatedWaters)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Texture_IsSet)
            {
                ret = HashHelper.GetHashCode(Texture).CombineHashCode(ret);
            }
            if (Opacity_IsSet)
            {
                ret = HashHelper.GetHashCode(Opacity).CombineHashCode(ret);
            }
            if (Flags_IsSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            if (MaterialID_IsSet)
            {
                ret = HashHelper.GetHashCode(MaterialID).CombineHashCode(ret);
            }
            if (Sound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Sound).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(WindVelocity).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(WindDirection).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(WaveAmplitude).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(WaveFrequency).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SunPower).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ReflectivityAmount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FresnelAmount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ScrollXSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ScrollYSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogDistanceNearPlane).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogDistanceFarPlane).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ShallowColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DeepColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ReflectionColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(TextureBlend).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RainSimulatorForce).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RainSimulatorVelocity).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RainSimulatorFalloff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RainSimulatorDampner).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RainSimulatorStartingSize).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DisplacementSimulatorForce).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DisplacementSimulatorVelocity).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DisplacementSimulatorFalloff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DisplacementSimulatorDampner).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DisplacementSimulatorStartingSize).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Damage).CombineHashCode(ret);
            if (RelatedWaters_IsSet)
            {
                ret = HashHelper.GetHashCode(RelatedWaters).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static Water Create_Xml(
            XElement root,
            Water_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Water Create_Xml(
            XElement root,
            out Water_ErrorMask errorMask,
            bool doMasks = true,
            Water_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Water_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Water Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new Water();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Water Create_Xml(
            string path,
            Water_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Water Create_Xml(
            string path,
            out Water_ErrorMask errorMask,
            Water_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Water Create_Xml(
            Stream stream,
            Water_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Water Create_Xml(
            Stream stream,
            out Water_ErrorMask errorMask,
            Water_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out Water_ErrorMask errorMask,
            Water_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Water_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Water>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Water_ErrorMask errorMask,
            Water_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Water_ErrorMask errorMask,
            Water_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Water_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Water_ErrorMask errorMask,
            bool doMasks = true,
            Water_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Water_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Water_ErrorMask errorMask,
            Water_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out Water_ErrorMask errorMask,
            Water_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Water_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            WaterCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            Water item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Texture":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.Texture);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String TextureParse,
                            errorMask: errorMask))
                        {
                            item.Texture = TextureParse;
                        }
                        else
                        {
                            item.Texture = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Opacity":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.Opacity);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte OpacityParse,
                            errorMask: errorMask))
                        {
                            item.Opacity = OpacityParse;
                        }
                        else
                        {
                            item.Opacity = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.Flags);
                        if (EnumXmlTranslation<Water.Flag>.Instance.Parse(
                            root: root,
                            item: out Water.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Water.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaterialID":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.MaterialID);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String MaterialIDParse,
                            errorMask: errorMask))
                        {
                            item.MaterialID = MaterialIDParse;
                        }
                        else
                        {
                            item.MaterialID = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sound":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.Sound_Property,
                        fieldIndex: (int)Water_FieldIndex.Sound,
                        errorMask: errorMask);
                    break;
                case "WindVelocity":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.WindVelocity);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single WindVelocityParse,
                            errorMask: errorMask))
                        {
                            item.WindVelocity = WindVelocityParse;
                        }
                        else
                        {
                            item.WindVelocity = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WindDirection":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.WindDirection);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single WindDirectionParse,
                            errorMask: errorMask))
                        {
                            item.WindDirection = WindDirectionParse;
                        }
                        else
                        {
                            item.WindDirection = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WaveAmplitude":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.WaveAmplitude);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single WaveAmplitudeParse,
                            errorMask: errorMask))
                        {
                            item.WaveAmplitude = WaveAmplitudeParse;
                        }
                        else
                        {
                            item.WaveAmplitude = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WaveFrequency":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.WaveFrequency);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single WaveFrequencyParse,
                            errorMask: errorMask))
                        {
                            item.WaveFrequency = WaveFrequencyParse;
                        }
                        else
                        {
                            item.WaveFrequency = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunPower":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.SunPower);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single SunPowerParse,
                            errorMask: errorMask))
                        {
                            item.SunPower = SunPowerParse;
                        }
                        else
                        {
                            item.SunPower = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ReflectivityAmount":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.ReflectivityAmount);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single ReflectivityAmountParse,
                            errorMask: errorMask))
                        {
                            item.ReflectivityAmount = ReflectivityAmountParse;
                        }
                        else
                        {
                            item.ReflectivityAmount = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FresnelAmount":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.FresnelAmount);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single FresnelAmountParse,
                            errorMask: errorMask))
                        {
                            item.FresnelAmount = FresnelAmountParse;
                        }
                        else
                        {
                            item.FresnelAmount = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ScrollXSpeed":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.ScrollXSpeed);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single ScrollXSpeedParse,
                            errorMask: errorMask))
                        {
                            item.ScrollXSpeed = ScrollXSpeedParse;
                        }
                        else
                        {
                            item.ScrollXSpeed = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ScrollYSpeed":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.ScrollYSpeed);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single ScrollYSpeedParse,
                            errorMask: errorMask))
                        {
                            item.ScrollYSpeed = ScrollYSpeedParse;
                        }
                        else
                        {
                            item.ScrollYSpeed = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogDistanceNearPlane":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.FogDistanceNearPlane);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single FogDistanceNearPlaneParse,
                            errorMask: errorMask))
                        {
                            item.FogDistanceNearPlane = FogDistanceNearPlaneParse;
                        }
                        else
                        {
                            item.FogDistanceNearPlane = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogDistanceFarPlane":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.FogDistanceFarPlane);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single FogDistanceFarPlaneParse,
                            errorMask: errorMask))
                        {
                            item.FogDistanceFarPlane = FogDistanceFarPlaneParse;
                        }
                        else
                        {
                            item.FogDistanceFarPlane = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ShallowColor":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.ShallowColor);
                        if (ColorXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Color ShallowColorParse,
                            errorMask: errorMask))
                        {
                            item.ShallowColor = ShallowColorParse;
                        }
                        else
                        {
                            item.ShallowColor = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DeepColor":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.DeepColor);
                        if (ColorXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Color DeepColorParse,
                            errorMask: errorMask))
                        {
                            item.DeepColor = DeepColorParse;
                        }
                        else
                        {
                            item.DeepColor = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ReflectionColor":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.ReflectionColor);
                        if (ColorXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Color ReflectionColorParse,
                            errorMask: errorMask))
                        {
                            item.ReflectionColor = ReflectionColorParse;
                        }
                        else
                        {
                            item.ReflectionColor = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TextureBlend":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.TextureBlend);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte TextureBlendParse,
                            errorMask: errorMask))
                        {
                            item.TextureBlend = TextureBlendParse;
                        }
                        else
                        {
                            item.TextureBlend = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RainSimulatorForce":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorForce);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single RainSimulatorForceParse,
                            errorMask: errorMask))
                        {
                            item.RainSimulatorForce = RainSimulatorForceParse;
                        }
                        else
                        {
                            item.RainSimulatorForce = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RainSimulatorVelocity":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorVelocity);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single RainSimulatorVelocityParse,
                            errorMask: errorMask))
                        {
                            item.RainSimulatorVelocity = RainSimulatorVelocityParse;
                        }
                        else
                        {
                            item.RainSimulatorVelocity = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RainSimulatorFalloff":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorFalloff);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single RainSimulatorFalloffParse,
                            errorMask: errorMask))
                        {
                            item.RainSimulatorFalloff = RainSimulatorFalloffParse;
                        }
                        else
                        {
                            item.RainSimulatorFalloff = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RainSimulatorDampner":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorDampner);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single RainSimulatorDampnerParse,
                            errorMask: errorMask))
                        {
                            item.RainSimulatorDampner = RainSimulatorDampnerParse;
                        }
                        else
                        {
                            item.RainSimulatorDampner = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RainSimulatorStartingSize":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorStartingSize);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single RainSimulatorStartingSizeParse,
                            errorMask: errorMask))
                        {
                            item.RainSimulatorStartingSize = RainSimulatorStartingSizeParse;
                        }
                        else
                        {
                            item.RainSimulatorStartingSize = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DisplacementSimulatorForce":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorForce);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single DisplacementSimulatorForceParse,
                            errorMask: errorMask))
                        {
                            item.DisplacementSimulatorForce = DisplacementSimulatorForceParse;
                        }
                        else
                        {
                            item.DisplacementSimulatorForce = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DisplacementSimulatorVelocity":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorVelocity);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single DisplacementSimulatorVelocityParse,
                            errorMask: errorMask))
                        {
                            item.DisplacementSimulatorVelocity = DisplacementSimulatorVelocityParse;
                        }
                        else
                        {
                            item.DisplacementSimulatorVelocity = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DisplacementSimulatorFalloff":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorFalloff);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single DisplacementSimulatorFalloffParse,
                            errorMask: errorMask))
                        {
                            item.DisplacementSimulatorFalloff = DisplacementSimulatorFalloffParse;
                        }
                        else
                        {
                            item.DisplacementSimulatorFalloff = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DisplacementSimulatorDampner":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorDampner);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single DisplacementSimulatorDampnerParse,
                            errorMask: errorMask))
                        {
                            item.DisplacementSimulatorDampner = DisplacementSimulatorDampnerParse;
                        }
                        else
                        {
                            item.DisplacementSimulatorDampner = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DisplacementSimulatorStartingSize":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorStartingSize);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single DisplacementSimulatorStartingSizeParse,
                            errorMask: errorMask))
                        {
                            item.DisplacementSimulatorStartingSize = DisplacementSimulatorStartingSizeParse;
                        }
                        else
                        {
                            item.DisplacementSimulatorStartingSize = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Damage":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.Damage);
                        if (UInt16XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt16 DamageParse,
                            errorMask: errorMask))
                        {
                            item.Damage = DamageParse;
                        }
                        else
                        {
                            item.Damage = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RelatedWaters":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.RelatedWaters);
                        if (LoquiXmlTranslation<RelatedWaters>.Instance.Parse(
                            root: root,
                            item: out RelatedWaters RelatedWatersParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Water_FieldIndex.RelatedWaters)))
                        {
                            item.RelatedWaters = RelatedWatersParse;
                        }
                        else
                        {
                            item.RelatedWaters = default(RelatedWaters);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecord.Fill_Xml_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Water_FieldIndex)index)
            {
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.RelatedWaters:
                    return _hasBeenSetTracker[index];
                case Water_FieldIndex.Sound:
                    return Sound_Property.HasBeenSet;
                case Water_FieldIndex.WindVelocity:
                case Water_FieldIndex.WindDirection:
                case Water_FieldIndex.WaveAmplitude:
                case Water_FieldIndex.WaveFrequency:
                case Water_FieldIndex.SunPower:
                case Water_FieldIndex.ReflectivityAmount:
                case Water_FieldIndex.FresnelAmount:
                case Water_FieldIndex.ScrollXSpeed:
                case Water_FieldIndex.ScrollYSpeed:
                case Water_FieldIndex.FogDistanceNearPlane:
                case Water_FieldIndex.FogDistanceFarPlane:
                case Water_FieldIndex.ShallowColor:
                case Water_FieldIndex.DeepColor:
                case Water_FieldIndex.ReflectionColor:
                case Water_FieldIndex.TextureBlend:
                case Water_FieldIndex.RainSimulatorForce:
                case Water_FieldIndex.RainSimulatorVelocity:
                case Water_FieldIndex.RainSimulatorFalloff:
                case Water_FieldIndex.RainSimulatorDampner:
                case Water_FieldIndex.RainSimulatorStartingSize:
                case Water_FieldIndex.DisplacementSimulatorForce:
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                case Water_FieldIndex.DisplacementSimulatorDampner:
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                case Water_FieldIndex.Damage:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Water_Registration.TRIGGERING_RECORD_TYPE;
        public DATADataType DATADataTypeState;
        [Flags]
        public enum DATADataType
        {
            Has = 1,
            Break0 = 2,
            Break1 = 4,
            Break2 = 8,
            Break3 = 16
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Sound_Property;
            if (RelatedWaters != null)
            {
                foreach (var item in RelatedWaters.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod,
            NotifyingFireParameters cmds = null)
            
        {
            base.Link(
                modList,
                sourceMod,
                cmds);
            Sound_Property.Link(
                modList,
                sourceMod,
                cmds);
            if (RelatedWaters != null)
            {
                RelatedWaters?.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
        }

        public Water(FormKey formKey)
        {
            this.FormKey = formKey;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Water Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                frame: frame,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Water Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Water_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Water_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Water Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Water>(
                record: new Water(),
                frame: frame,
                errorMask: errorMask,
                recType: Water_Registration.WATR_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Water Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences);
            }
        }

        public static Water Create_Binary(
            string path,
            MasterReferences masterReferences,
            out Water_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences,
                    errorMask: out errorMask);
            }
        }

        public static Water Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences);
            }
        }

        public static Water Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out Water_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Water_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Water_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out Water_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        masterReferences: masterReferences,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out Water_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    masterReferences: masterReferences,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Water_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            WaterCommon.Write_Binary(
                item: this,
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        static partial void FillBinary_NothingCustomLogic_Custom(
            MutagenFrame frame,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_NothingCustomLogic_Custom(
            MutagenWriter writer,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_NothingCustomLogic(
            MutagenWriter writer,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_NothingCustomLogic_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinary_BloodCustomLogic_Custom(
            MutagenFrame frame,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_BloodCustomLogic_Custom(
            MutagenWriter writer,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_BloodCustomLogic(
            MutagenWriter writer,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_BloodCustomLogic_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinary_OilCustomLogic_Custom(
            MutagenFrame frame,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_OilCustomLogic_Custom(
            MutagenWriter writer,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_OilCustomLogic(
            MutagenWriter writer,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_OilCustomLogic_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinary_OddExtraBytes_Custom(
            MutagenFrame frame,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_OddExtraBytes_Custom(
            MutagenWriter writer,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_OddExtraBytes(
            MutagenWriter writer,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_OddExtraBytes_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static void Fill_Binary_Structs(
            Water item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Water item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4D414E54: // TNAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.Texture);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String TextureParse,
                            errorMask: errorMask))
                        {
                            item.Texture = TextureParse;
                        }
                        else
                        {
                            item.Texture = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Texture);
                case 0x4D414E41: // ANAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.Opacity);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte OpacityParse,
                            errorMask: errorMask))
                        {
                            item.Opacity = OpacityParse;
                        }
                        else
                        {
                            item.Opacity = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Opacity);
                case 0x4D414E46: // FNAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.Flags);
                        if (EnumBinaryTranslation<Water.Flag>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Water.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Water.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Flags);
                case 0x4D414E4D: // MNAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.MaterialID);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String MaterialIDParse,
                            errorMask: errorMask))
                        {
                            item.MaterialID = MaterialIDParse;
                        }
                        else
                        {
                            item.MaterialID = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.MaterialID);
                case 0x4D414E53: // SNAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Sound_Property,
                        fieldIndex: (int)Water_FieldIndex.Sound,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Sound);
                case 0x41544144: // DATA
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        if (!dataFrame.Complete)
                        {
                            item.DATADataTypeState = DATADataType.Has;
                        }
                        FillBinary_NothingCustomLogic_Custom(
                            frame: dataFrame,
                            item: item,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                        if (dataFrame.Complete)
                        {
                            item.DATADataTypeState |= DATADataType.Break0;
                            return TryGet<int?>.Succeed(null);
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.WindVelocity);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single WindVelocityParse,
                                errorMask: errorMask))
                            {
                                item.WindVelocity = WindVelocityParse;
                            }
                            else
                            {
                                item.WindVelocity = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.WindDirection);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single WindDirectionParse,
                                errorMask: errorMask))
                            {
                                item.WindDirection = WindDirectionParse;
                            }
                            else
                            {
                                item.WindDirection = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.WaveAmplitude);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single WaveAmplitudeParse,
                                errorMask: errorMask))
                            {
                                item.WaveAmplitude = WaveAmplitudeParse;
                            }
                            else
                            {
                                item.WaveAmplitude = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.WaveFrequency);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single WaveFrequencyParse,
                                errorMask: errorMask))
                            {
                                item.WaveFrequency = WaveFrequencyParse;
                            }
                            else
                            {
                                item.WaveFrequency = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.SunPower);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single SunPowerParse,
                                errorMask: errorMask))
                            {
                                item.SunPower = SunPowerParse;
                            }
                            else
                            {
                                item.SunPower = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.ReflectivityAmount);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ReflectivityAmountParse,
                                errorMask: errorMask))
                            {
                                item.ReflectivityAmount = ReflectivityAmountParse;
                            }
                            else
                            {
                                item.ReflectivityAmount = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.FresnelAmount);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FresnelAmountParse,
                                errorMask: errorMask))
                            {
                                item.FresnelAmount = FresnelAmountParse;
                            }
                            else
                            {
                                item.FresnelAmount = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.ScrollXSpeed);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ScrollXSpeedParse,
                                errorMask: errorMask))
                            {
                                item.ScrollXSpeed = ScrollXSpeedParse;
                            }
                            else
                            {
                                item.ScrollXSpeed = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.ScrollYSpeed);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ScrollYSpeedParse,
                                errorMask: errorMask))
                            {
                                item.ScrollYSpeed = ScrollYSpeedParse;
                            }
                            else
                            {
                                item.ScrollYSpeed = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.FogDistanceNearPlane);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FogDistanceNearPlaneParse,
                                errorMask: errorMask))
                            {
                                item.FogDistanceNearPlane = FogDistanceNearPlaneParse;
                            }
                            else
                            {
                                item.FogDistanceNearPlane = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        FillBinary_BloodCustomLogic_Custom(
                            frame: dataFrame,
                            item: item,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                        if (dataFrame.Complete)
                        {
                            item.DATADataTypeState |= DATADataType.Break1;
                            return TryGet<int?>.Succeed((int)Water_FieldIndex.FogDistanceNearPlane);
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.FogDistanceFarPlane);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FogDistanceFarPlaneParse,
                                errorMask: errorMask))
                            {
                                item.FogDistanceFarPlane = FogDistanceFarPlaneParse;
                            }
                            else
                            {
                                item.FogDistanceFarPlane = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.ShallowColor);
                            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                extraByte: true,
                                item: out Color ShallowColorParse,
                                errorMask: errorMask))
                            {
                                item.ShallowColor = ShallowColorParse;
                            }
                            else
                            {
                                item.ShallowColor = default(Color);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.DeepColor);
                            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                extraByte: true,
                                item: out Color DeepColorParse,
                                errorMask: errorMask))
                            {
                                item.DeepColor = DeepColorParse;
                            }
                            else
                            {
                                item.DeepColor = default(Color);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.ReflectionColor);
                            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                extraByte: true,
                                item: out Color ReflectionColorParse,
                                errorMask: errorMask))
                            {
                                item.ReflectionColor = ReflectionColorParse;
                            }
                            else
                            {
                                item.ReflectionColor = default(Color);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.TextureBlend);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte TextureBlendParse,
                                errorMask: errorMask))
                            {
                                item.TextureBlend = TextureBlendParse;
                            }
                            else
                            {
                                item.TextureBlend = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        dataFrame.SetPosition(dataFrame.Position + 3);
                        FillBinary_OilCustomLogic_Custom(
                            frame: dataFrame,
                            item: item,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                        if (dataFrame.Complete)
                        {
                            item.DATADataTypeState |= DATADataType.Break2;
                            return TryGet<int?>.Succeed((int)Water_FieldIndex.TextureBlend);
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorForce);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single RainSimulatorForceParse,
                                errorMask: errorMask))
                            {
                                item.RainSimulatorForce = RainSimulatorForceParse;
                            }
                            else
                            {
                                item.RainSimulatorForce = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorVelocity);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single RainSimulatorVelocityParse,
                                errorMask: errorMask))
                            {
                                item.RainSimulatorVelocity = RainSimulatorVelocityParse;
                            }
                            else
                            {
                                item.RainSimulatorVelocity = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorFalloff);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single RainSimulatorFalloffParse,
                                errorMask: errorMask))
                            {
                                item.RainSimulatorFalloff = RainSimulatorFalloffParse;
                            }
                            else
                            {
                                item.RainSimulatorFalloff = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorDampner);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single RainSimulatorDampnerParse,
                                errorMask: errorMask))
                            {
                                item.RainSimulatorDampner = RainSimulatorDampnerParse;
                            }
                            else
                            {
                                item.RainSimulatorDampner = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorStartingSize);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single RainSimulatorStartingSizeParse,
                                errorMask: errorMask))
                            {
                                item.RainSimulatorStartingSize = RainSimulatorStartingSizeParse;
                            }
                            else
                            {
                                item.RainSimulatorStartingSize = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorForce);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single DisplacementSimulatorForceParse,
                                errorMask: errorMask))
                            {
                                item.DisplacementSimulatorForce = DisplacementSimulatorForceParse;
                            }
                            else
                            {
                                item.DisplacementSimulatorForce = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        FillBinary_OddExtraBytes_Custom(
                            frame: dataFrame,
                            item: item,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                        if (dataFrame.Complete)
                        {
                            item.DATADataTypeState |= DATADataType.Break3;
                            return TryGet<int?>.Succeed((int)Water_FieldIndex.DisplacementSimulatorForce);
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorVelocity);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single DisplacementSimulatorVelocityParse,
                                errorMask: errorMask))
                            {
                                item.DisplacementSimulatorVelocity = DisplacementSimulatorVelocityParse;
                            }
                            else
                            {
                                item.DisplacementSimulatorVelocity = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorFalloff);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single DisplacementSimulatorFalloffParse,
                                errorMask: errorMask))
                            {
                                item.DisplacementSimulatorFalloff = DisplacementSimulatorFalloffParse;
                            }
                            else
                            {
                                item.DisplacementSimulatorFalloff = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorDampner);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single DisplacementSimulatorDampnerParse,
                                errorMask: errorMask))
                            {
                                item.DisplacementSimulatorDampner = DisplacementSimulatorDampnerParse;
                            }
                            else
                            {
                                item.DisplacementSimulatorDampner = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorStartingSize);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single DisplacementSimulatorStartingSizeParse,
                                errorMask: errorMask))
                            {
                                item.DisplacementSimulatorStartingSize = DisplacementSimulatorStartingSizeParse;
                            }
                            else
                            {
                                item.DisplacementSimulatorStartingSize = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Water_FieldIndex.Damage);
                            if (Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out UInt16 DamageParse,
                                errorMask: errorMask))
                            {
                                item.Damage = DamageParse;
                            }
                            else
                            {
                                item.Damage = default(UInt16);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Damage);
                case 0x4D414E47: // GNAM
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.RelatedWaters);
                        if (LoquiBinaryTranslation<RelatedWaters>.Instance.Parse(
                            frame: frame,
                            masterReferences: masterReferences,
                            item: out RelatedWaters RelatedWatersParse,
                            errorMask: errorMask))
                        {
                            item.RelatedWaters = RelatedWatersParse;
                        }
                        else
                        {
                            item.RelatedWaters = default(RelatedWaters);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.RelatedWaters);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Water Copy(
            Water_CopyMask copyMask = null,
            IWaterGetter def = null)
        {
            return Water.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Water Copy(
            IWater item,
            Water_CopyMask copyMask = null,
            IWaterGetter def = null)
        {
            Water ret;
            if (item.GetType().Equals(typeof(Water)))
            {
                ret = new Water();
            }
            else
            {
                ret = (Water)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Water Copy_ToLoqui(
            IWaterGetter item,
            Water_CopyMask copyMask = null,
            IWaterGetter def = null)
        {
            Water ret;
            if (item.GetType().Equals(typeof(Water)))
            {
                ret = new Water() as Water;
            }
            else
            {
                ret = (Water)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(
            IMajorRecordGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IWaterGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IWaterGetter rhs,
            Water_CopyMask copyMask,
            IWaterGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IWaterGetter rhs,
            out Water_ErrorMask errorMask,
            Water_CopyMask copyMask = null,
            IWaterGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WaterCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Water_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IWaterGetter rhs,
            ErrorMaskBuilder errorMask,
            Water_CopyMask copyMask = null,
            IWaterGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            WaterCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                    this.Texture = (String)obj;
                    break;
                case Water_FieldIndex.Opacity:
                    this.Opacity = (Byte)obj;
                    break;
                case Water_FieldIndex.Flags:
                    this.Flags = (Water.Flag)obj;
                    break;
                case Water_FieldIndex.MaterialID:
                    this.MaterialID = (String)obj;
                    break;
                case Water_FieldIndex.Sound:
                    this.Sound_Property.Set(
                        (FormIDSetLink<Sound>)obj,
                        cmds);
                    break;
                case Water_FieldIndex.WindVelocity:
                    this.WindVelocity = (Single)obj;
                    break;
                case Water_FieldIndex.WindDirection:
                    this.WindDirection = (Single)obj;
                    break;
                case Water_FieldIndex.WaveAmplitude:
                    this.WaveAmplitude = (Single)obj;
                    break;
                case Water_FieldIndex.WaveFrequency:
                    this.WaveFrequency = (Single)obj;
                    break;
                case Water_FieldIndex.SunPower:
                    this.SunPower = (Single)obj;
                    break;
                case Water_FieldIndex.ReflectivityAmount:
                    this.ReflectivityAmount = (Single)obj;
                    break;
                case Water_FieldIndex.FresnelAmount:
                    this.FresnelAmount = (Single)obj;
                    break;
                case Water_FieldIndex.ScrollXSpeed:
                    this.ScrollXSpeed = (Single)obj;
                    break;
                case Water_FieldIndex.ScrollYSpeed:
                    this.ScrollYSpeed = (Single)obj;
                    break;
                case Water_FieldIndex.FogDistanceNearPlane:
                    this.FogDistanceNearPlane = (Single)obj;
                    break;
                case Water_FieldIndex.FogDistanceFarPlane:
                    this.FogDistanceFarPlane = (Single)obj;
                    break;
                case Water_FieldIndex.ShallowColor:
                    this.ShallowColor = (Color)obj;
                    break;
                case Water_FieldIndex.DeepColor:
                    this.DeepColor = (Color)obj;
                    break;
                case Water_FieldIndex.ReflectionColor:
                    this.ReflectionColor = (Color)obj;
                    break;
                case Water_FieldIndex.TextureBlend:
                    this.TextureBlend = (Byte)obj;
                    break;
                case Water_FieldIndex.RainSimulatorForce:
                    this.RainSimulatorForce = (Single)obj;
                    break;
                case Water_FieldIndex.RainSimulatorVelocity:
                    this.RainSimulatorVelocity = (Single)obj;
                    break;
                case Water_FieldIndex.RainSimulatorFalloff:
                    this.RainSimulatorFalloff = (Single)obj;
                    break;
                case Water_FieldIndex.RainSimulatorDampner:
                    this.RainSimulatorDampner = (Single)obj;
                    break;
                case Water_FieldIndex.RainSimulatorStartingSize:
                    this.RainSimulatorStartingSize = (Single)obj;
                    break;
                case Water_FieldIndex.DisplacementSimulatorForce:
                    this.DisplacementSimulatorForce = (Single)obj;
                    break;
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                    this.DisplacementSimulatorVelocity = (Single)obj;
                    break;
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                    this.DisplacementSimulatorFalloff = (Single)obj;
                    break;
                case Water_FieldIndex.DisplacementSimulatorDampner:
                    this.DisplacementSimulatorDampner = (Single)obj;
                    break;
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                    this.DisplacementSimulatorStartingSize = (Single)obj;
                    break;
                case Water_FieldIndex.Damage:
                    this.Damage = (UInt16)obj;
                    break;
                case Water_FieldIndex.RelatedWaters:
                    this.RelatedWaters = (RelatedWaters)obj;
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            WaterCommon.Clear(this, cmds);
        }


        public new static Water Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Water();
            foreach (var pair in fields)
            {
                CopyInInternal_Water(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Water(Water obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Water_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                    obj.Texture = (String)pair.Value;
                    break;
                case Water_FieldIndex.Opacity:
                    obj.Opacity = (Byte)pair.Value;
                    break;
                case Water_FieldIndex.Flags:
                    obj.Flags = (Water.Flag)pair.Value;
                    break;
                case Water_FieldIndex.MaterialID:
                    obj.MaterialID = (String)pair.Value;
                    break;
                case Water_FieldIndex.Sound:
                    obj.Sound_Property.Set(
                        (FormIDSetLink<Sound>)pair.Value,
                        null);
                    break;
                case Water_FieldIndex.WindVelocity:
                    obj.WindVelocity = (Single)pair.Value;
                    break;
                case Water_FieldIndex.WindDirection:
                    obj.WindDirection = (Single)pair.Value;
                    break;
                case Water_FieldIndex.WaveAmplitude:
                    obj.WaveAmplitude = (Single)pair.Value;
                    break;
                case Water_FieldIndex.WaveFrequency:
                    obj.WaveFrequency = (Single)pair.Value;
                    break;
                case Water_FieldIndex.SunPower:
                    obj.SunPower = (Single)pair.Value;
                    break;
                case Water_FieldIndex.ReflectivityAmount:
                    obj.ReflectivityAmount = (Single)pair.Value;
                    break;
                case Water_FieldIndex.FresnelAmount:
                    obj.FresnelAmount = (Single)pair.Value;
                    break;
                case Water_FieldIndex.ScrollXSpeed:
                    obj.ScrollXSpeed = (Single)pair.Value;
                    break;
                case Water_FieldIndex.ScrollYSpeed:
                    obj.ScrollYSpeed = (Single)pair.Value;
                    break;
                case Water_FieldIndex.FogDistanceNearPlane:
                    obj.FogDistanceNearPlane = (Single)pair.Value;
                    break;
                case Water_FieldIndex.FogDistanceFarPlane:
                    obj.FogDistanceFarPlane = (Single)pair.Value;
                    break;
                case Water_FieldIndex.ShallowColor:
                    obj.ShallowColor = (Color)pair.Value;
                    break;
                case Water_FieldIndex.DeepColor:
                    obj.DeepColor = (Color)pair.Value;
                    break;
                case Water_FieldIndex.ReflectionColor:
                    obj.ReflectionColor = (Color)pair.Value;
                    break;
                case Water_FieldIndex.TextureBlend:
                    obj.TextureBlend = (Byte)pair.Value;
                    break;
                case Water_FieldIndex.RainSimulatorForce:
                    obj.RainSimulatorForce = (Single)pair.Value;
                    break;
                case Water_FieldIndex.RainSimulatorVelocity:
                    obj.RainSimulatorVelocity = (Single)pair.Value;
                    break;
                case Water_FieldIndex.RainSimulatorFalloff:
                    obj.RainSimulatorFalloff = (Single)pair.Value;
                    break;
                case Water_FieldIndex.RainSimulatorDampner:
                    obj.RainSimulatorDampner = (Single)pair.Value;
                    break;
                case Water_FieldIndex.RainSimulatorStartingSize:
                    obj.RainSimulatorStartingSize = (Single)pair.Value;
                    break;
                case Water_FieldIndex.DisplacementSimulatorForce:
                    obj.DisplacementSimulatorForce = (Single)pair.Value;
                    break;
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                    obj.DisplacementSimulatorVelocity = (Single)pair.Value;
                    break;
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                    obj.DisplacementSimulatorFalloff = (Single)pair.Value;
                    break;
                case Water_FieldIndex.DisplacementSimulatorDampner:
                    obj.DisplacementSimulatorDampner = (Single)pair.Value;
                    break;
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                    obj.DisplacementSimulatorStartingSize = (Single)pair.Value;
                    break;
                case Water_FieldIndex.Damage:
                    obj.Damage = (UInt16)pair.Value;
                    break;
                case Water_FieldIndex.RelatedWaters:
                    obj.RelatedWaters = (RelatedWaters)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Water obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IWater : IWaterGetter, IMajorRecord, ILoquiClass<IWater, IWaterGetter>, ILoquiClass<Water, IWaterGetter>
    {
        new String Texture { get; set; }
        new bool Texture_IsSet { get; set; }
        void Texture_Set(String item, bool hasBeenSet = true);
        void Texture_Unset();

        new Byte Opacity { get; set; }
        new bool Opacity_IsSet { get; set; }
        void Opacity_Set(Byte item, bool hasBeenSet = true);
        void Opacity_Unset();

        new Water.Flag Flags { get; set; }
        new bool Flags_IsSet { get; set; }
        void Flags_Set(Water.Flag item, bool hasBeenSet = true);
        void Flags_Unset();

        new String MaterialID { get; set; }
        new bool MaterialID_IsSet { get; set; }
        void MaterialID_Set(String item, bool hasBeenSet = true);
        void MaterialID_Unset();

        new Sound Sound { get; set; }
        new Single WindVelocity { get; set; }

        new Single WindDirection { get; set; }

        new Single WaveAmplitude { get; set; }

        new Single WaveFrequency { get; set; }

        new Single SunPower { get; set; }

        new Single ReflectivityAmount { get; set; }

        new Single FresnelAmount { get; set; }

        new Single ScrollXSpeed { get; set; }

        new Single ScrollYSpeed { get; set; }

        new Single FogDistanceNearPlane { get; set; }

        new Single FogDistanceFarPlane { get; set; }

        new Color ShallowColor { get; set; }

        new Color DeepColor { get; set; }

        new Color ReflectionColor { get; set; }

        new Byte TextureBlend { get; set; }

        new Single RainSimulatorForce { get; set; }

        new Single RainSimulatorVelocity { get; set; }

        new Single RainSimulatorFalloff { get; set; }

        new Single RainSimulatorDampner { get; set; }

        new Single RainSimulatorStartingSize { get; set; }

        new Single DisplacementSimulatorForce { get; set; }

        new Single DisplacementSimulatorVelocity { get; set; }

        new Single DisplacementSimulatorFalloff { get; set; }

        new Single DisplacementSimulatorDampner { get; set; }

        new Single DisplacementSimulatorStartingSize { get; set; }

        new UInt16 Damage { get; set; }

        new RelatedWaters RelatedWaters { get; set; }
        new bool RelatedWaters_IsSet { get; set; }
        void RelatedWaters_Set(RelatedWaters item, bool hasBeenSet = true);
        void RelatedWaters_Unset();

    }

    public partial interface IWaterGetter : IMajorRecordGetter
    {
        #region Texture
        String Texture { get; }
        bool Texture_IsSet { get; }

        #endregion
        #region Opacity
        Byte Opacity { get; }
        bool Opacity_IsSet { get; }

        #endregion
        #region Flags
        Water.Flag Flags { get; }
        bool Flags_IsSet { get; }

        #endregion
        #region MaterialID
        String MaterialID { get; }
        bool MaterialID_IsSet { get; }

        #endregion
        #region Sound
        Sound Sound { get; }
        FormIDSetLink<Sound> Sound_Property { get; }

        #endregion
        #region WindVelocity
        Single WindVelocity { get; }

        #endregion
        #region WindDirection
        Single WindDirection { get; }

        #endregion
        #region WaveAmplitude
        Single WaveAmplitude { get; }

        #endregion
        #region WaveFrequency
        Single WaveFrequency { get; }

        #endregion
        #region SunPower
        Single SunPower { get; }

        #endregion
        #region ReflectivityAmount
        Single ReflectivityAmount { get; }

        #endregion
        #region FresnelAmount
        Single FresnelAmount { get; }

        #endregion
        #region ScrollXSpeed
        Single ScrollXSpeed { get; }

        #endregion
        #region ScrollYSpeed
        Single ScrollYSpeed { get; }

        #endregion
        #region FogDistanceNearPlane
        Single FogDistanceNearPlane { get; }

        #endregion
        #region FogDistanceFarPlane
        Single FogDistanceFarPlane { get; }

        #endregion
        #region ShallowColor
        Color ShallowColor { get; }

        #endregion
        #region DeepColor
        Color DeepColor { get; }

        #endregion
        #region ReflectionColor
        Color ReflectionColor { get; }

        #endregion
        #region TextureBlend
        Byte TextureBlend { get; }

        #endregion
        #region RainSimulatorForce
        Single RainSimulatorForce { get; }

        #endregion
        #region RainSimulatorVelocity
        Single RainSimulatorVelocity { get; }

        #endregion
        #region RainSimulatorFalloff
        Single RainSimulatorFalloff { get; }

        #endregion
        #region RainSimulatorDampner
        Single RainSimulatorDampner { get; }

        #endregion
        #region RainSimulatorStartingSize
        Single RainSimulatorStartingSize { get; }

        #endregion
        #region DisplacementSimulatorForce
        Single DisplacementSimulatorForce { get; }

        #endregion
        #region DisplacementSimulatorVelocity
        Single DisplacementSimulatorVelocity { get; }

        #endregion
        #region DisplacementSimulatorFalloff
        Single DisplacementSimulatorFalloff { get; }

        #endregion
        #region DisplacementSimulatorDampner
        Single DisplacementSimulatorDampner { get; }

        #endregion
        #region DisplacementSimulatorStartingSize
        Single DisplacementSimulatorStartingSize { get; }

        #endregion
        #region Damage
        UInt16 Damage { get; }

        #endregion
        #region RelatedWaters
        RelatedWaters RelatedWaters { get; }
        bool RelatedWaters_IsSet { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Water_FieldIndex
    {
        MajorRecordFlags = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Texture = 5,
        Opacity = 6,
        Flags = 7,
        MaterialID = 8,
        Sound = 9,
        WindVelocity = 10,
        WindDirection = 11,
        WaveAmplitude = 12,
        WaveFrequency = 13,
        SunPower = 14,
        ReflectivityAmount = 15,
        FresnelAmount = 16,
        ScrollXSpeed = 17,
        ScrollYSpeed = 18,
        FogDistanceNearPlane = 19,
        FogDistanceFarPlane = 20,
        ShallowColor = 21,
        DeepColor = 22,
        ReflectionColor = 23,
        TextureBlend = 24,
        RainSimulatorForce = 25,
        RainSimulatorVelocity = 26,
        RainSimulatorFalloff = 27,
        RainSimulatorDampner = 28,
        RainSimulatorStartingSize = 29,
        DisplacementSimulatorForce = 30,
        DisplacementSimulatorVelocity = 31,
        DisplacementSimulatorFalloff = 32,
        DisplacementSimulatorDampner = 33,
        DisplacementSimulatorStartingSize = 34,
        Damage = 35,
        RelatedWaters = 36,
    }
    #endregion

    #region Registration
    public class Water_Registration : ILoquiRegistration
    {
        public static readonly Water_Registration Instance = new Water_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 127,
            version: 0);

        public const string GUID = "31d50641-f6df-4533-89c3-e764dc35a702";

        public const ushort AdditionalFieldCount = 32;

        public const ushort FieldCount = 37;

        public static readonly Type MaskType = typeof(Water_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Water_ErrorMask);

        public static readonly Type ClassType = typeof(Water);

        public static readonly Type GetterType = typeof(IWaterGetter);

        public static readonly Type SetterType = typeof(IWater);

        public static readonly Type CommonType = typeof(WaterCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Water";

        public const string Name = "Water";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TEXTURE":
                    return (ushort)Water_FieldIndex.Texture;
                case "OPACITY":
                    return (ushort)Water_FieldIndex.Opacity;
                case "FLAGS":
                    return (ushort)Water_FieldIndex.Flags;
                case "MATERIALID":
                    return (ushort)Water_FieldIndex.MaterialID;
                case "SOUND":
                    return (ushort)Water_FieldIndex.Sound;
                case "WINDVELOCITY":
                    return (ushort)Water_FieldIndex.WindVelocity;
                case "WINDDIRECTION":
                    return (ushort)Water_FieldIndex.WindDirection;
                case "WAVEAMPLITUDE":
                    return (ushort)Water_FieldIndex.WaveAmplitude;
                case "WAVEFREQUENCY":
                    return (ushort)Water_FieldIndex.WaveFrequency;
                case "SUNPOWER":
                    return (ushort)Water_FieldIndex.SunPower;
                case "REFLECTIVITYAMOUNT":
                    return (ushort)Water_FieldIndex.ReflectivityAmount;
                case "FRESNELAMOUNT":
                    return (ushort)Water_FieldIndex.FresnelAmount;
                case "SCROLLXSPEED":
                    return (ushort)Water_FieldIndex.ScrollXSpeed;
                case "SCROLLYSPEED":
                    return (ushort)Water_FieldIndex.ScrollYSpeed;
                case "FOGDISTANCENEARPLANE":
                    return (ushort)Water_FieldIndex.FogDistanceNearPlane;
                case "FOGDISTANCEFARPLANE":
                    return (ushort)Water_FieldIndex.FogDistanceFarPlane;
                case "SHALLOWCOLOR":
                    return (ushort)Water_FieldIndex.ShallowColor;
                case "DEEPCOLOR":
                    return (ushort)Water_FieldIndex.DeepColor;
                case "REFLECTIONCOLOR":
                    return (ushort)Water_FieldIndex.ReflectionColor;
                case "TEXTUREBLEND":
                    return (ushort)Water_FieldIndex.TextureBlend;
                case "RAINSIMULATORFORCE":
                    return (ushort)Water_FieldIndex.RainSimulatorForce;
                case "RAINSIMULATORVELOCITY":
                    return (ushort)Water_FieldIndex.RainSimulatorVelocity;
                case "RAINSIMULATORFALLOFF":
                    return (ushort)Water_FieldIndex.RainSimulatorFalloff;
                case "RAINSIMULATORDAMPNER":
                    return (ushort)Water_FieldIndex.RainSimulatorDampner;
                case "RAINSIMULATORSTARTINGSIZE":
                    return (ushort)Water_FieldIndex.RainSimulatorStartingSize;
                case "DISPLACEMENTSIMULATORFORCE":
                    return (ushort)Water_FieldIndex.DisplacementSimulatorForce;
                case "DISPLACEMENTSIMULATORVELOCITY":
                    return (ushort)Water_FieldIndex.DisplacementSimulatorVelocity;
                case "DISPLACEMENTSIMULATORFALLOFF":
                    return (ushort)Water_FieldIndex.DisplacementSimulatorFalloff;
                case "DISPLACEMENTSIMULATORDAMPNER":
                    return (ushort)Water_FieldIndex.DisplacementSimulatorDampner;
                case "DISPLACEMENTSIMULATORSTARTINGSIZE":
                    return (ushort)Water_FieldIndex.DisplacementSimulatorStartingSize;
                case "DAMAGE":
                    return (ushort)Water_FieldIndex.Damage;
                case "RELATEDWATERS":
                    return (ushort)Water_FieldIndex.RelatedWaters;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.Sound:
                case Water_FieldIndex.WindVelocity:
                case Water_FieldIndex.WindDirection:
                case Water_FieldIndex.WaveAmplitude:
                case Water_FieldIndex.WaveFrequency:
                case Water_FieldIndex.SunPower:
                case Water_FieldIndex.ReflectivityAmount:
                case Water_FieldIndex.FresnelAmount:
                case Water_FieldIndex.ScrollXSpeed:
                case Water_FieldIndex.ScrollYSpeed:
                case Water_FieldIndex.FogDistanceNearPlane:
                case Water_FieldIndex.FogDistanceFarPlane:
                case Water_FieldIndex.ShallowColor:
                case Water_FieldIndex.DeepColor:
                case Water_FieldIndex.ReflectionColor:
                case Water_FieldIndex.TextureBlend:
                case Water_FieldIndex.RainSimulatorForce:
                case Water_FieldIndex.RainSimulatorVelocity:
                case Water_FieldIndex.RainSimulatorFalloff:
                case Water_FieldIndex.RainSimulatorDampner:
                case Water_FieldIndex.RainSimulatorStartingSize:
                case Water_FieldIndex.DisplacementSimulatorForce:
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                case Water_FieldIndex.DisplacementSimulatorDampner:
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                case Water_FieldIndex.Damage:
                case Water_FieldIndex.RelatedWaters:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.RelatedWaters:
                    return true;
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.Sound:
                case Water_FieldIndex.WindVelocity:
                case Water_FieldIndex.WindDirection:
                case Water_FieldIndex.WaveAmplitude:
                case Water_FieldIndex.WaveFrequency:
                case Water_FieldIndex.SunPower:
                case Water_FieldIndex.ReflectivityAmount:
                case Water_FieldIndex.FresnelAmount:
                case Water_FieldIndex.ScrollXSpeed:
                case Water_FieldIndex.ScrollYSpeed:
                case Water_FieldIndex.FogDistanceNearPlane:
                case Water_FieldIndex.FogDistanceFarPlane:
                case Water_FieldIndex.ShallowColor:
                case Water_FieldIndex.DeepColor:
                case Water_FieldIndex.ReflectionColor:
                case Water_FieldIndex.TextureBlend:
                case Water_FieldIndex.RainSimulatorForce:
                case Water_FieldIndex.RainSimulatorVelocity:
                case Water_FieldIndex.RainSimulatorFalloff:
                case Water_FieldIndex.RainSimulatorDampner:
                case Water_FieldIndex.RainSimulatorStartingSize:
                case Water_FieldIndex.DisplacementSimulatorForce:
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                case Water_FieldIndex.DisplacementSimulatorDampner:
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                case Water_FieldIndex.Damage:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.Sound:
                case Water_FieldIndex.WindVelocity:
                case Water_FieldIndex.WindDirection:
                case Water_FieldIndex.WaveAmplitude:
                case Water_FieldIndex.WaveFrequency:
                case Water_FieldIndex.SunPower:
                case Water_FieldIndex.ReflectivityAmount:
                case Water_FieldIndex.FresnelAmount:
                case Water_FieldIndex.ScrollXSpeed:
                case Water_FieldIndex.ScrollYSpeed:
                case Water_FieldIndex.FogDistanceNearPlane:
                case Water_FieldIndex.FogDistanceFarPlane:
                case Water_FieldIndex.ShallowColor:
                case Water_FieldIndex.DeepColor:
                case Water_FieldIndex.ReflectionColor:
                case Water_FieldIndex.TextureBlend:
                case Water_FieldIndex.RainSimulatorForce:
                case Water_FieldIndex.RainSimulatorVelocity:
                case Water_FieldIndex.RainSimulatorFalloff:
                case Water_FieldIndex.RainSimulatorDampner:
                case Water_FieldIndex.RainSimulatorStartingSize:
                case Water_FieldIndex.DisplacementSimulatorForce:
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                case Water_FieldIndex.DisplacementSimulatorDampner:
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                case Water_FieldIndex.Damage:
                case Water_FieldIndex.RelatedWaters:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                    return "Texture";
                case Water_FieldIndex.Opacity:
                    return "Opacity";
                case Water_FieldIndex.Flags:
                    return "Flags";
                case Water_FieldIndex.MaterialID:
                    return "MaterialID";
                case Water_FieldIndex.Sound:
                    return "Sound";
                case Water_FieldIndex.WindVelocity:
                    return "WindVelocity";
                case Water_FieldIndex.WindDirection:
                    return "WindDirection";
                case Water_FieldIndex.WaveAmplitude:
                    return "WaveAmplitude";
                case Water_FieldIndex.WaveFrequency:
                    return "WaveFrequency";
                case Water_FieldIndex.SunPower:
                    return "SunPower";
                case Water_FieldIndex.ReflectivityAmount:
                    return "ReflectivityAmount";
                case Water_FieldIndex.FresnelAmount:
                    return "FresnelAmount";
                case Water_FieldIndex.ScrollXSpeed:
                    return "ScrollXSpeed";
                case Water_FieldIndex.ScrollYSpeed:
                    return "ScrollYSpeed";
                case Water_FieldIndex.FogDistanceNearPlane:
                    return "FogDistanceNearPlane";
                case Water_FieldIndex.FogDistanceFarPlane:
                    return "FogDistanceFarPlane";
                case Water_FieldIndex.ShallowColor:
                    return "ShallowColor";
                case Water_FieldIndex.DeepColor:
                    return "DeepColor";
                case Water_FieldIndex.ReflectionColor:
                    return "ReflectionColor";
                case Water_FieldIndex.TextureBlend:
                    return "TextureBlend";
                case Water_FieldIndex.RainSimulatorForce:
                    return "RainSimulatorForce";
                case Water_FieldIndex.RainSimulatorVelocity:
                    return "RainSimulatorVelocity";
                case Water_FieldIndex.RainSimulatorFalloff:
                    return "RainSimulatorFalloff";
                case Water_FieldIndex.RainSimulatorDampner:
                    return "RainSimulatorDampner";
                case Water_FieldIndex.RainSimulatorStartingSize:
                    return "RainSimulatorStartingSize";
                case Water_FieldIndex.DisplacementSimulatorForce:
                    return "DisplacementSimulatorForce";
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                    return "DisplacementSimulatorVelocity";
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                    return "DisplacementSimulatorFalloff";
                case Water_FieldIndex.DisplacementSimulatorDampner:
                    return "DisplacementSimulatorDampner";
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                    return "DisplacementSimulatorStartingSize";
                case Water_FieldIndex.Damage:
                    return "Damage";
                case Water_FieldIndex.RelatedWaters:
                    return "RelatedWaters";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.Sound:
                case Water_FieldIndex.WindVelocity:
                case Water_FieldIndex.WindDirection:
                case Water_FieldIndex.WaveAmplitude:
                case Water_FieldIndex.WaveFrequency:
                case Water_FieldIndex.SunPower:
                case Water_FieldIndex.ReflectivityAmount:
                case Water_FieldIndex.FresnelAmount:
                case Water_FieldIndex.ScrollXSpeed:
                case Water_FieldIndex.ScrollYSpeed:
                case Water_FieldIndex.FogDistanceNearPlane:
                case Water_FieldIndex.FogDistanceFarPlane:
                case Water_FieldIndex.ShallowColor:
                case Water_FieldIndex.DeepColor:
                case Water_FieldIndex.ReflectionColor:
                case Water_FieldIndex.TextureBlend:
                case Water_FieldIndex.RainSimulatorForce:
                case Water_FieldIndex.RainSimulatorVelocity:
                case Water_FieldIndex.RainSimulatorFalloff:
                case Water_FieldIndex.RainSimulatorDampner:
                case Water_FieldIndex.RainSimulatorStartingSize:
                case Water_FieldIndex.DisplacementSimulatorForce:
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                case Water_FieldIndex.DisplacementSimulatorDampner:
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                case Water_FieldIndex.Damage:
                case Water_FieldIndex.RelatedWaters:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.Sound:
                case Water_FieldIndex.WindVelocity:
                case Water_FieldIndex.WindDirection:
                case Water_FieldIndex.WaveAmplitude:
                case Water_FieldIndex.WaveFrequency:
                case Water_FieldIndex.SunPower:
                case Water_FieldIndex.ReflectivityAmount:
                case Water_FieldIndex.FresnelAmount:
                case Water_FieldIndex.ScrollXSpeed:
                case Water_FieldIndex.ScrollYSpeed:
                case Water_FieldIndex.FogDistanceNearPlane:
                case Water_FieldIndex.FogDistanceFarPlane:
                case Water_FieldIndex.ShallowColor:
                case Water_FieldIndex.DeepColor:
                case Water_FieldIndex.ReflectionColor:
                case Water_FieldIndex.TextureBlend:
                case Water_FieldIndex.RainSimulatorForce:
                case Water_FieldIndex.RainSimulatorVelocity:
                case Water_FieldIndex.RainSimulatorFalloff:
                case Water_FieldIndex.RainSimulatorDampner:
                case Water_FieldIndex.RainSimulatorStartingSize:
                case Water_FieldIndex.DisplacementSimulatorForce:
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                case Water_FieldIndex.DisplacementSimulatorDampner:
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                case Water_FieldIndex.Damage:
                case Water_FieldIndex.RelatedWaters:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                    return typeof(String);
                case Water_FieldIndex.Opacity:
                    return typeof(Byte);
                case Water_FieldIndex.Flags:
                    return typeof(Water.Flag);
                case Water_FieldIndex.MaterialID:
                    return typeof(String);
                case Water_FieldIndex.Sound:
                    return typeof(FormIDSetLink<Sound>);
                case Water_FieldIndex.WindVelocity:
                    return typeof(Single);
                case Water_FieldIndex.WindDirection:
                    return typeof(Single);
                case Water_FieldIndex.WaveAmplitude:
                    return typeof(Single);
                case Water_FieldIndex.WaveFrequency:
                    return typeof(Single);
                case Water_FieldIndex.SunPower:
                    return typeof(Single);
                case Water_FieldIndex.ReflectivityAmount:
                    return typeof(Single);
                case Water_FieldIndex.FresnelAmount:
                    return typeof(Single);
                case Water_FieldIndex.ScrollXSpeed:
                    return typeof(Single);
                case Water_FieldIndex.ScrollYSpeed:
                    return typeof(Single);
                case Water_FieldIndex.FogDistanceNearPlane:
                    return typeof(Single);
                case Water_FieldIndex.FogDistanceFarPlane:
                    return typeof(Single);
                case Water_FieldIndex.ShallowColor:
                    return typeof(Color);
                case Water_FieldIndex.DeepColor:
                    return typeof(Color);
                case Water_FieldIndex.ReflectionColor:
                    return typeof(Color);
                case Water_FieldIndex.TextureBlend:
                    return typeof(Byte);
                case Water_FieldIndex.RainSimulatorForce:
                    return typeof(Single);
                case Water_FieldIndex.RainSimulatorVelocity:
                    return typeof(Single);
                case Water_FieldIndex.RainSimulatorFalloff:
                    return typeof(Single);
                case Water_FieldIndex.RainSimulatorDampner:
                    return typeof(Single);
                case Water_FieldIndex.RainSimulatorStartingSize:
                    return typeof(Single);
                case Water_FieldIndex.DisplacementSimulatorForce:
                    return typeof(Single);
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                    return typeof(Single);
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                    return typeof(Single);
                case Water_FieldIndex.DisplacementSimulatorDampner:
                    return typeof(Single);
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                    return typeof(Single);
                case Water_FieldIndex.Damage:
                    return typeof(UInt16);
                case Water_FieldIndex.RelatedWaters:
                    return typeof(RelatedWaters);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType WATR_HEADER = new RecordType("WATR");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType GNAM_HEADER = new RecordType("GNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = WATR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 6;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class WaterCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IWater item,
            IWaterGetter rhs,
            IWaterGetter def,
            ErrorMaskBuilder errorMask,
            Water_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Texture ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.Texture);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Texture,
                        rhsHasBeenSet: rhs.Texture_IsSet,
                        defItem: def?.Texture ?? default(String),
                        defHasBeenSet: def?.Texture_IsSet ?? false,
                        outRhsItem: out var rhsTextureItem,
                        outDefItem: out var defTextureItem))
                    {
                        item.Texture = rhsTextureItem;
                    }
                    else
                    {
                        item.Texture_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Opacity ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.Opacity);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Opacity,
                        rhsHasBeenSet: rhs.Opacity_IsSet,
                        defItem: def?.Opacity ?? default(Byte),
                        defHasBeenSet: def?.Opacity_IsSet ?? false,
                        outRhsItem: out var rhsOpacityItem,
                        outDefItem: out var defOpacityItem))
                    {
                        item.Opacity = rhsOpacityItem;
                    }
                    else
                    {
                        item.Opacity_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.Flags);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Flags,
                        rhsHasBeenSet: rhs.Flags_IsSet,
                        defItem: def?.Flags ?? default(Water.Flag),
                        defHasBeenSet: def?.Flags_IsSet ?? false,
                        outRhsItem: out var rhsFlagsItem,
                        outDefItem: out var defFlagsItem))
                    {
                        item.Flags = rhsFlagsItem;
                    }
                    else
                    {
                        item.Flags_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaterialID ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.MaterialID);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.MaterialID,
                        rhsHasBeenSet: rhs.MaterialID_IsSet,
                        defItem: def?.MaterialID ?? default(String),
                        defHasBeenSet: def?.MaterialID_IsSet ?? false,
                        outRhsItem: out var rhsMaterialIDItem,
                        outDefItem: out var defMaterialIDItem))
                    {
                        item.MaterialID = rhsMaterialIDItem;
                    }
                    else
                    {
                        item.MaterialID_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Sound ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.Sound);
                try
                {
                    item.Sound_Property.SetToWithDefault(
                        rhs: rhs.Sound_Property,
                        def: def?.Sound_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.WindVelocity ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.WindVelocity);
                try
                {
                    item.WindVelocity = rhs.WindVelocity;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.WindDirection ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.WindDirection);
                try
                {
                    item.WindDirection = rhs.WindDirection;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.WaveAmplitude ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.WaveAmplitude);
                try
                {
                    item.WaveAmplitude = rhs.WaveAmplitude;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.WaveFrequency ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.WaveFrequency);
                try
                {
                    item.WaveFrequency = rhs.WaveFrequency;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SunPower ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.SunPower);
                try
                {
                    item.SunPower = rhs.SunPower;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ReflectivityAmount ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.ReflectivityAmount);
                try
                {
                    item.ReflectivityAmount = rhs.ReflectivityAmount;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FresnelAmount ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.FresnelAmount);
                try
                {
                    item.FresnelAmount = rhs.FresnelAmount;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ScrollXSpeed ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.ScrollXSpeed);
                try
                {
                    item.ScrollXSpeed = rhs.ScrollXSpeed;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ScrollYSpeed ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.ScrollYSpeed);
                try
                {
                    item.ScrollYSpeed = rhs.ScrollYSpeed;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FogDistanceNearPlane ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.FogDistanceNearPlane);
                try
                {
                    item.FogDistanceNearPlane = rhs.FogDistanceNearPlane;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FogDistanceFarPlane ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.FogDistanceFarPlane);
                try
                {
                    item.FogDistanceFarPlane = rhs.FogDistanceFarPlane;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ShallowColor ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.ShallowColor);
                try
                {
                    item.ShallowColor = rhs.ShallowColor;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DeepColor ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.DeepColor);
                try
                {
                    item.DeepColor = rhs.DeepColor;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ReflectionColor ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.ReflectionColor);
                try
                {
                    item.ReflectionColor = rhs.ReflectionColor;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.TextureBlend ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.TextureBlend);
                try
                {
                    item.TextureBlend = rhs.TextureBlend;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RainSimulatorForce ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorForce);
                try
                {
                    item.RainSimulatorForce = rhs.RainSimulatorForce;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RainSimulatorVelocity ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorVelocity);
                try
                {
                    item.RainSimulatorVelocity = rhs.RainSimulatorVelocity;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RainSimulatorFalloff ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorFalloff);
                try
                {
                    item.RainSimulatorFalloff = rhs.RainSimulatorFalloff;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RainSimulatorDampner ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorDampner);
                try
                {
                    item.RainSimulatorDampner = rhs.RainSimulatorDampner;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RainSimulatorStartingSize ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorStartingSize);
                try
                {
                    item.RainSimulatorStartingSize = rhs.RainSimulatorStartingSize;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DisplacementSimulatorForce ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorForce);
                try
                {
                    item.DisplacementSimulatorForce = rhs.DisplacementSimulatorForce;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DisplacementSimulatorVelocity ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorVelocity);
                try
                {
                    item.DisplacementSimulatorVelocity = rhs.DisplacementSimulatorVelocity;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DisplacementSimulatorFalloff ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorFalloff);
                try
                {
                    item.DisplacementSimulatorFalloff = rhs.DisplacementSimulatorFalloff;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DisplacementSimulatorDampner ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorDampner);
                try
                {
                    item.DisplacementSimulatorDampner = rhs.DisplacementSimulatorDampner;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DisplacementSimulatorStartingSize ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorStartingSize);
                try
                {
                    item.DisplacementSimulatorStartingSize = rhs.DisplacementSimulatorStartingSize;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Damage ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.Damage);
                try
                {
                    item.Damage = rhs.Damage;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RelatedWaters.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.RelatedWaters);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.RelatedWaters,
                        rhsHasBeenSet: rhs.RelatedWaters_IsSet,
                        defItem: def?.RelatedWaters,
                        defHasBeenSet: def?.RelatedWaters_IsSet ?? false,
                        outRhsItem: out var rhsRelatedWatersItem,
                        outDefItem: out var defRelatedWatersItem))
                    {
                        switch (copyMask?.RelatedWaters.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.RelatedWaters = rhsRelatedWatersItem;
                                break;
                            case CopyOption.CopyIn:
                                RelatedWatersCommon.CopyFieldsFrom(
                                    item: item.RelatedWaters,
                                    rhs: rhs.RelatedWaters,
                                    def: def?.RelatedWaters,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.RelatedWaters.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.RelatedWaters = RelatedWaters.Copy(
                                    rhsRelatedWatersItem,
                                    copyMask?.RelatedWaters?.Specific,
                                    def: defRelatedWatersItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.RelatedWaters?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.RelatedWaters_IsSet = false;
                        item.RelatedWaters = default(RelatedWaters);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IWater obj,
            NotifyingFireParameters cmds = null)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.WindVelocity:
                case Water_FieldIndex.WindDirection:
                case Water_FieldIndex.WaveAmplitude:
                case Water_FieldIndex.WaveFrequency:
                case Water_FieldIndex.SunPower:
                case Water_FieldIndex.ReflectivityAmount:
                case Water_FieldIndex.FresnelAmount:
                case Water_FieldIndex.ScrollXSpeed:
                case Water_FieldIndex.ScrollYSpeed:
                case Water_FieldIndex.FogDistanceNearPlane:
                case Water_FieldIndex.FogDistanceFarPlane:
                case Water_FieldIndex.ShallowColor:
                case Water_FieldIndex.DeepColor:
                case Water_FieldIndex.ReflectionColor:
                case Water_FieldIndex.TextureBlend:
                case Water_FieldIndex.RainSimulatorForce:
                case Water_FieldIndex.RainSimulatorVelocity:
                case Water_FieldIndex.RainSimulatorFalloff:
                case Water_FieldIndex.RainSimulatorDampner:
                case Water_FieldIndex.RainSimulatorStartingSize:
                case Water_FieldIndex.DisplacementSimulatorForce:
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                case Water_FieldIndex.DisplacementSimulatorDampner:
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                case Water_FieldIndex.Damage:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Water_FieldIndex.Texture:
                    obj.Texture_IsSet = on;
                    break;
                case Water_FieldIndex.Opacity:
                    obj.Opacity_IsSet = on;
                    break;
                case Water_FieldIndex.Flags:
                    obj.Flags_IsSet = on;
                    break;
                case Water_FieldIndex.MaterialID:
                    obj.MaterialID_IsSet = on;
                    break;
                case Water_FieldIndex.Sound:
                    obj.Sound_Property.HasBeenSet = on;
                    break;
                case Water_FieldIndex.RelatedWaters:
                    obj.RelatedWaters_IsSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IWater obj,
            NotifyingUnsetParameters cmds = null)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                    obj.Texture_Unset();
                    break;
                case Water_FieldIndex.Opacity:
                    obj.Opacity_Unset();
                    break;
                case Water_FieldIndex.Flags:
                    obj.Flags_Unset();
                    break;
                case Water_FieldIndex.MaterialID:
                    obj.MaterialID_Unset();
                    break;
                case Water_FieldIndex.Sound:
                    obj.Sound_Property.Unset(cmds);
                    break;
                case Water_FieldIndex.WindVelocity:
                    obj.WindVelocity = default(Single);
                    break;
                case Water_FieldIndex.WindDirection:
                    obj.WindDirection = default(Single);
                    break;
                case Water_FieldIndex.WaveAmplitude:
                    obj.WaveAmplitude = default(Single);
                    break;
                case Water_FieldIndex.WaveFrequency:
                    obj.WaveFrequency = default(Single);
                    break;
                case Water_FieldIndex.SunPower:
                    obj.SunPower = default(Single);
                    break;
                case Water_FieldIndex.ReflectivityAmount:
                    obj.ReflectivityAmount = default(Single);
                    break;
                case Water_FieldIndex.FresnelAmount:
                    obj.FresnelAmount = default(Single);
                    break;
                case Water_FieldIndex.ScrollXSpeed:
                    obj.ScrollXSpeed = default(Single);
                    break;
                case Water_FieldIndex.ScrollYSpeed:
                    obj.ScrollYSpeed = default(Single);
                    break;
                case Water_FieldIndex.FogDistanceNearPlane:
                    obj.FogDistanceNearPlane = default(Single);
                    break;
                case Water_FieldIndex.FogDistanceFarPlane:
                    obj.FogDistanceFarPlane = default(Single);
                    break;
                case Water_FieldIndex.ShallowColor:
                    obj.ShallowColor = default(Color);
                    break;
                case Water_FieldIndex.DeepColor:
                    obj.DeepColor = default(Color);
                    break;
                case Water_FieldIndex.ReflectionColor:
                    obj.ReflectionColor = default(Color);
                    break;
                case Water_FieldIndex.TextureBlend:
                    obj.TextureBlend = default(Byte);
                    break;
                case Water_FieldIndex.RainSimulatorForce:
                    obj.RainSimulatorForce = default(Single);
                    break;
                case Water_FieldIndex.RainSimulatorVelocity:
                    obj.RainSimulatorVelocity = default(Single);
                    break;
                case Water_FieldIndex.RainSimulatorFalloff:
                    obj.RainSimulatorFalloff = default(Single);
                    break;
                case Water_FieldIndex.RainSimulatorDampner:
                    obj.RainSimulatorDampner = default(Single);
                    break;
                case Water_FieldIndex.RainSimulatorStartingSize:
                    obj.RainSimulatorStartingSize = default(Single);
                    break;
                case Water_FieldIndex.DisplacementSimulatorForce:
                    obj.DisplacementSimulatorForce = default(Single);
                    break;
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                    obj.DisplacementSimulatorVelocity = default(Single);
                    break;
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                    obj.DisplacementSimulatorFalloff = default(Single);
                    break;
                case Water_FieldIndex.DisplacementSimulatorDampner:
                    obj.DisplacementSimulatorDampner = default(Single);
                    break;
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                    obj.DisplacementSimulatorStartingSize = default(Single);
                    break;
                case Water_FieldIndex.Damage:
                    obj.Damage = default(UInt16);
                    break;
                case Water_FieldIndex.RelatedWaters:
                    obj.RelatedWaters_Unset();
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IWater obj)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.WindVelocity:
                case Water_FieldIndex.WindDirection:
                case Water_FieldIndex.WaveAmplitude:
                case Water_FieldIndex.WaveFrequency:
                case Water_FieldIndex.SunPower:
                case Water_FieldIndex.ReflectivityAmount:
                case Water_FieldIndex.FresnelAmount:
                case Water_FieldIndex.ScrollXSpeed:
                case Water_FieldIndex.ScrollYSpeed:
                case Water_FieldIndex.FogDistanceNearPlane:
                case Water_FieldIndex.FogDistanceFarPlane:
                case Water_FieldIndex.ShallowColor:
                case Water_FieldIndex.DeepColor:
                case Water_FieldIndex.ReflectionColor:
                case Water_FieldIndex.TextureBlend:
                case Water_FieldIndex.RainSimulatorForce:
                case Water_FieldIndex.RainSimulatorVelocity:
                case Water_FieldIndex.RainSimulatorFalloff:
                case Water_FieldIndex.RainSimulatorDampner:
                case Water_FieldIndex.RainSimulatorStartingSize:
                case Water_FieldIndex.DisplacementSimulatorForce:
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                case Water_FieldIndex.DisplacementSimulatorDampner:
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                case Water_FieldIndex.Damage:
                    return true;
                case Water_FieldIndex.Texture:
                    return obj.Texture_IsSet;
                case Water_FieldIndex.Opacity:
                    return obj.Opacity_IsSet;
                case Water_FieldIndex.Flags:
                    return obj.Flags_IsSet;
                case Water_FieldIndex.MaterialID:
                    return obj.MaterialID_IsSet;
                case Water_FieldIndex.Sound:
                    return obj.Sound_Property.HasBeenSet;
                case Water_FieldIndex.RelatedWaters:
                    return obj.RelatedWaters_IsSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IWaterGetter obj)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                    return obj.Texture;
                case Water_FieldIndex.Opacity:
                    return obj.Opacity;
                case Water_FieldIndex.Flags:
                    return obj.Flags;
                case Water_FieldIndex.MaterialID:
                    return obj.MaterialID;
                case Water_FieldIndex.Sound:
                    return obj.Sound;
                case Water_FieldIndex.WindVelocity:
                    return obj.WindVelocity;
                case Water_FieldIndex.WindDirection:
                    return obj.WindDirection;
                case Water_FieldIndex.WaveAmplitude:
                    return obj.WaveAmplitude;
                case Water_FieldIndex.WaveFrequency:
                    return obj.WaveFrequency;
                case Water_FieldIndex.SunPower:
                    return obj.SunPower;
                case Water_FieldIndex.ReflectivityAmount:
                    return obj.ReflectivityAmount;
                case Water_FieldIndex.FresnelAmount:
                    return obj.FresnelAmount;
                case Water_FieldIndex.ScrollXSpeed:
                    return obj.ScrollXSpeed;
                case Water_FieldIndex.ScrollYSpeed:
                    return obj.ScrollYSpeed;
                case Water_FieldIndex.FogDistanceNearPlane:
                    return obj.FogDistanceNearPlane;
                case Water_FieldIndex.FogDistanceFarPlane:
                    return obj.FogDistanceFarPlane;
                case Water_FieldIndex.ShallowColor:
                    return obj.ShallowColor;
                case Water_FieldIndex.DeepColor:
                    return obj.DeepColor;
                case Water_FieldIndex.ReflectionColor:
                    return obj.ReflectionColor;
                case Water_FieldIndex.TextureBlend:
                    return obj.TextureBlend;
                case Water_FieldIndex.RainSimulatorForce:
                    return obj.RainSimulatorForce;
                case Water_FieldIndex.RainSimulatorVelocity:
                    return obj.RainSimulatorVelocity;
                case Water_FieldIndex.RainSimulatorFalloff:
                    return obj.RainSimulatorFalloff;
                case Water_FieldIndex.RainSimulatorDampner:
                    return obj.RainSimulatorDampner;
                case Water_FieldIndex.RainSimulatorStartingSize:
                    return obj.RainSimulatorStartingSize;
                case Water_FieldIndex.DisplacementSimulatorForce:
                    return obj.DisplacementSimulatorForce;
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                    return obj.DisplacementSimulatorVelocity;
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                    return obj.DisplacementSimulatorFalloff;
                case Water_FieldIndex.DisplacementSimulatorDampner:
                    return obj.DisplacementSimulatorDampner;
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                    return obj.DisplacementSimulatorStartingSize;
                case Water_FieldIndex.Damage:
                    return obj.Damage;
                case Water_FieldIndex.RelatedWaters:
                    return obj.RelatedWaters;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IWater item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Texture_Unset();
            item.Opacity_Unset();
            item.Flags_Unset();
            item.MaterialID_Unset();
            item.Sound_Property.Unset(cmds.ToUnsetParams());
            item.WindVelocity = default(Single);
            item.WindDirection = default(Single);
            item.WaveAmplitude = default(Single);
            item.WaveFrequency = default(Single);
            item.SunPower = default(Single);
            item.ReflectivityAmount = default(Single);
            item.FresnelAmount = default(Single);
            item.ScrollXSpeed = default(Single);
            item.ScrollYSpeed = default(Single);
            item.FogDistanceNearPlane = default(Single);
            item.FogDistanceFarPlane = default(Single);
            item.ShallowColor = default(Color);
            item.DeepColor = default(Color);
            item.ReflectionColor = default(Color);
            item.TextureBlend = default(Byte);
            item.RainSimulatorForce = default(Single);
            item.RainSimulatorVelocity = default(Single);
            item.RainSimulatorFalloff = default(Single);
            item.RainSimulatorDampner = default(Single);
            item.RainSimulatorStartingSize = default(Single);
            item.DisplacementSimulatorForce = default(Single);
            item.DisplacementSimulatorVelocity = default(Single);
            item.DisplacementSimulatorFalloff = default(Single);
            item.DisplacementSimulatorDampner = default(Single);
            item.DisplacementSimulatorStartingSize = default(Single);
            item.Damage = default(UInt16);
            item.RelatedWaters_Unset();
        }

        public static Water_Mask<bool> GetEqualsMask(
            this IWaterGetter item,
            IWaterGetter rhs)
        {
            var ret = new Water_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IWaterGetter item,
            IWaterGetter rhs,
            Water_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Texture = item.Texture_IsSet == rhs.Texture_IsSet && object.Equals(item.Texture, rhs.Texture);
            ret.Opacity = item.Opacity_IsSet == rhs.Opacity_IsSet && item.Opacity == rhs.Opacity;
            ret.Flags = item.Flags_IsSet == rhs.Flags_IsSet && item.Flags == rhs.Flags;
            ret.MaterialID = item.MaterialID_IsSet == rhs.MaterialID_IsSet && object.Equals(item.MaterialID, rhs.MaterialID);
            ret.Sound = item.Sound_Property.Equals(rhs.Sound_Property, (l, r) => l == r);
            ret.WindVelocity = item.WindVelocity == rhs.WindVelocity;
            ret.WindDirection = item.WindDirection == rhs.WindDirection;
            ret.WaveAmplitude = item.WaveAmplitude == rhs.WaveAmplitude;
            ret.WaveFrequency = item.WaveFrequency == rhs.WaveFrequency;
            ret.SunPower = item.SunPower == rhs.SunPower;
            ret.ReflectivityAmount = item.ReflectivityAmount == rhs.ReflectivityAmount;
            ret.FresnelAmount = item.FresnelAmount == rhs.FresnelAmount;
            ret.ScrollXSpeed = item.ScrollXSpeed == rhs.ScrollXSpeed;
            ret.ScrollYSpeed = item.ScrollYSpeed == rhs.ScrollYSpeed;
            ret.FogDistanceNearPlane = item.FogDistanceNearPlane == rhs.FogDistanceNearPlane;
            ret.FogDistanceFarPlane = item.FogDistanceFarPlane == rhs.FogDistanceFarPlane;
            ret.ShallowColor = item.ShallowColor == rhs.ShallowColor;
            ret.DeepColor = item.DeepColor == rhs.DeepColor;
            ret.ReflectionColor = item.ReflectionColor == rhs.ReflectionColor;
            ret.TextureBlend = item.TextureBlend == rhs.TextureBlend;
            ret.RainSimulatorForce = item.RainSimulatorForce == rhs.RainSimulatorForce;
            ret.RainSimulatorVelocity = item.RainSimulatorVelocity == rhs.RainSimulatorVelocity;
            ret.RainSimulatorFalloff = item.RainSimulatorFalloff == rhs.RainSimulatorFalloff;
            ret.RainSimulatorDampner = item.RainSimulatorDampner == rhs.RainSimulatorDampner;
            ret.RainSimulatorStartingSize = item.RainSimulatorStartingSize == rhs.RainSimulatorStartingSize;
            ret.DisplacementSimulatorForce = item.DisplacementSimulatorForce == rhs.DisplacementSimulatorForce;
            ret.DisplacementSimulatorVelocity = item.DisplacementSimulatorVelocity == rhs.DisplacementSimulatorVelocity;
            ret.DisplacementSimulatorFalloff = item.DisplacementSimulatorFalloff == rhs.DisplacementSimulatorFalloff;
            ret.DisplacementSimulatorDampner = item.DisplacementSimulatorDampner == rhs.DisplacementSimulatorDampner;
            ret.DisplacementSimulatorStartingSize = item.DisplacementSimulatorStartingSize == rhs.DisplacementSimulatorStartingSize;
            ret.Damage = item.Damage == rhs.Damage;
            ret.RelatedWaters = IHasBeenSetExt.LoquiEqualsHelper(item.RelatedWaters_IsSet, rhs.RelatedWaters_IsSet, item.RelatedWaters, rhs.RelatedWaters, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IWaterGetter item,
            string name = null,
            Water_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IWaterGetter item,
            FileGeneration fg,
            string name = null,
            Water_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Water)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Water)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Texture ?? true)
                {
                    fg.AppendLine($"Texture => {item.Texture}");
                }
                if (printMask?.Opacity ?? true)
                {
                    fg.AppendLine($"Opacity => {item.Opacity}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.MaterialID ?? true)
                {
                    fg.AppendLine($"MaterialID => {item.MaterialID}");
                }
                if (printMask?.Sound ?? true)
                {
                    fg.AppendLine($"Sound => {item.Sound_Property}");
                }
                if (printMask?.WindVelocity ?? true)
                {
                    fg.AppendLine($"WindVelocity => {item.WindVelocity}");
                }
                if (printMask?.WindDirection ?? true)
                {
                    fg.AppendLine($"WindDirection => {item.WindDirection}");
                }
                if (printMask?.WaveAmplitude ?? true)
                {
                    fg.AppendLine($"WaveAmplitude => {item.WaveAmplitude}");
                }
                if (printMask?.WaveFrequency ?? true)
                {
                    fg.AppendLine($"WaveFrequency => {item.WaveFrequency}");
                }
                if (printMask?.SunPower ?? true)
                {
                    fg.AppendLine($"SunPower => {item.SunPower}");
                }
                if (printMask?.ReflectivityAmount ?? true)
                {
                    fg.AppendLine($"ReflectivityAmount => {item.ReflectivityAmount}");
                }
                if (printMask?.FresnelAmount ?? true)
                {
                    fg.AppendLine($"FresnelAmount => {item.FresnelAmount}");
                }
                if (printMask?.ScrollXSpeed ?? true)
                {
                    fg.AppendLine($"ScrollXSpeed => {item.ScrollXSpeed}");
                }
                if (printMask?.ScrollYSpeed ?? true)
                {
                    fg.AppendLine($"ScrollYSpeed => {item.ScrollYSpeed}");
                }
                if (printMask?.FogDistanceNearPlane ?? true)
                {
                    fg.AppendLine($"FogDistanceNearPlane => {item.FogDistanceNearPlane}");
                }
                if (printMask?.FogDistanceFarPlane ?? true)
                {
                    fg.AppendLine($"FogDistanceFarPlane => {item.FogDistanceFarPlane}");
                }
                if (printMask?.ShallowColor ?? true)
                {
                    fg.AppendLine($"ShallowColor => {item.ShallowColor}");
                }
                if (printMask?.DeepColor ?? true)
                {
                    fg.AppendLine($"DeepColor => {item.DeepColor}");
                }
                if (printMask?.ReflectionColor ?? true)
                {
                    fg.AppendLine($"ReflectionColor => {item.ReflectionColor}");
                }
                if (printMask?.TextureBlend ?? true)
                {
                    fg.AppendLine($"TextureBlend => {item.TextureBlend}");
                }
                if (printMask?.RainSimulatorForce ?? true)
                {
                    fg.AppendLine($"RainSimulatorForce => {item.RainSimulatorForce}");
                }
                if (printMask?.RainSimulatorVelocity ?? true)
                {
                    fg.AppendLine($"RainSimulatorVelocity => {item.RainSimulatorVelocity}");
                }
                if (printMask?.RainSimulatorFalloff ?? true)
                {
                    fg.AppendLine($"RainSimulatorFalloff => {item.RainSimulatorFalloff}");
                }
                if (printMask?.RainSimulatorDampner ?? true)
                {
                    fg.AppendLine($"RainSimulatorDampner => {item.RainSimulatorDampner}");
                }
                if (printMask?.RainSimulatorStartingSize ?? true)
                {
                    fg.AppendLine($"RainSimulatorStartingSize => {item.RainSimulatorStartingSize}");
                }
                if (printMask?.DisplacementSimulatorForce ?? true)
                {
                    fg.AppendLine($"DisplacementSimulatorForce => {item.DisplacementSimulatorForce}");
                }
                if (printMask?.DisplacementSimulatorVelocity ?? true)
                {
                    fg.AppendLine($"DisplacementSimulatorVelocity => {item.DisplacementSimulatorVelocity}");
                }
                if (printMask?.DisplacementSimulatorFalloff ?? true)
                {
                    fg.AppendLine($"DisplacementSimulatorFalloff => {item.DisplacementSimulatorFalloff}");
                }
                if (printMask?.DisplacementSimulatorDampner ?? true)
                {
                    fg.AppendLine($"DisplacementSimulatorDampner => {item.DisplacementSimulatorDampner}");
                }
                if (printMask?.DisplacementSimulatorStartingSize ?? true)
                {
                    fg.AppendLine($"DisplacementSimulatorStartingSize => {item.DisplacementSimulatorStartingSize}");
                }
                if (printMask?.Damage ?? true)
                {
                    fg.AppendLine($"Damage => {item.Damage}");
                }
                if (printMask?.RelatedWaters?.Overall ?? true)
                {
                    item.RelatedWaters?.ToString(fg, "RelatedWaters");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IWaterGetter item,
            Water_Mask<bool?> checkMask)
        {
            if (checkMask.Texture.HasValue && checkMask.Texture.Value != item.Texture_IsSet) return false;
            if (checkMask.Opacity.HasValue && checkMask.Opacity.Value != item.Opacity_IsSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_IsSet) return false;
            if (checkMask.MaterialID.HasValue && checkMask.MaterialID.Value != item.MaterialID_IsSet) return false;
            if (checkMask.Sound.HasValue && checkMask.Sound.Value != item.Sound_Property.HasBeenSet) return false;
            if (checkMask.RelatedWaters.Overall.HasValue && checkMask.RelatedWaters.Overall.Value != item.RelatedWaters_IsSet) return false;
            if (checkMask.RelatedWaters.Specific != null && (item.RelatedWaters == null || !item.RelatedWaters.HasBeenSet(checkMask.RelatedWaters.Specific))) return false;
            return true;
        }

        public static Water_Mask<bool> GetHasBeenSetMask(IWaterGetter item)
        {
            var ret = new Water_Mask<bool>();
            ret.Texture = item.Texture_IsSet;
            ret.Opacity = item.Opacity_IsSet;
            ret.Flags = item.Flags_IsSet;
            ret.MaterialID = item.MaterialID_IsSet;
            ret.Sound = item.Sound_Property.HasBeenSet;
            ret.WindVelocity = true;
            ret.WindDirection = true;
            ret.WaveAmplitude = true;
            ret.WaveFrequency = true;
            ret.SunPower = true;
            ret.ReflectivityAmount = true;
            ret.FresnelAmount = true;
            ret.ScrollXSpeed = true;
            ret.ScrollYSpeed = true;
            ret.FogDistanceNearPlane = true;
            ret.FogDistanceFarPlane = true;
            ret.ShallowColor = true;
            ret.DeepColor = true;
            ret.ReflectionColor = true;
            ret.TextureBlend = true;
            ret.RainSimulatorForce = true;
            ret.RainSimulatorVelocity = true;
            ret.RainSimulatorFalloff = true;
            ret.RainSimulatorDampner = true;
            ret.RainSimulatorStartingSize = true;
            ret.DisplacementSimulatorForce = true;
            ret.DisplacementSimulatorVelocity = true;
            ret.DisplacementSimulatorFalloff = true;
            ret.DisplacementSimulatorDampner = true;
            ret.DisplacementSimulatorStartingSize = true;
            ret.Damage = true;
            ret.RelatedWaters = new MaskItem<bool, RelatedWaters_Mask<bool>>(item.RelatedWaters_IsSet, RelatedWatersCommon.GetHasBeenSetMask(item.RelatedWaters));
            return ret;
        }

        public static Water_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Water_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Water_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Water_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Water_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Water_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Water_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Water item,
            bool doMasks,
            out Water_ErrorMask errorMask,
            Water_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Water_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Water item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Water");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Water");
            }
            if (item.Texture_IsSet
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.Texture) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Texture),
                    item: item.Texture,
                    fieldIndex: (int)Water_FieldIndex.Texture,
                    errorMask: errorMask);
            }
            if (item.Opacity_IsSet
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.Opacity) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Opacity),
                    item: item.Opacity,
                    fieldIndex: (int)Water_FieldIndex.Opacity,
                    errorMask: errorMask);
            }
            if (item.Flags_IsSet
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Water.Flag>.Instance.Write(
                    node: elem,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Water_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.MaterialID_IsSet
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.MaterialID) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.MaterialID),
                    item: item.MaterialID,
                    fieldIndex: (int)Water_FieldIndex.MaterialID,
                    errorMask: errorMask);
            }
            if (item.Sound_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.Sound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Sound),
                    item: item.Sound_Property?.FormKey,
                    fieldIndex: (int)Water_FieldIndex.Sound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.WindVelocity) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.WindVelocity),
                    item: item.WindVelocity,
                    fieldIndex: (int)Water_FieldIndex.WindVelocity,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.WindDirection) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.WindDirection),
                    item: item.WindDirection,
                    fieldIndex: (int)Water_FieldIndex.WindDirection,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.WaveAmplitude) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.WaveAmplitude),
                    item: item.WaveAmplitude,
                    fieldIndex: (int)Water_FieldIndex.WaveAmplitude,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.WaveFrequency) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.WaveFrequency),
                    item: item.WaveFrequency,
                    fieldIndex: (int)Water_FieldIndex.WaveFrequency,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.SunPower) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.SunPower),
                    item: item.SunPower,
                    fieldIndex: (int)Water_FieldIndex.SunPower,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.ReflectivityAmount) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.ReflectivityAmount),
                    item: item.ReflectivityAmount,
                    fieldIndex: (int)Water_FieldIndex.ReflectivityAmount,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.FresnelAmount) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FresnelAmount),
                    item: item.FresnelAmount,
                    fieldIndex: (int)Water_FieldIndex.FresnelAmount,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.ScrollXSpeed) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.ScrollXSpeed),
                    item: item.ScrollXSpeed,
                    fieldIndex: (int)Water_FieldIndex.ScrollXSpeed,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.ScrollYSpeed) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.ScrollYSpeed),
                    item: item.ScrollYSpeed,
                    fieldIndex: (int)Water_FieldIndex.ScrollYSpeed,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.FogDistanceNearPlane) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FogDistanceNearPlane),
                    item: item.FogDistanceNearPlane,
                    fieldIndex: (int)Water_FieldIndex.FogDistanceNearPlane,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.FogDistanceFarPlane) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FogDistanceFarPlane),
                    item: item.FogDistanceFarPlane,
                    fieldIndex: (int)Water_FieldIndex.FogDistanceFarPlane,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.ShallowColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.ShallowColor),
                    item: item.ShallowColor,
                    fieldIndex: (int)Water_FieldIndex.ShallowColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.DeepColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DeepColor),
                    item: item.DeepColor,
                    fieldIndex: (int)Water_FieldIndex.DeepColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.ReflectionColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.ReflectionColor),
                    item: item.ReflectionColor,
                    fieldIndex: (int)Water_FieldIndex.ReflectionColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.TextureBlend) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.TextureBlend),
                    item: item.TextureBlend,
                    fieldIndex: (int)Water_FieldIndex.TextureBlend,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.RainSimulatorForce) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RainSimulatorForce),
                    item: item.RainSimulatorForce,
                    fieldIndex: (int)Water_FieldIndex.RainSimulatorForce,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.RainSimulatorVelocity) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RainSimulatorVelocity),
                    item: item.RainSimulatorVelocity,
                    fieldIndex: (int)Water_FieldIndex.RainSimulatorVelocity,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.RainSimulatorFalloff) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RainSimulatorFalloff),
                    item: item.RainSimulatorFalloff,
                    fieldIndex: (int)Water_FieldIndex.RainSimulatorFalloff,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.RainSimulatorDampner) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RainSimulatorDampner),
                    item: item.RainSimulatorDampner,
                    fieldIndex: (int)Water_FieldIndex.RainSimulatorDampner,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.RainSimulatorStartingSize) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RainSimulatorStartingSize),
                    item: item.RainSimulatorStartingSize,
                    fieldIndex: (int)Water_FieldIndex.RainSimulatorStartingSize,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.DisplacementSimulatorForce) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DisplacementSimulatorForce),
                    item: item.DisplacementSimulatorForce,
                    fieldIndex: (int)Water_FieldIndex.DisplacementSimulatorForce,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.DisplacementSimulatorVelocity) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DisplacementSimulatorVelocity),
                    item: item.DisplacementSimulatorVelocity,
                    fieldIndex: (int)Water_FieldIndex.DisplacementSimulatorVelocity,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.DisplacementSimulatorFalloff) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DisplacementSimulatorFalloff),
                    item: item.DisplacementSimulatorFalloff,
                    fieldIndex: (int)Water_FieldIndex.DisplacementSimulatorFalloff,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.DisplacementSimulatorDampner) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DisplacementSimulatorDampner),
                    item: item.DisplacementSimulatorDampner,
                    fieldIndex: (int)Water_FieldIndex.DisplacementSimulatorDampner,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.DisplacementSimulatorStartingSize) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DisplacementSimulatorStartingSize),
                    item: item.DisplacementSimulatorStartingSize,
                    fieldIndex: (int)Water_FieldIndex.DisplacementSimulatorStartingSize,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.Damage) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Damage),
                    item: item.Damage,
                    fieldIndex: (int)Water_FieldIndex.Damage,
                    errorMask: errorMask);
            }
            if (item.RelatedWaters_IsSet
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.RelatedWaters) ?? true))
            {
                LoquiXmlTranslation<RelatedWaters>.Instance.Write(
                    node: elem,
                    item: item.RelatedWaters,
                    name: nameof(item.RelatedWaters),
                    fieldIndex: (int)Water_FieldIndex.RelatedWaters,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Water_FieldIndex.RelatedWaters));
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Water item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Water_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                masterReferences: masterReferences,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Water_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Water item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Water_Registration.WATR_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Water item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Texture_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Texture,
                    fieldIndex: (int)Water_FieldIndex.Texture,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Water_Registration.TNAM_HEADER),
                    nullable: false);
            }
            if (item.Opacity_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Opacity,
                    fieldIndex: (int)Water_FieldIndex.Opacity,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Water_Registration.ANAM_HEADER),
                    nullable: false);
            }
            if (item.Flags_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Water.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1,
                    fieldIndex: (int)Water_FieldIndex.Flags,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Water_Registration.FNAM_HEADER),
                    nullable: false);
            }
            if (item.MaterialID_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MaterialID,
                    fieldIndex: (int)Water_FieldIndex.MaterialID,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Water_Registration.MNAM_HEADER),
                    nullable: false);
            }
            if (item.Sound_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Sound_Property,
                    fieldIndex: (int)Water_FieldIndex.Sound,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Water_Registration.SNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.DATADataTypeState.HasFlag(Water.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Water_Registration.DATA_HEADER)))
                {
                    Water.WriteBinary_NothingCustomLogic(
                        writer: writer,
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    if (!item.DATADataTypeState.HasFlag(Water.DATADataType.Break0))
                    {
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.WindVelocity,
                            fieldIndex: (int)Water_FieldIndex.WindVelocity,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.WindDirection,
                            fieldIndex: (int)Water_FieldIndex.WindDirection,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.WaveAmplitude,
                            fieldIndex: (int)Water_FieldIndex.WaveAmplitude,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.WaveFrequency,
                            fieldIndex: (int)Water_FieldIndex.WaveFrequency,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.SunPower,
                            fieldIndex: (int)Water_FieldIndex.SunPower,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ReflectivityAmount,
                            fieldIndex: (int)Water_FieldIndex.ReflectivityAmount,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.FresnelAmount,
                            fieldIndex: (int)Water_FieldIndex.FresnelAmount,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ScrollXSpeed,
                            fieldIndex: (int)Water_FieldIndex.ScrollXSpeed,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ScrollYSpeed,
                            fieldIndex: (int)Water_FieldIndex.ScrollYSpeed,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.FogDistanceNearPlane,
                            fieldIndex: (int)Water_FieldIndex.FogDistanceNearPlane,
                            errorMask: errorMask);
                        Water.WriteBinary_BloodCustomLogic(
                            writer: writer,
                            item: item,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                        if (!item.DATADataTypeState.HasFlag(Water.DATADataType.Break1))
                        {
                            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                writer: writer,
                                item: item.FogDistanceFarPlane,
                                fieldIndex: (int)Water_FieldIndex.FogDistanceFarPlane,
                                errorMask: errorMask);
                            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                                writer: writer,
                                item: item.ShallowColor,
                                fieldIndex: (int)Water_FieldIndex.ShallowColor,
                                errorMask: errorMask,
                                extraByte: true);
                            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                                writer: writer,
                                item: item.DeepColor,
                                fieldIndex: (int)Water_FieldIndex.DeepColor,
                                errorMask: errorMask,
                                extraByte: true);
                            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                                writer: writer,
                                item: item.ReflectionColor,
                                fieldIndex: (int)Water_FieldIndex.ReflectionColor,
                                errorMask: errorMask,
                                extraByte: true);
                            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                                writer: writer,
                                item: item.TextureBlend,
                                fieldIndex: (int)Water_FieldIndex.TextureBlend,
                                errorMask: errorMask);
                            writer.WriteZeros(3);
                            Water.WriteBinary_OilCustomLogic(
                                writer: writer,
                                item: item,
                                masterReferences: masterReferences,
                                errorMask: errorMask);
                            if (!item.DATADataTypeState.HasFlag(Water.DATADataType.Break2))
                            {
                                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                    writer: writer,
                                    item: item.RainSimulatorForce,
                                    fieldIndex: (int)Water_FieldIndex.RainSimulatorForce,
                                    errorMask: errorMask);
                                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                    writer: writer,
                                    item: item.RainSimulatorVelocity,
                                    fieldIndex: (int)Water_FieldIndex.RainSimulatorVelocity,
                                    errorMask: errorMask);
                                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                    writer: writer,
                                    item: item.RainSimulatorFalloff,
                                    fieldIndex: (int)Water_FieldIndex.RainSimulatorFalloff,
                                    errorMask: errorMask);
                                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                    writer: writer,
                                    item: item.RainSimulatorDampner,
                                    fieldIndex: (int)Water_FieldIndex.RainSimulatorDampner,
                                    errorMask: errorMask);
                                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                    writer: writer,
                                    item: item.RainSimulatorStartingSize,
                                    fieldIndex: (int)Water_FieldIndex.RainSimulatorStartingSize,
                                    errorMask: errorMask);
                                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                    writer: writer,
                                    item: item.DisplacementSimulatorForce,
                                    fieldIndex: (int)Water_FieldIndex.DisplacementSimulatorForce,
                                    errorMask: errorMask);
                                Water.WriteBinary_OddExtraBytes(
                                    writer: writer,
                                    item: item,
                                    masterReferences: masterReferences,
                                    errorMask: errorMask);
                                if (!item.DATADataTypeState.HasFlag(Water.DATADataType.Break3))
                                {
                                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                        writer: writer,
                                        item: item.DisplacementSimulatorVelocity,
                                        fieldIndex: (int)Water_FieldIndex.DisplacementSimulatorVelocity,
                                        errorMask: errorMask);
                                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                        writer: writer,
                                        item: item.DisplacementSimulatorFalloff,
                                        fieldIndex: (int)Water_FieldIndex.DisplacementSimulatorFalloff,
                                        errorMask: errorMask);
                                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                        writer: writer,
                                        item: item.DisplacementSimulatorDampner,
                                        fieldIndex: (int)Water_FieldIndex.DisplacementSimulatorDampner,
                                        errorMask: errorMask);
                                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                        writer: writer,
                                        item: item.DisplacementSimulatorStartingSize,
                                        fieldIndex: (int)Water_FieldIndex.DisplacementSimulatorStartingSize,
                                        errorMask: errorMask);
                                    Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                                        writer: writer,
                                        item: item.Damage,
                                        fieldIndex: (int)Water_FieldIndex.Damage,
                                        errorMask: errorMask);
                                }
                            }
                        }
                    }
                }
            }
            if (item.RelatedWaters_IsSet)
            {
                LoquiBinaryTranslation<RelatedWaters>.Instance.Write(
                    writer: writer,
                    item: item.RelatedWaters,
                    fieldIndex: (int)Water_FieldIndex.RelatedWaters,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Water_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Water_Mask<T>>
    {
        #region Ctors
        public Water_Mask()
        {
        }

        public Water_Mask(T initialValue)
        {
            this.Texture = initialValue;
            this.Opacity = initialValue;
            this.Flags = initialValue;
            this.MaterialID = initialValue;
            this.Sound = initialValue;
            this.WindVelocity = initialValue;
            this.WindDirection = initialValue;
            this.WaveAmplitude = initialValue;
            this.WaveFrequency = initialValue;
            this.SunPower = initialValue;
            this.ReflectivityAmount = initialValue;
            this.FresnelAmount = initialValue;
            this.ScrollXSpeed = initialValue;
            this.ScrollYSpeed = initialValue;
            this.FogDistanceNearPlane = initialValue;
            this.FogDistanceFarPlane = initialValue;
            this.ShallowColor = initialValue;
            this.DeepColor = initialValue;
            this.ReflectionColor = initialValue;
            this.TextureBlend = initialValue;
            this.RainSimulatorForce = initialValue;
            this.RainSimulatorVelocity = initialValue;
            this.RainSimulatorFalloff = initialValue;
            this.RainSimulatorDampner = initialValue;
            this.RainSimulatorStartingSize = initialValue;
            this.DisplacementSimulatorForce = initialValue;
            this.DisplacementSimulatorVelocity = initialValue;
            this.DisplacementSimulatorFalloff = initialValue;
            this.DisplacementSimulatorDampner = initialValue;
            this.DisplacementSimulatorStartingSize = initialValue;
            this.Damage = initialValue;
            this.RelatedWaters = new MaskItem<T, RelatedWaters_Mask<T>>(initialValue, new RelatedWaters_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T Texture;
        public T Opacity;
        public T Flags;
        public T MaterialID;
        public T Sound;
        public T WindVelocity;
        public T WindDirection;
        public T WaveAmplitude;
        public T WaveFrequency;
        public T SunPower;
        public T ReflectivityAmount;
        public T FresnelAmount;
        public T ScrollXSpeed;
        public T ScrollYSpeed;
        public T FogDistanceNearPlane;
        public T FogDistanceFarPlane;
        public T ShallowColor;
        public T DeepColor;
        public T ReflectionColor;
        public T TextureBlend;
        public T RainSimulatorForce;
        public T RainSimulatorVelocity;
        public T RainSimulatorFalloff;
        public T RainSimulatorDampner;
        public T RainSimulatorStartingSize;
        public T DisplacementSimulatorForce;
        public T DisplacementSimulatorVelocity;
        public T DisplacementSimulatorFalloff;
        public T DisplacementSimulatorDampner;
        public T DisplacementSimulatorStartingSize;
        public T Damage;
        public MaskItem<T, RelatedWaters_Mask<T>> RelatedWaters { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Water_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Water_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Texture, rhs.Texture)) return false;
            if (!object.Equals(this.Opacity, rhs.Opacity)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.MaterialID, rhs.MaterialID)) return false;
            if (!object.Equals(this.Sound, rhs.Sound)) return false;
            if (!object.Equals(this.WindVelocity, rhs.WindVelocity)) return false;
            if (!object.Equals(this.WindDirection, rhs.WindDirection)) return false;
            if (!object.Equals(this.WaveAmplitude, rhs.WaveAmplitude)) return false;
            if (!object.Equals(this.WaveFrequency, rhs.WaveFrequency)) return false;
            if (!object.Equals(this.SunPower, rhs.SunPower)) return false;
            if (!object.Equals(this.ReflectivityAmount, rhs.ReflectivityAmount)) return false;
            if (!object.Equals(this.FresnelAmount, rhs.FresnelAmount)) return false;
            if (!object.Equals(this.ScrollXSpeed, rhs.ScrollXSpeed)) return false;
            if (!object.Equals(this.ScrollYSpeed, rhs.ScrollYSpeed)) return false;
            if (!object.Equals(this.FogDistanceNearPlane, rhs.FogDistanceNearPlane)) return false;
            if (!object.Equals(this.FogDistanceFarPlane, rhs.FogDistanceFarPlane)) return false;
            if (!object.Equals(this.ShallowColor, rhs.ShallowColor)) return false;
            if (!object.Equals(this.DeepColor, rhs.DeepColor)) return false;
            if (!object.Equals(this.ReflectionColor, rhs.ReflectionColor)) return false;
            if (!object.Equals(this.TextureBlend, rhs.TextureBlend)) return false;
            if (!object.Equals(this.RainSimulatorForce, rhs.RainSimulatorForce)) return false;
            if (!object.Equals(this.RainSimulatorVelocity, rhs.RainSimulatorVelocity)) return false;
            if (!object.Equals(this.RainSimulatorFalloff, rhs.RainSimulatorFalloff)) return false;
            if (!object.Equals(this.RainSimulatorDampner, rhs.RainSimulatorDampner)) return false;
            if (!object.Equals(this.RainSimulatorStartingSize, rhs.RainSimulatorStartingSize)) return false;
            if (!object.Equals(this.DisplacementSimulatorForce, rhs.DisplacementSimulatorForce)) return false;
            if (!object.Equals(this.DisplacementSimulatorVelocity, rhs.DisplacementSimulatorVelocity)) return false;
            if (!object.Equals(this.DisplacementSimulatorFalloff, rhs.DisplacementSimulatorFalloff)) return false;
            if (!object.Equals(this.DisplacementSimulatorDampner, rhs.DisplacementSimulatorDampner)) return false;
            if (!object.Equals(this.DisplacementSimulatorStartingSize, rhs.DisplacementSimulatorStartingSize)) return false;
            if (!object.Equals(this.Damage, rhs.Damage)) return false;
            if (!object.Equals(this.RelatedWaters, rhs.RelatedWaters)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Texture?.GetHashCode());
            ret = ret.CombineHashCode(this.Opacity?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.MaterialID?.GetHashCode());
            ret = ret.CombineHashCode(this.Sound?.GetHashCode());
            ret = ret.CombineHashCode(this.WindVelocity?.GetHashCode());
            ret = ret.CombineHashCode(this.WindDirection?.GetHashCode());
            ret = ret.CombineHashCode(this.WaveAmplitude?.GetHashCode());
            ret = ret.CombineHashCode(this.WaveFrequency?.GetHashCode());
            ret = ret.CombineHashCode(this.SunPower?.GetHashCode());
            ret = ret.CombineHashCode(this.ReflectivityAmount?.GetHashCode());
            ret = ret.CombineHashCode(this.FresnelAmount?.GetHashCode());
            ret = ret.CombineHashCode(this.ScrollXSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.ScrollYSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.FogDistanceNearPlane?.GetHashCode());
            ret = ret.CombineHashCode(this.FogDistanceFarPlane?.GetHashCode());
            ret = ret.CombineHashCode(this.ShallowColor?.GetHashCode());
            ret = ret.CombineHashCode(this.DeepColor?.GetHashCode());
            ret = ret.CombineHashCode(this.ReflectionColor?.GetHashCode());
            ret = ret.CombineHashCode(this.TextureBlend?.GetHashCode());
            ret = ret.CombineHashCode(this.RainSimulatorForce?.GetHashCode());
            ret = ret.CombineHashCode(this.RainSimulatorVelocity?.GetHashCode());
            ret = ret.CombineHashCode(this.RainSimulatorFalloff?.GetHashCode());
            ret = ret.CombineHashCode(this.RainSimulatorDampner?.GetHashCode());
            ret = ret.CombineHashCode(this.RainSimulatorStartingSize?.GetHashCode());
            ret = ret.CombineHashCode(this.DisplacementSimulatorForce?.GetHashCode());
            ret = ret.CombineHashCode(this.DisplacementSimulatorVelocity?.GetHashCode());
            ret = ret.CombineHashCode(this.DisplacementSimulatorFalloff?.GetHashCode());
            ret = ret.CombineHashCode(this.DisplacementSimulatorDampner?.GetHashCode());
            ret = ret.CombineHashCode(this.DisplacementSimulatorStartingSize?.GetHashCode());
            ret = ret.CombineHashCode(this.Damage?.GetHashCode());
            ret = ret.CombineHashCode(this.RelatedWaters?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Texture)) return false;
            if (!eval(this.Opacity)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.MaterialID)) return false;
            if (!eval(this.Sound)) return false;
            if (!eval(this.WindVelocity)) return false;
            if (!eval(this.WindDirection)) return false;
            if (!eval(this.WaveAmplitude)) return false;
            if (!eval(this.WaveFrequency)) return false;
            if (!eval(this.SunPower)) return false;
            if (!eval(this.ReflectivityAmount)) return false;
            if (!eval(this.FresnelAmount)) return false;
            if (!eval(this.ScrollXSpeed)) return false;
            if (!eval(this.ScrollYSpeed)) return false;
            if (!eval(this.FogDistanceNearPlane)) return false;
            if (!eval(this.FogDistanceFarPlane)) return false;
            if (!eval(this.ShallowColor)) return false;
            if (!eval(this.DeepColor)) return false;
            if (!eval(this.ReflectionColor)) return false;
            if (!eval(this.TextureBlend)) return false;
            if (!eval(this.RainSimulatorForce)) return false;
            if (!eval(this.RainSimulatorVelocity)) return false;
            if (!eval(this.RainSimulatorFalloff)) return false;
            if (!eval(this.RainSimulatorDampner)) return false;
            if (!eval(this.RainSimulatorStartingSize)) return false;
            if (!eval(this.DisplacementSimulatorForce)) return false;
            if (!eval(this.DisplacementSimulatorVelocity)) return false;
            if (!eval(this.DisplacementSimulatorFalloff)) return false;
            if (!eval(this.DisplacementSimulatorDampner)) return false;
            if (!eval(this.DisplacementSimulatorStartingSize)) return false;
            if (!eval(this.Damage)) return false;
            if (RelatedWaters != null)
            {
                if (!eval(this.RelatedWaters.Overall)) return false;
                if (this.RelatedWaters.Specific != null && !this.RelatedWaters.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public new Water_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Water_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Water_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Texture = eval(this.Texture);
            obj.Opacity = eval(this.Opacity);
            obj.Flags = eval(this.Flags);
            obj.MaterialID = eval(this.MaterialID);
            obj.Sound = eval(this.Sound);
            obj.WindVelocity = eval(this.WindVelocity);
            obj.WindDirection = eval(this.WindDirection);
            obj.WaveAmplitude = eval(this.WaveAmplitude);
            obj.WaveFrequency = eval(this.WaveFrequency);
            obj.SunPower = eval(this.SunPower);
            obj.ReflectivityAmount = eval(this.ReflectivityAmount);
            obj.FresnelAmount = eval(this.FresnelAmount);
            obj.ScrollXSpeed = eval(this.ScrollXSpeed);
            obj.ScrollYSpeed = eval(this.ScrollYSpeed);
            obj.FogDistanceNearPlane = eval(this.FogDistanceNearPlane);
            obj.FogDistanceFarPlane = eval(this.FogDistanceFarPlane);
            obj.ShallowColor = eval(this.ShallowColor);
            obj.DeepColor = eval(this.DeepColor);
            obj.ReflectionColor = eval(this.ReflectionColor);
            obj.TextureBlend = eval(this.TextureBlend);
            obj.RainSimulatorForce = eval(this.RainSimulatorForce);
            obj.RainSimulatorVelocity = eval(this.RainSimulatorVelocity);
            obj.RainSimulatorFalloff = eval(this.RainSimulatorFalloff);
            obj.RainSimulatorDampner = eval(this.RainSimulatorDampner);
            obj.RainSimulatorStartingSize = eval(this.RainSimulatorStartingSize);
            obj.DisplacementSimulatorForce = eval(this.DisplacementSimulatorForce);
            obj.DisplacementSimulatorVelocity = eval(this.DisplacementSimulatorVelocity);
            obj.DisplacementSimulatorFalloff = eval(this.DisplacementSimulatorFalloff);
            obj.DisplacementSimulatorDampner = eval(this.DisplacementSimulatorDampner);
            obj.DisplacementSimulatorStartingSize = eval(this.DisplacementSimulatorStartingSize);
            obj.Damage = eval(this.Damage);
            if (this.RelatedWaters != null)
            {
                obj.RelatedWaters = new MaskItem<R, RelatedWaters_Mask<R>>();
                obj.RelatedWaters.Overall = eval(this.RelatedWaters.Overall);
                if (this.RelatedWaters.Specific != null)
                {
                    obj.RelatedWaters.Specific = this.RelatedWaters.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Water_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Water_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Water_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Texture ?? true)
                {
                    fg.AppendLine($"Texture => {Texture}");
                }
                if (printMask?.Opacity ?? true)
                {
                    fg.AppendLine($"Opacity => {Opacity}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.MaterialID ?? true)
                {
                    fg.AppendLine($"MaterialID => {MaterialID}");
                }
                if (printMask?.Sound ?? true)
                {
                    fg.AppendLine($"Sound => {Sound}");
                }
                if (printMask?.WindVelocity ?? true)
                {
                    fg.AppendLine($"WindVelocity => {WindVelocity}");
                }
                if (printMask?.WindDirection ?? true)
                {
                    fg.AppendLine($"WindDirection => {WindDirection}");
                }
                if (printMask?.WaveAmplitude ?? true)
                {
                    fg.AppendLine($"WaveAmplitude => {WaveAmplitude}");
                }
                if (printMask?.WaveFrequency ?? true)
                {
                    fg.AppendLine($"WaveFrequency => {WaveFrequency}");
                }
                if (printMask?.SunPower ?? true)
                {
                    fg.AppendLine($"SunPower => {SunPower}");
                }
                if (printMask?.ReflectivityAmount ?? true)
                {
                    fg.AppendLine($"ReflectivityAmount => {ReflectivityAmount}");
                }
                if (printMask?.FresnelAmount ?? true)
                {
                    fg.AppendLine($"FresnelAmount => {FresnelAmount}");
                }
                if (printMask?.ScrollXSpeed ?? true)
                {
                    fg.AppendLine($"ScrollXSpeed => {ScrollXSpeed}");
                }
                if (printMask?.ScrollYSpeed ?? true)
                {
                    fg.AppendLine($"ScrollYSpeed => {ScrollYSpeed}");
                }
                if (printMask?.FogDistanceNearPlane ?? true)
                {
                    fg.AppendLine($"FogDistanceNearPlane => {FogDistanceNearPlane}");
                }
                if (printMask?.FogDistanceFarPlane ?? true)
                {
                    fg.AppendLine($"FogDistanceFarPlane => {FogDistanceFarPlane}");
                }
                if (printMask?.ShallowColor ?? true)
                {
                    fg.AppendLine($"ShallowColor => {ShallowColor}");
                }
                if (printMask?.DeepColor ?? true)
                {
                    fg.AppendLine($"DeepColor => {DeepColor}");
                }
                if (printMask?.ReflectionColor ?? true)
                {
                    fg.AppendLine($"ReflectionColor => {ReflectionColor}");
                }
                if (printMask?.TextureBlend ?? true)
                {
                    fg.AppendLine($"TextureBlend => {TextureBlend}");
                }
                if (printMask?.RainSimulatorForce ?? true)
                {
                    fg.AppendLine($"RainSimulatorForce => {RainSimulatorForce}");
                }
                if (printMask?.RainSimulatorVelocity ?? true)
                {
                    fg.AppendLine($"RainSimulatorVelocity => {RainSimulatorVelocity}");
                }
                if (printMask?.RainSimulatorFalloff ?? true)
                {
                    fg.AppendLine($"RainSimulatorFalloff => {RainSimulatorFalloff}");
                }
                if (printMask?.RainSimulatorDampner ?? true)
                {
                    fg.AppendLine($"RainSimulatorDampner => {RainSimulatorDampner}");
                }
                if (printMask?.RainSimulatorStartingSize ?? true)
                {
                    fg.AppendLine($"RainSimulatorStartingSize => {RainSimulatorStartingSize}");
                }
                if (printMask?.DisplacementSimulatorForce ?? true)
                {
                    fg.AppendLine($"DisplacementSimulatorForce => {DisplacementSimulatorForce}");
                }
                if (printMask?.DisplacementSimulatorVelocity ?? true)
                {
                    fg.AppendLine($"DisplacementSimulatorVelocity => {DisplacementSimulatorVelocity}");
                }
                if (printMask?.DisplacementSimulatorFalloff ?? true)
                {
                    fg.AppendLine($"DisplacementSimulatorFalloff => {DisplacementSimulatorFalloff}");
                }
                if (printMask?.DisplacementSimulatorDampner ?? true)
                {
                    fg.AppendLine($"DisplacementSimulatorDampner => {DisplacementSimulatorDampner}");
                }
                if (printMask?.DisplacementSimulatorStartingSize ?? true)
                {
                    fg.AppendLine($"DisplacementSimulatorStartingSize => {DisplacementSimulatorStartingSize}");
                }
                if (printMask?.Damage ?? true)
                {
                    fg.AppendLine($"Damage => {Damage}");
                }
                if (printMask?.RelatedWaters?.Overall ?? true)
                {
                    RelatedWaters?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Water_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Water_ErrorMask>
    {
        #region Members
        public Exception Texture;
        public Exception Opacity;
        public Exception Flags;
        public Exception MaterialID;
        public Exception Sound;
        public Exception WindVelocity;
        public Exception WindDirection;
        public Exception WaveAmplitude;
        public Exception WaveFrequency;
        public Exception SunPower;
        public Exception ReflectivityAmount;
        public Exception FresnelAmount;
        public Exception ScrollXSpeed;
        public Exception ScrollYSpeed;
        public Exception FogDistanceNearPlane;
        public Exception FogDistanceFarPlane;
        public Exception ShallowColor;
        public Exception DeepColor;
        public Exception ReflectionColor;
        public Exception TextureBlend;
        public Exception RainSimulatorForce;
        public Exception RainSimulatorVelocity;
        public Exception RainSimulatorFalloff;
        public Exception RainSimulatorDampner;
        public Exception RainSimulatorStartingSize;
        public Exception DisplacementSimulatorForce;
        public Exception DisplacementSimulatorVelocity;
        public Exception DisplacementSimulatorFalloff;
        public Exception DisplacementSimulatorDampner;
        public Exception DisplacementSimulatorStartingSize;
        public Exception Damage;
        public MaskItem<Exception, RelatedWaters_ErrorMask> RelatedWaters;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                    return Texture;
                case Water_FieldIndex.Opacity:
                    return Opacity;
                case Water_FieldIndex.Flags:
                    return Flags;
                case Water_FieldIndex.MaterialID:
                    return MaterialID;
                case Water_FieldIndex.Sound:
                    return Sound;
                case Water_FieldIndex.WindVelocity:
                    return WindVelocity;
                case Water_FieldIndex.WindDirection:
                    return WindDirection;
                case Water_FieldIndex.WaveAmplitude:
                    return WaveAmplitude;
                case Water_FieldIndex.WaveFrequency:
                    return WaveFrequency;
                case Water_FieldIndex.SunPower:
                    return SunPower;
                case Water_FieldIndex.ReflectivityAmount:
                    return ReflectivityAmount;
                case Water_FieldIndex.FresnelAmount:
                    return FresnelAmount;
                case Water_FieldIndex.ScrollXSpeed:
                    return ScrollXSpeed;
                case Water_FieldIndex.ScrollYSpeed:
                    return ScrollYSpeed;
                case Water_FieldIndex.FogDistanceNearPlane:
                    return FogDistanceNearPlane;
                case Water_FieldIndex.FogDistanceFarPlane:
                    return FogDistanceFarPlane;
                case Water_FieldIndex.ShallowColor:
                    return ShallowColor;
                case Water_FieldIndex.DeepColor:
                    return DeepColor;
                case Water_FieldIndex.ReflectionColor:
                    return ReflectionColor;
                case Water_FieldIndex.TextureBlend:
                    return TextureBlend;
                case Water_FieldIndex.RainSimulatorForce:
                    return RainSimulatorForce;
                case Water_FieldIndex.RainSimulatorVelocity:
                    return RainSimulatorVelocity;
                case Water_FieldIndex.RainSimulatorFalloff:
                    return RainSimulatorFalloff;
                case Water_FieldIndex.RainSimulatorDampner:
                    return RainSimulatorDampner;
                case Water_FieldIndex.RainSimulatorStartingSize:
                    return RainSimulatorStartingSize;
                case Water_FieldIndex.DisplacementSimulatorForce:
                    return DisplacementSimulatorForce;
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                    return DisplacementSimulatorVelocity;
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                    return DisplacementSimulatorFalloff;
                case Water_FieldIndex.DisplacementSimulatorDampner:
                    return DisplacementSimulatorDampner;
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                    return DisplacementSimulatorStartingSize;
                case Water_FieldIndex.Damage:
                    return Damage;
                case Water_FieldIndex.RelatedWaters:
                    return RelatedWaters;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                    this.Texture = ex;
                    break;
                case Water_FieldIndex.Opacity:
                    this.Opacity = ex;
                    break;
                case Water_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Water_FieldIndex.MaterialID:
                    this.MaterialID = ex;
                    break;
                case Water_FieldIndex.Sound:
                    this.Sound = ex;
                    break;
                case Water_FieldIndex.WindVelocity:
                    this.WindVelocity = ex;
                    break;
                case Water_FieldIndex.WindDirection:
                    this.WindDirection = ex;
                    break;
                case Water_FieldIndex.WaveAmplitude:
                    this.WaveAmplitude = ex;
                    break;
                case Water_FieldIndex.WaveFrequency:
                    this.WaveFrequency = ex;
                    break;
                case Water_FieldIndex.SunPower:
                    this.SunPower = ex;
                    break;
                case Water_FieldIndex.ReflectivityAmount:
                    this.ReflectivityAmount = ex;
                    break;
                case Water_FieldIndex.FresnelAmount:
                    this.FresnelAmount = ex;
                    break;
                case Water_FieldIndex.ScrollXSpeed:
                    this.ScrollXSpeed = ex;
                    break;
                case Water_FieldIndex.ScrollYSpeed:
                    this.ScrollYSpeed = ex;
                    break;
                case Water_FieldIndex.FogDistanceNearPlane:
                    this.FogDistanceNearPlane = ex;
                    break;
                case Water_FieldIndex.FogDistanceFarPlane:
                    this.FogDistanceFarPlane = ex;
                    break;
                case Water_FieldIndex.ShallowColor:
                    this.ShallowColor = ex;
                    break;
                case Water_FieldIndex.DeepColor:
                    this.DeepColor = ex;
                    break;
                case Water_FieldIndex.ReflectionColor:
                    this.ReflectionColor = ex;
                    break;
                case Water_FieldIndex.TextureBlend:
                    this.TextureBlend = ex;
                    break;
                case Water_FieldIndex.RainSimulatorForce:
                    this.RainSimulatorForce = ex;
                    break;
                case Water_FieldIndex.RainSimulatorVelocity:
                    this.RainSimulatorVelocity = ex;
                    break;
                case Water_FieldIndex.RainSimulatorFalloff:
                    this.RainSimulatorFalloff = ex;
                    break;
                case Water_FieldIndex.RainSimulatorDampner:
                    this.RainSimulatorDampner = ex;
                    break;
                case Water_FieldIndex.RainSimulatorStartingSize:
                    this.RainSimulatorStartingSize = ex;
                    break;
                case Water_FieldIndex.DisplacementSimulatorForce:
                    this.DisplacementSimulatorForce = ex;
                    break;
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                    this.DisplacementSimulatorVelocity = ex;
                    break;
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                    this.DisplacementSimulatorFalloff = ex;
                    break;
                case Water_FieldIndex.DisplacementSimulatorDampner:
                    this.DisplacementSimulatorDampner = ex;
                    break;
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                    this.DisplacementSimulatorStartingSize = ex;
                    break;
                case Water_FieldIndex.Damage:
                    this.Damage = ex;
                    break;
                case Water_FieldIndex.RelatedWaters:
                    this.RelatedWaters = new MaskItem<Exception, RelatedWaters_ErrorMask>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                    this.Texture = (Exception)obj;
                    break;
                case Water_FieldIndex.Opacity:
                    this.Opacity = (Exception)obj;
                    break;
                case Water_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Water_FieldIndex.MaterialID:
                    this.MaterialID = (Exception)obj;
                    break;
                case Water_FieldIndex.Sound:
                    this.Sound = (Exception)obj;
                    break;
                case Water_FieldIndex.WindVelocity:
                    this.WindVelocity = (Exception)obj;
                    break;
                case Water_FieldIndex.WindDirection:
                    this.WindDirection = (Exception)obj;
                    break;
                case Water_FieldIndex.WaveAmplitude:
                    this.WaveAmplitude = (Exception)obj;
                    break;
                case Water_FieldIndex.WaveFrequency:
                    this.WaveFrequency = (Exception)obj;
                    break;
                case Water_FieldIndex.SunPower:
                    this.SunPower = (Exception)obj;
                    break;
                case Water_FieldIndex.ReflectivityAmount:
                    this.ReflectivityAmount = (Exception)obj;
                    break;
                case Water_FieldIndex.FresnelAmount:
                    this.FresnelAmount = (Exception)obj;
                    break;
                case Water_FieldIndex.ScrollXSpeed:
                    this.ScrollXSpeed = (Exception)obj;
                    break;
                case Water_FieldIndex.ScrollYSpeed:
                    this.ScrollYSpeed = (Exception)obj;
                    break;
                case Water_FieldIndex.FogDistanceNearPlane:
                    this.FogDistanceNearPlane = (Exception)obj;
                    break;
                case Water_FieldIndex.FogDistanceFarPlane:
                    this.FogDistanceFarPlane = (Exception)obj;
                    break;
                case Water_FieldIndex.ShallowColor:
                    this.ShallowColor = (Exception)obj;
                    break;
                case Water_FieldIndex.DeepColor:
                    this.DeepColor = (Exception)obj;
                    break;
                case Water_FieldIndex.ReflectionColor:
                    this.ReflectionColor = (Exception)obj;
                    break;
                case Water_FieldIndex.TextureBlend:
                    this.TextureBlend = (Exception)obj;
                    break;
                case Water_FieldIndex.RainSimulatorForce:
                    this.RainSimulatorForce = (Exception)obj;
                    break;
                case Water_FieldIndex.RainSimulatorVelocity:
                    this.RainSimulatorVelocity = (Exception)obj;
                    break;
                case Water_FieldIndex.RainSimulatorFalloff:
                    this.RainSimulatorFalloff = (Exception)obj;
                    break;
                case Water_FieldIndex.RainSimulatorDampner:
                    this.RainSimulatorDampner = (Exception)obj;
                    break;
                case Water_FieldIndex.RainSimulatorStartingSize:
                    this.RainSimulatorStartingSize = (Exception)obj;
                    break;
                case Water_FieldIndex.DisplacementSimulatorForce:
                    this.DisplacementSimulatorForce = (Exception)obj;
                    break;
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                    this.DisplacementSimulatorVelocity = (Exception)obj;
                    break;
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                    this.DisplacementSimulatorFalloff = (Exception)obj;
                    break;
                case Water_FieldIndex.DisplacementSimulatorDampner:
                    this.DisplacementSimulatorDampner = (Exception)obj;
                    break;
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                    this.DisplacementSimulatorStartingSize = (Exception)obj;
                    break;
                case Water_FieldIndex.Damage:
                    this.Damage = (Exception)obj;
                    break;
                case Water_FieldIndex.RelatedWaters:
                    this.RelatedWaters = (MaskItem<Exception, RelatedWaters_ErrorMask>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Texture != null) return true;
            if (Opacity != null) return true;
            if (Flags != null) return true;
            if (MaterialID != null) return true;
            if (Sound != null) return true;
            if (WindVelocity != null) return true;
            if (WindDirection != null) return true;
            if (WaveAmplitude != null) return true;
            if (WaveFrequency != null) return true;
            if (SunPower != null) return true;
            if (ReflectivityAmount != null) return true;
            if (FresnelAmount != null) return true;
            if (ScrollXSpeed != null) return true;
            if (ScrollYSpeed != null) return true;
            if (FogDistanceNearPlane != null) return true;
            if (FogDistanceFarPlane != null) return true;
            if (ShallowColor != null) return true;
            if (DeepColor != null) return true;
            if (ReflectionColor != null) return true;
            if (TextureBlend != null) return true;
            if (RainSimulatorForce != null) return true;
            if (RainSimulatorVelocity != null) return true;
            if (RainSimulatorFalloff != null) return true;
            if (RainSimulatorDampner != null) return true;
            if (RainSimulatorStartingSize != null) return true;
            if (DisplacementSimulatorForce != null) return true;
            if (DisplacementSimulatorVelocity != null) return true;
            if (DisplacementSimulatorFalloff != null) return true;
            if (DisplacementSimulatorDampner != null) return true;
            if (DisplacementSimulatorStartingSize != null) return true;
            if (Damage != null) return true;
            if (RelatedWaters != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Water_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Texture => {Texture}");
            fg.AppendLine($"Opacity => {Opacity}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"MaterialID => {MaterialID}");
            fg.AppendLine($"Sound => {Sound}");
            fg.AppendLine($"WindVelocity => {WindVelocity}");
            fg.AppendLine($"WindDirection => {WindDirection}");
            fg.AppendLine($"WaveAmplitude => {WaveAmplitude}");
            fg.AppendLine($"WaveFrequency => {WaveFrequency}");
            fg.AppendLine($"SunPower => {SunPower}");
            fg.AppendLine($"ReflectivityAmount => {ReflectivityAmount}");
            fg.AppendLine($"FresnelAmount => {FresnelAmount}");
            fg.AppendLine($"ScrollXSpeed => {ScrollXSpeed}");
            fg.AppendLine($"ScrollYSpeed => {ScrollYSpeed}");
            fg.AppendLine($"FogDistanceNearPlane => {FogDistanceNearPlane}");
            fg.AppendLine($"FogDistanceFarPlane => {FogDistanceFarPlane}");
            fg.AppendLine($"ShallowColor => {ShallowColor}");
            fg.AppendLine($"DeepColor => {DeepColor}");
            fg.AppendLine($"ReflectionColor => {ReflectionColor}");
            fg.AppendLine($"TextureBlend => {TextureBlend}");
            fg.AppendLine($"RainSimulatorForce => {RainSimulatorForce}");
            fg.AppendLine($"RainSimulatorVelocity => {RainSimulatorVelocity}");
            fg.AppendLine($"RainSimulatorFalloff => {RainSimulatorFalloff}");
            fg.AppendLine($"RainSimulatorDampner => {RainSimulatorDampner}");
            fg.AppendLine($"RainSimulatorStartingSize => {RainSimulatorStartingSize}");
            fg.AppendLine($"DisplacementSimulatorForce => {DisplacementSimulatorForce}");
            fg.AppendLine($"DisplacementSimulatorVelocity => {DisplacementSimulatorVelocity}");
            fg.AppendLine($"DisplacementSimulatorFalloff => {DisplacementSimulatorFalloff}");
            fg.AppendLine($"DisplacementSimulatorDampner => {DisplacementSimulatorDampner}");
            fg.AppendLine($"DisplacementSimulatorStartingSize => {DisplacementSimulatorStartingSize}");
            fg.AppendLine($"Damage => {Damage}");
            RelatedWaters?.ToString(fg);
        }
        #endregion

        #region Combine
        public Water_ErrorMask Combine(Water_ErrorMask rhs)
        {
            var ret = new Water_ErrorMask();
            ret.Texture = this.Texture.Combine(rhs.Texture);
            ret.Opacity = this.Opacity.Combine(rhs.Opacity);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.MaterialID = this.MaterialID.Combine(rhs.MaterialID);
            ret.Sound = this.Sound.Combine(rhs.Sound);
            ret.WindVelocity = this.WindVelocity.Combine(rhs.WindVelocity);
            ret.WindDirection = this.WindDirection.Combine(rhs.WindDirection);
            ret.WaveAmplitude = this.WaveAmplitude.Combine(rhs.WaveAmplitude);
            ret.WaveFrequency = this.WaveFrequency.Combine(rhs.WaveFrequency);
            ret.SunPower = this.SunPower.Combine(rhs.SunPower);
            ret.ReflectivityAmount = this.ReflectivityAmount.Combine(rhs.ReflectivityAmount);
            ret.FresnelAmount = this.FresnelAmount.Combine(rhs.FresnelAmount);
            ret.ScrollXSpeed = this.ScrollXSpeed.Combine(rhs.ScrollXSpeed);
            ret.ScrollYSpeed = this.ScrollYSpeed.Combine(rhs.ScrollYSpeed);
            ret.FogDistanceNearPlane = this.FogDistanceNearPlane.Combine(rhs.FogDistanceNearPlane);
            ret.FogDistanceFarPlane = this.FogDistanceFarPlane.Combine(rhs.FogDistanceFarPlane);
            ret.ShallowColor = this.ShallowColor.Combine(rhs.ShallowColor);
            ret.DeepColor = this.DeepColor.Combine(rhs.DeepColor);
            ret.ReflectionColor = this.ReflectionColor.Combine(rhs.ReflectionColor);
            ret.TextureBlend = this.TextureBlend.Combine(rhs.TextureBlend);
            ret.RainSimulatorForce = this.RainSimulatorForce.Combine(rhs.RainSimulatorForce);
            ret.RainSimulatorVelocity = this.RainSimulatorVelocity.Combine(rhs.RainSimulatorVelocity);
            ret.RainSimulatorFalloff = this.RainSimulatorFalloff.Combine(rhs.RainSimulatorFalloff);
            ret.RainSimulatorDampner = this.RainSimulatorDampner.Combine(rhs.RainSimulatorDampner);
            ret.RainSimulatorStartingSize = this.RainSimulatorStartingSize.Combine(rhs.RainSimulatorStartingSize);
            ret.DisplacementSimulatorForce = this.DisplacementSimulatorForce.Combine(rhs.DisplacementSimulatorForce);
            ret.DisplacementSimulatorVelocity = this.DisplacementSimulatorVelocity.Combine(rhs.DisplacementSimulatorVelocity);
            ret.DisplacementSimulatorFalloff = this.DisplacementSimulatorFalloff.Combine(rhs.DisplacementSimulatorFalloff);
            ret.DisplacementSimulatorDampner = this.DisplacementSimulatorDampner.Combine(rhs.DisplacementSimulatorDampner);
            ret.DisplacementSimulatorStartingSize = this.DisplacementSimulatorStartingSize.Combine(rhs.DisplacementSimulatorStartingSize);
            ret.Damage = this.Damage.Combine(rhs.Damage);
            ret.RelatedWaters = new MaskItem<Exception, RelatedWaters_ErrorMask>(this.RelatedWaters.Overall.Combine(rhs.RelatedWaters.Overall), ((IErrorMask<RelatedWaters_ErrorMask>)this.RelatedWaters.Specific).Combine(rhs.RelatedWaters.Specific));
            return ret;
        }
        public static Water_ErrorMask Combine(Water_ErrorMask lhs, Water_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Water_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Water_ErrorMask();
        }
        #endregion

    }
    public class Water_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool Texture;
        public bool Opacity;
        public bool Flags;
        public bool MaterialID;
        public bool Sound;
        public bool WindVelocity;
        public bool WindDirection;
        public bool WaveAmplitude;
        public bool WaveFrequency;
        public bool SunPower;
        public bool ReflectivityAmount;
        public bool FresnelAmount;
        public bool ScrollXSpeed;
        public bool ScrollYSpeed;
        public bool FogDistanceNearPlane;
        public bool FogDistanceFarPlane;
        public bool ShallowColor;
        public bool DeepColor;
        public bool ReflectionColor;
        public bool TextureBlend;
        public bool RainSimulatorForce;
        public bool RainSimulatorVelocity;
        public bool RainSimulatorFalloff;
        public bool RainSimulatorDampner;
        public bool RainSimulatorStartingSize;
        public bool DisplacementSimulatorForce;
        public bool DisplacementSimulatorVelocity;
        public bool DisplacementSimulatorFalloff;
        public bool DisplacementSimulatorDampner;
        public bool DisplacementSimulatorStartingSize;
        public bool Damage;
        public MaskItem<CopyOption, RelatedWaters_CopyMask> RelatedWaters;
        #endregion

    }
    public class Water_TranslationMask : MajorRecord_TranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Texture;
        public bool Opacity;
        public bool Flags;
        public bool MaterialID;
        public bool Sound;
        public bool WindVelocity;
        public bool WindDirection;
        public bool WaveAmplitude;
        public bool WaveFrequency;
        public bool SunPower;
        public bool ReflectivityAmount;
        public bool FresnelAmount;
        public bool ScrollXSpeed;
        public bool ScrollYSpeed;
        public bool FogDistanceNearPlane;
        public bool FogDistanceFarPlane;
        public bool ShallowColor;
        public bool DeepColor;
        public bool ReflectionColor;
        public bool TextureBlend;
        public bool RainSimulatorForce;
        public bool RainSimulatorVelocity;
        public bool RainSimulatorFalloff;
        public bool RainSimulatorDampner;
        public bool RainSimulatorStartingSize;
        public bool DisplacementSimulatorForce;
        public bool DisplacementSimulatorVelocity;
        public bool DisplacementSimulatorFalloff;
        public bool DisplacementSimulatorDampner;
        public bool DisplacementSimulatorStartingSize;
        public bool Damage;
        public MaskItem<bool, RelatedWaters_TranslationMask> RelatedWaters;
        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Texture, null));
            ret.Add((Opacity, null));
            ret.Add((Flags, null));
            ret.Add((MaterialID, null));
            ret.Add((Sound, null));
            ret.Add((WindVelocity, null));
            ret.Add((WindDirection, null));
            ret.Add((WaveAmplitude, null));
            ret.Add((WaveFrequency, null));
            ret.Add((SunPower, null));
            ret.Add((ReflectivityAmount, null));
            ret.Add((FresnelAmount, null));
            ret.Add((ScrollXSpeed, null));
            ret.Add((ScrollYSpeed, null));
            ret.Add((FogDistanceNearPlane, null));
            ret.Add((FogDistanceFarPlane, null));
            ret.Add((ShallowColor, null));
            ret.Add((DeepColor, null));
            ret.Add((ReflectionColor, null));
            ret.Add((TextureBlend, null));
            ret.Add((RainSimulatorForce, null));
            ret.Add((RainSimulatorVelocity, null));
            ret.Add((RainSimulatorFalloff, null));
            ret.Add((RainSimulatorDampner, null));
            ret.Add((RainSimulatorStartingSize, null));
            ret.Add((DisplacementSimulatorForce, null));
            ret.Add((DisplacementSimulatorVelocity, null));
            ret.Add((DisplacementSimulatorFalloff, null));
            ret.Add((DisplacementSimulatorDampner, null));
            ret.Add((DisplacementSimulatorStartingSize, null));
            ret.Add((Damage, null));
            ret.Add((RelatedWaters?.Overall ?? true, RelatedWaters?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
