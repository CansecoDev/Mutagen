/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Loqui.Internal;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Weapon : 
        NamedMajorRecord,
        IWeapon,
        ILoquiObject<Weapon>,
        ILoquiObjectSetter,
        IPropertySupporter<Model>,
        IPropertySupporter<String>,
        IPropertySupporter<UInt16>,
        IPropertySupporter<Weapon.WeaponType>,
        IPropertySupporter<Single>,
        IPropertySupporter<Weapon.WeaponFlag>,
        IPropertySupporter<UInt32>,
        IEquatable<Weapon>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Weapon_Registration.Instance;
        public new static Weapon_Registration Registration => Weapon_Registration.Instance;

        #region Ctor
        public Weapon()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        protected Model _Model;
        protected PropertyForwarder<Weapon, Model> _ModelForwarder;
        public INotifyingSetItem<Model> Model_Property => _ModelForwarder ?? (_ModelForwarder = new PropertyForwarder<Weapon, Model>(this, (int)Weapon_FieldIndex.Model));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => this._Model;
            set => this.SetModel(value);
        }
        protected void SetModel(
            Model item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weapon_FieldIndex.Model];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Model, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weapon_FieldIndex.Model] = hasBeenSet;
            }
            if (_Model_subscriptions != null)
            {
                var tmp = Model;
                _Model = item;
                _Model_subscriptions.FireSubscriptions(
                    index: (int)Weapon_FieldIndex.Model,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Model = item;
            }
        }
        protected void UnsetModel()
        {
            _hasBeenSetTracker[(int)Weapon_FieldIndex.Model] = false;
            Model = default(Model);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> IWeapon.Model_Property => this.Model_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> IWeaponGetter.Model_Property => this.Model_Property;
        #endregion
        #region Icon
        protected String _Icon;
        protected PropertyForwarder<Weapon, String> _IconForwarder;
        public INotifyingSetItem<String> Icon_Property => _IconForwarder ?? (_IconForwarder = new PropertyForwarder<Weapon, String>(this, (int)Weapon_FieldIndex.Icon));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => this.SetIcon(value);
        }
        protected void SetIcon(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weapon_FieldIndex.Icon];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Icon == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weapon_FieldIndex.Icon] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = Icon;
                _Icon = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)Weapon_FieldIndex.Icon,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Icon = item;
            }
        }
        protected void UnsetIcon()
        {
            _hasBeenSetTracker[(int)Weapon_FieldIndex.Icon] = false;
            Icon = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IWeapon.Icon_Property => this.Icon_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IWeaponGetter.Icon_Property => this.Icon_Property;
        #endregion
        #region Script
        public FormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Script> IWeaponGetter.Script_Property => this.Script_Property;
        #endregion
        #region Enchantment
        public FormIDSetLink<Enchantment> Enchantment_Property { get; } = new FormIDSetLink<Enchantment>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Enchantment Enchantment { get => Enchantment_Property.Item; set => Enchantment_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Enchantment> IWeaponGetter.Enchantment_Property => this.Enchantment_Property;
        #endregion
        #region EnchantmentPoints
        protected UInt16 _EnchantmentPoints;
        protected PropertyForwarder<Weapon, UInt16> _EnchantmentPointsForwarder;
        public INotifyingSetItem<UInt16> EnchantmentPoints_Property => _EnchantmentPointsForwarder ?? (_EnchantmentPointsForwarder = new PropertyForwarder<Weapon, UInt16>(this, (int)Weapon_FieldIndex.EnchantmentPoints));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 EnchantmentPoints
        {
            get => this._EnchantmentPoints;
            set => this.SetEnchantmentPoints(value);
        }
        protected void SetEnchantmentPoints(
            UInt16 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weapon_FieldIndex.EnchantmentPoints];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && EnchantmentPoints == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weapon_FieldIndex.EnchantmentPoints] = hasBeenSet;
            }
            if (_UInt16_subscriptions != null)
            {
                var tmp = EnchantmentPoints;
                _EnchantmentPoints = item;
                _UInt16_subscriptions.FireSubscriptions(
                    index: (int)Weapon_FieldIndex.EnchantmentPoints,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _EnchantmentPoints = item;
            }
        }
        protected void UnsetEnchantmentPoints()
        {
            _hasBeenSetTracker[(int)Weapon_FieldIndex.EnchantmentPoints] = false;
            EnchantmentPoints = default(UInt16);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<UInt16> IWeapon.EnchantmentPoints_Property => this.EnchantmentPoints_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<UInt16> IWeaponGetter.EnchantmentPoints_Property => this.EnchantmentPoints_Property;
        #endregion
        #region Type
        protected Weapon.WeaponType _Type;
        protected PropertyForwarder<Weapon, Weapon.WeaponType> _TypeForwarder;
        public INotifyingSetItem<Weapon.WeaponType> Type_Property => _TypeForwarder ?? (_TypeForwarder = new PropertyForwarder<Weapon, Weapon.WeaponType>(this, (int)Weapon_FieldIndex.Type));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Weapon.WeaponType Type
        {
            get => this._Type;
            set => this.SetType(value);
        }
        protected void SetType(
            Weapon.WeaponType item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weapon_FieldIndex.Type];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Type == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weapon_FieldIndex.Type] = hasBeenSet;
            }
            if (_WeaponWeaponType_subscriptions != null)
            {
                var tmp = Type;
                _Type = item;
                _WeaponWeaponType_subscriptions.FireSubscriptions(
                    index: (int)Weapon_FieldIndex.Type,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Type = item;
            }
        }
        protected void UnsetType()
        {
            _hasBeenSetTracker[(int)Weapon_FieldIndex.Type] = false;
            Type = default(Weapon.WeaponType);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Weapon.WeaponType> IWeapon.Type_Property => this.Type_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Weapon.WeaponType> IWeaponGetter.Type_Property => this.Type_Property;
        #endregion
        #region Speed
        protected Single _Speed;
        protected PropertyForwarder<Weapon, Single> _SpeedForwarder;
        public INotifyingSetItem<Single> Speed_Property => _SpeedForwarder ?? (_SpeedForwarder = new PropertyForwarder<Weapon, Single>(this, (int)Weapon_FieldIndex.Speed));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Speed
        {
            get => this._Speed;
            set => this.SetSpeed(value);
        }
        protected void SetSpeed(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weapon_FieldIndex.Speed];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Speed == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weapon_FieldIndex.Speed] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = Speed;
                _Speed = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weapon_FieldIndex.Speed,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Speed = item;
            }
        }
        protected void UnsetSpeed()
        {
            _hasBeenSetTracker[(int)Weapon_FieldIndex.Speed] = false;
            Speed = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeapon.Speed_Property => this.Speed_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeaponGetter.Speed_Property => this.Speed_Property;
        #endregion
        #region Reach
        protected Single _Reach;
        protected PropertyForwarder<Weapon, Single> _ReachForwarder;
        public INotifyingSetItem<Single> Reach_Property => _ReachForwarder ?? (_ReachForwarder = new PropertyForwarder<Weapon, Single>(this, (int)Weapon_FieldIndex.Reach));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Reach
        {
            get => this._Reach;
            set => this.SetReach(value);
        }
        protected void SetReach(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weapon_FieldIndex.Reach];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Reach == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weapon_FieldIndex.Reach] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = Reach;
                _Reach = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weapon_FieldIndex.Reach,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Reach = item;
            }
        }
        protected void UnsetReach()
        {
            _hasBeenSetTracker[(int)Weapon_FieldIndex.Reach] = false;
            Reach = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeapon.Reach_Property => this.Reach_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeaponGetter.Reach_Property => this.Reach_Property;
        #endregion
        #region Flags
        protected Weapon.WeaponFlag _Flags;
        protected PropertyForwarder<Weapon, Weapon.WeaponFlag> _FlagsForwarder;
        public INotifyingSetItem<Weapon.WeaponFlag> Flags_Property => _FlagsForwarder ?? (_FlagsForwarder = new PropertyForwarder<Weapon, Weapon.WeaponFlag>(this, (int)Weapon_FieldIndex.Flags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Weapon.WeaponFlag Flags
        {
            get => this._Flags;
            set => this.SetFlags(value);
        }
        protected void SetFlags(
            Weapon.WeaponFlag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weapon_FieldIndex.Flags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Flags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weapon_FieldIndex.Flags] = hasBeenSet;
            }
            if (_WeaponWeaponFlag_subscriptions != null)
            {
                var tmp = Flags;
                _Flags = item;
                _WeaponWeaponFlag_subscriptions.FireSubscriptions(
                    index: (int)Weapon_FieldIndex.Flags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Flags = item;
            }
        }
        protected void UnsetFlags()
        {
            _hasBeenSetTracker[(int)Weapon_FieldIndex.Flags] = false;
            Flags = default(Weapon.WeaponFlag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Weapon.WeaponFlag> IWeapon.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Weapon.WeaponFlag> IWeaponGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Value
        protected UInt32 _Value;
        protected PropertyForwarder<Weapon, UInt32> _ValueForwarder;
        public INotifyingSetItem<UInt32> Value_Property => _ValueForwarder ?? (_ValueForwarder = new PropertyForwarder<Weapon, UInt32>(this, (int)Weapon_FieldIndex.Value));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 Value
        {
            get => this._Value;
            set => this.SetValue(value);
        }
        protected void SetValue(
            UInt32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weapon_FieldIndex.Value];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Value == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weapon_FieldIndex.Value] = hasBeenSet;
            }
            if (_UInt32_subscriptions != null)
            {
                var tmp = Value;
                _Value = item;
                _UInt32_subscriptions.FireSubscriptions(
                    index: (int)Weapon_FieldIndex.Value,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Value = item;
            }
        }
        protected void UnsetValue()
        {
            _hasBeenSetTracker[(int)Weapon_FieldIndex.Value] = false;
            Value = default(UInt32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> IWeapon.Value_Property => this.Value_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> IWeaponGetter.Value_Property => this.Value_Property;
        #endregion
        #region Health
        protected UInt32 _Health;
        protected PropertyForwarder<Weapon, UInt32> _HealthForwarder;
        public INotifyingSetItem<UInt32> Health_Property => _HealthForwarder ?? (_HealthForwarder = new PropertyForwarder<Weapon, UInt32>(this, (int)Weapon_FieldIndex.Health));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 Health
        {
            get => this._Health;
            set => this.SetHealth(value);
        }
        protected void SetHealth(
            UInt32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weapon_FieldIndex.Health];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Health == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weapon_FieldIndex.Health] = hasBeenSet;
            }
            if (_UInt32_subscriptions != null)
            {
                var tmp = Health;
                _Health = item;
                _UInt32_subscriptions.FireSubscriptions(
                    index: (int)Weapon_FieldIndex.Health,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Health = item;
            }
        }
        protected void UnsetHealth()
        {
            _hasBeenSetTracker[(int)Weapon_FieldIndex.Health] = false;
            Health = default(UInt32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> IWeapon.Health_Property => this.Health_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> IWeaponGetter.Health_Property => this.Health_Property;
        #endregion
        #region Weight
        protected Single _Weight;
        protected PropertyForwarder<Weapon, Single> _WeightForwarder;
        public INotifyingSetItem<Single> Weight_Property => _WeightForwarder ?? (_WeightForwarder = new PropertyForwarder<Weapon, Single>(this, (int)Weapon_FieldIndex.Weight));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Weight
        {
            get => this._Weight;
            set => this.SetWeight(value);
        }
        protected void SetWeight(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weapon_FieldIndex.Weight];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Weight == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weapon_FieldIndex.Weight] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = Weight;
                _Weight = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weapon_FieldIndex.Weight,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Weight = item;
            }
        }
        protected void UnsetWeight()
        {
            _hasBeenSetTracker[(int)Weapon_FieldIndex.Weight] = false;
            Weight = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeapon.Weight_Property => this.Weight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeaponGetter.Weight_Property => this.Weight_Property;
        #endregion
        #region Damage
        protected UInt16 _Damage;
        protected PropertyForwarder<Weapon, UInt16> _DamageForwarder;
        public INotifyingSetItem<UInt16> Damage_Property => _DamageForwarder ?? (_DamageForwarder = new PropertyForwarder<Weapon, UInt16>(this, (int)Weapon_FieldIndex.Damage));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 Damage
        {
            get => this._Damage;
            set => this.SetDamage(value);
        }
        protected void SetDamage(
            UInt16 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weapon_FieldIndex.Damage];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Damage == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weapon_FieldIndex.Damage] = hasBeenSet;
            }
            if (_UInt16_subscriptions != null)
            {
                var tmp = Damage;
                _Damage = item;
                _UInt16_subscriptions.FireSubscriptions(
                    index: (int)Weapon_FieldIndex.Damage,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Damage = item;
            }
        }
        protected void UnsetDamage()
        {
            _hasBeenSetTracker[(int)Weapon_FieldIndex.Damage] = false;
            Damage = default(UInt16);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt16> IWeapon.Damage_Property => this.Damage_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt16> IWeaponGetter.Damage_Property => this.Damage_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => WeaponCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => WeaponCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => WeaponCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            WeaponCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Weapon>.GetEqualsMask(Weapon rhs) => WeaponCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IWeaponGetter>.GetEqualsMask(IWeaponGetter rhs) => WeaponCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return WeaponCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Weapon_Mask<bool> printMask = null)
        {
            return WeaponCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            WeaponCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Weapon_Mask<bool> GetHasBeenSetMask()
        {
            return WeaponCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Weapon rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Weapon rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (Icon_Property.HasBeenSet != rhs.Icon_Property.HasBeenSet) return false;
            if (Icon_Property.HasBeenSet)
            {
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (!this.Script_Property.Equals(rhs.Script_Property)) return false;
            }
            if (Enchantment_Property.HasBeenSet != rhs.Enchantment_Property.HasBeenSet) return false;
            if (Enchantment_Property.HasBeenSet)
            {
                if (!this.Enchantment_Property.Equals(rhs.Enchantment_Property)) return false;
            }
            if (EnchantmentPoints_Property.HasBeenSet != rhs.EnchantmentPoints_Property.HasBeenSet) return false;
            if (EnchantmentPoints_Property.HasBeenSet)
            {
                if (this.EnchantmentPoints != rhs.EnchantmentPoints) return false;
            }
            if (this.Type != rhs.Type) return false;
            if (!this.Speed.EqualsWithin(rhs.Speed)) return false;
            if (!this.Reach.EqualsWithin(rhs.Reach)) return false;
            if (this.Flags != rhs.Flags) return false;
            if (this.Value != rhs.Value) return false;
            if (this.Health != rhs.Health) return false;
            if (!this.Weight.EqualsWithin(rhs.Weight)) return false;
            if (this.Damage != rhs.Damage) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (Icon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            if (Enchantment_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Enchantment).CombineHashCode(ret);
            }
            if (EnchantmentPoints_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(EnchantmentPoints).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Type).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Speed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Reach).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Value).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Health).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Weight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Damage).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Weapon Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Weapon Create_XML(
            XElement root,
            out Weapon_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Weapon Object, Weapon_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Weapon_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Weapon_ErrorMask()) : default(Func<Weapon_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Weapon Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Weapon Create_XML(
            string path,
            out Weapon_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Weapon Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Weapon Create_XML(
            Stream stream,
            out Weapon_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Weapon, Weapon_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Weapon_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Weapon, Weapon_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Weapon_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Weapon_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Weapon_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Weapon_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out Weapon_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as Weapon_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out Weapon_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out Weapon_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            WeaponCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Weapon Create_XML_Internal(
            XElement root,
            Func<Weapon_ErrorMask> errorMask)
        {
            var ret = new Weapon();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Weapon item,
            XElement root,
            string name,
            Func<Weapon_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Model":
                    var ModeltryGet = LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Weapon_FieldIndex.Model,
                        errorMask: errorMask);
                    if (ModeltryGet.Succeeded)
                    {
                        item.SetModel(item: ModeltryGet.Value);
                    }
                    else
                    {
                        item.UnsetModel();
                    }
                    break;
                case "Icon":
                    var IcontryGet = StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)Weapon_FieldIndex.Icon,
                        errorMask: errorMask);
                    if (IcontryGet.Succeeded)
                    {
                        item.SetIcon(item: IcontryGet.Value);
                    }
                    else
                    {
                        item.UnsetIcon();
                    }
                    break;
                case "Script":
                    item.Script_Property.SetIfSucceededOrDefault(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Weapon_FieldIndex.Script,
                        errorMask: errorMask));
                    break;
                case "Enchantment":
                    item.Enchantment_Property.SetIfSucceededOrDefault(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Weapon_FieldIndex.Enchantment,
                        errorMask: errorMask));
                    break;
                case "EnchantmentPoints":
                    var EnchantmentPointstryGet = UInt16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Weapon_FieldIndex.EnchantmentPoints,
                        errorMask: errorMask);
                    if (EnchantmentPointstryGet.Succeeded)
                    {
                        item.SetEnchantmentPoints(item: EnchantmentPointstryGet.Value);
                    }
                    else
                    {
                        item.UnsetEnchantmentPoints();
                    }
                    break;
                case "Type":
                    var TypetryGet = EnumXmlTranslation<Weapon.WeaponType>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)Weapon_FieldIndex.Type,
                        errorMask: errorMask).Bubble((o) => o.Value);
                    if (TypetryGet.Succeeded)
                    {
                        item.SetType(item: TypetryGet.Value);
                    }
                    else
                    {
                        item.UnsetType();
                    }
                    break;
                case "Speed":
                    var SpeedtryGet = FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Weapon_FieldIndex.Speed,
                        errorMask: errorMask);
                    if (SpeedtryGet.Succeeded)
                    {
                        item.SetSpeed(item: SpeedtryGet.Value);
                    }
                    else
                    {
                        item.UnsetSpeed();
                    }
                    break;
                case "Reach":
                    var ReachtryGet = FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Weapon_FieldIndex.Reach,
                        errorMask: errorMask);
                    if (ReachtryGet.Succeeded)
                    {
                        item.SetReach(item: ReachtryGet.Value);
                    }
                    else
                    {
                        item.UnsetReach();
                    }
                    break;
                case "Flags":
                    var FlagstryGet = EnumXmlTranslation<Weapon.WeaponFlag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)Weapon_FieldIndex.Flags,
                        errorMask: errorMask).Bubble((o) => o.Value);
                    if (FlagstryGet.Succeeded)
                    {
                        item.SetFlags(item: FlagstryGet.Value);
                    }
                    else
                    {
                        item.UnsetFlags();
                    }
                    break;
                case "Value":
                    var ValuetryGet = UInt32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Weapon_FieldIndex.Value,
                        errorMask: errorMask);
                    if (ValuetryGet.Succeeded)
                    {
                        item.SetValue(item: ValuetryGet.Value);
                    }
                    else
                    {
                        item.UnsetValue();
                    }
                    break;
                case "Health":
                    var HealthtryGet = UInt32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Weapon_FieldIndex.Health,
                        errorMask: errorMask);
                    if (HealthtryGet.Succeeded)
                    {
                        item.SetHealth(item: HealthtryGet.Value);
                    }
                    else
                    {
                        item.UnsetHealth();
                    }
                    break;
                case "Weight":
                    var WeighttryGet = FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Weapon_FieldIndex.Weight,
                        errorMask: errorMask);
                    if (WeighttryGet.Succeeded)
                    {
                        item.SetWeight(item: WeighttryGet.Value);
                    }
                    else
                    {
                        item.UnsetWeight();
                    }
                    break;
                case "Damage":
                    var DamagetryGet = UInt16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Weapon_FieldIndex.Damage,
                        errorMask: errorMask);
                    if (DamagetryGet.Succeeded)
                    {
                        item.SetDamage(item: DamagetryGet.Value);
                    }
                    else
                    {
                        item.UnsetDamage();
                    }
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region IPropertySupporter Model
        protected ObjectCentralizationSubscriptions<Model> _Model_subscriptions;
        Model IPropertySupporter<Model>.Get(int index)
        {
            return GetModel(index: index);
        }

        protected Model GetModel(int index)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Model:
                    return Model;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        void IPropertySupporter<Model>.Set(
            int index,
            Model item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetModel(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetModel(
            int index,
            Model item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Model:
                    SetModel(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        bool IPropertySupporter<Model>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Model>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Model>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetModel(
                index: index,
                cmds: cmds);
        }

        protected void UnsetModel(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Model:
                    _hasBeenSetTracker[index] = false;
                    Model = default(Model);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Model>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Model> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Model_subscriptions == null)
            {
                _Model_subscriptions = new ObjectCentralizationSubscriptions<Model>();
            }
            _Model_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Model>.Unsubscribe(
            int index,
            object owner)
        {
            _Model_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Model>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Model IPropertySupporter<Model>.DefaultValue(int index)
        {
            return DefaultValueModel(index: index);
        }

        protected Model DefaultValueModel(int index)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Model:
                    return default(Model);
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        #endregion

        #region IPropertySupporter String
        String IPropertySupporter<String>.Get(int index)
        {
            return GetString(index: index);
        }

        protected override String GetString(int index)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Icon:
                    return Icon;
                default:
                    return base.GetString(index: index);
            }
        }

        void IPropertySupporter<String>.Set(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetString(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected override void SetString(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Icon:
                    SetIcon(item, hasBeenSet, cmds);
                    break;
                default:
                    base.SetString(
                        index: index,
                        item: item,
                        hasBeenSet: hasBeenSet,
                        cmds: cmds);
                    break;
            }
        }

        bool IPropertySupporter<String>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<String>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<String>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetString(
                index: index,
                cmds: cmds);
        }

        protected override void UnsetString(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Icon:
                    _hasBeenSetTracker[index] = false;
                    Icon = default(String);
                    break;
                default:
                    base.UnsetString(
                        index: index,
                        cmds: cmds);
                    break;
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<String> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_String_subscriptions == null)
            {
                _String_subscriptions = new ObjectCentralizationSubscriptions<String>();
            }
            _String_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Unsubscribe(
            int index,
            object owner)
        {
            _String_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<String>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        String IPropertySupporter<String>.DefaultValue(int index)
        {
            return DefaultValueString(index: index);
        }

        protected override String DefaultValueString(int index)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Icon:
                    return default(String);
                default:
                    return base.DefaultValueString(index: index);
            }
        }

        #endregion

        #region IPropertySupporter UInt16
        protected ObjectCentralizationSubscriptions<UInt16> _UInt16_subscriptions;
        UInt16 IPropertySupporter<UInt16>.Get(int index)
        {
            return GetUInt16(index: index);
        }

        protected UInt16 GetUInt16(int index)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.EnchantmentPoints:
                    return EnchantmentPoints;
                case Weapon_FieldIndex.Damage:
                    return Damage;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        void IPropertySupporter<UInt16>.Set(
            int index,
            UInt16 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetUInt16(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetUInt16(
            int index,
            UInt16 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.EnchantmentPoints:
                    SetEnchantmentPoints(item, hasBeenSet, cmds);
                    break;
                case Weapon_FieldIndex.Damage:
                    SetDamage(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        bool IPropertySupporter<UInt16>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<UInt16>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<UInt16>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetUInt16(
                index: index,
                cmds: cmds);
        }

        protected void UnsetUInt16(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.EnchantmentPoints:
                    _hasBeenSetTracker[index] = false;
                    EnchantmentPoints = default(UInt16);
                    break;
                case Weapon_FieldIndex.Damage:
                    _hasBeenSetTracker[index] = false;
                    Damage = default(UInt16);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt16>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<UInt16> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_UInt16_subscriptions == null)
            {
                _UInt16_subscriptions = new ObjectCentralizationSubscriptions<UInt16>();
            }
            _UInt16_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt16>.Unsubscribe(
            int index,
            object owner)
        {
            _UInt16_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<UInt16>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        UInt16 IPropertySupporter<UInt16>.DefaultValue(int index)
        {
            return DefaultValueUInt16(index: index);
        }

        protected UInt16 DefaultValueUInt16(int index)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.EnchantmentPoints:
                case Weapon_FieldIndex.Damage:
                    return default(UInt16);
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Weapon.WeaponType
        protected ObjectCentralizationSubscriptions<Weapon.WeaponType> _WeaponWeaponType_subscriptions;
        Weapon.WeaponType IPropertySupporter<Weapon.WeaponType>.Get(int index)
        {
            return GetWeaponWeaponType(index: index);
        }

        protected Weapon.WeaponType GetWeaponWeaponType(int index)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Type:
                    return Type;
                default:
                    throw new ArgumentException($"Unknown index for field type Weapon.WeaponType: {index}");
            }
        }

        void IPropertySupporter<Weapon.WeaponType>.Set(
            int index,
            Weapon.WeaponType item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetWeaponWeaponType(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetWeaponWeaponType(
            int index,
            Weapon.WeaponType item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Type:
                    SetType(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Weapon.WeaponType: {index}");
            }
        }

        bool IPropertySupporter<Weapon.WeaponType>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Weapon.WeaponType>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Weapon.WeaponType>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetWeaponWeaponType(
                index: index,
                cmds: cmds);
        }

        protected void UnsetWeaponWeaponType(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Type:
                    _hasBeenSetTracker[index] = false;
                    Type = default(Weapon.WeaponType);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Weapon.WeaponType: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Weapon.WeaponType>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Weapon.WeaponType> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_WeaponWeaponType_subscriptions == null)
            {
                _WeaponWeaponType_subscriptions = new ObjectCentralizationSubscriptions<Weapon.WeaponType>();
            }
            _WeaponWeaponType_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Weapon.WeaponType>.Unsubscribe(
            int index,
            object owner)
        {
            _WeaponWeaponType_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Weapon.WeaponType>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Weapon.WeaponType IPropertySupporter<Weapon.WeaponType>.DefaultValue(int index)
        {
            return DefaultValueWeaponWeaponType(index: index);
        }

        protected Weapon.WeaponType DefaultValueWeaponWeaponType(int index)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Type:
                    return default(Weapon.WeaponType);
                default:
                    throw new ArgumentException($"Unknown index for field type Weapon.WeaponType: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Single
        protected ObjectCentralizationSubscriptions<Single> _Single_subscriptions;
        Single IPropertySupporter<Single>.Get(int index)
        {
            return GetSingle(index: index);
        }

        protected Single GetSingle(int index)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Speed:
                    return Speed;
                case Weapon_FieldIndex.Reach:
                    return Reach;
                case Weapon_FieldIndex.Weight:
                    return Weight;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        void IPropertySupporter<Single>.Set(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetSingle(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetSingle(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Speed:
                    SetSpeed(item, hasBeenSet, cmds);
                    break;
                case Weapon_FieldIndex.Reach:
                    SetReach(item, hasBeenSet, cmds);
                    break;
                case Weapon_FieldIndex.Weight:
                    SetWeight(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        bool IPropertySupporter<Single>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Single>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Single>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetSingle(
                index: index,
                cmds: cmds);
        }

        protected void UnsetSingle(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Speed:
                    _hasBeenSetTracker[index] = false;
                    Speed = default(Single);
                    break;
                case Weapon_FieldIndex.Reach:
                    _hasBeenSetTracker[index] = false;
                    Reach = default(Single);
                    break;
                case Weapon_FieldIndex.Weight:
                    _hasBeenSetTracker[index] = false;
                    Weight = default(Single);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Single> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Single_subscriptions == null)
            {
                _Single_subscriptions = new ObjectCentralizationSubscriptions<Single>();
            }
            _Single_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Unsubscribe(
            int index,
            object owner)
        {
            _Single_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Single>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Single IPropertySupporter<Single>.DefaultValue(int index)
        {
            return DefaultValueSingle(index: index);
        }

        protected Single DefaultValueSingle(int index)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Speed:
                case Weapon_FieldIndex.Reach:
                case Weapon_FieldIndex.Weight:
                    return default(Single);
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Weapon.WeaponFlag
        protected ObjectCentralizationSubscriptions<Weapon.WeaponFlag> _WeaponWeaponFlag_subscriptions;
        Weapon.WeaponFlag IPropertySupporter<Weapon.WeaponFlag>.Get(int index)
        {
            return GetWeaponWeaponFlag(index: index);
        }

        protected Weapon.WeaponFlag GetWeaponWeaponFlag(int index)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Unknown index for field type Weapon.WeaponFlag: {index}");
            }
        }

        void IPropertySupporter<Weapon.WeaponFlag>.Set(
            int index,
            Weapon.WeaponFlag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetWeaponWeaponFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetWeaponWeaponFlag(
            int index,
            Weapon.WeaponFlag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Flags:
                    SetFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Weapon.WeaponFlag: {index}");
            }
        }

        bool IPropertySupporter<Weapon.WeaponFlag>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Weapon.WeaponFlag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Weapon.WeaponFlag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetWeaponWeaponFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetWeaponWeaponFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Flags:
                    _hasBeenSetTracker[index] = false;
                    Flags = default(Weapon.WeaponFlag);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Weapon.WeaponFlag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Weapon.WeaponFlag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Weapon.WeaponFlag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_WeaponWeaponFlag_subscriptions == null)
            {
                _WeaponWeaponFlag_subscriptions = new ObjectCentralizationSubscriptions<Weapon.WeaponFlag>();
            }
            _WeaponWeaponFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Weapon.WeaponFlag>.Unsubscribe(
            int index,
            object owner)
        {
            _WeaponWeaponFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Weapon.WeaponFlag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Weapon.WeaponFlag IPropertySupporter<Weapon.WeaponFlag>.DefaultValue(int index)
        {
            return DefaultValueWeaponWeaponFlag(index: index);
        }

        protected Weapon.WeaponFlag DefaultValueWeaponWeaponFlag(int index)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Flags:
                    return default(Weapon.WeaponFlag);
                default:
                    throw new ArgumentException($"Unknown index for field type Weapon.WeaponFlag: {index}");
            }
        }

        #endregion

        #region IPropertySupporter UInt32
        protected ObjectCentralizationSubscriptions<UInt32> _UInt32_subscriptions;
        UInt32 IPropertySupporter<UInt32>.Get(int index)
        {
            return GetUInt32(index: index);
        }

        protected UInt32 GetUInt32(int index)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Value:
                    return Value;
                case Weapon_FieldIndex.Health:
                    return Health;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        void IPropertySupporter<UInt32>.Set(
            int index,
            UInt32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetUInt32(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetUInt32(
            int index,
            UInt32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Value:
                    SetValue(item, hasBeenSet, cmds);
                    break;
                case Weapon_FieldIndex.Health:
                    SetHealth(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        bool IPropertySupporter<UInt32>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<UInt32>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<UInt32>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetUInt32(
                index: index,
                cmds: cmds);
        }

        protected void UnsetUInt32(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Value:
                    _hasBeenSetTracker[index] = false;
                    Value = default(UInt32);
                    break;
                case Weapon_FieldIndex.Health:
                    _hasBeenSetTracker[index] = false;
                    Health = default(UInt32);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt32>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<UInt32> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_UInt32_subscriptions == null)
            {
                _UInt32_subscriptions = new ObjectCentralizationSubscriptions<UInt32>();
            }
            _UInt32_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt32>.Unsubscribe(
            int index,
            object owner)
        {
            _UInt32_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<UInt32>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        UInt32 IPropertySupporter<UInt32>.DefaultValue(int index)
        {
            return DefaultValueUInt32(index: index);
        }

        protected UInt32 DefaultValueUInt32(int index)
        {
            switch ((Weapon_FieldIndex)index)
            {
                case Weapon_FieldIndex.Value:
                case Weapon_FieldIndex.Health:
                    return default(UInt32);
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Weapon_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Script_Property;
            yield return Enchantment_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Weapon Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Weapon Create_Binary(
            MutagenFrame frame,
            out Weapon_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Weapon Object, Weapon_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Weapon_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Weapon_ErrorMask()) : default(Func<Weapon_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Weapon Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Weapon Create_Binary(
            string path,
            out Weapon_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Weapon Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Weapon Create_Binary(
            Stream stream,
            out Weapon_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Weapon_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as Weapon_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out Weapon_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Weapon_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            WeaponCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Weapon Create_Binary_Internal(
            MutagenFrame frame,
            Func<Weapon_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return UtilityTranslation.MajorRecordParse<Weapon, Weapon_ErrorMask, Weapon_FieldIndex>(
                record: new Weapon(),
                frame: frame,
                errorMask: errorMask,
                recType: Weapon_Registration.WEAP_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            Weapon item,
            MutagenFrame frame,
            Func<Weapon_ErrorMask> errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<Weapon_FieldIndex?> Fill_Binary_RecordTypes(
            Weapon item,
            MutagenFrame frame,
            Func<Weapon_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "MODL":
                    {
                        var ModeltryGet = LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Parse(
                            frame: frame.Spawn(snapToFinalPosition: false),
                            fieldIndex: (int)Weapon_FieldIndex.Model,
                            errorMask: errorMask);
                        if (ModeltryGet.Succeeded)
                        {
                            item.SetModel(item: ModeltryGet.Value);
                        }
                        else
                        {
                            item.UnsetModel();
                        }
                    }
                    return TryGet<Weapon_FieldIndex?>.Succeed(Weapon_FieldIndex.Model);
                case "ICON":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var IcontryGet = StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Weapon_FieldIndex.Icon,
                        parseWhole: true,
                        errorMask: errorMask);
                    if (IcontryGet.Succeeded)
                    {
                        item.SetIcon(item: IcontryGet.Value);
                    }
                    else
                    {
                        item.UnsetIcon();
                    }
                    return TryGet<Weapon_FieldIndex?>.Succeed(Weapon_FieldIndex.Icon);
                case "SCRI":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Script_Property.SetIfSucceededOrDefault(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Weapon_FieldIndex.Script,
                        errorMask: errorMask));
                    return TryGet<Weapon_FieldIndex?>.Succeed(Weapon_FieldIndex.Script);
                case "ENAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Enchantment_Property.SetIfSucceededOrDefault(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Weapon_FieldIndex.Enchantment,
                        errorMask: errorMask));
                    return TryGet<Weapon_FieldIndex?>.Succeed(Weapon_FieldIndex.Enchantment);
                case "ANAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var EnchantmentPointstryGet = Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Weapon_FieldIndex.EnchantmentPoints,
                        errorMask: errorMask);
                    if (EnchantmentPointstryGet.Succeeded)
                    {
                        item.SetEnchantmentPoints(item: EnchantmentPointstryGet.Value);
                    }
                    else
                    {
                        item.UnsetEnchantmentPoints();
                    }
                    return TryGet<Weapon_FieldIndex?>.Succeed(Weapon_FieldIndex.EnchantmentPoints);
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        var TypetryGet = Mutagen.Bethesda.Binary.EnumBinaryTranslation<Weapon.WeaponType>.Instance.Parse(
                            frame: dataFrame.SpawnWithLength(4),
                            fieldIndex: (int)Weapon_FieldIndex.Type,
                            errorMask: errorMask);
                        if (TypetryGet.Succeeded)
                        {
                            item.SetType(item: TypetryGet.Value);
                        }
                        else
                        {
                            item.UnsetType();
                        }
                        var SpeedtryGet = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame.Spawn(snapToFinalPosition: false),
                            fieldIndex: (int)Weapon_FieldIndex.Speed,
                            errorMask: errorMask);
                        if (SpeedtryGet.Succeeded)
                        {
                            item.SetSpeed(item: SpeedtryGet.Value);
                        }
                        else
                        {
                            item.UnsetSpeed();
                        }
                        var ReachtryGet = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame.Spawn(snapToFinalPosition: false),
                            fieldIndex: (int)Weapon_FieldIndex.Reach,
                            errorMask: errorMask);
                        if (ReachtryGet.Succeeded)
                        {
                            item.SetReach(item: ReachtryGet.Value);
                        }
                        else
                        {
                            item.UnsetReach();
                        }
                        var FlagstryGet = Mutagen.Bethesda.Binary.EnumBinaryTranslation<Weapon.WeaponFlag>.Instance.Parse(
                            frame: dataFrame.SpawnWithLength(4),
                            fieldIndex: (int)Weapon_FieldIndex.Flags,
                            errorMask: errorMask);
                        if (FlagstryGet.Succeeded)
                        {
                            item.SetFlags(item: FlagstryGet.Value);
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                        var ValuetryGet = Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame.Spawn(snapToFinalPosition: false),
                            fieldIndex: (int)Weapon_FieldIndex.Value,
                            errorMask: errorMask);
                        if (ValuetryGet.Succeeded)
                        {
                            item.SetValue(item: ValuetryGet.Value);
                        }
                        else
                        {
                            item.UnsetValue();
                        }
                        var HealthtryGet = Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame.Spawn(snapToFinalPosition: false),
                            fieldIndex: (int)Weapon_FieldIndex.Health,
                            errorMask: errorMask);
                        if (HealthtryGet.Succeeded)
                        {
                            item.SetHealth(item: HealthtryGet.Value);
                        }
                        else
                        {
                            item.UnsetHealth();
                        }
                        var WeighttryGet = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame.Spawn(snapToFinalPosition: false),
                            fieldIndex: (int)Weapon_FieldIndex.Weight,
                            errorMask: errorMask);
                        if (WeighttryGet.Succeeded)
                        {
                            item.SetWeight(item: WeighttryGet.Value);
                        }
                        else
                        {
                            item.UnsetWeight();
                        }
                        var DamagetryGet = Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                            frame: dataFrame.Spawn(snapToFinalPosition: false),
                            fieldIndex: (int)Weapon_FieldIndex.Damage,
                            errorMask: errorMask);
                        if (DamagetryGet.Succeeded)
                        {
                            item.SetDamage(item: DamagetryGet.Value);
                        }
                        else
                        {
                            item.UnsetDamage();
                        }
                    }
                    return TryGet<Weapon_FieldIndex?>.Succeed(Weapon_FieldIndex.Damage);
                default:
                    return NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => WeaponCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public Weapon Copy(
            Weapon_CopyMask copyMask = null,
            IWeaponGetter def = null)
        {
            return Weapon.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Weapon Copy(
            IWeapon item,
            Weapon_CopyMask copyMask = null,
            IWeaponGetter def = null)
        {
            Weapon ret;
            if (item.GetType().Equals(typeof(Weapon)))
            {
                ret = new Weapon();
            }
            else
            {
                ret = (Weapon)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Weapon Copy_ToLoqui(
            IWeaponGetter item,
            Weapon_CopyMask copyMask = null,
            IWeaponGetter def = null)
        {
            Weapon ret;
            if (item.GetType().Equals(typeof(Weapon)))
            {
                ret = new Weapon() as Weapon;
            }
            else
            {
                ret = (Weapon)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IWeaponGetter rhs,
            Weapon_CopyMask copyMask,
            IWeaponGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IWeaponGetter rhs,
            out Weapon_ErrorMask errorMask,
            Weapon_CopyMask copyMask = null,
            IWeaponGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            Weapon_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Weapon_ErrorMask();
                }
                return retErrorMask;
            };
            WeaponCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Model:
                    this.SetModel(
                        (Model)obj,
                        cmds: cmds);
                    break;
                case Weapon_FieldIndex.Icon:
                    this.SetIcon(
                        (String)obj,
                        cmds: cmds);
                    break;
                case Weapon_FieldIndex.Script:
                    this.Script_Property.Set(
                        (FormIDSetLink<Script>)obj,
                        cmds);
                    break;
                case Weapon_FieldIndex.Enchantment:
                    this.Enchantment_Property.Set(
                        (FormIDSetLink<Enchantment>)obj,
                        cmds);
                    break;
                case Weapon_FieldIndex.EnchantmentPoints:
                    this.SetEnchantmentPoints(
                        (UInt16)obj,
                        cmds: cmds);
                    break;
                case Weapon_FieldIndex.Type:
                    this.SetType(
                        (Weapon.WeaponType)obj,
                        cmds: cmds);
                    break;
                case Weapon_FieldIndex.Speed:
                    this.SetSpeed(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weapon_FieldIndex.Reach:
                    this.SetReach(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weapon_FieldIndex.Flags:
                    this.SetFlags(
                        (Weapon.WeaponFlag)obj,
                        cmds: cmds);
                    break;
                case Weapon_FieldIndex.Value:
                    this.SetValue(
                        (UInt32)obj,
                        cmds: cmds);
                    break;
                case Weapon_FieldIndex.Health:
                    this.SetHealth(
                        (UInt32)obj,
                        cmds: cmds);
                    break;
                case Weapon_FieldIndex.Weight:
                    this.SetWeight(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weapon_FieldIndex.Damage:
                    this.SetDamage(
                        (UInt16)obj,
                        cmds: cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            WeaponCommon.Clear(this, cmds);
        }


        public new static Weapon Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Weapon();
            foreach (var pair in fields)
            {
                CopyInInternal_Weapon(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Weapon(Weapon obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Weapon_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Weapon_FieldIndex.Model:
                    obj.SetModel(
                        (Model)pair.Value,
                        cmds: null);
                    break;
                case Weapon_FieldIndex.Icon:
                    obj.SetIcon(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case Weapon_FieldIndex.Script:
                    obj.Script_Property.Set(
                        (FormIDSetLink<Script>)pair.Value,
                        null);
                    break;
                case Weapon_FieldIndex.Enchantment:
                    obj.Enchantment_Property.Set(
                        (FormIDSetLink<Enchantment>)pair.Value,
                        null);
                    break;
                case Weapon_FieldIndex.EnchantmentPoints:
                    obj.SetEnchantmentPoints(
                        (UInt16)pair.Value,
                        cmds: null);
                    break;
                case Weapon_FieldIndex.Type:
                    obj.SetType(
                        (Weapon.WeaponType)pair.Value,
                        cmds: null);
                    break;
                case Weapon_FieldIndex.Speed:
                    obj.SetSpeed(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weapon_FieldIndex.Reach:
                    obj.SetReach(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weapon_FieldIndex.Flags:
                    obj.SetFlags(
                        (Weapon.WeaponFlag)pair.Value,
                        cmds: null);
                    break;
                case Weapon_FieldIndex.Value:
                    obj.SetValue(
                        (UInt32)pair.Value,
                        cmds: null);
                    break;
                case Weapon_FieldIndex.Health:
                    obj.SetHealth(
                        (UInt32)pair.Value,
                        cmds: null);
                    break;
                case Weapon_FieldIndex.Weight:
                    obj.SetWeight(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weapon_FieldIndex.Damage:
                    obj.SetDamage(
                        (UInt16)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Weapon obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IWeapon : IWeaponGetter, INamedMajorRecord, ILoquiClass<IWeapon, IWeaponGetter>, ILoquiClass<Weapon, IWeaponGetter>
    {
        new Model Model { get; set; }
        new INotifyingSetItem<Model> Model_Property { get; }

        new String Icon { get; set; }
        new INotifyingSetItem<String> Icon_Property { get; }

        new Script Script { get; set; }
        new Enchantment Enchantment { get; set; }
        new UInt16 EnchantmentPoints { get; set; }
        new INotifyingSetItem<UInt16> EnchantmentPoints_Property { get; }

        new Weapon.WeaponType Type { get; set; }
        new INotifyingItem<Weapon.WeaponType> Type_Property { get; }

        new Single Speed { get; set; }
        new INotifyingItem<Single> Speed_Property { get; }

        new Single Reach { get; set; }
        new INotifyingItem<Single> Reach_Property { get; }

        new Weapon.WeaponFlag Flags { get; set; }
        new INotifyingItem<Weapon.WeaponFlag> Flags_Property { get; }

        new UInt32 Value { get; set; }
        new INotifyingItem<UInt32> Value_Property { get; }

        new UInt32 Health { get; set; }
        new INotifyingItem<UInt32> Health_Property { get; }

        new Single Weight { get; set; }
        new INotifyingItem<Single> Weight_Property { get; }

        new UInt16 Damage { get; set; }
        new INotifyingItem<UInt16> Damage_Property { get; }

    }

    public partial interface IWeaponGetter : INamedMajorRecordGetter
    {
        #region Model
        Model Model { get; }
        INotifyingSetItemGetter<Model> Model_Property { get; }

        #endregion
        #region Icon
        String Icon { get; }
        INotifyingSetItemGetter<String> Icon_Property { get; }

        #endregion
        #region Script
        Script Script { get; }
        FormIDSetLink<Script> Script_Property { get; }

        #endregion
        #region Enchantment
        Enchantment Enchantment { get; }
        FormIDSetLink<Enchantment> Enchantment_Property { get; }

        #endregion
        #region EnchantmentPoints
        UInt16 EnchantmentPoints { get; }
        INotifyingSetItemGetter<UInt16> EnchantmentPoints_Property { get; }

        #endregion
        #region Type
        Weapon.WeaponType Type { get; }
        INotifyingItemGetter<Weapon.WeaponType> Type_Property { get; }

        #endregion
        #region Speed
        Single Speed { get; }
        INotifyingItemGetter<Single> Speed_Property { get; }

        #endregion
        #region Reach
        Single Reach { get; }
        INotifyingItemGetter<Single> Reach_Property { get; }

        #endregion
        #region Flags
        Weapon.WeaponFlag Flags { get; }
        INotifyingItemGetter<Weapon.WeaponFlag> Flags_Property { get; }

        #endregion
        #region Value
        UInt32 Value { get; }
        INotifyingItemGetter<UInt32> Value_Property { get; }

        #endregion
        #region Health
        UInt32 Health { get; }
        INotifyingItemGetter<UInt32> Health_Property { get; }

        #endregion
        #region Weight
        Single Weight { get; }
        INotifyingItemGetter<Single> Weight_Property { get; }

        #endregion
        #region Damage
        UInt16 Damage { get; }
        INotifyingItemGetter<UInt16> Damage_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Weapon_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Model = 6,
        Icon = 7,
        Script = 8,
        Enchantment = 9,
        EnchantmentPoints = 10,
        Type = 11,
        Speed = 12,
        Reach = 13,
        Flags = 14,
        Value = 15,
        Health = 16,
        Weight = 17,
        Damage = 18,
    }
    #endregion

    #region Registration
    public class Weapon_Registration : ILoquiRegistration
    {
        public static readonly Weapon_Registration Instance = new Weapon_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 82,
            version: 0);

        public const string GUID = "7251519c-a94a-44f1-a46c-c9a659b6e36c";

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 19;

        public static readonly Type MaskType = typeof(Weapon_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Weapon_ErrorMask);

        public static readonly Type ClassType = typeof(Weapon);

        public static readonly Type GetterType = typeof(IWeaponGetter);

        public static readonly Type SetterType = typeof(IWeapon);

        public static readonly Type CommonType = typeof(WeaponCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Weapon";

        public const string Name = "Weapon";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)Weapon_FieldIndex.Model;
                case "ICON":
                    return (ushort)Weapon_FieldIndex.Icon;
                case "SCRIPT":
                    return (ushort)Weapon_FieldIndex.Script;
                case "ENCHANTMENT":
                    return (ushort)Weapon_FieldIndex.Enchantment;
                case "ENCHANTMENTPOINTS":
                    return (ushort)Weapon_FieldIndex.EnchantmentPoints;
                case "TYPE":
                    return (ushort)Weapon_FieldIndex.Type;
                case "SPEED":
                    return (ushort)Weapon_FieldIndex.Speed;
                case "REACH":
                    return (ushort)Weapon_FieldIndex.Reach;
                case "FLAGS":
                    return (ushort)Weapon_FieldIndex.Flags;
                case "VALUE":
                    return (ushort)Weapon_FieldIndex.Value;
                case "HEALTH":
                    return (ushort)Weapon_FieldIndex.Health;
                case "WEIGHT":
                    return (ushort)Weapon_FieldIndex.Weight;
                case "DAMAGE":
                    return (ushort)Weapon_FieldIndex.Damage;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Model:
                case Weapon_FieldIndex.Icon:
                case Weapon_FieldIndex.Script:
                case Weapon_FieldIndex.Enchantment:
                case Weapon_FieldIndex.EnchantmentPoints:
                case Weapon_FieldIndex.Type:
                case Weapon_FieldIndex.Speed:
                case Weapon_FieldIndex.Reach:
                case Weapon_FieldIndex.Flags:
                case Weapon_FieldIndex.Value:
                case Weapon_FieldIndex.Health:
                case Weapon_FieldIndex.Weight:
                case Weapon_FieldIndex.Damage:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Model:
                    return true;
                case Weapon_FieldIndex.Icon:
                case Weapon_FieldIndex.Script:
                case Weapon_FieldIndex.Enchantment:
                case Weapon_FieldIndex.EnchantmentPoints:
                case Weapon_FieldIndex.Type:
                case Weapon_FieldIndex.Speed:
                case Weapon_FieldIndex.Reach:
                case Weapon_FieldIndex.Flags:
                case Weapon_FieldIndex.Value:
                case Weapon_FieldIndex.Health:
                case Weapon_FieldIndex.Weight:
                case Weapon_FieldIndex.Damage:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Model:
                case Weapon_FieldIndex.Icon:
                case Weapon_FieldIndex.Script:
                case Weapon_FieldIndex.Enchantment:
                case Weapon_FieldIndex.EnchantmentPoints:
                case Weapon_FieldIndex.Type:
                case Weapon_FieldIndex.Speed:
                case Weapon_FieldIndex.Reach:
                case Weapon_FieldIndex.Flags:
                case Weapon_FieldIndex.Value:
                case Weapon_FieldIndex.Health:
                case Weapon_FieldIndex.Weight:
                case Weapon_FieldIndex.Damage:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Model:
                    return "Model";
                case Weapon_FieldIndex.Icon:
                    return "Icon";
                case Weapon_FieldIndex.Script:
                    return "Script";
                case Weapon_FieldIndex.Enchantment:
                    return "Enchantment";
                case Weapon_FieldIndex.EnchantmentPoints:
                    return "EnchantmentPoints";
                case Weapon_FieldIndex.Type:
                    return "Type";
                case Weapon_FieldIndex.Speed:
                    return "Speed";
                case Weapon_FieldIndex.Reach:
                    return "Reach";
                case Weapon_FieldIndex.Flags:
                    return "Flags";
                case Weapon_FieldIndex.Value:
                    return "Value";
                case Weapon_FieldIndex.Health:
                    return "Health";
                case Weapon_FieldIndex.Weight:
                    return "Weight";
                case Weapon_FieldIndex.Damage:
                    return "Damage";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Model:
                case Weapon_FieldIndex.Icon:
                case Weapon_FieldIndex.Script:
                case Weapon_FieldIndex.Enchantment:
                case Weapon_FieldIndex.EnchantmentPoints:
                case Weapon_FieldIndex.Type:
                case Weapon_FieldIndex.Speed:
                case Weapon_FieldIndex.Reach:
                case Weapon_FieldIndex.Flags:
                case Weapon_FieldIndex.Value:
                case Weapon_FieldIndex.Health:
                case Weapon_FieldIndex.Weight:
                case Weapon_FieldIndex.Damage:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Model:
                case Weapon_FieldIndex.Icon:
                case Weapon_FieldIndex.Script:
                case Weapon_FieldIndex.Enchantment:
                case Weapon_FieldIndex.EnchantmentPoints:
                case Weapon_FieldIndex.Type:
                case Weapon_FieldIndex.Speed:
                case Weapon_FieldIndex.Reach:
                case Weapon_FieldIndex.Flags:
                case Weapon_FieldIndex.Value:
                case Weapon_FieldIndex.Health:
                case Weapon_FieldIndex.Weight:
                case Weapon_FieldIndex.Damage:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Model:
                    return typeof(Model);
                case Weapon_FieldIndex.Icon:
                    return typeof(String);
                case Weapon_FieldIndex.Script:
                    return typeof(FormIDSetLink<Script>);
                case Weapon_FieldIndex.Enchantment:
                    return typeof(FormIDSetLink<Enchantment>);
                case Weapon_FieldIndex.EnchantmentPoints:
                    return typeof(UInt16);
                case Weapon_FieldIndex.Type:
                    return typeof(Weapon.WeaponType);
                case Weapon_FieldIndex.Speed:
                    return typeof(Single);
                case Weapon_FieldIndex.Reach:
                    return typeof(Single);
                case Weapon_FieldIndex.Flags:
                    return typeof(Weapon.WeaponFlag);
                case Weapon_FieldIndex.Value:
                    return typeof(UInt32);
                case Weapon_FieldIndex.Health:
                    return typeof(UInt32);
                case Weapon_FieldIndex.Weight:
                    return typeof(Single);
                case Weapon_FieldIndex.Damage:
                    return typeof(UInt16);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType WEAP_HEADER = new RecordType("WEAP");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = WEAP_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class WeaponCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IWeapon item,
            IWeaponGetter rhs,
            IWeaponGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            Weapon_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Model_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new Model_ErrorMask();
                                            baseMask.SetNthMask((int)Weapon_FieldIndex.Model, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Weapon_FieldIndex.Model, ex);
                }
            }
            if (copyMask?.Icon ?? true)
            {
                try
                {
                    item.Icon_Property.SetToWithDefault(
                        rhs: rhs.Icon_Property,
                        def: def?.Icon_Property);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Weapon_FieldIndex.Icon, ex);
                }
            }
            if (copyMask?.Script ?? true)
            {
                try
                {
                    item.Script_Property.SetToWithDefault(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Weapon_FieldIndex.Script, ex);
                }
            }
            if (copyMask?.Enchantment ?? true)
            {
                try
                {
                    item.Enchantment_Property.SetToWithDefault(
                        rhs: rhs.Enchantment_Property,
                        def: def?.Enchantment_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Weapon_FieldIndex.Enchantment, ex);
                }
            }
            if (copyMask?.EnchantmentPoints ?? true)
            {
                try
                {
                    item.EnchantmentPoints_Property.SetToWithDefault(
                        rhs: rhs.EnchantmentPoints_Property,
                        def: def?.EnchantmentPoints_Property);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Weapon_FieldIndex.EnchantmentPoints, ex);
                }
            }
            if (copyMask?.Type ?? true)
            {
                try
                {
                    item.Type_Property.Set(
                        value: rhs.Type,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Weapon_FieldIndex.Type, ex);
                }
            }
            if (copyMask?.Speed ?? true)
            {
                try
                {
                    item.Speed_Property.Set(
                        value: rhs.Speed,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Weapon_FieldIndex.Speed, ex);
                }
            }
            if (copyMask?.Reach ?? true)
            {
                try
                {
                    item.Reach_Property.Set(
                        value: rhs.Reach,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Weapon_FieldIndex.Reach, ex);
                }
            }
            if (copyMask?.Flags ?? true)
            {
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Weapon_FieldIndex.Flags, ex);
                }
            }
            if (copyMask?.Value ?? true)
            {
                try
                {
                    item.Value_Property.Set(
                        value: rhs.Value,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Weapon_FieldIndex.Value, ex);
                }
            }
            if (copyMask?.Health ?? true)
            {
                try
                {
                    item.Health_Property.Set(
                        value: rhs.Health,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Weapon_FieldIndex.Health, ex);
                }
            }
            if (copyMask?.Weight ?? true)
            {
                try
                {
                    item.Weight_Property.Set(
                        value: rhs.Weight,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Weapon_FieldIndex.Weight, ex);
                }
            }
            if (copyMask?.Damage ?? true)
            {
                try
                {
                    item.Damage_Property.Set(
                        value: rhs.Damage,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Weapon_FieldIndex.Damage, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IWeapon obj,
            NotifyingFireParameters cmds = null)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Type:
                case Weapon_FieldIndex.Speed:
                case Weapon_FieldIndex.Reach:
                case Weapon_FieldIndex.Flags:
                case Weapon_FieldIndex.Value:
                case Weapon_FieldIndex.Health:
                case Weapon_FieldIndex.Weight:
                case Weapon_FieldIndex.Damage:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Weapon_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                case Weapon_FieldIndex.Icon:
                    obj.Icon_Property.HasBeenSet = on;
                    break;
                case Weapon_FieldIndex.Script:
                    obj.Script_Property.HasBeenSet = on;
                    break;
                case Weapon_FieldIndex.Enchantment:
                    obj.Enchantment_Property.HasBeenSet = on;
                    break;
                case Weapon_FieldIndex.EnchantmentPoints:
                    obj.EnchantmentPoints_Property.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IWeapon obj,
            NotifyingUnsetParameters cmds = null)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case Weapon_FieldIndex.Icon:
                    obj.Icon_Property.Unset(cmds);
                    break;
                case Weapon_FieldIndex.Script:
                    obj.Script_Property.Unset(cmds);
                    break;
                case Weapon_FieldIndex.Enchantment:
                    obj.Enchantment_Property.Unset(cmds);
                    break;
                case Weapon_FieldIndex.EnchantmentPoints:
                    obj.EnchantmentPoints_Property.Unset(cmds);
                    break;
                case Weapon_FieldIndex.Type:
                    obj.Type = default(Weapon.WeaponType);
                    break;
                case Weapon_FieldIndex.Speed:
                    obj.Speed = default(Single);
                    break;
                case Weapon_FieldIndex.Reach:
                    obj.Reach = default(Single);
                    break;
                case Weapon_FieldIndex.Flags:
                    obj.Flags = default(Weapon.WeaponFlag);
                    break;
                case Weapon_FieldIndex.Value:
                    obj.Value = default(UInt32);
                    break;
                case Weapon_FieldIndex.Health:
                    obj.Health = default(UInt32);
                    break;
                case Weapon_FieldIndex.Weight:
                    obj.Weight = default(Single);
                    break;
                case Weapon_FieldIndex.Damage:
                    obj.Damage = default(UInt16);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IWeapon obj)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Type:
                case Weapon_FieldIndex.Speed:
                case Weapon_FieldIndex.Reach:
                case Weapon_FieldIndex.Flags:
                case Weapon_FieldIndex.Value:
                case Weapon_FieldIndex.Health:
                case Weapon_FieldIndex.Weight:
                case Weapon_FieldIndex.Damage:
                    return true;
                case Weapon_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                case Weapon_FieldIndex.Icon:
                    return obj.Icon_Property.HasBeenSet;
                case Weapon_FieldIndex.Script:
                    return obj.Script_Property.HasBeenSet;
                case Weapon_FieldIndex.Enchantment:
                    return obj.Enchantment_Property.HasBeenSet;
                case Weapon_FieldIndex.EnchantmentPoints:
                    return obj.EnchantmentPoints_Property.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IWeaponGetter obj)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Model:
                    return obj.Model;
                case Weapon_FieldIndex.Icon:
                    return obj.Icon;
                case Weapon_FieldIndex.Script:
                    return obj.Script;
                case Weapon_FieldIndex.Enchantment:
                    return obj.Enchantment;
                case Weapon_FieldIndex.EnchantmentPoints:
                    return obj.EnchantmentPoints;
                case Weapon_FieldIndex.Type:
                    return obj.Type;
                case Weapon_FieldIndex.Speed:
                    return obj.Speed;
                case Weapon_FieldIndex.Reach:
                    return obj.Reach;
                case Weapon_FieldIndex.Flags:
                    return obj.Flags;
                case Weapon_FieldIndex.Value:
                    return obj.Value;
                case Weapon_FieldIndex.Health:
                    return obj.Health;
                case Weapon_FieldIndex.Weight:
                    return obj.Weight;
                case Weapon_FieldIndex.Damage:
                    return obj.Damage;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IWeapon item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.Icon_Property.Unset(cmds.ToUnsetParams());
            item.Script_Property.Unset(cmds.ToUnsetParams());
            item.Enchantment_Property.Unset(cmds.ToUnsetParams());
            item.EnchantmentPoints_Property.Unset(cmds.ToUnsetParams());
            item.Type = default(Weapon.WeaponType);
            item.Speed = default(Single);
            item.Reach = default(Single);
            item.Flags = default(Weapon.WeaponFlag);
            item.Value = default(UInt32);
            item.Health = default(UInt32);
            item.Weight = default(Single);
            item.Damage = default(UInt16);
        }

        public static Weapon_Mask<bool> GetEqualsMask(
            this IWeaponGetter item,
            IWeaponGetter rhs)
        {
            var ret = new Weapon_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IWeaponGetter item,
            IWeaponGetter rhs,
            Weapon_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Icon = item.Icon_Property.Equals(rhs.Icon_Property, (l, r) => object.Equals(l, r));
            ret.Script = item.Script_Property.Equals(rhs.Script_Property, (l, r) => l == r);
            ret.Enchantment = item.Enchantment_Property.Equals(rhs.Enchantment_Property, (l, r) => l == r);
            ret.EnchantmentPoints = item.EnchantmentPoints_Property.Equals(rhs.EnchantmentPoints_Property, (l, r) => l == r);
            ret.Type = item.Type == rhs.Type;
            ret.Speed = item.Speed == rhs.Speed;
            ret.Reach = item.Reach == rhs.Reach;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Value = item.Value == rhs.Value;
            ret.Health = item.Health == rhs.Health;
            ret.Weight = item.Weight == rhs.Weight;
            ret.Damage = item.Damage == rhs.Damage;
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IWeaponGetter item,
            string name = null,
            Weapon_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IWeaponGetter item,
            FileGeneration fg,
            string name = null,
            Weapon_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Weapon)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Weapon)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {item.Script_Property}");
                }
                if (printMask?.Enchantment ?? true)
                {
                    fg.AppendLine($"Enchantment => {item.Enchantment_Property}");
                }
                if (printMask?.EnchantmentPoints ?? true)
                {
                    fg.AppendLine($"EnchantmentPoints => {item.EnchantmentPoints}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {item.Type}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {item.Speed}");
                }
                if (printMask?.Reach ?? true)
                {
                    fg.AppendLine($"Reach => {item.Reach}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {item.Value}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {item.Health}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {item.Weight}");
                }
                if (printMask?.Damage ?? true)
                {
                    fg.AppendLine($"Damage => {item.Damage}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IWeaponGetter item,
            Weapon_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_Property.HasBeenSet) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Enchantment.HasValue && checkMask.Enchantment.Value != item.Enchantment_Property.HasBeenSet) return false;
            if (checkMask.EnchantmentPoints.HasValue && checkMask.EnchantmentPoints.Value != item.EnchantmentPoints_Property.HasBeenSet) return false;
            return true;
        }

        public static Weapon_Mask<bool> GetHasBeenSetMask(IWeaponGetter item)
        {
            var ret = new Weapon_Mask<bool>();
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model));
            ret.Icon = item.Icon_Property.HasBeenSet;
            ret.Script = item.Script_Property.HasBeenSet;
            ret.Enchantment = item.Enchantment_Property.HasBeenSet;
            ret.EnchantmentPoints = item.EnchantmentPoints_Property.HasBeenSet;
            ret.Type = true;
            ret.Speed = true;
            ret.Reach = true;
            ret.Flags = true;
            ret.Value = true;
            ret.Health = true;
            ret.Weight = true;
            ret.Damage = true;
            return ret;
        }

        public static Weapon_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Weapon_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (Weapon_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (Weapon_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (Weapon_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (Weapon_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (Weapon_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (Weapon_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Weapon_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Weapon_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Weapon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Weapon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Weapon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Weapon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Weapon_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IWeaponGetter item,
            bool doMasks,
            out Weapon_ErrorMask errorMask,
            string name = null)
        {
            Weapon_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Weapon_ErrorMask()) : default(Func<Weapon_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XElement node,
            IWeaponGetter item,
            Func<Weapon_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Weapon");
                node.Add(elem);
                if (name != null)
                {
                    elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Weapon");
                }
                if (item.Model_Property.HasBeenSet)
                {
                    LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Write(
                        node: elem,
                        item: item.Model_Property,
                        name: nameof(item.Model),
                        fieldIndex: (int)Weapon_FieldIndex.Model,
                        errorMask: errorMask);
                }
                if (item.Icon_Property.HasBeenSet)
                {
                    StringXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.Icon),
                        item: item.Icon_Property,
                        fieldIndex: (int)Weapon_FieldIndex.Icon,
                        errorMask: errorMask);
                }
                if (item.Script_Property.HasBeenSet)
                {
                    FormIDXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.Script),
                        item: item.Script?.FormID,
                        fieldIndex: (int)Weapon_FieldIndex.Script,
                        errorMask: errorMask);
                }
                if (item.Enchantment_Property.HasBeenSet)
                {
                    FormIDXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.Enchantment),
                        item: item.Enchantment?.FormID,
                        fieldIndex: (int)Weapon_FieldIndex.Enchantment,
                        errorMask: errorMask);
                }
                if (item.EnchantmentPoints_Property.HasBeenSet)
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.EnchantmentPoints),
                        item: item.EnchantmentPoints_Property,
                        fieldIndex: (int)Weapon_FieldIndex.EnchantmentPoints,
                        errorMask: errorMask);
                }
                EnumXmlTranslation<Weapon.WeaponType>.Instance.Write(
                    node: elem,
                    name: nameof(item.Type),
                    item: item.Type_Property,
                    fieldIndex: (int)Weapon_FieldIndex.Type,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Speed),
                    item: item.Speed_Property,
                    fieldIndex: (int)Weapon_FieldIndex.Speed,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Reach),
                    item: item.Reach_Property,
                    fieldIndex: (int)Weapon_FieldIndex.Reach,
                    errorMask: errorMask);
                EnumXmlTranslation<Weapon.WeaponFlag>.Instance.Write(
                    node: elem,
                    name: nameof(item.Flags),
                    item: item.Flags_Property,
                    fieldIndex: (int)Weapon_FieldIndex.Flags,
                    errorMask: errorMask);
                UInt32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Value),
                    item: item.Value_Property,
                    fieldIndex: (int)Weapon_FieldIndex.Value,
                    errorMask: errorMask);
                UInt32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Health),
                    item: item.Health_Property,
                    fieldIndex: (int)Weapon_FieldIndex.Health,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Weight),
                    item: item.Weight_Property,
                    fieldIndex: (int)Weapon_FieldIndex.Weight,
                    errorMask: errorMask);
                UInt16XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Damage),
                    item: item.Damage_Property,
                    fieldIndex: (int)Weapon_FieldIndex.Damage,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Weapon item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Weapon_ErrorMask errorMask)
        {
            Weapon_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Weapon_ErrorMask()) : default(Func<Weapon_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            Weapon item,
            RecordTypeConverter recordTypeConverter,
            Func<Weapon_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Weapon_Registration.WEAP_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Weapon item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Weapon_ErrorMask> errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                fieldIndex: (int)Weapon_FieldIndex.Model,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Icon_Property,
                fieldIndex: (int)Weapon_FieldIndex.Icon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Weapon_Registration.ICON_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Script_Property,
                fieldIndex: (int)Weapon_FieldIndex.Script,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Weapon_Registration.SCRI_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Enchantment_Property,
                fieldIndex: (int)Weapon_FieldIndex.Enchantment,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Weapon_Registration.ENAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EnchantmentPoints_Property,
                fieldIndex: (int)Weapon_FieldIndex.EnchantmentPoints,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Weapon_Registration.ANAM_HEADER),
                nullable: false);
            using (HeaderExport.ExportSubRecordHeader(writer, Weapon_Registration.DATA_HEADER))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Weapon.WeaponType>.Instance.Write(
                    writer,
                    item.Type_Property,
                    length: 4,
                    fieldIndex: (int)Weapon_FieldIndex.Type,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Speed_Property,
                    fieldIndex: (int)Weapon_FieldIndex.Speed,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Reach_Property,
                    fieldIndex: (int)Weapon_FieldIndex.Reach,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Weapon.WeaponFlag>.Instance.Write(
                    writer,
                    item.Flags_Property,
                    length: 4,
                    fieldIndex: (int)Weapon_FieldIndex.Flags,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Value_Property,
                    fieldIndex: (int)Weapon_FieldIndex.Value,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Health_Property,
                    fieldIndex: (int)Weapon_FieldIndex.Health,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Weight_Property,
                    fieldIndex: (int)Weapon_FieldIndex.Weight,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Damage_Property,
                    fieldIndex: (int)Weapon_FieldIndex.Damage,
                    errorMask: errorMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Weapon_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<Weapon_Mask<T>>
    {
        #region Ctors
        public Weapon_Mask()
        {
        }

        public Weapon_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Icon = initialValue;
            this.Script = initialValue;
            this.Enchantment = initialValue;
            this.EnchantmentPoints = initialValue;
            this.Type = initialValue;
            this.Speed = initialValue;
            this.Reach = initialValue;
            this.Flags = initialValue;
            this.Value = initialValue;
            this.Health = initialValue;
            this.Weight = initialValue;
            this.Damage = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Icon;
        public T Script;
        public T Enchantment;
        public T EnchantmentPoints;
        public T Type;
        public T Speed;
        public T Reach;
        public T Flags;
        public T Value;
        public T Health;
        public T Weight;
        public T Damage;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Weapon_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Weapon_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Enchantment, rhs.Enchantment)) return false;
            if (!object.Equals(this.EnchantmentPoints, rhs.EnchantmentPoints)) return false;
            if (!object.Equals(this.Type, rhs.Type)) return false;
            if (!object.Equals(this.Speed, rhs.Speed)) return false;
            if (!object.Equals(this.Reach, rhs.Reach)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Value, rhs.Value)) return false;
            if (!object.Equals(this.Health, rhs.Health)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            if (!object.Equals(this.Damage, rhs.Damage)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Enchantment?.GetHashCode());
            ret = ret.CombineHashCode(this.EnchantmentPoints?.GetHashCode());
            ret = ret.CombineHashCode(this.Type?.GetHashCode());
            ret = ret.CombineHashCode(this.Speed?.GetHashCode());
            ret = ret.CombineHashCode(this.Reach?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Value?.GetHashCode());
            ret = ret.CombineHashCode(this.Health?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(this.Damage?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Icon)) return false;
            if (!eval(this.Script)) return false;
            if (!eval(this.Enchantment)) return false;
            if (!eval(this.EnchantmentPoints)) return false;
            if (!eval(this.Type)) return false;
            if (!eval(this.Speed)) return false;
            if (!eval(this.Reach)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Value)) return false;
            if (!eval(this.Health)) return false;
            if (!eval(this.Weight)) return false;
            if (!eval(this.Damage)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Weapon_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Weapon_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Weapon_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Icon = eval(this.Icon);
            obj.Script = eval(this.Script);
            obj.Enchantment = eval(this.Enchantment);
            obj.EnchantmentPoints = eval(this.EnchantmentPoints);
            obj.Type = eval(this.Type);
            obj.Speed = eval(this.Speed);
            obj.Reach = eval(this.Reach);
            obj.Flags = eval(this.Flags);
            obj.Value = eval(this.Value);
            obj.Health = eval(this.Health);
            obj.Weight = eval(this.Weight);
            obj.Damage = eval(this.Damage);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Weapon_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Weapon_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Weapon_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Enchantment ?? true)
                {
                    fg.AppendLine($"Enchantment => {Enchantment}");
                }
                if (printMask?.EnchantmentPoints ?? true)
                {
                    fg.AppendLine($"EnchantmentPoints => {EnchantmentPoints}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {Type}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {Speed}");
                }
                if (printMask?.Reach ?? true)
                {
                    fg.AppendLine($"Reach => {Reach}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {Value}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {Health}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
                if (printMask?.Damage ?? true)
                {
                    fg.AppendLine($"Damage => {Damage}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Weapon_ErrorMask : NamedMajorRecord_ErrorMask, IErrorMask<Weapon_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Icon;
        public Exception Script;
        public Exception Enchantment;
        public Exception EnchantmentPoints;
        public Exception Type;
        public Exception Speed;
        public Exception Reach;
        public Exception Flags;
        public Exception Value;
        public Exception Health;
        public Exception Weight;
        public Exception Damage;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Model:
                    return Model;
                case Weapon_FieldIndex.Icon:
                    return Icon;
                case Weapon_FieldIndex.Script:
                    return Script;
                case Weapon_FieldIndex.Enchantment:
                    return Enchantment;
                case Weapon_FieldIndex.EnchantmentPoints:
                    return EnchantmentPoints;
                case Weapon_FieldIndex.Type:
                    return Type;
                case Weapon_FieldIndex.Speed:
                    return Speed;
                case Weapon_FieldIndex.Reach:
                    return Reach;
                case Weapon_FieldIndex.Flags:
                    return Flags;
                case Weapon_FieldIndex.Value:
                    return Value;
                case Weapon_FieldIndex.Health:
                    return Health;
                case Weapon_FieldIndex.Weight:
                    return Weight;
                case Weapon_FieldIndex.Damage:
                    return Damage;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Weapon_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Weapon_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Weapon_FieldIndex.Enchantment:
                    this.Enchantment = ex;
                    break;
                case Weapon_FieldIndex.EnchantmentPoints:
                    this.EnchantmentPoints = ex;
                    break;
                case Weapon_FieldIndex.Type:
                    this.Type = ex;
                    break;
                case Weapon_FieldIndex.Speed:
                    this.Speed = ex;
                    break;
                case Weapon_FieldIndex.Reach:
                    this.Reach = ex;
                    break;
                case Weapon_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Weapon_FieldIndex.Value:
                    this.Value = ex;
                    break;
                case Weapon_FieldIndex.Health:
                    this.Health = ex;
                    break;
                case Weapon_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                case Weapon_FieldIndex.Damage:
                    this.Damage = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Weapon_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Enchantment:
                    this.Enchantment = (Exception)obj;
                    break;
                case Weapon_FieldIndex.EnchantmentPoints:
                    this.EnchantmentPoints = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Type:
                    this.Type = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Speed:
                    this.Speed = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Reach:
                    this.Reach = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Value:
                    this.Value = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Health:
                    this.Health = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Damage:
                    this.Damage = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (Icon != null) return true;
            if (Script != null) return true;
            if (Enchantment != null) return true;
            if (EnchantmentPoints != null) return true;
            if (Type != null) return true;
            if (Speed != null) return true;
            if (Reach != null) return true;
            if (Flags != null) return true;
            if (Value != null) return true;
            if (Health != null) return true;
            if (Weight != null) return true;
            if (Damage != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Weapon_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            Model?.ToString(fg);
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Enchantment => {Enchantment}");
            fg.AppendLine($"EnchantmentPoints => {EnchantmentPoints}");
            fg.AppendLine($"Type => {Type}");
            fg.AppendLine($"Speed => {Speed}");
            fg.AppendLine($"Reach => {Reach}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Value => {Value}");
            fg.AppendLine($"Health => {Health}");
            fg.AppendLine($"Weight => {Weight}");
            fg.AppendLine($"Damage => {Damage}");
        }
        #endregion

        #region Combine
        public Weapon_ErrorMask Combine(Weapon_ErrorMask rhs)
        {
            var ret = new Weapon_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Enchantment = this.Enchantment.Combine(rhs.Enchantment);
            ret.EnchantmentPoints = this.EnchantmentPoints.Combine(rhs.EnchantmentPoints);
            ret.Type = this.Type.Combine(rhs.Type);
            ret.Speed = this.Speed.Combine(rhs.Speed);
            ret.Reach = this.Reach.Combine(rhs.Reach);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Value = this.Value.Combine(rhs.Value);
            ret.Health = this.Health.Combine(rhs.Health);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            ret.Damage = this.Damage.Combine(rhs.Damage);
            return ret;
        }
        public static Weapon_ErrorMask Combine(Weapon_ErrorMask lhs, Weapon_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Weapon_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Icon;
        public bool Script;
        public bool Enchantment;
        public bool EnchantmentPoints;
        public bool Type;
        public bool Speed;
        public bool Reach;
        public bool Flags;
        public bool Value;
        public bool Health;
        public bool Weight;
        public bool Damage;
        #endregion

    }
    #endregion





    #endregion

}
