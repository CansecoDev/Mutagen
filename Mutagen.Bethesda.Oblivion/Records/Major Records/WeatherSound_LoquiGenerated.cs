/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class WeatherSound : IWeatherSound, ILoquiObjectSetter, IEquatable<WeatherSound>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeatherSound_Registration.Instance;
        public static WeatherSound_Registration Registration => WeatherSound_Registration.Instance;

        #region Ctor
        public WeatherSound()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Sound
        public FormIDLink<Sound> Sound_Property { get; } = new FormIDLink<Sound>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Sound Sound { get => Sound_Property.Item; set => Sound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<Sound> IWeatherSoundGetter.Sound_Property => this.Sound_Property;
        #endregion
        #region Type
        protected readonly INotifyingItem<WeatherSound.SoundType> _Type = NotifyingItem.Factory<WeatherSound.SoundType>();
        public INotifyingItem<WeatherSound.SoundType> Type_Property => _Type;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WeatherSound.SoundType Type
        {
            get => this._Type.Item;
            set => this._Type.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<WeatherSound.SoundType> IWeatherSound.Type_Property => this.Type_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<WeatherSound.SoundType> IWeatherSoundGetter.Type_Property => this.Type_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => WeatherSoundCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => WeatherSoundCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => WeatherSoundCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            WeatherSoundCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return WeatherSoundCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            WeatherSound_Mask<bool> printMask = null)
        {
            return WeatherSoundCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            WeatherSoundCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public WeatherSound_Mask<bool> GetHasBeenSetMask()
        {
            return WeatherSoundCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is WeatherSound rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(WeatherSound rhs)
        {
            if (rhs == null) return false;
            if (Sound != rhs.Sound) return false;
            if (Type != rhs.Type) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Sound).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Type).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static WeatherSound Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static WeatherSound Create_XML(
            XElement root,
            out WeatherSound_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (WeatherSound Object, WeatherSound_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            WeatherSound_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new WeatherSound_ErrorMask()) : default(Func<WeatherSound_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static WeatherSound Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static WeatherSound Create_XML(
            string path,
            out WeatherSound_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static WeatherSound Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static WeatherSound Create_XML(
            Stream stream,
            out WeatherSound_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<WeatherSound, WeatherSound_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out WeatherSound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<WeatherSound, WeatherSound_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out WeatherSound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out WeatherSound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out WeatherSound_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: doMasks) as WeatherSound_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out WeatherSound_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out WeatherSound_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            WeatherSoundCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                writer: writer,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static WeatherSound Create_XML_Internal(
            XElement root,
            Func<WeatherSound_ErrorMask> errorMask)
        {
            var ret = new WeatherSound();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            WeatherSound item,
            XElement root,
            string name,
            Func<WeatherSound_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Sound":
                    item.Sound_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)WeatherSound_FieldIndex.Sound,
                        errorMask: errorMask));
                    break;
                case "Type":
                    item._Type.SetIfSucceeded(EnumXmlTranslation<WeatherSound.SoundType>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)WeatherSound_FieldIndex.Type,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Mutagen
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Sound_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static WeatherSound Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static WeatherSound Create_Binary(
            MutagenFrame frame,
            out WeatherSound_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (WeatherSound Object, WeatherSound_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            WeatherSound_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new WeatherSound_ErrorMask()) : default(Func<WeatherSound_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static WeatherSound Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static WeatherSound Create_Binary(
            string path,
            out WeatherSound_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static WeatherSound Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static WeatherSound Create_Binary(
            Stream stream,
            out WeatherSound_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out WeatherSound_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as WeatherSound_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out WeatherSound_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out WeatherSound_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            WeatherSoundCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static WeatherSound Create_Binary_Internal(
            MutagenFrame frame,
            Func<WeatherSound_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new WeatherSound();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    WeatherSound_Registration.SNAM_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            WeatherSound item,
            MutagenFrame frame,
            Func<WeatherSound_ErrorMask> errorMask)
        {
            item.Sound_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)WeatherSound_FieldIndex.Sound,
                errorMask: errorMask));
            item._Type.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<WeatherSound.SoundType>.Instance.Parse(
                frame: frame.Spawn(new ContentLength(4)),
                fieldIndex: (int)WeatherSound_FieldIndex.Type,
                errorMask: errorMask));
        }

        #endregion

        public WeatherSound Copy(
            WeatherSound_CopyMask copyMask = null,
            IWeatherSoundGetter def = null)
        {
            return WeatherSound.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static WeatherSound Copy(
            IWeatherSound item,
            WeatherSound_CopyMask copyMask = null,
            IWeatherSoundGetter def = null)
        {
            WeatherSound ret;
            if (item.GetType().Equals(typeof(WeatherSound)))
            {
                ret = new WeatherSound();
            }
            else
            {
                ret = (WeatherSound)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            WeatherSound_CopyMask copyMask = null,
            IWeatherSoundGetter def = null)
            where CopyType : class, IWeatherSound
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(WeatherSound)))
            {
                ret = new WeatherSound() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static WeatherSound Copy_ToLoqui(
            IWeatherSoundGetter item,
            WeatherSound_CopyMask copyMask = null,
            IWeatherSoundGetter def = null)
        {
            WeatherSound ret;
            if (item.GetType().Equals(typeof(WeatherSound)))
            {
                ret = new WeatherSound() as WeatherSound;
            }
            else
            {
                ret = (WeatherSound)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                    this.Sound_Property.Set(
                        (FormIDLink<Sound>)obj,
                        cmds);
                    break;
                case WeatherSound_FieldIndex.Type:
                    this._Type.Set(
                        (WeatherSound.SoundType)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            WeatherSoundCommon.Clear(this, cmds);
        }


        public static WeatherSound Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new WeatherSound();
            foreach (var pair in fields)
            {
                CopyInInternal_WeatherSound(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_WeatherSound(WeatherSound obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out WeatherSound_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                    obj.Sound_Property.Set(
                        (FormIDLink<Sound>)pair.Value,
                        null);
                    break;
                case WeatherSound_FieldIndex.Type:
                    obj._Type.Set(
                        (WeatherSound.SoundType)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, WeatherSound obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IWeatherSound : IWeatherSoundGetter, ILoquiClass<IWeatherSound, IWeatherSoundGetter>, ILoquiClass<WeatherSound, IWeatherSoundGetter>
    {
        new Sound Sound { get; set; }
        new WeatherSound.SoundType Type { get; set; }
        new INotifyingItem<WeatherSound.SoundType> Type_Property { get; }

    }

    public interface IWeatherSoundGetter : ILoquiObject
    {
        #region Sound
        Sound Sound { get; }
        FormIDLink<Sound> Sound_Property { get; }

        #endregion
        #region Type
        WeatherSound.SoundType Type { get; }
        INotifyingItemGetter<WeatherSound.SoundType> Type_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum WeatherSound_FieldIndex
    {
        Sound = 0,
        Type = 1,
    }
    #endregion

    #region Registration
    public class WeatherSound_Registration : ILoquiRegistration
    {
        public static readonly WeatherSound_Registration Instance = new WeatherSound_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 104,
            version: 0);

        public const string GUID = "eab0c38b-8b31-49b2-8d20-18576d520ca6";

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(WeatherSound_Mask<>);

        public static readonly Type ErrorMaskType = typeof(WeatherSound_ErrorMask);

        public static readonly Type ClassType = typeof(WeatherSound);

        public static readonly Type GetterType = typeof(IWeatherSoundGetter);

        public static readonly Type SetterType = typeof(IWeatherSound);

        public static readonly Type CommonType = typeof(WeatherSoundCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.WeatherSound";

        public const string Name = "WeatherSound";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SOUND":
                    return (ushort)WeatherSound_FieldIndex.Sound;
                case "TYPE":
                    return (ushort)WeatherSound_FieldIndex.Type;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                case WeatherSound_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                case WeatherSound_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                case WeatherSound_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                    return "Sound";
                case WeatherSound_FieldIndex.Type:
                    return "Type";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                case WeatherSound_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                case WeatherSound_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                    return typeof(FormIDLink<Sound>);
                case WeatherSound_FieldIndex.Type:
                    return typeof(WeatherSound.SoundType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SNAM_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class WeatherSoundCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IWeatherSound item,
            IWeatherSoundGetter rhs,
            WeatherSound_CopyMask copyMask = null,
            IWeatherSoundGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            WeatherSoundCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IWeatherSound item,
            IWeatherSoundGetter rhs,
            out WeatherSound_ErrorMask errorMask,
            WeatherSound_CopyMask copyMask = null,
            IWeatherSoundGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            WeatherSoundCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IWeatherSound item,
            IWeatherSoundGetter rhs,
            IWeatherSoundGetter def,
            bool doMasks,
            out WeatherSound_ErrorMask errorMask,
            WeatherSound_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            WeatherSound_ErrorMask retErrorMask = null;
            Func<WeatherSound_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new WeatherSound_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IWeatherSound item,
            IWeatherSoundGetter rhs,
            IWeatherSoundGetter def,
            bool doMasks,
            Func<WeatherSound_ErrorMask> errorMask,
            WeatherSound_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Sound ?? true)
            {
                try
                {
                    item.Sound_Property.Set(
                        value: rhs.Sound,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)WeatherSound_FieldIndex.Sound, ex);
                }
            }
            if (copyMask?.Type ?? true)
            {
                try
                {
                    item.Type_Property.Set(
                        value: rhs.Type,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)WeatherSound_FieldIndex.Type, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IWeatherSound obj,
            NotifyingFireParameters cmds = null)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                case WeatherSound_FieldIndex.Type:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IWeatherSound obj,
            NotifyingUnsetParameters cmds = null)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                    obj.Sound = default(FormIDLink<Sound>);
                    break;
                case WeatherSound_FieldIndex.Type:
                    obj.Type = default(WeatherSound.SoundType);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IWeatherSound obj)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                case WeatherSound_FieldIndex.Type:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IWeatherSoundGetter obj)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                    return obj.Sound;
                case WeatherSound_FieldIndex.Type:
                    return obj.Type;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IWeatherSound item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Sound = default(FormIDLink<Sound>);
            item.Type = default(WeatherSound.SoundType);
        }

        public static WeatherSound_Mask<bool> GetEqualsMask(
            this IWeatherSoundGetter item,
            IWeatherSoundGetter rhs)
        {
            var ret = new WeatherSound_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IWeatherSoundGetter item,
            IWeatherSoundGetter rhs,
            WeatherSound_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Sound = item.Sound == rhs.Sound;
            ret.Type = item.Type == rhs.Type;
        }

        public static string ToString(
            this IWeatherSoundGetter item,
            string name = null,
            WeatherSound_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IWeatherSoundGetter item,
            FileGeneration fg,
            string name = null,
            WeatherSound_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(WeatherSound)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(WeatherSound)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Sound ?? true)
                {
                    fg.AppendLine($"Sound => {item.Sound_Property}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {item.Type}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IWeatherSoundGetter item,
            WeatherSound_Mask<bool?> checkMask)
        {
            return true;
        }

        public static WeatherSound_Mask<bool> GetHasBeenSetMask(IWeatherSoundGetter item)
        {
            var ret = new WeatherSound_Mask<bool>();
            ret.Sound = true;
            ret.Type = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IWeatherSoundGetter item,
            bool doMasks,
            out WeatherSound_ErrorMask errorMask,
            string name = null)
        {
            WeatherSound_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new WeatherSound_ErrorMask()) : default(Func<WeatherSound_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IWeatherSoundGetter item,
            Func<WeatherSound_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.WeatherSound"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.WeatherSound");
                    }
                    FormIDXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Sound),
                        item: item.Sound?.FormID,
                        fieldIndex: (int)WeatherSound_FieldIndex.Sound,
                        errorMask: errorMask);
                    EnumXmlTranslation<WeatherSound.SoundType>.Instance.Write(
                        writer: writer,
                        name: nameof(item.Type),
                        item: item.Type_Property,
                        fieldIndex: (int)WeatherSound_FieldIndex.Type,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            WeatherSound item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out WeatherSound_ErrorMask errorMask)
        {
            WeatherSound_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new WeatherSound_ErrorMask()) : default(Func<WeatherSound_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            WeatherSound item,
            RecordTypeConverter recordTypeConverter,
            Func<WeatherSound_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: WeatherSound_Registration.SNAM_HEADER,
                    type: ObjectType.Subrecord))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            WeatherSound item,
            MutagenWriter writer,
            Func<WeatherSound_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Sound_Property,
                fieldIndex: (int)WeatherSound_FieldIndex.Sound,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<WeatherSound.SoundType>.Instance.Write(
                writer,
                item.Type_Property,
                length: new ContentLength(4),
                fieldIndex: (int)WeatherSound_FieldIndex.Type,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class WeatherSound_Mask<T> : IMask<T>, IEquatable<WeatherSound_Mask<T>>
    {
        #region Ctors
        public WeatherSound_Mask()
        {
        }

        public WeatherSound_Mask(T initialValue)
        {
            this.Sound = initialValue;
            this.Type = initialValue;
        }
        #endregion

        #region Members
        public T Sound;
        public T Type;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is WeatherSound_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(WeatherSound_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Sound, rhs.Sound)) return false;
            if (!object.Equals(this.Type, rhs.Type)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Sound?.GetHashCode());
            ret = ret.CombineHashCode(this.Type?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Sound)) return false;
            if (!eval(this.Type)) return false;
            return true;
        }
        #endregion

        #region Translate
        public WeatherSound_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new WeatherSound_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(WeatherSound_Mask<R> obj, Func<T, R> eval)
        {
            obj.Sound = eval(this.Sound);
            obj.Type = eval(this.Type);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(WeatherSound_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, WeatherSound_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(WeatherSound_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Sound ?? true)
                {
                    fg.AppendLine($"Sound => {Sound}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {Type}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class WeatherSound_ErrorMask : IErrorMask, IErrorMask<WeatherSound_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Sound;
        public Exception Type;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                    this.Sound = ex;
                    break;
                case WeatherSound_FieldIndex.Type:
                    this.Type = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                    this.Sound = (Exception)obj;
                    break;
                case WeatherSound_FieldIndex.Type:
                    this.Type = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Sound != null) return true;
            if (Type != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("WeatherSound_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Sound => {Sound}");
            fg.AppendLine($"Type => {Type}");
        }
        #endregion

        #region Combine
        public WeatherSound_ErrorMask Combine(WeatherSound_ErrorMask rhs)
        {
            var ret = new WeatherSound_ErrorMask();
            ret.Sound = this.Sound.Combine(rhs.Sound);
            ret.Type = this.Type.Combine(rhs.Type);
            return ret;
        }
        public static WeatherSound_ErrorMask Combine(WeatherSound_ErrorMask lhs, WeatherSound_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class WeatherSound_CopyMask
    {
        #region Members
        public bool Sound;
        public bool Type;
        #endregion

    }
    #endregion




    #endregion

}
