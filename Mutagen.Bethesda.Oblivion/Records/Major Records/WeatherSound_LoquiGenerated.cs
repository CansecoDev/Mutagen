/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class WeatherSound : 
        LoquiNotifyingObject,
        IWeatherSound,
        ILoquiObject<WeatherSound>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<WeatherSound>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeatherSound_Registration.Instance;
        public static WeatherSound_Registration Registration => WeatherSound_Registration.Instance;

        #region Ctor
        public WeatherSound()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Sound
        public FormIDLink<Sound> Sound_Property { get; } = new FormIDLink<Sound>();
        public Sound Sound { get => Sound_Property.Item; set => Sound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<Sound> IWeatherSoundGetter.Sound_Property => this.Sound_Property;
        #endregion
        #region Type
        private WeatherSound.SoundType _Type;
        public WeatherSound.SoundType Type
        {
            get => this._Type;
            set => this.RaiseAndSetIfChanged(ref this._Type, value, nameof(Type));
        }
        #endregion

        IMask<bool> IEqualsMask<WeatherSound>.GetEqualsMask(WeatherSound rhs, EqualsMaskHelper.Include include) => WeatherSoundCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IWeatherSoundGetter>.GetEqualsMask(IWeatherSoundGetter rhs, EqualsMaskHelper.Include include) => WeatherSoundCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            WeatherSound_Mask<bool> printMask = null)
        {
            return WeatherSoundCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            WeatherSoundCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public WeatherSound_Mask<bool> GetHasBeenSetMask()
        {
            return WeatherSoundCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is WeatherSound rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(WeatherSound rhs)
        {
            if (rhs == null) return false;
            if (!this.Sound_Property.Equals(rhs.Sound_Property)) return false;
            if (this.Type != rhs.Type) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Sound).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Type).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static WeatherSound Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            WeatherSound_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static WeatherSound Create_Xml(
            XElement node,
            out WeatherSound_ErrorMask errorMask,
            bool doMasks = true,
            WeatherSound_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = WeatherSound_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static WeatherSound Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new WeatherSound() : null;
                    break;
                default:
                    break;
            }
            var ret = new WeatherSound();
            try
            {
                foreach (var elem in node.Elements())
                {
                    WeatherSoundCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static WeatherSound Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            WeatherSound_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static WeatherSound Create_Xml(
            string path,
            out WeatherSound_ErrorMask errorMask,
            WeatherSound_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static WeatherSound Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            WeatherSound_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static WeatherSound Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            WeatherSound_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static WeatherSound Create_Xml(
            Stream stream,
            out WeatherSound_ErrorMask errorMask,
            WeatherSound_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static WeatherSound Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            WeatherSound_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out WeatherSound_ErrorMask errorMask,
            bool doMasks = true,
            WeatherSound_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WeatherSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out WeatherSound_ErrorMask errorMask,
            WeatherSound_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out WeatherSound_ErrorMask errorMask,
            WeatherSound_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            WeatherSound_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            WeatherSoundCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((WeatherSound_FieldIndex)index)
            {
                case WeatherSound_FieldIndex.Sound:
                case WeatherSound_FieldIndex.Type:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = WeatherSound_Registration.TRIGGERING_RECORD_TYPE;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Sound_Property;
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod)
            where M : IMod<M>
        {
            Sound_Property.Link(
                modList,
                sourceMod);
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static WeatherSound Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static WeatherSound Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out WeatherSound_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = WeatherSound_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static WeatherSound Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new WeatherSound();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(WeatherSound_Registration.SNAM_HEADER)));
            UtilityTranslation.RecordParse(
                record: ret,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs);
            return ret;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out WeatherSound_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = WeatherSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            WeatherSoundCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            WeatherSound item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                frame: frame,
                masterReferences: masterReferences,
                item: item.Sound_Property);
            if (EnumBinaryTranslation<WeatherSound.SoundType>.Instance.Parse(
                frame: frame.SpawnWithLength(4),
                item: out WeatherSound.SoundType TypeParse))
            {
                item.Type = TypeParse;
            }
            else
            {
                item.Type = default(WeatherSound.SoundType);
            }
        }

        #endregion

        public WeatherSound Copy(
            WeatherSound_CopyMask copyMask = null,
            IWeatherSoundGetter def = null)
        {
            return WeatherSound.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static WeatherSound Copy(
            IWeatherSound item,
            WeatherSound_CopyMask copyMask = null,
            IWeatherSoundGetter def = null)
        {
            WeatherSound ret;
            if (item.GetType().Equals(typeof(WeatherSound)))
            {
                ret = new WeatherSound();
            }
            else
            {
                ret = (WeatherSound)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static WeatherSound Copy_ToLoqui(
            IWeatherSoundGetter item,
            WeatherSound_CopyMask copyMask = null,
            IWeatherSoundGetter def = null)
        {
            WeatherSound ret;
            if (item.GetType().Equals(typeof(WeatherSound)))
            {
                ret = new WeatherSound() as WeatherSound;
            }
            else
            {
                ret = (WeatherSound)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(IWeatherSoundGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IWeatherSoundGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IWeatherSoundGetter rhs,
            WeatherSound_CopyMask copyMask,
            IWeatherSoundGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IWeatherSoundGetter rhs,
            out WeatherSound_ErrorMask errorMask,
            WeatherSound_CopyMask copyMask = null,
            IWeatherSoundGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WeatherSoundCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = WeatherSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IWeatherSoundGetter rhs,
            ErrorMaskBuilder errorMask,
            WeatherSound_CopyMask copyMask = null,
            IWeatherSoundGetter def = null,
            bool doMasks = true)
        {
            WeatherSoundCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                    this.Sound_Property.Set((FormIDLink<Sound>)obj);
                    break;
                case WeatherSound_FieldIndex.Type:
                    this.Type = (WeatherSound.SoundType)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            WeatherSoundCommon.Clear(this);
        }


        public static WeatherSound Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new WeatherSound();
            foreach (var pair in fields)
            {
                CopyInInternal_WeatherSound(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_WeatherSound(WeatherSound obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out WeatherSound_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                    obj.Sound_Property.Set((FormIDLink<Sound>)pair.Value);
                    break;
                case WeatherSound_FieldIndex.Type:
                    obj.Type = (WeatherSound.SoundType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IWeatherSound : IWeatherSoundGetter, ILoquiClass<IWeatherSound, IWeatherSoundGetter>, ILoquiClass<WeatherSound, IWeatherSoundGetter>
    {
        new Sound Sound { get; set; }
        new WeatherSound.SoundType Type { get; set; }

    }

    public partial interface IWeatherSoundGetter : ILoquiObject
    {
        #region Sound
        Sound Sound { get; }
        FormIDLink<Sound> Sound_Property { get; }

        #endregion
        #region Type
        WeatherSound.SoundType Type { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum WeatherSound_FieldIndex
    {
        Sound = 0,
        Type = 1,
    }
    #endregion

    #region Registration
    public class WeatherSound_Registration : ILoquiRegistration
    {
        public static readonly WeatherSound_Registration Instance = new WeatherSound_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 104,
            version: 0);

        public const string GUID = "eab0c38b-8b31-49b2-8d20-18576d520ca6";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(WeatherSound_Mask<>);

        public static readonly Type ErrorMaskType = typeof(WeatherSound_ErrorMask);

        public static readonly Type ClassType = typeof(WeatherSound);

        public static readonly Type GetterType = typeof(IWeatherSoundGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWeatherSound);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(WeatherSoundCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.WeatherSound";

        public const string Name = "WeatherSound";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SOUND":
                    return (ushort)WeatherSound_FieldIndex.Sound;
                case "TYPE":
                    return (ushort)WeatherSound_FieldIndex.Type;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                case WeatherSound_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                case WeatherSound_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                case WeatherSound_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                    return "Sound";
                case WeatherSound_FieldIndex.Type:
                    return "Type";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                case WeatherSound_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                case WeatherSound_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                    return typeof(FormIDLink<Sound>);
                case WeatherSound_FieldIndex.Type:
                    return typeof(WeatherSound.SoundType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SNAM_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class WeatherSoundCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IWeatherSound item,
            IWeatherSoundGetter rhs,
            IWeatherSoundGetter def,
            ErrorMaskBuilder errorMask,
            WeatherSound_CopyMask copyMask)
        {
            if (copyMask?.Sound ?? true)
            {
                errorMask?.PushIndex((int)WeatherSound_FieldIndex.Sound);
                try
                {
                    item.Sound_Property.SetLink(value: rhs.Sound_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Type ?? true)
            {
                errorMask?.PushIndex((int)WeatherSound_FieldIndex.Type);
                try
                {
                    item.Type = rhs.Type;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(IWeatherSound item)
        {
            item.Sound = default(Sound);
            item.Type = default(WeatherSound.SoundType);
        }

        public static WeatherSound_Mask<bool> GetEqualsMask(
            this IWeatherSoundGetter item,
            IWeatherSoundGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WeatherSound_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IWeatherSoundGetter item,
            IWeatherSoundGetter rhs,
            WeatherSound_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Sound = item.Sound_Property.FormKey == rhs.Sound_Property.FormKey;
            ret.Type = item.Type == rhs.Type;
        }

        public static string ToString(
            this IWeatherSoundGetter item,
            string name = null,
            WeatherSound_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IWeatherSoundGetter item,
            FileGeneration fg,
            string name = null,
            WeatherSound_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(WeatherSound)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(WeatherSound)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Sound ?? true)
                {
                    fg.AppendLine($"Sound => {item.Sound_Property}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {item.Type}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IWeatherSoundGetter item,
            WeatherSound_Mask<bool?> checkMask)
        {
            return true;
        }

        public static WeatherSound_Mask<bool> GetHasBeenSetMask(IWeatherSoundGetter item)
        {
            var ret = new WeatherSound_Mask<bool>();
            ret.Sound = true;
            ret.Type = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            WeatherSound item,
            bool doMasks,
            out WeatherSound_ErrorMask errorMask,
            WeatherSound_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WeatherSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            WeatherSound item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.WeatherSound");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.WeatherSound");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this WeatherSound item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)WeatherSound_FieldIndex.Sound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sound),
                    item: item.Sound_Property?.FormKey,
                    fieldIndex: (int)WeatherSound_FieldIndex.Sound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherSound_FieldIndex.Type) ?? true))
            {
                EnumXmlTranslation<WeatherSound.SoundType>.Instance.Write(
                    node: node,
                    name: nameof(item.Type),
                    item: item.Type,
                    fieldIndex: (int)WeatherSound_FieldIndex.Type,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            this WeatherSound item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WeatherSoundCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this WeatherSound item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Sound":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Sound_Property,
                        fieldIndex: (int)WeatherSound_FieldIndex.Sound,
                        errorMask: errorMask);
                    break;
                case "Type":
                    try
                    {
                        errorMask?.PushIndex((int)WeatherSound_FieldIndex.Type);
                        if (EnumXmlTranslation<WeatherSound.SoundType>.Instance.Parse(
                            node: node,
                            item: out WeatherSound.SoundType TypeParse,
                            errorMask: errorMask))
                        {
                            item.Type = TypeParse;
                        }
                        else
                        {
                            item.Type = default(WeatherSound.SoundType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            WeatherSound item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out WeatherSound_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = WeatherSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            WeatherSound item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: WeatherSound_Registration.SNAM_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            WeatherSound item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Sound_Property,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<WeatherSound.SoundType>.Instance.Write(
                writer,
                item.Type,
                length: 4);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class WeatherSound_Mask<T> : IMask<T>, IEquatable<WeatherSound_Mask<T>>
    {
        #region Ctors
        public WeatherSound_Mask()
        {
        }

        public WeatherSound_Mask(T initialValue)
        {
            this.Sound = initialValue;
            this.Type = initialValue;
        }
        #endregion

        #region Members
        public T Sound;
        public T Type;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is WeatherSound_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(WeatherSound_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Sound, rhs.Sound)) return false;
            if (!object.Equals(this.Type, rhs.Type)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Sound?.GetHashCode());
            ret = ret.CombineHashCode(this.Type?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Sound)) return false;
            if (!eval(this.Type)) return false;
            return true;
        }
        #endregion

        #region Translate
        public WeatherSound_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new WeatherSound_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(WeatherSound_Mask<R> obj, Func<T, R> eval)
        {
            obj.Sound = eval(this.Sound);
            obj.Type = eval(this.Type);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(WeatherSound_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, WeatherSound_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(WeatherSound_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Sound ?? true)
                {
                    fg.AppendLine($"Sound => {Sound}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {Type}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class WeatherSound_ErrorMask : IErrorMask, IErrorMask<WeatherSound_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Sound;
        public Exception Type;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                    return Sound;
                case WeatherSound_FieldIndex.Type:
                    return Type;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                    this.Sound = ex;
                    break;
                case WeatherSound_FieldIndex.Type:
                    this.Type = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            WeatherSound_FieldIndex enu = (WeatherSound_FieldIndex)index;
            switch (enu)
            {
                case WeatherSound_FieldIndex.Sound:
                    this.Sound = (Exception)obj;
                    break;
                case WeatherSound_FieldIndex.Type:
                    this.Type = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Sound != null) return true;
            if (Type != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("WeatherSound_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Sound => {Sound}");
            fg.AppendLine($"Type => {Type}");
        }
        #endregion

        #region Combine
        public WeatherSound_ErrorMask Combine(WeatherSound_ErrorMask rhs)
        {
            var ret = new WeatherSound_ErrorMask();
            ret.Sound = this.Sound.Combine(rhs.Sound);
            ret.Type = this.Type.Combine(rhs.Type);
            return ret;
        }
        public static WeatherSound_ErrorMask Combine(WeatherSound_ErrorMask lhs, WeatherSound_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static WeatherSound_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new WeatherSound_ErrorMask();
        }
        #endregion

    }
    public class WeatherSound_CopyMask
    {
        public WeatherSound_CopyMask()
        {
        }

        public WeatherSound_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Sound = defaultOn;
            this.Type = defaultOn;
        }

        #region Members
        public bool Sound;
        public bool Type;
        #endregion

    }

    public class WeatherSound_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Sound;
        public bool Type;
        #endregion

        #region Ctors
        public WeatherSound_TranslationMask()
        {
        }

        public WeatherSound_TranslationMask(bool defaultOn)
        {
            this.Sound = defaultOn;
            this.Type = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Sound, null));
            ret.Add((Type, null));
        }
    }
    #endregion

    #endregion

}
