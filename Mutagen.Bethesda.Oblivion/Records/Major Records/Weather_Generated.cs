/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Weather :
        OblivionMajorRecord,
        IWeatherInternal,
        ILoquiObjectSetter<Weather>,
        IEquatable<Weather>,
        IEqualsMask
    {
        #region Ctor
        protected Weather()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TextureLowerLayer
        public String? TextureLowerLayer { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWeatherGetter.TextureLowerLayer => this.TextureLowerLayer;
        #endregion
        #region TextureUpperLayer
        public String? TextureUpperLayer { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWeatherGetter.TextureUpperLayer => this.TextureUpperLayer;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IWeatherGetter.Model => this.Model;
        #endregion
        #region Colors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<WeatherColors>? _Colors;
        public IExtendedList<WeatherColors>? Colors
        {
            get => this._Colors;
            set => this._Colors = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWeatherColorsGetter>? IWeatherGetter.Colors => _Colors;
        #endregion

        #endregion
        #region FogDistance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FogDistance? _FogDistance;
        public FogDistance? FogDistance
        {
            get => _FogDistance;
            set => _FogDistance = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFogDistanceGetter? IWeatherGetter.FogDistance => this.FogDistance;
        #endregion
        #region HDRData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private HDRData? _HDRData;
        public HDRData? HDRData
        {
            get => _HDRData;
            set => _HDRData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IHDRDataGetter? IWeatherGetter.HDRData => this.HDRData;
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WeatherData? _Data;
        public WeatherData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherDataGetter? IWeatherGetter.Data => this.Data;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<WeatherSound> _Sounds = new ExtendedList<WeatherSound>();
        public IExtendedList<WeatherSound> Sounds
        {
            get => this._Sounds;
            protected set => this._Sounds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWeatherSoundGetter> IWeatherGetter.Sounds => _Sounds;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WeatherMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IWeatherGetter rhs)) return false;
            return ((WeatherCommon)((IWeatherGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Weather? obj)
        {
            return ((WeatherCommon)((IWeatherGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WeatherCommon)((IWeatherGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => WeatherXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WeatherXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Weather CreateFromXml(
            XElement node,
            Weather.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Weather CreateFromXml(
            XElement node,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Weather.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Weather CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Weather();
            ((WeatherSetterCommon)((IWeatherGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Weather CreateFromXml(
            string path,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Weather CreateFromXml(
            string path,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Weather CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Weather CreateFromXml(
            Stream stream,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Weather CreateFromXml(
            Stream stream,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Weather CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.TextureLowerLayer = initialValue;
                this.TextureUpperLayer = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Colors = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherColors.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WeatherColors.Mask<TItem>?>>());
                this.FogDistance = new MaskItem<TItem, FogDistance.Mask<TItem>?>(initialValue, new FogDistance.Mask<TItem>(initialValue));
                this.HDRData = new MaskItem<TItem, HDRData.Mask<TItem>?>(initialValue, new HDRData.Mask<TItem>(initialValue));
                this.Data = new MaskItem<TItem, WeatherData.Mask<TItem>?>(initialValue, new WeatherData.Mask<TItem>(initialValue));
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherSound.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WeatherSound.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem TextureLowerLayer,
                TItem TextureUpperLayer,
                TItem Model,
                TItem Colors,
                TItem FogDistance,
                TItem HDRData,
                TItem Data,
                TItem Sounds)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.TextureLowerLayer = TextureLowerLayer;
                this.TextureUpperLayer = TextureUpperLayer;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Colors = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherColors.Mask<TItem>?>>?>(Colors, Enumerable.Empty<MaskItemIndexed<TItem, WeatherColors.Mask<TItem>?>>());
                this.FogDistance = new MaskItem<TItem, FogDistance.Mask<TItem>?>(FogDistance, new FogDistance.Mask<TItem>(FogDistance));
                this.HDRData = new MaskItem<TItem, HDRData.Mask<TItem>?>(HDRData, new HDRData.Mask<TItem>(HDRData));
                this.Data = new MaskItem<TItem, WeatherData.Mask<TItem>?>(Data, new WeatherData.Mask<TItem>(Data));
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherSound.Mask<TItem>?>>?>(Sounds, Enumerable.Empty<MaskItemIndexed<TItem, WeatherSound.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem TextureLowerLayer;
            public TItem TextureUpperLayer;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherColors.Mask<TItem>?>>?>? Colors;
            public MaskItem<TItem, FogDistance.Mask<TItem>?>? FogDistance { get; set; }
            public MaskItem<TItem, HDRData.Mask<TItem>?>? HDRData { get; set; }
            public MaskItem<TItem, WeatherData.Mask<TItem>?>? Data { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherSound.Mask<TItem>?>>?>? Sounds;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.TextureLowerLayer, rhs.TextureLowerLayer)) return false;
                if (!object.Equals(this.TextureUpperLayer, rhs.TextureUpperLayer)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Colors, rhs.Colors)) return false;
                if (!object.Equals(this.FogDistance, rhs.FogDistance)) return false;
                if (!object.Equals(this.HDRData, rhs.HDRData)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.TextureLowerLayer);
                hash.Add(this.TextureUpperLayer);
                hash.Add(this.Model);
                hash.Add(this.Colors);
                hash.Add(this.FogDistance);
                hash.Add(this.HDRData);
                hash.Add(this.Data);
                hash.Add(this.Sounds);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.TextureLowerLayer)) return false;
                if (!eval(this.TextureUpperLayer)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (this.Colors != null)
                {
                    if (!eval(this.Colors.Overall)) return false;
                    if (this.Colors.Specific != null)
                    {
                        foreach (var item in this.Colors.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (FogDistance != null)
                {
                    if (!eval(this.FogDistance.Overall)) return false;
                    if (this.FogDistance.Specific != null && !this.FogDistance.Specific.All(eval)) return false;
                }
                if (HDRData != null)
                {
                    if (!eval(this.HDRData.Overall)) return false;
                    if (this.HDRData.Specific != null && !this.HDRData.Specific.All(eval)) return false;
                }
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (this.Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.TextureLowerLayer)) return true;
                if (eval(this.TextureUpperLayer)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (this.Colors != null)
                {
                    if (eval(this.Colors.Overall)) return true;
                    if (this.Colors.Specific != null)
                    {
                        foreach (var item in this.Colors.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (FogDistance != null)
                {
                    if (eval(this.FogDistance.Overall)) return true;
                    if (this.FogDistance.Specific != null && this.FogDistance.Specific.Any(eval)) return true;
                }
                if (HDRData != null)
                {
                    if (eval(this.HDRData.Overall)) return true;
                    if (this.HDRData.Specific != null && this.HDRData.Specific.Any(eval)) return true;
                }
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (this.Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Weather.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.TextureLowerLayer = eval(this.TextureLowerLayer);
                obj.TextureUpperLayer = eval(this.TextureUpperLayer);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                if (Colors != null)
                {
                    obj.Colors = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WeatherColors.Mask<R>?>>?>(eval(this.Colors.Overall), Enumerable.Empty<MaskItemIndexed<R, WeatherColors.Mask<R>?>>());
                    if (Colors.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WeatherColors.Mask<R>?>>();
                        obj.Colors.Specific = l;
                        foreach (var item in Colors.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, WeatherColors.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, WeatherColors.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.FogDistance = this.FogDistance == null ? null : new MaskItem<R, FogDistance.Mask<R>?>(eval(this.FogDistance.Overall), this.FogDistance.Specific?.Translate(eval));
                obj.HDRData = this.HDRData == null ? null : new MaskItem<R, HDRData.Mask<R>?>(eval(this.HDRData.Overall), this.HDRData.Specific?.Translate(eval));
                obj.Data = this.Data == null ? null : new MaskItem<R, WeatherData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                if (Sounds != null)
                {
                    obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WeatherSound.Mask<R>?>>?>(eval(this.Sounds.Overall), Enumerable.Empty<MaskItemIndexed<R, WeatherSound.Mask<R>?>>());
                    if (Sounds.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WeatherSound.Mask<R>?>>();
                        obj.Sounds.Specific = l;
                        foreach (var item in Sounds.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, WeatherSound.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, WeatherSound.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Weather.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Weather.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Weather.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.TextureLowerLayer ?? true)
                    {
                        fg.AppendItem(TextureLowerLayer, "TextureLowerLayer");
                    }
                    if (printMask?.TextureUpperLayer ?? true)
                    {
                        fg.AppendItem(TextureUpperLayer, "TextureUpperLayer");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if ((printMask?.Colors?.Overall ?? true)
                        && Colors.TryGet(out var ColorsItem))
                    {
                        fg.AppendLine("Colors =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ColorsItem.Overall);
                            if (ColorsItem.Specific != null)
                            {
                                foreach (var subItem in ColorsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.FogDistance?.Overall ?? true)
                    {
                        FogDistance?.ToString(fg);
                    }
                    if (printMask?.HDRData?.Overall ?? true)
                    {
                        HDRData?.ToString(fg);
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                    if ((printMask?.Sounds?.Overall ?? true)
                        && Sounds.TryGet(out var SoundsItem))
                    {
                        fg.AppendLine("Sounds =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SoundsItem.Overall);
                            if (SoundsItem.Specific != null)
                            {
                                foreach (var subItem in SoundsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? TextureLowerLayer;
            public Exception? TextureUpperLayer;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherColors.ErrorMask?>>?>? Colors;
            public MaskItem<Exception?, FogDistance.ErrorMask?>? FogDistance;
            public MaskItem<Exception?, HDRData.ErrorMask?>? HDRData;
            public MaskItem<Exception?, WeatherData.ErrorMask?>? Data;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherSound.ErrorMask?>>?>? Sounds;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Weather_FieldIndex enu = (Weather_FieldIndex)index;
                switch (enu)
                {
                    case Weather_FieldIndex.TextureLowerLayer:
                        return TextureLowerLayer;
                    case Weather_FieldIndex.TextureUpperLayer:
                        return TextureUpperLayer;
                    case Weather_FieldIndex.Model:
                        return Model;
                    case Weather_FieldIndex.Colors:
                        return Colors;
                    case Weather_FieldIndex.FogDistance:
                        return FogDistance;
                    case Weather_FieldIndex.HDRData:
                        return HDRData;
                    case Weather_FieldIndex.Data:
                        return Data;
                    case Weather_FieldIndex.Sounds:
                        return Sounds;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Weather_FieldIndex enu = (Weather_FieldIndex)index;
                switch (enu)
                {
                    case Weather_FieldIndex.TextureLowerLayer:
                        this.TextureLowerLayer = ex;
                        break;
                    case Weather_FieldIndex.TextureUpperLayer:
                        this.TextureUpperLayer = ex;
                        break;
                    case Weather_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.Colors:
                        this.Colors = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherColors.ErrorMask?>>?>(ex, null);
                        break;
                    case Weather_FieldIndex.FogDistance:
                        this.FogDistance = new MaskItem<Exception?, FogDistance.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.HDRData:
                        this.HDRData = new MaskItem<Exception?, HDRData.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, WeatherData.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherSound.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Weather_FieldIndex enu = (Weather_FieldIndex)index;
                switch (enu)
                {
                    case Weather_FieldIndex.TextureLowerLayer:
                        this.TextureLowerLayer = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.TextureUpperLayer:
                        this.TextureUpperLayer = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.Colors:
                        this.Colors = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherColors.ErrorMask?>>?>)obj;
                        break;
                    case Weather_FieldIndex.FogDistance:
                        this.FogDistance = (MaskItem<Exception?, FogDistance.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.HDRData:
                        this.HDRData = (MaskItem<Exception?, HDRData.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, WeatherData.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherSound.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (TextureLowerLayer != null) return true;
                if (TextureUpperLayer != null) return true;
                if (Model != null) return true;
                if (Colors != null) return true;
                if (FogDistance != null) return true;
                if (HDRData != null) return true;
                if (Data != null) return true;
                if (Sounds != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(TextureLowerLayer, "TextureLowerLayer");
                fg.AppendItem(TextureUpperLayer, "TextureUpperLayer");
                Model?.ToString(fg);
                if (Colors.TryGet(out var ColorsItem))
                {
                    fg.AppendLine("Colors =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ColorsItem.Overall);
                        if (ColorsItem.Specific != null)
                        {
                            foreach (var subItem in ColorsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                FogDistance?.ToString(fg);
                HDRData?.ToString(fg);
                Data?.ToString(fg);
                if (Sounds.TryGet(out var SoundsItem))
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SoundsItem.Overall);
                        if (SoundsItem.Specific != null)
                        {
                            foreach (var subItem in SoundsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.TextureLowerLayer = this.TextureLowerLayer.Combine(rhs.TextureLowerLayer);
                ret.TextureUpperLayer = this.TextureUpperLayer.Combine(rhs.TextureUpperLayer);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Colors = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherColors.ErrorMask?>>?>(ExceptionExt.Combine(this.Colors?.Overall, rhs.Colors?.Overall), ExceptionExt.Combine(this.Colors?.Specific, rhs.Colors?.Specific));
                ret.FogDistance = this.FogDistance.Combine(rhs.FogDistance, (l, r) => l.Combine(r));
                ret.HDRData = this.HDRData.Combine(rhs.HDRData, (l, r) => l.Combine(r));
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherSound.ErrorMask?>>?>(ExceptionExt.Combine(this.Sounds?.Overall, rhs.Sounds?.Overall), ExceptionExt.Combine(this.Sounds?.Specific, rhs.Sounds?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool TextureLowerLayer;
            public bool TextureUpperLayer;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public MaskItem<bool, WeatherColors.TranslationMask?> Colors;
            public MaskItem<bool, FogDistance.TranslationMask?> FogDistance;
            public MaskItem<bool, HDRData.TranslationMask?> HDRData;
            public MaskItem<bool, WeatherData.TranslationMask?> Data;
            public MaskItem<bool, WeatherSound.TranslationMask?> Sounds;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.TextureLowerLayer = defaultOn;
                this.TextureUpperLayer = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Colors = new MaskItem<bool, WeatherColors.TranslationMask?>(defaultOn, null);
                this.FogDistance = new MaskItem<bool, FogDistance.TranslationMask?>(defaultOn, null);
                this.HDRData = new MaskItem<bool, HDRData.TranslationMask?>(defaultOn, null);
                this.Data = new MaskItem<bool, WeatherData.TranslationMask?>(defaultOn, null);
                this.Sounds = new MaskItem<bool, WeatherSound.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((TextureLowerLayer, null));
                ret.Add((TextureUpperLayer, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Colors?.Overall ?? true, Colors?.Specific?.GetCrystal()));
                ret.Add((FogDistance?.Overall ?? true, FogDistance?.Specific?.GetCrystal()));
                ret.Add((HDRData?.Overall ?? true, HDRData?.Specific?.GetCrystal()));
                ret.Add((Data?.Overall ?? true, Data?.Specific?.GetCrystal()));
                ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Weather_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => WeatherCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => WeatherCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeatherCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeatherCommon.Instance.RemapLinks(this, mapping);
        public Weather(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Weather(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Weather(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WeatherBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeatherBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Weather CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Weather CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Weather();
            ((WeatherSetterCommon)((IWeatherGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Weather item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWeatherGetter)rhs, include);

        void IClearable.Clear()
        {
            ((WeatherSetterCommon)((IWeatherGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Weather GetNew()
        {
            return new Weather();
        }

    }
    #endregion

    #region Interface
    public partial interface IWeather :
        IWeatherGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IWeatherInternal>
    {
        new String? TextureLowerLayer { get; set; }
        new String? TextureUpperLayer { get; set; }
        new Model? Model { get; set; }
        new IExtendedList<WeatherColors>? Colors { get; set; }
        new FogDistance? FogDistance { get; set; }
        new HDRData? HDRData { get; set; }
        new WeatherData? Data { get; set; }
        new IExtendedList<WeatherSound> Sounds { get; }
    }

    public partial interface IWeatherInternal :
        IOblivionMajorRecordInternal,
        IWeather,
        IWeatherGetter
    {
    }

    public partial interface IWeatherGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IWeatherGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Weather_Registration.Instance;
        String? TextureLowerLayer { get; }
        String? TextureUpperLayer { get; }
        IModelGetter? Model { get; }
        IReadOnlyList<IWeatherColorsGetter>? Colors { get; }
        IFogDistanceGetter? FogDistance { get; }
        IHDRDataGetter? HDRData { get; }
        IWeatherDataGetter? Data { get; }
        IReadOnlyList<IWeatherSoundGetter> Sounds { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WeatherMixIn
    {
        public static void Clear(this IWeatherInternal item)
        {
            ((WeatherSetterCommon)((IWeatherGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Weather.Mask<bool> GetEqualsMask(
            this IWeatherGetter item,
            IWeatherGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWeatherGetter item,
            string? name = null,
            Weather.Mask<bool>? printMask = null)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWeatherGetter item,
            FileGeneration fg,
            string? name = null,
            Weather.Mask<bool>? printMask = null)
        {
            ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IWeatherGetter item,
            Weather.Mask<bool?> checkMask)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Weather.Mask<bool> GetHasBeenSetMask(this IWeatherGetter item)
        {
            var ret = new Weather.Mask<bool>(false);
            ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IWeatherGetter item,
            IWeatherGetter rhs)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IWeatherInternal lhs,
            IWeatherGetter rhs,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WeatherSetterTranslationCommon)((IWeatherGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Weather.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWeatherInternal lhs,
            IWeatherGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WeatherSetterTranslationCommon)((IWeatherGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Weather DeepCopy(
            this IWeatherGetter item,
            Weather.TranslationMask? copyMask = null)
        {
            return ((WeatherSetterTranslationCommon)((IWeatherGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Weather DeepCopy(
            this IWeatherGetter item,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? copyMask = null)
        {
            return ((WeatherSetterTranslationCommon)((IWeatherGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Weather DeepCopy(
            this IWeatherGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WeatherSetterTranslationCommon)((IWeatherGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWeatherInternal item,
            XElement node,
            Weather.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWeatherInternal item,
            XElement node,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Weather.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((WeatherSetterCommon)((IWeatherGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            string path,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            string path,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            Stream stream,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            Stream stream,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IWeatherInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IWeatherInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeatherSetterCommon)((IWeatherGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Weather_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        TextureLowerLayer = 5,
        TextureUpperLayer = 6,
        Model = 7,
        Colors = 8,
        FogDistance = 9,
        HDRData = 10,
        Data = 11,
        Sounds = 12,
    }
    #endregion

    #region Registration
    public partial class Weather_Registration : ILoquiRegistration
    {
        public static readonly Weather_Registration Instance = new Weather_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 102,
            version: 0);

        public const string GUID = "c7183e23-4f2c-43f7-adcf-6c56458c94af";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(Weather.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Weather.ErrorMask);

        public static readonly Type ClassType = typeof(Weather);

        public static readonly Type GetterType = typeof(IWeatherGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWeather);

        public static readonly Type? InternalSetterType = typeof(IWeatherInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Weather";

        public const string Name = "Weather";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TEXTURELOWERLAYER":
                    return (ushort)Weather_FieldIndex.TextureLowerLayer;
                case "TEXTUREUPPERLAYER":
                    return (ushort)Weather_FieldIndex.TextureUpperLayer;
                case "MODEL":
                    return (ushort)Weather_FieldIndex.Model;
                case "COLORS":
                    return (ushort)Weather_FieldIndex.Colors;
                case "FOGDISTANCE":
                    return (ushort)Weather_FieldIndex.FogDistance;
                case "HDRDATA":
                    return (ushort)Weather_FieldIndex.HDRData;
                case "DATA":
                    return (ushort)Weather_FieldIndex.Data;
                case "SOUNDS":
                    return (ushort)Weather_FieldIndex.Sounds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.Colors:
                case Weather_FieldIndex.Sounds:
                    return true;
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                case Weather_FieldIndex.Model:
                case Weather_FieldIndex.FogDistance:
                case Weather_FieldIndex.HDRData:
                case Weather_FieldIndex.Data:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.Model:
                case Weather_FieldIndex.Colors:
                case Weather_FieldIndex.FogDistance:
                case Weather_FieldIndex.HDRData:
                case Weather_FieldIndex.Data:
                case Weather_FieldIndex.Sounds:
                    return true;
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                case Weather_FieldIndex.Model:
                case Weather_FieldIndex.Colors:
                case Weather_FieldIndex.FogDistance:
                case Weather_FieldIndex.HDRData:
                case Weather_FieldIndex.Data:
                case Weather_FieldIndex.Sounds:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    return "TextureLowerLayer";
                case Weather_FieldIndex.TextureUpperLayer:
                    return "TextureUpperLayer";
                case Weather_FieldIndex.Model:
                    return "Model";
                case Weather_FieldIndex.Colors:
                    return "Colors";
                case Weather_FieldIndex.FogDistance:
                    return "FogDistance";
                case Weather_FieldIndex.HDRData:
                    return "HDRData";
                case Weather_FieldIndex.Data:
                    return "Data";
                case Weather_FieldIndex.Sounds:
                    return "Sounds";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                case Weather_FieldIndex.Model:
                case Weather_FieldIndex.Colors:
                case Weather_FieldIndex.FogDistance:
                case Weather_FieldIndex.HDRData:
                case Weather_FieldIndex.Data:
                case Weather_FieldIndex.Sounds:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                case Weather_FieldIndex.Model:
                case Weather_FieldIndex.Colors:
                case Weather_FieldIndex.FogDistance:
                case Weather_FieldIndex.HDRData:
                case Weather_FieldIndex.Data:
                case Weather_FieldIndex.Sounds:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    return typeof(String);
                case Weather_FieldIndex.TextureUpperLayer:
                    return typeof(String);
                case Weather_FieldIndex.Model:
                    return typeof(Model);
                case Weather_FieldIndex.Colors:
                    return typeof(IExtendedList<WeatherColors>);
                case Weather_FieldIndex.FogDistance:
                    return typeof(FogDistance);
                case Weather_FieldIndex.HDRData:
                    return typeof(HDRData);
                case Weather_FieldIndex.Data:
                    return typeof(WeatherData);
                case Weather_FieldIndex.Sounds:
                    return typeof(IExtendedList<WeatherSound>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(WeatherXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.WTHR;
        public static readonly Type BinaryWriteTranslation = typeof(WeatherBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class WeatherSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly WeatherSetterCommon Instance = new WeatherSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWeatherInternal item)
        {
            ClearPartial();
            item.TextureLowerLayer = default;
            item.TextureUpperLayer = default;
            item.Model = null;
            item.Colors = null;
            item.FogDistance = null;
            item.HDRData = null;
            item.Data = null;
            item.Sounds.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IWeatherInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWeatherInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IWeatherInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IWeatherInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    WeatherXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IOblivionMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Weather)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Weather)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWeatherInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IWeatherInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: WeatherBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: WeatherBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Weather)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Weather)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class WeatherCommon : OblivionMajorRecordCommon
    {
        public new static readonly WeatherCommon Instance = new WeatherCommon();

        public Weather.Mask<bool> GetEqualsMask(
            IWeatherGetter item,
            IWeatherGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Weather.Mask<bool>(false);
            ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWeatherGetter item,
            IWeatherGetter rhs,
            Weather.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.TextureLowerLayer = string.Equals(item.TextureLowerLayer, rhs.TextureLowerLayer);
            ret.TextureUpperLayer = string.Equals(item.TextureUpperLayer, rhs.TextureUpperLayer);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Colors = item.Colors.CollectionEqualsHelper(
                rhs.Colors,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.FogDistance = EqualsMaskHelper.EqualsHelper(
                item.FogDistance,
                rhs.FogDistance,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.HDRData = EqualsMaskHelper.EqualsHelper(
                item.HDRData,
                rhs.HDRData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IWeatherGetter item,
            string? name = null,
            Weather.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWeatherGetter item,
            FileGeneration fg,
            string? name = null,
            Weather.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Weather =>");
            }
            else
            {
                fg.AppendLine($"{name} (Weather) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWeatherGetter item,
            FileGeneration fg,
            Weather.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.TextureLowerLayer ?? true)
                && item.TextureLowerLayer.TryGet(out var TextureLowerLayerItem))
            {
                fg.AppendItem(TextureLowerLayerItem, "TextureLowerLayer");
            }
            if ((printMask?.TextureUpperLayer ?? true)
                && item.TextureUpperLayer.TryGet(out var TextureUpperLayerItem))
            {
                fg.AppendItem(TextureUpperLayerItem, "TextureUpperLayer");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Colors?.Overall ?? true)
                && item.Colors.TryGet(out var ColorsItem))
            {
                fg.AppendLine("Colors =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ColorsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.FogDistance?.Overall ?? true)
                && item.FogDistance.TryGet(out var FogDistanceItem))
            {
                FogDistanceItem?.ToString(fg, "FogDistance");
            }
            if ((printMask?.HDRData?.Overall ?? true)
                && item.HDRData.TryGet(out var HDRDataItem))
            {
                HDRDataItem?.ToString(fg, "HDRData");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data.TryGet(out var DataItem))
            {
                DataItem?.ToString(fg, "Data");
            }
            if (printMask?.Sounds?.Overall ?? true)
            {
                fg.AppendLine("Sounds =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Sounds)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IWeatherGetter item,
            Weather.Mask<bool?> checkMask)
        {
            if (checkMask.TextureLowerLayer.HasValue && checkMask.TextureLowerLayer.Value != (item.TextureLowerLayer != null)) return false;
            if (checkMask.TextureUpperLayer.HasValue && checkMask.TextureUpperLayer.Value != (item.TextureUpperLayer != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Colors?.Overall.HasValue ?? false && checkMask.Colors!.Overall.Value != (item.Colors != null)) return false;
            if (checkMask.FogDistance?.Overall.HasValue ?? false && checkMask.FogDistance.Overall.Value != (item.FogDistance != null)) return false;
            if (checkMask.FogDistance?.Specific != null && (item.FogDistance == null || !item.FogDistance.HasBeenSet(checkMask.FogDistance.Specific))) return false;
            if (checkMask.HDRData?.Overall.HasValue ?? false && checkMask.HDRData.Overall.Value != (item.HDRData != null)) return false;
            if (checkMask.HDRData?.Specific != null && (item.HDRData == null || !item.HDRData.HasBeenSet(checkMask.HDRData.Specific))) return false;
            if (checkMask.Data?.Overall.HasValue ?? false && checkMask.Data.Overall.Value != (item.Data != null)) return false;
            if (checkMask.Data?.Specific != null && (item.Data == null || !item.Data.HasBeenSet(checkMask.Data.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IWeatherGetter item,
            Weather.Mask<bool> mask)
        {
            mask.TextureLowerLayer = (item.TextureLowerLayer != null);
            mask.TextureUpperLayer = (item.TextureUpperLayer != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            if (item.Colors.TryGet(out var ColorsItem))
            {
                mask.Colors = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, WeatherColors.Mask<bool>?>>?>(true, ColorsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, WeatherColors.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            var itemFogDistance = item.FogDistance;
            mask.FogDistance = new MaskItem<bool, FogDistance.Mask<bool>?>(itemFogDistance != null, itemFogDistance?.GetHasBeenSetMask());
            var itemHDRData = item.HDRData;
            mask.HDRData = new MaskItem<bool, HDRData.Mask<bool>?>(itemHDRData != null, itemHDRData?.GetHasBeenSetMask());
            var itemData = item.Data;
            mask.Data = new MaskItem<bool, WeatherData.Mask<bool>?>(itemData != null, itemData?.GetHasBeenSetMask());
            var SoundsItem = item.Sounds;
            mask.Sounds = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, WeatherSound.Mask<bool>?>>?>(true, SoundsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, WeatherSound.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Weather_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Weather_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Weather_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (Weather_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Weather_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Weather_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Weather_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Weather_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Weather_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Weather_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Weather_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWeatherGetter? lhs,
            IWeatherGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.TextureLowerLayer, rhs.TextureLowerLayer)) return false;
            if (!string.Equals(lhs.TextureUpperLayer, rhs.TextureUpperLayer)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!lhs.Colors.SequenceEqual(rhs.Colors)) return false;
            if (!object.Equals(lhs.FogDistance, rhs.FogDistance)) return false;
            if (!object.Equals(lhs.HDRData, rhs.HDRData)) return false;
            if (!object.Equals(lhs.Data, rhs.Data)) return false;
            if (!lhs.Sounds.SequenceEqual(rhs.Sounds)) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IWeatherGetter?)lhs,
                rhs: rhs as IWeatherGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IWeatherGetter?)lhs,
                rhs: rhs as IWeatherGetter);
        }
        
        public virtual int GetHashCode(IWeatherGetter item)
        {
            var hash = new HashCode();
            if (item.TextureLowerLayer.TryGet(out var TextureLowerLayeritem))
            {
                hash.Add(TextureLowerLayeritem);
            }
            if (item.TextureUpperLayer.TryGet(out var TextureUpperLayeritem))
            {
                hash.Add(TextureUpperLayeritem);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Colors);
            if (item.FogDistance.TryGet(out var FogDistanceitem))
            {
                hash.Add(FogDistanceitem);
            }
            if (item.HDRData.TryGet(out var HDRDataitem))
            {
                hash.Add(HDRDataitem);
            }
            if (item.Data.TryGet(out var Dataitem))
            {
                hash.Add(Dataitem);
            }
            hash.Add(item.Sounds);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IWeatherGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWeatherGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Weather.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IWeatherGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Sounds.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IWeatherGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Weather obj, Weather rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Weather(getNextFormKey());
            ret.DeepCopyIn((Weather)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Weather)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class WeatherSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly WeatherSetterTranslationCommon Instance = new WeatherSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IWeatherInternal item,
            IWeatherGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IWeather item,
            IWeatherGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.TextureLowerLayer) ?? true))
            {
                item.TextureLowerLayer = rhs.TextureLowerLayer;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.TextureUpperLayer) ?? true))
            {
                item.TextureUpperLayer = rhs.TextureUpperLayer;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weather_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Colors) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.Colors);
                try
                {
                    if ((rhs.Colors != null))
                    {
                        item.Colors = 
                            rhs.Colors
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<WeatherColors>();
                    }
                    else
                    {
                        item.Colors = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistance) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.FogDistance);
                try
                {
                    if(rhs.FogDistance.TryGet(out var rhsFogDistance))
                    {
                        item.FogDistance = rhsFogDistance.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weather_FieldIndex.FogDistance));
                    }
                    else
                    {
                        item.FogDistance = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HDRData) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.HDRData);
                try
                {
                    if(rhs.HDRData.TryGet(out var rhsHDRData))
                    {
                        item.HDRData = rhsHDRData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weather_FieldIndex.HDRData));
                    }
                    else
                    {
                        item.HDRData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.Data);
                try
                {
                    if(rhs.Data.TryGet(out var rhsData))
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weather_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.Sounds);
                try
                {
                    item.Sounds.SetTo(
                        rhs.Sounds
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWeatherInternal)item,
                rhs: (IWeatherGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWeather)item,
                rhs: (IWeatherGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWeatherInternal)item,
                rhs: (IWeatherGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWeather)item,
                rhs: (IWeatherGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Weather DeepCopy(
            IWeatherGetter item,
            Weather.TranslationMask? copyMask = null)
        {
            Weather ret = (Weather)((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Weather DeepCopy(
            IWeatherGetter item,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? copyMask = null)
        {
            Weather ret = (Weather)((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Weather DeepCopy(
            IWeatherGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Weather ret = (Weather)((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Weather
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Weather_Registration.Instance;
        public new static Weather_Registration Registration => Weather_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WeatherCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WeatherSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WeatherSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WeatherXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static WeatherXmlWriteTranslation Instance = new WeatherXmlWriteTranslation();

        public static void WriteToNodeXml(
            IWeatherGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.TextureLowerLayer != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.TextureLowerLayer) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TextureLowerLayer),
                    item: item.TextureLowerLayer,
                    fieldIndex: (int)Weather_FieldIndex.TextureLowerLayer,
                    errorMask: errorMask);
            }
            if ((item.TextureUpperLayer != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.TextureUpperLayer) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TextureUpperLayer),
                    item: item.TextureUpperLayer,
                    fieldIndex: (int)Weather_FieldIndex.TextureUpperLayer,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Weather_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.Model));
                }
            }
            if ((item.Colors != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.Colors) ?? true))
            {
                ListXmlTranslation<IWeatherColorsGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Colors),
                    item: item.Colors,
                    fieldIndex: (int)Weather_FieldIndex.Colors,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.Colors),
                    transl: (XElement subNode, IWeatherColorsGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((WeatherColorsXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.FogDistance != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistance) ?? true))
            {
                if (item.FogDistance.TryGet(out var FogDistanceItem))
                {
                    ((FogDistanceXmlWriteTranslation)((IXmlItem)FogDistanceItem).XmlWriteTranslator).Write(
                        item: FogDistanceItem,
                        node: node,
                        name: nameof(item.FogDistance),
                        fieldIndex: (int)Weather_FieldIndex.FogDistance,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.FogDistance));
                }
            }
            if ((item.HDRData != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HDRData) ?? true))
            {
                if (item.HDRData.TryGet(out var HDRDataItem))
                {
                    ((HDRDataXmlWriteTranslation)((IXmlItem)HDRDataItem).XmlWriteTranslator).Write(
                        item: HDRDataItem,
                        node: node,
                        name: nameof(item.HDRData),
                        fieldIndex: (int)Weather_FieldIndex.HDRData,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.HDRData));
                }
            }
            if ((item.Data != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.Data) ?? true))
            {
                if (item.Data.TryGet(out var DataItem))
                {
                    ((WeatherDataXmlWriteTranslation)((IXmlItem)DataItem).XmlWriteTranslator).Write(
                        item: DataItem,
                        node: node,
                        name: nameof(item.Data),
                        fieldIndex: (int)Weather_FieldIndex.Data,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.Data));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.Sounds) ?? true))
            {
                ListXmlTranslation<IWeatherSoundGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Sounds),
                    item: item.Sounds,
                    fieldIndex: (int)Weather_FieldIndex.Sounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.Sounds),
                    transl: (XElement subNode, IWeatherSoundGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((WeatherSoundXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IWeatherGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Weather");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Weather");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWeatherGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWeatherGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWeatherGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class WeatherXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static WeatherXmlCreateTranslation Instance = new WeatherXmlCreateTranslation();

        public static void FillPublicXml(
            IWeatherInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WeatherXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IWeatherInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "TextureLowerLayer":
                    errorMask?.PushIndex((int)Weather_FieldIndex.TextureLowerLayer);
                    try
                    {
                        item.TextureLowerLayer = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TextureUpperLayer":
                    errorMask?.PushIndex((int)Weather_FieldIndex.TextureUpperLayer);
                    try
                    {
                        item.TextureUpperLayer = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)Weather_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Colors":
                    errorMask?.PushIndex((int)Weather_FieldIndex.Colors);
                    try
                    {
                        if (ListXmlTranslation<WeatherColors>.Instance.Parse(
                            node: node,
                            enumer: out var ColorsItem,
                            transl: LoquiXmlTranslation<WeatherColors>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Colors = ColorsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Colors = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogDistance":
                    errorMask?.PushIndex((int)Weather_FieldIndex.FogDistance);
                    try
                    {
                        item.FogDistance = LoquiXmlTranslation<FogDistance>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.FogDistance));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HDRData":
                    errorMask?.PushIndex((int)Weather_FieldIndex.HDRData);
                    try
                    {
                        item.HDRData = LoquiXmlTranslation<HDRData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.HDRData));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Data":
                    errorMask?.PushIndex((int)Weather_FieldIndex.Data);
                    try
                    {
                        item.Data = LoquiXmlTranslation<WeatherData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.Data));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    errorMask?.PushIndex((int)Weather_FieldIndex.Sounds);
                    try
                    {
                        if (ListXmlTranslation<WeatherSound>.Instance.Parse(
                            node: node,
                            enumer: out var SoundsItem,
                            transl: LoquiXmlTranslation<WeatherSound>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Sounds.SetTo(SoundsItem);
                        }
                        else
                        {
                            item.Sounds.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class WeatherXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IWeatherGetter item,
            XElement node,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((WeatherXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Weather.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IWeatherGetter item,
            string path,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWeatherGetter item,
            Stream stream,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WeatherBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static WeatherBinaryWriteTranslation Instance = new WeatherBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IWeatherGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TextureLowerLayer,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CNAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TextureUpperLayer,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DNAM),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IWeatherColorsGetter>.Instance.Write(
                writer: writer,
                items: item.Colors,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.NAM0),
                transl: (MutagenWriter subWriter, IWeatherColorsGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((WeatherColorsBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            if (item.FogDistance.TryGet(out var FogDistanceItem))
            {
                ((FogDistanceBinaryWriteTranslation)((IBinaryItem)FogDistanceItem).BinaryWriteTranslator).Write(
                    item: FogDistanceItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.HDRData.TryGet(out var HDRDataItem))
            {
                ((HDRDataBinaryWriteTranslation)((IBinaryItem)HDRDataItem).BinaryWriteTranslator).Write(
                    item: HDRDataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Data.TryGet(out var DataItem))
            {
                ((WeatherDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IWeatherSoundGetter>.Instance.Write(
                writer: writer,
                items: item.Sounds,
                transl: (MutagenWriter subWriter, IWeatherSoundGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((WeatherSoundBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IWeatherGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.WTHR),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                writer.MetaData.FormVersion = item.FormVersion;
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                writer.MetaData.FormVersion = null;
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWeatherGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWeatherGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWeatherGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class WeatherBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static WeatherBinaryCreateTranslation Instance = new WeatherBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.WTHR;
        public static void FillBinaryStructs(
            IWeatherInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IWeatherInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureLowerLayer = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Weather_FieldIndex.TextureLowerLayer;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureUpperLayer = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Weather_FieldIndex.TextureUpperLayer;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Weather_FieldIndex.Model;
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Colors = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherColors>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: WeatherColors.TryCreateFromBinary)
                        .CastExtendedList<WeatherColors>();
                    return (int)Weather_FieldIndex.Colors;
                }
                case RecordTypeInts.FNAM:
                {
                    item.FogDistance = Mutagen.Bethesda.Oblivion.FogDistance.CreateFromBinary(frame: frame);
                    return (int)Weather_FieldIndex.FogDistance;
                }
                case RecordTypeInts.HNAM:
                {
                    item.HDRData = Mutagen.Bethesda.Oblivion.HDRData.CreateFromBinary(frame: frame);
                    return (int)Weather_FieldIndex.HDRData;
                }
                case RecordTypeInts.DATA:
                {
                    item.Data = Mutagen.Bethesda.Oblivion.WeatherData.CreateFromBinary(frame: frame);
                    return (int)Weather_FieldIndex.Data;
                }
                case RecordTypeInts.SNAM:
                {
                    item.Sounds.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherSound>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.SNAM,
                            recordTypeConverter: recordTypeConverter,
                            transl: WeatherSound.TryCreateFromBinary));
                    return (int)Weather_FieldIndex.Sounds;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class WeatherBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WeatherBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IWeatherGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Weather_Registration.Instance;
        public new static Weather_Registration Registration => Weather_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WeatherCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WeatherSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWeatherGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => WeatherCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => WeatherCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeatherCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeatherCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => WeatherXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WeatherXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WeatherBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeatherBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region TextureLowerLayer
        private int? _TextureLowerLayerLocation;
        public String? TextureLowerLayer => _TextureLowerLayerLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _TextureLowerLayerLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region TextureUpperLayer
        private int? _TextureUpperLayerLocation;
        public String? TextureUpperLayer => _TextureUpperLayerLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _TextureUpperLayerLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        public IModelGetter? Model { get; private set; }
        public IReadOnlyList<IWeatherColorsGetter>? Colors { get; private set; }
        #region FogDistance
        private RangeInt32? _FogDistanceLocation;
        public IFogDistanceGetter? FogDistance => _FogDistanceLocation.HasValue ? FogDistanceBinaryOverlay.FogDistanceFactory(new OverlayStream(_data.Slice(_FogDistanceLocation!.Value.Min), _package), _package) : default;
        public bool FogDistance_IsSet => _FogDistanceLocation.HasValue;
        #endregion
        #region HDRData
        private RangeInt32? _HDRDataLocation;
        public IHDRDataGetter? HDRData => _HDRDataLocation.HasValue ? HDRDataBinaryOverlay.HDRDataFactory(new OverlayStream(_data.Slice(_HDRDataLocation!.Value.Min), _package), _package) : default;
        public bool HDRData_IsSet => _HDRDataLocation.HasValue;
        #endregion
        #region Data
        private RangeInt32? _DataLocation;
        public IWeatherDataGetter? Data => _DataLocation.HasValue ? WeatherDataBinaryOverlay.WeatherDataFactory(new OverlayStream(_data.Slice(_DataLocation!.Value.Min), _package), _package) : default;
        public bool Data_IsSet => _DataLocation.HasValue;
        #endregion
        public IReadOnlyList<IWeatherSoundGetter> Sounds { get; private set; } = ListExt.Empty<WeatherSoundBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WeatherBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static WeatherBinaryOverlay WeatherFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new WeatherBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static WeatherBinaryOverlay WeatherFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return WeatherFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CNAM:
                {
                    _TextureLowerLayerLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.TextureLowerLayer;
                }
                case RecordTypeInts.DNAM:
                {
                    _TextureUpperLayerLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.TextureUpperLayer;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Weather_FieldIndex.Model;
                }
                case RecordTypeInts.NAM0:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.Colors = BinaryOverlayList<WeatherColorsBinaryOverlay>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 16,
                        getter: (s, p) => WeatherColorsBinaryOverlay.WeatherColorsFactory(s, p));
                    stream.Position += subLen;
                    return (int)Weather_FieldIndex.Colors;
                }
                case RecordTypeInts.FNAM:
                {
                    _FogDistanceLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Weather_FieldIndex.FogDistance;
                }
                case RecordTypeInts.HNAM:
                {
                    _HDRDataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Weather_FieldIndex.HDRData;
                }
                case RecordTypeInts.DATA:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Weather_FieldIndex.Data;
                }
                case RecordTypeInts.SNAM:
                {
                    this.Sounds = BinaryOverlayList<WeatherSoundBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => WeatherSoundBinaryOverlay.WeatherSoundFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Weather_FieldIndex.Sounds;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WeatherMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

