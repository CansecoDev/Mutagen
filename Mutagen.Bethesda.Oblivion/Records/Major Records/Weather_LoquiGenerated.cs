/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Windows.Media;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Weather : 
        MajorRecord,
        IWeather,
        ILoquiObject<Weather>,
        ILoquiObjectSetter,
        IPropertySupporter<String>,
        IPropertySupporter<Model>,
        IPropertySupporter<Single>,
        IPropertySupporter<Byte>,
        IPropertySupporter<Weather.WeatherClassification>,
        IPropertySupporter<Color>,
        IEquatable<Weather>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Weather_Registration.Instance;
        public new static Weather_Registration Registration => Weather_Registration.Instance;

        #region Ctor
        public Weather()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TextureLowerLayer
        protected String _TextureLowerLayer;
        protected PropertyForwarder<Weather, String> _TextureLowerLayerForwarder;
        public INotifyingSetItem<String> TextureLowerLayer_Property => _TextureLowerLayerForwarder ?? (_TextureLowerLayerForwarder = new PropertyForwarder<Weather, String>(this, (int)Weather_FieldIndex.TextureLowerLayer));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String TextureLowerLayer
        {
            get => this._TextureLowerLayer;
            set => this.SetTextureLowerLayer(value);
        }
        protected void SetTextureLowerLayer(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.TextureLowerLayer];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && TextureLowerLayer == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.TextureLowerLayer] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = TextureLowerLayer;
                _TextureLowerLayer = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.TextureLowerLayer,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _TextureLowerLayer = item;
            }
        }
        protected void UnsetTextureLowerLayer()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.TextureLowerLayer] = false;
            TextureLowerLayer = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IWeather.TextureLowerLayer_Property => this.TextureLowerLayer_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IWeatherGetter.TextureLowerLayer_Property => this.TextureLowerLayer_Property;
        #endregion
        #region TextureUpperLayer
        protected String _TextureUpperLayer;
        protected PropertyForwarder<Weather, String> _TextureUpperLayerForwarder;
        public INotifyingSetItem<String> TextureUpperLayer_Property => _TextureUpperLayerForwarder ?? (_TextureUpperLayerForwarder = new PropertyForwarder<Weather, String>(this, (int)Weather_FieldIndex.TextureUpperLayer));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String TextureUpperLayer
        {
            get => this._TextureUpperLayer;
            set => this.SetTextureUpperLayer(value);
        }
        protected void SetTextureUpperLayer(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.TextureUpperLayer];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && TextureUpperLayer == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.TextureUpperLayer] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = TextureUpperLayer;
                _TextureUpperLayer = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.TextureUpperLayer,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _TextureUpperLayer = item;
            }
        }
        protected void UnsetTextureUpperLayer()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.TextureUpperLayer] = false;
            TextureUpperLayer = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IWeather.TextureUpperLayer_Property => this.TextureUpperLayer_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IWeatherGetter.TextureUpperLayer_Property => this.TextureUpperLayer_Property;
        #endregion
        #region Model
        protected Model _Model;
        protected PropertyForwarder<Weather, Model> _ModelForwarder;
        public INotifyingSetItem<Model> Model_Property => _ModelForwarder ?? (_ModelForwarder = new PropertyForwarder<Weather, Model>(this, (int)Weather_FieldIndex.Model));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => this._Model;
            set => this.SetModel(value);
        }
        protected void SetModel(
            Model item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.Model];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Model, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.Model] = hasBeenSet;
            }
            if (_Model_subscriptions != null)
            {
                var tmp = Model;
                _Model = item;
                _Model_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.Model,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Model = item;
            }
        }
        protected void UnsetModel()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.Model] = false;
            Model = default(Model);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> IWeather.Model_Property => this.Model_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> IWeatherGetter.Model_Property => this.Model_Property;
        #endregion
        #region WeatherTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<WeatherType> _WeatherTypes = new NotifyingList<WeatherType>();
        public INotifyingList<WeatherType> WeatherTypes => _WeatherTypes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<WeatherType> WeatherTypesEnumerable
        {
            get => _WeatherTypes;
            set => _WeatherTypes.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<WeatherType> IWeather.WeatherTypes => _WeatherTypes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<WeatherType> IWeatherGetter.WeatherTypes => _WeatherTypes;
        #endregion

        #endregion
        #region FogDayNear
        protected Single _FogDayNear;
        protected PropertyForwarder<Weather, Single> _FogDayNearForwarder;
        public INotifyingSetItem<Single> FogDayNear_Property => _FogDayNearForwarder ?? (_FogDayNearForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.FogDayNear));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single FogDayNear
        {
            get => this._FogDayNear;
            set => this.SetFogDayNear(value);
        }
        protected void SetFogDayNear(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.FogDayNear];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && FogDayNear == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.FogDayNear] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = FogDayNear;
                _FogDayNear = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.FogDayNear,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _FogDayNear = item;
            }
        }
        protected void UnsetFogDayNear()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.FogDayNear] = false;
            FogDayNear = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.FogDayNear_Property => this.FogDayNear_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.FogDayNear_Property => this.FogDayNear_Property;
        #endregion
        #region FogDayFar
        protected Single _FogDayFar;
        protected PropertyForwarder<Weather, Single> _FogDayFarForwarder;
        public INotifyingSetItem<Single> FogDayFar_Property => _FogDayFarForwarder ?? (_FogDayFarForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.FogDayFar));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single FogDayFar
        {
            get => this._FogDayFar;
            set => this.SetFogDayFar(value);
        }
        protected void SetFogDayFar(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.FogDayFar];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && FogDayFar == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.FogDayFar] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = FogDayFar;
                _FogDayFar = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.FogDayFar,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _FogDayFar = item;
            }
        }
        protected void UnsetFogDayFar()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.FogDayFar] = false;
            FogDayFar = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.FogDayFar_Property => this.FogDayFar_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.FogDayFar_Property => this.FogDayFar_Property;
        #endregion
        #region FogNightNear
        protected Single _FogNightNear;
        protected PropertyForwarder<Weather, Single> _FogNightNearForwarder;
        public INotifyingSetItem<Single> FogNightNear_Property => _FogNightNearForwarder ?? (_FogNightNearForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.FogNightNear));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single FogNightNear
        {
            get => this._FogNightNear;
            set => this.SetFogNightNear(value);
        }
        protected void SetFogNightNear(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.FogNightNear];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && FogNightNear == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.FogNightNear] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = FogNightNear;
                _FogNightNear = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.FogNightNear,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _FogNightNear = item;
            }
        }
        protected void UnsetFogNightNear()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.FogNightNear] = false;
            FogNightNear = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.FogNightNear_Property => this.FogNightNear_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.FogNightNear_Property => this.FogNightNear_Property;
        #endregion
        #region FogNightFar
        protected Single _FogNightFar;
        protected PropertyForwarder<Weather, Single> _FogNightFarForwarder;
        public INotifyingSetItem<Single> FogNightFar_Property => _FogNightFarForwarder ?? (_FogNightFarForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.FogNightFar));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single FogNightFar
        {
            get => this._FogNightFar;
            set => this.SetFogNightFar(value);
        }
        protected void SetFogNightFar(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.FogNightFar];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && FogNightFar == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.FogNightFar] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = FogNightFar;
                _FogNightFar = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.FogNightFar,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _FogNightFar = item;
            }
        }
        protected void UnsetFogNightFar()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.FogNightFar] = false;
            FogNightFar = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.FogNightFar_Property => this.FogNightFar_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.FogNightFar_Property => this.FogNightFar_Property;
        #endregion
        #region HdrEyeAdaptSpeed
        protected Single _HdrEyeAdaptSpeed;
        protected PropertyForwarder<Weather, Single> _HdrEyeAdaptSpeedForwarder;
        public INotifyingSetItem<Single> HdrEyeAdaptSpeed_Property => _HdrEyeAdaptSpeedForwarder ?? (_HdrEyeAdaptSpeedForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.HdrEyeAdaptSpeed));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single HdrEyeAdaptSpeed
        {
            get => this._HdrEyeAdaptSpeed;
            set => this.SetHdrEyeAdaptSpeed(value);
        }
        protected void SetHdrEyeAdaptSpeed(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.HdrEyeAdaptSpeed];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && HdrEyeAdaptSpeed == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.HdrEyeAdaptSpeed] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = HdrEyeAdaptSpeed;
                _HdrEyeAdaptSpeed = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.HdrEyeAdaptSpeed,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _HdrEyeAdaptSpeed = item;
            }
        }
        protected void UnsetHdrEyeAdaptSpeed()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.HdrEyeAdaptSpeed] = false;
            HdrEyeAdaptSpeed = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.HdrEyeAdaptSpeed_Property => this.HdrEyeAdaptSpeed_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.HdrEyeAdaptSpeed_Property => this.HdrEyeAdaptSpeed_Property;
        #endregion
        #region HdrBlurRadius
        protected Single _HdrBlurRadius;
        protected PropertyForwarder<Weather, Single> _HdrBlurRadiusForwarder;
        public INotifyingSetItem<Single> HdrBlurRadius_Property => _HdrBlurRadiusForwarder ?? (_HdrBlurRadiusForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.HdrBlurRadius));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single HdrBlurRadius
        {
            get => this._HdrBlurRadius;
            set => this.SetHdrBlurRadius(value);
        }
        protected void SetHdrBlurRadius(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.HdrBlurRadius];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && HdrBlurRadius == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.HdrBlurRadius] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = HdrBlurRadius;
                _HdrBlurRadius = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.HdrBlurRadius,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _HdrBlurRadius = item;
            }
        }
        protected void UnsetHdrBlurRadius()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.HdrBlurRadius] = false;
            HdrBlurRadius = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.HdrBlurRadius_Property => this.HdrBlurRadius_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.HdrBlurRadius_Property => this.HdrBlurRadius_Property;
        #endregion
        #region HdrBlurPasses
        protected Single _HdrBlurPasses;
        protected PropertyForwarder<Weather, Single> _HdrBlurPassesForwarder;
        public INotifyingSetItem<Single> HdrBlurPasses_Property => _HdrBlurPassesForwarder ?? (_HdrBlurPassesForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.HdrBlurPasses));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single HdrBlurPasses
        {
            get => this._HdrBlurPasses;
            set => this.SetHdrBlurPasses(value);
        }
        protected void SetHdrBlurPasses(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.HdrBlurPasses];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && HdrBlurPasses == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.HdrBlurPasses] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = HdrBlurPasses;
                _HdrBlurPasses = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.HdrBlurPasses,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _HdrBlurPasses = item;
            }
        }
        protected void UnsetHdrBlurPasses()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.HdrBlurPasses] = false;
            HdrBlurPasses = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.HdrBlurPasses_Property => this.HdrBlurPasses_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.HdrBlurPasses_Property => this.HdrBlurPasses_Property;
        #endregion
        #region HdrEmissiveMult
        protected Single _HdrEmissiveMult;
        protected PropertyForwarder<Weather, Single> _HdrEmissiveMultForwarder;
        public INotifyingSetItem<Single> HdrEmissiveMult_Property => _HdrEmissiveMultForwarder ?? (_HdrEmissiveMultForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.HdrEmissiveMult));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single HdrEmissiveMult
        {
            get => this._HdrEmissiveMult;
            set => this.SetHdrEmissiveMult(value);
        }
        protected void SetHdrEmissiveMult(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.HdrEmissiveMult];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && HdrEmissiveMult == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.HdrEmissiveMult] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = HdrEmissiveMult;
                _HdrEmissiveMult = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.HdrEmissiveMult,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _HdrEmissiveMult = item;
            }
        }
        protected void UnsetHdrEmissiveMult()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.HdrEmissiveMult] = false;
            HdrEmissiveMult = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.HdrEmissiveMult_Property => this.HdrEmissiveMult_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.HdrEmissiveMult_Property => this.HdrEmissiveMult_Property;
        #endregion
        #region HdrTargetLum
        protected Single _HdrTargetLum;
        protected PropertyForwarder<Weather, Single> _HdrTargetLumForwarder;
        public INotifyingSetItem<Single> HdrTargetLum_Property => _HdrTargetLumForwarder ?? (_HdrTargetLumForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.HdrTargetLum));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single HdrTargetLum
        {
            get => this._HdrTargetLum;
            set => this.SetHdrTargetLum(value);
        }
        protected void SetHdrTargetLum(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.HdrTargetLum];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && HdrTargetLum == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.HdrTargetLum] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = HdrTargetLum;
                _HdrTargetLum = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.HdrTargetLum,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _HdrTargetLum = item;
            }
        }
        protected void UnsetHdrTargetLum()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.HdrTargetLum] = false;
            HdrTargetLum = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.HdrTargetLum_Property => this.HdrTargetLum_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.HdrTargetLum_Property => this.HdrTargetLum_Property;
        #endregion
        #region HdrUpperLumClamp
        protected Single _HdrUpperLumClamp;
        protected PropertyForwarder<Weather, Single> _HdrUpperLumClampForwarder;
        public INotifyingSetItem<Single> HdrUpperLumClamp_Property => _HdrUpperLumClampForwarder ?? (_HdrUpperLumClampForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.HdrUpperLumClamp));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single HdrUpperLumClamp
        {
            get => this._HdrUpperLumClamp;
            set => this.SetHdrUpperLumClamp(value);
        }
        protected void SetHdrUpperLumClamp(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.HdrUpperLumClamp];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && HdrUpperLumClamp == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.HdrUpperLumClamp] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = HdrUpperLumClamp;
                _HdrUpperLumClamp = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.HdrUpperLumClamp,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _HdrUpperLumClamp = item;
            }
        }
        protected void UnsetHdrUpperLumClamp()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.HdrUpperLumClamp] = false;
            HdrUpperLumClamp = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.HdrUpperLumClamp_Property => this.HdrUpperLumClamp_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.HdrUpperLumClamp_Property => this.HdrUpperLumClamp_Property;
        #endregion
        #region HdrBrightScale
        protected Single _HdrBrightScale;
        protected PropertyForwarder<Weather, Single> _HdrBrightScaleForwarder;
        public INotifyingSetItem<Single> HdrBrightScale_Property => _HdrBrightScaleForwarder ?? (_HdrBrightScaleForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.HdrBrightScale));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single HdrBrightScale
        {
            get => this._HdrBrightScale;
            set => this.SetHdrBrightScale(value);
        }
        protected void SetHdrBrightScale(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.HdrBrightScale];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && HdrBrightScale == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.HdrBrightScale] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = HdrBrightScale;
                _HdrBrightScale = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.HdrBrightScale,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _HdrBrightScale = item;
            }
        }
        protected void UnsetHdrBrightScale()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.HdrBrightScale] = false;
            HdrBrightScale = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.HdrBrightScale_Property => this.HdrBrightScale_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.HdrBrightScale_Property => this.HdrBrightScale_Property;
        #endregion
        #region HdrBrightClamp
        protected Single _HdrBrightClamp;
        protected PropertyForwarder<Weather, Single> _HdrBrightClampForwarder;
        public INotifyingSetItem<Single> HdrBrightClamp_Property => _HdrBrightClampForwarder ?? (_HdrBrightClampForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.HdrBrightClamp));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single HdrBrightClamp
        {
            get => this._HdrBrightClamp;
            set => this.SetHdrBrightClamp(value);
        }
        protected void SetHdrBrightClamp(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.HdrBrightClamp];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && HdrBrightClamp == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.HdrBrightClamp] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = HdrBrightClamp;
                _HdrBrightClamp = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.HdrBrightClamp,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _HdrBrightClamp = item;
            }
        }
        protected void UnsetHdrBrightClamp()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.HdrBrightClamp] = false;
            HdrBrightClamp = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.HdrBrightClamp_Property => this.HdrBrightClamp_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.HdrBrightClamp_Property => this.HdrBrightClamp_Property;
        #endregion
        #region HdrLumRampNoTex
        protected Single _HdrLumRampNoTex;
        protected PropertyForwarder<Weather, Single> _HdrLumRampNoTexForwarder;
        public INotifyingSetItem<Single> HdrLumRampNoTex_Property => _HdrLumRampNoTexForwarder ?? (_HdrLumRampNoTexForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.HdrLumRampNoTex));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single HdrLumRampNoTex
        {
            get => this._HdrLumRampNoTex;
            set => this.SetHdrLumRampNoTex(value);
        }
        protected void SetHdrLumRampNoTex(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.HdrLumRampNoTex];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && HdrLumRampNoTex == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.HdrLumRampNoTex] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = HdrLumRampNoTex;
                _HdrLumRampNoTex = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.HdrLumRampNoTex,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _HdrLumRampNoTex = item;
            }
        }
        protected void UnsetHdrLumRampNoTex()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.HdrLumRampNoTex] = false;
            HdrLumRampNoTex = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.HdrLumRampNoTex_Property => this.HdrLumRampNoTex_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.HdrLumRampNoTex_Property => this.HdrLumRampNoTex_Property;
        #endregion
        #region HdrLumRampMin
        protected Single _HdrLumRampMin;
        protected PropertyForwarder<Weather, Single> _HdrLumRampMinForwarder;
        public INotifyingSetItem<Single> HdrLumRampMin_Property => _HdrLumRampMinForwarder ?? (_HdrLumRampMinForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.HdrLumRampMin));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single HdrLumRampMin
        {
            get => this._HdrLumRampMin;
            set => this.SetHdrLumRampMin(value);
        }
        protected void SetHdrLumRampMin(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.HdrLumRampMin];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && HdrLumRampMin == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.HdrLumRampMin] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = HdrLumRampMin;
                _HdrLumRampMin = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.HdrLumRampMin,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _HdrLumRampMin = item;
            }
        }
        protected void UnsetHdrLumRampMin()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.HdrLumRampMin] = false;
            HdrLumRampMin = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.HdrLumRampMin_Property => this.HdrLumRampMin_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.HdrLumRampMin_Property => this.HdrLumRampMin_Property;
        #endregion
        #region HdrLumRampMax
        protected Single _HdrLumRampMax;
        protected PropertyForwarder<Weather, Single> _HdrLumRampMaxForwarder;
        public INotifyingSetItem<Single> HdrLumRampMax_Property => _HdrLumRampMaxForwarder ?? (_HdrLumRampMaxForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.HdrLumRampMax));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single HdrLumRampMax
        {
            get => this._HdrLumRampMax;
            set => this.SetHdrLumRampMax(value);
        }
        protected void SetHdrLumRampMax(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.HdrLumRampMax];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && HdrLumRampMax == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.HdrLumRampMax] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = HdrLumRampMax;
                _HdrLumRampMax = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.HdrLumRampMax,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _HdrLumRampMax = item;
            }
        }
        protected void UnsetHdrLumRampMax()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.HdrLumRampMax] = false;
            HdrLumRampMax = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.HdrLumRampMax_Property => this.HdrLumRampMax_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.HdrLumRampMax_Property => this.HdrLumRampMax_Property;
        #endregion
        #region HdrSunlightDimmer
        protected Single _HdrSunlightDimmer;
        protected PropertyForwarder<Weather, Single> _HdrSunlightDimmerForwarder;
        public INotifyingSetItem<Single> HdrSunlightDimmer_Property => _HdrSunlightDimmerForwarder ?? (_HdrSunlightDimmerForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.HdrSunlightDimmer));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single HdrSunlightDimmer
        {
            get => this._HdrSunlightDimmer;
            set => this.SetHdrSunlightDimmer(value);
        }
        protected void SetHdrSunlightDimmer(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.HdrSunlightDimmer];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && HdrSunlightDimmer == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.HdrSunlightDimmer] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = HdrSunlightDimmer;
                _HdrSunlightDimmer = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.HdrSunlightDimmer,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _HdrSunlightDimmer = item;
            }
        }
        protected void UnsetHdrSunlightDimmer()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.HdrSunlightDimmer] = false;
            HdrSunlightDimmer = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.HdrSunlightDimmer_Property => this.HdrSunlightDimmer_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.HdrSunlightDimmer_Property => this.HdrSunlightDimmer_Property;
        #endregion
        #region HdrGrassDimmer
        protected Single _HdrGrassDimmer;
        protected PropertyForwarder<Weather, Single> _HdrGrassDimmerForwarder;
        public INotifyingSetItem<Single> HdrGrassDimmer_Property => _HdrGrassDimmerForwarder ?? (_HdrGrassDimmerForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.HdrGrassDimmer));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single HdrGrassDimmer
        {
            get => this._HdrGrassDimmer;
            set => this.SetHdrGrassDimmer(value);
        }
        protected void SetHdrGrassDimmer(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.HdrGrassDimmer];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && HdrGrassDimmer == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.HdrGrassDimmer] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = HdrGrassDimmer;
                _HdrGrassDimmer = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.HdrGrassDimmer,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _HdrGrassDimmer = item;
            }
        }
        protected void UnsetHdrGrassDimmer()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.HdrGrassDimmer] = false;
            HdrGrassDimmer = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.HdrGrassDimmer_Property => this.HdrGrassDimmer_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.HdrGrassDimmer_Property => this.HdrGrassDimmer_Property;
        #endregion
        #region HdrTreeDimmer
        protected Single _HdrTreeDimmer;
        protected PropertyForwarder<Weather, Single> _HdrTreeDimmerForwarder;
        public INotifyingSetItem<Single> HdrTreeDimmer_Property => _HdrTreeDimmerForwarder ?? (_HdrTreeDimmerForwarder = new PropertyForwarder<Weather, Single>(this, (int)Weather_FieldIndex.HdrTreeDimmer));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single HdrTreeDimmer
        {
            get => this._HdrTreeDimmer;
            set => this.SetHdrTreeDimmer(value);
        }
        protected void SetHdrTreeDimmer(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.HdrTreeDimmer];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && HdrTreeDimmer == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.HdrTreeDimmer] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = HdrTreeDimmer;
                _HdrTreeDimmer = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.HdrTreeDimmer,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _HdrTreeDimmer = item;
            }
        }
        protected void UnsetHdrTreeDimmer()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.HdrTreeDimmer] = false;
            HdrTreeDimmer = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IWeather.HdrTreeDimmer_Property => this.HdrTreeDimmer_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IWeatherGetter.HdrTreeDimmer_Property => this.HdrTreeDimmer_Property;
        #endregion
        #region WindSpeed
        protected Byte _WindSpeed;
        protected PropertyForwarder<Weather, Byte> _WindSpeedForwarder;
        public INotifyingSetItem<Byte> WindSpeed_Property => _WindSpeedForwarder ?? (_WindSpeedForwarder = new PropertyForwarder<Weather, Byte>(this, (int)Weather_FieldIndex.WindSpeed));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte WindSpeed
        {
            get => this._WindSpeed;
            set => this.SetWindSpeed(value);
        }
        protected void SetWindSpeed(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.WindSpeed];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && WindSpeed == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.WindSpeed] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = WindSpeed;
                _WindSpeed = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.WindSpeed,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _WindSpeed = item;
            }
        }
        protected void UnsetWindSpeed()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.WindSpeed] = false;
            WindSpeed = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IWeather.WindSpeed_Property => this.WindSpeed_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IWeatherGetter.WindSpeed_Property => this.WindSpeed_Property;
        #endregion
        #region CloudSpeedLower
        protected Byte _CloudSpeedLower;
        protected PropertyForwarder<Weather, Byte> _CloudSpeedLowerForwarder;
        public INotifyingSetItem<Byte> CloudSpeedLower_Property => _CloudSpeedLowerForwarder ?? (_CloudSpeedLowerForwarder = new PropertyForwarder<Weather, Byte>(this, (int)Weather_FieldIndex.CloudSpeedLower));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte CloudSpeedLower
        {
            get => this._CloudSpeedLower;
            set => this.SetCloudSpeedLower(value);
        }
        protected void SetCloudSpeedLower(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.CloudSpeedLower];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && CloudSpeedLower == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.CloudSpeedLower] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = CloudSpeedLower;
                _CloudSpeedLower = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.CloudSpeedLower,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _CloudSpeedLower = item;
            }
        }
        protected void UnsetCloudSpeedLower()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.CloudSpeedLower] = false;
            CloudSpeedLower = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IWeather.CloudSpeedLower_Property => this.CloudSpeedLower_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IWeatherGetter.CloudSpeedLower_Property => this.CloudSpeedLower_Property;
        #endregion
        #region CloudSpeedUpper
        protected Byte _CloudSpeedUpper;
        protected PropertyForwarder<Weather, Byte> _CloudSpeedUpperForwarder;
        public INotifyingSetItem<Byte> CloudSpeedUpper_Property => _CloudSpeedUpperForwarder ?? (_CloudSpeedUpperForwarder = new PropertyForwarder<Weather, Byte>(this, (int)Weather_FieldIndex.CloudSpeedUpper));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte CloudSpeedUpper
        {
            get => this._CloudSpeedUpper;
            set => this.SetCloudSpeedUpper(value);
        }
        protected void SetCloudSpeedUpper(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.CloudSpeedUpper];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && CloudSpeedUpper == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.CloudSpeedUpper] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = CloudSpeedUpper;
                _CloudSpeedUpper = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.CloudSpeedUpper,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _CloudSpeedUpper = item;
            }
        }
        protected void UnsetCloudSpeedUpper()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.CloudSpeedUpper] = false;
            CloudSpeedUpper = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IWeather.CloudSpeedUpper_Property => this.CloudSpeedUpper_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IWeatherGetter.CloudSpeedUpper_Property => this.CloudSpeedUpper_Property;
        #endregion
        #region TransDelta
        protected Byte _TransDelta;
        protected PropertyForwarder<Weather, Byte> _TransDeltaForwarder;
        public INotifyingSetItem<Byte> TransDelta_Property => _TransDeltaForwarder ?? (_TransDeltaForwarder = new PropertyForwarder<Weather, Byte>(this, (int)Weather_FieldIndex.TransDelta));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte TransDelta
        {
            get => this._TransDelta;
            set => this.SetTransDelta(value);
        }
        protected void SetTransDelta(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.TransDelta];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && TransDelta == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.TransDelta] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = TransDelta;
                _TransDelta = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.TransDelta,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _TransDelta = item;
            }
        }
        protected void UnsetTransDelta()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.TransDelta] = false;
            TransDelta = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IWeather.TransDelta_Property => this.TransDelta_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IWeatherGetter.TransDelta_Property => this.TransDelta_Property;
        #endregion
        #region SunGlare
        protected Byte _SunGlare;
        protected PropertyForwarder<Weather, Byte> _SunGlareForwarder;
        public INotifyingSetItem<Byte> SunGlare_Property => _SunGlareForwarder ?? (_SunGlareForwarder = new PropertyForwarder<Weather, Byte>(this, (int)Weather_FieldIndex.SunGlare));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte SunGlare
        {
            get => this._SunGlare;
            set => this.SetSunGlare(value);
        }
        protected void SetSunGlare(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.SunGlare];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && SunGlare == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.SunGlare] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = SunGlare;
                _SunGlare = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.SunGlare,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _SunGlare = item;
            }
        }
        protected void UnsetSunGlare()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.SunGlare] = false;
            SunGlare = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IWeather.SunGlare_Property => this.SunGlare_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IWeatherGetter.SunGlare_Property => this.SunGlare_Property;
        #endregion
        #region SunDamage
        protected Byte _SunDamage;
        protected PropertyForwarder<Weather, Byte> _SunDamageForwarder;
        public INotifyingSetItem<Byte> SunDamage_Property => _SunDamageForwarder ?? (_SunDamageForwarder = new PropertyForwarder<Weather, Byte>(this, (int)Weather_FieldIndex.SunDamage));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte SunDamage
        {
            get => this._SunDamage;
            set => this.SetSunDamage(value);
        }
        protected void SetSunDamage(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.SunDamage];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && SunDamage == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.SunDamage] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = SunDamage;
                _SunDamage = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.SunDamage,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _SunDamage = item;
            }
        }
        protected void UnsetSunDamage()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.SunDamage] = false;
            SunDamage = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IWeather.SunDamage_Property => this.SunDamage_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IWeatherGetter.SunDamage_Property => this.SunDamage_Property;
        #endregion
        #region PrecipitationBeginFadeIn
        protected Byte _PrecipitationBeginFadeIn;
        protected PropertyForwarder<Weather, Byte> _PrecipitationBeginFadeInForwarder;
        public INotifyingSetItem<Byte> PrecipitationBeginFadeIn_Property => _PrecipitationBeginFadeInForwarder ?? (_PrecipitationBeginFadeInForwarder = new PropertyForwarder<Weather, Byte>(this, (int)Weather_FieldIndex.PrecipitationBeginFadeIn));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte PrecipitationBeginFadeIn
        {
            get => this._PrecipitationBeginFadeIn;
            set => this.SetPrecipitationBeginFadeIn(value);
        }
        protected void SetPrecipitationBeginFadeIn(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.PrecipitationBeginFadeIn];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && PrecipitationBeginFadeIn == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.PrecipitationBeginFadeIn] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = PrecipitationBeginFadeIn;
                _PrecipitationBeginFadeIn = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.PrecipitationBeginFadeIn,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _PrecipitationBeginFadeIn = item;
            }
        }
        protected void UnsetPrecipitationBeginFadeIn()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.PrecipitationBeginFadeIn] = false;
            PrecipitationBeginFadeIn = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IWeather.PrecipitationBeginFadeIn_Property => this.PrecipitationBeginFadeIn_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IWeatherGetter.PrecipitationBeginFadeIn_Property => this.PrecipitationBeginFadeIn_Property;
        #endregion
        #region PrecipitationEndFadeOut
        protected Byte _PrecipitationEndFadeOut;
        protected PropertyForwarder<Weather, Byte> _PrecipitationEndFadeOutForwarder;
        public INotifyingSetItem<Byte> PrecipitationEndFadeOut_Property => _PrecipitationEndFadeOutForwarder ?? (_PrecipitationEndFadeOutForwarder = new PropertyForwarder<Weather, Byte>(this, (int)Weather_FieldIndex.PrecipitationEndFadeOut));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte PrecipitationEndFadeOut
        {
            get => this._PrecipitationEndFadeOut;
            set => this.SetPrecipitationEndFadeOut(value);
        }
        protected void SetPrecipitationEndFadeOut(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.PrecipitationEndFadeOut];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && PrecipitationEndFadeOut == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.PrecipitationEndFadeOut] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = PrecipitationEndFadeOut;
                _PrecipitationEndFadeOut = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.PrecipitationEndFadeOut,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _PrecipitationEndFadeOut = item;
            }
        }
        protected void UnsetPrecipitationEndFadeOut()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.PrecipitationEndFadeOut] = false;
            PrecipitationEndFadeOut = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IWeather.PrecipitationEndFadeOut_Property => this.PrecipitationEndFadeOut_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IWeatherGetter.PrecipitationEndFadeOut_Property => this.PrecipitationEndFadeOut_Property;
        #endregion
        #region ThunderLightningBeginFadeIn
        protected Byte _ThunderLightningBeginFadeIn;
        protected PropertyForwarder<Weather, Byte> _ThunderLightningBeginFadeInForwarder;
        public INotifyingSetItem<Byte> ThunderLightningBeginFadeIn_Property => _ThunderLightningBeginFadeInForwarder ?? (_ThunderLightningBeginFadeInForwarder = new PropertyForwarder<Weather, Byte>(this, (int)Weather_FieldIndex.ThunderLightningBeginFadeIn));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte ThunderLightningBeginFadeIn
        {
            get => this._ThunderLightningBeginFadeIn;
            set => this.SetThunderLightningBeginFadeIn(value);
        }
        protected void SetThunderLightningBeginFadeIn(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.ThunderLightningBeginFadeIn];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ThunderLightningBeginFadeIn == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.ThunderLightningBeginFadeIn] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = ThunderLightningBeginFadeIn;
                _ThunderLightningBeginFadeIn = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.ThunderLightningBeginFadeIn,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ThunderLightningBeginFadeIn = item;
            }
        }
        protected void UnsetThunderLightningBeginFadeIn()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.ThunderLightningBeginFadeIn] = false;
            ThunderLightningBeginFadeIn = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IWeather.ThunderLightningBeginFadeIn_Property => this.ThunderLightningBeginFadeIn_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IWeatherGetter.ThunderLightningBeginFadeIn_Property => this.ThunderLightningBeginFadeIn_Property;
        #endregion
        #region ThunderLightningEndFadeOut
        protected Byte _ThunderLightningEndFadeOut;
        protected PropertyForwarder<Weather, Byte> _ThunderLightningEndFadeOutForwarder;
        public INotifyingSetItem<Byte> ThunderLightningEndFadeOut_Property => _ThunderLightningEndFadeOutForwarder ?? (_ThunderLightningEndFadeOutForwarder = new PropertyForwarder<Weather, Byte>(this, (int)Weather_FieldIndex.ThunderLightningEndFadeOut));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte ThunderLightningEndFadeOut
        {
            get => this._ThunderLightningEndFadeOut;
            set => this.SetThunderLightningEndFadeOut(value);
        }
        protected void SetThunderLightningEndFadeOut(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.ThunderLightningEndFadeOut];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ThunderLightningEndFadeOut == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.ThunderLightningEndFadeOut] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = ThunderLightningEndFadeOut;
                _ThunderLightningEndFadeOut = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.ThunderLightningEndFadeOut,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ThunderLightningEndFadeOut = item;
            }
        }
        protected void UnsetThunderLightningEndFadeOut()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.ThunderLightningEndFadeOut] = false;
            ThunderLightningEndFadeOut = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IWeather.ThunderLightningEndFadeOut_Property => this.ThunderLightningEndFadeOut_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IWeatherGetter.ThunderLightningEndFadeOut_Property => this.ThunderLightningEndFadeOut_Property;
        #endregion
        #region ThunderLightningFrequency
        protected Byte _ThunderLightningFrequency;
        protected PropertyForwarder<Weather, Byte> _ThunderLightningFrequencyForwarder;
        public INotifyingSetItem<Byte> ThunderLightningFrequency_Property => _ThunderLightningFrequencyForwarder ?? (_ThunderLightningFrequencyForwarder = new PropertyForwarder<Weather, Byte>(this, (int)Weather_FieldIndex.ThunderLightningFrequency));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte ThunderLightningFrequency
        {
            get => this._ThunderLightningFrequency;
            set => this.SetThunderLightningFrequency(value);
        }
        protected void SetThunderLightningFrequency(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.ThunderLightningFrequency];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ThunderLightningFrequency == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.ThunderLightningFrequency] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = ThunderLightningFrequency;
                _ThunderLightningFrequency = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.ThunderLightningFrequency,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ThunderLightningFrequency = item;
            }
        }
        protected void UnsetThunderLightningFrequency()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.ThunderLightningFrequency] = false;
            ThunderLightningFrequency = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IWeather.ThunderLightningFrequency_Property => this.ThunderLightningFrequency_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IWeatherGetter.ThunderLightningFrequency_Property => this.ThunderLightningFrequency_Property;
        #endregion
        #region Classification
        protected Weather.WeatherClassification _Classification;
        protected PropertyForwarder<Weather, Weather.WeatherClassification> _ClassificationForwarder;
        public INotifyingSetItem<Weather.WeatherClassification> Classification_Property => _ClassificationForwarder ?? (_ClassificationForwarder = new PropertyForwarder<Weather, Weather.WeatherClassification>(this, (int)Weather_FieldIndex.Classification));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Weather.WeatherClassification Classification
        {
            get => this._Classification;
            set => this.SetClassification(value);
        }
        protected void SetClassification(
            Weather.WeatherClassification item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.Classification];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Classification == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.Classification] = hasBeenSet;
            }
            if (_WeatherWeatherClassification_subscriptions != null)
            {
                var tmp = Classification;
                _Classification = item;
                _WeatherWeatherClassification_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.Classification,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Classification = item;
            }
        }
        protected void UnsetClassification()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.Classification] = false;
            Classification = default(Weather.WeatherClassification);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Weather.WeatherClassification> IWeather.Classification_Property => this.Classification_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Weather.WeatherClassification> IWeatherGetter.Classification_Property => this.Classification_Property;
        #endregion
        #region LightningColor
        protected Color _LightningColor;
        protected PropertyForwarder<Weather, Color> _LightningColorForwarder;
        public INotifyingSetItem<Color> LightningColor_Property => _LightningColorForwarder ?? (_LightningColorForwarder = new PropertyForwarder<Weather, Color>(this, (int)Weather_FieldIndex.LightningColor));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Color LightningColor
        {
            get => this._LightningColor;
            set => this.SetLightningColor(value);
        }
        protected void SetLightningColor(
            Color item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Weather_FieldIndex.LightningColor];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && LightningColor == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Weather_FieldIndex.LightningColor] = hasBeenSet;
            }
            if (_Color_subscriptions != null)
            {
                var tmp = LightningColor;
                _LightningColor = item;
                _Color_subscriptions.FireSubscriptions(
                    index: (int)Weather_FieldIndex.LightningColor,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _LightningColor = item;
            }
        }
        protected void UnsetLightningColor()
        {
            _hasBeenSetTracker[(int)Weather_FieldIndex.LightningColor] = false;
            LightningColor = default(Color);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Color> IWeather.LightningColor_Property => this.LightningColor_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Color> IWeatherGetter.LightningColor_Property => this.LightningColor_Property;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<WeatherSound> _Sounds = new NotifyingList<WeatherSound>();
        public INotifyingList<WeatherSound> Sounds => _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<WeatherSound> SoundsEnumerable
        {
            get => _Sounds;
            set => _Sounds.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<WeatherSound> IWeather.Sounds => _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<WeatherSound> IWeatherGetter.Sounds => _Sounds;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => WeatherCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => WeatherCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => WeatherCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            WeatherCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Weather>.GetEqualsMask(Weather rhs) => WeatherCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IWeatherGetter>.GetEqualsMask(IWeatherGetter rhs) => WeatherCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return WeatherCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Weather_Mask<bool> printMask = null)
        {
            return WeatherCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            WeatherCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Weather_Mask<bool> GetHasBeenSetMask()
        {
            return WeatherCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Weather rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Weather rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (TextureLowerLayer_Property.HasBeenSet != rhs.TextureLowerLayer_Property.HasBeenSet) return false;
            if (TextureLowerLayer_Property.HasBeenSet)
            {
                if (!object.Equals(this.TextureLowerLayer, rhs.TextureLowerLayer)) return false;
            }
            if (TextureUpperLayer_Property.HasBeenSet != rhs.TextureUpperLayer_Property.HasBeenSet) return false;
            if (TextureUpperLayer_Property.HasBeenSet)
            {
                if (!object.Equals(this.TextureUpperLayer, rhs.TextureUpperLayer)) return false;
            }
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (WeatherTypes.HasBeenSet != rhs.WeatherTypes.HasBeenSet) return false;
            if (WeatherTypes.HasBeenSet)
            {
                if (!this.WeatherTypes.SequenceEqual(rhs.WeatherTypes)) return false;
            }
            if (!this.FogDayNear.EqualsWithin(rhs.FogDayNear)) return false;
            if (!this.FogDayFar.EqualsWithin(rhs.FogDayFar)) return false;
            if (!this.FogNightNear.EqualsWithin(rhs.FogNightNear)) return false;
            if (!this.FogNightFar.EqualsWithin(rhs.FogNightFar)) return false;
            if (!this.HdrEyeAdaptSpeed.EqualsWithin(rhs.HdrEyeAdaptSpeed)) return false;
            if (!this.HdrBlurRadius.EqualsWithin(rhs.HdrBlurRadius)) return false;
            if (!this.HdrBlurPasses.EqualsWithin(rhs.HdrBlurPasses)) return false;
            if (!this.HdrEmissiveMult.EqualsWithin(rhs.HdrEmissiveMult)) return false;
            if (!this.HdrTargetLum.EqualsWithin(rhs.HdrTargetLum)) return false;
            if (!this.HdrUpperLumClamp.EqualsWithin(rhs.HdrUpperLumClamp)) return false;
            if (!this.HdrBrightScale.EqualsWithin(rhs.HdrBrightScale)) return false;
            if (!this.HdrBrightClamp.EqualsWithin(rhs.HdrBrightClamp)) return false;
            if (!this.HdrLumRampNoTex.EqualsWithin(rhs.HdrLumRampNoTex)) return false;
            if (!this.HdrLumRampMin.EqualsWithin(rhs.HdrLumRampMin)) return false;
            if (!this.HdrLumRampMax.EqualsWithin(rhs.HdrLumRampMax)) return false;
            if (!this.HdrSunlightDimmer.EqualsWithin(rhs.HdrSunlightDimmer)) return false;
            if (!this.HdrGrassDimmer.EqualsWithin(rhs.HdrGrassDimmer)) return false;
            if (!this.HdrTreeDimmer.EqualsWithin(rhs.HdrTreeDimmer)) return false;
            if (this.WindSpeed != rhs.WindSpeed) return false;
            if (this.CloudSpeedLower != rhs.CloudSpeedLower) return false;
            if (this.CloudSpeedUpper != rhs.CloudSpeedUpper) return false;
            if (this.TransDelta != rhs.TransDelta) return false;
            if (this.SunGlare != rhs.SunGlare) return false;
            if (this.SunDamage != rhs.SunDamage) return false;
            if (this.PrecipitationBeginFadeIn != rhs.PrecipitationBeginFadeIn) return false;
            if (this.PrecipitationEndFadeOut != rhs.PrecipitationEndFadeOut) return false;
            if (this.ThunderLightningBeginFadeIn != rhs.ThunderLightningBeginFadeIn) return false;
            if (this.ThunderLightningEndFadeOut != rhs.ThunderLightningEndFadeOut) return false;
            if (this.ThunderLightningFrequency != rhs.ThunderLightningFrequency) return false;
            if (this.Classification != rhs.Classification) return false;
            if (this.LightningColor != rhs.LightningColor) return false;
            if (Sounds.HasBeenSet != rhs.Sounds.HasBeenSet) return false;
            if (Sounds.HasBeenSet)
            {
                if (!this.Sounds.SequenceEqual(rhs.Sounds)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (TextureLowerLayer_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(TextureLowerLayer).CombineHashCode(ret);
            }
            if (TextureUpperLayer_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(TextureUpperLayer).CombineHashCode(ret);
            }
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (WeatherTypes.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(WeatherTypes).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(FogDayNear).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogDayFar).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogNightNear).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogNightFar).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HdrEyeAdaptSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HdrBlurRadius).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HdrBlurPasses).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HdrEmissiveMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HdrTargetLum).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HdrUpperLumClamp).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HdrBrightScale).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HdrBrightClamp).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HdrLumRampNoTex).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HdrLumRampMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HdrLumRampMax).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HdrSunlightDimmer).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HdrGrassDimmer).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HdrTreeDimmer).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(WindSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CloudSpeedLower).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CloudSpeedUpper).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(TransDelta).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SunGlare).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SunDamage).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PrecipitationBeginFadeIn).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PrecipitationEndFadeOut).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ThunderLightningBeginFadeIn).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ThunderLightningEndFadeOut).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ThunderLightningFrequency).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Classification).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LightningColor).CombineHashCode(ret);
            if (Sounds.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Sounds).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static Weather Create_Xml(
            XElement root,
            Weather_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Weather Create_Xml(
            XElement root,
            out Weather_ErrorMask errorMask,
            bool doMasks = true,
            Weather_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Weather_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Weather Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new Weather();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Weather Create_Xml(
            string path,
            Weather_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Weather Create_Xml(
            string path,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Weather Create_Xml(
            Stream stream,
            Weather_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Weather Create_Xml(
            Stream stream,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Weather_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Weather>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Weather_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Weather_ErrorMask errorMask,
            bool doMasks = true,
            Weather_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Weather_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Weather_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            WeatherCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            Weather item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "TextureLowerLayer":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.TextureLowerLayer);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String TextureLowerLayerParse,
                            errorMask: errorMask))
                        {
                            item.TextureLowerLayer = TextureLowerLayerParse;
                        }
                        else
                        {
                            item.UnsetTextureLowerLayer();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TextureUpperLayer":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.TextureUpperLayer);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String TextureUpperLayerParse,
                            errorMask: errorMask))
                        {
                            item.TextureUpperLayer = TextureUpperLayerParse;
                        }
                        else
                        {
                            item.UnsetTextureUpperLayer();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            root: root,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.UnsetModel();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WeatherTypes":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.WeatherTypes);
                        if (ListXmlTranslation<WeatherType>.Instance.Parse(
                            root: root,
                            enumer: out var WeatherTypesItem,
                            transl: LoquiXmlTranslation<WeatherType>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.WeatherTypes.SetTo(WeatherTypesItem);
                        }
                        else
                        {
                            item.WeatherTypes.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogDayNear":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.FogDayNear);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single FogDayNearParse,
                            errorMask: errorMask))
                        {
                            item.FogDayNear = FogDayNearParse;
                        }
                        else
                        {
                            item.UnsetFogDayNear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogDayFar":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.FogDayFar);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single FogDayFarParse,
                            errorMask: errorMask))
                        {
                            item.FogDayFar = FogDayFarParse;
                        }
                        else
                        {
                            item.UnsetFogDayFar();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogNightNear":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.FogNightNear);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single FogNightNearParse,
                            errorMask: errorMask))
                        {
                            item.FogNightNear = FogNightNearParse;
                        }
                        else
                        {
                            item.UnsetFogNightNear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogNightFar":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.FogNightFar);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single FogNightFarParse,
                            errorMask: errorMask))
                        {
                            item.FogNightFar = FogNightFarParse;
                        }
                        else
                        {
                            item.UnsetFogNightFar();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrEyeAdaptSpeed":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrEyeAdaptSpeed);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HdrEyeAdaptSpeedParse,
                            errorMask: errorMask))
                        {
                            item.HdrEyeAdaptSpeed = HdrEyeAdaptSpeedParse;
                        }
                        else
                        {
                            item.UnsetHdrEyeAdaptSpeed();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrBlurRadius":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrBlurRadius);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HdrBlurRadiusParse,
                            errorMask: errorMask))
                        {
                            item.HdrBlurRadius = HdrBlurRadiusParse;
                        }
                        else
                        {
                            item.UnsetHdrBlurRadius();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrBlurPasses":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrBlurPasses);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HdrBlurPassesParse,
                            errorMask: errorMask))
                        {
                            item.HdrBlurPasses = HdrBlurPassesParse;
                        }
                        else
                        {
                            item.UnsetHdrBlurPasses();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrEmissiveMult":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrEmissiveMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HdrEmissiveMultParse,
                            errorMask: errorMask))
                        {
                            item.HdrEmissiveMult = HdrEmissiveMultParse;
                        }
                        else
                        {
                            item.UnsetHdrEmissiveMult();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrTargetLum":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrTargetLum);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HdrTargetLumParse,
                            errorMask: errorMask))
                        {
                            item.HdrTargetLum = HdrTargetLumParse;
                        }
                        else
                        {
                            item.UnsetHdrTargetLum();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrUpperLumClamp":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrUpperLumClamp);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HdrUpperLumClampParse,
                            errorMask: errorMask))
                        {
                            item.HdrUpperLumClamp = HdrUpperLumClampParse;
                        }
                        else
                        {
                            item.UnsetHdrUpperLumClamp();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrBrightScale":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrBrightScale);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HdrBrightScaleParse,
                            errorMask: errorMask))
                        {
                            item.HdrBrightScale = HdrBrightScaleParse;
                        }
                        else
                        {
                            item.UnsetHdrBrightScale();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrBrightClamp":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrBrightClamp);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HdrBrightClampParse,
                            errorMask: errorMask))
                        {
                            item.HdrBrightClamp = HdrBrightClampParse;
                        }
                        else
                        {
                            item.UnsetHdrBrightClamp();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrLumRampNoTex":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrLumRampNoTex);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HdrLumRampNoTexParse,
                            errorMask: errorMask))
                        {
                            item.HdrLumRampNoTex = HdrLumRampNoTexParse;
                        }
                        else
                        {
                            item.UnsetHdrLumRampNoTex();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrLumRampMin":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrLumRampMin);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HdrLumRampMinParse,
                            errorMask: errorMask))
                        {
                            item.HdrLumRampMin = HdrLumRampMinParse;
                        }
                        else
                        {
                            item.UnsetHdrLumRampMin();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrLumRampMax":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrLumRampMax);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HdrLumRampMaxParse,
                            errorMask: errorMask))
                        {
                            item.HdrLumRampMax = HdrLumRampMaxParse;
                        }
                        else
                        {
                            item.UnsetHdrLumRampMax();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrSunlightDimmer":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrSunlightDimmer);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HdrSunlightDimmerParse,
                            errorMask: errorMask))
                        {
                            item.HdrSunlightDimmer = HdrSunlightDimmerParse;
                        }
                        else
                        {
                            item.UnsetHdrSunlightDimmer();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrGrassDimmer":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrGrassDimmer);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HdrGrassDimmerParse,
                            errorMask: errorMask))
                        {
                            item.HdrGrassDimmer = HdrGrassDimmerParse;
                        }
                        else
                        {
                            item.UnsetHdrGrassDimmer();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrTreeDimmer":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrTreeDimmer);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HdrTreeDimmerParse,
                            errorMask: errorMask))
                        {
                            item.HdrTreeDimmer = HdrTreeDimmerParse;
                        }
                        else
                        {
                            item.UnsetHdrTreeDimmer();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WindSpeed":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.WindSpeed);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte WindSpeedParse,
                            errorMask: errorMask))
                        {
                            item.WindSpeed = WindSpeedParse;
                        }
                        else
                        {
                            item.UnsetWindSpeed();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CloudSpeedLower":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.CloudSpeedLower);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte CloudSpeedLowerParse,
                            errorMask: errorMask))
                        {
                            item.CloudSpeedLower = CloudSpeedLowerParse;
                        }
                        else
                        {
                            item.UnsetCloudSpeedLower();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CloudSpeedUpper":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.CloudSpeedUpper);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte CloudSpeedUpperParse,
                            errorMask: errorMask))
                        {
                            item.CloudSpeedUpper = CloudSpeedUpperParse;
                        }
                        else
                        {
                            item.UnsetCloudSpeedUpper();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TransDelta":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.TransDelta);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte TransDeltaParse,
                            errorMask: errorMask))
                        {
                            item.TransDelta = TransDeltaParse;
                        }
                        else
                        {
                            item.UnsetTransDelta();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunGlare":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.SunGlare);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte SunGlareParse,
                            errorMask: errorMask))
                        {
                            item.SunGlare = SunGlareParse;
                        }
                        else
                        {
                            item.UnsetSunGlare();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunDamage":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.SunDamage);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte SunDamageParse,
                            errorMask: errorMask))
                        {
                            item.SunDamage = SunDamageParse;
                        }
                        else
                        {
                            item.UnsetSunDamage();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PrecipitationBeginFadeIn":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.PrecipitationBeginFadeIn);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte PrecipitationBeginFadeInParse,
                            errorMask: errorMask))
                        {
                            item.PrecipitationBeginFadeIn = PrecipitationBeginFadeInParse;
                        }
                        else
                        {
                            item.UnsetPrecipitationBeginFadeIn();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PrecipitationEndFadeOut":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.PrecipitationEndFadeOut);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte PrecipitationEndFadeOutParse,
                            errorMask: errorMask))
                        {
                            item.PrecipitationEndFadeOut = PrecipitationEndFadeOutParse;
                        }
                        else
                        {
                            item.UnsetPrecipitationEndFadeOut();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ThunderLightningBeginFadeIn":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.ThunderLightningBeginFadeIn);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte ThunderLightningBeginFadeInParse,
                            errorMask: errorMask))
                        {
                            item.ThunderLightningBeginFadeIn = ThunderLightningBeginFadeInParse;
                        }
                        else
                        {
                            item.UnsetThunderLightningBeginFadeIn();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ThunderLightningEndFadeOut":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.ThunderLightningEndFadeOut);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte ThunderLightningEndFadeOutParse,
                            errorMask: errorMask))
                        {
                            item.ThunderLightningEndFadeOut = ThunderLightningEndFadeOutParse;
                        }
                        else
                        {
                            item.UnsetThunderLightningEndFadeOut();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ThunderLightningFrequency":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.ThunderLightningFrequency);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte ThunderLightningFrequencyParse,
                            errorMask: errorMask))
                        {
                            item.ThunderLightningFrequency = ThunderLightningFrequencyParse;
                        }
                        else
                        {
                            item.UnsetThunderLightningFrequency();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Classification":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.Classification);
                        if (EnumXmlTranslation<Weather.WeatherClassification>.Instance.Parse(
                            root: root,
                            item: out Weather.WeatherClassification ClassificationParse,
                            errorMask: errorMask))
                        {
                            item.Classification = ClassificationParse;
                        }
                        else
                        {
                            item.UnsetClassification();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LightningColor":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.LightningColor);
                        if (ColorXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Color LightningColorParse,
                            errorMask: errorMask))
                        {
                            item.LightningColor = LightningColorParse;
                        }
                        else
                        {
                            item.UnsetLightningColor();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.Sounds);
                        if (ListXmlTranslation<WeatherSound>.Instance.Parse(
                            root: root,
                            enumer: out var SoundsItem,
                            transl: LoquiXmlTranslation<WeatherSound>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Sounds.SetTo(SoundsItem);
                        }
                        else
                        {
                            item.Sounds.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecord.Fill_Xml_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                case Weather_FieldIndex.Model:
                    return _hasBeenSetTracker[index];
                case Weather_FieldIndex.WeatherTypes:
                    return WeatherTypes.HasBeenSet;
                case Weather_FieldIndex.Sounds:
                    return Sounds.HasBeenSet;
                case Weather_FieldIndex.FogDayNear:
                case Weather_FieldIndex.FogDayFar:
                case Weather_FieldIndex.FogNightNear:
                case Weather_FieldIndex.FogNightFar:
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                case Weather_FieldIndex.HdrBlurRadius:
                case Weather_FieldIndex.HdrBlurPasses:
                case Weather_FieldIndex.HdrEmissiveMult:
                case Weather_FieldIndex.HdrTargetLum:
                case Weather_FieldIndex.HdrUpperLumClamp:
                case Weather_FieldIndex.HdrBrightScale:
                case Weather_FieldIndex.HdrBrightClamp:
                case Weather_FieldIndex.HdrLumRampNoTex:
                case Weather_FieldIndex.HdrLumRampMin:
                case Weather_FieldIndex.HdrLumRampMax:
                case Weather_FieldIndex.HdrSunlightDimmer:
                case Weather_FieldIndex.HdrGrassDimmer:
                case Weather_FieldIndex.HdrTreeDimmer:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.CloudSpeedLower:
                case Weather_FieldIndex.CloudSpeedUpper:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Classification:
                case Weather_FieldIndex.LightningColor:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region IPropertySupporter String
        String IPropertySupporter<String>.Get(int index)
        {
            return GetString(index: index);
        }

        protected override String GetString(int index)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    return TextureLowerLayer;
                case Weather_FieldIndex.TextureUpperLayer:
                    return TextureUpperLayer;
                default:
                    return base.GetString(index: index);
            }
        }

        void IPropertySupporter<String>.Set(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetString(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected override void SetString(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    SetTextureLowerLayer(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.TextureUpperLayer:
                    SetTextureUpperLayer(item, hasBeenSet, cmds);
                    break;
                default:
                    base.SetString(
                        index: index,
                        item: item,
                        hasBeenSet: hasBeenSet,
                        cmds: cmds);
                    break;
            }
        }

        bool IPropertySupporter<String>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<String>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<String>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetString(
                index: index,
                cmds: cmds);
        }

        protected override void UnsetString(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    SetTextureLowerLayer(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.TextureUpperLayer:
                    SetTextureUpperLayer(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                default:
                    base.UnsetString(
                        index: index,
                        cmds: cmds);
                    break;
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<String> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_String_subscriptions == null)
            {
                _String_subscriptions = new ObjectCentralizationSubscriptions<String>();
            }
            _String_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Unsubscribe(
            int index,
            object owner)
        {
            _String_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<String>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        String IPropertySupporter<String>.DefaultValue(int index)
        {
            return DefaultValueString(index: index);
        }

        protected override String DefaultValueString(int index)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                    return default(String);
                default:
                    return base.DefaultValueString(index: index);
            }
        }

        #endregion

        #region IPropertySupporter Model
        protected ObjectCentralizationSubscriptions<Model> _Model_subscriptions;
        Model IPropertySupporter<Model>.Get(int index)
        {
            return GetModel(index: index);
        }

        protected Model GetModel(int index)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.Model:
                    return Model;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        void IPropertySupporter<Model>.Set(
            int index,
            Model item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetModel(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetModel(
            int index,
            Model item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.Model:
                    SetModel(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        bool IPropertySupporter<Model>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Model>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Model>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetModel(
                index: index,
                cmds: cmds);
        }

        protected void UnsetModel(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.Model:
                    SetModel(
                        item: default(Model),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Model>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Model> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Model_subscriptions == null)
            {
                _Model_subscriptions = new ObjectCentralizationSubscriptions<Model>();
            }
            _Model_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Model>.Unsubscribe(
            int index,
            object owner)
        {
            _Model_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Model>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Model IPropertySupporter<Model>.DefaultValue(int index)
        {
            return DefaultValueModel(index: index);
        }

        protected Model DefaultValueModel(int index)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.Model:
                    return default(Model);
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Single
        protected ObjectCentralizationSubscriptions<Single> _Single_subscriptions;
        Single IPropertySupporter<Single>.Get(int index)
        {
            return GetSingle(index: index);
        }

        protected Single GetSingle(int index)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.FogDayNear:
                    return FogDayNear;
                case Weather_FieldIndex.FogDayFar:
                    return FogDayFar;
                case Weather_FieldIndex.FogNightNear:
                    return FogNightNear;
                case Weather_FieldIndex.FogNightFar:
                    return FogNightFar;
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    return HdrEyeAdaptSpeed;
                case Weather_FieldIndex.HdrBlurRadius:
                    return HdrBlurRadius;
                case Weather_FieldIndex.HdrBlurPasses:
                    return HdrBlurPasses;
                case Weather_FieldIndex.HdrEmissiveMult:
                    return HdrEmissiveMult;
                case Weather_FieldIndex.HdrTargetLum:
                    return HdrTargetLum;
                case Weather_FieldIndex.HdrUpperLumClamp:
                    return HdrUpperLumClamp;
                case Weather_FieldIndex.HdrBrightScale:
                    return HdrBrightScale;
                case Weather_FieldIndex.HdrBrightClamp:
                    return HdrBrightClamp;
                case Weather_FieldIndex.HdrLumRampNoTex:
                    return HdrLumRampNoTex;
                case Weather_FieldIndex.HdrLumRampMin:
                    return HdrLumRampMin;
                case Weather_FieldIndex.HdrLumRampMax:
                    return HdrLumRampMax;
                case Weather_FieldIndex.HdrSunlightDimmer:
                    return HdrSunlightDimmer;
                case Weather_FieldIndex.HdrGrassDimmer:
                    return HdrGrassDimmer;
                case Weather_FieldIndex.HdrTreeDimmer:
                    return HdrTreeDimmer;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        void IPropertySupporter<Single>.Set(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetSingle(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetSingle(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.FogDayNear:
                    SetFogDayNear(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.FogDayFar:
                    SetFogDayFar(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.FogNightNear:
                    SetFogNightNear(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.FogNightFar:
                    SetFogNightFar(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    SetHdrEyeAdaptSpeed(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.HdrBlurRadius:
                    SetHdrBlurRadius(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.HdrBlurPasses:
                    SetHdrBlurPasses(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.HdrEmissiveMult:
                    SetHdrEmissiveMult(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.HdrTargetLum:
                    SetHdrTargetLum(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.HdrUpperLumClamp:
                    SetHdrUpperLumClamp(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.HdrBrightScale:
                    SetHdrBrightScale(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.HdrBrightClamp:
                    SetHdrBrightClamp(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.HdrLumRampNoTex:
                    SetHdrLumRampNoTex(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.HdrLumRampMin:
                    SetHdrLumRampMin(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.HdrLumRampMax:
                    SetHdrLumRampMax(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.HdrSunlightDimmer:
                    SetHdrSunlightDimmer(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.HdrGrassDimmer:
                    SetHdrGrassDimmer(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.HdrTreeDimmer:
                    SetHdrTreeDimmer(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        bool IPropertySupporter<Single>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Single>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Single>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetSingle(
                index: index,
                cmds: cmds);
        }

        protected void UnsetSingle(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.FogDayNear:
                    SetFogDayNear(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.FogDayFar:
                    SetFogDayFar(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.FogNightNear:
                    SetFogNightNear(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.FogNightFar:
                    SetFogNightFar(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    SetHdrEyeAdaptSpeed(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.HdrBlurRadius:
                    SetHdrBlurRadius(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.HdrBlurPasses:
                    SetHdrBlurPasses(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.HdrEmissiveMult:
                    SetHdrEmissiveMult(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.HdrTargetLum:
                    SetHdrTargetLum(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.HdrUpperLumClamp:
                    SetHdrUpperLumClamp(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.HdrBrightScale:
                    SetHdrBrightScale(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.HdrBrightClamp:
                    SetHdrBrightClamp(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.HdrLumRampNoTex:
                    SetHdrLumRampNoTex(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.HdrLumRampMin:
                    SetHdrLumRampMin(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.HdrLumRampMax:
                    SetHdrLumRampMax(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.HdrSunlightDimmer:
                    SetHdrSunlightDimmer(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.HdrGrassDimmer:
                    SetHdrGrassDimmer(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.HdrTreeDimmer:
                    SetHdrTreeDimmer(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Single> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Single_subscriptions == null)
            {
                _Single_subscriptions = new ObjectCentralizationSubscriptions<Single>();
            }
            _Single_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Unsubscribe(
            int index,
            object owner)
        {
            _Single_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Single>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Single IPropertySupporter<Single>.DefaultValue(int index)
        {
            return DefaultValueSingle(index: index);
        }

        protected Single DefaultValueSingle(int index)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.FogDayNear:
                case Weather_FieldIndex.FogDayFar:
                case Weather_FieldIndex.FogNightNear:
                case Weather_FieldIndex.FogNightFar:
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                case Weather_FieldIndex.HdrBlurRadius:
                case Weather_FieldIndex.HdrBlurPasses:
                case Weather_FieldIndex.HdrEmissiveMult:
                case Weather_FieldIndex.HdrTargetLum:
                case Weather_FieldIndex.HdrUpperLumClamp:
                case Weather_FieldIndex.HdrBrightScale:
                case Weather_FieldIndex.HdrBrightClamp:
                case Weather_FieldIndex.HdrLumRampNoTex:
                case Weather_FieldIndex.HdrLumRampMin:
                case Weather_FieldIndex.HdrLumRampMax:
                case Weather_FieldIndex.HdrSunlightDimmer:
                case Weather_FieldIndex.HdrGrassDimmer:
                case Weather_FieldIndex.HdrTreeDimmer:
                    return default(Single);
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Byte
        protected ObjectCentralizationSubscriptions<Byte> _Byte_subscriptions;
        Byte IPropertySupporter<Byte>.Get(int index)
        {
            return GetByte(index: index);
        }

        protected Byte GetByte(int index)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.WindSpeed:
                    return WindSpeed;
                case Weather_FieldIndex.CloudSpeedLower:
                    return CloudSpeedLower;
                case Weather_FieldIndex.CloudSpeedUpper:
                    return CloudSpeedUpper;
                case Weather_FieldIndex.TransDelta:
                    return TransDelta;
                case Weather_FieldIndex.SunGlare:
                    return SunGlare;
                case Weather_FieldIndex.SunDamage:
                    return SunDamage;
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    return PrecipitationBeginFadeIn;
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    return PrecipitationEndFadeOut;
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    return ThunderLightningBeginFadeIn;
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    return ThunderLightningEndFadeOut;
                case Weather_FieldIndex.ThunderLightningFrequency:
                    return ThunderLightningFrequency;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        void IPropertySupporter<Byte>.Set(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByte(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByte(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.WindSpeed:
                    SetWindSpeed(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.CloudSpeedLower:
                    SetCloudSpeedLower(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.CloudSpeedUpper:
                    SetCloudSpeedUpper(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.TransDelta:
                    SetTransDelta(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.SunGlare:
                    SetSunGlare(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.SunDamage:
                    SetSunDamage(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    SetPrecipitationBeginFadeIn(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    SetPrecipitationEndFadeOut(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    SetThunderLightningBeginFadeIn(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    SetThunderLightningEndFadeOut(item, hasBeenSet, cmds);
                    break;
                case Weather_FieldIndex.ThunderLightningFrequency:
                    SetThunderLightningFrequency(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        bool IPropertySupporter<Byte>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Byte>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByte(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByte(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.WindSpeed:
                    SetWindSpeed(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.CloudSpeedLower:
                    SetCloudSpeedLower(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.CloudSpeedUpper:
                    SetCloudSpeedUpper(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.TransDelta:
                    SetTransDelta(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.SunGlare:
                    SetSunGlare(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.SunDamage:
                    SetSunDamage(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    SetPrecipitationBeginFadeIn(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    SetPrecipitationEndFadeOut(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    SetThunderLightningBeginFadeIn(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    SetThunderLightningEndFadeOut(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case Weather_FieldIndex.ThunderLightningFrequency:
                    SetThunderLightningFrequency(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Byte_subscriptions == null)
            {
                _Byte_subscriptions = new ObjectCentralizationSubscriptions<Byte>();
            }
            _Byte_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Unsubscribe(
            int index,
            object owner)
        {
            _Byte_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte IPropertySupporter<Byte>.DefaultValue(int index)
        {
            return DefaultValueByte(index: index);
        }

        protected Byte DefaultValueByte(int index)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.CloudSpeedLower:
                case Weather_FieldIndex.CloudSpeedUpper:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                    return default(Byte);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Weather.WeatherClassification
        protected ObjectCentralizationSubscriptions<Weather.WeatherClassification> _WeatherWeatherClassification_subscriptions;
        Weather.WeatherClassification IPropertySupporter<Weather.WeatherClassification>.Get(int index)
        {
            return GetWeatherWeatherClassification(index: index);
        }

        protected Weather.WeatherClassification GetWeatherWeatherClassification(int index)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.Classification:
                    return Classification;
                default:
                    throw new ArgumentException($"Unknown index for field type Weather.WeatherClassification: {index}");
            }
        }

        void IPropertySupporter<Weather.WeatherClassification>.Set(
            int index,
            Weather.WeatherClassification item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetWeatherWeatherClassification(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetWeatherWeatherClassification(
            int index,
            Weather.WeatherClassification item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.Classification:
                    SetClassification(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Weather.WeatherClassification: {index}");
            }
        }

        bool IPropertySupporter<Weather.WeatherClassification>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Weather.WeatherClassification>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Weather.WeatherClassification>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetWeatherWeatherClassification(
                index: index,
                cmds: cmds);
        }

        protected void UnsetWeatherWeatherClassification(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.Classification:
                    SetClassification(
                        item: default(Weather.WeatherClassification),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Weather.WeatherClassification: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Weather.WeatherClassification>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Weather.WeatherClassification> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_WeatherWeatherClassification_subscriptions == null)
            {
                _WeatherWeatherClassification_subscriptions = new ObjectCentralizationSubscriptions<Weather.WeatherClassification>();
            }
            _WeatherWeatherClassification_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Weather.WeatherClassification>.Unsubscribe(
            int index,
            object owner)
        {
            _WeatherWeatherClassification_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Weather.WeatherClassification>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Weather.WeatherClassification IPropertySupporter<Weather.WeatherClassification>.DefaultValue(int index)
        {
            return DefaultValueWeatherWeatherClassification(index: index);
        }

        protected Weather.WeatherClassification DefaultValueWeatherWeatherClassification(int index)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.Classification:
                    return default(Weather.WeatherClassification);
                default:
                    throw new ArgumentException($"Unknown index for field type Weather.WeatherClassification: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Color
        protected ObjectCentralizationSubscriptions<Color> _Color_subscriptions;
        Color IPropertySupporter<Color>.Get(int index)
        {
            return GetColor(index: index);
        }

        protected Color GetColor(int index)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.LightningColor:
                    return LightningColor;
                default:
                    throw new ArgumentException($"Unknown index for field type Color: {index}");
            }
        }

        void IPropertySupporter<Color>.Set(
            int index,
            Color item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetColor(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetColor(
            int index,
            Color item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.LightningColor:
                    SetLightningColor(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Color: {index}");
            }
        }

        bool IPropertySupporter<Color>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Color>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Color>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetColor(
                index: index,
                cmds: cmds);
        }

        protected void UnsetColor(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.LightningColor:
                    SetLightningColor(
                        item: default(Color),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Color: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Color>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Color> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Color_subscriptions == null)
            {
                _Color_subscriptions = new ObjectCentralizationSubscriptions<Color>();
            }
            _Color_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Color>.Unsubscribe(
            int index,
            object owner)
        {
            _Color_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Color>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Color IPropertySupporter<Color>.DefaultValue(int index)
        {
            return DefaultValueColor(index: index);
        }

        protected Color DefaultValueColor(int index)
        {
            switch ((Weather_FieldIndex)index)
            {
                case Weather_FieldIndex.LightningColor:
                    return default(Color);
                default:
                    throw new ArgumentException($"Unknown index for field type Color: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Weather_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Sounds.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Weather Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Weather Create_Binary(
            MutagenFrame frame,
            out Weather_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Weather_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Weather Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Weather>(
                record: new Weather(),
                frame: frame,
                errorMask: errorMask,
                recType: Weather_Registration.WTHR_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Weather Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Weather Create_Binary(
            string path,
            out Weather_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Weather Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Weather Create_Binary(
            Stream stream,
            out Weather_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Weather_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Weather_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out Weather_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Weather_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Weather_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            WeatherCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Weather item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Weather item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4D414E43: // CNAM
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.TextureLowerLayer);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String TextureLowerLayerParse,
                            errorMask: errorMask))
                        {
                            item.TextureLowerLayer = TextureLowerLayerParse;
                        }
                        else
                        {
                            item.UnsetTextureLowerLayer();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.TextureLowerLayer);
                case 0x4D414E44: // DNAM
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.TextureUpperLayer);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String TextureUpperLayerParse,
                            errorMask: errorMask))
                        {
                            item.TextureUpperLayer = TextureUpperLayerParse;
                        }
                        else
                        {
                            item.UnsetTextureUpperLayer();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.TextureUpperLayer);
                case 0x4C444F4D: // MODL
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.Model);
                        if (LoquiBinaryTranslation<Model>.Instance.Parse(
                            frame: frame.Spawn(snapToFinalPosition: false),
                            item: out Model ModelParse,
                            errorMask: errorMask))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.UnsetModel();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.Model);
                case 0x304D414E: // NAM0
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherType>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.WeatherTypes,
                        fieldIndex: (int)Weather_FieldIndex.WeatherTypes,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<WeatherType>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.WeatherTypes);
                case 0x4D414E46: // FNAM
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.FogDayNear);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FogDayNearParse,
                                errorMask: errorMask))
                            {
                                item.FogDayNear = FogDayNearParse;
                            }
                            else
                            {
                                item.UnsetFogDayNear();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.FogDayFar);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FogDayFarParse,
                                errorMask: errorMask))
                            {
                                item.FogDayFar = FogDayFarParse;
                            }
                            else
                            {
                                item.UnsetFogDayFar();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.FogNightNear);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FogNightNearParse,
                                errorMask: errorMask))
                            {
                                item.FogNightNear = FogNightNearParse;
                            }
                            else
                            {
                                item.UnsetFogNightNear();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.FogNightFar);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FogNightFarParse,
                                errorMask: errorMask))
                            {
                                item.FogNightFar = FogNightFarParse;
                            }
                            else
                            {
                                item.UnsetFogNightFar();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.FogNightFar);
                case 0x4D414E48: // HNAM
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.HdrEyeAdaptSpeed);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HdrEyeAdaptSpeedParse,
                                errorMask: errorMask))
                            {
                                item.HdrEyeAdaptSpeed = HdrEyeAdaptSpeedParse;
                            }
                            else
                            {
                                item.UnsetHdrEyeAdaptSpeed();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.HdrBlurRadius);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HdrBlurRadiusParse,
                                errorMask: errorMask))
                            {
                                item.HdrBlurRadius = HdrBlurRadiusParse;
                            }
                            else
                            {
                                item.UnsetHdrBlurRadius();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.HdrBlurPasses);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HdrBlurPassesParse,
                                errorMask: errorMask))
                            {
                                item.HdrBlurPasses = HdrBlurPassesParse;
                            }
                            else
                            {
                                item.UnsetHdrBlurPasses();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.HdrEmissiveMult);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HdrEmissiveMultParse,
                                errorMask: errorMask))
                            {
                                item.HdrEmissiveMult = HdrEmissiveMultParse;
                            }
                            else
                            {
                                item.UnsetHdrEmissiveMult();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.HdrTargetLum);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HdrTargetLumParse,
                                errorMask: errorMask))
                            {
                                item.HdrTargetLum = HdrTargetLumParse;
                            }
                            else
                            {
                                item.UnsetHdrTargetLum();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.HdrUpperLumClamp);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HdrUpperLumClampParse,
                                errorMask: errorMask))
                            {
                                item.HdrUpperLumClamp = HdrUpperLumClampParse;
                            }
                            else
                            {
                                item.UnsetHdrUpperLumClamp();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.HdrBrightScale);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HdrBrightScaleParse,
                                errorMask: errorMask))
                            {
                                item.HdrBrightScale = HdrBrightScaleParse;
                            }
                            else
                            {
                                item.UnsetHdrBrightScale();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.HdrBrightClamp);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HdrBrightClampParse,
                                errorMask: errorMask))
                            {
                                item.HdrBrightClamp = HdrBrightClampParse;
                            }
                            else
                            {
                                item.UnsetHdrBrightClamp();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.HdrLumRampNoTex);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HdrLumRampNoTexParse,
                                errorMask: errorMask))
                            {
                                item.HdrLumRampNoTex = HdrLumRampNoTexParse;
                            }
                            else
                            {
                                item.UnsetHdrLumRampNoTex();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.HdrLumRampMin);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HdrLumRampMinParse,
                                errorMask: errorMask))
                            {
                                item.HdrLumRampMin = HdrLumRampMinParse;
                            }
                            else
                            {
                                item.UnsetHdrLumRampMin();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.HdrLumRampMax);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HdrLumRampMaxParse,
                                errorMask: errorMask))
                            {
                                item.HdrLumRampMax = HdrLumRampMaxParse;
                            }
                            else
                            {
                                item.UnsetHdrLumRampMax();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.HdrSunlightDimmer);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HdrSunlightDimmerParse,
                                errorMask: errorMask))
                            {
                                item.HdrSunlightDimmer = HdrSunlightDimmerParse;
                            }
                            else
                            {
                                item.UnsetHdrSunlightDimmer();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.HdrGrassDimmer);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HdrGrassDimmerParse,
                                errorMask: errorMask))
                            {
                                item.HdrGrassDimmer = HdrGrassDimmerParse;
                            }
                            else
                            {
                                item.UnsetHdrGrassDimmer();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.HdrTreeDimmer);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HdrTreeDimmerParse,
                                errorMask: errorMask))
                            {
                                item.HdrTreeDimmer = HdrTreeDimmerParse;
                            }
                            else
                            {
                                item.UnsetHdrTreeDimmer();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.HdrTreeDimmer);
                case 0x41544144: // DATA
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.WindSpeed);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte WindSpeedParse,
                                errorMask: errorMask))
                            {
                                item.WindSpeed = WindSpeedParse;
                            }
                            else
                            {
                                item.UnsetWindSpeed();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.CloudSpeedLower);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte CloudSpeedLowerParse,
                                errorMask: errorMask))
                            {
                                item.CloudSpeedLower = CloudSpeedLowerParse;
                            }
                            else
                            {
                                item.UnsetCloudSpeedLower();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.CloudSpeedUpper);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte CloudSpeedUpperParse,
                                errorMask: errorMask))
                            {
                                item.CloudSpeedUpper = CloudSpeedUpperParse;
                            }
                            else
                            {
                                item.UnsetCloudSpeedUpper();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.TransDelta);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte TransDeltaParse,
                                errorMask: errorMask))
                            {
                                item.TransDelta = TransDeltaParse;
                            }
                            else
                            {
                                item.UnsetTransDelta();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.SunGlare);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte SunGlareParse,
                                errorMask: errorMask))
                            {
                                item.SunGlare = SunGlareParse;
                            }
                            else
                            {
                                item.UnsetSunGlare();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.SunDamage);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte SunDamageParse,
                                errorMask: errorMask))
                            {
                                item.SunDamage = SunDamageParse;
                            }
                            else
                            {
                                item.UnsetSunDamage();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.PrecipitationBeginFadeIn);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte PrecipitationBeginFadeInParse,
                                errorMask: errorMask))
                            {
                                item.PrecipitationBeginFadeIn = PrecipitationBeginFadeInParse;
                            }
                            else
                            {
                                item.UnsetPrecipitationBeginFadeIn();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.PrecipitationEndFadeOut);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte PrecipitationEndFadeOutParse,
                                errorMask: errorMask))
                            {
                                item.PrecipitationEndFadeOut = PrecipitationEndFadeOutParse;
                            }
                            else
                            {
                                item.UnsetPrecipitationEndFadeOut();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.ThunderLightningBeginFadeIn);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte ThunderLightningBeginFadeInParse,
                                errorMask: errorMask))
                            {
                                item.ThunderLightningBeginFadeIn = ThunderLightningBeginFadeInParse;
                            }
                            else
                            {
                                item.UnsetThunderLightningBeginFadeIn();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.ThunderLightningEndFadeOut);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte ThunderLightningEndFadeOutParse,
                                errorMask: errorMask))
                            {
                                item.ThunderLightningEndFadeOut = ThunderLightningEndFadeOutParse;
                            }
                            else
                            {
                                item.UnsetThunderLightningEndFadeOut();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.ThunderLightningFrequency);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte ThunderLightningFrequencyParse,
                                errorMask: errorMask))
                            {
                                item.ThunderLightningFrequency = ThunderLightningFrequencyParse;
                            }
                            else
                            {
                                item.UnsetThunderLightningFrequency();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.Classification);
                            if (EnumBinaryTranslation<Weather.WeatherClassification>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(1),
                                item: out Weather.WeatherClassification ClassificationParse,
                                errorMask: errorMask))
                            {
                                item.Classification = ClassificationParse;
                            }
                            else
                            {
                                item.UnsetClassification();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Weather_FieldIndex.LightningColor);
                            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Color LightningColorParse,
                                errorMask: errorMask))
                            {
                                item.LightningColor = LightningColorParse;
                            }
                            else
                            {
                                item.UnsetLightningColor();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.LightningColor);
                case 0x4D414E53: // SNAM
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherSound>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Weather_Registration.SNAM_HEADER,
                        item: item.Sounds,
                        fieldIndex: (int)Weather_FieldIndex.Sounds,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<WeatherSound>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.Sounds);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Weather Copy(
            Weather_CopyMask copyMask = null,
            IWeatherGetter def = null)
        {
            return Weather.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Weather Copy(
            IWeather item,
            Weather_CopyMask copyMask = null,
            IWeatherGetter def = null)
        {
            Weather ret;
            if (item.GetType().Equals(typeof(Weather)))
            {
                ret = new Weather();
            }
            else
            {
                ret = (Weather)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Weather Copy_ToLoqui(
            IWeatherGetter item,
            Weather_CopyMask copyMask = null,
            IWeatherGetter def = null)
        {
            Weather ret;
            if (item.GetType().Equals(typeof(Weather)))
            {
                ret = new Weather() as Weather;
            }
            else
            {
                ret = (Weather)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IWeatherGetter rhs,
            Weather_CopyMask copyMask,
            IWeatherGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IWeatherGetter rhs,
            out Weather_ErrorMask errorMask,
            Weather_CopyMask copyMask = null,
            IWeatherGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WeatherCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Weather_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IWeatherGetter rhs,
            ErrorMaskBuilder errorMask,
            Weather_CopyMask copyMask = null,
            IWeatherGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            WeatherCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    this.SetTextureLowerLayer(
                        (String)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.TextureUpperLayer:
                    this.SetTextureUpperLayer(
                        (String)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.Model:
                    this.SetModel(
                        (Model)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.WeatherTypes:
                    this._WeatherTypes.SetTo((IEnumerable<WeatherType>)obj, cmds);
                    break;
                case Weather_FieldIndex.FogDayNear:
                    this.SetFogDayNear(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.FogDayFar:
                    this.SetFogDayFar(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.FogNightNear:
                    this.SetFogNightNear(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.FogNightFar:
                    this.SetFogNightFar(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    this.SetHdrEyeAdaptSpeed(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.HdrBlurRadius:
                    this.SetHdrBlurRadius(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.HdrBlurPasses:
                    this.SetHdrBlurPasses(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.HdrEmissiveMult:
                    this.SetHdrEmissiveMult(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.HdrTargetLum:
                    this.SetHdrTargetLum(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.HdrUpperLumClamp:
                    this.SetHdrUpperLumClamp(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.HdrBrightScale:
                    this.SetHdrBrightScale(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.HdrBrightClamp:
                    this.SetHdrBrightClamp(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.HdrLumRampNoTex:
                    this.SetHdrLumRampNoTex(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.HdrLumRampMin:
                    this.SetHdrLumRampMin(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.HdrLumRampMax:
                    this.SetHdrLumRampMax(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.HdrSunlightDimmer:
                    this.SetHdrSunlightDimmer(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.HdrGrassDimmer:
                    this.SetHdrGrassDimmer(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.HdrTreeDimmer:
                    this.SetHdrTreeDimmer(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.WindSpeed:
                    this.SetWindSpeed(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.CloudSpeedLower:
                    this.SetCloudSpeedLower(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.CloudSpeedUpper:
                    this.SetCloudSpeedUpper(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.TransDelta:
                    this.SetTransDelta(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.SunGlare:
                    this.SetSunGlare(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.SunDamage:
                    this.SetSunDamage(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    this.SetPrecipitationBeginFadeIn(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    this.SetPrecipitationEndFadeOut(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    this.SetThunderLightningBeginFadeIn(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    this.SetThunderLightningEndFadeOut(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.ThunderLightningFrequency:
                    this.SetThunderLightningFrequency(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.Classification:
                    this.SetClassification(
                        (Weather.WeatherClassification)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.LightningColor:
                    this.SetLightningColor(
                        (Color)obj,
                        cmds: cmds);
                    break;
                case Weather_FieldIndex.Sounds:
                    this._Sounds.SetTo((IEnumerable<WeatherSound>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            WeatherCommon.Clear(this, cmds);
        }


        public new static Weather Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Weather();
            foreach (var pair in fields)
            {
                CopyInInternal_Weather(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Weather(Weather obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Weather_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    obj.SetTextureLowerLayer(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.TextureUpperLayer:
                    obj.SetTextureUpperLayer(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.Model:
                    obj.SetModel(
                        (Model)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.WeatherTypes:
                    obj._WeatherTypes.SetTo((IEnumerable<WeatherType>)pair.Value, null);
                    break;
                case Weather_FieldIndex.FogDayNear:
                    obj.SetFogDayNear(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.FogDayFar:
                    obj.SetFogDayFar(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.FogNightNear:
                    obj.SetFogNightNear(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.FogNightFar:
                    obj.SetFogNightFar(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    obj.SetHdrEyeAdaptSpeed(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.HdrBlurRadius:
                    obj.SetHdrBlurRadius(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.HdrBlurPasses:
                    obj.SetHdrBlurPasses(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.HdrEmissiveMult:
                    obj.SetHdrEmissiveMult(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.HdrTargetLum:
                    obj.SetHdrTargetLum(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.HdrUpperLumClamp:
                    obj.SetHdrUpperLumClamp(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.HdrBrightScale:
                    obj.SetHdrBrightScale(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.HdrBrightClamp:
                    obj.SetHdrBrightClamp(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.HdrLumRampNoTex:
                    obj.SetHdrLumRampNoTex(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.HdrLumRampMin:
                    obj.SetHdrLumRampMin(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.HdrLumRampMax:
                    obj.SetHdrLumRampMax(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.HdrSunlightDimmer:
                    obj.SetHdrSunlightDimmer(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.HdrGrassDimmer:
                    obj.SetHdrGrassDimmer(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.HdrTreeDimmer:
                    obj.SetHdrTreeDimmer(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.WindSpeed:
                    obj.SetWindSpeed(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.CloudSpeedLower:
                    obj.SetCloudSpeedLower(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.CloudSpeedUpper:
                    obj.SetCloudSpeedUpper(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.TransDelta:
                    obj.SetTransDelta(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.SunGlare:
                    obj.SetSunGlare(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.SunDamage:
                    obj.SetSunDamage(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    obj.SetPrecipitationBeginFadeIn(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    obj.SetPrecipitationEndFadeOut(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    obj.SetThunderLightningBeginFadeIn(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    obj.SetThunderLightningEndFadeOut(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.ThunderLightningFrequency:
                    obj.SetThunderLightningFrequency(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.Classification:
                    obj.SetClassification(
                        (Weather.WeatherClassification)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.LightningColor:
                    obj.SetLightningColor(
                        (Color)pair.Value,
                        cmds: null);
                    break;
                case Weather_FieldIndex.Sounds:
                    obj._Sounds.SetTo((IEnumerable<WeatherSound>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Weather obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IWeather : IWeatherGetter, IMajorRecord, ILoquiClass<IWeather, IWeatherGetter>, ILoquiClass<Weather, IWeatherGetter>
    {
        new String TextureLowerLayer { get; set; }
        new INotifyingSetItem<String> TextureLowerLayer_Property { get; }

        new String TextureUpperLayer { get; set; }
        new INotifyingSetItem<String> TextureUpperLayer_Property { get; }

        new Model Model { get; set; }
        new INotifyingSetItem<Model> Model_Property { get; }

        new INotifyingList<WeatherType> WeatherTypes { get; }
        new Single FogDayNear { get; set; }
        new INotifyingItem<Single> FogDayNear_Property { get; }

        new Single FogDayFar { get; set; }
        new INotifyingItem<Single> FogDayFar_Property { get; }

        new Single FogNightNear { get; set; }
        new INotifyingItem<Single> FogNightNear_Property { get; }

        new Single FogNightFar { get; set; }
        new INotifyingItem<Single> FogNightFar_Property { get; }

        new Single HdrEyeAdaptSpeed { get; set; }
        new INotifyingItem<Single> HdrEyeAdaptSpeed_Property { get; }

        new Single HdrBlurRadius { get; set; }
        new INotifyingItem<Single> HdrBlurRadius_Property { get; }

        new Single HdrBlurPasses { get; set; }
        new INotifyingItem<Single> HdrBlurPasses_Property { get; }

        new Single HdrEmissiveMult { get; set; }
        new INotifyingItem<Single> HdrEmissiveMult_Property { get; }

        new Single HdrTargetLum { get; set; }
        new INotifyingItem<Single> HdrTargetLum_Property { get; }

        new Single HdrUpperLumClamp { get; set; }
        new INotifyingItem<Single> HdrUpperLumClamp_Property { get; }

        new Single HdrBrightScale { get; set; }
        new INotifyingItem<Single> HdrBrightScale_Property { get; }

        new Single HdrBrightClamp { get; set; }
        new INotifyingItem<Single> HdrBrightClamp_Property { get; }

        new Single HdrLumRampNoTex { get; set; }
        new INotifyingItem<Single> HdrLumRampNoTex_Property { get; }

        new Single HdrLumRampMin { get; set; }
        new INotifyingItem<Single> HdrLumRampMin_Property { get; }

        new Single HdrLumRampMax { get; set; }
        new INotifyingItem<Single> HdrLumRampMax_Property { get; }

        new Single HdrSunlightDimmer { get; set; }
        new INotifyingItem<Single> HdrSunlightDimmer_Property { get; }

        new Single HdrGrassDimmer { get; set; }
        new INotifyingItem<Single> HdrGrassDimmer_Property { get; }

        new Single HdrTreeDimmer { get; set; }
        new INotifyingItem<Single> HdrTreeDimmer_Property { get; }

        new Byte WindSpeed { get; set; }
        new INotifyingItem<Byte> WindSpeed_Property { get; }

        new Byte CloudSpeedLower { get; set; }
        new INotifyingItem<Byte> CloudSpeedLower_Property { get; }

        new Byte CloudSpeedUpper { get; set; }
        new INotifyingItem<Byte> CloudSpeedUpper_Property { get; }

        new Byte TransDelta { get; set; }
        new INotifyingItem<Byte> TransDelta_Property { get; }

        new Byte SunGlare { get; set; }
        new INotifyingItem<Byte> SunGlare_Property { get; }

        new Byte SunDamage { get; set; }
        new INotifyingItem<Byte> SunDamage_Property { get; }

        new Byte PrecipitationBeginFadeIn { get; set; }
        new INotifyingItem<Byte> PrecipitationBeginFadeIn_Property { get; }

        new Byte PrecipitationEndFadeOut { get; set; }
        new INotifyingItem<Byte> PrecipitationEndFadeOut_Property { get; }

        new Byte ThunderLightningBeginFadeIn { get; set; }
        new INotifyingItem<Byte> ThunderLightningBeginFadeIn_Property { get; }

        new Byte ThunderLightningEndFadeOut { get; set; }
        new INotifyingItem<Byte> ThunderLightningEndFadeOut_Property { get; }

        new Byte ThunderLightningFrequency { get; set; }
        new INotifyingItem<Byte> ThunderLightningFrequency_Property { get; }

        new Weather.WeatherClassification Classification { get; set; }
        new INotifyingItem<Weather.WeatherClassification> Classification_Property { get; }

        new Color LightningColor { get; set; }
        new INotifyingItem<Color> LightningColor_Property { get; }

        new INotifyingList<WeatherSound> Sounds { get; }
    }

    public partial interface IWeatherGetter : IMajorRecordGetter
    {
        #region TextureLowerLayer
        String TextureLowerLayer { get; }
        INotifyingSetItemGetter<String> TextureLowerLayer_Property { get; }

        #endregion
        #region TextureUpperLayer
        String TextureUpperLayer { get; }
        INotifyingSetItemGetter<String> TextureUpperLayer_Property { get; }

        #endregion
        #region Model
        Model Model { get; }
        INotifyingSetItemGetter<Model> Model_Property { get; }

        #endregion
        #region WeatherTypes
        INotifyingListGetter<WeatherType> WeatherTypes { get; }
        #endregion
        #region FogDayNear
        Single FogDayNear { get; }
        INotifyingItemGetter<Single> FogDayNear_Property { get; }

        #endregion
        #region FogDayFar
        Single FogDayFar { get; }
        INotifyingItemGetter<Single> FogDayFar_Property { get; }

        #endregion
        #region FogNightNear
        Single FogNightNear { get; }
        INotifyingItemGetter<Single> FogNightNear_Property { get; }

        #endregion
        #region FogNightFar
        Single FogNightFar { get; }
        INotifyingItemGetter<Single> FogNightFar_Property { get; }

        #endregion
        #region HdrEyeAdaptSpeed
        Single HdrEyeAdaptSpeed { get; }
        INotifyingItemGetter<Single> HdrEyeAdaptSpeed_Property { get; }

        #endregion
        #region HdrBlurRadius
        Single HdrBlurRadius { get; }
        INotifyingItemGetter<Single> HdrBlurRadius_Property { get; }

        #endregion
        #region HdrBlurPasses
        Single HdrBlurPasses { get; }
        INotifyingItemGetter<Single> HdrBlurPasses_Property { get; }

        #endregion
        #region HdrEmissiveMult
        Single HdrEmissiveMult { get; }
        INotifyingItemGetter<Single> HdrEmissiveMult_Property { get; }

        #endregion
        #region HdrTargetLum
        Single HdrTargetLum { get; }
        INotifyingItemGetter<Single> HdrTargetLum_Property { get; }

        #endregion
        #region HdrUpperLumClamp
        Single HdrUpperLumClamp { get; }
        INotifyingItemGetter<Single> HdrUpperLumClamp_Property { get; }

        #endregion
        #region HdrBrightScale
        Single HdrBrightScale { get; }
        INotifyingItemGetter<Single> HdrBrightScale_Property { get; }

        #endregion
        #region HdrBrightClamp
        Single HdrBrightClamp { get; }
        INotifyingItemGetter<Single> HdrBrightClamp_Property { get; }

        #endregion
        #region HdrLumRampNoTex
        Single HdrLumRampNoTex { get; }
        INotifyingItemGetter<Single> HdrLumRampNoTex_Property { get; }

        #endregion
        #region HdrLumRampMin
        Single HdrLumRampMin { get; }
        INotifyingItemGetter<Single> HdrLumRampMin_Property { get; }

        #endregion
        #region HdrLumRampMax
        Single HdrLumRampMax { get; }
        INotifyingItemGetter<Single> HdrLumRampMax_Property { get; }

        #endregion
        #region HdrSunlightDimmer
        Single HdrSunlightDimmer { get; }
        INotifyingItemGetter<Single> HdrSunlightDimmer_Property { get; }

        #endregion
        #region HdrGrassDimmer
        Single HdrGrassDimmer { get; }
        INotifyingItemGetter<Single> HdrGrassDimmer_Property { get; }

        #endregion
        #region HdrTreeDimmer
        Single HdrTreeDimmer { get; }
        INotifyingItemGetter<Single> HdrTreeDimmer_Property { get; }

        #endregion
        #region WindSpeed
        Byte WindSpeed { get; }
        INotifyingItemGetter<Byte> WindSpeed_Property { get; }

        #endregion
        #region CloudSpeedLower
        Byte CloudSpeedLower { get; }
        INotifyingItemGetter<Byte> CloudSpeedLower_Property { get; }

        #endregion
        #region CloudSpeedUpper
        Byte CloudSpeedUpper { get; }
        INotifyingItemGetter<Byte> CloudSpeedUpper_Property { get; }

        #endregion
        #region TransDelta
        Byte TransDelta { get; }
        INotifyingItemGetter<Byte> TransDelta_Property { get; }

        #endregion
        #region SunGlare
        Byte SunGlare { get; }
        INotifyingItemGetter<Byte> SunGlare_Property { get; }

        #endregion
        #region SunDamage
        Byte SunDamage { get; }
        INotifyingItemGetter<Byte> SunDamage_Property { get; }

        #endregion
        #region PrecipitationBeginFadeIn
        Byte PrecipitationBeginFadeIn { get; }
        INotifyingItemGetter<Byte> PrecipitationBeginFadeIn_Property { get; }

        #endregion
        #region PrecipitationEndFadeOut
        Byte PrecipitationEndFadeOut { get; }
        INotifyingItemGetter<Byte> PrecipitationEndFadeOut_Property { get; }

        #endregion
        #region ThunderLightningBeginFadeIn
        Byte ThunderLightningBeginFadeIn { get; }
        INotifyingItemGetter<Byte> ThunderLightningBeginFadeIn_Property { get; }

        #endregion
        #region ThunderLightningEndFadeOut
        Byte ThunderLightningEndFadeOut { get; }
        INotifyingItemGetter<Byte> ThunderLightningEndFadeOut_Property { get; }

        #endregion
        #region ThunderLightningFrequency
        Byte ThunderLightningFrequency { get; }
        INotifyingItemGetter<Byte> ThunderLightningFrequency_Property { get; }

        #endregion
        #region Classification
        Weather.WeatherClassification Classification { get; }
        INotifyingItemGetter<Weather.WeatherClassification> Classification_Property { get; }

        #endregion
        #region LightningColor
        Color LightningColor { get; }
        INotifyingItemGetter<Color> LightningColor_Property { get; }

        #endregion
        #region Sounds
        INotifyingListGetter<WeatherSound> Sounds { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Weather_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        TextureLowerLayer = 5,
        TextureUpperLayer = 6,
        Model = 7,
        WeatherTypes = 8,
        FogDayNear = 9,
        FogDayFar = 10,
        FogNightNear = 11,
        FogNightFar = 12,
        HdrEyeAdaptSpeed = 13,
        HdrBlurRadius = 14,
        HdrBlurPasses = 15,
        HdrEmissiveMult = 16,
        HdrTargetLum = 17,
        HdrUpperLumClamp = 18,
        HdrBrightScale = 19,
        HdrBrightClamp = 20,
        HdrLumRampNoTex = 21,
        HdrLumRampMin = 22,
        HdrLumRampMax = 23,
        HdrSunlightDimmer = 24,
        HdrGrassDimmer = 25,
        HdrTreeDimmer = 26,
        WindSpeed = 27,
        CloudSpeedLower = 28,
        CloudSpeedUpper = 29,
        TransDelta = 30,
        SunGlare = 31,
        SunDamage = 32,
        PrecipitationBeginFadeIn = 33,
        PrecipitationEndFadeOut = 34,
        ThunderLightningBeginFadeIn = 35,
        ThunderLightningEndFadeOut = 36,
        ThunderLightningFrequency = 37,
        Classification = 38,
        LightningColor = 39,
        Sounds = 40,
    }
    #endregion

    #region Registration
    public class Weather_Registration : ILoquiRegistration
    {
        public static readonly Weather_Registration Instance = new Weather_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 102,
            version: 0);

        public const string GUID = "c7183e23-4f2c-43f7-adcf-6c56458c94af";

        public const ushort AdditionalFieldCount = 36;

        public const ushort FieldCount = 41;

        public static readonly Type MaskType = typeof(Weather_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Weather_ErrorMask);

        public static readonly Type ClassType = typeof(Weather);

        public static readonly Type GetterType = typeof(IWeatherGetter);

        public static readonly Type SetterType = typeof(IWeather);

        public static readonly Type CommonType = typeof(WeatherCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Weather";

        public const string Name = "Weather";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TEXTURELOWERLAYER":
                    return (ushort)Weather_FieldIndex.TextureLowerLayer;
                case "TEXTUREUPPERLAYER":
                    return (ushort)Weather_FieldIndex.TextureUpperLayer;
                case "MODEL":
                    return (ushort)Weather_FieldIndex.Model;
                case "WEATHERTYPES":
                    return (ushort)Weather_FieldIndex.WeatherTypes;
                case "FOGDAYNEAR":
                    return (ushort)Weather_FieldIndex.FogDayNear;
                case "FOGDAYFAR":
                    return (ushort)Weather_FieldIndex.FogDayFar;
                case "FOGNIGHTNEAR":
                    return (ushort)Weather_FieldIndex.FogNightNear;
                case "FOGNIGHTFAR":
                    return (ushort)Weather_FieldIndex.FogNightFar;
                case "HDREYEADAPTSPEED":
                    return (ushort)Weather_FieldIndex.HdrEyeAdaptSpeed;
                case "HDRBLURRADIUS":
                    return (ushort)Weather_FieldIndex.HdrBlurRadius;
                case "HDRBLURPASSES":
                    return (ushort)Weather_FieldIndex.HdrBlurPasses;
                case "HDREMISSIVEMULT":
                    return (ushort)Weather_FieldIndex.HdrEmissiveMult;
                case "HDRTARGETLUM":
                    return (ushort)Weather_FieldIndex.HdrTargetLum;
                case "HDRUPPERLUMCLAMP":
                    return (ushort)Weather_FieldIndex.HdrUpperLumClamp;
                case "HDRBRIGHTSCALE":
                    return (ushort)Weather_FieldIndex.HdrBrightScale;
                case "HDRBRIGHTCLAMP":
                    return (ushort)Weather_FieldIndex.HdrBrightClamp;
                case "HDRLUMRAMPNOTEX":
                    return (ushort)Weather_FieldIndex.HdrLumRampNoTex;
                case "HDRLUMRAMPMIN":
                    return (ushort)Weather_FieldIndex.HdrLumRampMin;
                case "HDRLUMRAMPMAX":
                    return (ushort)Weather_FieldIndex.HdrLumRampMax;
                case "HDRSUNLIGHTDIMMER":
                    return (ushort)Weather_FieldIndex.HdrSunlightDimmer;
                case "HDRGRASSDIMMER":
                    return (ushort)Weather_FieldIndex.HdrGrassDimmer;
                case "HDRTREEDIMMER":
                    return (ushort)Weather_FieldIndex.HdrTreeDimmer;
                case "WINDSPEED":
                    return (ushort)Weather_FieldIndex.WindSpeed;
                case "CLOUDSPEEDLOWER":
                    return (ushort)Weather_FieldIndex.CloudSpeedLower;
                case "CLOUDSPEEDUPPER":
                    return (ushort)Weather_FieldIndex.CloudSpeedUpper;
                case "TRANSDELTA":
                    return (ushort)Weather_FieldIndex.TransDelta;
                case "SUNGLARE":
                    return (ushort)Weather_FieldIndex.SunGlare;
                case "SUNDAMAGE":
                    return (ushort)Weather_FieldIndex.SunDamage;
                case "PRECIPITATIONBEGINFADEIN":
                    return (ushort)Weather_FieldIndex.PrecipitationBeginFadeIn;
                case "PRECIPITATIONENDFADEOUT":
                    return (ushort)Weather_FieldIndex.PrecipitationEndFadeOut;
                case "THUNDERLIGHTNINGBEGINFADEIN":
                    return (ushort)Weather_FieldIndex.ThunderLightningBeginFadeIn;
                case "THUNDERLIGHTNINGENDFADEOUT":
                    return (ushort)Weather_FieldIndex.ThunderLightningEndFadeOut;
                case "THUNDERLIGHTNINGFREQUENCY":
                    return (ushort)Weather_FieldIndex.ThunderLightningFrequency;
                case "CLASSIFICATION":
                    return (ushort)Weather_FieldIndex.Classification;
                case "LIGHTNINGCOLOR":
                    return (ushort)Weather_FieldIndex.LightningColor;
                case "SOUNDS":
                    return (ushort)Weather_FieldIndex.Sounds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.WeatherTypes:
                case Weather_FieldIndex.Sounds:
                    return true;
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                case Weather_FieldIndex.Model:
                case Weather_FieldIndex.FogDayNear:
                case Weather_FieldIndex.FogDayFar:
                case Weather_FieldIndex.FogNightNear:
                case Weather_FieldIndex.FogNightFar:
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                case Weather_FieldIndex.HdrBlurRadius:
                case Weather_FieldIndex.HdrBlurPasses:
                case Weather_FieldIndex.HdrEmissiveMult:
                case Weather_FieldIndex.HdrTargetLum:
                case Weather_FieldIndex.HdrUpperLumClamp:
                case Weather_FieldIndex.HdrBrightScale:
                case Weather_FieldIndex.HdrBrightClamp:
                case Weather_FieldIndex.HdrLumRampNoTex:
                case Weather_FieldIndex.HdrLumRampMin:
                case Weather_FieldIndex.HdrLumRampMax:
                case Weather_FieldIndex.HdrSunlightDimmer:
                case Weather_FieldIndex.HdrGrassDimmer:
                case Weather_FieldIndex.HdrTreeDimmer:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.CloudSpeedLower:
                case Weather_FieldIndex.CloudSpeedUpper:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Classification:
                case Weather_FieldIndex.LightningColor:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.Model:
                case Weather_FieldIndex.WeatherTypes:
                case Weather_FieldIndex.Sounds:
                    return true;
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                case Weather_FieldIndex.FogDayNear:
                case Weather_FieldIndex.FogDayFar:
                case Weather_FieldIndex.FogNightNear:
                case Weather_FieldIndex.FogNightFar:
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                case Weather_FieldIndex.HdrBlurRadius:
                case Weather_FieldIndex.HdrBlurPasses:
                case Weather_FieldIndex.HdrEmissiveMult:
                case Weather_FieldIndex.HdrTargetLum:
                case Weather_FieldIndex.HdrUpperLumClamp:
                case Weather_FieldIndex.HdrBrightScale:
                case Weather_FieldIndex.HdrBrightClamp:
                case Weather_FieldIndex.HdrLumRampNoTex:
                case Weather_FieldIndex.HdrLumRampMin:
                case Weather_FieldIndex.HdrLumRampMax:
                case Weather_FieldIndex.HdrSunlightDimmer:
                case Weather_FieldIndex.HdrGrassDimmer:
                case Weather_FieldIndex.HdrTreeDimmer:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.CloudSpeedLower:
                case Weather_FieldIndex.CloudSpeedUpper:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Classification:
                case Weather_FieldIndex.LightningColor:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                case Weather_FieldIndex.Model:
                case Weather_FieldIndex.WeatherTypes:
                case Weather_FieldIndex.FogDayNear:
                case Weather_FieldIndex.FogDayFar:
                case Weather_FieldIndex.FogNightNear:
                case Weather_FieldIndex.FogNightFar:
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                case Weather_FieldIndex.HdrBlurRadius:
                case Weather_FieldIndex.HdrBlurPasses:
                case Weather_FieldIndex.HdrEmissiveMult:
                case Weather_FieldIndex.HdrTargetLum:
                case Weather_FieldIndex.HdrUpperLumClamp:
                case Weather_FieldIndex.HdrBrightScale:
                case Weather_FieldIndex.HdrBrightClamp:
                case Weather_FieldIndex.HdrLumRampNoTex:
                case Weather_FieldIndex.HdrLumRampMin:
                case Weather_FieldIndex.HdrLumRampMax:
                case Weather_FieldIndex.HdrSunlightDimmer:
                case Weather_FieldIndex.HdrGrassDimmer:
                case Weather_FieldIndex.HdrTreeDimmer:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.CloudSpeedLower:
                case Weather_FieldIndex.CloudSpeedUpper:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Classification:
                case Weather_FieldIndex.LightningColor:
                case Weather_FieldIndex.Sounds:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    return "TextureLowerLayer";
                case Weather_FieldIndex.TextureUpperLayer:
                    return "TextureUpperLayer";
                case Weather_FieldIndex.Model:
                    return "Model";
                case Weather_FieldIndex.WeatherTypes:
                    return "WeatherTypes";
                case Weather_FieldIndex.FogDayNear:
                    return "FogDayNear";
                case Weather_FieldIndex.FogDayFar:
                    return "FogDayFar";
                case Weather_FieldIndex.FogNightNear:
                    return "FogNightNear";
                case Weather_FieldIndex.FogNightFar:
                    return "FogNightFar";
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    return "HdrEyeAdaptSpeed";
                case Weather_FieldIndex.HdrBlurRadius:
                    return "HdrBlurRadius";
                case Weather_FieldIndex.HdrBlurPasses:
                    return "HdrBlurPasses";
                case Weather_FieldIndex.HdrEmissiveMult:
                    return "HdrEmissiveMult";
                case Weather_FieldIndex.HdrTargetLum:
                    return "HdrTargetLum";
                case Weather_FieldIndex.HdrUpperLumClamp:
                    return "HdrUpperLumClamp";
                case Weather_FieldIndex.HdrBrightScale:
                    return "HdrBrightScale";
                case Weather_FieldIndex.HdrBrightClamp:
                    return "HdrBrightClamp";
                case Weather_FieldIndex.HdrLumRampNoTex:
                    return "HdrLumRampNoTex";
                case Weather_FieldIndex.HdrLumRampMin:
                    return "HdrLumRampMin";
                case Weather_FieldIndex.HdrLumRampMax:
                    return "HdrLumRampMax";
                case Weather_FieldIndex.HdrSunlightDimmer:
                    return "HdrSunlightDimmer";
                case Weather_FieldIndex.HdrGrassDimmer:
                    return "HdrGrassDimmer";
                case Weather_FieldIndex.HdrTreeDimmer:
                    return "HdrTreeDimmer";
                case Weather_FieldIndex.WindSpeed:
                    return "WindSpeed";
                case Weather_FieldIndex.CloudSpeedLower:
                    return "CloudSpeedLower";
                case Weather_FieldIndex.CloudSpeedUpper:
                    return "CloudSpeedUpper";
                case Weather_FieldIndex.TransDelta:
                    return "TransDelta";
                case Weather_FieldIndex.SunGlare:
                    return "SunGlare";
                case Weather_FieldIndex.SunDamage:
                    return "SunDamage";
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    return "PrecipitationBeginFadeIn";
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    return "PrecipitationEndFadeOut";
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    return "ThunderLightningBeginFadeIn";
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    return "ThunderLightningEndFadeOut";
                case Weather_FieldIndex.ThunderLightningFrequency:
                    return "ThunderLightningFrequency";
                case Weather_FieldIndex.Classification:
                    return "Classification";
                case Weather_FieldIndex.LightningColor:
                    return "LightningColor";
                case Weather_FieldIndex.Sounds:
                    return "Sounds";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                case Weather_FieldIndex.Model:
                case Weather_FieldIndex.WeatherTypes:
                case Weather_FieldIndex.FogDayNear:
                case Weather_FieldIndex.FogDayFar:
                case Weather_FieldIndex.FogNightNear:
                case Weather_FieldIndex.FogNightFar:
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                case Weather_FieldIndex.HdrBlurRadius:
                case Weather_FieldIndex.HdrBlurPasses:
                case Weather_FieldIndex.HdrEmissiveMult:
                case Weather_FieldIndex.HdrTargetLum:
                case Weather_FieldIndex.HdrUpperLumClamp:
                case Weather_FieldIndex.HdrBrightScale:
                case Weather_FieldIndex.HdrBrightClamp:
                case Weather_FieldIndex.HdrLumRampNoTex:
                case Weather_FieldIndex.HdrLumRampMin:
                case Weather_FieldIndex.HdrLumRampMax:
                case Weather_FieldIndex.HdrSunlightDimmer:
                case Weather_FieldIndex.HdrGrassDimmer:
                case Weather_FieldIndex.HdrTreeDimmer:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.CloudSpeedLower:
                case Weather_FieldIndex.CloudSpeedUpper:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Classification:
                case Weather_FieldIndex.LightningColor:
                case Weather_FieldIndex.Sounds:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                case Weather_FieldIndex.Model:
                case Weather_FieldIndex.WeatherTypes:
                case Weather_FieldIndex.FogDayNear:
                case Weather_FieldIndex.FogDayFar:
                case Weather_FieldIndex.FogNightNear:
                case Weather_FieldIndex.FogNightFar:
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                case Weather_FieldIndex.HdrBlurRadius:
                case Weather_FieldIndex.HdrBlurPasses:
                case Weather_FieldIndex.HdrEmissiveMult:
                case Weather_FieldIndex.HdrTargetLum:
                case Weather_FieldIndex.HdrUpperLumClamp:
                case Weather_FieldIndex.HdrBrightScale:
                case Weather_FieldIndex.HdrBrightClamp:
                case Weather_FieldIndex.HdrLumRampNoTex:
                case Weather_FieldIndex.HdrLumRampMin:
                case Weather_FieldIndex.HdrLumRampMax:
                case Weather_FieldIndex.HdrSunlightDimmer:
                case Weather_FieldIndex.HdrGrassDimmer:
                case Weather_FieldIndex.HdrTreeDimmer:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.CloudSpeedLower:
                case Weather_FieldIndex.CloudSpeedUpper:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Classification:
                case Weather_FieldIndex.LightningColor:
                case Weather_FieldIndex.Sounds:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    return typeof(String);
                case Weather_FieldIndex.TextureUpperLayer:
                    return typeof(String);
                case Weather_FieldIndex.Model:
                    return typeof(Model);
                case Weather_FieldIndex.WeatherTypes:
                    return typeof(NotifyingList<WeatherType>);
                case Weather_FieldIndex.FogDayNear:
                    return typeof(Single);
                case Weather_FieldIndex.FogDayFar:
                    return typeof(Single);
                case Weather_FieldIndex.FogNightNear:
                    return typeof(Single);
                case Weather_FieldIndex.FogNightFar:
                    return typeof(Single);
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    return typeof(Single);
                case Weather_FieldIndex.HdrBlurRadius:
                    return typeof(Single);
                case Weather_FieldIndex.HdrBlurPasses:
                    return typeof(Single);
                case Weather_FieldIndex.HdrEmissiveMult:
                    return typeof(Single);
                case Weather_FieldIndex.HdrTargetLum:
                    return typeof(Single);
                case Weather_FieldIndex.HdrUpperLumClamp:
                    return typeof(Single);
                case Weather_FieldIndex.HdrBrightScale:
                    return typeof(Single);
                case Weather_FieldIndex.HdrBrightClamp:
                    return typeof(Single);
                case Weather_FieldIndex.HdrLumRampNoTex:
                    return typeof(Single);
                case Weather_FieldIndex.HdrLumRampMin:
                    return typeof(Single);
                case Weather_FieldIndex.HdrLumRampMax:
                    return typeof(Single);
                case Weather_FieldIndex.HdrSunlightDimmer:
                    return typeof(Single);
                case Weather_FieldIndex.HdrGrassDimmer:
                    return typeof(Single);
                case Weather_FieldIndex.HdrTreeDimmer:
                    return typeof(Single);
                case Weather_FieldIndex.WindSpeed:
                    return typeof(Byte);
                case Weather_FieldIndex.CloudSpeedLower:
                    return typeof(Byte);
                case Weather_FieldIndex.CloudSpeedUpper:
                    return typeof(Byte);
                case Weather_FieldIndex.TransDelta:
                    return typeof(Byte);
                case Weather_FieldIndex.SunGlare:
                    return typeof(Byte);
                case Weather_FieldIndex.SunDamage:
                    return typeof(Byte);
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    return typeof(Byte);
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    return typeof(Byte);
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    return typeof(Byte);
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    return typeof(Byte);
                case Weather_FieldIndex.ThunderLightningFrequency:
                    return typeof(Byte);
                case Weather_FieldIndex.Classification:
                    return typeof(Weather.WeatherClassification);
                case Weather_FieldIndex.LightningColor:
                    return typeof(Color);
                case Weather_FieldIndex.Sounds:
                    return typeof(NotifyingList<WeatherSound>);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType WTHR_HEADER = new RecordType("WTHR");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType DNAM_HEADER = new RecordType("DNAM");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType NAM0_HEADER = new RecordType("NAM0");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = WTHR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class WeatherCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IWeather item,
            IWeatherGetter rhs,
            IWeatherGetter def,
            ErrorMaskBuilder errorMask,
            Weather_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.TextureLowerLayer ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.TextureLowerLayer);
                try
                {
                    item.TextureLowerLayer_Property.SetToWithDefault(
                        rhs: rhs.TextureLowerLayer_Property,
                        def: def?.TextureLowerLayer_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.TextureUpperLayer ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.TextureUpperLayer);
                try
                {
                    item.TextureUpperLayer_Property.SetToWithDefault(
                        rhs: rhs.TextureUpperLayer_Property,
                        def: def?.TextureUpperLayer_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.Model);
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.WeatherTypes.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.WeatherTypes);
                try
                {
                    item.WeatherTypes.SetToWithDefault(
                        rhs: rhs.WeatherTypes,
                        def: def?.WeatherTypes,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.WeatherTypes.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(WeatherType);
                                    return WeatherType.Copy(
                                        r,
                                        copyMask?.WeatherTypes?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.WeatherTypes.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.FogDayNear ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.FogDayNear);
                try
                {
                    item.FogDayNear_Property.Set(
                        value: rhs.FogDayNear,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.FogDayFar ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.FogDayFar);
                try
                {
                    item.FogDayFar_Property.Set(
                        value: rhs.FogDayFar,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.FogNightNear ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.FogNightNear);
                try
                {
                    item.FogNightNear_Property.Set(
                        value: rhs.FogNightNear,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.FogNightFar ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.FogNightFar);
                try
                {
                    item.FogNightFar_Property.Set(
                        value: rhs.FogNightFar,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.HdrEyeAdaptSpeed ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.HdrEyeAdaptSpeed);
                try
                {
                    item.HdrEyeAdaptSpeed_Property.Set(
                        value: rhs.HdrEyeAdaptSpeed,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.HdrBlurRadius ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.HdrBlurRadius);
                try
                {
                    item.HdrBlurRadius_Property.Set(
                        value: rhs.HdrBlurRadius,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.HdrBlurPasses ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.HdrBlurPasses);
                try
                {
                    item.HdrBlurPasses_Property.Set(
                        value: rhs.HdrBlurPasses,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.HdrEmissiveMult ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.HdrEmissiveMult);
                try
                {
                    item.HdrEmissiveMult_Property.Set(
                        value: rhs.HdrEmissiveMult,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.HdrTargetLum ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.HdrTargetLum);
                try
                {
                    item.HdrTargetLum_Property.Set(
                        value: rhs.HdrTargetLum,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.HdrUpperLumClamp ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.HdrUpperLumClamp);
                try
                {
                    item.HdrUpperLumClamp_Property.Set(
                        value: rhs.HdrUpperLumClamp,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.HdrBrightScale ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.HdrBrightScale);
                try
                {
                    item.HdrBrightScale_Property.Set(
                        value: rhs.HdrBrightScale,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.HdrBrightClamp ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.HdrBrightClamp);
                try
                {
                    item.HdrBrightClamp_Property.Set(
                        value: rhs.HdrBrightClamp,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.HdrLumRampNoTex ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.HdrLumRampNoTex);
                try
                {
                    item.HdrLumRampNoTex_Property.Set(
                        value: rhs.HdrLumRampNoTex,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.HdrLumRampMin ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.HdrLumRampMin);
                try
                {
                    item.HdrLumRampMin_Property.Set(
                        value: rhs.HdrLumRampMin,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.HdrLumRampMax ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.HdrLumRampMax);
                try
                {
                    item.HdrLumRampMax_Property.Set(
                        value: rhs.HdrLumRampMax,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.HdrSunlightDimmer ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.HdrSunlightDimmer);
                try
                {
                    item.HdrSunlightDimmer_Property.Set(
                        value: rhs.HdrSunlightDimmer,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.HdrGrassDimmer ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.HdrGrassDimmer);
                try
                {
                    item.HdrGrassDimmer_Property.Set(
                        value: rhs.HdrGrassDimmer,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.HdrTreeDimmer ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.HdrTreeDimmer);
                try
                {
                    item.HdrTreeDimmer_Property.Set(
                        value: rhs.HdrTreeDimmer,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.WindSpeed ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.WindSpeed);
                try
                {
                    item.WindSpeed_Property.Set(
                        value: rhs.WindSpeed,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.CloudSpeedLower ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.CloudSpeedLower);
                try
                {
                    item.CloudSpeedLower_Property.Set(
                        value: rhs.CloudSpeedLower,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.CloudSpeedUpper ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.CloudSpeedUpper);
                try
                {
                    item.CloudSpeedUpper_Property.Set(
                        value: rhs.CloudSpeedUpper,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.TransDelta ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.TransDelta);
                try
                {
                    item.TransDelta_Property.Set(
                        value: rhs.TransDelta,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.SunGlare ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.SunGlare);
                try
                {
                    item.SunGlare_Property.Set(
                        value: rhs.SunGlare,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.SunDamage ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.SunDamage);
                try
                {
                    item.SunDamage_Property.Set(
                        value: rhs.SunDamage,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.PrecipitationBeginFadeIn ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.PrecipitationBeginFadeIn);
                try
                {
                    item.PrecipitationBeginFadeIn_Property.Set(
                        value: rhs.PrecipitationBeginFadeIn,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.PrecipitationEndFadeOut ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.PrecipitationEndFadeOut);
                try
                {
                    item.PrecipitationEndFadeOut_Property.Set(
                        value: rhs.PrecipitationEndFadeOut,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.ThunderLightningBeginFadeIn ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.ThunderLightningBeginFadeIn);
                try
                {
                    item.ThunderLightningBeginFadeIn_Property.Set(
                        value: rhs.ThunderLightningBeginFadeIn,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.ThunderLightningEndFadeOut ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.ThunderLightningEndFadeOut);
                try
                {
                    item.ThunderLightningEndFadeOut_Property.Set(
                        value: rhs.ThunderLightningEndFadeOut,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.ThunderLightningFrequency ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.ThunderLightningFrequency);
                try
                {
                    item.ThunderLightningFrequency_Property.Set(
                        value: rhs.ThunderLightningFrequency,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Classification ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.Classification);
                try
                {
                    item.Classification_Property.Set(
                        value: rhs.Classification,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.LightningColor ?? true)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.LightningColor);
                try
                {
                    item.LightningColor_Property.Set(
                        value: rhs.LightningColor,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Sounds.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Weather_FieldIndex.Sounds);
                try
                {
                    item.Sounds.SetToWithDefault(
                        rhs: rhs.Sounds,
                        def: def?.Sounds,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Sounds.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(WeatherSound);
                                    return WeatherSound.Copy(
                                        r,
                                        copyMask?.Sounds?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Sounds.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IWeather obj,
            NotifyingFireParameters cmds = null)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.FogDayNear:
                case Weather_FieldIndex.FogDayFar:
                case Weather_FieldIndex.FogNightNear:
                case Weather_FieldIndex.FogNightFar:
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                case Weather_FieldIndex.HdrBlurRadius:
                case Weather_FieldIndex.HdrBlurPasses:
                case Weather_FieldIndex.HdrEmissiveMult:
                case Weather_FieldIndex.HdrTargetLum:
                case Weather_FieldIndex.HdrUpperLumClamp:
                case Weather_FieldIndex.HdrBrightScale:
                case Weather_FieldIndex.HdrBrightClamp:
                case Weather_FieldIndex.HdrLumRampNoTex:
                case Weather_FieldIndex.HdrLumRampMin:
                case Weather_FieldIndex.HdrLumRampMax:
                case Weather_FieldIndex.HdrSunlightDimmer:
                case Weather_FieldIndex.HdrGrassDimmer:
                case Weather_FieldIndex.HdrTreeDimmer:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.CloudSpeedLower:
                case Weather_FieldIndex.CloudSpeedUpper:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Classification:
                case Weather_FieldIndex.LightningColor:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Weather_FieldIndex.TextureLowerLayer:
                    obj.TextureLowerLayer_Property.HasBeenSet = on;
                    break;
                case Weather_FieldIndex.TextureUpperLayer:
                    obj.TextureUpperLayer_Property.HasBeenSet = on;
                    break;
                case Weather_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                case Weather_FieldIndex.WeatherTypes:
                    obj.WeatherTypes.HasBeenSet = on;
                    break;
                case Weather_FieldIndex.Sounds:
                    obj.Sounds.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IWeather obj,
            NotifyingUnsetParameters cmds = null)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    obj.TextureLowerLayer_Property.Unset(cmds);
                    break;
                case Weather_FieldIndex.TextureUpperLayer:
                    obj.TextureUpperLayer_Property.Unset(cmds);
                    break;
                case Weather_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case Weather_FieldIndex.WeatherTypes:
                    obj.WeatherTypes.Unset(cmds);
                    break;
                case Weather_FieldIndex.FogDayNear:
                    obj.FogDayNear = default(Single);
                    break;
                case Weather_FieldIndex.FogDayFar:
                    obj.FogDayFar = default(Single);
                    break;
                case Weather_FieldIndex.FogNightNear:
                    obj.FogNightNear = default(Single);
                    break;
                case Weather_FieldIndex.FogNightFar:
                    obj.FogNightFar = default(Single);
                    break;
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    obj.HdrEyeAdaptSpeed = default(Single);
                    break;
                case Weather_FieldIndex.HdrBlurRadius:
                    obj.HdrBlurRadius = default(Single);
                    break;
                case Weather_FieldIndex.HdrBlurPasses:
                    obj.HdrBlurPasses = default(Single);
                    break;
                case Weather_FieldIndex.HdrEmissiveMult:
                    obj.HdrEmissiveMult = default(Single);
                    break;
                case Weather_FieldIndex.HdrTargetLum:
                    obj.HdrTargetLum = default(Single);
                    break;
                case Weather_FieldIndex.HdrUpperLumClamp:
                    obj.HdrUpperLumClamp = default(Single);
                    break;
                case Weather_FieldIndex.HdrBrightScale:
                    obj.HdrBrightScale = default(Single);
                    break;
                case Weather_FieldIndex.HdrBrightClamp:
                    obj.HdrBrightClamp = default(Single);
                    break;
                case Weather_FieldIndex.HdrLumRampNoTex:
                    obj.HdrLumRampNoTex = default(Single);
                    break;
                case Weather_FieldIndex.HdrLumRampMin:
                    obj.HdrLumRampMin = default(Single);
                    break;
                case Weather_FieldIndex.HdrLumRampMax:
                    obj.HdrLumRampMax = default(Single);
                    break;
                case Weather_FieldIndex.HdrSunlightDimmer:
                    obj.HdrSunlightDimmer = default(Single);
                    break;
                case Weather_FieldIndex.HdrGrassDimmer:
                    obj.HdrGrassDimmer = default(Single);
                    break;
                case Weather_FieldIndex.HdrTreeDimmer:
                    obj.HdrTreeDimmer = default(Single);
                    break;
                case Weather_FieldIndex.WindSpeed:
                    obj.WindSpeed = default(Byte);
                    break;
                case Weather_FieldIndex.CloudSpeedLower:
                    obj.CloudSpeedLower = default(Byte);
                    break;
                case Weather_FieldIndex.CloudSpeedUpper:
                    obj.CloudSpeedUpper = default(Byte);
                    break;
                case Weather_FieldIndex.TransDelta:
                    obj.TransDelta = default(Byte);
                    break;
                case Weather_FieldIndex.SunGlare:
                    obj.SunGlare = default(Byte);
                    break;
                case Weather_FieldIndex.SunDamage:
                    obj.SunDamage = default(Byte);
                    break;
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    obj.PrecipitationBeginFadeIn = default(Byte);
                    break;
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    obj.PrecipitationEndFadeOut = default(Byte);
                    break;
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    obj.ThunderLightningBeginFadeIn = default(Byte);
                    break;
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    obj.ThunderLightningEndFadeOut = default(Byte);
                    break;
                case Weather_FieldIndex.ThunderLightningFrequency:
                    obj.ThunderLightningFrequency = default(Byte);
                    break;
                case Weather_FieldIndex.Classification:
                    obj.Classification = default(Weather.WeatherClassification);
                    break;
                case Weather_FieldIndex.LightningColor:
                    obj.LightningColor = default(Color);
                    break;
                case Weather_FieldIndex.Sounds:
                    obj.Sounds.Unset(cmds);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IWeather obj)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.FogDayNear:
                case Weather_FieldIndex.FogDayFar:
                case Weather_FieldIndex.FogNightNear:
                case Weather_FieldIndex.FogNightFar:
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                case Weather_FieldIndex.HdrBlurRadius:
                case Weather_FieldIndex.HdrBlurPasses:
                case Weather_FieldIndex.HdrEmissiveMult:
                case Weather_FieldIndex.HdrTargetLum:
                case Weather_FieldIndex.HdrUpperLumClamp:
                case Weather_FieldIndex.HdrBrightScale:
                case Weather_FieldIndex.HdrBrightClamp:
                case Weather_FieldIndex.HdrLumRampNoTex:
                case Weather_FieldIndex.HdrLumRampMin:
                case Weather_FieldIndex.HdrLumRampMax:
                case Weather_FieldIndex.HdrSunlightDimmer:
                case Weather_FieldIndex.HdrGrassDimmer:
                case Weather_FieldIndex.HdrTreeDimmer:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.CloudSpeedLower:
                case Weather_FieldIndex.CloudSpeedUpper:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Classification:
                case Weather_FieldIndex.LightningColor:
                    return true;
                case Weather_FieldIndex.TextureLowerLayer:
                    return obj.TextureLowerLayer_Property.HasBeenSet;
                case Weather_FieldIndex.TextureUpperLayer:
                    return obj.TextureUpperLayer_Property.HasBeenSet;
                case Weather_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                case Weather_FieldIndex.WeatherTypes:
                    return obj.WeatherTypes.HasBeenSet;
                case Weather_FieldIndex.Sounds:
                    return obj.Sounds.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IWeatherGetter obj)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    return obj.TextureLowerLayer;
                case Weather_FieldIndex.TextureUpperLayer:
                    return obj.TextureUpperLayer;
                case Weather_FieldIndex.Model:
                    return obj.Model;
                case Weather_FieldIndex.WeatherTypes:
                    return obj.WeatherTypes;
                case Weather_FieldIndex.FogDayNear:
                    return obj.FogDayNear;
                case Weather_FieldIndex.FogDayFar:
                    return obj.FogDayFar;
                case Weather_FieldIndex.FogNightNear:
                    return obj.FogNightNear;
                case Weather_FieldIndex.FogNightFar:
                    return obj.FogNightFar;
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    return obj.HdrEyeAdaptSpeed;
                case Weather_FieldIndex.HdrBlurRadius:
                    return obj.HdrBlurRadius;
                case Weather_FieldIndex.HdrBlurPasses:
                    return obj.HdrBlurPasses;
                case Weather_FieldIndex.HdrEmissiveMult:
                    return obj.HdrEmissiveMult;
                case Weather_FieldIndex.HdrTargetLum:
                    return obj.HdrTargetLum;
                case Weather_FieldIndex.HdrUpperLumClamp:
                    return obj.HdrUpperLumClamp;
                case Weather_FieldIndex.HdrBrightScale:
                    return obj.HdrBrightScale;
                case Weather_FieldIndex.HdrBrightClamp:
                    return obj.HdrBrightClamp;
                case Weather_FieldIndex.HdrLumRampNoTex:
                    return obj.HdrLumRampNoTex;
                case Weather_FieldIndex.HdrLumRampMin:
                    return obj.HdrLumRampMin;
                case Weather_FieldIndex.HdrLumRampMax:
                    return obj.HdrLumRampMax;
                case Weather_FieldIndex.HdrSunlightDimmer:
                    return obj.HdrSunlightDimmer;
                case Weather_FieldIndex.HdrGrassDimmer:
                    return obj.HdrGrassDimmer;
                case Weather_FieldIndex.HdrTreeDimmer:
                    return obj.HdrTreeDimmer;
                case Weather_FieldIndex.WindSpeed:
                    return obj.WindSpeed;
                case Weather_FieldIndex.CloudSpeedLower:
                    return obj.CloudSpeedLower;
                case Weather_FieldIndex.CloudSpeedUpper:
                    return obj.CloudSpeedUpper;
                case Weather_FieldIndex.TransDelta:
                    return obj.TransDelta;
                case Weather_FieldIndex.SunGlare:
                    return obj.SunGlare;
                case Weather_FieldIndex.SunDamage:
                    return obj.SunDamage;
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    return obj.PrecipitationBeginFadeIn;
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    return obj.PrecipitationEndFadeOut;
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    return obj.ThunderLightningBeginFadeIn;
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    return obj.ThunderLightningEndFadeOut;
                case Weather_FieldIndex.ThunderLightningFrequency:
                    return obj.ThunderLightningFrequency;
                case Weather_FieldIndex.Classification:
                    return obj.Classification;
                case Weather_FieldIndex.LightningColor:
                    return obj.LightningColor;
                case Weather_FieldIndex.Sounds:
                    return obj.Sounds;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IWeather item,
            NotifyingUnsetParameters cmds = null)
        {
            item.TextureLowerLayer_Property.Unset(cmds.ToUnsetParams());
            item.TextureUpperLayer_Property.Unset(cmds.ToUnsetParams());
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.WeatherTypes.Unset(cmds.ToUnsetParams());
            item.FogDayNear = default(Single);
            item.FogDayFar = default(Single);
            item.FogNightNear = default(Single);
            item.FogNightFar = default(Single);
            item.HdrEyeAdaptSpeed = default(Single);
            item.HdrBlurRadius = default(Single);
            item.HdrBlurPasses = default(Single);
            item.HdrEmissiveMult = default(Single);
            item.HdrTargetLum = default(Single);
            item.HdrUpperLumClamp = default(Single);
            item.HdrBrightScale = default(Single);
            item.HdrBrightClamp = default(Single);
            item.HdrLumRampNoTex = default(Single);
            item.HdrLumRampMin = default(Single);
            item.HdrLumRampMax = default(Single);
            item.HdrSunlightDimmer = default(Single);
            item.HdrGrassDimmer = default(Single);
            item.HdrTreeDimmer = default(Single);
            item.WindSpeed = default(Byte);
            item.CloudSpeedLower = default(Byte);
            item.CloudSpeedUpper = default(Byte);
            item.TransDelta = default(Byte);
            item.SunGlare = default(Byte);
            item.SunDamage = default(Byte);
            item.PrecipitationBeginFadeIn = default(Byte);
            item.PrecipitationEndFadeOut = default(Byte);
            item.ThunderLightningBeginFadeIn = default(Byte);
            item.ThunderLightningEndFadeOut = default(Byte);
            item.ThunderLightningFrequency = default(Byte);
            item.Classification = default(Weather.WeatherClassification);
            item.LightningColor = default(Color);
            item.Sounds.Unset(cmds.ToUnsetParams());
        }

        public static Weather_Mask<bool> GetEqualsMask(
            this IWeatherGetter item,
            IWeatherGetter rhs)
        {
            var ret = new Weather_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IWeatherGetter item,
            IWeatherGetter rhs,
            Weather_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.TextureLowerLayer = item.TextureLowerLayer_Property.Equals(rhs.TextureLowerLayer_Property, (l, r) => object.Equals(l, r));
            ret.TextureUpperLayer = item.TextureUpperLayer_Property.Equals(rhs.TextureUpperLayer_Property, (l, r) => object.Equals(l, r));
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            if (item.WeatherTypes.HasBeenSet == rhs.WeatherTypes.HasBeenSet)
            {
                if (item.WeatherTypes.HasBeenSet)
                {
                    ret.WeatherTypes = new MaskItem<bool, IEnumerable<MaskItem<bool, WeatherType_Mask<bool>>>>();
                    ret.WeatherTypes.Specific = item.WeatherTypes.SelectAgainst<WeatherType, MaskItem<bool, WeatherType_Mask<bool>>>(rhs.WeatherTypes, ((l, r) =>
                    {
                        MaskItem<bool, WeatherType_Mask<bool>> itemRet;
                        itemRet = new MaskItem<bool, WeatherType_Mask<bool>>();
                        itemRet.Specific = WeatherTypeCommon.GetEqualsMask(l, r);
                        itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                        return itemRet;
                    }
                    ), out ret.WeatherTypes.Overall);
                    ret.WeatherTypes.Overall = ret.WeatherTypes.Overall && ret.WeatherTypes.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.WeatherTypes = new MaskItem<bool, IEnumerable<MaskItem<bool, WeatherType_Mask<bool>>>>();
                    ret.WeatherTypes.Overall = true;
                }
            }
            else
            {
                ret.WeatherTypes = new MaskItem<bool, IEnumerable<MaskItem<bool, WeatherType_Mask<bool>>>>();
                ret.WeatherTypes.Overall = false;
            }
            ret.FogDayNear = item.FogDayNear == rhs.FogDayNear;
            ret.FogDayFar = item.FogDayFar == rhs.FogDayFar;
            ret.FogNightNear = item.FogNightNear == rhs.FogNightNear;
            ret.FogNightFar = item.FogNightFar == rhs.FogNightFar;
            ret.HdrEyeAdaptSpeed = item.HdrEyeAdaptSpeed == rhs.HdrEyeAdaptSpeed;
            ret.HdrBlurRadius = item.HdrBlurRadius == rhs.HdrBlurRadius;
            ret.HdrBlurPasses = item.HdrBlurPasses == rhs.HdrBlurPasses;
            ret.HdrEmissiveMult = item.HdrEmissiveMult == rhs.HdrEmissiveMult;
            ret.HdrTargetLum = item.HdrTargetLum == rhs.HdrTargetLum;
            ret.HdrUpperLumClamp = item.HdrUpperLumClamp == rhs.HdrUpperLumClamp;
            ret.HdrBrightScale = item.HdrBrightScale == rhs.HdrBrightScale;
            ret.HdrBrightClamp = item.HdrBrightClamp == rhs.HdrBrightClamp;
            ret.HdrLumRampNoTex = item.HdrLumRampNoTex == rhs.HdrLumRampNoTex;
            ret.HdrLumRampMin = item.HdrLumRampMin == rhs.HdrLumRampMin;
            ret.HdrLumRampMax = item.HdrLumRampMax == rhs.HdrLumRampMax;
            ret.HdrSunlightDimmer = item.HdrSunlightDimmer == rhs.HdrSunlightDimmer;
            ret.HdrGrassDimmer = item.HdrGrassDimmer == rhs.HdrGrassDimmer;
            ret.HdrTreeDimmer = item.HdrTreeDimmer == rhs.HdrTreeDimmer;
            ret.WindSpeed = item.WindSpeed == rhs.WindSpeed;
            ret.CloudSpeedLower = item.CloudSpeedLower == rhs.CloudSpeedLower;
            ret.CloudSpeedUpper = item.CloudSpeedUpper == rhs.CloudSpeedUpper;
            ret.TransDelta = item.TransDelta == rhs.TransDelta;
            ret.SunGlare = item.SunGlare == rhs.SunGlare;
            ret.SunDamage = item.SunDamage == rhs.SunDamage;
            ret.PrecipitationBeginFadeIn = item.PrecipitationBeginFadeIn == rhs.PrecipitationBeginFadeIn;
            ret.PrecipitationEndFadeOut = item.PrecipitationEndFadeOut == rhs.PrecipitationEndFadeOut;
            ret.ThunderLightningBeginFadeIn = item.ThunderLightningBeginFadeIn == rhs.ThunderLightningBeginFadeIn;
            ret.ThunderLightningEndFadeOut = item.ThunderLightningEndFadeOut == rhs.ThunderLightningEndFadeOut;
            ret.ThunderLightningFrequency = item.ThunderLightningFrequency == rhs.ThunderLightningFrequency;
            ret.Classification = item.Classification == rhs.Classification;
            ret.LightningColor = item.LightningColor == rhs.LightningColor;
            if (item.Sounds.HasBeenSet == rhs.Sounds.HasBeenSet)
            {
                if (item.Sounds.HasBeenSet)
                {
                    ret.Sounds = new MaskItem<bool, IEnumerable<MaskItem<bool, WeatherSound_Mask<bool>>>>();
                    ret.Sounds.Specific = item.Sounds.SelectAgainst<WeatherSound, MaskItem<bool, WeatherSound_Mask<bool>>>(rhs.Sounds, ((l, r) =>
                    {
                        MaskItem<bool, WeatherSound_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Sounds.Overall);
                    ret.Sounds.Overall = ret.Sounds.Overall && ret.Sounds.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Sounds = new MaskItem<bool, IEnumerable<MaskItem<bool, WeatherSound_Mask<bool>>>>();
                    ret.Sounds.Overall = true;
                }
            }
            else
            {
                ret.Sounds = new MaskItem<bool, IEnumerable<MaskItem<bool, WeatherSound_Mask<bool>>>>();
                ret.Sounds.Overall = false;
            }
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IWeatherGetter item,
            string name = null,
            Weather_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IWeatherGetter item,
            FileGeneration fg,
            string name = null,
            Weather_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Weather)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Weather)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TextureLowerLayer ?? true)
                {
                    fg.AppendLine($"TextureLowerLayer => {item.TextureLowerLayer}");
                }
                if (printMask?.TextureUpperLayer ?? true)
                {
                    fg.AppendLine($"TextureUpperLayer => {item.TextureUpperLayer}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.WeatherTypes?.Overall ?? true)
                {
                    fg.AppendLine("WeatherTypes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.WeatherTypes)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.FogDayNear ?? true)
                {
                    fg.AppendLine($"FogDayNear => {item.FogDayNear}");
                }
                if (printMask?.FogDayFar ?? true)
                {
                    fg.AppendLine($"FogDayFar => {item.FogDayFar}");
                }
                if (printMask?.FogNightNear ?? true)
                {
                    fg.AppendLine($"FogNightNear => {item.FogNightNear}");
                }
                if (printMask?.FogNightFar ?? true)
                {
                    fg.AppendLine($"FogNightFar => {item.FogNightFar}");
                }
                if (printMask?.HdrEyeAdaptSpeed ?? true)
                {
                    fg.AppendLine($"HdrEyeAdaptSpeed => {item.HdrEyeAdaptSpeed}");
                }
                if (printMask?.HdrBlurRadius ?? true)
                {
                    fg.AppendLine($"HdrBlurRadius => {item.HdrBlurRadius}");
                }
                if (printMask?.HdrBlurPasses ?? true)
                {
                    fg.AppendLine($"HdrBlurPasses => {item.HdrBlurPasses}");
                }
                if (printMask?.HdrEmissiveMult ?? true)
                {
                    fg.AppendLine($"HdrEmissiveMult => {item.HdrEmissiveMult}");
                }
                if (printMask?.HdrTargetLum ?? true)
                {
                    fg.AppendLine($"HdrTargetLum => {item.HdrTargetLum}");
                }
                if (printMask?.HdrUpperLumClamp ?? true)
                {
                    fg.AppendLine($"HdrUpperLumClamp => {item.HdrUpperLumClamp}");
                }
                if (printMask?.HdrBrightScale ?? true)
                {
                    fg.AppendLine($"HdrBrightScale => {item.HdrBrightScale}");
                }
                if (printMask?.HdrBrightClamp ?? true)
                {
                    fg.AppendLine($"HdrBrightClamp => {item.HdrBrightClamp}");
                }
                if (printMask?.HdrLumRampNoTex ?? true)
                {
                    fg.AppendLine($"HdrLumRampNoTex => {item.HdrLumRampNoTex}");
                }
                if (printMask?.HdrLumRampMin ?? true)
                {
                    fg.AppendLine($"HdrLumRampMin => {item.HdrLumRampMin}");
                }
                if (printMask?.HdrLumRampMax ?? true)
                {
                    fg.AppendLine($"HdrLumRampMax => {item.HdrLumRampMax}");
                }
                if (printMask?.HdrSunlightDimmer ?? true)
                {
                    fg.AppendLine($"HdrSunlightDimmer => {item.HdrSunlightDimmer}");
                }
                if (printMask?.HdrGrassDimmer ?? true)
                {
                    fg.AppendLine($"HdrGrassDimmer => {item.HdrGrassDimmer}");
                }
                if (printMask?.HdrTreeDimmer ?? true)
                {
                    fg.AppendLine($"HdrTreeDimmer => {item.HdrTreeDimmer}");
                }
                if (printMask?.WindSpeed ?? true)
                {
                    fg.AppendLine($"WindSpeed => {item.WindSpeed}");
                }
                if (printMask?.CloudSpeedLower ?? true)
                {
                    fg.AppendLine($"CloudSpeedLower => {item.CloudSpeedLower}");
                }
                if (printMask?.CloudSpeedUpper ?? true)
                {
                    fg.AppendLine($"CloudSpeedUpper => {item.CloudSpeedUpper}");
                }
                if (printMask?.TransDelta ?? true)
                {
                    fg.AppendLine($"TransDelta => {item.TransDelta}");
                }
                if (printMask?.SunGlare ?? true)
                {
                    fg.AppendLine($"SunGlare => {item.SunGlare}");
                }
                if (printMask?.SunDamage ?? true)
                {
                    fg.AppendLine($"SunDamage => {item.SunDamage}");
                }
                if (printMask?.PrecipitationBeginFadeIn ?? true)
                {
                    fg.AppendLine($"PrecipitationBeginFadeIn => {item.PrecipitationBeginFadeIn}");
                }
                if (printMask?.PrecipitationEndFadeOut ?? true)
                {
                    fg.AppendLine($"PrecipitationEndFadeOut => {item.PrecipitationEndFadeOut}");
                }
                if (printMask?.ThunderLightningBeginFadeIn ?? true)
                {
                    fg.AppendLine($"ThunderLightningBeginFadeIn => {item.ThunderLightningBeginFadeIn}");
                }
                if (printMask?.ThunderLightningEndFadeOut ?? true)
                {
                    fg.AppendLine($"ThunderLightningEndFadeOut => {item.ThunderLightningEndFadeOut}");
                }
                if (printMask?.ThunderLightningFrequency ?? true)
                {
                    fg.AppendLine($"ThunderLightningFrequency => {item.ThunderLightningFrequency}");
                }
                if (printMask?.Classification ?? true)
                {
                    fg.AppendLine($"Classification => {item.Classification}");
                }
                if (printMask?.LightningColor ?? true)
                {
                    fg.AppendLine($"LightningColor => {item.LightningColor}");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Sounds)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IWeatherGetter item,
            Weather_Mask<bool?> checkMask)
        {
            if (checkMask.TextureLowerLayer.HasValue && checkMask.TextureLowerLayer.Value != item.TextureLowerLayer_Property.HasBeenSet) return false;
            if (checkMask.TextureUpperLayer.HasValue && checkMask.TextureUpperLayer.Value != item.TextureUpperLayer_Property.HasBeenSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.WeatherTypes.Overall.HasValue && checkMask.WeatherTypes.Overall.Value != item.WeatherTypes.HasBeenSet) return false;
            if (checkMask.Sounds.Overall.HasValue && checkMask.Sounds.Overall.Value != item.Sounds.HasBeenSet) return false;
            return true;
        }

        public static Weather_Mask<bool> GetHasBeenSetMask(IWeatherGetter item)
        {
            var ret = new Weather_Mask<bool>();
            ret.TextureLowerLayer = item.TextureLowerLayer_Property.HasBeenSet;
            ret.TextureUpperLayer = item.TextureUpperLayer_Property.HasBeenSet;
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model));
            ret.WeatherTypes = new MaskItem<bool, IEnumerable<MaskItem<bool, WeatherType_Mask<bool>>>>(item.WeatherTypes.HasBeenSet, item.WeatherTypes.Select((i) => new MaskItem<bool, WeatherType_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.FogDayNear = true;
            ret.FogDayFar = true;
            ret.FogNightNear = true;
            ret.FogNightFar = true;
            ret.HdrEyeAdaptSpeed = true;
            ret.HdrBlurRadius = true;
            ret.HdrBlurPasses = true;
            ret.HdrEmissiveMult = true;
            ret.HdrTargetLum = true;
            ret.HdrUpperLumClamp = true;
            ret.HdrBrightScale = true;
            ret.HdrBrightClamp = true;
            ret.HdrLumRampNoTex = true;
            ret.HdrLumRampMin = true;
            ret.HdrLumRampMax = true;
            ret.HdrSunlightDimmer = true;
            ret.HdrGrassDimmer = true;
            ret.HdrTreeDimmer = true;
            ret.WindSpeed = true;
            ret.CloudSpeedLower = true;
            ret.CloudSpeedUpper = true;
            ret.TransDelta = true;
            ret.SunGlare = true;
            ret.SunDamage = true;
            ret.PrecipitationBeginFadeIn = true;
            ret.PrecipitationEndFadeOut = true;
            ret.ThunderLightningBeginFadeIn = true;
            ret.ThunderLightningEndFadeOut = true;
            ret.ThunderLightningFrequency = true;
            ret.Classification = true;
            ret.LightningColor = true;
            ret.Sounds = new MaskItem<bool, IEnumerable<MaskItem<bool, WeatherSound_Mask<bool>>>>(item.Sounds.HasBeenSet, item.Sounds.Select((i) => new MaskItem<bool, WeatherSound_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static Weather_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Weather_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Weather_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Weather_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Weather_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Weather_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Weather_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            IWeatherGetter item,
            bool doMasks,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Weather_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            IWeatherGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Weather");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Weather");
            }
            if (item.TextureLowerLayer_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.TextureLowerLayer) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.TextureLowerLayer),
                    item: item.TextureLowerLayer_Property,
                    fieldIndex: (int)Weather_FieldIndex.TextureLowerLayer,
                    errorMask: errorMask);
            }
            if (item.TextureUpperLayer_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.TextureUpperLayer) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.TextureUpperLayer),
                    item: item.TextureUpperLayer_Property,
                    fieldIndex: (int)Weather_FieldIndex.TextureUpperLayer,
                    errorMask: errorMask);
            }
            if (item.Model_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.Model) ?? true))
            {
                LoquiXmlTranslation<Model>.Instance.Write(
                    node: elem,
                    item: item.Model_Property,
                    name: nameof(item.Model),
                    fieldIndex: (int)Weather_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            if (item.WeatherTypes.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.WeatherTypes) ?? true))
            {
                ListXmlTranslation<WeatherType>.Instance.Write(
                    node: elem,
                    name: nameof(item.WeatherTypes),
                    item: item.WeatherTypes,
                    fieldIndex: (int)Weather_FieldIndex.WeatherTypes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.WeatherTypes),
                    transl: (XElement subNode, WeatherType subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<WeatherType>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDayNear) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FogDayNear),
                    item: item.FogDayNear_Property,
                    fieldIndex: (int)Weather_FieldIndex.FogDayNear,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDayFar) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FogDayFar),
                    item: item.FogDayFar_Property,
                    fieldIndex: (int)Weather_FieldIndex.FogDayFar,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogNightNear) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FogNightNear),
                    item: item.FogNightNear_Property,
                    fieldIndex: (int)Weather_FieldIndex.FogNightNear,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogNightFar) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FogNightFar),
                    item: item.FogNightFar_Property,
                    fieldIndex: (int)Weather_FieldIndex.FogNightFar,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrEyeAdaptSpeed) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HdrEyeAdaptSpeed),
                    item: item.HdrEyeAdaptSpeed_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrEyeAdaptSpeed,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrBlurRadius) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HdrBlurRadius),
                    item: item.HdrBlurRadius_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrBlurRadius,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrBlurPasses) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HdrBlurPasses),
                    item: item.HdrBlurPasses_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrBlurPasses,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrEmissiveMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HdrEmissiveMult),
                    item: item.HdrEmissiveMult_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrEmissiveMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrTargetLum) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HdrTargetLum),
                    item: item.HdrTargetLum_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrTargetLum,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrUpperLumClamp) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HdrUpperLumClamp),
                    item: item.HdrUpperLumClamp_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrUpperLumClamp,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrBrightScale) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HdrBrightScale),
                    item: item.HdrBrightScale_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrBrightScale,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrBrightClamp) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HdrBrightClamp),
                    item: item.HdrBrightClamp_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrBrightClamp,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrLumRampNoTex) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HdrLumRampNoTex),
                    item: item.HdrLumRampNoTex_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrLumRampNoTex,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrLumRampMin) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HdrLumRampMin),
                    item: item.HdrLumRampMin_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrLumRampMin,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrLumRampMax) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HdrLumRampMax),
                    item: item.HdrLumRampMax_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrLumRampMax,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrSunlightDimmer) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HdrSunlightDimmer),
                    item: item.HdrSunlightDimmer_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrSunlightDimmer,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrGrassDimmer) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HdrGrassDimmer),
                    item: item.HdrGrassDimmer_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrGrassDimmer,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrTreeDimmer) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HdrTreeDimmer),
                    item: item.HdrTreeDimmer_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrTreeDimmer,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.WindSpeed) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.WindSpeed),
                    item: item.WindSpeed_Property,
                    fieldIndex: (int)Weather_FieldIndex.WindSpeed,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudSpeedLower) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.CloudSpeedLower),
                    item: item.CloudSpeedLower_Property,
                    fieldIndex: (int)Weather_FieldIndex.CloudSpeedLower,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudSpeedUpper) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.CloudSpeedUpper),
                    item: item.CloudSpeedUpper_Property,
                    fieldIndex: (int)Weather_FieldIndex.CloudSpeedUpper,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.TransDelta) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.TransDelta),
                    item: item.TransDelta_Property,
                    fieldIndex: (int)Weather_FieldIndex.TransDelta,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.SunGlare) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.SunGlare),
                    item: item.SunGlare_Property,
                    fieldIndex: (int)Weather_FieldIndex.SunGlare,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.SunDamage) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.SunDamage),
                    item: item.SunDamage_Property,
                    fieldIndex: (int)Weather_FieldIndex.SunDamage,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.PrecipitationBeginFadeIn) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.PrecipitationBeginFadeIn),
                    item: item.PrecipitationBeginFadeIn_Property,
                    fieldIndex: (int)Weather_FieldIndex.PrecipitationBeginFadeIn,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.PrecipitationEndFadeOut) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.PrecipitationEndFadeOut),
                    item: item.PrecipitationEndFadeOut_Property,
                    fieldIndex: (int)Weather_FieldIndex.PrecipitationEndFadeOut,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningBeginFadeIn) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.ThunderLightningBeginFadeIn),
                    item: item.ThunderLightningBeginFadeIn_Property,
                    fieldIndex: (int)Weather_FieldIndex.ThunderLightningBeginFadeIn,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningEndFadeOut) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.ThunderLightningEndFadeOut),
                    item: item.ThunderLightningEndFadeOut_Property,
                    fieldIndex: (int)Weather_FieldIndex.ThunderLightningEndFadeOut,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningFrequency) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.ThunderLightningFrequency),
                    item: item.ThunderLightningFrequency_Property,
                    fieldIndex: (int)Weather_FieldIndex.ThunderLightningFrequency,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.Classification) ?? true))
            {
                EnumXmlTranslation<Weather.WeatherClassification>.Instance.Write(
                    node: elem,
                    name: nameof(item.Classification),
                    item: item.Classification_Property,
                    fieldIndex: (int)Weather_FieldIndex.Classification,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.LightningColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.LightningColor),
                    item: item.LightningColor_Property,
                    fieldIndex: (int)Weather_FieldIndex.LightningColor,
                    errorMask: errorMask);
            }
            if (item.Sounds.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.Sounds) ?? true))
            {
                ListXmlTranslation<WeatherSound>.Instance.Write(
                    node: elem,
                    name: nameof(item.Sounds),
                    item: item.Sounds,
                    fieldIndex: (int)Weather_FieldIndex.Sounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.Sounds),
                    transl: (XElement subNode, WeatherSound subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<WeatherSound>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Weather item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Weather_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Weather_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Weather item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Weather_Registration.WTHR_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Weather item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TextureLowerLayer_Property,
                fieldIndex: (int)Weather_FieldIndex.TextureLowerLayer,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Weather_Registration.CNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TextureUpperLayer_Property,
                fieldIndex: (int)Weather_FieldIndex.TextureUpperLayer,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Weather_Registration.DNAM_HEADER),
                nullable: false);
            LoquiBinaryTranslation<Model>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                fieldIndex: (int)Weather_FieldIndex.Model,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherType>.Instance.Write(
                writer: writer,
                items: item.WeatherTypes,
                fieldIndex: (int)Weather_FieldIndex.WeatherTypes,
                recordType: Weather_Registration.NAM0_HEADER,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<WeatherType>.Instance.Write);
            using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Weather_Registration.FNAM_HEADER)))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogDayNear_Property,
                    fieldIndex: (int)Weather_FieldIndex.FogDayNear,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogDayFar_Property,
                    fieldIndex: (int)Weather_FieldIndex.FogDayFar,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogNightNear_Property,
                    fieldIndex: (int)Weather_FieldIndex.FogNightNear,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogNightFar_Property,
                    fieldIndex: (int)Weather_FieldIndex.FogNightFar,
                    errorMask: errorMask);
            }
            using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Weather_Registration.HNAM_HEADER)))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HdrEyeAdaptSpeed_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrEyeAdaptSpeed,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HdrBlurRadius_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrBlurRadius,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HdrBlurPasses_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrBlurPasses,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HdrEmissiveMult_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrEmissiveMult,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HdrTargetLum_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrTargetLum,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HdrUpperLumClamp_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrUpperLumClamp,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HdrBrightScale_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrBrightScale,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HdrBrightClamp_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrBrightClamp,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HdrLumRampNoTex_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrLumRampNoTex,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HdrLumRampMin_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrLumRampMin,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HdrLumRampMax_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrLumRampMax,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HdrSunlightDimmer_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrSunlightDimmer,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HdrGrassDimmer_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrGrassDimmer,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HdrTreeDimmer_Property,
                    fieldIndex: (int)Weather_FieldIndex.HdrTreeDimmer,
                    errorMask: errorMask);
            }
            using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Weather_Registration.DATA_HEADER)))
            {
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.WindSpeed_Property,
                    fieldIndex: (int)Weather_FieldIndex.WindSpeed,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CloudSpeedLower_Property,
                    fieldIndex: (int)Weather_FieldIndex.CloudSpeedLower,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CloudSpeedUpper_Property,
                    fieldIndex: (int)Weather_FieldIndex.CloudSpeedUpper,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.TransDelta_Property,
                    fieldIndex: (int)Weather_FieldIndex.TransDelta,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SunGlare_Property,
                    fieldIndex: (int)Weather_FieldIndex.SunGlare,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SunDamage_Property,
                    fieldIndex: (int)Weather_FieldIndex.SunDamage,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.PrecipitationBeginFadeIn_Property,
                    fieldIndex: (int)Weather_FieldIndex.PrecipitationBeginFadeIn,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.PrecipitationEndFadeOut_Property,
                    fieldIndex: (int)Weather_FieldIndex.PrecipitationEndFadeOut,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ThunderLightningBeginFadeIn_Property,
                    fieldIndex: (int)Weather_FieldIndex.ThunderLightningBeginFadeIn,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ThunderLightningEndFadeOut_Property,
                    fieldIndex: (int)Weather_FieldIndex.ThunderLightningEndFadeOut,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ThunderLightningFrequency_Property,
                    fieldIndex: (int)Weather_FieldIndex.ThunderLightningFrequency,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Weather.WeatherClassification>.Instance.Write(
                    writer,
                    item.Classification_Property,
                    length: 1,
                    fieldIndex: (int)Weather_FieldIndex.Classification,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LightningColor_Property,
                    fieldIndex: (int)Weather_FieldIndex.LightningColor,
                    errorMask: errorMask);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherSound>.Instance.Write(
                writer: writer,
                items: item.Sounds,
                fieldIndex: (int)Weather_FieldIndex.Sounds,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<WeatherSound>.Instance.Write);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Weather_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Weather_Mask<T>>
    {
        #region Ctors
        public Weather_Mask()
        {
        }

        public Weather_Mask(T initialValue)
        {
            this.TextureLowerLayer = initialValue;
            this.TextureUpperLayer = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.WeatherTypes = new MaskItem<T, IEnumerable<MaskItem<T, WeatherType_Mask<T>>>>(initialValue, null);
            this.FogDayNear = initialValue;
            this.FogDayFar = initialValue;
            this.FogNightNear = initialValue;
            this.FogNightFar = initialValue;
            this.HdrEyeAdaptSpeed = initialValue;
            this.HdrBlurRadius = initialValue;
            this.HdrBlurPasses = initialValue;
            this.HdrEmissiveMult = initialValue;
            this.HdrTargetLum = initialValue;
            this.HdrUpperLumClamp = initialValue;
            this.HdrBrightScale = initialValue;
            this.HdrBrightClamp = initialValue;
            this.HdrLumRampNoTex = initialValue;
            this.HdrLumRampMin = initialValue;
            this.HdrLumRampMax = initialValue;
            this.HdrSunlightDimmer = initialValue;
            this.HdrGrassDimmer = initialValue;
            this.HdrTreeDimmer = initialValue;
            this.WindSpeed = initialValue;
            this.CloudSpeedLower = initialValue;
            this.CloudSpeedUpper = initialValue;
            this.TransDelta = initialValue;
            this.SunGlare = initialValue;
            this.SunDamage = initialValue;
            this.PrecipitationBeginFadeIn = initialValue;
            this.PrecipitationEndFadeOut = initialValue;
            this.ThunderLightningBeginFadeIn = initialValue;
            this.ThunderLightningEndFadeOut = initialValue;
            this.ThunderLightningFrequency = initialValue;
            this.Classification = initialValue;
            this.LightningColor = initialValue;
            this.Sounds = new MaskItem<T, IEnumerable<MaskItem<T, WeatherSound_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T TextureLowerLayer;
        public T TextureUpperLayer;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public MaskItem<T, IEnumerable<MaskItem<T, WeatherType_Mask<T>>>> WeatherTypes;
        public T FogDayNear;
        public T FogDayFar;
        public T FogNightNear;
        public T FogNightFar;
        public T HdrEyeAdaptSpeed;
        public T HdrBlurRadius;
        public T HdrBlurPasses;
        public T HdrEmissiveMult;
        public T HdrTargetLum;
        public T HdrUpperLumClamp;
        public T HdrBrightScale;
        public T HdrBrightClamp;
        public T HdrLumRampNoTex;
        public T HdrLumRampMin;
        public T HdrLumRampMax;
        public T HdrSunlightDimmer;
        public T HdrGrassDimmer;
        public T HdrTreeDimmer;
        public T WindSpeed;
        public T CloudSpeedLower;
        public T CloudSpeedUpper;
        public T TransDelta;
        public T SunGlare;
        public T SunDamage;
        public T PrecipitationBeginFadeIn;
        public T PrecipitationEndFadeOut;
        public T ThunderLightningBeginFadeIn;
        public T ThunderLightningEndFadeOut;
        public T ThunderLightningFrequency;
        public T Classification;
        public T LightningColor;
        public MaskItem<T, IEnumerable<MaskItem<T, WeatherSound_Mask<T>>>> Sounds;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Weather_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Weather_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.TextureLowerLayer, rhs.TextureLowerLayer)) return false;
            if (!object.Equals(this.TextureUpperLayer, rhs.TextureUpperLayer)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.WeatherTypes, rhs.WeatherTypes)) return false;
            if (!object.Equals(this.FogDayNear, rhs.FogDayNear)) return false;
            if (!object.Equals(this.FogDayFar, rhs.FogDayFar)) return false;
            if (!object.Equals(this.FogNightNear, rhs.FogNightNear)) return false;
            if (!object.Equals(this.FogNightFar, rhs.FogNightFar)) return false;
            if (!object.Equals(this.HdrEyeAdaptSpeed, rhs.HdrEyeAdaptSpeed)) return false;
            if (!object.Equals(this.HdrBlurRadius, rhs.HdrBlurRadius)) return false;
            if (!object.Equals(this.HdrBlurPasses, rhs.HdrBlurPasses)) return false;
            if (!object.Equals(this.HdrEmissiveMult, rhs.HdrEmissiveMult)) return false;
            if (!object.Equals(this.HdrTargetLum, rhs.HdrTargetLum)) return false;
            if (!object.Equals(this.HdrUpperLumClamp, rhs.HdrUpperLumClamp)) return false;
            if (!object.Equals(this.HdrBrightScale, rhs.HdrBrightScale)) return false;
            if (!object.Equals(this.HdrBrightClamp, rhs.HdrBrightClamp)) return false;
            if (!object.Equals(this.HdrLumRampNoTex, rhs.HdrLumRampNoTex)) return false;
            if (!object.Equals(this.HdrLumRampMin, rhs.HdrLumRampMin)) return false;
            if (!object.Equals(this.HdrLumRampMax, rhs.HdrLumRampMax)) return false;
            if (!object.Equals(this.HdrSunlightDimmer, rhs.HdrSunlightDimmer)) return false;
            if (!object.Equals(this.HdrGrassDimmer, rhs.HdrGrassDimmer)) return false;
            if (!object.Equals(this.HdrTreeDimmer, rhs.HdrTreeDimmer)) return false;
            if (!object.Equals(this.WindSpeed, rhs.WindSpeed)) return false;
            if (!object.Equals(this.CloudSpeedLower, rhs.CloudSpeedLower)) return false;
            if (!object.Equals(this.CloudSpeedUpper, rhs.CloudSpeedUpper)) return false;
            if (!object.Equals(this.TransDelta, rhs.TransDelta)) return false;
            if (!object.Equals(this.SunGlare, rhs.SunGlare)) return false;
            if (!object.Equals(this.SunDamage, rhs.SunDamage)) return false;
            if (!object.Equals(this.PrecipitationBeginFadeIn, rhs.PrecipitationBeginFadeIn)) return false;
            if (!object.Equals(this.PrecipitationEndFadeOut, rhs.PrecipitationEndFadeOut)) return false;
            if (!object.Equals(this.ThunderLightningBeginFadeIn, rhs.ThunderLightningBeginFadeIn)) return false;
            if (!object.Equals(this.ThunderLightningEndFadeOut, rhs.ThunderLightningEndFadeOut)) return false;
            if (!object.Equals(this.ThunderLightningFrequency, rhs.ThunderLightningFrequency)) return false;
            if (!object.Equals(this.Classification, rhs.Classification)) return false;
            if (!object.Equals(this.LightningColor, rhs.LightningColor)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.TextureLowerLayer?.GetHashCode());
            ret = ret.CombineHashCode(this.TextureUpperLayer?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.WeatherTypes?.GetHashCode());
            ret = ret.CombineHashCode(this.FogDayNear?.GetHashCode());
            ret = ret.CombineHashCode(this.FogDayFar?.GetHashCode());
            ret = ret.CombineHashCode(this.FogNightNear?.GetHashCode());
            ret = ret.CombineHashCode(this.FogNightFar?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrEyeAdaptSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrBlurRadius?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrBlurPasses?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrEmissiveMult?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrTargetLum?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrUpperLumClamp?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrBrightScale?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrBrightClamp?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrLumRampNoTex?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrLumRampMin?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrLumRampMax?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrSunlightDimmer?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrGrassDimmer?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrTreeDimmer?.GetHashCode());
            ret = ret.CombineHashCode(this.WindSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.CloudSpeedLower?.GetHashCode());
            ret = ret.CombineHashCode(this.CloudSpeedUpper?.GetHashCode());
            ret = ret.CombineHashCode(this.TransDelta?.GetHashCode());
            ret = ret.CombineHashCode(this.SunGlare?.GetHashCode());
            ret = ret.CombineHashCode(this.SunDamage?.GetHashCode());
            ret = ret.CombineHashCode(this.PrecipitationBeginFadeIn?.GetHashCode());
            ret = ret.CombineHashCode(this.PrecipitationEndFadeOut?.GetHashCode());
            ret = ret.CombineHashCode(this.ThunderLightningBeginFadeIn?.GetHashCode());
            ret = ret.CombineHashCode(this.ThunderLightningEndFadeOut?.GetHashCode());
            ret = ret.CombineHashCode(this.ThunderLightningFrequency?.GetHashCode());
            ret = ret.CombineHashCode(this.Classification?.GetHashCode());
            ret = ret.CombineHashCode(this.LightningColor?.GetHashCode());
            ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.TextureLowerLayer)) return false;
            if (!eval(this.TextureUpperLayer)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (this.WeatherTypes != null)
            {
                if (!eval(this.WeatherTypes.Overall)) return false;
                if (this.WeatherTypes.Specific != null)
                {
                    foreach (var item in this.WeatherTypes.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.FogDayNear)) return false;
            if (!eval(this.FogDayFar)) return false;
            if (!eval(this.FogNightNear)) return false;
            if (!eval(this.FogNightFar)) return false;
            if (!eval(this.HdrEyeAdaptSpeed)) return false;
            if (!eval(this.HdrBlurRadius)) return false;
            if (!eval(this.HdrBlurPasses)) return false;
            if (!eval(this.HdrEmissiveMult)) return false;
            if (!eval(this.HdrTargetLum)) return false;
            if (!eval(this.HdrUpperLumClamp)) return false;
            if (!eval(this.HdrBrightScale)) return false;
            if (!eval(this.HdrBrightClamp)) return false;
            if (!eval(this.HdrLumRampNoTex)) return false;
            if (!eval(this.HdrLumRampMin)) return false;
            if (!eval(this.HdrLumRampMax)) return false;
            if (!eval(this.HdrSunlightDimmer)) return false;
            if (!eval(this.HdrGrassDimmer)) return false;
            if (!eval(this.HdrTreeDimmer)) return false;
            if (!eval(this.WindSpeed)) return false;
            if (!eval(this.CloudSpeedLower)) return false;
            if (!eval(this.CloudSpeedUpper)) return false;
            if (!eval(this.TransDelta)) return false;
            if (!eval(this.SunGlare)) return false;
            if (!eval(this.SunDamage)) return false;
            if (!eval(this.PrecipitationBeginFadeIn)) return false;
            if (!eval(this.PrecipitationEndFadeOut)) return false;
            if (!eval(this.ThunderLightningBeginFadeIn)) return false;
            if (!eval(this.ThunderLightningEndFadeOut)) return false;
            if (!eval(this.ThunderLightningFrequency)) return false;
            if (!eval(this.Classification)) return false;
            if (!eval(this.LightningColor)) return false;
            if (this.Sounds != null)
            {
                if (!eval(this.Sounds.Overall)) return false;
                if (this.Sounds.Specific != null)
                {
                    foreach (var item in this.Sounds.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Weather_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Weather_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Weather_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.TextureLowerLayer = eval(this.TextureLowerLayer);
            obj.TextureUpperLayer = eval(this.TextureUpperLayer);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            if (WeatherTypes != null)
            {
                obj.WeatherTypes = new MaskItem<R, IEnumerable<MaskItem<R, WeatherType_Mask<R>>>>();
                obj.WeatherTypes.Overall = eval(this.WeatherTypes.Overall);
                if (WeatherTypes.Specific != null)
                {
                    List<MaskItem<R, WeatherType_Mask<R>>> l = new List<MaskItem<R, WeatherType_Mask<R>>>();
                    obj.WeatherTypes.Specific = l;
                    foreach (var item in WeatherTypes.Specific)
                    {
                        MaskItem<R, WeatherType_Mask<R>> mask = default(MaskItem<R, WeatherType_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, WeatherType_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.FogDayNear = eval(this.FogDayNear);
            obj.FogDayFar = eval(this.FogDayFar);
            obj.FogNightNear = eval(this.FogNightNear);
            obj.FogNightFar = eval(this.FogNightFar);
            obj.HdrEyeAdaptSpeed = eval(this.HdrEyeAdaptSpeed);
            obj.HdrBlurRadius = eval(this.HdrBlurRadius);
            obj.HdrBlurPasses = eval(this.HdrBlurPasses);
            obj.HdrEmissiveMult = eval(this.HdrEmissiveMult);
            obj.HdrTargetLum = eval(this.HdrTargetLum);
            obj.HdrUpperLumClamp = eval(this.HdrUpperLumClamp);
            obj.HdrBrightScale = eval(this.HdrBrightScale);
            obj.HdrBrightClamp = eval(this.HdrBrightClamp);
            obj.HdrLumRampNoTex = eval(this.HdrLumRampNoTex);
            obj.HdrLumRampMin = eval(this.HdrLumRampMin);
            obj.HdrLumRampMax = eval(this.HdrLumRampMax);
            obj.HdrSunlightDimmer = eval(this.HdrSunlightDimmer);
            obj.HdrGrassDimmer = eval(this.HdrGrassDimmer);
            obj.HdrTreeDimmer = eval(this.HdrTreeDimmer);
            obj.WindSpeed = eval(this.WindSpeed);
            obj.CloudSpeedLower = eval(this.CloudSpeedLower);
            obj.CloudSpeedUpper = eval(this.CloudSpeedUpper);
            obj.TransDelta = eval(this.TransDelta);
            obj.SunGlare = eval(this.SunGlare);
            obj.SunDamage = eval(this.SunDamage);
            obj.PrecipitationBeginFadeIn = eval(this.PrecipitationBeginFadeIn);
            obj.PrecipitationEndFadeOut = eval(this.PrecipitationEndFadeOut);
            obj.ThunderLightningBeginFadeIn = eval(this.ThunderLightningBeginFadeIn);
            obj.ThunderLightningEndFadeOut = eval(this.ThunderLightningEndFadeOut);
            obj.ThunderLightningFrequency = eval(this.ThunderLightningFrequency);
            obj.Classification = eval(this.Classification);
            obj.LightningColor = eval(this.LightningColor);
            if (Sounds != null)
            {
                obj.Sounds = new MaskItem<R, IEnumerable<MaskItem<R, WeatherSound_Mask<R>>>>();
                obj.Sounds.Overall = eval(this.Sounds.Overall);
                if (Sounds.Specific != null)
                {
                    List<MaskItem<R, WeatherSound_Mask<R>>> l = new List<MaskItem<R, WeatherSound_Mask<R>>>();
                    obj.Sounds.Specific = l;
                    foreach (var item in Sounds.Specific)
                    {
                        MaskItem<R, WeatherSound_Mask<R>> mask = default(MaskItem<R, WeatherSound_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, WeatherSound_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.WeatherTypes.Specific = null;
            this.Sounds.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Weather_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Weather_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Weather_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TextureLowerLayer ?? true)
                {
                    fg.AppendLine($"TextureLowerLayer => {TextureLowerLayer}");
                }
                if (printMask?.TextureUpperLayer ?? true)
                {
                    fg.AppendLine($"TextureUpperLayer => {TextureUpperLayer}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.WeatherTypes?.Overall ?? true)
                {
                    fg.AppendLine("WeatherTypes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (WeatherTypes.Overall != null)
                        {
                            fg.AppendLine(WeatherTypes.Overall.ToString());
                        }
                        if (WeatherTypes.Specific != null)
                        {
                            foreach (var subItem in WeatherTypes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.FogDayNear ?? true)
                {
                    fg.AppendLine($"FogDayNear => {FogDayNear}");
                }
                if (printMask?.FogDayFar ?? true)
                {
                    fg.AppendLine($"FogDayFar => {FogDayFar}");
                }
                if (printMask?.FogNightNear ?? true)
                {
                    fg.AppendLine($"FogNightNear => {FogNightNear}");
                }
                if (printMask?.FogNightFar ?? true)
                {
                    fg.AppendLine($"FogNightFar => {FogNightFar}");
                }
                if (printMask?.HdrEyeAdaptSpeed ?? true)
                {
                    fg.AppendLine($"HdrEyeAdaptSpeed => {HdrEyeAdaptSpeed}");
                }
                if (printMask?.HdrBlurRadius ?? true)
                {
                    fg.AppendLine($"HdrBlurRadius => {HdrBlurRadius}");
                }
                if (printMask?.HdrBlurPasses ?? true)
                {
                    fg.AppendLine($"HdrBlurPasses => {HdrBlurPasses}");
                }
                if (printMask?.HdrEmissiveMult ?? true)
                {
                    fg.AppendLine($"HdrEmissiveMult => {HdrEmissiveMult}");
                }
                if (printMask?.HdrTargetLum ?? true)
                {
                    fg.AppendLine($"HdrTargetLum => {HdrTargetLum}");
                }
                if (printMask?.HdrUpperLumClamp ?? true)
                {
                    fg.AppendLine($"HdrUpperLumClamp => {HdrUpperLumClamp}");
                }
                if (printMask?.HdrBrightScale ?? true)
                {
                    fg.AppendLine($"HdrBrightScale => {HdrBrightScale}");
                }
                if (printMask?.HdrBrightClamp ?? true)
                {
                    fg.AppendLine($"HdrBrightClamp => {HdrBrightClamp}");
                }
                if (printMask?.HdrLumRampNoTex ?? true)
                {
                    fg.AppendLine($"HdrLumRampNoTex => {HdrLumRampNoTex}");
                }
                if (printMask?.HdrLumRampMin ?? true)
                {
                    fg.AppendLine($"HdrLumRampMin => {HdrLumRampMin}");
                }
                if (printMask?.HdrLumRampMax ?? true)
                {
                    fg.AppendLine($"HdrLumRampMax => {HdrLumRampMax}");
                }
                if (printMask?.HdrSunlightDimmer ?? true)
                {
                    fg.AppendLine($"HdrSunlightDimmer => {HdrSunlightDimmer}");
                }
                if (printMask?.HdrGrassDimmer ?? true)
                {
                    fg.AppendLine($"HdrGrassDimmer => {HdrGrassDimmer}");
                }
                if (printMask?.HdrTreeDimmer ?? true)
                {
                    fg.AppendLine($"HdrTreeDimmer => {HdrTreeDimmer}");
                }
                if (printMask?.WindSpeed ?? true)
                {
                    fg.AppendLine($"WindSpeed => {WindSpeed}");
                }
                if (printMask?.CloudSpeedLower ?? true)
                {
                    fg.AppendLine($"CloudSpeedLower => {CloudSpeedLower}");
                }
                if (printMask?.CloudSpeedUpper ?? true)
                {
                    fg.AppendLine($"CloudSpeedUpper => {CloudSpeedUpper}");
                }
                if (printMask?.TransDelta ?? true)
                {
                    fg.AppendLine($"TransDelta => {TransDelta}");
                }
                if (printMask?.SunGlare ?? true)
                {
                    fg.AppendLine($"SunGlare => {SunGlare}");
                }
                if (printMask?.SunDamage ?? true)
                {
                    fg.AppendLine($"SunDamage => {SunDamage}");
                }
                if (printMask?.PrecipitationBeginFadeIn ?? true)
                {
                    fg.AppendLine($"PrecipitationBeginFadeIn => {PrecipitationBeginFadeIn}");
                }
                if (printMask?.PrecipitationEndFadeOut ?? true)
                {
                    fg.AppendLine($"PrecipitationEndFadeOut => {PrecipitationEndFadeOut}");
                }
                if (printMask?.ThunderLightningBeginFadeIn ?? true)
                {
                    fg.AppendLine($"ThunderLightningBeginFadeIn => {ThunderLightningBeginFadeIn}");
                }
                if (printMask?.ThunderLightningEndFadeOut ?? true)
                {
                    fg.AppendLine($"ThunderLightningEndFadeOut => {ThunderLightningEndFadeOut}");
                }
                if (printMask?.ThunderLightningFrequency ?? true)
                {
                    fg.AppendLine($"ThunderLightningFrequency => {ThunderLightningFrequency}");
                }
                if (printMask?.Classification ?? true)
                {
                    fg.AppendLine($"Classification => {Classification}");
                }
                if (printMask?.LightningColor ?? true)
                {
                    fg.AppendLine($"LightningColor => {LightningColor}");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Sounds.Overall != null)
                        {
                            fg.AppendLine(Sounds.Overall.ToString());
                        }
                        if (Sounds.Specific != null)
                        {
                            foreach (var subItem in Sounds.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Weather_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Weather_ErrorMask>
    {
        #region Members
        public Exception TextureLowerLayer;
        public Exception TextureUpperLayer;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherType_ErrorMask>>> WeatherTypes;
        public Exception FogDayNear;
        public Exception FogDayFar;
        public Exception FogNightNear;
        public Exception FogNightFar;
        public Exception HdrEyeAdaptSpeed;
        public Exception HdrBlurRadius;
        public Exception HdrBlurPasses;
        public Exception HdrEmissiveMult;
        public Exception HdrTargetLum;
        public Exception HdrUpperLumClamp;
        public Exception HdrBrightScale;
        public Exception HdrBrightClamp;
        public Exception HdrLumRampNoTex;
        public Exception HdrLumRampMin;
        public Exception HdrLumRampMax;
        public Exception HdrSunlightDimmer;
        public Exception HdrGrassDimmer;
        public Exception HdrTreeDimmer;
        public Exception WindSpeed;
        public Exception CloudSpeedLower;
        public Exception CloudSpeedUpper;
        public Exception TransDelta;
        public Exception SunGlare;
        public Exception SunDamage;
        public Exception PrecipitationBeginFadeIn;
        public Exception PrecipitationEndFadeOut;
        public Exception ThunderLightningBeginFadeIn;
        public Exception ThunderLightningEndFadeOut;
        public Exception ThunderLightningFrequency;
        public Exception Classification;
        public Exception LightningColor;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherSound_ErrorMask>>> Sounds;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    return TextureLowerLayer;
                case Weather_FieldIndex.TextureUpperLayer:
                    return TextureUpperLayer;
                case Weather_FieldIndex.Model:
                    return Model;
                case Weather_FieldIndex.WeatherTypes:
                    return WeatherTypes;
                case Weather_FieldIndex.FogDayNear:
                    return FogDayNear;
                case Weather_FieldIndex.FogDayFar:
                    return FogDayFar;
                case Weather_FieldIndex.FogNightNear:
                    return FogNightNear;
                case Weather_FieldIndex.FogNightFar:
                    return FogNightFar;
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    return HdrEyeAdaptSpeed;
                case Weather_FieldIndex.HdrBlurRadius:
                    return HdrBlurRadius;
                case Weather_FieldIndex.HdrBlurPasses:
                    return HdrBlurPasses;
                case Weather_FieldIndex.HdrEmissiveMult:
                    return HdrEmissiveMult;
                case Weather_FieldIndex.HdrTargetLum:
                    return HdrTargetLum;
                case Weather_FieldIndex.HdrUpperLumClamp:
                    return HdrUpperLumClamp;
                case Weather_FieldIndex.HdrBrightScale:
                    return HdrBrightScale;
                case Weather_FieldIndex.HdrBrightClamp:
                    return HdrBrightClamp;
                case Weather_FieldIndex.HdrLumRampNoTex:
                    return HdrLumRampNoTex;
                case Weather_FieldIndex.HdrLumRampMin:
                    return HdrLumRampMin;
                case Weather_FieldIndex.HdrLumRampMax:
                    return HdrLumRampMax;
                case Weather_FieldIndex.HdrSunlightDimmer:
                    return HdrSunlightDimmer;
                case Weather_FieldIndex.HdrGrassDimmer:
                    return HdrGrassDimmer;
                case Weather_FieldIndex.HdrTreeDimmer:
                    return HdrTreeDimmer;
                case Weather_FieldIndex.WindSpeed:
                    return WindSpeed;
                case Weather_FieldIndex.CloudSpeedLower:
                    return CloudSpeedLower;
                case Weather_FieldIndex.CloudSpeedUpper:
                    return CloudSpeedUpper;
                case Weather_FieldIndex.TransDelta:
                    return TransDelta;
                case Weather_FieldIndex.SunGlare:
                    return SunGlare;
                case Weather_FieldIndex.SunDamage:
                    return SunDamage;
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    return PrecipitationBeginFadeIn;
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    return PrecipitationEndFadeOut;
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    return ThunderLightningBeginFadeIn;
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    return ThunderLightningEndFadeOut;
                case Weather_FieldIndex.ThunderLightningFrequency:
                    return ThunderLightningFrequency;
                case Weather_FieldIndex.Classification:
                    return Classification;
                case Weather_FieldIndex.LightningColor:
                    return LightningColor;
                case Weather_FieldIndex.Sounds:
                    return Sounds;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    this.TextureLowerLayer = ex;
                    break;
                case Weather_FieldIndex.TextureUpperLayer:
                    this.TextureUpperLayer = ex;
                    break;
                case Weather_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Weather_FieldIndex.WeatherTypes:
                    this.WeatherTypes = new MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherType_ErrorMask>>>(ex, null);
                    break;
                case Weather_FieldIndex.FogDayNear:
                    this.FogDayNear = ex;
                    break;
                case Weather_FieldIndex.FogDayFar:
                    this.FogDayFar = ex;
                    break;
                case Weather_FieldIndex.FogNightNear:
                    this.FogNightNear = ex;
                    break;
                case Weather_FieldIndex.FogNightFar:
                    this.FogNightFar = ex;
                    break;
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    this.HdrEyeAdaptSpeed = ex;
                    break;
                case Weather_FieldIndex.HdrBlurRadius:
                    this.HdrBlurRadius = ex;
                    break;
                case Weather_FieldIndex.HdrBlurPasses:
                    this.HdrBlurPasses = ex;
                    break;
                case Weather_FieldIndex.HdrEmissiveMult:
                    this.HdrEmissiveMult = ex;
                    break;
                case Weather_FieldIndex.HdrTargetLum:
                    this.HdrTargetLum = ex;
                    break;
                case Weather_FieldIndex.HdrUpperLumClamp:
                    this.HdrUpperLumClamp = ex;
                    break;
                case Weather_FieldIndex.HdrBrightScale:
                    this.HdrBrightScale = ex;
                    break;
                case Weather_FieldIndex.HdrBrightClamp:
                    this.HdrBrightClamp = ex;
                    break;
                case Weather_FieldIndex.HdrLumRampNoTex:
                    this.HdrLumRampNoTex = ex;
                    break;
                case Weather_FieldIndex.HdrLumRampMin:
                    this.HdrLumRampMin = ex;
                    break;
                case Weather_FieldIndex.HdrLumRampMax:
                    this.HdrLumRampMax = ex;
                    break;
                case Weather_FieldIndex.HdrSunlightDimmer:
                    this.HdrSunlightDimmer = ex;
                    break;
                case Weather_FieldIndex.HdrGrassDimmer:
                    this.HdrGrassDimmer = ex;
                    break;
                case Weather_FieldIndex.HdrTreeDimmer:
                    this.HdrTreeDimmer = ex;
                    break;
                case Weather_FieldIndex.WindSpeed:
                    this.WindSpeed = ex;
                    break;
                case Weather_FieldIndex.CloudSpeedLower:
                    this.CloudSpeedLower = ex;
                    break;
                case Weather_FieldIndex.CloudSpeedUpper:
                    this.CloudSpeedUpper = ex;
                    break;
                case Weather_FieldIndex.TransDelta:
                    this.TransDelta = ex;
                    break;
                case Weather_FieldIndex.SunGlare:
                    this.SunGlare = ex;
                    break;
                case Weather_FieldIndex.SunDamage:
                    this.SunDamage = ex;
                    break;
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    this.PrecipitationBeginFadeIn = ex;
                    break;
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    this.PrecipitationEndFadeOut = ex;
                    break;
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    this.ThunderLightningBeginFadeIn = ex;
                    break;
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    this.ThunderLightningEndFadeOut = ex;
                    break;
                case Weather_FieldIndex.ThunderLightningFrequency:
                    this.ThunderLightningFrequency = ex;
                    break;
                case Weather_FieldIndex.Classification:
                    this.Classification = ex;
                    break;
                case Weather_FieldIndex.LightningColor:
                    this.LightningColor = ex;
                    break;
                case Weather_FieldIndex.Sounds:
                    this.Sounds = new MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherSound_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    this.TextureLowerLayer = (Exception)obj;
                    break;
                case Weather_FieldIndex.TextureUpperLayer:
                    this.TextureUpperLayer = (Exception)obj;
                    break;
                case Weather_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Weather_FieldIndex.WeatherTypes:
                    this.WeatherTypes = (MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherType_ErrorMask>>>)obj;
                    break;
                case Weather_FieldIndex.FogDayNear:
                    this.FogDayNear = (Exception)obj;
                    break;
                case Weather_FieldIndex.FogDayFar:
                    this.FogDayFar = (Exception)obj;
                    break;
                case Weather_FieldIndex.FogNightNear:
                    this.FogNightNear = (Exception)obj;
                    break;
                case Weather_FieldIndex.FogNightFar:
                    this.FogNightFar = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    this.HdrEyeAdaptSpeed = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrBlurRadius:
                    this.HdrBlurRadius = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrBlurPasses:
                    this.HdrBlurPasses = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrEmissiveMult:
                    this.HdrEmissiveMult = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrTargetLum:
                    this.HdrTargetLum = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrUpperLumClamp:
                    this.HdrUpperLumClamp = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrBrightScale:
                    this.HdrBrightScale = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrBrightClamp:
                    this.HdrBrightClamp = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrLumRampNoTex:
                    this.HdrLumRampNoTex = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrLumRampMin:
                    this.HdrLumRampMin = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrLumRampMax:
                    this.HdrLumRampMax = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrSunlightDimmer:
                    this.HdrSunlightDimmer = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrGrassDimmer:
                    this.HdrGrassDimmer = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrTreeDimmer:
                    this.HdrTreeDimmer = (Exception)obj;
                    break;
                case Weather_FieldIndex.WindSpeed:
                    this.WindSpeed = (Exception)obj;
                    break;
                case Weather_FieldIndex.CloudSpeedLower:
                    this.CloudSpeedLower = (Exception)obj;
                    break;
                case Weather_FieldIndex.CloudSpeedUpper:
                    this.CloudSpeedUpper = (Exception)obj;
                    break;
                case Weather_FieldIndex.TransDelta:
                    this.TransDelta = (Exception)obj;
                    break;
                case Weather_FieldIndex.SunGlare:
                    this.SunGlare = (Exception)obj;
                    break;
                case Weather_FieldIndex.SunDamage:
                    this.SunDamage = (Exception)obj;
                    break;
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    this.PrecipitationBeginFadeIn = (Exception)obj;
                    break;
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    this.PrecipitationEndFadeOut = (Exception)obj;
                    break;
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    this.ThunderLightningBeginFadeIn = (Exception)obj;
                    break;
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    this.ThunderLightningEndFadeOut = (Exception)obj;
                    break;
                case Weather_FieldIndex.ThunderLightningFrequency:
                    this.ThunderLightningFrequency = (Exception)obj;
                    break;
                case Weather_FieldIndex.Classification:
                    this.Classification = (Exception)obj;
                    break;
                case Weather_FieldIndex.LightningColor:
                    this.LightningColor = (Exception)obj;
                    break;
                case Weather_FieldIndex.Sounds:
                    this.Sounds = (MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherSound_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (TextureLowerLayer != null) return true;
            if (TextureUpperLayer != null) return true;
            if (Model != null) return true;
            if (WeatherTypes != null) return true;
            if (FogDayNear != null) return true;
            if (FogDayFar != null) return true;
            if (FogNightNear != null) return true;
            if (FogNightFar != null) return true;
            if (HdrEyeAdaptSpeed != null) return true;
            if (HdrBlurRadius != null) return true;
            if (HdrBlurPasses != null) return true;
            if (HdrEmissiveMult != null) return true;
            if (HdrTargetLum != null) return true;
            if (HdrUpperLumClamp != null) return true;
            if (HdrBrightScale != null) return true;
            if (HdrBrightClamp != null) return true;
            if (HdrLumRampNoTex != null) return true;
            if (HdrLumRampMin != null) return true;
            if (HdrLumRampMax != null) return true;
            if (HdrSunlightDimmer != null) return true;
            if (HdrGrassDimmer != null) return true;
            if (HdrTreeDimmer != null) return true;
            if (WindSpeed != null) return true;
            if (CloudSpeedLower != null) return true;
            if (CloudSpeedUpper != null) return true;
            if (TransDelta != null) return true;
            if (SunGlare != null) return true;
            if (SunDamage != null) return true;
            if (PrecipitationBeginFadeIn != null) return true;
            if (PrecipitationEndFadeOut != null) return true;
            if (ThunderLightningBeginFadeIn != null) return true;
            if (ThunderLightningEndFadeOut != null) return true;
            if (ThunderLightningFrequency != null) return true;
            if (Classification != null) return true;
            if (LightningColor != null) return true;
            if (Sounds != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Weather_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"TextureLowerLayer => {TextureLowerLayer}");
            fg.AppendLine($"TextureUpperLayer => {TextureUpperLayer}");
            Model?.ToString(fg);
            fg.AppendLine("WeatherTypes =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (WeatherTypes.Overall != null)
                {
                    fg.AppendLine(WeatherTypes.Overall.ToString());
                }
                if (WeatherTypes.Specific != null)
                {
                    foreach (var subItem in WeatherTypes.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"FogDayNear => {FogDayNear}");
            fg.AppendLine($"FogDayFar => {FogDayFar}");
            fg.AppendLine($"FogNightNear => {FogNightNear}");
            fg.AppendLine($"FogNightFar => {FogNightFar}");
            fg.AppendLine($"HdrEyeAdaptSpeed => {HdrEyeAdaptSpeed}");
            fg.AppendLine($"HdrBlurRadius => {HdrBlurRadius}");
            fg.AppendLine($"HdrBlurPasses => {HdrBlurPasses}");
            fg.AppendLine($"HdrEmissiveMult => {HdrEmissiveMult}");
            fg.AppendLine($"HdrTargetLum => {HdrTargetLum}");
            fg.AppendLine($"HdrUpperLumClamp => {HdrUpperLumClamp}");
            fg.AppendLine($"HdrBrightScale => {HdrBrightScale}");
            fg.AppendLine($"HdrBrightClamp => {HdrBrightClamp}");
            fg.AppendLine($"HdrLumRampNoTex => {HdrLumRampNoTex}");
            fg.AppendLine($"HdrLumRampMin => {HdrLumRampMin}");
            fg.AppendLine($"HdrLumRampMax => {HdrLumRampMax}");
            fg.AppendLine($"HdrSunlightDimmer => {HdrSunlightDimmer}");
            fg.AppendLine($"HdrGrassDimmer => {HdrGrassDimmer}");
            fg.AppendLine($"HdrTreeDimmer => {HdrTreeDimmer}");
            fg.AppendLine($"WindSpeed => {WindSpeed}");
            fg.AppendLine($"CloudSpeedLower => {CloudSpeedLower}");
            fg.AppendLine($"CloudSpeedUpper => {CloudSpeedUpper}");
            fg.AppendLine($"TransDelta => {TransDelta}");
            fg.AppendLine($"SunGlare => {SunGlare}");
            fg.AppendLine($"SunDamage => {SunDamage}");
            fg.AppendLine($"PrecipitationBeginFadeIn => {PrecipitationBeginFadeIn}");
            fg.AppendLine($"PrecipitationEndFadeOut => {PrecipitationEndFadeOut}");
            fg.AppendLine($"ThunderLightningBeginFadeIn => {ThunderLightningBeginFadeIn}");
            fg.AppendLine($"ThunderLightningEndFadeOut => {ThunderLightningEndFadeOut}");
            fg.AppendLine($"ThunderLightningFrequency => {ThunderLightningFrequency}");
            fg.AppendLine($"Classification => {Classification}");
            fg.AppendLine($"LightningColor => {LightningColor}");
            fg.AppendLine("Sounds =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Sounds.Overall != null)
                {
                    fg.AppendLine(Sounds.Overall.ToString());
                }
                if (Sounds.Specific != null)
                {
                    foreach (var subItem in Sounds.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Weather_ErrorMask Combine(Weather_ErrorMask rhs)
        {
            var ret = new Weather_ErrorMask();
            ret.TextureLowerLayer = this.TextureLowerLayer.Combine(rhs.TextureLowerLayer);
            ret.TextureUpperLayer = this.TextureUpperLayer.Combine(rhs.TextureUpperLayer);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.WeatherTypes = new MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherType_ErrorMask>>>(this.WeatherTypes.Overall.Combine(rhs.WeatherTypes.Overall), new List<MaskItem<Exception, WeatherType_ErrorMask>>(this.WeatherTypes.Specific.And(rhs.WeatherTypes.Specific)));
            ret.FogDayNear = this.FogDayNear.Combine(rhs.FogDayNear);
            ret.FogDayFar = this.FogDayFar.Combine(rhs.FogDayFar);
            ret.FogNightNear = this.FogNightNear.Combine(rhs.FogNightNear);
            ret.FogNightFar = this.FogNightFar.Combine(rhs.FogNightFar);
            ret.HdrEyeAdaptSpeed = this.HdrEyeAdaptSpeed.Combine(rhs.HdrEyeAdaptSpeed);
            ret.HdrBlurRadius = this.HdrBlurRadius.Combine(rhs.HdrBlurRadius);
            ret.HdrBlurPasses = this.HdrBlurPasses.Combine(rhs.HdrBlurPasses);
            ret.HdrEmissiveMult = this.HdrEmissiveMult.Combine(rhs.HdrEmissiveMult);
            ret.HdrTargetLum = this.HdrTargetLum.Combine(rhs.HdrTargetLum);
            ret.HdrUpperLumClamp = this.HdrUpperLumClamp.Combine(rhs.HdrUpperLumClamp);
            ret.HdrBrightScale = this.HdrBrightScale.Combine(rhs.HdrBrightScale);
            ret.HdrBrightClamp = this.HdrBrightClamp.Combine(rhs.HdrBrightClamp);
            ret.HdrLumRampNoTex = this.HdrLumRampNoTex.Combine(rhs.HdrLumRampNoTex);
            ret.HdrLumRampMin = this.HdrLumRampMin.Combine(rhs.HdrLumRampMin);
            ret.HdrLumRampMax = this.HdrLumRampMax.Combine(rhs.HdrLumRampMax);
            ret.HdrSunlightDimmer = this.HdrSunlightDimmer.Combine(rhs.HdrSunlightDimmer);
            ret.HdrGrassDimmer = this.HdrGrassDimmer.Combine(rhs.HdrGrassDimmer);
            ret.HdrTreeDimmer = this.HdrTreeDimmer.Combine(rhs.HdrTreeDimmer);
            ret.WindSpeed = this.WindSpeed.Combine(rhs.WindSpeed);
            ret.CloudSpeedLower = this.CloudSpeedLower.Combine(rhs.CloudSpeedLower);
            ret.CloudSpeedUpper = this.CloudSpeedUpper.Combine(rhs.CloudSpeedUpper);
            ret.TransDelta = this.TransDelta.Combine(rhs.TransDelta);
            ret.SunGlare = this.SunGlare.Combine(rhs.SunGlare);
            ret.SunDamage = this.SunDamage.Combine(rhs.SunDamage);
            ret.PrecipitationBeginFadeIn = this.PrecipitationBeginFadeIn.Combine(rhs.PrecipitationBeginFadeIn);
            ret.PrecipitationEndFadeOut = this.PrecipitationEndFadeOut.Combine(rhs.PrecipitationEndFadeOut);
            ret.ThunderLightningBeginFadeIn = this.ThunderLightningBeginFadeIn.Combine(rhs.ThunderLightningBeginFadeIn);
            ret.ThunderLightningEndFadeOut = this.ThunderLightningEndFadeOut.Combine(rhs.ThunderLightningEndFadeOut);
            ret.ThunderLightningFrequency = this.ThunderLightningFrequency.Combine(rhs.ThunderLightningFrequency);
            ret.Classification = this.Classification.Combine(rhs.Classification);
            ret.LightningColor = this.LightningColor.Combine(rhs.LightningColor);
            ret.Sounds = new MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherSound_ErrorMask>>>(this.Sounds.Overall.Combine(rhs.Sounds.Overall), new List<MaskItem<Exception, WeatherSound_ErrorMask>>(this.Sounds.Specific.And(rhs.Sounds.Specific)));
            return ret;
        }
        public static Weather_ErrorMask Combine(Weather_ErrorMask lhs, Weather_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Weather_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Weather_ErrorMask();
        }
        #endregion

    }
    public class Weather_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool TextureLowerLayer;
        public bool TextureUpperLayer;
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public MaskItem<CopyOption, WeatherType_CopyMask> WeatherTypes;
        public bool FogDayNear;
        public bool FogDayFar;
        public bool FogNightNear;
        public bool FogNightFar;
        public bool HdrEyeAdaptSpeed;
        public bool HdrBlurRadius;
        public bool HdrBlurPasses;
        public bool HdrEmissiveMult;
        public bool HdrTargetLum;
        public bool HdrUpperLumClamp;
        public bool HdrBrightScale;
        public bool HdrBrightClamp;
        public bool HdrLumRampNoTex;
        public bool HdrLumRampMin;
        public bool HdrLumRampMax;
        public bool HdrSunlightDimmer;
        public bool HdrGrassDimmer;
        public bool HdrTreeDimmer;
        public bool WindSpeed;
        public bool CloudSpeedLower;
        public bool CloudSpeedUpper;
        public bool TransDelta;
        public bool SunGlare;
        public bool SunDamage;
        public bool PrecipitationBeginFadeIn;
        public bool PrecipitationEndFadeOut;
        public bool ThunderLightningBeginFadeIn;
        public bool ThunderLightningEndFadeOut;
        public bool ThunderLightningFrequency;
        public bool Classification;
        public bool LightningColor;
        public MaskItem<CopyOption, WeatherSound_CopyMask> Sounds;
        #endregion

    }
    public class Weather_TranslationMask : MajorRecord_TranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool TextureLowerLayer;
        public bool TextureUpperLayer;
        public MaskItem<bool, Model_TranslationMask> Model;
        public MaskItem<bool, WeatherType_TranslationMask> WeatherTypes;
        public bool FogDayNear;
        public bool FogDayFar;
        public bool FogNightNear;
        public bool FogNightFar;
        public bool HdrEyeAdaptSpeed;
        public bool HdrBlurRadius;
        public bool HdrBlurPasses;
        public bool HdrEmissiveMult;
        public bool HdrTargetLum;
        public bool HdrUpperLumClamp;
        public bool HdrBrightScale;
        public bool HdrBrightClamp;
        public bool HdrLumRampNoTex;
        public bool HdrLumRampMin;
        public bool HdrLumRampMax;
        public bool HdrSunlightDimmer;
        public bool HdrGrassDimmer;
        public bool HdrTreeDimmer;
        public bool WindSpeed;
        public bool CloudSpeedLower;
        public bool CloudSpeedUpper;
        public bool TransDelta;
        public bool SunGlare;
        public bool SunDamage;
        public bool PrecipitationBeginFadeIn;
        public bool PrecipitationEndFadeOut;
        public bool ThunderLightningBeginFadeIn;
        public bool ThunderLightningEndFadeOut;
        public bool ThunderLightningFrequency;
        public bool Classification;
        public bool LightningColor;
        public MaskItem<bool, WeatherSound_TranslationMask> Sounds;
        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((TextureLowerLayer, null));
            ret.Add((TextureUpperLayer, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((WeatherTypes?.Overall ?? true, WeatherTypes?.Specific?.GetCrystal()));
            ret.Add((FogDayNear, null));
            ret.Add((FogDayFar, null));
            ret.Add((FogNightNear, null));
            ret.Add((FogNightFar, null));
            ret.Add((HdrEyeAdaptSpeed, null));
            ret.Add((HdrBlurRadius, null));
            ret.Add((HdrBlurPasses, null));
            ret.Add((HdrEmissiveMult, null));
            ret.Add((HdrTargetLum, null));
            ret.Add((HdrUpperLumClamp, null));
            ret.Add((HdrBrightScale, null));
            ret.Add((HdrBrightClamp, null));
            ret.Add((HdrLumRampNoTex, null));
            ret.Add((HdrLumRampMin, null));
            ret.Add((HdrLumRampMax, null));
            ret.Add((HdrSunlightDimmer, null));
            ret.Add((HdrGrassDimmer, null));
            ret.Add((HdrTreeDimmer, null));
            ret.Add((WindSpeed, null));
            ret.Add((CloudSpeedLower, null));
            ret.Add((CloudSpeedUpper, null));
            ret.Add((TransDelta, null));
            ret.Add((SunGlare, null));
            ret.Add((SunDamage, null));
            ret.Add((PrecipitationBeginFadeIn, null));
            ret.Add((PrecipitationEndFadeOut, null));
            ret.Add((ThunderLightningBeginFadeIn, null));
            ret.Add((ThunderLightningEndFadeOut, null));
            ret.Add((ThunderLightningFrequency, null));
            ret.Add((Classification, null));
            ret.Add((LightningColor, null));
            ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
        }
    }
    #endregion





    #endregion

}
