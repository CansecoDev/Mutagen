/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Worldspace : 
        Place,
        IWorldspace,
        ILoquiObject<Worldspace>,
        ILoquiObjectSetter,
        INamed,
        IPlace,
        ILinkSubContainer,
        IEquatable<Worldspace>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Worldspace_Registration.Instance;
        public new static Worldspace_Registration Registration => Worldspace_Registration.Instance;

        #region Ctor
        protected Worldspace()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Worldspace_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Worldspace_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool IWorldspaceGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IWorldspaceGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)Worldspace_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Parent
        public FormIDSetLink<Worldspace> Parent_Property { get; } = new FormIDSetLink<Worldspace>();
        public Worldspace Parent { get => Parent_Property.Item; set => Parent_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Worldspace> IWorldspaceGetter.Parent_Property => this.Parent_Property;
        #endregion
        #region Climate
        public FormIDSetLink<Climate> Climate_Property { get; } = new FormIDSetLink<Climate>();
        public Climate Climate { get => Climate_Property.Item; set => Climate_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Climate> IWorldspaceGetter.Climate_Property => this.Climate_Property;
        #endregion
        #region Water
        public FormIDSetLink<Water> Water_Property { get; } = new FormIDSetLink<Water>();
        public Water Water { get => Water_Property.Item; set => Water_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Water> IWorldspaceGetter.Water_Property => this.Water_Property;
        #endregion
        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)Worldspace_FieldIndex.Icon];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Worldspace_FieldIndex.Icon, nameof(Icon_IsSet));
        }
        bool IWorldspaceGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String IWorldspaceGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Icon, value, _hasBeenSetTracker, markSet, (int)Worldspace_FieldIndex.Icon, nameof(Icon), nameof(Icon_IsSet));
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region MapData
        public bool MapData_IsSet
        {
            get => _hasBeenSetTracker[(int)Worldspace_FieldIndex.MapData];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Worldspace_FieldIndex.MapData, nameof(MapData_IsSet));
        }
        bool IWorldspaceGetter.MapData_IsSet => MapData_IsSet;
        private MapData _MapData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MapData MapData
        {
            get => _MapData;
            set => MapData_Set(value);
        }
        public void MapData_Set(
            MapData value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _MapData, value, _hasBeenSetTracker, markSet, (int)Worldspace_FieldIndex.MapData, nameof(MapData), nameof(MapData_IsSet));
        }
        public void MapData_Unset()
        {
            this.MapData_Set(default(MapData), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        MapData IWorldspaceGetter.MapData => this.MapData;
        #endregion
        #region Flags
        public bool Flags_IsSet
        {
            get => _hasBeenSetTracker[(int)Worldspace_FieldIndex.Flags];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Worldspace_FieldIndex.Flags, nameof(Flags_IsSet));
        }
        bool IWorldspaceGetter.Flags_IsSet => Flags_IsSet;
        private Worldspace.Flag _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Worldspace.Flag Flags
        {
            get => this._Flags;
            set => Flags_Set(value);
        }
        Worldspace.Flag IWorldspaceGetter.Flags => this.Flags;
        public void Flags_Set(
            Worldspace.Flag value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Flags, value, _hasBeenSetTracker, markSet, (int)Worldspace_FieldIndex.Flags, nameof(Flags), nameof(Flags_IsSet));
        }
        public void Flags_Unset()
        {
            this.Flags_Set(default(Worldspace.Flag), false);
        }
        #endregion
        #region ObjectBoundsMin
        public bool ObjectBoundsMin_IsSet
        {
            get => _hasBeenSetTracker[(int)Worldspace_FieldIndex.ObjectBoundsMin];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Worldspace_FieldIndex.ObjectBoundsMin, nameof(ObjectBoundsMin_IsSet));
        }
        bool IWorldspaceGetter.ObjectBoundsMin_IsSet => ObjectBoundsMin_IsSet;
        private P2Float _ObjectBoundsMin;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P2Float ObjectBoundsMin
        {
            get => this._ObjectBoundsMin;
            set => ObjectBoundsMin_Set(value);
        }
        P2Float IWorldspaceGetter.ObjectBoundsMin => this.ObjectBoundsMin;
        public void ObjectBoundsMin_Set(
            P2Float value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _ObjectBoundsMin, value, _hasBeenSetTracker, markSet, (int)Worldspace_FieldIndex.ObjectBoundsMin, nameof(ObjectBoundsMin), nameof(ObjectBoundsMin_IsSet));
        }
        public void ObjectBoundsMin_Unset()
        {
            this.ObjectBoundsMin_Set(default(P2Float), false);
        }
        #endregion
        #region ObjectBoundsMax
        public bool ObjectBoundsMax_IsSet
        {
            get => _hasBeenSetTracker[(int)Worldspace_FieldIndex.ObjectBoundsMax];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Worldspace_FieldIndex.ObjectBoundsMax, nameof(ObjectBoundsMax_IsSet));
        }
        bool IWorldspaceGetter.ObjectBoundsMax_IsSet => ObjectBoundsMax_IsSet;
        private P2Float _ObjectBoundsMax;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P2Float ObjectBoundsMax
        {
            get => this._ObjectBoundsMax;
            set => ObjectBoundsMax_Set(value);
        }
        P2Float IWorldspaceGetter.ObjectBoundsMax => this.ObjectBoundsMax;
        public void ObjectBoundsMax_Set(
            P2Float value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _ObjectBoundsMax, value, _hasBeenSetTracker, markSet, (int)Worldspace_FieldIndex.ObjectBoundsMax, nameof(ObjectBoundsMax), nameof(ObjectBoundsMax_IsSet));
        }
        public void ObjectBoundsMax_Unset()
        {
            this.ObjectBoundsMax_Set(default(P2Float), false);
        }
        #endregion
        #region Music
        public bool Music_IsSet
        {
            get => _hasBeenSetTracker[(int)Worldspace_FieldIndex.Music];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Worldspace_FieldIndex.Music, nameof(Music_IsSet));
        }
        bool IWorldspaceGetter.Music_IsSet => Music_IsSet;
        private MusicType _Music;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MusicType Music
        {
            get => this._Music;
            set => Music_Set(value);
        }
        MusicType IWorldspaceGetter.Music => this.Music;
        public void Music_Set(
            MusicType value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Music, value, _hasBeenSetTracker, markSet, (int)Worldspace_FieldIndex.Music, nameof(Music), nameof(Music_IsSet));
        }
        public void Music_Unset()
        {
            this.Music_Set(default(MusicType), false);
        }
        #endregion
        #region OffsetData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool OffsetData_IsSet
        {
            get => _hasBeenSetTracker[(int)Worldspace_FieldIndex.OffsetData];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Worldspace_FieldIndex.OffsetData, nameof(OffsetData_IsSet));
        }
        bool IWorldspaceGetter.OffsetData_IsSet => OffsetData_IsSet;
        protected Byte[] _OffsetData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] OffsetData
        {
            get => this._OffsetData;
            set => OffsetData_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte[] IWorldspaceGetter.OffsetData => this.OffsetData;
        public void OffsetData_Set(
            Byte[] value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _OffsetData, value, _hasBeenSetTracker, markSet, (int)Worldspace_FieldIndex.OffsetData, nameof(OffsetData), nameof(OffsetData_IsSet));
        }
        public void OffsetData_Unset()
        {
            this.OffsetData_Set(default(Byte[]), false);
        }
        #endregion
        #region Road
        public bool Road_IsSet
        {
            get => _hasBeenSetTracker[(int)Worldspace_FieldIndex.Road];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Worldspace_FieldIndex.Road, nameof(Road_IsSet));
        }
        bool IWorldspaceGetter.Road_IsSet => Road_IsSet;
        private Road _Road;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Road Road
        {
            get => _Road;
            set => Road_Set(value);
        }
        public void Road_Set(
            Road value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Road, value, _hasBeenSetTracker, markSet, (int)Worldspace_FieldIndex.Road, nameof(Road), nameof(Road_IsSet));
        }
        public void Road_Unset()
        {
            this.Road_Set(default(Road), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Road IWorldspaceGetter.Road => this.Road;
        #endregion
        #region TopCell
        public bool TopCell_IsSet
        {
            get => _hasBeenSetTracker[(int)Worldspace_FieldIndex.TopCell];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Worldspace_FieldIndex.TopCell, nameof(TopCell_IsSet));
        }
        bool IWorldspaceGetter.TopCell_IsSet => TopCell_IsSet;
        private Cell _TopCell;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Cell TopCell
        {
            get => _TopCell;
            set => TopCell_Set(value);
        }
        public void TopCell_Set(
            Cell value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _TopCell, value, _hasBeenSetTracker, markSet, (int)Worldspace_FieldIndex.TopCell, nameof(TopCell), nameof(TopCell_IsSet));
        }
        public void TopCell_Unset()
        {
            this.TopCell_Set(default(Cell), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Cell IWorldspaceGetter.TopCell => this.TopCell;
        #endregion
        #region SubCellsTimestamp
        private Byte[] _SubCellsTimestamp = new byte[4];
        public Byte[] SubCellsTimestamp
        {
            get => _SubCellsTimestamp;
            set
            {
                this._SubCellsTimestamp = value;
                if (value == null)
                {
                    this._SubCellsTimestamp = new byte[4];
                }
            }
        }
        #endregion
        #region SubCells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<WorldspaceBlock> _SubCells = new SourceSetList<WorldspaceBlock>();
        public ISourceSetList<WorldspaceBlock> SubCells => _SubCells;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<WorldspaceBlock> SubCellsEnumerable
        {
            get => _SubCells.Items;
            set => _SubCells.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<WorldspaceBlock> IWorldspace.SubCells => _SubCells;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<WorldspaceBlock> IWorldspaceGetter.SubCells => _SubCells;
        #endregion

        #endregion

        IMask<bool> IEqualsMask<Worldspace>.GetEqualsMask(Worldspace rhs, EqualsMaskHelper.Include include) => WorldspaceCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IWorldspaceGetter>.GetEqualsMask(IWorldspaceGetter rhs, EqualsMaskHelper.Include include) => WorldspaceCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            Worldspace_Mask<bool> printMask = null)
        {
            return WorldspaceCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            WorldspaceCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Worldspace_Mask<bool> GetHasBeenSetMask()
        {
            return WorldspaceCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Worldspace rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Worldspace rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_IsSet != rhs.Name_IsSet) return false;
            if (Name_IsSet)
            {
                if (!object.Equals(this.Name, rhs.Name)) return false;
            }
            if (Parent_Property.HasBeenSet != rhs.Parent_Property.HasBeenSet) return false;
            if (Parent_Property.HasBeenSet)
            {
                if (!this.Parent_Property.Equals(rhs.Parent_Property)) return false;
            }
            if (Climate_Property.HasBeenSet != rhs.Climate_Property.HasBeenSet) return false;
            if (Climate_Property.HasBeenSet)
            {
                if (!this.Climate_Property.Equals(rhs.Climate_Property)) return false;
            }
            if (Water_Property.HasBeenSet != rhs.Water_Property.HasBeenSet) return false;
            if (Water_Property.HasBeenSet)
            {
                if (!this.Water_Property.Equals(rhs.Water_Property)) return false;
            }
            if (Icon_IsSet != rhs.Icon_IsSet) return false;
            if (Icon_IsSet)
            {
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (MapData_IsSet != rhs.MapData_IsSet) return false;
            if (MapData_IsSet)
            {
                if (!object.Equals(this.MapData, rhs.MapData)) return false;
            }
            if (Flags_IsSet != rhs.Flags_IsSet) return false;
            if (Flags_IsSet)
            {
                if (this.Flags != rhs.Flags) return false;
            }
            if (ObjectBoundsMin_IsSet != rhs.ObjectBoundsMin_IsSet) return false;
            if (ObjectBoundsMin_IsSet)
            {
                if (!this.ObjectBoundsMin.Equals(rhs.ObjectBoundsMin)) return false;
            }
            if (ObjectBoundsMax_IsSet != rhs.ObjectBoundsMax_IsSet) return false;
            if (ObjectBoundsMax_IsSet)
            {
                if (!this.ObjectBoundsMax.Equals(rhs.ObjectBoundsMax)) return false;
            }
            if (Music_IsSet != rhs.Music_IsSet) return false;
            if (Music_IsSet)
            {
                if (this.Music != rhs.Music) return false;
            }
            if (OffsetData_IsSet != rhs.OffsetData_IsSet) return false;
            if (OffsetData_IsSet)
            {
                if (!this.OffsetData.EqualsFast(rhs.OffsetData)) return false;
            }
            if (Road_IsSet != rhs.Road_IsSet) return false;
            if (Road_IsSet)
            {
                if (!object.Equals(this.Road, rhs.Road)) return false;
            }
            if (TopCell_IsSet != rhs.TopCell_IsSet) return false;
            if (TopCell_IsSet)
            {
                if (!object.Equals(this.TopCell, rhs.TopCell)) return false;
            }
            if (!this.SubCellsTimestamp.EqualsFast(rhs.SubCellsTimestamp)) return false;
            if (SubCells.HasBeenSet != rhs.SubCells.HasBeenSet) return false;
            if (SubCells.HasBeenSet)
            {
                if (!this.SubCells.SequenceEqual(rhs.SubCells)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_IsSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (Parent_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Parent).CombineHashCode(ret);
            }
            if (Climate_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Climate).CombineHashCode(ret);
            }
            if (Water_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Water).CombineHashCode(ret);
            }
            if (Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (MapData_IsSet)
            {
                ret = HashHelper.GetHashCode(MapData).CombineHashCode(ret);
            }
            if (Flags_IsSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            if (ObjectBoundsMin_IsSet)
            {
                ret = HashHelper.GetHashCode(ObjectBoundsMin).CombineHashCode(ret);
            }
            if (ObjectBoundsMax_IsSet)
            {
                ret = HashHelper.GetHashCode(ObjectBoundsMax).CombineHashCode(ret);
            }
            if (Music_IsSet)
            {
                ret = HashHelper.GetHashCode(Music).CombineHashCode(ret);
            }
            if (OffsetData_IsSet)
            {
                ret = HashHelper.GetHashCode(OffsetData).CombineHashCode(ret);
            }
            if (Road_IsSet)
            {
                ret = HashHelper.GetHashCode(Road).CombineHashCode(ret);
            }
            if (TopCell_IsSet)
            {
                ret = HashHelper.GetHashCode(TopCell).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(SubCellsTimestamp).CombineHashCode(ret);
            if (SubCells.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(SubCells).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static Worldspace Create_Xml(
            XElement node,
            Worldspace_TranslationMask translationMask = null)
        {
            return Create_Xml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Worldspace Create_Xml(
            XElement node,
            out Worldspace_ErrorMask errorMask,
            bool doMasks = true,
            Worldspace_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Worldspace Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new Worldspace();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    WorldspaceCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Worldspace Create_Xml(
            string path,
            Worldspace_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static Worldspace Create_Xml(
            string path,
            out Worldspace_ErrorMask errorMask,
            Worldspace_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Worldspace Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            Worldspace_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Worldspace Create_Xml(
            Stream stream,
            Worldspace_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static Worldspace Create_Xml(
            Stream stream,
            out Worldspace_ErrorMask errorMask,
            Worldspace_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Worldspace Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Worldspace_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement node,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                node: node,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out Worldspace_ErrorMask errorMask,
            Worldspace_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Worldspace>.Instance.CopyIn(
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Worldspace_ErrorMask errorMask,
            Worldspace_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Worldspace_ErrorMask errorMask,
            Worldspace_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement node,
            out Place_ErrorMask errorMask,
            Place_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void CopyIn_Xml(
            XElement node,
            out OblivionMajorRecord_ErrorMask errorMask,
            OblivionMajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void CopyIn_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Worldspace_ErrorMask errorMask,
            bool doMasks = true,
            Worldspace_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Worldspace_ErrorMask errorMask,
            Worldspace_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out Worldspace_ErrorMask errorMask,
            Worldspace_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out Place_ErrorMask errorMask,
            bool doMasks = true,
            Place_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            OblivionMajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            WorldspaceCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            Worldspace item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    Place.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Worldspace_FieldIndex)index)
            {
                case Worldspace_FieldIndex.Name:
                case Worldspace_FieldIndex.Icon:
                case Worldspace_FieldIndex.MapData:
                case Worldspace_FieldIndex.Flags:
                case Worldspace_FieldIndex.ObjectBoundsMin:
                case Worldspace_FieldIndex.ObjectBoundsMax:
                case Worldspace_FieldIndex.Music:
                case Worldspace_FieldIndex.OffsetData:
                case Worldspace_FieldIndex.Road:
                case Worldspace_FieldIndex.TopCell:
                    return _hasBeenSetTracker[index];
                case Worldspace_FieldIndex.Parent:
                    return Parent_Property.HasBeenSet;
                case Worldspace_FieldIndex.Climate:
                    return Climate_Property.HasBeenSet;
                case Worldspace_FieldIndex.Water:
                    return Water_Property.HasBeenSet;
                case Worldspace_FieldIndex.SubCells:
                    return SubCells.HasBeenSet;
                case Worldspace_FieldIndex.SubCellsTimestamp:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Worldspace_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Parent_Property;
            yield return Climate_Property;
            yield return Water_Property;
            if (TopCell != null)
            {
                foreach (var item in TopCell.Links)
                {
                    yield return item;
                }
            }
            foreach (var item in SubCells.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod,
            NotifyingFireParameters cmds = null)
            
        {
            base.Link(
                modList,
                sourceMod,
                cmds);
            Parent_Property.Link(
                modList,
                sourceMod,
                cmds);
            Climate_Property.Link(
                modList,
                sourceMod,
                cmds);
            Water_Property.Link(
                modList,
                sourceMod,
                cmds);
            if (TopCell != null)
            {
                TopCell?.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
            foreach (var item in SubCells.Items)
            {
                item.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
        }

        public Worldspace(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        partial void PostDuplicate(Worldspace obj, Worldspace rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Worldspace(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Worldspace Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Worldspace Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Worldspace_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Worldspace Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = UtilityTranslation.MajorRecordParse<Worldspace>(
                record: new Worldspace(),
                frame: frame,
                errorMask: errorMask,
                recType: Worldspace_Registration.WRLD_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
            try
            {
                CustomBinaryEnd_Import(
                    frame: frame,
                    obj: ret,
                    masterReferences: masterReferences,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Worldspace Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static Worldspace Create_Binary(
            string path,
            MasterReferences masterReferences,
            out Worldspace_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Worldspace Create_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        public static Worldspace Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static Worldspace Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out Worldspace_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Worldspace Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Worldspace_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out Worldspace_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public override void Write_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: errorMask);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }
        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out Worldspace_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }
        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Place_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            WorldspaceCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        static partial void FillBinary_OffsetLength_Custom(
            MutagenFrame frame,
            Worldspace item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_OffsetLength_Custom(
            MutagenWriter writer,
            Worldspace item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_OffsetLength(
            MutagenWriter writer,
            Worldspace item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_OffsetLength_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinary_OffsetData_Custom(
            MutagenFrame frame,
            Worldspace item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_OffsetData_Custom(
            MutagenWriter writer,
            Worldspace item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_OffsetData(
            MutagenWriter writer,
            Worldspace item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_OffsetData_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static void Fill_Binary_Structs(
            Worldspace item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            Place.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Worldspace item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.Name);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Name);
                case 0x4D414E57: // WNAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Parent_Property,
                        fieldIndex: (int)Worldspace_FieldIndex.Parent,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Parent);
                case 0x4D414E43: // CNAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Climate_Property,
                        fieldIndex: (int)Worldspace_FieldIndex.Climate,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Climate);
                case 0x324D414E: // NAM2
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Water_Property,
                        fieldIndex: (int)Worldspace_FieldIndex.Water,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Water);
                case 0x4E4F4349: // ICON
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.Icon);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Icon);
                case 0x4D414E4D: // MNAM
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.MapData);
                        if (LoquiBinaryTranslation<MapData>.Instance.Parse(
                            frame: frame,
                            masterReferences: masterReferences,
                            item: out MapData MapDataParse,
                            errorMask: errorMask))
                        {
                            item.MapData = MapDataParse;
                        }
                        else
                        {
                            item.MapData = default(MapData);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.MapData);
                case 0x41544144: // DATA
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.Flags);
                        if (EnumBinaryTranslation<Worldspace.Flag>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Worldspace.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Worldspace.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Flags);
                case 0x304D414E: // NAM0
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.ObjectBoundsMin);
                        if (Mutagen.Bethesda.Binary.P2FloatBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out P2Float ObjectBoundsMinParse,
                            errorMask: errorMask))
                        {
                            item.ObjectBoundsMin = ObjectBoundsMinParse;
                        }
                        else
                        {
                            item.ObjectBoundsMin = default(P2Float);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.ObjectBoundsMin);
                case 0x394D414E: // NAM9
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.ObjectBoundsMax);
                        if (Mutagen.Bethesda.Binary.P2FloatBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out P2Float ObjectBoundsMaxParse,
                            errorMask: errorMask))
                        {
                            item.ObjectBoundsMax = ObjectBoundsMaxParse;
                        }
                        else
                        {
                            item.ObjectBoundsMax = default(P2Float);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.ObjectBoundsMax);
                case 0x4D414E53: // SNAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.Music);
                        if (EnumBinaryTranslation<MusicType>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out MusicType MusicParse,
                            errorMask: errorMask))
                        {
                            item.Music = MusicParse;
                        }
                        else
                        {
                            item.Music = default(MusicType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Music);
                case 0x58585858: // XXXX
                    using (var subFrame = frame.SpawnWithLength(Mutagen.Bethesda.Constants.SUBRECORD_LENGTH + contentLength, snapToFinalPosition: false))
                    {
                        FillBinary_OffsetLength_Custom(
                            frame: subFrame,
                            item: item,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    return TryGet<int?>.Succeed(null);
                case 0x5453464F: // OFST
                    using (var subFrame = frame.SpawnWithLength(Mutagen.Bethesda.Constants.SUBRECORD_LENGTH + contentLength, snapToFinalPosition: false))
                    {
                        FillBinary_OffsetData_Custom(
                            frame: subFrame,
                            item: item,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.OffsetData);
                default:
                    return Place.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        static partial void CustomBinaryEnd_Import(
            MutagenFrame frame,
            Worldspace obj,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);
        static partial void CustomBinaryEnd_Export(
            MutagenWriter writer,
            Worldspace obj,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);
        public static void CustomBinaryEnd_ExportInternal(
            MutagenWriter writer,
            Worldspace obj,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            CustomBinaryEnd_Export(
                writer: writer,
                obj: obj,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        #endregion

        public Worldspace Copy(
            Worldspace_CopyMask copyMask = null,
            IWorldspaceGetter def = null)
        {
            return Worldspace.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Worldspace Copy(
            IWorldspace item,
            Worldspace_CopyMask copyMask = null,
            IWorldspaceGetter def = null)
        {
            Worldspace ret;
            if (item.GetType().Equals(typeof(Worldspace)))
            {
                ret = new Worldspace();
            }
            else
            {
                ret = (Worldspace)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Worldspace Copy_ToLoqui(
            IWorldspaceGetter item,
            Worldspace_CopyMask copyMask = null,
            IWorldspaceGetter def = null)
        {
            Worldspace ret;
            if (item.GetType().Equals(typeof(Worldspace)))
            {
                ret = new Worldspace() as Worldspace;
            }
            else
            {
                ret = (Worldspace)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(
            IMajorRecordGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IWorldspaceGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IWorldspaceGetter rhs,
            Worldspace_CopyMask copyMask,
            IWorldspaceGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IWorldspaceGetter rhs,
            out Worldspace_ErrorMask errorMask,
            Worldspace_CopyMask copyMask = null,
            IWorldspaceGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WorldspaceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IWorldspaceGetter rhs,
            ErrorMaskBuilder errorMask,
            Worldspace_CopyMask copyMask = null,
            IWorldspaceGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            WorldspaceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case Worldspace_FieldIndex.Parent:
                    this.Parent_Property.Set(
                        (FormIDSetLink<Worldspace>)obj,
                        cmds);
                    break;
                case Worldspace_FieldIndex.Climate:
                    this.Climate_Property.Set(
                        (FormIDSetLink<Climate>)obj,
                        cmds);
                    break;
                case Worldspace_FieldIndex.Water:
                    this.Water_Property.Set(
                        (FormIDSetLink<Water>)obj,
                        cmds);
                    break;
                case Worldspace_FieldIndex.Icon:
                    this.Icon = (String)obj;
                    break;
                case Worldspace_FieldIndex.MapData:
                    this.MapData = (MapData)obj;
                    break;
                case Worldspace_FieldIndex.Flags:
                    this.Flags = (Worldspace.Flag)obj;
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    this.ObjectBoundsMin = (P2Float)obj;
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    this.ObjectBoundsMax = (P2Float)obj;
                    break;
                case Worldspace_FieldIndex.Music:
                    this.Music = (MusicType)obj;
                    break;
                case Worldspace_FieldIndex.OffsetData:
                    this.OffsetData = (Byte[])obj;
                    break;
                case Worldspace_FieldIndex.Road:
                    this.Road = (Road)obj;
                    break;
                case Worldspace_FieldIndex.TopCell:
                    this.TopCell = (Cell)obj;
                    break;
                case Worldspace_FieldIndex.SubCellsTimestamp:
                    this.SubCellsTimestamp = (Byte[])obj;
                    break;
                case Worldspace_FieldIndex.SubCells:
                    this._SubCells.SetTo((IEnumerable<WorldspaceBlock>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            WorldspaceCommon.Clear(this, cmds);
        }


        public new static Worldspace Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Worldspace();
            foreach (var pair in fields)
            {
                CopyInInternal_Worldspace(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Worldspace(Worldspace obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Worldspace_FieldIndex enu))
            {
                CopyInInternal_Place(obj, pair);
            }
            switch (enu)
            {
                case Worldspace_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case Worldspace_FieldIndex.Parent:
                    obj.Parent_Property.Set(
                        (FormIDSetLink<Worldspace>)pair.Value,
                        null);
                    break;
                case Worldspace_FieldIndex.Climate:
                    obj.Climate_Property.Set(
                        (FormIDSetLink<Climate>)pair.Value,
                        null);
                    break;
                case Worldspace_FieldIndex.Water:
                    obj.Water_Property.Set(
                        (FormIDSetLink<Water>)pair.Value,
                        null);
                    break;
                case Worldspace_FieldIndex.Icon:
                    obj.Icon = (String)pair.Value;
                    break;
                case Worldspace_FieldIndex.MapData:
                    obj.MapData = (MapData)pair.Value;
                    break;
                case Worldspace_FieldIndex.Flags:
                    obj.Flags = (Worldspace.Flag)pair.Value;
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    obj.ObjectBoundsMin = (P2Float)pair.Value;
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    obj.ObjectBoundsMax = (P2Float)pair.Value;
                    break;
                case Worldspace_FieldIndex.Music:
                    obj.Music = (MusicType)pair.Value;
                    break;
                case Worldspace_FieldIndex.OffsetData:
                    obj.OffsetData = (Byte[])pair.Value;
                    break;
                case Worldspace_FieldIndex.Road:
                    obj.Road = (Road)pair.Value;
                    break;
                case Worldspace_FieldIndex.TopCell:
                    obj.TopCell = (Cell)pair.Value;
                    break;
                case Worldspace_FieldIndex.SubCellsTimestamp:
                    obj.SubCellsTimestamp = (Byte[])pair.Value;
                    break;
                case Worldspace_FieldIndex.SubCells:
                    obj._SubCells.SetTo((IEnumerable<WorldspaceBlock>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IWorldspace : IWorldspaceGetter, IPlace, ILoquiClass<IWorldspace, IWorldspaceGetter>, ILoquiClass<Worldspace, IWorldspaceGetter>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String item, bool hasBeenSet = true);
        void Name_Unset();

        new Worldspace Parent { get; set; }
        new Climate Climate { get; set; }
        new Water Water { get; set; }
        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String item, bool hasBeenSet = true);
        void Icon_Unset();

        new MapData MapData { get; set; }
        new bool MapData_IsSet { get; set; }
        void MapData_Set(MapData item, bool hasBeenSet = true);
        void MapData_Unset();

        new Worldspace.Flag Flags { get; set; }
        new bool Flags_IsSet { get; set; }
        void Flags_Set(Worldspace.Flag item, bool hasBeenSet = true);
        void Flags_Unset();

        new P2Float ObjectBoundsMin { get; set; }
        new bool ObjectBoundsMin_IsSet { get; set; }
        void ObjectBoundsMin_Set(P2Float item, bool hasBeenSet = true);
        void ObjectBoundsMin_Unset();

        new P2Float ObjectBoundsMax { get; set; }
        new bool ObjectBoundsMax_IsSet { get; set; }
        void ObjectBoundsMax_Set(P2Float item, bool hasBeenSet = true);
        void ObjectBoundsMax_Unset();

        new MusicType Music { get; set; }
        new bool Music_IsSet { get; set; }
        void Music_Set(MusicType item, bool hasBeenSet = true);
        void Music_Unset();

        new Byte[] OffsetData { get; set; }
        new bool OffsetData_IsSet { get; set; }
        void OffsetData_Set(Byte[] item, bool hasBeenSet = true);
        void OffsetData_Unset();

        new Road Road { get; set; }
        new bool Road_IsSet { get; set; }
        void Road_Set(Road item, bool hasBeenSet = true);
        void Road_Unset();

        new Cell TopCell { get; set; }
        new bool TopCell_IsSet { get; set; }
        void TopCell_Set(Cell item, bool hasBeenSet = true);
        void TopCell_Unset();

        new Byte[] SubCellsTimestamp { get; set; }

        new ISourceSetList<WorldspaceBlock> SubCells { get; }
    }

    public partial interface IWorldspaceGetter : IPlaceGetter
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Parent
        Worldspace Parent { get; }
        FormIDSetLink<Worldspace> Parent_Property { get; }

        #endregion
        #region Climate
        Climate Climate { get; }
        FormIDSetLink<Climate> Climate_Property { get; }

        #endregion
        #region Water
        Water Water { get; }
        FormIDSetLink<Water> Water_Property { get; }

        #endregion
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region MapData
        MapData MapData { get; }
        bool MapData_IsSet { get; }

        #endregion
        #region Flags
        Worldspace.Flag Flags { get; }
        bool Flags_IsSet { get; }

        #endregion
        #region ObjectBoundsMin
        P2Float ObjectBoundsMin { get; }
        bool ObjectBoundsMin_IsSet { get; }

        #endregion
        #region ObjectBoundsMax
        P2Float ObjectBoundsMax { get; }
        bool ObjectBoundsMax_IsSet { get; }

        #endregion
        #region Music
        MusicType Music { get; }
        bool Music_IsSet { get; }

        #endregion
        #region OffsetData
        Byte[] OffsetData { get; }
        bool OffsetData_IsSet { get; }

        #endregion
        #region Road
        Road Road { get; }
        bool Road_IsSet { get; }

        #endregion
        #region TopCell
        Cell TopCell { get; }
        bool TopCell_IsSet { get; }

        #endregion
        #region SubCellsTimestamp
        Byte[] SubCellsTimestamp { get; }

        #endregion
        #region SubCells
        IObservableSetList<WorldspaceBlock> SubCells { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Worldspace_FieldIndex
    {
        FormKey = 0,
        Version = 1,
        EditorID = 2,
        RecordType = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Parent = 6,
        Climate = 7,
        Water = 8,
        Icon = 9,
        MapData = 10,
        Flags = 11,
        ObjectBoundsMin = 12,
        ObjectBoundsMax = 13,
        Music = 14,
        OffsetData = 15,
        Road = 16,
        TopCell = 17,
        SubCellsTimestamp = 18,
        SubCells = 19,
    }
    #endregion

    #region Registration
    public class Worldspace_Registration : ILoquiRegistration
    {
        public static readonly Worldspace_Registration Instance = new Worldspace_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 75,
            version: 0);

        public const string GUID = "d95e86a2-5fdd-4bb1-a2b9-c16161ef2f62";

        public const ushort AdditionalFieldCount = 15;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(Worldspace_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Worldspace_ErrorMask);

        public static readonly Type ClassType = typeof(Worldspace);

        public static readonly Type GetterType = typeof(IWorldspaceGetter);

        public static readonly Type SetterType = typeof(IWorldspace);

        public static readonly Type CommonType = typeof(WorldspaceCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Worldspace";

        public const string Name = "Worldspace";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Worldspace_FieldIndex.Name;
                case "PARENT":
                    return (ushort)Worldspace_FieldIndex.Parent;
                case "CLIMATE":
                    return (ushort)Worldspace_FieldIndex.Climate;
                case "WATER":
                    return (ushort)Worldspace_FieldIndex.Water;
                case "ICON":
                    return (ushort)Worldspace_FieldIndex.Icon;
                case "MAPDATA":
                    return (ushort)Worldspace_FieldIndex.MapData;
                case "FLAGS":
                    return (ushort)Worldspace_FieldIndex.Flags;
                case "OBJECTBOUNDSMIN":
                    return (ushort)Worldspace_FieldIndex.ObjectBoundsMin;
                case "OBJECTBOUNDSMAX":
                    return (ushort)Worldspace_FieldIndex.ObjectBoundsMax;
                case "MUSIC":
                    return (ushort)Worldspace_FieldIndex.Music;
                case "OFFSETDATA":
                    return (ushort)Worldspace_FieldIndex.OffsetData;
                case "ROAD":
                    return (ushort)Worldspace_FieldIndex.Road;
                case "TOPCELL":
                    return (ushort)Worldspace_FieldIndex.TopCell;
                case "SUBCELLSTIMESTAMP":
                    return (ushort)Worldspace_FieldIndex.SubCellsTimestamp;
                case "SUBCELLS":
                    return (ushort)Worldspace_FieldIndex.SubCells;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.SubCells:
                    return true;
                case Worldspace_FieldIndex.Name:
                case Worldspace_FieldIndex.Parent:
                case Worldspace_FieldIndex.Climate:
                case Worldspace_FieldIndex.Water:
                case Worldspace_FieldIndex.Icon:
                case Worldspace_FieldIndex.MapData:
                case Worldspace_FieldIndex.Flags:
                case Worldspace_FieldIndex.ObjectBoundsMin:
                case Worldspace_FieldIndex.ObjectBoundsMax:
                case Worldspace_FieldIndex.Music:
                case Worldspace_FieldIndex.OffsetData:
                case Worldspace_FieldIndex.Road:
                case Worldspace_FieldIndex.TopCell:
                case Worldspace_FieldIndex.SubCellsTimestamp:
                    return false;
                default:
                    return Place_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.MapData:
                case Worldspace_FieldIndex.Road:
                case Worldspace_FieldIndex.TopCell:
                case Worldspace_FieldIndex.SubCells:
                    return true;
                case Worldspace_FieldIndex.Name:
                case Worldspace_FieldIndex.Parent:
                case Worldspace_FieldIndex.Climate:
                case Worldspace_FieldIndex.Water:
                case Worldspace_FieldIndex.Icon:
                case Worldspace_FieldIndex.Flags:
                case Worldspace_FieldIndex.ObjectBoundsMin:
                case Worldspace_FieldIndex.ObjectBoundsMax:
                case Worldspace_FieldIndex.Music:
                case Worldspace_FieldIndex.OffsetData:
                case Worldspace_FieldIndex.SubCellsTimestamp:
                    return false;
                default:
                    return Place_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Name:
                case Worldspace_FieldIndex.Parent:
                case Worldspace_FieldIndex.Climate:
                case Worldspace_FieldIndex.Water:
                case Worldspace_FieldIndex.Icon:
                case Worldspace_FieldIndex.MapData:
                case Worldspace_FieldIndex.Flags:
                case Worldspace_FieldIndex.ObjectBoundsMin:
                case Worldspace_FieldIndex.ObjectBoundsMax:
                case Worldspace_FieldIndex.Music:
                case Worldspace_FieldIndex.OffsetData:
                case Worldspace_FieldIndex.Road:
                case Worldspace_FieldIndex.TopCell:
                case Worldspace_FieldIndex.SubCellsTimestamp:
                case Worldspace_FieldIndex.SubCells:
                    return false;
                default:
                    return Place_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Name:
                    return "Name";
                case Worldspace_FieldIndex.Parent:
                    return "Parent";
                case Worldspace_FieldIndex.Climate:
                    return "Climate";
                case Worldspace_FieldIndex.Water:
                    return "Water";
                case Worldspace_FieldIndex.Icon:
                    return "Icon";
                case Worldspace_FieldIndex.MapData:
                    return "MapData";
                case Worldspace_FieldIndex.Flags:
                    return "Flags";
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    return "ObjectBoundsMin";
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    return "ObjectBoundsMax";
                case Worldspace_FieldIndex.Music:
                    return "Music";
                case Worldspace_FieldIndex.OffsetData:
                    return "OffsetData";
                case Worldspace_FieldIndex.Road:
                    return "Road";
                case Worldspace_FieldIndex.TopCell:
                    return "TopCell";
                case Worldspace_FieldIndex.SubCellsTimestamp:
                    return "SubCellsTimestamp";
                case Worldspace_FieldIndex.SubCells:
                    return "SubCells";
                default:
                    return Place_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Name:
                case Worldspace_FieldIndex.Parent:
                case Worldspace_FieldIndex.Climate:
                case Worldspace_FieldIndex.Water:
                case Worldspace_FieldIndex.Icon:
                case Worldspace_FieldIndex.MapData:
                case Worldspace_FieldIndex.Flags:
                case Worldspace_FieldIndex.ObjectBoundsMin:
                case Worldspace_FieldIndex.ObjectBoundsMax:
                case Worldspace_FieldIndex.Music:
                case Worldspace_FieldIndex.OffsetData:
                case Worldspace_FieldIndex.Road:
                case Worldspace_FieldIndex.TopCell:
                case Worldspace_FieldIndex.SubCellsTimestamp:
                case Worldspace_FieldIndex.SubCells:
                    return false;
                default:
                    return Place_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Name:
                case Worldspace_FieldIndex.Parent:
                case Worldspace_FieldIndex.Climate:
                case Worldspace_FieldIndex.Water:
                case Worldspace_FieldIndex.Icon:
                case Worldspace_FieldIndex.MapData:
                case Worldspace_FieldIndex.Flags:
                case Worldspace_FieldIndex.ObjectBoundsMin:
                case Worldspace_FieldIndex.ObjectBoundsMax:
                case Worldspace_FieldIndex.Music:
                case Worldspace_FieldIndex.OffsetData:
                case Worldspace_FieldIndex.Road:
                case Worldspace_FieldIndex.TopCell:
                case Worldspace_FieldIndex.SubCellsTimestamp:
                case Worldspace_FieldIndex.SubCells:
                    return false;
                default:
                    return Place_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Name:
                    return typeof(String);
                case Worldspace_FieldIndex.Parent:
                    return typeof(FormIDSetLink<Worldspace>);
                case Worldspace_FieldIndex.Climate:
                    return typeof(FormIDSetLink<Climate>);
                case Worldspace_FieldIndex.Water:
                    return typeof(FormIDSetLink<Water>);
                case Worldspace_FieldIndex.Icon:
                    return typeof(String);
                case Worldspace_FieldIndex.MapData:
                    return typeof(MapData);
                case Worldspace_FieldIndex.Flags:
                    return typeof(Worldspace.Flag);
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    return typeof(P2Float);
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    return typeof(P2Float);
                case Worldspace_FieldIndex.Music:
                    return typeof(MusicType);
                case Worldspace_FieldIndex.OffsetData:
                    return typeof(Byte[]);
                case Worldspace_FieldIndex.Road:
                    return typeof(Road);
                case Worldspace_FieldIndex.TopCell:
                    return typeof(Cell);
                case Worldspace_FieldIndex.SubCellsTimestamp:
                    return typeof(Byte[]);
                case Worldspace_FieldIndex.SubCells:
                    return typeof(SourceSetList<WorldspaceBlock>);
                default:
                    return Place_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType WRLD_HEADER = new RecordType("WRLD");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType WNAM_HEADER = new RecordType("WNAM");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType NAM2_HEADER = new RecordType("NAM2");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType NAM0_HEADER = new RecordType("NAM0");
        public static readonly RecordType NAM9_HEADER = new RecordType("NAM9");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType XXXX_HEADER = new RecordType("XXXX");
        public static readonly RecordType OFST_HEADER = new RecordType("OFST");
        public static readonly RecordType ROAD_HEADER = new RecordType("ROAD");
        public static readonly RecordType CELL_HEADER = new RecordType("CELL");
        public static readonly RecordType GRUP_HEADER = new RecordType("GRUP");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = WRLD_HEADER;
        public const int NumStructFields = 1;
        public const int NumTypedFields = 14;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class WorldspaceCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IWorldspace item,
            IWorldspaceGetter rhs,
            IWorldspaceGetter def,
            ErrorMaskBuilder errorMask,
            Worldspace_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            PlaceCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Parent ?? true)
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.Parent);
                try
                {
                    item.Parent_Property.SetLink(
                        rhs: rhs.Parent_Property,
                        def: def?.Parent_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Climate ?? true)
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.Climate);
                try
                {
                    item.Climate_Property.SetLink(
                        rhs: rhs.Climate_Property,
                        def: def?.Climate_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Water ?? true)
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.Water);
                try
                {
                    item.Water_Property.SetLink(
                        rhs: rhs.Water_Property,
                        def: def?.Water_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.Icon);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Icon,
                        rhsHasBeenSet: rhs.Icon_IsSet,
                        defItem: def?.Icon ?? default(String),
                        defHasBeenSet: def?.Icon_IsSet ?? false,
                        outRhsItem: out var rhsIconItem,
                        outDefItem: out var defIconItem))
                    {
                        item.Icon = rhsIconItem;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MapData.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.MapData);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.MapData,
                        rhsHasBeenSet: rhs.MapData_IsSet,
                        defItem: def?.MapData,
                        defHasBeenSet: def?.MapData_IsSet ?? false,
                        outRhsItem: out var rhsMapDataItem,
                        outDefItem: out var defMapDataItem))
                    {
                        switch (copyMask?.MapData.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.MapData = rhsMapDataItem;
                                break;
                            case CopyOption.CopyIn:
                                MapDataCommon.CopyFieldsFrom(
                                    item: item.MapData,
                                    rhs: rhs.MapData,
                                    def: def?.MapData,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.MapData.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.MapData = MapData.Copy(
                                    rhsMapDataItem,
                                    copyMask?.MapData?.Specific,
                                    def: defMapDataItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.MapData?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.MapData_Set(
                            item: default(MapData),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.Flags);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Flags,
                        rhsHasBeenSet: rhs.Flags_IsSet,
                        defItem: def?.Flags ?? default(Worldspace.Flag),
                        defHasBeenSet: def?.Flags_IsSet ?? false,
                        outRhsItem: out var rhsFlagsItem,
                        outDefItem: out var defFlagsItem))
                    {
                        item.Flags = rhsFlagsItem;
                    }
                    else
                    {
                        item.Flags_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ObjectBoundsMin ?? true)
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.ObjectBoundsMin);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.ObjectBoundsMin,
                        rhsHasBeenSet: rhs.ObjectBoundsMin_IsSet,
                        defItem: def?.ObjectBoundsMin ?? default(P2Float),
                        defHasBeenSet: def?.ObjectBoundsMin_IsSet ?? false,
                        outRhsItem: out var rhsObjectBoundsMinItem,
                        outDefItem: out var defObjectBoundsMinItem))
                    {
                        item.ObjectBoundsMin = rhsObjectBoundsMinItem;
                    }
                    else
                    {
                        item.ObjectBoundsMin_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ObjectBoundsMax ?? true)
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.ObjectBoundsMax);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.ObjectBoundsMax,
                        rhsHasBeenSet: rhs.ObjectBoundsMax_IsSet,
                        defItem: def?.ObjectBoundsMax ?? default(P2Float),
                        defHasBeenSet: def?.ObjectBoundsMax_IsSet ?? false,
                        outRhsItem: out var rhsObjectBoundsMaxItem,
                        outDefItem: out var defObjectBoundsMaxItem))
                    {
                        item.ObjectBoundsMax = rhsObjectBoundsMaxItem;
                    }
                    else
                    {
                        item.ObjectBoundsMax_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Music ?? true)
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.Music);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Music,
                        rhsHasBeenSet: rhs.Music_IsSet,
                        defItem: def?.Music ?? default(MusicType),
                        defHasBeenSet: def?.Music_IsSet ?? false,
                        outRhsItem: out var rhsMusicItem,
                        outDefItem: out var defMusicItem))
                    {
                        item.Music = rhsMusicItem;
                    }
                    else
                    {
                        item.Music_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.OffsetData ?? true)
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.OffsetData);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.OffsetData,
                        rhsHasBeenSet: rhs.OffsetData_IsSet,
                        defItem: def?.OffsetData ?? default(Byte[]),
                        defHasBeenSet: def?.OffsetData_IsSet ?? false,
                        outRhsItem: out var rhsOffsetDataItem,
                        outDefItem: out var defOffsetDataItem))
                    {
                        item.OffsetData = rhsOffsetDataItem;
                    }
                    else
                    {
                        item.OffsetData_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Road.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.Road);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Road,
                        rhsHasBeenSet: rhs.Road_IsSet,
                        defItem: def?.Road,
                        defHasBeenSet: def?.Road_IsSet ?? false,
                        outRhsItem: out var rhsRoadItem,
                        outDefItem: out var defRoadItem))
                    {
                        switch (copyMask?.Road.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.Road = rhsRoadItem;
                                break;
                            case CopyOption.CopyIn:
                                RoadCommon.CopyFieldsFrom(
                                    item: item.Road,
                                    rhs: rhs.Road,
                                    def: def?.Road,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Road.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.Road = Road.Copy(
                                    rhsRoadItem,
                                    copyMask?.Road?.Specific,
                                    def: defRoadItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Road?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Road_Set(
                            item: default(Road),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.TopCell.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.TopCell);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.TopCell,
                        rhsHasBeenSet: rhs.TopCell_IsSet,
                        defItem: def?.TopCell,
                        defHasBeenSet: def?.TopCell_IsSet ?? false,
                        outRhsItem: out var rhsTopCellItem,
                        outDefItem: out var defTopCellItem))
                    {
                        switch (copyMask?.TopCell.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.TopCell = rhsTopCellItem;
                                break;
                            case CopyOption.CopyIn:
                                CellCommon.CopyFieldsFrom(
                                    item: item.TopCell,
                                    rhs: rhs.TopCell,
                                    def: def?.TopCell,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.TopCell.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.TopCell = Cell.Copy(
                                    rhsTopCellItem,
                                    copyMask?.TopCell?.Specific,
                                    def: defTopCellItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.TopCell?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.TopCell_Set(
                            item: default(Cell),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SubCellsTimestamp ?? true)
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.SubCellsTimestamp);
                try
                {
                    item.SubCellsTimestamp = rhs.SubCellsTimestamp;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SubCells.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.SubCells);
                try
                {
                    item.SubCells.SetToWithDefault(
                        rhs: rhs.SubCells,
                        def: def?.SubCells,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.SubCells.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return WorldspaceBlock.Copy(
                                        r,
                                        copyMask?.SubCells?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.SubCells.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(
            IWorldspace item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Name_Unset();
            item.Parent_Property.Unset(cmds.ToUnsetParams());
            item.Climate_Property.Unset(cmds.ToUnsetParams());
            item.Water_Property.Unset(cmds.ToUnsetParams());
            item.Icon_Unset();
            item.MapData_Unset();
            item.Flags_Unset();
            item.ObjectBoundsMin_Unset();
            item.ObjectBoundsMax_Unset();
            item.Music_Unset();
            item.OffsetData_Unset();
            item.Road_Unset();
            item.TopCell_Unset();
            item.SubCellsTimestamp = default(Byte[]);
            item.SubCells.Unset();
        }

        public static Worldspace_Mask<bool> GetEqualsMask(
            this IWorldspaceGetter item,
            IWorldspaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Worldspace_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IWorldspaceGetter item,
            IWorldspaceGetter rhs,
            Worldspace_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && object.Equals(item.Name, rhs.Name);
            ret.Parent = item.Parent_Property.FormKey == rhs.Parent_Property.FormKey;
            ret.Climate = item.Climate_Property.FormKey == rhs.Climate_Property.FormKey;
            ret.Water = item.Water_Property.FormKey == rhs.Water_Property.FormKey;
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && object.Equals(item.Icon, rhs.Icon);
            ret.MapData = EqualsMaskHelper.EqualsHelper(
                item.MapData_IsSet,
                rhs.MapData_IsSet,
                item.MapData,
                rhs.MapData,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Flags = item.Flags_IsSet == rhs.Flags_IsSet && item.Flags == rhs.Flags;
            ret.ObjectBoundsMin = item.ObjectBoundsMin_IsSet == rhs.ObjectBoundsMin_IsSet && item.ObjectBoundsMin == rhs.ObjectBoundsMin;
            ret.ObjectBoundsMax = item.ObjectBoundsMax_IsSet == rhs.ObjectBoundsMax_IsSet && item.ObjectBoundsMax == rhs.ObjectBoundsMax;
            ret.Music = item.Music_IsSet == rhs.Music_IsSet && item.Music == rhs.Music;
            ret.OffsetData = item.OffsetData_IsSet == rhs.OffsetData_IsSet && item.OffsetData.EqualsFast(rhs.OffsetData);
            ret.Road = EqualsMaskHelper.EqualsHelper(
                item.Road_IsSet,
                rhs.Road_IsSet,
                item.Road,
                rhs.Road,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.TopCell = EqualsMaskHelper.EqualsHelper(
                item.TopCell_IsSet,
                rhs.TopCell_IsSet,
                item.TopCell,
                rhs.TopCell,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.SubCellsTimestamp = item.SubCellsTimestamp.EqualsFast(rhs.SubCellsTimestamp);
            ret.SubCells = item.SubCells.CollectionEqualsHelper(
                rhs.SubCells,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            PlaceCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IWorldspaceGetter item,
            string name = null,
            Worldspace_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IWorldspaceGetter item,
            FileGeneration fg,
            string name = null,
            Worldspace_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Worldspace)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Worldspace)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.Parent ?? true)
                {
                    fg.AppendLine($"Parent => {item.Parent_Property}");
                }
                if (printMask?.Climate ?? true)
                {
                    fg.AppendLine($"Climate => {item.Climate_Property}");
                }
                if (printMask?.Water ?? true)
                {
                    fg.AppendLine($"Water => {item.Water_Property}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.MapData?.Overall ?? true)
                {
                    item.MapData?.ToString(fg, "MapData");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.ObjectBoundsMin ?? true)
                {
                    fg.AppendLine($"ObjectBoundsMin => {item.ObjectBoundsMin}");
                }
                if (printMask?.ObjectBoundsMax ?? true)
                {
                    fg.AppendLine($"ObjectBoundsMax => {item.ObjectBoundsMax}");
                }
                if (printMask?.Music ?? true)
                {
                    fg.AppendLine($"Music => {item.Music}");
                }
                if (printMask?.OffsetData ?? true)
                {
                    fg.AppendLine($"OffsetData => {item.OffsetData}");
                }
                if (printMask?.Road?.Overall ?? true)
                {
                    item.Road?.ToString(fg, "Road");
                }
                if (printMask?.TopCell?.Overall ?? true)
                {
                    item.TopCell?.ToString(fg, "TopCell");
                }
                if (printMask?.SubCellsTimestamp ?? true)
                {
                    fg.AppendLine($"SubCellsTimestamp => {item.SubCellsTimestamp}");
                }
                if (printMask?.SubCells?.Overall ?? true)
                {
                    fg.AppendLine("SubCells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.SubCells)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IWorldspaceGetter item,
            Worldspace_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Parent.HasValue && checkMask.Parent.Value != item.Parent_Property.HasBeenSet) return false;
            if (checkMask.Climate.HasValue && checkMask.Climate.Value != item.Climate_Property.HasBeenSet) return false;
            if (checkMask.Water.HasValue && checkMask.Water.Value != item.Water_Property.HasBeenSet) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            if (checkMask.MapData.Overall.HasValue && checkMask.MapData.Overall.Value != item.MapData_IsSet) return false;
            if (checkMask.MapData.Specific != null && (item.MapData == null || !item.MapData.HasBeenSet(checkMask.MapData.Specific))) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_IsSet) return false;
            if (checkMask.ObjectBoundsMin.HasValue && checkMask.ObjectBoundsMin.Value != item.ObjectBoundsMin_IsSet) return false;
            if (checkMask.ObjectBoundsMax.HasValue && checkMask.ObjectBoundsMax.Value != item.ObjectBoundsMax_IsSet) return false;
            if (checkMask.Music.HasValue && checkMask.Music.Value != item.Music_IsSet) return false;
            if (checkMask.OffsetData.HasValue && checkMask.OffsetData.Value != item.OffsetData_IsSet) return false;
            if (checkMask.Road.Overall.HasValue && checkMask.Road.Overall.Value != item.Road_IsSet) return false;
            if (checkMask.Road.Specific != null && (item.Road == null || !item.Road.HasBeenSet(checkMask.Road.Specific))) return false;
            if (checkMask.TopCell.Overall.HasValue && checkMask.TopCell.Overall.Value != item.TopCell_IsSet) return false;
            if (checkMask.TopCell.Specific != null && (item.TopCell == null || !item.TopCell.HasBeenSet(checkMask.TopCell.Specific))) return false;
            if (checkMask.SubCells.Overall.HasValue && checkMask.SubCells.Overall.Value != item.SubCells.HasBeenSet) return false;
            return true;
        }

        public static Worldspace_Mask<bool> GetHasBeenSetMask(IWorldspaceGetter item)
        {
            var ret = new Worldspace_Mask<bool>();
            ret.Name = item.Name_IsSet;
            ret.Parent = item.Parent_Property.HasBeenSet;
            ret.Climate = item.Climate_Property.HasBeenSet;
            ret.Water = item.Water_Property.HasBeenSet;
            ret.Icon = item.Icon_IsSet;
            ret.MapData = new MaskItem<bool, MapData_Mask<bool>>(item.MapData_IsSet, MapDataCommon.GetHasBeenSetMask(item.MapData));
            ret.Flags = item.Flags_IsSet;
            ret.ObjectBoundsMin = item.ObjectBoundsMin_IsSet;
            ret.ObjectBoundsMax = item.ObjectBoundsMax_IsSet;
            ret.Music = item.Music_IsSet;
            ret.OffsetData = item.OffsetData_IsSet;
            ret.Road = new MaskItem<bool, Road_Mask<bool>>(item.Road_IsSet, RoadCommon.GetHasBeenSetMask(item.Road));
            ret.TopCell = new MaskItem<bool, Cell_Mask<bool>>(item.TopCell_IsSet, CellCommon.GetHasBeenSetMask(item.TopCell));
            ret.SubCellsTimestamp = true;
            ret.SubCells = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, WorldspaceBlock_Mask<bool>>>>(item.SubCells.HasBeenSet, item.SubCells.WithIndex().Select((i) => new MaskItemIndexed<bool, WorldspaceBlock_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            return ret;
        }

        public static Worldspace_FieldIndex? ConvertFieldIndex(Place_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Worldspace_FieldIndex ConvertFieldIndex(Place_FieldIndex index)
        {
            switch (index)
            {
                case Place_FieldIndex.FormKey:
                    return (Worldspace_FieldIndex)((int)index);
                case Place_FieldIndex.Version:
                    return (Worldspace_FieldIndex)((int)index);
                case Place_FieldIndex.EditorID:
                    return (Worldspace_FieldIndex)((int)index);
                case Place_FieldIndex.RecordType:
                    return (Worldspace_FieldIndex)((int)index);
                case Place_FieldIndex.OblivionMajorRecordFlags:
                    return (Worldspace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Worldspace_FieldIndex? ConvertFieldIndex(OblivionMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Worldspace_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Worldspace_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Worldspace_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Worldspace_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.RecordType:
                    return (Worldspace_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Worldspace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Worldspace_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Worldspace_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.FormKey:
                    return (Worldspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Worldspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Worldspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Worldspace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Worldspace item,
            bool doMasks,
            out Worldspace_ErrorMask errorMask,
            Worldspace_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Worldspace item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Worldspace");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Worldspace");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this Worldspace item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            PlaceCommon.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Worldspace_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Parent_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Parent) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Parent),
                    item: item.Parent_Property?.FormKey,
                    fieldIndex: (int)Worldspace_FieldIndex.Parent,
                    errorMask: errorMask);
            }
            if (item.Climate_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Climate) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Climate),
                    item: item.Climate_Property?.FormKey,
                    fieldIndex: (int)Worldspace_FieldIndex.Climate,
                    errorMask: errorMask);
            }
            if (item.Water_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Water) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Water),
                    item: item.Water_Property?.FormKey,
                    fieldIndex: (int)Worldspace_FieldIndex.Water,
                    errorMask: errorMask);
            }
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Worldspace_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.MapData_IsSet
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.MapData) ?? true))
            {
                LoquiXmlTranslation<MapData>.Instance.Write(
                    node: node,
                    item: item.MapData,
                    name: nameof(item.MapData),
                    fieldIndex: (int)Worldspace_FieldIndex.MapData,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Worldspace_FieldIndex.MapData));
            }
            if (item.Flags_IsSet
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Worldspace.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Worldspace_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.ObjectBoundsMin_IsSet
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.ObjectBoundsMin) ?? true))
            {
                P2FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ObjectBoundsMin),
                    item: item.ObjectBoundsMin,
                    fieldIndex: (int)Worldspace_FieldIndex.ObjectBoundsMin,
                    errorMask: errorMask);
            }
            if (item.ObjectBoundsMax_IsSet
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.ObjectBoundsMax) ?? true))
            {
                P2FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ObjectBoundsMax),
                    item: item.ObjectBoundsMax,
                    fieldIndex: (int)Worldspace_FieldIndex.ObjectBoundsMax,
                    errorMask: errorMask);
            }
            if (item.Music_IsSet
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Music) ?? true))
            {
                EnumXmlTranslation<MusicType>.Instance.Write(
                    node: node,
                    name: nameof(item.Music),
                    item: item.Music,
                    fieldIndex: (int)Worldspace_FieldIndex.Music,
                    errorMask: errorMask);
            }
            if (item.OffsetData_IsSet
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.OffsetData) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.OffsetData),
                    item: item.OffsetData,
                    fieldIndex: (int)Worldspace_FieldIndex.OffsetData,
                    errorMask: errorMask);
            }
            if (item.Road_IsSet
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Road) ?? true))
            {
                LoquiXmlTranslation<Road>.Instance.Write(
                    node: node,
                    item: item.Road,
                    name: nameof(item.Road),
                    fieldIndex: (int)Worldspace_FieldIndex.Road,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Worldspace_FieldIndex.Road));
            }
            if (item.TopCell_IsSet
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.TopCell) ?? true))
            {
                LoquiXmlTranslation<Cell>.Instance.Write(
                    node: node,
                    item: item.TopCell,
                    name: nameof(item.TopCell),
                    fieldIndex: (int)Worldspace_FieldIndex.TopCell,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Worldspace_FieldIndex.TopCell));
            }
            if ((translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.SubCellsTimestamp) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SubCellsTimestamp),
                    item: item.SubCellsTimestamp,
                    fieldIndex: (int)Worldspace_FieldIndex.SubCellsTimestamp,
                    errorMask: errorMask);
            }
            if (item.SubCells.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.SubCells) ?? true))
            {
                ListXmlTranslation<WorldspaceBlock>.Instance.Write(
                    node: node,
                    name: nameof(item.SubCells),
                    item: item.SubCells,
                    fieldIndex: (int)Worldspace_FieldIndex.SubCells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Worldspace_FieldIndex.SubCells),
                    transl: (XElement subNode, WorldspaceBlock subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<WorldspaceBlock>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }

        public static void FillPublic_Xml(
            this Worldspace item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WorldspaceCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this Worldspace item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Parent":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Parent_Property,
                        fieldIndex: (int)Worldspace_FieldIndex.Parent,
                        errorMask: errorMask);
                    break;
                case "Climate":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Climate_Property,
                        fieldIndex: (int)Worldspace_FieldIndex.Climate,
                        errorMask: errorMask);
                    break;
                case "Water":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Water_Property,
                        fieldIndex: (int)Worldspace_FieldIndex.Water,
                        errorMask: errorMask);
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MapData":
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.MapData);
                        if (LoquiXmlTranslation<MapData>.Instance.Parse(
                            node: node,
                            item: out MapData MapDataParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Worldspace_FieldIndex.MapData)))
                        {
                            item.MapData = MapDataParse;
                        }
                        else
                        {
                            item.MapData = default(MapData);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.Flags);
                        if (EnumXmlTranslation<Worldspace.Flag>.Instance.Parse(
                            node: node,
                            item: out Worldspace.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Worldspace.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ObjectBoundsMin":
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.ObjectBoundsMin);
                        if (P2FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out P2Float ObjectBoundsMinParse,
                            errorMask: errorMask))
                        {
                            item.ObjectBoundsMin = ObjectBoundsMinParse;
                        }
                        else
                        {
                            item.ObjectBoundsMin = default(P2Float);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ObjectBoundsMax":
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.ObjectBoundsMax);
                        if (P2FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out P2Float ObjectBoundsMaxParse,
                            errorMask: errorMask))
                        {
                            item.ObjectBoundsMax = ObjectBoundsMaxParse;
                        }
                        else
                        {
                            item.ObjectBoundsMax = default(P2Float);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Music":
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.Music);
                        if (EnumXmlTranslation<MusicType>.Instance.Parse(
                            node: node,
                            item: out MusicType MusicParse,
                            errorMask: errorMask))
                        {
                            item.Music = MusicParse;
                        }
                        else
                        {
                            item.Music = default(MusicType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OffsetData":
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.OffsetData);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] OffsetDataParse,
                            errorMask: errorMask))
                        {
                            item.OffsetData = OffsetDataParse;
                        }
                        else
                        {
                            item.OffsetData = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Road":
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.Road);
                        if (LoquiXmlTranslation<Road>.Instance.Parse(
                            node: node,
                            item: out Road RoadParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Worldspace_FieldIndex.Road)))
                        {
                            item.Road = RoadParse;
                        }
                        else
                        {
                            item.Road = default(Road);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TopCell":
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.TopCell);
                        if (LoquiXmlTranslation<Cell>.Instance.Parse(
                            node: node,
                            item: out Cell TopCellParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Worldspace_FieldIndex.TopCell)))
                        {
                            item.TopCell = TopCellParse;
                        }
                        else
                        {
                            item.TopCell = default(Cell);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SubCellsTimestamp":
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.SubCellsTimestamp);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] SubCellsTimestampParse,
                            errorMask: errorMask))
                        {
                            item.SubCellsTimestamp = SubCellsTimestampParse;
                        }
                        else
                        {
                            item.SubCellsTimestamp = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SubCells":
                    try
                    {
                        errorMask?.PushIndex((int)Worldspace_FieldIndex.SubCells);
                        if (ListXmlTranslation<WorldspaceBlock>.Instance.Parse(
                            node: node,
                            enumer: out var SubCellsItem,
                            transl: LoquiXmlTranslation<WorldspaceBlock>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.SubCells.SetTo(SubCellsItem);
                        }
                        else
                        {
                            item.SubCells.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    PlaceCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Worldspace item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Worldspace_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Worldspace_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Worldspace item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Worldspace_Registration.WRLD_HEADER,
                type: ObjectType.Record))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
            Worldspace.CustomBinaryEnd_ExportInternal(
                writer: writer,
                obj: item,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }
        #endregion

        public static void Write_Binary_Embedded(
            Worldspace item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordCommon.Write_Binary_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_Binary_RecordTypes(
            Worldspace item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    fieldIndex: (int)Worldspace_FieldIndex.Name,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Parent_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Parent_Property,
                    fieldIndex: (int)Worldspace_FieldIndex.Parent,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.WNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Climate_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Climate_Property,
                    fieldIndex: (int)Worldspace_FieldIndex.Climate,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.CNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Water_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Water_Property,
                    fieldIndex: (int)Worldspace_FieldIndex.Water,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.NAM2_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    fieldIndex: (int)Worldspace_FieldIndex.Icon,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.MapData_IsSet)
            {
                LoquiBinaryTranslation<MapData>.Instance.Write(
                    writer: writer,
                    item: item.MapData,
                    fieldIndex: (int)Worldspace_FieldIndex.MapData,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
            if (item.Flags_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Worldspace.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1,
                    fieldIndex: (int)Worldspace_FieldIndex.Flags,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.DATA_HEADER),
                    nullable: false);
            }
            if (item.ObjectBoundsMin_IsSet)
            {
                Mutagen.Bethesda.Binary.P2FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ObjectBoundsMin,
                    fieldIndex: (int)Worldspace_FieldIndex.ObjectBoundsMin,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.NAM0_HEADER),
                    nullable: false);
            }
            if (item.ObjectBoundsMax_IsSet)
            {
                Mutagen.Bethesda.Binary.P2FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ObjectBoundsMax,
                    fieldIndex: (int)Worldspace_FieldIndex.ObjectBoundsMax,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.NAM9_HEADER),
                    nullable: false);
            }
            if (item.Music_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<MusicType>.Instance.Write(
                    writer,
                    item.Music,
                    length: 4,
                    fieldIndex: (int)Worldspace_FieldIndex.Music,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.SNAM_HEADER),
                    nullable: false);
            }
            Worldspace.WriteBinary_OffsetLength(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            Worldspace.WriteBinary_OffsetData(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Worldspace_Mask<T> : Place_Mask<T>, IMask<T>, IEquatable<Worldspace_Mask<T>>
    {
        #region Ctors
        public Worldspace_Mask()
        {
        }

        public Worldspace_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Parent = initialValue;
            this.Climate = initialValue;
            this.Water = initialValue;
            this.Icon = initialValue;
            this.MapData = new MaskItem<T, MapData_Mask<T>>(initialValue, new MapData_Mask<T>(initialValue));
            this.Flags = initialValue;
            this.ObjectBoundsMin = initialValue;
            this.ObjectBoundsMax = initialValue;
            this.Music = initialValue;
            this.OffsetData = initialValue;
            this.Road = new MaskItem<T, Road_Mask<T>>(initialValue, new Road_Mask<T>(initialValue));
            this.TopCell = new MaskItem<T, Cell_Mask<T>>(initialValue, new Cell_Mask<T>(initialValue));
            this.SubCellsTimestamp = initialValue;
            this.SubCells = new MaskItem<T, IEnumerable<MaskItemIndexed<T, WorldspaceBlock_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Name;
        public T Parent;
        public T Climate;
        public T Water;
        public T Icon;
        public MaskItem<T, MapData_Mask<T>> MapData { get; set; }
        public T Flags;
        public T ObjectBoundsMin;
        public T ObjectBoundsMax;
        public T Music;
        public T OffsetData;
        public MaskItem<T, Road_Mask<T>> Road { get; set; }
        public MaskItem<T, Cell_Mask<T>> TopCell { get; set; }
        public T SubCellsTimestamp;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, WorldspaceBlock_Mask<T>>>> SubCells;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Worldspace_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Worldspace_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Parent, rhs.Parent)) return false;
            if (!object.Equals(this.Climate, rhs.Climate)) return false;
            if (!object.Equals(this.Water, rhs.Water)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.MapData, rhs.MapData)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.ObjectBoundsMin, rhs.ObjectBoundsMin)) return false;
            if (!object.Equals(this.ObjectBoundsMax, rhs.ObjectBoundsMax)) return false;
            if (!object.Equals(this.Music, rhs.Music)) return false;
            if (!object.Equals(this.OffsetData, rhs.OffsetData)) return false;
            if (!object.Equals(this.Road, rhs.Road)) return false;
            if (!object.Equals(this.TopCell, rhs.TopCell)) return false;
            if (!object.Equals(this.SubCellsTimestamp, rhs.SubCellsTimestamp)) return false;
            if (!object.Equals(this.SubCells, rhs.SubCells)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Parent?.GetHashCode());
            ret = ret.CombineHashCode(this.Climate?.GetHashCode());
            ret = ret.CombineHashCode(this.Water?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.MapData?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.ObjectBoundsMin?.GetHashCode());
            ret = ret.CombineHashCode(this.ObjectBoundsMax?.GetHashCode());
            ret = ret.CombineHashCode(this.Music?.GetHashCode());
            ret = ret.CombineHashCode(this.OffsetData?.GetHashCode());
            ret = ret.CombineHashCode(this.Road?.GetHashCode());
            ret = ret.CombineHashCode(this.TopCell?.GetHashCode());
            ret = ret.CombineHashCode(this.SubCellsTimestamp?.GetHashCode());
            ret = ret.CombineHashCode(this.SubCells?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (!eval(this.Parent)) return false;
            if (!eval(this.Climate)) return false;
            if (!eval(this.Water)) return false;
            if (!eval(this.Icon)) return false;
            if (MapData != null)
            {
                if (!eval(this.MapData.Overall)) return false;
                if (this.MapData.Specific != null && !this.MapData.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Flags)) return false;
            if (!eval(this.ObjectBoundsMin)) return false;
            if (!eval(this.ObjectBoundsMax)) return false;
            if (!eval(this.Music)) return false;
            if (!eval(this.OffsetData)) return false;
            if (Road != null)
            {
                if (!eval(this.Road.Overall)) return false;
                if (this.Road.Specific != null && !this.Road.Specific.AllEqual(eval)) return false;
            }
            if (TopCell != null)
            {
                if (!eval(this.TopCell.Overall)) return false;
                if (this.TopCell.Specific != null && !this.TopCell.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.SubCellsTimestamp)) return false;
            if (this.SubCells != null)
            {
                if (!eval(this.SubCells.Overall)) return false;
                if (this.SubCells.Specific != null)
                {
                    foreach (var item in this.SubCells.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Worldspace_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Worldspace_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Worldspace_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            obj.Parent = eval(this.Parent);
            obj.Climate = eval(this.Climate);
            obj.Water = eval(this.Water);
            obj.Icon = eval(this.Icon);
            if (this.MapData != null)
            {
                obj.MapData = new MaskItem<R, MapData_Mask<R>>();
                obj.MapData.Overall = eval(this.MapData.Overall);
                if (this.MapData.Specific != null)
                {
                    obj.MapData.Specific = this.MapData.Specific.Translate(eval);
                }
            }
            obj.Flags = eval(this.Flags);
            obj.ObjectBoundsMin = eval(this.ObjectBoundsMin);
            obj.ObjectBoundsMax = eval(this.ObjectBoundsMax);
            obj.Music = eval(this.Music);
            obj.OffsetData = eval(this.OffsetData);
            if (this.Road != null)
            {
                obj.Road = new MaskItem<R, Road_Mask<R>>();
                obj.Road.Overall = eval(this.Road.Overall);
                if (this.Road.Specific != null)
                {
                    obj.Road.Specific = this.Road.Specific.Translate(eval);
                }
            }
            if (this.TopCell != null)
            {
                obj.TopCell = new MaskItem<R, Cell_Mask<R>>();
                obj.TopCell.Overall = eval(this.TopCell.Overall);
                if (this.TopCell.Specific != null)
                {
                    obj.TopCell.Specific = this.TopCell.Specific.Translate(eval);
                }
            }
            obj.SubCellsTimestamp = eval(this.SubCellsTimestamp);
            if (SubCells != null)
            {
                obj.SubCells = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WorldspaceBlock_Mask<R>>>>();
                obj.SubCells.Overall = eval(this.SubCells.Overall);
                if (SubCells.Specific != null)
                {
                    List<MaskItemIndexed<R, WorldspaceBlock_Mask<R>>> l = new List<MaskItemIndexed<R, WorldspaceBlock_Mask<R>>>();
                    obj.SubCells.Specific = l;
                    foreach (var item in SubCells.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, WorldspaceBlock_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, WorldspaceBlock_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.SubCells.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Worldspace_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Worldspace_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Worldspace_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Parent ?? true)
                {
                    fg.AppendLine($"Parent => {Parent}");
                }
                if (printMask?.Climate ?? true)
                {
                    fg.AppendLine($"Climate => {Climate}");
                }
                if (printMask?.Water ?? true)
                {
                    fg.AppendLine($"Water => {Water}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.MapData?.Overall ?? true)
                {
                    MapData?.ToString(fg);
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.ObjectBoundsMin ?? true)
                {
                    fg.AppendLine($"ObjectBoundsMin => {ObjectBoundsMin}");
                }
                if (printMask?.ObjectBoundsMax ?? true)
                {
                    fg.AppendLine($"ObjectBoundsMax => {ObjectBoundsMax}");
                }
                if (printMask?.Music ?? true)
                {
                    fg.AppendLine($"Music => {Music}");
                }
                if (printMask?.OffsetData ?? true)
                {
                    fg.AppendLine($"OffsetData => {OffsetData}");
                }
                if (printMask?.Road?.Overall ?? true)
                {
                    Road?.ToString(fg);
                }
                if (printMask?.TopCell?.Overall ?? true)
                {
                    TopCell?.ToString(fg);
                }
                if (printMask?.SubCellsTimestamp ?? true)
                {
                    fg.AppendLine($"SubCellsTimestamp => {SubCellsTimestamp}");
                }
                if (printMask?.SubCells?.Overall ?? true)
                {
                    fg.AppendLine("SubCells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (SubCells.Overall != null)
                        {
                            fg.AppendLine(SubCells.Overall.ToString());
                        }
                        if (SubCells.Specific != null)
                        {
                            foreach (var subItem in SubCells.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Worldspace_ErrorMask : Place_ErrorMask, IErrorMask<Worldspace_ErrorMask>
    {
        #region Members
        public Exception Name;
        public Exception Parent;
        public Exception Climate;
        public Exception Water;
        public Exception Icon;
        public MaskItem<Exception, MapData_ErrorMask> MapData;
        public Exception Flags;
        public Exception ObjectBoundsMin;
        public Exception ObjectBoundsMax;
        public Exception Music;
        public Exception OffsetData;
        public MaskItem<Exception, Road_ErrorMask> Road;
        public MaskItem<Exception, Cell_ErrorMask> TopCell;
        public Exception SubCellsTimestamp;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, WorldspaceBlock_ErrorMask>>> SubCells;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Name:
                    return Name;
                case Worldspace_FieldIndex.Parent:
                    return Parent;
                case Worldspace_FieldIndex.Climate:
                    return Climate;
                case Worldspace_FieldIndex.Water:
                    return Water;
                case Worldspace_FieldIndex.Icon:
                    return Icon;
                case Worldspace_FieldIndex.MapData:
                    return MapData;
                case Worldspace_FieldIndex.Flags:
                    return Flags;
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    return ObjectBoundsMin;
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    return ObjectBoundsMax;
                case Worldspace_FieldIndex.Music:
                    return Music;
                case Worldspace_FieldIndex.OffsetData:
                    return OffsetData;
                case Worldspace_FieldIndex.Road:
                    return Road;
                case Worldspace_FieldIndex.TopCell:
                    return TopCell;
                case Worldspace_FieldIndex.SubCellsTimestamp:
                    return SubCellsTimestamp;
                case Worldspace_FieldIndex.SubCells:
                    return SubCells;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Worldspace_FieldIndex.Parent:
                    this.Parent = ex;
                    break;
                case Worldspace_FieldIndex.Climate:
                    this.Climate = ex;
                    break;
                case Worldspace_FieldIndex.Water:
                    this.Water = ex;
                    break;
                case Worldspace_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Worldspace_FieldIndex.MapData:
                    this.MapData = new MaskItem<Exception, MapData_ErrorMask>(ex, null);
                    break;
                case Worldspace_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    this.ObjectBoundsMin = ex;
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    this.ObjectBoundsMax = ex;
                    break;
                case Worldspace_FieldIndex.Music:
                    this.Music = ex;
                    break;
                case Worldspace_FieldIndex.OffsetData:
                    this.OffsetData = ex;
                    break;
                case Worldspace_FieldIndex.Road:
                    this.Road = new MaskItem<Exception, Road_ErrorMask>(ex, null);
                    break;
                case Worldspace_FieldIndex.TopCell:
                    this.TopCell = new MaskItem<Exception, Cell_ErrorMask>(ex, null);
                    break;
                case Worldspace_FieldIndex.SubCellsTimestamp:
                    this.SubCellsTimestamp = ex;
                    break;
                case Worldspace_FieldIndex.SubCells:
                    this.SubCells = new MaskItem<Exception, IEnumerable<MaskItem<Exception, WorldspaceBlock_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.Parent:
                    this.Parent = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.Climate:
                    this.Climate = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.Water:
                    this.Water = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.MapData:
                    this.MapData = (MaskItem<Exception, MapData_ErrorMask>)obj;
                    break;
                case Worldspace_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    this.ObjectBoundsMin = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    this.ObjectBoundsMax = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.Music:
                    this.Music = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.OffsetData:
                    this.OffsetData = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.Road:
                    this.Road = (MaskItem<Exception, Road_ErrorMask>)obj;
                    break;
                case Worldspace_FieldIndex.TopCell:
                    this.TopCell = (MaskItem<Exception, Cell_ErrorMask>)obj;
                    break;
                case Worldspace_FieldIndex.SubCellsTimestamp:
                    this.SubCellsTimestamp = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.SubCells:
                    this.SubCells = (MaskItem<Exception, IEnumerable<MaskItem<Exception, WorldspaceBlock_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Parent != null) return true;
            if (Climate != null) return true;
            if (Water != null) return true;
            if (Icon != null) return true;
            if (MapData != null) return true;
            if (Flags != null) return true;
            if (ObjectBoundsMin != null) return true;
            if (ObjectBoundsMax != null) return true;
            if (Music != null) return true;
            if (OffsetData != null) return true;
            if (Road != null) return true;
            if (TopCell != null) return true;
            if (SubCellsTimestamp != null) return true;
            if (SubCells != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Worldspace_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"Parent => {Parent}");
            fg.AppendLine($"Climate => {Climate}");
            fg.AppendLine($"Water => {Water}");
            fg.AppendLine($"Icon => {Icon}");
            MapData?.ToString(fg);
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"ObjectBoundsMin => {ObjectBoundsMin}");
            fg.AppendLine($"ObjectBoundsMax => {ObjectBoundsMax}");
            fg.AppendLine($"Music => {Music}");
            fg.AppendLine($"OffsetData => {OffsetData}");
            Road?.ToString(fg);
            TopCell?.ToString(fg);
            fg.AppendLine($"SubCellsTimestamp => {SubCellsTimestamp}");
            fg.AppendLine("SubCells =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (SubCells.Overall != null)
                {
                    fg.AppendLine(SubCells.Overall.ToString());
                }
                if (SubCells.Specific != null)
                {
                    foreach (var subItem in SubCells.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Worldspace_ErrorMask Combine(Worldspace_ErrorMask rhs)
        {
            var ret = new Worldspace_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Parent = this.Parent.Combine(rhs.Parent);
            ret.Climate = this.Climate.Combine(rhs.Climate);
            ret.Water = this.Water.Combine(rhs.Water);
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.MapData = new MaskItem<Exception, MapData_ErrorMask>(this.MapData.Overall.Combine(rhs.MapData.Overall), ((IErrorMask<MapData_ErrorMask>)this.MapData.Specific).Combine(rhs.MapData.Specific));
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.ObjectBoundsMin = this.ObjectBoundsMin.Combine(rhs.ObjectBoundsMin);
            ret.ObjectBoundsMax = this.ObjectBoundsMax.Combine(rhs.ObjectBoundsMax);
            ret.Music = this.Music.Combine(rhs.Music);
            ret.OffsetData = this.OffsetData.Combine(rhs.OffsetData);
            ret.Road = new MaskItem<Exception, Road_ErrorMask>(this.Road.Overall.Combine(rhs.Road.Overall), ((IErrorMask<Road_ErrorMask>)this.Road.Specific).Combine(rhs.Road.Specific));
            ret.TopCell = new MaskItem<Exception, Cell_ErrorMask>(this.TopCell.Overall.Combine(rhs.TopCell.Overall), ((IErrorMask<Cell_ErrorMask>)this.TopCell.Specific).Combine(rhs.TopCell.Specific));
            ret.SubCellsTimestamp = this.SubCellsTimestamp.Combine(rhs.SubCellsTimestamp);
            ret.SubCells = new MaskItem<Exception, IEnumerable<MaskItem<Exception, WorldspaceBlock_ErrorMask>>>(this.SubCells.Overall.Combine(rhs.SubCells.Overall), new List<MaskItem<Exception, WorldspaceBlock_ErrorMask>>(this.SubCells.Specific.And(rhs.SubCells.Specific)));
            return ret;
        }
        public static Worldspace_ErrorMask Combine(Worldspace_ErrorMask lhs, Worldspace_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Worldspace_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Worldspace_ErrorMask();
        }
        #endregion

    }
    public class Worldspace_CopyMask : Place_CopyMask
    {
        public Worldspace_CopyMask()
        {
        }

        public Worldspace_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Name = defaultOn;
            this.Parent = defaultOn;
            this.Climate = defaultOn;
            this.Water = defaultOn;
            this.Icon = defaultOn;
            this.MapData = new MaskItem<CopyOption, MapData_CopyMask>(deepCopyOption, default);
            this.Flags = defaultOn;
            this.ObjectBoundsMin = defaultOn;
            this.ObjectBoundsMax = defaultOn;
            this.Music = defaultOn;
            this.OffsetData = defaultOn;
            this.Road = new MaskItem<CopyOption, Road_CopyMask>(deepCopyOption, default);
            this.TopCell = new MaskItem<CopyOption, Cell_CopyMask>(deepCopyOption, default);
            this.SubCellsTimestamp = defaultOn;
            this.SubCells = new MaskItem<CopyOption, WorldspaceBlock_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool Name;
        public bool Parent;
        public bool Climate;
        public bool Water;
        public bool Icon;
        public MaskItem<CopyOption, MapData_CopyMask> MapData;
        public bool Flags;
        public bool ObjectBoundsMin;
        public bool ObjectBoundsMax;
        public bool Music;
        public bool OffsetData;
        public MaskItem<CopyOption, Road_CopyMask> Road;
        public MaskItem<CopyOption, Cell_CopyMask> TopCell;
        public bool SubCellsTimestamp;
        public MaskItem<CopyOption, WorldspaceBlock_CopyMask> SubCells;
        #endregion

    }

    public class Worldspace_TranslationMask : Place_TranslationMask
    {
        #region Members
        public bool Name;
        public bool Parent;
        public bool Climate;
        public bool Water;
        public bool Icon;
        public MaskItem<bool, MapData_TranslationMask> MapData;
        public bool Flags;
        public bool ObjectBoundsMin;
        public bool ObjectBoundsMax;
        public bool Music;
        public bool OffsetData;
        public MaskItem<bool, Road_TranslationMask> Road;
        public MaskItem<bool, Cell_TranslationMask> TopCell;
        public bool SubCellsTimestamp;
        public MaskItem<bool, WorldspaceBlock_TranslationMask> SubCells;
        #endregion

        #region Ctors
        public Worldspace_TranslationMask()
            : base()
        {
        }

        public Worldspace_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Parent = defaultOn;
            this.Climate = defaultOn;
            this.Water = defaultOn;
            this.Icon = defaultOn;
            this.MapData = new MaskItem<bool, MapData_TranslationMask>(defaultOn, null);
            this.Flags = defaultOn;
            this.ObjectBoundsMin = defaultOn;
            this.ObjectBoundsMax = defaultOn;
            this.Music = defaultOn;
            this.OffsetData = defaultOn;
            this.Road = new MaskItem<bool, Road_TranslationMask>(defaultOn, null);
            this.TopCell = new MaskItem<bool, Cell_TranslationMask>(defaultOn, null);
            this.SubCellsTimestamp = defaultOn;
            this.SubCells = new MaskItem<bool, WorldspaceBlock_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Parent, null));
            ret.Add((Climate, null));
            ret.Add((Water, null));
            ret.Add((Icon, null));
            ret.Add((MapData?.Overall ?? true, MapData?.Specific?.GetCrystal()));
            ret.Add((Flags, null));
            ret.Add((ObjectBoundsMin, null));
            ret.Add((ObjectBoundsMax, null));
            ret.Add((Music, null));
            ret.Add((OffsetData, null));
            ret.Add((Road?.Overall ?? true, Road?.Specific?.GetCrystal()));
            ret.Add((TopCell?.Overall ?? true, TopCell?.Specific?.GetCrystal()));
            ret.Add((SubCellsTimestamp, null));
            ret.Add((SubCells?.Overall ?? true, SubCells?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
