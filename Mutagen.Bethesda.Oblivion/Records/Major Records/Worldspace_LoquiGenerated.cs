/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Worldspace : NamedMajorRecord, IWorldspace, ILoquiObject<Worldspace>, ILoquiObjectSetter, IEquatable<Worldspace>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Worldspace_Registration.Instance;
        public new static Worldspace_Registration Registration => Worldspace_Registration.Instance;

        #region Ctor
        public Worldspace()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Climate
        public FormIDSetLink<Climate> Climate_Property { get; } = new FormIDSetLink<Climate>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Climate Climate { get => Climate_Property.Item; set => Climate_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Climate> IWorldspaceGetter.Climate_Property => this.Climate_Property;
        #endregion
        #region Water
        public FormIDSetLink<Water> Water_Property { get; } = new FormIDSetLink<Water>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Water Water { get => Water_Property.Item; set => Water_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Water> IWorldspaceGetter.Water_Property => this.Water_Property;
        #endregion
        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<FilePath> _Icon = NotifyingSetItem.Factory<FilePath>(markAsSet: false);
        public INotifyingSetItem<FilePath> Icon_Property => _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public FilePath Icon
        {
            get => this._Icon.Item;
            set => this._Icon.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<FilePath> IWorldspace.Icon_Property => this.Icon_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<FilePath> IWorldspaceGetter.Icon_Property => this.Icon_Property;
        #endregion
        #region UsableDimensions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<P2Int> _UsableDimensions = NotifyingItem.Factory<P2Int>();
        public INotifyingItem<P2Int> UsableDimensions_Property => _UsableDimensions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P2Int UsableDimensions
        {
            get => this._UsableDimensions.Item;
            set => this._UsableDimensions.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<P2Int> IWorldspace.UsableDimensions_Property => this.UsableDimensions_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<P2Int> IWorldspaceGetter.UsableDimensions_Property => this.UsableDimensions_Property;
        #endregion
        #region CellCoordinatesNWCell
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<P2Int16> _CellCoordinatesNWCell = NotifyingItem.Factory<P2Int16>();
        public INotifyingItem<P2Int16> CellCoordinatesNWCell_Property => _CellCoordinatesNWCell;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P2Int16 CellCoordinatesNWCell
        {
            get => this._CellCoordinatesNWCell.Item;
            set => this._CellCoordinatesNWCell.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<P2Int16> IWorldspace.CellCoordinatesNWCell_Property => this.CellCoordinatesNWCell_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<P2Int16> IWorldspaceGetter.CellCoordinatesNWCell_Property => this.CellCoordinatesNWCell_Property;
        #endregion
        #region CellCoordinatesSECell
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<P2Int16> _CellCoordinatesSECell = NotifyingItem.Factory<P2Int16>();
        public INotifyingItem<P2Int16> CellCoordinatesSECell_Property => _CellCoordinatesSECell;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P2Int16 CellCoordinatesSECell
        {
            get => this._CellCoordinatesSECell.Item;
            set => this._CellCoordinatesSECell.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<P2Int16> IWorldspace.CellCoordinatesSECell_Property => this.CellCoordinatesSECell_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<P2Int16> IWorldspaceGetter.CellCoordinatesSECell_Property => this.CellCoordinatesSECell_Property;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Worldspace.Flag> _Flags = NotifyingSetItem.Factory<Worldspace.Flag>(markAsSet: false);
        public INotifyingSetItem<Worldspace.Flag> Flags_Property => _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Worldspace.Flag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Worldspace.Flag> IWorldspace.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Worldspace.Flag> IWorldspaceGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region ObjectBoundsMin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<P2Float> _ObjectBoundsMin = NotifyingSetItem.Factory<P2Float>(markAsSet: false);
        public INotifyingSetItem<P2Float> ObjectBoundsMin_Property => _ObjectBoundsMin;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P2Float ObjectBoundsMin
        {
            get => this._ObjectBoundsMin.Item;
            set => this._ObjectBoundsMin.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<P2Float> IWorldspace.ObjectBoundsMin_Property => this.ObjectBoundsMin_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<P2Float> IWorldspaceGetter.ObjectBoundsMin_Property => this.ObjectBoundsMin_Property;
        #endregion
        #region ObjectBoundsMax
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<P2Float> _ObjectBoundsMax = NotifyingSetItem.Factory<P2Float>(markAsSet: false);
        public INotifyingSetItem<P2Float> ObjectBoundsMax_Property => _ObjectBoundsMax;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P2Float ObjectBoundsMax
        {
            get => this._ObjectBoundsMax.Item;
            set => this._ObjectBoundsMax.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<P2Float> IWorldspace.ObjectBoundsMax_Property => this.ObjectBoundsMax_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<P2Float> IWorldspaceGetter.ObjectBoundsMax_Property => this.ObjectBoundsMax_Property;
        #endregion
        #region Music
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<MusicType> _Music = NotifyingSetItem.Factory<MusicType>(markAsSet: false);
        public INotifyingSetItem<MusicType> Music_Property => _Music;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MusicType Music
        {
            get => this._Music.Item;
            set => this._Music.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<MusicType> IWorldspace.Music_Property => this.Music_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<MusicType> IWorldspaceGetter.Music_Property => this.Music_Property;
        #endregion
        #region OffsetData
        protected INotifyingSetItem<Byte[]> _OffsetData = NotifyingSetItem.Factory<Byte[]>(markAsSet: false);
        public INotifyingSetItem<Byte[]> OffsetData_Property => _OffsetData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] OffsetData
        {
            get => this._OffsetData.Item;
            set => this._OffsetData.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> IWorldspace.OffsetData_Property => this.OffsetData_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> IWorldspaceGetter.OffsetData_Property => this.OffsetData_Property;
        #endregion
        #region Road
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<Road> _Road = new NotifyingSetItem<Road>();
        public INotifyingSetItem<Road> Road_Property => this._Road;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Road IWorldspaceGetter.Road => this.Road;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Road Road { get => _Road.Item; set => _Road.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Road> IWorldspace.Road_Property => this.Road_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Road> IWorldspaceGetter.Road_Property => this.Road_Property;
        #endregion
        #region TopCell
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<Cell> _TopCell = new NotifyingSetItem<Cell>();
        public INotifyingSetItem<Cell> TopCell_Property => this._TopCell;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Cell IWorldspaceGetter.TopCell => this.TopCell;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Cell TopCell { get => _TopCell.Item; set => _TopCell.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Cell> IWorldspace.TopCell_Property => this.TopCell_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Cell> IWorldspaceGetter.TopCell_Property => this.TopCell_Property;
        #endregion
        #region SubCells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<WorldspaceBlock> _SubCells = new NotifyingList<WorldspaceBlock>();
        public INotifyingList<WorldspaceBlock> SubCells => _SubCells;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<WorldspaceBlock> SubCellsEnumerable
        {
            get => _SubCells;
            set => _SubCells.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<WorldspaceBlock> IWorldspace.SubCells => _SubCells;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<WorldspaceBlock> IWorldspaceGetter.SubCells => _SubCells;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => WorldspaceCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => WorldspaceCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => WorldspaceCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            WorldspaceCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Worldspace>.GetEqualsMask(Worldspace rhs) => WorldspaceCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IWorldspaceGetter>.GetEqualsMask(IWorldspaceGetter rhs) => WorldspaceCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return WorldspaceCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Worldspace_Mask<bool> printMask = null)
        {
            return WorldspaceCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            WorldspaceCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Worldspace_Mask<bool> GetHasBeenSetMask()
        {
            return WorldspaceCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Worldspace rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Worldspace rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Climate_Property.HasBeenSet != rhs.Climate_Property.HasBeenSet) return false;
            if (Climate_Property.HasBeenSet)
            {
                if (Climate != rhs.Climate) return false;
            }
            if (Water_Property.HasBeenSet != rhs.Water_Property.HasBeenSet) return false;
            if (Water_Property.HasBeenSet)
            {
                if (Water != rhs.Water) return false;
            }
            if (Icon_Property.HasBeenSet != rhs.Icon_Property.HasBeenSet) return false;
            if (Icon_Property.HasBeenSet)
            {
                if (!object.Equals(Icon, rhs.Icon)) return false;
            }
            if (UsableDimensions != rhs.UsableDimensions) return false;
            if (CellCoordinatesNWCell != rhs.CellCoordinatesNWCell) return false;
            if (CellCoordinatesSECell != rhs.CellCoordinatesSECell) return false;
            if (Flags_Property.HasBeenSet != rhs.Flags_Property.HasBeenSet) return false;
            if (Flags_Property.HasBeenSet)
            {
                if (Flags != rhs.Flags) return false;
            }
            if (ObjectBoundsMin_Property.HasBeenSet != rhs.ObjectBoundsMin_Property.HasBeenSet) return false;
            if (ObjectBoundsMin_Property.HasBeenSet)
            {
                if (ObjectBoundsMin != rhs.ObjectBoundsMin) return false;
            }
            if (ObjectBoundsMax_Property.HasBeenSet != rhs.ObjectBoundsMax_Property.HasBeenSet) return false;
            if (ObjectBoundsMax_Property.HasBeenSet)
            {
                if (ObjectBoundsMax != rhs.ObjectBoundsMax) return false;
            }
            if (Music_Property.HasBeenSet != rhs.Music_Property.HasBeenSet) return false;
            if (Music_Property.HasBeenSet)
            {
                if (Music != rhs.Music) return false;
            }
            if (OffsetData_Property.HasBeenSet != rhs.OffsetData_Property.HasBeenSet) return false;
            if (OffsetData_Property.HasBeenSet)
            {
                if (!OffsetData.EqualsFast(rhs.OffsetData)) return false;
            }
            if (Road_Property.HasBeenSet != rhs.Road_Property.HasBeenSet) return false;
            if (Road_Property.HasBeenSet)
            {
                if (!object.Equals(Road, rhs.Road)) return false;
            }
            if (TopCell_Property.HasBeenSet != rhs.TopCell_Property.HasBeenSet) return false;
            if (TopCell_Property.HasBeenSet)
            {
                if (!object.Equals(TopCell, rhs.TopCell)) return false;
            }
            if (SubCells.HasBeenSet != rhs.SubCells.HasBeenSet) return false;
            if (SubCells.HasBeenSet)
            {
                if (!SubCells.SequenceEqual(rhs.SubCells)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Climate_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Climate).CombineHashCode(ret);
            }
            if (Water_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Water).CombineHashCode(ret);
            }
            if (Icon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(UsableDimensions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CellCoordinatesNWCell).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CellCoordinatesSECell).CombineHashCode(ret);
            if (Flags_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            if (ObjectBoundsMin_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ObjectBoundsMin).CombineHashCode(ret);
            }
            if (ObjectBoundsMax_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ObjectBoundsMax).CombineHashCode(ret);
            }
            if (Music_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Music).CombineHashCode(ret);
            }
            if (OffsetData_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(OffsetData).CombineHashCode(ret);
            }
            if (Road_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Road).CombineHashCode(ret);
            }
            if (TopCell_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(TopCell).CombineHashCode(ret);
            }
            if (SubCells.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(SubCells).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Worldspace Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Worldspace Create_XML(
            XElement root,
            out Worldspace_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Worldspace Create_XML(
            XElement root,
            bool doMasks,
            out Worldspace_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Worldspace Object, Worldspace_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Worldspace_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Worldspace_ErrorMask()) : default(Func<Worldspace_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Worldspace Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Worldspace Create_XML(
            string path,
            out Worldspace_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Worldspace Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Worldspace Create_XML(
            Stream stream,
            out Worldspace_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Worldspace_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Worldspace_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Worldspace_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Worldspace_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            WorldspaceCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                writer: writer,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Worldspace Create_XML_Internal(
            XElement root,
            Func<Worldspace_ErrorMask> errorMask)
        {
            var ret = new Worldspace();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Worldspace item,
            XElement root,
            string name,
            Func<Worldspace_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Climate":
                    item.Climate_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Worldspace_FieldIndex.Climate,
                        errorMask: errorMask));
                    break;
                case "Water":
                    item.Water_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Worldspace_FieldIndex.Water,
                        errorMask: errorMask));
                    break;
                case "Icon":
                    item._Icon.SetIfSucceeded(FilePathXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Worldspace_FieldIndex.Icon,
                        errorMask: errorMask));
                    break;
                case "UsableDimensions":
                    item._UsableDimensions.SetIfSucceeded(P2IntXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Worldspace_FieldIndex.UsableDimensions,
                        errorMask: errorMask));
                    break;
                case "CellCoordinatesNWCell":
                    item._CellCoordinatesNWCell.SetIfSucceeded(P2Int16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Worldspace_FieldIndex.CellCoordinatesNWCell,
                        errorMask: errorMask));
                    break;
                case "CellCoordinatesSECell":
                    item._CellCoordinatesSECell.SetIfSucceeded(P2Int16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Worldspace_FieldIndex.CellCoordinatesSECell,
                        errorMask: errorMask));
                    break;
                case "Flags":
                    item._Flags.SetIfSucceeded(EnumXmlTranslation<Worldspace.Flag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)Worldspace_FieldIndex.Flags,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "ObjectBoundsMin":
                    item._ObjectBoundsMin.SetIfSucceeded(P2FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Worldspace_FieldIndex.ObjectBoundsMin,
                        errorMask: errorMask));
                    break;
                case "ObjectBoundsMax":
                    item._ObjectBoundsMax.SetIfSucceeded(P2FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Worldspace_FieldIndex.ObjectBoundsMax,
                        errorMask: errorMask));
                    break;
                case "Music":
                    item._Music.SetIfSucceeded(EnumXmlTranslation<MusicType>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)Worldspace_FieldIndex.Music,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "OffsetData":
                    item._OffsetData.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)Worldspace_FieldIndex.OffsetData,
                        errorMask: errorMask));
                    break;
                case "Road":
                    item._Road.SetIfSucceeded(LoquiXmlTranslation<Road, Road_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Worldspace_FieldIndex.Road,
                        errorMask: errorMask));
                    break;
                case "TopCell":
                    item._TopCell.SetIfSucceeded(LoquiXmlTranslation<Cell, Cell_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Worldspace_FieldIndex.TopCell,
                        errorMask: errorMask));
                    break;
                case "SubCells":
                    item._SubCells.SetIfSucceeded(ListXmlTranslation<WorldspaceBlock, MaskItem<Exception, WorldspaceBlock_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Worldspace_FieldIndex.SubCells,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, WorldspaceBlock_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<WorldspaceBlock, WorldspaceBlock_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Worldspace_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Climate_Property;
            yield return Water_Property;
            if (TopCell != null)
            {
                foreach (var item in TopCell.Links)
                {
                    yield return item;
                }
            }
            foreach (var item in SubCells.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Worldspace Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Worldspace Create_Binary(
            MutagenFrame frame,
            out Worldspace_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Worldspace Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Worldspace_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Worldspace Object, Worldspace_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Worldspace_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Worldspace_ErrorMask()) : default(Func<Worldspace_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Worldspace Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Worldspace Create_Binary(
            string path,
            out Worldspace_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Worldspace Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Worldspace Create_Binary(
            Stream stream,
            out Worldspace_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Worldspace_ErrorMask errorMask)
        {
            errorMask = (Worldspace_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Worldspace_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Worldspace_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            WorldspaceCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        static partial void FillBinary_OffsetLength_Custom(
            MutagenFrame frame,
            Worldspace item,
            Func<Worldspace_ErrorMask> errorMask);

        static partial void WriteBinary_OffsetLength_Custom(
            MutagenWriter writer,
            Worldspace item,
            Func<Worldspace_ErrorMask> errorMask);

        public static void WriteBinary_OffsetLength(
            MutagenWriter writer,
            Worldspace item,
            Func<Worldspace_ErrorMask> errorMask)
        {
            try
            {
                WriteBinary_OffsetLength_Custom(
                    writer: writer,
                    item: item,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }

        private static Worldspace Create_Binary_Internal(
            MutagenFrame frame,
            Func<Worldspace_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = UtilityTranslation.MajorRecordParse<Worldspace, Worldspace_ErrorMask, Worldspace_FieldIndex>(
                record: new Worldspace(),
                frame: frame,
                errorMask: errorMask,
                recType: Worldspace_Registration.WRLD_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
            try
            {
                CustomBinaryEnd_Import(
                    frame: frame,
                    obj: ret,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            Worldspace item,
            MutagenFrame frame,
            Func<Worldspace_ErrorMask> errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<Worldspace_FieldIndex?> Fill_Binary_RecordTypes(
            Worldspace item,
            MutagenFrame frame,
            Func<Worldspace_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "CNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Climate_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Worldspace_FieldIndex.Climate,
                        errorMask: errorMask));
                    return TryGet<Worldspace_FieldIndex?>.Succeed(Worldspace_FieldIndex.Climate);
                case "NAM2":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Water_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Worldspace_FieldIndex.Water,
                        errorMask: errorMask));
                    return TryGet<Worldspace_FieldIndex?>.Succeed(Worldspace_FieldIndex.Water);
                case "ICON":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._Icon.SetIfSucceeded(Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Worldspace_FieldIndex.Icon,
                        errorMask: errorMask));
                    return TryGet<Worldspace_FieldIndex?>.Succeed(Worldspace_FieldIndex.Icon);
                case "MNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        item._UsableDimensions.SetIfSucceeded(Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Worldspace_FieldIndex.UsableDimensions,
                            errorMask: errorMask));
                        item._CellCoordinatesNWCell.SetIfSucceeded(Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Worldspace_FieldIndex.CellCoordinatesNWCell,
                            errorMask: errorMask));
                        item._CellCoordinatesSECell.SetIfSucceeded(Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Worldspace_FieldIndex.CellCoordinatesSECell,
                            errorMask: errorMask));
                    }
                    return TryGet<Worldspace_FieldIndex?>.Succeed(Worldspace_FieldIndex.CellCoordinatesSECell);
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._Flags.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<Worldspace.Flag>.Instance.Parse(
                        frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Worldspace_FieldIndex.Flags,
                        errorMask: errorMask));
                    return TryGet<Worldspace_FieldIndex?>.Succeed(Worldspace_FieldIndex.Flags);
                case "NAM0":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._ObjectBoundsMin.SetIfSucceeded(Mutagen.Bethesda.Binary.P2FloatBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Worldspace_FieldIndex.ObjectBoundsMin,
                        errorMask: errorMask));
                    return TryGet<Worldspace_FieldIndex?>.Succeed(Worldspace_FieldIndex.ObjectBoundsMin);
                case "NAM9":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._ObjectBoundsMax.SetIfSucceeded(Mutagen.Bethesda.Binary.P2FloatBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Worldspace_FieldIndex.ObjectBoundsMax,
                        errorMask: errorMask));
                    return TryGet<Worldspace_FieldIndex?>.Succeed(Worldspace_FieldIndex.ObjectBoundsMax);
                case "SNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._Music.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<MusicType>.Instance.Parse(
                        frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Worldspace_FieldIndex.Music,
                        errorMask: errorMask));
                    return TryGet<Worldspace_FieldIndex?>.Succeed(Worldspace_FieldIndex.Music);
                case "XXXX":
                    try
                    {
                        using (var subFrame = frame.SpawnWithLength(Constants.SUBRECORD_LENGTH + contentLength, snapToFinalPosition: false))
                        {
                            FillBinary_OffsetLength_Custom(
                                frame: subFrame,
                                item: item,
                                errorMask: errorMask);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask().Overall = ex;
                    }
                    return TryGet<Worldspace_FieldIndex?>.Succeed(null);
                default:
                    return NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => WorldspaceCommon.ConvertFieldIndex(i));
            }
        }

        static partial void CustomBinaryEnd_Import(
            MutagenFrame frame,
            Worldspace obj,
            Func<Worldspace_ErrorMask> errorMask);
        static partial void CustomBinaryEnd_Export(
            MutagenWriter writer,
            Worldspace obj,
            Func<Worldspace_ErrorMask> errorMask);
        public static void CustomBinaryEnd_ExportInternal(
            MutagenWriter writer,
            Worldspace obj,
            Func<Worldspace_ErrorMask> errorMask)
        {
            CustomBinaryEnd_Export(
                writer: writer,
                obj: obj,
                errorMask: errorMask);
        }
        #endregion

        public Worldspace Copy(
            Worldspace_CopyMask copyMask = null,
            IWorldspaceGetter def = null)
        {
            return Worldspace.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Worldspace Copy(
            IWorldspace item,
            Worldspace_CopyMask copyMask = null,
            IWorldspaceGetter def = null)
        {
            Worldspace ret;
            if (item.GetType().Equals(typeof(Worldspace)))
            {
                ret = new Worldspace();
            }
            else
            {
                ret = (Worldspace)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Worldspace Copy_ToLoqui(
            IWorldspaceGetter item,
            Worldspace_CopyMask copyMask = null,
            IWorldspaceGetter def = null)
        {
            Worldspace ret;
            if (item.GetType().Equals(typeof(Worldspace)))
            {
                ret = new Worldspace() as Worldspace;
            }
            else
            {
                ret = (Worldspace)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IWorldspaceGetter rhs,
            Worldspace_CopyMask copyMask,
            IWorldspaceGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IWorldspaceGetter rhs,
            out Worldspace_ErrorMask errorMask,
            Worldspace_CopyMask copyMask = null,
            IWorldspaceGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            Worldspace_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Worldspace_ErrorMask();
                }
                return retErrorMask;
            };
            WorldspaceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Climate:
                    this.Climate_Property.Set(
                        (FormIDSetLink<Climate>)obj,
                        cmds);
                    break;
                case Worldspace_FieldIndex.Water:
                    this.Water_Property.Set(
                        (FormIDSetLink<Water>)obj,
                        cmds);
                    break;
                case Worldspace_FieldIndex.Icon:
                    this._Icon.Set(
                        (FilePath)obj,
                        cmds);
                    break;
                case Worldspace_FieldIndex.UsableDimensions:
                    this._UsableDimensions.Set(
                        (P2Int)obj,
                        cmds);
                    break;
                case Worldspace_FieldIndex.CellCoordinatesNWCell:
                    this._CellCoordinatesNWCell.Set(
                        (P2Int16)obj,
                        cmds);
                    break;
                case Worldspace_FieldIndex.CellCoordinatesSECell:
                    this._CellCoordinatesSECell.Set(
                        (P2Int16)obj,
                        cmds);
                    break;
                case Worldspace_FieldIndex.Flags:
                    this._Flags.Set(
                        (Worldspace.Flag)obj,
                        cmds);
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    this._ObjectBoundsMin.Set(
                        (P2Float)obj,
                        cmds);
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    this._ObjectBoundsMax.Set(
                        (P2Float)obj,
                        cmds);
                    break;
                case Worldspace_FieldIndex.Music:
                    this._Music.Set(
                        (MusicType)obj,
                        cmds);
                    break;
                case Worldspace_FieldIndex.OffsetData:
                    this._OffsetData.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case Worldspace_FieldIndex.Road:
                    this._Road.Set(
                        (Road)obj,
                        cmds);
                    break;
                case Worldspace_FieldIndex.TopCell:
                    this._TopCell.Set(
                        (Cell)obj,
                        cmds);
                    break;
                case Worldspace_FieldIndex.SubCells:
                    this._SubCells.SetTo((IEnumerable<WorldspaceBlock>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            WorldspaceCommon.Clear(this, cmds);
        }


        public new static Worldspace Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Worldspace();
            foreach (var pair in fields)
            {
                CopyInInternal_Worldspace(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Worldspace(Worldspace obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Worldspace_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Worldspace_FieldIndex.Climate:
                    obj.Climate_Property.Set(
                        (FormIDSetLink<Climate>)pair.Value,
                        null);
                    break;
                case Worldspace_FieldIndex.Water:
                    obj.Water_Property.Set(
                        (FormIDSetLink<Water>)pair.Value,
                        null);
                    break;
                case Worldspace_FieldIndex.Icon:
                    obj._Icon.Set(
                        (FilePath)pair.Value,
                        null);
                    break;
                case Worldspace_FieldIndex.UsableDimensions:
                    obj._UsableDimensions.Set(
                        (P2Int)pair.Value,
                        null);
                    break;
                case Worldspace_FieldIndex.CellCoordinatesNWCell:
                    obj._CellCoordinatesNWCell.Set(
                        (P2Int16)pair.Value,
                        null);
                    break;
                case Worldspace_FieldIndex.CellCoordinatesSECell:
                    obj._CellCoordinatesSECell.Set(
                        (P2Int16)pair.Value,
                        null);
                    break;
                case Worldspace_FieldIndex.Flags:
                    obj._Flags.Set(
                        (Worldspace.Flag)pair.Value,
                        null);
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    obj._ObjectBoundsMin.Set(
                        (P2Float)pair.Value,
                        null);
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    obj._ObjectBoundsMax.Set(
                        (P2Float)pair.Value,
                        null);
                    break;
                case Worldspace_FieldIndex.Music:
                    obj._Music.Set(
                        (MusicType)pair.Value,
                        null);
                    break;
                case Worldspace_FieldIndex.OffsetData:
                    obj._OffsetData.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case Worldspace_FieldIndex.Road:
                    obj._Road.Set(
                        (Road)pair.Value,
                        null);
                    break;
                case Worldspace_FieldIndex.TopCell:
                    obj._TopCell.Set(
                        (Cell)pair.Value,
                        null);
                    break;
                case Worldspace_FieldIndex.SubCells:
                    obj._SubCells.SetTo((IEnumerable<WorldspaceBlock>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Worldspace obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IWorldspace : IWorldspaceGetter, INamedMajorRecord, ILoquiClass<IWorldspace, IWorldspaceGetter>, ILoquiClass<Worldspace, IWorldspaceGetter>
    {
        new Climate Climate { get; set; }
        new Water Water { get; set; }
        new FilePath Icon { get; set; }
        new INotifyingSetItem<FilePath> Icon_Property { get; }

        new P2Int UsableDimensions { get; set; }
        new INotifyingItem<P2Int> UsableDimensions_Property { get; }

        new P2Int16 CellCoordinatesNWCell { get; set; }
        new INotifyingItem<P2Int16> CellCoordinatesNWCell_Property { get; }

        new P2Int16 CellCoordinatesSECell { get; set; }
        new INotifyingItem<P2Int16> CellCoordinatesSECell_Property { get; }

        new Worldspace.Flag Flags { get; set; }
        new INotifyingSetItem<Worldspace.Flag> Flags_Property { get; }

        new P2Float ObjectBoundsMin { get; set; }
        new INotifyingSetItem<P2Float> ObjectBoundsMin_Property { get; }

        new P2Float ObjectBoundsMax { get; set; }
        new INotifyingSetItem<P2Float> ObjectBoundsMax_Property { get; }

        new MusicType Music { get; set; }
        new INotifyingSetItem<MusicType> Music_Property { get; }

        new Byte[] OffsetData { get; set; }
        new INotifyingSetItem<Byte[]> OffsetData_Property { get; }

        new Road Road { get; set; }
        new INotifyingSetItem<Road> Road_Property { get; }

        new Cell TopCell { get; set; }
        new INotifyingSetItem<Cell> TopCell_Property { get; }

        new INotifyingList<WorldspaceBlock> SubCells { get; }
    }

    public partial interface IWorldspaceGetter : INamedMajorRecordGetter
    {
        #region Climate
        Climate Climate { get; }
        FormIDSetLink<Climate> Climate_Property { get; }

        #endregion
        #region Water
        Water Water { get; }
        FormIDSetLink<Water> Water_Property { get; }

        #endregion
        #region Icon
        FilePath Icon { get; }
        INotifyingSetItemGetter<FilePath> Icon_Property { get; }

        #endregion
        #region UsableDimensions
        P2Int UsableDimensions { get; }
        INotifyingItemGetter<P2Int> UsableDimensions_Property { get; }

        #endregion
        #region CellCoordinatesNWCell
        P2Int16 CellCoordinatesNWCell { get; }
        INotifyingItemGetter<P2Int16> CellCoordinatesNWCell_Property { get; }

        #endregion
        #region CellCoordinatesSECell
        P2Int16 CellCoordinatesSECell { get; }
        INotifyingItemGetter<P2Int16> CellCoordinatesSECell_Property { get; }

        #endregion
        #region Flags
        Worldspace.Flag Flags { get; }
        INotifyingSetItemGetter<Worldspace.Flag> Flags_Property { get; }

        #endregion
        #region ObjectBoundsMin
        P2Float ObjectBoundsMin { get; }
        INotifyingSetItemGetter<P2Float> ObjectBoundsMin_Property { get; }

        #endregion
        #region ObjectBoundsMax
        P2Float ObjectBoundsMax { get; }
        INotifyingSetItemGetter<P2Float> ObjectBoundsMax_Property { get; }

        #endregion
        #region Music
        MusicType Music { get; }
        INotifyingSetItemGetter<MusicType> Music_Property { get; }

        #endregion
        #region OffsetData
        Byte[] OffsetData { get; }
        INotifyingSetItemGetter<Byte[]> OffsetData_Property { get; }

        #endregion
        #region Road
        Road Road { get; }
        INotifyingSetItemGetter<Road> Road_Property { get; }

        #endregion
        #region TopCell
        Cell TopCell { get; }
        INotifyingSetItemGetter<Cell> TopCell_Property { get; }

        #endregion
        #region SubCells
        INotifyingListGetter<WorldspaceBlock> SubCells { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Worldspace_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Climate = 6,
        Water = 7,
        Icon = 8,
        UsableDimensions = 9,
        CellCoordinatesNWCell = 10,
        CellCoordinatesSECell = 11,
        Flags = 12,
        ObjectBoundsMin = 13,
        ObjectBoundsMax = 14,
        Music = 15,
        OffsetData = 16,
        Road = 17,
        TopCell = 18,
        SubCells = 19,
    }
    #endregion

    #region Registration
    public class Worldspace_Registration : ILoquiRegistration
    {
        public static readonly Worldspace_Registration Instance = new Worldspace_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 75,
            version: 0);

        public const string GUID = "d95e86a2-5fdd-4bb1-a2b9-c16161ef2f62";

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(Worldspace_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Worldspace_ErrorMask);

        public static readonly Type ClassType = typeof(Worldspace);

        public static readonly Type GetterType = typeof(IWorldspaceGetter);

        public static readonly Type SetterType = typeof(IWorldspace);

        public static readonly Type CommonType = typeof(WorldspaceCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Worldspace";

        public const string Name = "Worldspace";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "CLIMATE":
                    return (ushort)Worldspace_FieldIndex.Climate;
                case "WATER":
                    return (ushort)Worldspace_FieldIndex.Water;
                case "ICON":
                    return (ushort)Worldspace_FieldIndex.Icon;
                case "USABLEDIMENSIONS":
                    return (ushort)Worldspace_FieldIndex.UsableDimensions;
                case "CELLCOORDINATESNWCELL":
                    return (ushort)Worldspace_FieldIndex.CellCoordinatesNWCell;
                case "CELLCOORDINATESSECELL":
                    return (ushort)Worldspace_FieldIndex.CellCoordinatesSECell;
                case "FLAGS":
                    return (ushort)Worldspace_FieldIndex.Flags;
                case "OBJECTBOUNDSMIN":
                    return (ushort)Worldspace_FieldIndex.ObjectBoundsMin;
                case "OBJECTBOUNDSMAX":
                    return (ushort)Worldspace_FieldIndex.ObjectBoundsMax;
                case "MUSIC":
                    return (ushort)Worldspace_FieldIndex.Music;
                case "OFFSETDATA":
                    return (ushort)Worldspace_FieldIndex.OffsetData;
                case "ROAD":
                    return (ushort)Worldspace_FieldIndex.Road;
                case "TOPCELL":
                    return (ushort)Worldspace_FieldIndex.TopCell;
                case "SUBCELLS":
                    return (ushort)Worldspace_FieldIndex.SubCells;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.SubCells:
                    return true;
                case Worldspace_FieldIndex.Climate:
                case Worldspace_FieldIndex.Water:
                case Worldspace_FieldIndex.Icon:
                case Worldspace_FieldIndex.UsableDimensions:
                case Worldspace_FieldIndex.CellCoordinatesNWCell:
                case Worldspace_FieldIndex.CellCoordinatesSECell:
                case Worldspace_FieldIndex.Flags:
                case Worldspace_FieldIndex.ObjectBoundsMin:
                case Worldspace_FieldIndex.ObjectBoundsMax:
                case Worldspace_FieldIndex.Music:
                case Worldspace_FieldIndex.OffsetData:
                case Worldspace_FieldIndex.Road:
                case Worldspace_FieldIndex.TopCell:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Road:
                case Worldspace_FieldIndex.TopCell:
                case Worldspace_FieldIndex.SubCells:
                    return true;
                case Worldspace_FieldIndex.Climate:
                case Worldspace_FieldIndex.Water:
                case Worldspace_FieldIndex.Icon:
                case Worldspace_FieldIndex.UsableDimensions:
                case Worldspace_FieldIndex.CellCoordinatesNWCell:
                case Worldspace_FieldIndex.CellCoordinatesSECell:
                case Worldspace_FieldIndex.Flags:
                case Worldspace_FieldIndex.ObjectBoundsMin:
                case Worldspace_FieldIndex.ObjectBoundsMax:
                case Worldspace_FieldIndex.Music:
                case Worldspace_FieldIndex.OffsetData:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Climate:
                case Worldspace_FieldIndex.Water:
                case Worldspace_FieldIndex.Icon:
                case Worldspace_FieldIndex.UsableDimensions:
                case Worldspace_FieldIndex.CellCoordinatesNWCell:
                case Worldspace_FieldIndex.CellCoordinatesSECell:
                case Worldspace_FieldIndex.Flags:
                case Worldspace_FieldIndex.ObjectBoundsMin:
                case Worldspace_FieldIndex.ObjectBoundsMax:
                case Worldspace_FieldIndex.Music:
                case Worldspace_FieldIndex.OffsetData:
                case Worldspace_FieldIndex.Road:
                case Worldspace_FieldIndex.TopCell:
                case Worldspace_FieldIndex.SubCells:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Climate:
                    return "Climate";
                case Worldspace_FieldIndex.Water:
                    return "Water";
                case Worldspace_FieldIndex.Icon:
                    return "Icon";
                case Worldspace_FieldIndex.UsableDimensions:
                    return "UsableDimensions";
                case Worldspace_FieldIndex.CellCoordinatesNWCell:
                    return "CellCoordinatesNWCell";
                case Worldspace_FieldIndex.CellCoordinatesSECell:
                    return "CellCoordinatesSECell";
                case Worldspace_FieldIndex.Flags:
                    return "Flags";
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    return "ObjectBoundsMin";
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    return "ObjectBoundsMax";
                case Worldspace_FieldIndex.Music:
                    return "Music";
                case Worldspace_FieldIndex.OffsetData:
                    return "OffsetData";
                case Worldspace_FieldIndex.Road:
                    return "Road";
                case Worldspace_FieldIndex.TopCell:
                    return "TopCell";
                case Worldspace_FieldIndex.SubCells:
                    return "SubCells";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Climate:
                case Worldspace_FieldIndex.Water:
                case Worldspace_FieldIndex.Icon:
                case Worldspace_FieldIndex.UsableDimensions:
                case Worldspace_FieldIndex.CellCoordinatesNWCell:
                case Worldspace_FieldIndex.CellCoordinatesSECell:
                case Worldspace_FieldIndex.Flags:
                case Worldspace_FieldIndex.ObjectBoundsMin:
                case Worldspace_FieldIndex.ObjectBoundsMax:
                case Worldspace_FieldIndex.Music:
                case Worldspace_FieldIndex.OffsetData:
                case Worldspace_FieldIndex.Road:
                case Worldspace_FieldIndex.TopCell:
                case Worldspace_FieldIndex.SubCells:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Climate:
                case Worldspace_FieldIndex.Water:
                case Worldspace_FieldIndex.Icon:
                case Worldspace_FieldIndex.UsableDimensions:
                case Worldspace_FieldIndex.CellCoordinatesNWCell:
                case Worldspace_FieldIndex.CellCoordinatesSECell:
                case Worldspace_FieldIndex.Flags:
                case Worldspace_FieldIndex.ObjectBoundsMin:
                case Worldspace_FieldIndex.ObjectBoundsMax:
                case Worldspace_FieldIndex.Music:
                case Worldspace_FieldIndex.OffsetData:
                case Worldspace_FieldIndex.Road:
                case Worldspace_FieldIndex.TopCell:
                case Worldspace_FieldIndex.SubCells:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Climate:
                    return typeof(FormIDSetLink<Climate>);
                case Worldspace_FieldIndex.Water:
                    return typeof(FormIDSetLink<Water>);
                case Worldspace_FieldIndex.Icon:
                    return typeof(FilePath);
                case Worldspace_FieldIndex.UsableDimensions:
                    return typeof(P2Int);
                case Worldspace_FieldIndex.CellCoordinatesNWCell:
                    return typeof(P2Int16);
                case Worldspace_FieldIndex.CellCoordinatesSECell:
                    return typeof(P2Int16);
                case Worldspace_FieldIndex.Flags:
                    return typeof(Worldspace.Flag);
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    return typeof(P2Float);
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    return typeof(P2Float);
                case Worldspace_FieldIndex.Music:
                    return typeof(MusicType);
                case Worldspace_FieldIndex.OffsetData:
                    return typeof(Byte[]);
                case Worldspace_FieldIndex.Road:
                    return typeof(Road);
                case Worldspace_FieldIndex.TopCell:
                    return typeof(Cell);
                case Worldspace_FieldIndex.SubCells:
                    return typeof(NotifyingList<WorldspaceBlock>);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType WRLD_HEADER = new RecordType("WRLD");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType NAM2_HEADER = new RecordType("NAM2");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType NAM0_HEADER = new RecordType("NAM0");
        public static readonly RecordType NAM9_HEADER = new RecordType("NAM9");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType XXXX_HEADER = new RecordType("XXXX");
        public static readonly RecordType OFST_HEADER = new RecordType("OFST");
        public static readonly RecordType ROAD_HEADER = new RecordType("ROAD");
        public static readonly RecordType CELL_HEADER = new RecordType("CELL");
        public static readonly RecordType GRUP_HEADER = new RecordType("GRUP");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = WRLD_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 11;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class WorldspaceCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IWorldspace item,
            IWorldspaceGetter rhs,
            IWorldspaceGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            Worldspace_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Climate ?? true)
            {
                try
                {
                    item.Climate_Property.SetToWithDefault(
                        rhs: rhs.Climate_Property,
                        def: def?.Climate_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Worldspace_FieldIndex.Climate, ex);
                }
            }
            if (copyMask?.Water ?? true)
            {
                try
                {
                    item.Water_Property.SetToWithDefault(
                        rhs: rhs.Water_Property,
                        def: def?.Water_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Worldspace_FieldIndex.Water, ex);
                }
            }
            if (copyMask?.Icon ?? true)
            {
                try
                {
                    item.Icon_Property.SetToWithDefault(
                        rhs: rhs.Icon_Property,
                        def: def?.Icon_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Worldspace_FieldIndex.Icon, ex);
                }
            }
            if (copyMask?.UsableDimensions ?? true)
            {
                try
                {
                    item.UsableDimensions_Property.Set(
                        value: rhs.UsableDimensions,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Worldspace_FieldIndex.UsableDimensions, ex);
                }
            }
            if (copyMask?.CellCoordinatesNWCell ?? true)
            {
                try
                {
                    item.CellCoordinatesNWCell_Property.Set(
                        value: rhs.CellCoordinatesNWCell,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Worldspace_FieldIndex.CellCoordinatesNWCell, ex);
                }
            }
            if (copyMask?.CellCoordinatesSECell ?? true)
            {
                try
                {
                    item.CellCoordinatesSECell_Property.Set(
                        value: rhs.CellCoordinatesSECell,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Worldspace_FieldIndex.CellCoordinatesSECell, ex);
                }
            }
            if (copyMask?.Flags ?? true)
            {
                try
                {
                    item.Flags_Property.SetToWithDefault(
                        rhs: rhs.Flags_Property,
                        def: def?.Flags_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Worldspace_FieldIndex.Flags, ex);
                }
            }
            if (copyMask?.ObjectBoundsMin ?? true)
            {
                try
                {
                    item.ObjectBoundsMin_Property.SetToWithDefault(
                        rhs: rhs.ObjectBoundsMin_Property,
                        def: def?.ObjectBoundsMin_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Worldspace_FieldIndex.ObjectBoundsMin, ex);
                }
            }
            if (copyMask?.ObjectBoundsMax ?? true)
            {
                try
                {
                    item.ObjectBoundsMax_Property.SetToWithDefault(
                        rhs: rhs.ObjectBoundsMax_Property,
                        def: def?.ObjectBoundsMax_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Worldspace_FieldIndex.ObjectBoundsMax, ex);
                }
            }
            if (copyMask?.Music ?? true)
            {
                try
                {
                    item.Music_Property.SetToWithDefault(
                        rhs: rhs.Music_Property,
                        def: def?.Music_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Worldspace_FieldIndex.Music, ex);
                }
            }
            if (copyMask?.OffsetData ?? true)
            {
                try
                {
                    item.OffsetData_Property.SetToWithDefault(
                        rhs: rhs.OffsetData_Property,
                        def: def?.OffsetData_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Worldspace_FieldIndex.OffsetData, ex);
                }
            }
            if (copyMask?.Road.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Road_Property.SetToWithDefault(
                        rhs.Road_Property,
                        def?.Road_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Road.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    RoadCommon.CopyFieldsFrom(
                                        item: item.Road,
                                        rhs: rhs.Road,
                                        def: def?.Road,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Road_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new Road_ErrorMask();
                                            baseMask.SetNthMask((int)Worldspace_FieldIndex.Road, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Road.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Road);
                                    return Road.Copy(
                                        r,
                                        copyMask?.Road?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Road?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Worldspace_FieldIndex.Road, ex);
                }
            }
            if (copyMask?.TopCell.Overall != CopyOption.Skip)
            {
                try
                {
                    item.TopCell_Property.SetToWithDefault(
                        rhs.TopCell_Property,
                        def?.TopCell_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.TopCell.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    CellCommon.CopyFieldsFrom(
                                        item: item.TopCell,
                                        rhs: rhs.TopCell,
                                        def: def?.TopCell,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Cell_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new Cell_ErrorMask();
                                            baseMask.SetNthMask((int)Worldspace_FieldIndex.TopCell, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.TopCell.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Cell);
                                    return Cell.Copy(
                                        r,
                                        copyMask?.TopCell?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.TopCell?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Worldspace_FieldIndex.TopCell, ex);
                }
            }
            if (copyMask?.SubCells.Overall != CopyOption.Skip)
            {
                try
                {
                    item.SubCells.SetToWithDefault(
                        rhs: rhs.SubCells,
                        def: def?.SubCells,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.SubCells.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(WorldspaceBlock);
                                    return WorldspaceBlock.Copy(
                                        r,
                                        copyMask?.SubCells?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.SubCells.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Worldspace_FieldIndex.SubCells, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IWorldspace obj,
            NotifyingFireParameters cmds = null)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.UsableDimensions:
                case Worldspace_FieldIndex.CellCoordinatesNWCell:
                case Worldspace_FieldIndex.CellCoordinatesSECell:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Worldspace_FieldIndex.Climate:
                    obj.Climate_Property.HasBeenSet = on;
                    break;
                case Worldspace_FieldIndex.Water:
                    obj.Water_Property.HasBeenSet = on;
                    break;
                case Worldspace_FieldIndex.Icon:
                    obj.Icon_Property.HasBeenSet = on;
                    break;
                case Worldspace_FieldIndex.Flags:
                    obj.Flags_Property.HasBeenSet = on;
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    obj.ObjectBoundsMin_Property.HasBeenSet = on;
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    obj.ObjectBoundsMax_Property.HasBeenSet = on;
                    break;
                case Worldspace_FieldIndex.Music:
                    obj.Music_Property.HasBeenSet = on;
                    break;
                case Worldspace_FieldIndex.OffsetData:
                    obj.OffsetData_Property.HasBeenSet = on;
                    break;
                case Worldspace_FieldIndex.Road:
                    obj.Road_Property.HasBeenSet = on;
                    break;
                case Worldspace_FieldIndex.TopCell:
                    obj.TopCell_Property.HasBeenSet = on;
                    break;
                case Worldspace_FieldIndex.SubCells:
                    obj.SubCells.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IWorldspace obj,
            NotifyingUnsetParameters cmds = null)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Climate:
                    obj.Climate_Property.Unset(cmds);
                    break;
                case Worldspace_FieldIndex.Water:
                    obj.Water_Property.Unset(cmds);
                    break;
                case Worldspace_FieldIndex.Icon:
                    obj.Icon_Property.Unset(cmds);
                    break;
                case Worldspace_FieldIndex.UsableDimensions:
                    obj.UsableDimensions = default(P2Int);
                    break;
                case Worldspace_FieldIndex.CellCoordinatesNWCell:
                    obj.CellCoordinatesNWCell = default(P2Int16);
                    break;
                case Worldspace_FieldIndex.CellCoordinatesSECell:
                    obj.CellCoordinatesSECell = default(P2Int16);
                    break;
                case Worldspace_FieldIndex.Flags:
                    obj.Flags_Property.Unset(cmds);
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    obj.ObjectBoundsMin_Property.Unset(cmds);
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    obj.ObjectBoundsMax_Property.Unset(cmds);
                    break;
                case Worldspace_FieldIndex.Music:
                    obj.Music_Property.Unset(cmds);
                    break;
                case Worldspace_FieldIndex.OffsetData:
                    obj.OffsetData_Property.Unset(cmds);
                    break;
                case Worldspace_FieldIndex.Road:
                    obj.Road_Property.Unset(cmds);
                    break;
                case Worldspace_FieldIndex.TopCell:
                    obj.TopCell_Property.Unset(cmds);
                    break;
                case Worldspace_FieldIndex.SubCells:
                    obj.SubCells.Unset(cmds);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IWorldspace obj)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.UsableDimensions:
                case Worldspace_FieldIndex.CellCoordinatesNWCell:
                case Worldspace_FieldIndex.CellCoordinatesSECell:
                    return true;
                case Worldspace_FieldIndex.Climate:
                    return obj.Climate_Property.HasBeenSet;
                case Worldspace_FieldIndex.Water:
                    return obj.Water_Property.HasBeenSet;
                case Worldspace_FieldIndex.Icon:
                    return obj.Icon_Property.HasBeenSet;
                case Worldspace_FieldIndex.Flags:
                    return obj.Flags_Property.HasBeenSet;
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    return obj.ObjectBoundsMin_Property.HasBeenSet;
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    return obj.ObjectBoundsMax_Property.HasBeenSet;
                case Worldspace_FieldIndex.Music:
                    return obj.Music_Property.HasBeenSet;
                case Worldspace_FieldIndex.OffsetData:
                    return obj.OffsetData_Property.HasBeenSet;
                case Worldspace_FieldIndex.Road:
                    return obj.Road_Property.HasBeenSet;
                case Worldspace_FieldIndex.TopCell:
                    return obj.TopCell_Property.HasBeenSet;
                case Worldspace_FieldIndex.SubCells:
                    return obj.SubCells.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IWorldspaceGetter obj)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Climate:
                    return obj.Climate;
                case Worldspace_FieldIndex.Water:
                    return obj.Water;
                case Worldspace_FieldIndex.Icon:
                    return obj.Icon;
                case Worldspace_FieldIndex.UsableDimensions:
                    return obj.UsableDimensions;
                case Worldspace_FieldIndex.CellCoordinatesNWCell:
                    return obj.CellCoordinatesNWCell;
                case Worldspace_FieldIndex.CellCoordinatesSECell:
                    return obj.CellCoordinatesSECell;
                case Worldspace_FieldIndex.Flags:
                    return obj.Flags;
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    return obj.ObjectBoundsMin;
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    return obj.ObjectBoundsMax;
                case Worldspace_FieldIndex.Music:
                    return obj.Music;
                case Worldspace_FieldIndex.OffsetData:
                    return obj.OffsetData;
                case Worldspace_FieldIndex.Road:
                    return obj.Road;
                case Worldspace_FieldIndex.TopCell:
                    return obj.TopCell;
                case Worldspace_FieldIndex.SubCells:
                    return obj.SubCells;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IWorldspace item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Climate_Property.Unset(cmds.ToUnsetParams());
            item.Water_Property.Unset(cmds.ToUnsetParams());
            item.Icon_Property.Unset(cmds.ToUnsetParams());
            item.UsableDimensions = default(P2Int);
            item.CellCoordinatesNWCell = default(P2Int16);
            item.CellCoordinatesSECell = default(P2Int16);
            item.Flags_Property.Unset(cmds.ToUnsetParams());
            item.ObjectBoundsMin_Property.Unset(cmds.ToUnsetParams());
            item.ObjectBoundsMax_Property.Unset(cmds.ToUnsetParams());
            item.Music_Property.Unset(cmds.ToUnsetParams());
            item.OffsetData_Property.Unset(cmds.ToUnsetParams());
            item.Road_Property.Unset(cmds.ToUnsetParams());
            item.TopCell_Property.Unset(cmds.ToUnsetParams());
            item.SubCells.Unset(cmds.ToUnsetParams());
        }

        public static Worldspace_Mask<bool> GetEqualsMask(
            this IWorldspaceGetter item,
            IWorldspaceGetter rhs)
        {
            var ret = new Worldspace_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IWorldspaceGetter item,
            IWorldspaceGetter rhs,
            Worldspace_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Climate = item.Climate_Property.Equals(rhs.Climate_Property, (l, r) => l == r);
            ret.Water = item.Water_Property.Equals(rhs.Water_Property, (l, r) => l == r);
            ret.Icon = item.Icon_Property.Equals(rhs.Icon_Property, (l, r) => object.Equals(l, r));
            ret.UsableDimensions = item.UsableDimensions == rhs.UsableDimensions;
            ret.CellCoordinatesNWCell = item.CellCoordinatesNWCell == rhs.CellCoordinatesNWCell;
            ret.CellCoordinatesSECell = item.CellCoordinatesSECell == rhs.CellCoordinatesSECell;
            ret.Flags = item.Flags_Property.Equals(rhs.Flags_Property, (l, r) => l == r);
            ret.ObjectBoundsMin = item.ObjectBoundsMin_Property.Equals(rhs.ObjectBoundsMin_Property, (l, r) => l == r);
            ret.ObjectBoundsMax = item.ObjectBoundsMax_Property.Equals(rhs.ObjectBoundsMax_Property, (l, r) => l == r);
            ret.Music = item.Music_Property.Equals(rhs.Music_Property, (l, r) => l == r);
            ret.OffsetData = item.OffsetData_Property.Equals(rhs.OffsetData_Property, (l, r) => l.EqualsFast(r));
            ret.Road = item.Road_Property.LoquiEqualsHelper(rhs.Road_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.TopCell = item.TopCell_Property.LoquiEqualsHelper(rhs.TopCell_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            if (item.SubCells.HasBeenSet == rhs.SubCells.HasBeenSet)
            {
                if (item.SubCells.HasBeenSet)
                {
                    ret.SubCells = new MaskItem<bool, IEnumerable<MaskItem<bool, WorldspaceBlock_Mask<bool>>>>();
                    ret.SubCells.Specific = item.SubCells.SelectAgainst<WorldspaceBlock, MaskItem<bool, WorldspaceBlock_Mask<bool>>>(rhs.SubCells, ((l, r) =>
                    {
                        MaskItem<bool, WorldspaceBlock_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.SubCells.Overall);
                    ret.SubCells.Overall = ret.SubCells.Overall && ret.SubCells.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.SubCells = new MaskItem<bool, IEnumerable<MaskItem<bool, WorldspaceBlock_Mask<bool>>>>();
                    ret.SubCells.Overall = true;
                }
            }
            else
            {
                ret.SubCells = new MaskItem<bool, IEnumerable<MaskItem<bool, WorldspaceBlock_Mask<bool>>>>();
                ret.SubCells.Overall = false;
            }
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IWorldspaceGetter item,
            string name = null,
            Worldspace_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IWorldspaceGetter item,
            FileGeneration fg,
            string name = null,
            Worldspace_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Worldspace)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Worldspace)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Climate ?? true)
                {
                    fg.AppendLine($"Climate => {item.Climate_Property}");
                }
                if (printMask?.Water ?? true)
                {
                    fg.AppendLine($"Water => {item.Water_Property}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.UsableDimensions ?? true)
                {
                    fg.AppendLine($"UsableDimensions => {item.UsableDimensions}");
                }
                if (printMask?.CellCoordinatesNWCell ?? true)
                {
                    fg.AppendLine($"CellCoordinatesNWCell => {item.CellCoordinatesNWCell}");
                }
                if (printMask?.CellCoordinatesSECell ?? true)
                {
                    fg.AppendLine($"CellCoordinatesSECell => {item.CellCoordinatesSECell}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.ObjectBoundsMin ?? true)
                {
                    fg.AppendLine($"ObjectBoundsMin => {item.ObjectBoundsMin}");
                }
                if (printMask?.ObjectBoundsMax ?? true)
                {
                    fg.AppendLine($"ObjectBoundsMax => {item.ObjectBoundsMax}");
                }
                if (printMask?.Music ?? true)
                {
                    fg.AppendLine($"Music => {item.Music}");
                }
                if (printMask?.OffsetData ?? true)
                {
                    fg.AppendLine($"OffsetData => {item.OffsetData}");
                }
                if (printMask?.Road?.Overall ?? true)
                {
                    item.Road?.ToString(fg, "Road");
                }
                if (printMask?.TopCell?.Overall ?? true)
                {
                    item.TopCell?.ToString(fg, "TopCell");
                }
                if (printMask?.SubCells?.Overall ?? true)
                {
                    fg.AppendLine("SubCells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.SubCells)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IWorldspaceGetter item,
            Worldspace_Mask<bool?> checkMask)
        {
            if (checkMask.Climate.HasValue && checkMask.Climate.Value != item.Climate_Property.HasBeenSet) return false;
            if (checkMask.Water.HasValue && checkMask.Water.Value != item.Water_Property.HasBeenSet) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_Property.HasBeenSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_Property.HasBeenSet) return false;
            if (checkMask.ObjectBoundsMin.HasValue && checkMask.ObjectBoundsMin.Value != item.ObjectBoundsMin_Property.HasBeenSet) return false;
            if (checkMask.ObjectBoundsMax.HasValue && checkMask.ObjectBoundsMax.Value != item.ObjectBoundsMax_Property.HasBeenSet) return false;
            if (checkMask.Music.HasValue && checkMask.Music.Value != item.Music_Property.HasBeenSet) return false;
            if (checkMask.OffsetData.HasValue && checkMask.OffsetData.Value != item.OffsetData_Property.HasBeenSet) return false;
            if (checkMask.Road.Overall.HasValue && checkMask.Road.Overall.Value != item.Road_Property.HasBeenSet) return false;
            if (checkMask.Road.Specific != null && (item.Road == null || !item.Road.HasBeenSet(checkMask.Road.Specific))) return false;
            if (checkMask.TopCell.Overall.HasValue && checkMask.TopCell.Overall.Value != item.TopCell_Property.HasBeenSet) return false;
            if (checkMask.TopCell.Specific != null && (item.TopCell == null || !item.TopCell.HasBeenSet(checkMask.TopCell.Specific))) return false;
            if (checkMask.SubCells.Overall.HasValue && checkMask.SubCells.Overall.Value != item.SubCells.HasBeenSet) return false;
            return true;
        }

        public static Worldspace_Mask<bool> GetHasBeenSetMask(IWorldspaceGetter item)
        {
            var ret = new Worldspace_Mask<bool>();
            ret.Climate = item.Climate_Property.HasBeenSet;
            ret.Water = item.Water_Property.HasBeenSet;
            ret.Icon = item.Icon_Property.HasBeenSet;
            ret.UsableDimensions = true;
            ret.CellCoordinatesNWCell = true;
            ret.CellCoordinatesSECell = true;
            ret.Flags = item.Flags_Property.HasBeenSet;
            ret.ObjectBoundsMin = item.ObjectBoundsMin_Property.HasBeenSet;
            ret.ObjectBoundsMax = item.ObjectBoundsMax_Property.HasBeenSet;
            ret.Music = item.Music_Property.HasBeenSet;
            ret.OffsetData = item.OffsetData_Property.HasBeenSet;
            ret.Road = new MaskItem<bool, Road_Mask<bool>>(item.Road_Property.HasBeenSet, RoadCommon.GetHasBeenSetMask(item.Road));
            ret.TopCell = new MaskItem<bool, Cell_Mask<bool>>(item.TopCell_Property.HasBeenSet, CellCommon.GetHasBeenSetMask(item.TopCell));
            ret.SubCells = new MaskItem<bool, IEnumerable<MaskItem<bool, WorldspaceBlock_Mask<bool>>>>(item.SubCells.HasBeenSet, item.SubCells.Select((i) => new MaskItem<bool, WorldspaceBlock_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static Worldspace_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Worldspace_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (Worldspace_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (Worldspace_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (Worldspace_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (Worldspace_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (Worldspace_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (Worldspace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Worldspace_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Worldspace_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Worldspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Worldspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Worldspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Worldspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Worldspace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IWorldspaceGetter item,
            bool doMasks,
            out Worldspace_ErrorMask errorMask,
            string name = null)
        {
            Worldspace_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Worldspace_ErrorMask()) : default(Func<Worldspace_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IWorldspaceGetter item,
            Func<Worldspace_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.Worldspace"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.Worldspace");
                    }
                    if (item.Climate_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Climate),
                            item: item.Climate?.FormID,
                            fieldIndex: (int)Worldspace_FieldIndex.Climate,
                            errorMask: errorMask);
                    }
                    if (item.Water_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Water),
                            item: item.Water?.FormID,
                            fieldIndex: (int)Worldspace_FieldIndex.Water,
                            errorMask: errorMask);
                    }
                    if (item.Icon_Property.HasBeenSet)
                    {
                        FilePathXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Icon),
                            item: item.Icon_Property,
                            fieldIndex: (int)Worldspace_FieldIndex.Icon,
                            errorMask: errorMask);
                    }
                    P2IntXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.UsableDimensions),
                        item: item.UsableDimensions_Property,
                        fieldIndex: (int)Worldspace_FieldIndex.UsableDimensions,
                        errorMask: errorMask);
                    P2Int16XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.CellCoordinatesNWCell),
                        item: item.CellCoordinatesNWCell_Property,
                        fieldIndex: (int)Worldspace_FieldIndex.CellCoordinatesNWCell,
                        errorMask: errorMask);
                    P2Int16XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.CellCoordinatesSECell),
                        item: item.CellCoordinatesSECell_Property,
                        fieldIndex: (int)Worldspace_FieldIndex.CellCoordinatesSECell,
                        errorMask: errorMask);
                    if (item.Flags_Property.HasBeenSet)
                    {
                        EnumXmlTranslation<Worldspace.Flag>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Flags),
                            item: item.Flags_Property,
                            fieldIndex: (int)Worldspace_FieldIndex.Flags,
                            errorMask: errorMask);
                    }
                    if (item.ObjectBoundsMin_Property.HasBeenSet)
                    {
                        P2FloatXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.ObjectBoundsMin),
                            item: item.ObjectBoundsMin_Property,
                            fieldIndex: (int)Worldspace_FieldIndex.ObjectBoundsMin,
                            errorMask: errorMask);
                    }
                    if (item.ObjectBoundsMax_Property.HasBeenSet)
                    {
                        P2FloatXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.ObjectBoundsMax),
                            item: item.ObjectBoundsMax_Property,
                            fieldIndex: (int)Worldspace_FieldIndex.ObjectBoundsMax,
                            errorMask: errorMask);
                    }
                    if (item.Music_Property.HasBeenSet)
                    {
                        EnumXmlTranslation<MusicType>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Music),
                            item: item.Music_Property,
                            fieldIndex: (int)Worldspace_FieldIndex.Music,
                            errorMask: errorMask);
                    }
                    if (item.OffsetData_Property.HasBeenSet)
                    {
                        ByteArrayXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.OffsetData),
                            item: item.OffsetData_Property,
                            fieldIndex: (int)Worldspace_FieldIndex.OffsetData,
                            errorMask: errorMask);
                    }
                    if (item.Road_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<Road, Road_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Road_Property,
                            name: nameof(item.Road),
                            fieldIndex: (int)Worldspace_FieldIndex.Road,
                            errorMask: errorMask);
                    }
                    if (item.TopCell_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<Cell, Cell_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.TopCell_Property,
                            name: nameof(item.TopCell),
                            fieldIndex: (int)Worldspace_FieldIndex.TopCell,
                            errorMask: errorMask);
                    }
                    if (item.SubCells.HasBeenSet)
                    {
                        ListXmlTranslation<WorldspaceBlock, MaskItem<Exception, WorldspaceBlock_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.SubCells),
                            item: item.SubCells,
                            fieldIndex: (int)Worldspace_FieldIndex.SubCells,
                            errorMask: errorMask,
                            transl: (WorldspaceBlock subItem, bool listDoMasks, out MaskItem<Exception, WorldspaceBlock_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<WorldspaceBlock, WorldspaceBlock_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Worldspace item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Worldspace_ErrorMask errorMask)
        {
            Worldspace_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Worldspace_ErrorMask()) : default(Func<Worldspace_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            Worldspace item,
            RecordTypeConverter recordTypeConverter,
            Func<Worldspace_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Worldspace_Registration.WRLD_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
                Worldspace.CustomBinaryEnd_ExportInternal(
                    writer: writer,
                    obj: item,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Worldspace item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Worldspace_ErrorMask> errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Climate_Property,
                fieldIndex: (int)Worldspace_FieldIndex.Climate,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.CNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Water_Property,
                fieldIndex: (int)Worldspace_FieldIndex.Water,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.NAM2_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Icon_Property,
                fieldIndex: (int)Worldspace_FieldIndex.Icon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.ICON_HEADER),
                nullable: false);
            using (HeaderExport.ExportSubRecordHeader(writer, Worldspace_Registration.MNAM_HEADER))
            {
                Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.UsableDimensions_Property,
                    fieldIndex: (int)Worldspace_FieldIndex.UsableDimensions,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CellCoordinatesNWCell_Property,
                    fieldIndex: (int)Worldspace_FieldIndex.CellCoordinatesNWCell,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CellCoordinatesSECell_Property,
                    fieldIndex: (int)Worldspace_FieldIndex.CellCoordinatesSECell,
                    errorMask: errorMask);
            }
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Worldspace.Flag>.Instance.Write(
                writer,
                item.Flags_Property,
                length: new ContentLength(4),
                fieldIndex: (int)Worldspace_FieldIndex.Flags,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.DATA_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.P2FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ObjectBoundsMin_Property,
                fieldIndex: (int)Worldspace_FieldIndex.ObjectBoundsMin,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.NAM0_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.P2FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ObjectBoundsMax_Property,
                fieldIndex: (int)Worldspace_FieldIndex.ObjectBoundsMax,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.NAM9_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<MusicType>.Instance.Write(
                writer,
                item.Music_Property,
                length: new ContentLength(4),
                fieldIndex: (int)Worldspace_FieldIndex.Music,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.SNAM_HEADER),
                nullable: false);
            Worldspace.WriteBinary_OffsetLength(
                writer: writer,
                item: item,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Worldspace_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<Worldspace_Mask<T>>
    {
        #region Ctors
        public Worldspace_Mask()
        {
        }

        public Worldspace_Mask(T initialValue)
        {
            this.Climate = initialValue;
            this.Water = initialValue;
            this.Icon = initialValue;
            this.UsableDimensions = initialValue;
            this.CellCoordinatesNWCell = initialValue;
            this.CellCoordinatesSECell = initialValue;
            this.Flags = initialValue;
            this.ObjectBoundsMin = initialValue;
            this.ObjectBoundsMax = initialValue;
            this.Music = initialValue;
            this.OffsetData = initialValue;
            this.Road = new MaskItem<T, Road_Mask<T>>(initialValue, new Road_Mask<T>(initialValue));
            this.TopCell = new MaskItem<T, Cell_Mask<T>>(initialValue, new Cell_Mask<T>(initialValue));
            this.SubCells = new MaskItem<T, IEnumerable<MaskItem<T, WorldspaceBlock_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Climate;
        public T Water;
        public T Icon;
        public T UsableDimensions;
        public T CellCoordinatesNWCell;
        public T CellCoordinatesSECell;
        public T Flags;
        public T ObjectBoundsMin;
        public T ObjectBoundsMax;
        public T Music;
        public T OffsetData;
        public MaskItem<T, Road_Mask<T>> Road { get; set; }
        public MaskItem<T, Cell_Mask<T>> TopCell { get; set; }
        public MaskItem<T, IEnumerable<MaskItem<T, WorldspaceBlock_Mask<T>>>> SubCells;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Worldspace_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Worldspace_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Climate, rhs.Climate)) return false;
            if (!object.Equals(this.Water, rhs.Water)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.UsableDimensions, rhs.UsableDimensions)) return false;
            if (!object.Equals(this.CellCoordinatesNWCell, rhs.CellCoordinatesNWCell)) return false;
            if (!object.Equals(this.CellCoordinatesSECell, rhs.CellCoordinatesSECell)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.ObjectBoundsMin, rhs.ObjectBoundsMin)) return false;
            if (!object.Equals(this.ObjectBoundsMax, rhs.ObjectBoundsMax)) return false;
            if (!object.Equals(this.Music, rhs.Music)) return false;
            if (!object.Equals(this.OffsetData, rhs.OffsetData)) return false;
            if (!object.Equals(this.Road, rhs.Road)) return false;
            if (!object.Equals(this.TopCell, rhs.TopCell)) return false;
            if (!object.Equals(this.SubCells, rhs.SubCells)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Climate?.GetHashCode());
            ret = ret.CombineHashCode(this.Water?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.UsableDimensions?.GetHashCode());
            ret = ret.CombineHashCode(this.CellCoordinatesNWCell?.GetHashCode());
            ret = ret.CombineHashCode(this.CellCoordinatesSECell?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.ObjectBoundsMin?.GetHashCode());
            ret = ret.CombineHashCode(this.ObjectBoundsMax?.GetHashCode());
            ret = ret.CombineHashCode(this.Music?.GetHashCode());
            ret = ret.CombineHashCode(this.OffsetData?.GetHashCode());
            ret = ret.CombineHashCode(this.Road?.GetHashCode());
            ret = ret.CombineHashCode(this.TopCell?.GetHashCode());
            ret = ret.CombineHashCode(this.SubCells?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Climate)) return false;
            if (!eval(this.Water)) return false;
            if (!eval(this.Icon)) return false;
            if (!eval(this.UsableDimensions)) return false;
            if (!eval(this.CellCoordinatesNWCell)) return false;
            if (!eval(this.CellCoordinatesSECell)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.ObjectBoundsMin)) return false;
            if (!eval(this.ObjectBoundsMax)) return false;
            if (!eval(this.Music)) return false;
            if (!eval(this.OffsetData)) return false;
            if (Road != null)
            {
                if (!eval(this.Road.Overall)) return false;
                if (this.Road.Specific != null && !this.Road.Specific.AllEqual(eval)) return false;
            }
            if (TopCell != null)
            {
                if (!eval(this.TopCell.Overall)) return false;
                if (this.TopCell.Specific != null && !this.TopCell.Specific.AllEqual(eval)) return false;
            }
            if (this.SubCells != null)
            {
                if (!eval(this.SubCells.Overall)) return false;
                if (this.SubCells.Specific != null)
                {
                    foreach (var item in this.SubCells.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Worldspace_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Worldspace_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Worldspace_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Climate = eval(this.Climate);
            obj.Water = eval(this.Water);
            obj.Icon = eval(this.Icon);
            obj.UsableDimensions = eval(this.UsableDimensions);
            obj.CellCoordinatesNWCell = eval(this.CellCoordinatesNWCell);
            obj.CellCoordinatesSECell = eval(this.CellCoordinatesSECell);
            obj.Flags = eval(this.Flags);
            obj.ObjectBoundsMin = eval(this.ObjectBoundsMin);
            obj.ObjectBoundsMax = eval(this.ObjectBoundsMax);
            obj.Music = eval(this.Music);
            obj.OffsetData = eval(this.OffsetData);
            if (this.Road != null)
            {
                obj.Road = new MaskItem<R, Road_Mask<R>>();
                obj.Road.Overall = eval(this.Road.Overall);
                if (this.Road.Specific != null)
                {
                    obj.Road.Specific = this.Road.Specific.Translate(eval);
                }
            }
            if (this.TopCell != null)
            {
                obj.TopCell = new MaskItem<R, Cell_Mask<R>>();
                obj.TopCell.Overall = eval(this.TopCell.Overall);
                if (this.TopCell.Specific != null)
                {
                    obj.TopCell.Specific = this.TopCell.Specific.Translate(eval);
                }
            }
            if (SubCells != null)
            {
                obj.SubCells = new MaskItem<R, IEnumerable<MaskItem<R, WorldspaceBlock_Mask<R>>>>();
                obj.SubCells.Overall = eval(this.SubCells.Overall);
                if (SubCells.Specific != null)
                {
                    List<MaskItem<R, WorldspaceBlock_Mask<R>>> l = new List<MaskItem<R, WorldspaceBlock_Mask<R>>>();
                    obj.SubCells.Specific = l;
                    foreach (var item in SubCells.Specific)
                    {
                        MaskItem<R, WorldspaceBlock_Mask<R>> mask = default(MaskItem<R, WorldspaceBlock_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, WorldspaceBlock_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.SubCells.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Worldspace_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Worldspace_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Worldspace_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Climate ?? true)
                {
                    fg.AppendLine($"Climate => {Climate}");
                }
                if (printMask?.Water ?? true)
                {
                    fg.AppendLine($"Water => {Water}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.UsableDimensions ?? true)
                {
                    fg.AppendLine($"UsableDimensions => {UsableDimensions}");
                }
                if (printMask?.CellCoordinatesNWCell ?? true)
                {
                    fg.AppendLine($"CellCoordinatesNWCell => {CellCoordinatesNWCell}");
                }
                if (printMask?.CellCoordinatesSECell ?? true)
                {
                    fg.AppendLine($"CellCoordinatesSECell => {CellCoordinatesSECell}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.ObjectBoundsMin ?? true)
                {
                    fg.AppendLine($"ObjectBoundsMin => {ObjectBoundsMin}");
                }
                if (printMask?.ObjectBoundsMax ?? true)
                {
                    fg.AppendLine($"ObjectBoundsMax => {ObjectBoundsMax}");
                }
                if (printMask?.Music ?? true)
                {
                    fg.AppendLine($"Music => {Music}");
                }
                if (printMask?.OffsetData ?? true)
                {
                    fg.AppendLine($"OffsetData => {OffsetData}");
                }
                if (printMask?.Road?.Overall ?? true)
                {
                    Road?.ToString(fg);
                }
                if (printMask?.TopCell?.Overall ?? true)
                {
                    TopCell?.ToString(fg);
                }
                if (printMask?.SubCells?.Overall ?? true)
                {
                    fg.AppendLine("SubCells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (SubCells.Overall != null)
                        {
                            fg.AppendLine(SubCells.Overall.ToString());
                        }
                        if (SubCells.Specific != null)
                        {
                            foreach (var subItem in SubCells.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Worldspace_ErrorMask : NamedMajorRecord_ErrorMask, IErrorMask<Worldspace_ErrorMask>
    {
        #region Members
        public Exception Climate;
        public Exception Water;
        public Exception Icon;
        public Exception UsableDimensions;
        public Exception CellCoordinatesNWCell;
        public Exception CellCoordinatesSECell;
        public Exception Flags;
        public Exception ObjectBoundsMin;
        public Exception ObjectBoundsMax;
        public Exception Music;
        public Exception OffsetData;
        public MaskItem<Exception, Road_ErrorMask> Road;
        public MaskItem<Exception, Cell_ErrorMask> TopCell;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, WorldspaceBlock_ErrorMask>>> SubCells;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Climate:
                    this.Climate = ex;
                    break;
                case Worldspace_FieldIndex.Water:
                    this.Water = ex;
                    break;
                case Worldspace_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Worldspace_FieldIndex.UsableDimensions:
                    this.UsableDimensions = ex;
                    break;
                case Worldspace_FieldIndex.CellCoordinatesNWCell:
                    this.CellCoordinatesNWCell = ex;
                    break;
                case Worldspace_FieldIndex.CellCoordinatesSECell:
                    this.CellCoordinatesSECell = ex;
                    break;
                case Worldspace_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    this.ObjectBoundsMin = ex;
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    this.ObjectBoundsMax = ex;
                    break;
                case Worldspace_FieldIndex.Music:
                    this.Music = ex;
                    break;
                case Worldspace_FieldIndex.OffsetData:
                    this.OffsetData = ex;
                    break;
                case Worldspace_FieldIndex.Road:
                    this.Road = new MaskItem<Exception, Road_ErrorMask>(ex, null);
                    break;
                case Worldspace_FieldIndex.TopCell:
                    this.TopCell = new MaskItem<Exception, Cell_ErrorMask>(ex, null);
                    break;
                case Worldspace_FieldIndex.SubCells:
                    this.SubCells = new MaskItem<Exception, IEnumerable<MaskItem<Exception, WorldspaceBlock_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Climate:
                    this.Climate = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.Water:
                    this.Water = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.UsableDimensions:
                    this.UsableDimensions = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.CellCoordinatesNWCell:
                    this.CellCoordinatesNWCell = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.CellCoordinatesSECell:
                    this.CellCoordinatesSECell = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    this.ObjectBoundsMin = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    this.ObjectBoundsMax = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.Music:
                    this.Music = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.OffsetData:
                    this.OffsetData = (Exception)obj;
                    break;
                case Worldspace_FieldIndex.Road:
                    this.Road = (MaskItem<Exception, Road_ErrorMask>)obj;
                    break;
                case Worldspace_FieldIndex.TopCell:
                    this.TopCell = (MaskItem<Exception, Cell_ErrorMask>)obj;
                    break;
                case Worldspace_FieldIndex.SubCells:
                    this.SubCells = (MaskItem<Exception, IEnumerable<MaskItem<Exception, WorldspaceBlock_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Climate != null) return true;
            if (Water != null) return true;
            if (Icon != null) return true;
            if (UsableDimensions != null) return true;
            if (CellCoordinatesNWCell != null) return true;
            if (CellCoordinatesSECell != null) return true;
            if (Flags != null) return true;
            if (ObjectBoundsMin != null) return true;
            if (ObjectBoundsMax != null) return true;
            if (Music != null) return true;
            if (OffsetData != null) return true;
            if (Road != null) return true;
            if (TopCell != null) return true;
            if (SubCells != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Worldspace_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Climate => {Climate}");
            fg.AppendLine($"Water => {Water}");
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"UsableDimensions => {UsableDimensions}");
            fg.AppendLine($"CellCoordinatesNWCell => {CellCoordinatesNWCell}");
            fg.AppendLine($"CellCoordinatesSECell => {CellCoordinatesSECell}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"ObjectBoundsMin => {ObjectBoundsMin}");
            fg.AppendLine($"ObjectBoundsMax => {ObjectBoundsMax}");
            fg.AppendLine($"Music => {Music}");
            fg.AppendLine($"OffsetData => {OffsetData}");
            Road?.ToString(fg);
            TopCell?.ToString(fg);
            fg.AppendLine("SubCells =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (SubCells.Overall != null)
                {
                    fg.AppendLine(SubCells.Overall.ToString());
                }
                if (SubCells.Specific != null)
                {
                    foreach (var subItem in SubCells.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Worldspace_ErrorMask Combine(Worldspace_ErrorMask rhs)
        {
            var ret = new Worldspace_ErrorMask();
            ret.Climate = this.Climate.Combine(rhs.Climate);
            ret.Water = this.Water.Combine(rhs.Water);
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.UsableDimensions = this.UsableDimensions.Combine(rhs.UsableDimensions);
            ret.CellCoordinatesNWCell = this.CellCoordinatesNWCell.Combine(rhs.CellCoordinatesNWCell);
            ret.CellCoordinatesSECell = this.CellCoordinatesSECell.Combine(rhs.CellCoordinatesSECell);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.ObjectBoundsMin = this.ObjectBoundsMin.Combine(rhs.ObjectBoundsMin);
            ret.ObjectBoundsMax = this.ObjectBoundsMax.Combine(rhs.ObjectBoundsMax);
            ret.Music = this.Music.Combine(rhs.Music);
            ret.OffsetData = this.OffsetData.Combine(rhs.OffsetData);
            ret.Road = new MaskItem<Exception, Road_ErrorMask>(this.Road.Overall.Combine(rhs.Road.Overall), ((IErrorMask<Road_ErrorMask>)this.Road.Specific).Combine(rhs.Road.Specific));
            ret.TopCell = new MaskItem<Exception, Cell_ErrorMask>(this.TopCell.Overall.Combine(rhs.TopCell.Overall), ((IErrorMask<Cell_ErrorMask>)this.TopCell.Specific).Combine(rhs.TopCell.Specific));
            ret.SubCells = new MaskItem<Exception, IEnumerable<MaskItem<Exception, WorldspaceBlock_ErrorMask>>>(this.SubCells.Overall.Combine(rhs.SubCells.Overall), new List<MaskItem<Exception, WorldspaceBlock_ErrorMask>>(this.SubCells.Specific.And(rhs.SubCells.Specific)));
            return ret;
        }
        public static Worldspace_ErrorMask Combine(Worldspace_ErrorMask lhs, Worldspace_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Worldspace_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public bool Climate;
        public bool Water;
        public bool Icon;
        public bool UsableDimensions;
        public bool CellCoordinatesNWCell;
        public bool CellCoordinatesSECell;
        public bool Flags;
        public bool ObjectBoundsMin;
        public bool ObjectBoundsMax;
        public bool Music;
        public bool OffsetData;
        public MaskItem<CopyOption, Road_CopyMask> Road;
        public MaskItem<CopyOption, Cell_CopyMask> TopCell;
        public MaskItem<CopyOption, WorldspaceBlock_CopyMask> SubCells;
        #endregion

    }
    #endregion




    #endregion

}
