/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ModHeader :
        LoquiNotifyingObject,
        IModHeader,
        ILoquiObjectSetter<ModHeader>,
        IEquatable<ModHeader>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ModHeader_Registration.Instance;
        public static ModHeader_Registration Registration => ModHeader_Registration.Instance;
        protected object CommonInstance => ModHeaderCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        public ModHeader()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Fluff
        private Byte[] _Fluff = new byte[12];
        public Byte[] Fluff
        {
            get => _Fluff;
            set
            {
                this._Fluff = value;
                if (value == null)
                {
                    this._Fluff = new byte[12];
                }
            }
        }
        ReadOnlySpan<Byte> IModHeaderGetter.Fluff => this.Fluff;
        #endregion
        #region Stats
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ModStats _Stats = new ModStats();
        public ModStats Stats
        {
            get => _Stats;
            set => _Stats = value ?? new ModStats();
        }
        IModStatsGetter IModHeaderGetter.Stats => _Stats;
        #endregion
        #region TypeOffsets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool TypeOffsets_IsSet
        {
            get => _hasBeenSetTracker[(int)ModHeader_FieldIndex.TypeOffsets];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)ModHeader_FieldIndex.TypeOffsets, nameof(TypeOffsets_IsSet));
        }
        bool IModHeaderGetter.TypeOffsets_IsSet => TypeOffsets_IsSet;
        protected Byte[] _TypeOffsets;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] TypeOffsets
        {
            get => this._TypeOffsets;
            set => TypeOffsets_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IModHeaderGetter.TypeOffsets => this.TypeOffsets;
        public void TypeOffsets_Set(
            Byte[] value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _TypeOffsets, value, _hasBeenSetTracker, markSet, (int)ModHeader_FieldIndex.TypeOffsets, nameof(TypeOffsets), nameof(TypeOffsets_IsSet));
        }
        public void TypeOffsets_Unset()
        {
            this.TypeOffsets_Set(default(Byte[]), false);
        }
        #endregion
        #region Deleted
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool Deleted_IsSet
        {
            get => _hasBeenSetTracker[(int)ModHeader_FieldIndex.Deleted];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)ModHeader_FieldIndex.Deleted, nameof(Deleted_IsSet));
        }
        bool IModHeaderGetter.Deleted_IsSet => Deleted_IsSet;
        protected Byte[] _Deleted;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Deleted
        {
            get => this._Deleted;
            set => Deleted_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IModHeaderGetter.Deleted => this.Deleted;
        public void Deleted_Set(
            Byte[] value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Deleted, value, _hasBeenSetTracker, markSet, (int)ModHeader_FieldIndex.Deleted, nameof(Deleted), nameof(Deleted_IsSet));
        }
        public void Deleted_Unset()
        {
            this.Deleted_Set(default(Byte[]), false);
        }
        #endregion
        #region Author
        public bool Author_IsSet
        {
            get => _hasBeenSetTracker[(int)ModHeader_FieldIndex.Author];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)ModHeader_FieldIndex.Author, nameof(Author_IsSet));
        }
        bool IModHeaderGetter.Author_IsSet => Author_IsSet;
        private String _Author;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Author
        {
            get => this._Author;
            set => Author_Set(value);
        }
        String IModHeaderGetter.Author => this.Author;
        public void Author_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Author, value, _hasBeenSetTracker, markSet, (int)ModHeader_FieldIndex.Author, nameof(Author), nameof(Author_IsSet));
        }
        public void Author_Unset()
        {
            this.Author_Set(default(String), false);
        }
        #endregion
        #region Description
        public bool Description_IsSet
        {
            get => _hasBeenSetTracker[(int)ModHeader_FieldIndex.Description];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)ModHeader_FieldIndex.Description, nameof(Description_IsSet));
        }
        bool IModHeaderGetter.Description_IsSet => Description_IsSet;
        private String _Description;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Description
        {
            get => this._Description;
            set => Description_Set(value);
        }
        String IModHeaderGetter.Description => this.Description;
        public void Description_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Description, value, _hasBeenSetTracker, markSet, (int)ModHeader_FieldIndex.Description, nameof(Description), nameof(Description_IsSet));
        }
        public void Description_Unset()
        {
            this.Description_Set(default(String), false);
        }
        #endregion
        #region MasterReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<MasterReference> _MasterReferences = new SourceSetList<MasterReference>();
        public ISourceSetList<MasterReference> MasterReferences => _MasterReferences;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<MasterReference> IModHeader.MasterReferences => _MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IMasterReferenceGetter> IModHeaderGetter.MasterReferences => _MasterReferences;
        #endregion

        #endregion
        #region VestigialData
        public bool VestigialData_IsSet
        {
            get => _hasBeenSetTracker[(int)ModHeader_FieldIndex.VestigialData];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)ModHeader_FieldIndex.VestigialData, nameof(VestigialData_IsSet));
        }
        bool IModHeaderGetter.VestigialData_IsSet => VestigialData_IsSet;
        private UInt64 _VestigialData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt64 VestigialData
        {
            get => this._VestigialData;
            set => VestigialData_Set(value);
        }
        UInt64 IModHeaderGetter.VestigialData => this.VestigialData;
        public void VestigialData_Set(
            UInt64 value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _VestigialData, value, _hasBeenSetTracker, markSet, (int)ModHeader_FieldIndex.VestigialData, nameof(VestigialData), nameof(VestigialData_IsSet));
        }
        public void VestigialData_Unset()
        {
            this.VestigialData_Set(default(UInt64), false);
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IModHeaderGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ModHeaderMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IModHeaderGetter rhs)) return false;
            return ((ModHeaderCommon)this.CommonInstance).Equals(this, rhs);
        }

        public bool Equals(ModHeader obj)
        {
            return ((ModHeaderCommon)this.CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((ModHeaderCommon)this.CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => ModHeaderXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static ModHeader CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ModHeader_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ModHeader CreateFromXml(
            XElement node,
            out ModHeader_ErrorMask errorMask,
            bool doMasks = true,
            ModHeader_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ModHeader_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ModHeader CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new ModHeader() : null;
                    break;
                default:
                    break;
            }
            var ret = new ModHeader();
            try
            {
                foreach (var elem in node.Elements())
                {
                    ModHeaderXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ModHeader CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            ModHeader_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ModHeader CreateFromXml(
            string path,
            out ModHeader_ErrorMask errorMask,
            ModHeader_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ModHeader CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            ModHeader_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ModHeader CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ModHeader_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ModHeader CreateFromXml(
            Stream stream,
            out ModHeader_ErrorMask errorMask,
            ModHeader_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ModHeader CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ModHeader_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ModHeader_FieldIndex)index)
            {
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.VestigialData:
                    return _hasBeenSetTracker[index];
                case ModHeader_FieldIndex.MasterReferences:
                    return MasterReferences.HasBeenSet;
                case ModHeader_FieldIndex.Fluff:
                case ModHeader_FieldIndex.Stats:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = ModHeader_Registration.TRIGGERING_RECORD_TYPE;
        public async Task WriteToXmlFolder(
            DirectoryPath? dir,
            string name,
            XElement node,
            int counter,
            ErrorMaskBuilder errorMask)
        {
            this.WriteToXml(
                node: node,
                errorMask: errorMask,
                translationMask: null);
        }
        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => ModHeaderBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        #region Binary Create
        [DebuggerStepThrough]
        public static ModHeader CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ModHeader CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out ModHeader_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ModHeader_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ModHeader CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ModHeader();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseRecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(ModHeader_Registration.TES4_HEADER)));
            UtilityTranslation.RecordParse(
                record: ret,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            ModHeader item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.SpawnWithLength(12),
                item: out Byte[] FluffParse))
            {
                item.Fluff = FluffParse;
            }
            else
            {
                item.Fluff = default(Byte[]);
            }
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            ModHeader item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x52444548: // HEDR
                {
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.Stats);
                        item.Stats = Mutagen.Bethesda.Oblivion.ModStats.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Stats);
                }
                case 0x5453464F: // OFST
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] TypeOffsetsParse))
                    {
                        item.TypeOffsets = TypeOffsetsParse;
                    }
                    else
                    {
                        item.TypeOffsets = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.TypeOffsets);
                }
                case 0x454C4544: // DELE
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] DeletedParse))
                    {
                        item.Deleted = DeletedParse;
                    }
                    else
                    {
                        item.Deleted = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Deleted);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String AuthorParse))
                    {
                        item.Author = AuthorParse;
                    }
                    else
                    {
                        item.Author = default(String);
                    }
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Author);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String DescriptionParse))
                    {
                        item.Description = DescriptionParse;
                    }
                    else
                    {
                        item.Description = default(String);
                    }
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Description);
                }
                case 0x5453414D: // MAST
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<MasterReference>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: ModHeader_Registration.MAST_HEADER,
                        item: item.MasterReferences,
                        fieldIndex: (int)ModHeader_FieldIndex.MasterReferences,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out MasterReference listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<MasterReference>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.MasterReferences);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    item.VestigialData = frame.ReadUInt64();
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.VestigialData);
                }
                default:
                    errorMask?.ReportWarning($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
                    frame.Position += contentLength + Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    return TryGet<int?>.Succeed(null);
            }
        }

        #endregion

        public ModHeader Copy(
            ModHeader_CopyMask copyMask = null,
            ModHeader def = null)
        {
            return ModHeader.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ModHeader Copy(
            ModHeader item,
            ModHeader_CopyMask copyMask = null,
            ModHeader def = null)
        {
            ModHeader ret;
            if (item.GetType().Equals(typeof(ModHeader)))
            {
                ret = new ModHeader();
            }
            else
            {
                ret = (ModHeader)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static ModHeader Copy_ToLoqui(
            ModHeader item,
            ModHeader_CopyMask copyMask = null,
            ModHeader def = null)
        {
            ModHeader ret;
            if (item.GetType().Equals(typeof(ModHeader)))
            {
                ret = new ModHeader() as ModHeader;
            }
            else
            {
                ret = (ModHeader)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(ModHeader rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ModHeader rhs,
            ModHeader_CopyMask copyMask,
            ModHeader def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ModHeader rhs,
            out ModHeader_ErrorMask errorMask,
            ModHeader_CopyMask copyMask = null,
            ModHeader def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ModHeaderCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = ModHeader_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ModHeader rhs,
            ErrorMaskBuilder errorMask,
            ModHeader_CopyMask copyMask = null,
            ModHeader def = null)
        {
            ModHeaderCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Fluff:
                    this.Fluff = (Byte[])obj;
                    break;
                case ModHeader_FieldIndex.Stats:
                    this.Stats = (ModStats)obj;
                    break;
                case ModHeader_FieldIndex.TypeOffsets:
                    this.TypeOffsets = (Byte[])obj;
                    break;
                case ModHeader_FieldIndex.Deleted:
                    this.Deleted = (Byte[])obj;
                    break;
                case ModHeader_FieldIndex.Author:
                    this.Author = (String)obj;
                    break;
                case ModHeader_FieldIndex.Description:
                    this.Description = (String)obj;
                    break;
                case ModHeader_FieldIndex.MasterReferences:
                    this._MasterReferences.SetTo((SourceSetList<MasterReference>)obj);
                    break;
                case ModHeader_FieldIndex.VestigialData:
                    this.VestigialData = (UInt64)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            ModHeaderCommon.Instance.Clear(this);
        }

        public static ModHeader Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new ModHeader();
            foreach (var pair in fields)
            {
                CopyInInternal_ModHeader(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_ModHeader(ModHeader obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ModHeader_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case ModHeader_FieldIndex.Fluff:
                    obj.Fluff = (Byte[])pair.Value;
                    break;
                case ModHeader_FieldIndex.Stats:
                    obj.Stats = (ModStats)pair.Value;
                    break;
                case ModHeader_FieldIndex.TypeOffsets:
                    obj.TypeOffsets = (Byte[])pair.Value;
                    break;
                case ModHeader_FieldIndex.Deleted:
                    obj.Deleted = (Byte[])pair.Value;
                    break;
                case ModHeader_FieldIndex.Author:
                    obj.Author = (String)pair.Value;
                    break;
                case ModHeader_FieldIndex.Description:
                    obj.Description = (String)pair.Value;
                    break;
                case ModHeader_FieldIndex.MasterReferences:
                    obj._MasterReferences.SetTo((SourceSetList<MasterReference>)pair.Value);
                    break;
                case ModHeader_FieldIndex.VestigialData:
                    obj.VestigialData = (UInt64)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IModHeader :
        IModHeaderGetter,
        ILoquiObjectSetter<IModHeader>
    {
        new Byte[] Fluff { get; set; }

        new ModStats Stats { get; set; }

        new Byte[] TypeOffsets { get; set; }
        new bool TypeOffsets_IsSet { get; set; }
        void TypeOffsets_Set(Byte[] value, bool hasBeenSet = true);
        void TypeOffsets_Unset();

        new Byte[] Deleted { get; set; }
        new bool Deleted_IsSet { get; set; }
        void Deleted_Set(Byte[] value, bool hasBeenSet = true);
        void Deleted_Unset();

        new String Author { get; set; }
        new bool Author_IsSet { get; set; }
        void Author_Set(String value, bool hasBeenSet = true);
        void Author_Unset();

        new String Description { get; set; }
        new bool Description_IsSet { get; set; }
        void Description_Set(String value, bool hasBeenSet = true);
        void Description_Unset();

        new ISetList<MasterReference> MasterReferences { get; }
        new UInt64 VestigialData { get; set; }
        new bool VestigialData_IsSet { get; set; }
        void VestigialData_Set(UInt64 value, bool hasBeenSet = true);
        void VestigialData_Unset();

        void CopyFieldsFrom(
            ModHeader rhs,
            ErrorMaskBuilder errorMask = null,
            ModHeader_CopyMask copyMask = null,
            ModHeader def = null);
    }

    public partial interface IModHeaderGetter :
        ILoquiObject,
        ILoquiObject<IModHeaderGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Fluff
        ReadOnlySpan<Byte> Fluff { get; }

        #endregion
        #region Stats
        IModStatsGetter Stats { get; }

        #endregion
        #region TypeOffsets
        ReadOnlySpan<Byte> TypeOffsets { get; }
        bool TypeOffsets_IsSet { get; }

        #endregion
        #region Deleted
        ReadOnlySpan<Byte> Deleted { get; }
        bool Deleted_IsSet { get; }

        #endregion
        #region Author
        String Author { get; }
        bool Author_IsSet { get; }

        #endregion
        #region Description
        String Description { get; }
        bool Description_IsSet { get; }

        #endregion
        #region MasterReferences
        IReadOnlySetList<IMasterReferenceGetter> MasterReferences { get; }
        #endregion
        #region VestigialData
        UInt64 VestigialData { get; }
        bool VestigialData_IsSet { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class ModHeaderMixIn
    {
        public static void Clear(this IModHeader item)
        {
            ((ModHeaderCommon)item.CommonInstance).Clear(item: item);
        }

        public static ModHeader_Mask<bool> GetEqualsMask(
            this IModHeaderGetter item,
            IModHeaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ModHeaderCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IModHeaderGetter item,
            string name = null,
            ModHeader_Mask<bool> printMask = null)
        {
            return ((ModHeaderCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IModHeaderGetter item,
            FileGeneration fg,
            string name = null,
            ModHeader_Mask<bool> printMask = null)
        {
            ((ModHeaderCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IModHeaderGetter item,
            ModHeader_Mask<bool?> checkMask)
        {
            return ((ModHeaderCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ModHeader_Mask<bool> GetHasBeenSetMask(this IModHeaderGetter item)
        {
            var ret = new ModHeader_Mask<bool>();
            ((ModHeaderCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IModHeaderGetter item,
            IModHeaderGetter rhs)
        {
            return ((ModHeaderCommon)item.CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ModHeader_FieldIndex
    {
        Fluff = 0,
        Stats = 1,
        TypeOffsets = 2,
        Deleted = 3,
        Author = 4,
        Description = 5,
        MasterReferences = 6,
        VestigialData = 7,
    }
    #endregion

    #region Registration
    public class ModHeader_Registration : ILoquiRegistration
    {
        public static readonly ModHeader_Registration Instance = new ModHeader_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 2,
            version: 0);

        public const string GUID = "d26d9f2a-53af-4c45-9490-dfdb377b6655";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(ModHeader_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ModHeader_ErrorMask);

        public static readonly Type ClassType = typeof(ModHeader);

        public static readonly Type GetterType = typeof(IModHeaderGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IModHeader);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(ModHeaderCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.ModHeader";

        public const string Name = "ModHeader";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLUFF":
                    return (ushort)ModHeader_FieldIndex.Fluff;
                case "STATS":
                    return (ushort)ModHeader_FieldIndex.Stats;
                case "TYPEOFFSETS":
                    return (ushort)ModHeader_FieldIndex.TypeOffsets;
                case "DELETED":
                    return (ushort)ModHeader_FieldIndex.Deleted;
                case "AUTHOR":
                    return (ushort)ModHeader_FieldIndex.Author;
                case "DESCRIPTION":
                    return (ushort)ModHeader_FieldIndex.Description;
                case "MASTERREFERENCES":
                    return (ushort)ModHeader_FieldIndex.MasterReferences;
                case "VESTIGIALDATA":
                    return (ushort)ModHeader_FieldIndex.VestigialData;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.MasterReferences:
                    return true;
                case ModHeader_FieldIndex.Fluff:
                case ModHeader_FieldIndex.Stats:
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.VestigialData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Stats:
                case ModHeader_FieldIndex.MasterReferences:
                    return true;
                case ModHeader_FieldIndex.Fluff:
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.VestigialData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Fluff:
                case ModHeader_FieldIndex.Stats:
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.MasterReferences:
                case ModHeader_FieldIndex.VestigialData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Fluff:
                    return "Fluff";
                case ModHeader_FieldIndex.Stats:
                    return "Stats";
                case ModHeader_FieldIndex.TypeOffsets:
                    return "TypeOffsets";
                case ModHeader_FieldIndex.Deleted:
                    return "Deleted";
                case ModHeader_FieldIndex.Author:
                    return "Author";
                case ModHeader_FieldIndex.Description:
                    return "Description";
                case ModHeader_FieldIndex.MasterReferences:
                    return "MasterReferences";
                case ModHeader_FieldIndex.VestigialData:
                    return "VestigialData";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Fluff:
                case ModHeader_FieldIndex.Stats:
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.MasterReferences:
                case ModHeader_FieldIndex.VestigialData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Fluff:
                case ModHeader_FieldIndex.Stats:
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.MasterReferences:
                case ModHeader_FieldIndex.VestigialData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case ModHeader_FieldIndex.Stats:
                    return typeof(ModStats);
                case ModHeader_FieldIndex.TypeOffsets:
                    return typeof(Byte[]);
                case ModHeader_FieldIndex.Deleted:
                    return typeof(Byte[]);
                case ModHeader_FieldIndex.Author:
                    return typeof(String);
                case ModHeader_FieldIndex.Description:
                    return typeof(String);
                case ModHeader_FieldIndex.MasterReferences:
                    return typeof(SourceSetList<MasterReference>);
                case ModHeader_FieldIndex.VestigialData:
                    return typeof(UInt64);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ModHeaderXmlWriteTranslation);
        public static readonly RecordType TES4_HEADER = new RecordType("TES4");
        public static readonly RecordType HEDR_HEADER = new RecordType("HEDR");
        public static readonly RecordType OFST_HEADER = new RecordType("OFST");
        public static readonly RecordType DELE_HEADER = new RecordType("DELE");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType MAST_HEADER = new RecordType("MAST");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = TES4_HEADER;
        public const int NumStructFields = 1;
        public const int NumTypedFields = 7;
        public static readonly Type BinaryWriteTranslation = typeof(ModHeaderBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ModHeaderCommon
    {
        public static readonly ModHeaderCommon Instance = new ModHeaderCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            ModHeader item,
            ModHeader rhs,
            ModHeader def,
            ErrorMaskBuilder errorMask,
            ModHeader_CopyMask copyMask)
        {
            if (copyMask?.Fluff ?? true)
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.Fluff);
                try
                {
                    item.Fluff = rhs.Fluff;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Stats.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.Stats);
                try
                {
                    switch (copyMask?.Stats?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.Stats = Utility.GetGetterInterfaceReference<ModStats>(rhs.Stats);
                            break;
                        case CopyOption.CopyIn:
                            ModStatsCommon.CopyFieldsFrom(
                                item: item.Stats,
                                rhs: rhs.Stats,
                                def: def?.Stats,
                                errorMask: errorMask,
                                copyMask: copyMask?.Stats.Specific);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.Stats == null)
                            {
                                item.Stats = null;
                            }
                            else
                            {
                                item.Stats = ModStats.Copy(
                                    rhs.Stats,
                                    copyMask?.Stats?.Specific,
                                    def?.Stats);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.Stats?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.TypeOffsets ?? true)
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.TypeOffsets);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.TypeOffsets,
                        rhsHasBeenSet: rhs.TypeOffsets_IsSet,
                        defItem: def?.TypeOffsets ?? default(Byte[]),
                        defHasBeenSet: def?.TypeOffsets_IsSet ?? false,
                        outRhsItem: out var rhsTypeOffsetsItem,
                        outDefItem: out var defTypeOffsetsItem))
                    {
                        item.TypeOffsets = rhsTypeOffsetsItem;
                    }
                    else
                    {
                        item.TypeOffsets_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Deleted ?? true)
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.Deleted);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Deleted,
                        rhsHasBeenSet: rhs.Deleted_IsSet,
                        defItem: def?.Deleted ?? default(Byte[]),
                        defHasBeenSet: def?.Deleted_IsSet ?? false,
                        outRhsItem: out var rhsDeletedItem,
                        outDefItem: out var defDeletedItem))
                    {
                        item.Deleted = rhsDeletedItem;
                    }
                    else
                    {
                        item.Deleted_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Author ?? true)
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.Author);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Author,
                        rhsHasBeenSet: rhs.Author_IsSet,
                        defItem: def?.Author ?? default(String),
                        defHasBeenSet: def?.Author_IsSet ?? false,
                        outRhsItem: out var rhsAuthorItem,
                        outDefItem: out var defAuthorItem))
                    {
                        item.Author = rhsAuthorItem;
                    }
                    else
                    {
                        item.Author_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Description ?? true)
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.Description);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Description,
                        rhsHasBeenSet: rhs.Description_IsSet,
                        defItem: def?.Description ?? default(String),
                        defHasBeenSet: def?.Description_IsSet ?? false,
                        outRhsItem: out var rhsDescriptionItem,
                        outDefItem: out var defDescriptionItem))
                    {
                        item.Description = rhsDescriptionItem;
                    }
                    else
                    {
                        item.Description_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MasterReferences.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.MasterReferences);
                try
                {
                    item.MasterReferences.SetToWithDefault<MasterReference, MasterReference>(
                        rhs: rhs.MasterReferences,
                        def: def?.MasterReferences,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.MasterReferences.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (MasterReference)r;
                                case CopyOption.MakeCopy:
                                    return MasterReference.Copy(
                                        r,
                                        copyMask?.MasterReferences?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.MasterReferences.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.VestigialData ?? true)
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.VestigialData);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.VestigialData,
                        rhsHasBeenSet: rhs.VestigialData_IsSet,
                        defItem: def?.VestigialData ?? default(UInt64),
                        defHasBeenSet: def?.VestigialData_IsSet ?? false,
                        outRhsItem: out var rhsVestigialDataItem,
                        outDefItem: out var defVestigialDataItem))
                    {
                        item.VestigialData = rhsVestigialDataItem;
                    }
                    else
                    {
                        item.VestigialData_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IModHeader item)
        {
            ClearPartial();
            item.Fluff = default(Byte[]);
            item.Stats = default(ModStats);
            item.TypeOffsets_Unset();
            item.Deleted_Unset();
            item.Author_Unset();
            item.Description_Unset();
            item.MasterReferences.Unset();
            item.VestigialData_Unset();
        }

        public ModHeader_Mask<bool> GetEqualsMask(
            IModHeaderGetter item,
            IModHeaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ModHeader_Mask<bool>();
            ((ModHeaderCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IModHeaderGetter item,
            IModHeaderGetter rhs,
            ModHeader_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Fluff = MemoryExtensions.SequenceEqual(item.Fluff, rhs.Fluff);
            ret.Stats = MaskItemExt.Factory(item.Stats.GetEqualsMask(rhs.Stats, include), include);
            ret.TypeOffsets = item.TypeOffsets_IsSet == rhs.TypeOffsets_IsSet && MemoryExtensions.SequenceEqual(item.TypeOffsets, rhs.TypeOffsets);
            ret.Deleted = item.Deleted_IsSet == rhs.Deleted_IsSet && MemoryExtensions.SequenceEqual(item.Deleted, rhs.Deleted);
            ret.Author = item.Author_IsSet == rhs.Author_IsSet && string.Equals(item.Author, rhs.Author);
            ret.Description = item.Description_IsSet == rhs.Description_IsSet && string.Equals(item.Description, rhs.Description);
            ret.MasterReferences = item.MasterReferences.CollectionEqualsHelper(
                rhs.MasterReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.VestigialData = item.VestigialData_IsSet == rhs.VestigialData_IsSet && item.VestigialData == rhs.VestigialData;
        }

        public string ToString(
            IModHeaderGetter item,
            string name = null,
            ModHeader_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IModHeaderGetter item,
            FileGeneration fg,
            string name = null,
            ModHeader_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ModHeader =>");
            }
            else
            {
                fg.AppendLine($"{name} (ModHeader) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IModHeaderGetter item,
            FileGeneration fg,
            ModHeader_Mask<bool> printMask = null)
        {
            if (printMask?.Fluff ?? true)
            {
                fg.AppendLine($"Fluff => {SpanExt.ToHexString(item.Fluff)}");
            }
            if (printMask?.Stats?.Overall ?? true)
            {
                item.Stats?.ToString(fg, "Stats");
            }
            if (printMask?.TypeOffsets ?? true)
            {
                fg.AppendLine($"TypeOffsets => {SpanExt.ToHexString(item.TypeOffsets)}");
            }
            if (printMask?.Deleted ?? true)
            {
                fg.AppendLine($"Deleted => {SpanExt.ToHexString(item.Deleted)}");
            }
            if (printMask?.Author ?? true)
            {
                fg.AppendLine($"Author => {item.Author}");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendLine($"Description => {item.Description}");
            }
            if (printMask?.MasterReferences?.Overall ?? true)
            {
                fg.AppendLine("MasterReferences =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.MasterReferences)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.VestigialData ?? true)
            {
                fg.AppendLine($"VestigialData => {item.VestigialData}");
            }
        }

        public bool HasBeenSet(
            IModHeaderGetter item,
            ModHeader_Mask<bool?> checkMask)
        {
            if (checkMask.TypeOffsets.HasValue && checkMask.TypeOffsets.Value != item.TypeOffsets_IsSet) return false;
            if (checkMask.Deleted.HasValue && checkMask.Deleted.Value != item.Deleted_IsSet) return false;
            if (checkMask.Author.HasValue && checkMask.Author.Value != item.Author_IsSet) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_IsSet) return false;
            if (checkMask.MasterReferences.Overall.HasValue && checkMask.MasterReferences.Overall.Value != item.MasterReferences.HasBeenSet) return false;
            if (checkMask.VestigialData.HasValue && checkMask.VestigialData.Value != item.VestigialData_IsSet) return false;
            return true;
        }

        public void FillHasBeenSetMask(
            IModHeaderGetter item,
            ModHeader_Mask<bool> mask)
        {
            mask.Fluff = true;
            mask.Stats = new MaskItem<bool, ModStats_Mask<bool>>(true, item.Stats.GetHasBeenSetMask());
            mask.TypeOffsets = item.TypeOffsets_IsSet;
            mask.Deleted = item.Deleted_IsSet;
            mask.Author = item.Author_IsSet;
            mask.Description = item.Description_IsSet;
            mask.MasterReferences = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, MasterReference_Mask<bool>>>>(item.MasterReferences.HasBeenSet, item.MasterReferences.WithIndex().Select((i) => new MaskItemIndexed<bool, MasterReference_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.VestigialData = item.VestigialData_IsSet;
        }

        #region Equals and Hash
        public virtual bool Equals(
            IModHeaderGetter lhs,
            IModHeaderGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(lhs.Stats, rhs.Stats)) return false;
            if (lhs.TypeOffsets_IsSet != rhs.TypeOffsets_IsSet) return false;
            if (lhs.TypeOffsets_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.TypeOffsets, rhs.TypeOffsets)) return false;
            }
            if (lhs.Deleted_IsSet != rhs.Deleted_IsSet) return false;
            if (lhs.Deleted_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Deleted, rhs.Deleted)) return false;
            }
            if (lhs.Author_IsSet != rhs.Author_IsSet) return false;
            if (lhs.Author_IsSet)
            {
                if (!string.Equals(lhs.Author, rhs.Author)) return false;
            }
            if (lhs.Description_IsSet != rhs.Description_IsSet) return false;
            if (lhs.Description_IsSet)
            {
                if (!string.Equals(lhs.Description, rhs.Description)) return false;
            }
            if (lhs.MasterReferences.HasBeenSet != rhs.MasterReferences.HasBeenSet) return false;
            if (lhs.MasterReferences.HasBeenSet)
            {
                if (!lhs.MasterReferences.SequenceEqual(rhs.MasterReferences)) return false;
            }
            if (lhs.VestigialData_IsSet != rhs.VestigialData_IsSet) return false;
            if (lhs.VestigialData_IsSet)
            {
                if (lhs.VestigialData != rhs.VestigialData) return false;
            }
            return true;
        }

        public virtual int GetHashCode(IModHeaderGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Stats).CombineHashCode(ret);
            if (item.TypeOffsets_IsSet)
            {
                ret = HashHelper.GetHashCode(item.TypeOffsets).CombineHashCode(ret);
            }
            if (item.Deleted_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Deleted).CombineHashCode(ret);
            }
            if (item.Author_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Author).CombineHashCode(ret);
            }
            if (item.Description_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Description).CombineHashCode(ret);
            }
            if (item.MasterReferences.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.MasterReferences).CombineHashCode(ret);
            }
            if (item.VestigialData_IsSet)
            {
                ret = HashHelper.GetHashCode(item.VestigialData).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class ModHeaderXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ModHeaderXmlWriteTranslation Instance = new ModHeaderXmlWriteTranslation();

        public static void WriteToNodeXml(
            IModHeaderGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Fluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Fluff),
                    item: item.Fluff,
                    fieldIndex: (int)ModHeader_FieldIndex.Fluff,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Stats) ?? true))
            {
                ((ModStatsXmlWriteTranslation)((IXmlItem)item.Stats).XmlWriteTranslator).Write(
                    item: item.Stats,
                    node: node,
                    name: nameof(item.Stats),
                    fieldIndex: (int)ModHeader_FieldIndex.Stats,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ModHeader_FieldIndex.Stats));
            }
            if (item.TypeOffsets_IsSet
                && (translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.TypeOffsets) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TypeOffsets),
                    item: item.TypeOffsets,
                    fieldIndex: (int)ModHeader_FieldIndex.TypeOffsets,
                    errorMask: errorMask);
            }
            if (item.Deleted_IsSet
                && (translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Deleted) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Deleted),
                    item: item.Deleted,
                    fieldIndex: (int)ModHeader_FieldIndex.Deleted,
                    errorMask: errorMask);
            }
            if (item.Author_IsSet
                && (translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Author) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Author),
                    item: item.Author,
                    fieldIndex: (int)ModHeader_FieldIndex.Author,
                    errorMask: errorMask);
            }
            if (item.Description_IsSet
                && (translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)ModHeader_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if (item.MasterReferences.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.MasterReferences) ?? true))
            {
                ListXmlTranslation<IMasterReferenceGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.MasterReferences),
                    item: item.MasterReferences,
                    fieldIndex: (int)ModHeader_FieldIndex.MasterReferences,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ModHeader_FieldIndex.MasterReferences),
                    transl: (XElement subNode, IMasterReferenceGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        ((MasterReferenceXmlWriteTranslation)((IXmlItem)subItem).XmlWriteTranslator).Write(
                            item: subItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.VestigialData_IsSet
                && (translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.VestigialData) ?? true))
            {
                UInt64XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VestigialData),
                    item: item.VestigialData,
                    fieldIndex: (int)ModHeader_FieldIndex.VestigialData,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IModHeaderGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ModHeader");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ModHeader");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IModHeaderGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IModHeaderGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IModHeaderGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ModHeaderXmlCreateTranslation
    {
        public readonly static ModHeaderXmlCreateTranslation Instance = new ModHeaderXmlCreateTranslation();

        public static void FillPublicXml(
            IModHeader item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ModHeaderXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IModHeader item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Fluff":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.Fluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] FluffParse,
                            errorMask: errorMask))
                        {
                            item.Fluff = FluffParse;
                        }
                        else
                        {
                            item.Fluff = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Stats":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.Stats);
                        if (LoquiXmlTranslation<ModStats>.Instance.Parse(
                            node: node,
                            item: out ModStats StatsParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)ModHeader_FieldIndex.Stats)))
                        {
                            item.Stats = StatsParse;
                        }
                        else
                        {
                            item.Stats = default(ModStats);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TypeOffsets":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.TypeOffsets);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] TypeOffsetsParse,
                            errorMask: errorMask))
                        {
                            item.TypeOffsets = TypeOffsetsParse;
                        }
                        else
                        {
                            item.TypeOffsets = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Deleted":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.Deleted);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] DeletedParse,
                            errorMask: errorMask))
                        {
                            item.Deleted = DeletedParse;
                        }
                        else
                        {
                            item.Deleted = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Author":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.Author);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String AuthorParse,
                            errorMask: errorMask))
                        {
                            item.Author = AuthorParse;
                        }
                        else
                        {
                            item.Author = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.Description);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String DescriptionParse,
                            errorMask: errorMask))
                        {
                            item.Description = DescriptionParse;
                        }
                        else
                        {
                            item.Description = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MasterReferences":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.MasterReferences);
                        if (ListXmlTranslation<MasterReference>.Instance.Parse(
                            node: node,
                            enumer: out var MasterReferencesItem,
                            transl: LoquiXmlTranslation<MasterReference>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.MasterReferences.SetTo(MasterReferencesItem);
                        }
                        else
                        {
                            item.MasterReferences.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VestigialData":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.VestigialData);
                        if (UInt64XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt64 VestigialDataParse,
                            errorMask: errorMask))
                        {
                            item.VestigialData = VestigialDataParse;
                        }
                        else
                        {
                            item.VestigialData = default(UInt64);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class ModHeaderXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IModHeaderGetter item,
            XElement node,
            out ModHeader_ErrorMask errorMask,
            bool doMasks = true,
            ModHeader_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ModHeaderXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ModHeader_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            string path,
            out ModHeader_ErrorMask errorMask,
            ModHeader_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            Stream stream,
            out ModHeader_ErrorMask errorMask,
            ModHeader_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((ModHeaderXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            XElement node,
            string name = null,
            ModHeader_TranslationMask translationMask = null)
        {
            ((ModHeaderXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ModHeaderXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ModHeaderXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class ModHeader_Mask<T> : IMask<T>, IEquatable<ModHeader_Mask<T>>
    {
        #region Ctors
        public ModHeader_Mask()
        {
        }

        public ModHeader_Mask(T initialValue)
        {
            this.Fluff = initialValue;
            this.Stats = new MaskItem<T, ModStats_Mask<T>>(initialValue, new ModStats_Mask<T>(initialValue));
            this.TypeOffsets = initialValue;
            this.Deleted = initialValue;
            this.Author = initialValue;
            this.Description = initialValue;
            this.MasterReferences = new MaskItem<T, IEnumerable<MaskItemIndexed<T, MasterReference_Mask<T>>>>(initialValue, null);
            this.VestigialData = initialValue;
        }
        #endregion

        #region Members
        public T Fluff;
        public MaskItem<T, ModStats_Mask<T>> Stats { get; set; }
        public T TypeOffsets;
        public T Deleted;
        public T Author;
        public T Description;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, MasterReference_Mask<T>>>> MasterReferences;
        public T VestigialData;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ModHeader_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ModHeader_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.Stats, rhs.Stats)) return false;
            if (!object.Equals(this.TypeOffsets, rhs.TypeOffsets)) return false;
            if (!object.Equals(this.Deleted, rhs.Deleted)) return false;
            if (!object.Equals(this.Author, rhs.Author)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.MasterReferences, rhs.MasterReferences)) return false;
            if (!object.Equals(this.VestigialData, rhs.VestigialData)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.Stats?.GetHashCode());
            ret = ret.CombineHashCode(this.TypeOffsets?.GetHashCode());
            ret = ret.CombineHashCode(this.Deleted?.GetHashCode());
            ret = ret.CombineHashCode(this.Author?.GetHashCode());
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.MasterReferences?.GetHashCode());
            ret = ret.CombineHashCode(this.VestigialData?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Fluff)) return false;
            if (Stats != null)
            {
                if (!eval(this.Stats.Overall)) return false;
                if (this.Stats.Specific != null && !this.Stats.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.TypeOffsets)) return false;
            if (!eval(this.Deleted)) return false;
            if (!eval(this.Author)) return false;
            if (!eval(this.Description)) return false;
            if (this.MasterReferences != null)
            {
                if (!eval(this.MasterReferences.Overall)) return false;
                if (this.MasterReferences.Specific != null)
                {
                    foreach (var item in this.MasterReferences.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.VestigialData)) return false;
            return true;
        }
        #endregion

        #region Translate
        public ModHeader_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ModHeader_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ModHeader_Mask<R> obj, Func<T, R> eval)
        {
            obj.Fluff = eval(this.Fluff);
            if (this.Stats != null)
            {
                obj.Stats = new MaskItem<R, ModStats_Mask<R>>();
                obj.Stats.Overall = eval(this.Stats.Overall);
                if (this.Stats.Specific != null)
                {
                    obj.Stats.Specific = this.Stats.Specific.Translate(eval);
                }
            }
            obj.TypeOffsets = eval(this.TypeOffsets);
            obj.Deleted = eval(this.Deleted);
            obj.Author = eval(this.Author);
            obj.Description = eval(this.Description);
            if (MasterReferences != null)
            {
                obj.MasterReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MasterReference_Mask<R>>>>();
                obj.MasterReferences.Overall = eval(this.MasterReferences.Overall);
                if (MasterReferences.Specific != null)
                {
                    List<MaskItemIndexed<R, MasterReference_Mask<R>>> l = new List<MaskItemIndexed<R, MasterReference_Mask<R>>>();
                    obj.MasterReferences.Specific = l;
                    foreach (var item in MasterReferences.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, MasterReference_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, MasterReference_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.VestigialData = eval(this.VestigialData);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.MasterReferences.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ModHeader_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ModHeader_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ModHeader_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
                if (printMask?.Stats?.Overall ?? true)
                {
                    Stats?.ToString(fg);
                }
                if (printMask?.TypeOffsets ?? true)
                {
                    fg.AppendLine($"TypeOffsets => {TypeOffsets}");
                }
                if (printMask?.Deleted ?? true)
                {
                    fg.AppendLine($"Deleted => {Deleted}");
                }
                if (printMask?.Author ?? true)
                {
                    fg.AppendLine($"Author => {Author}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.MasterReferences?.Overall ?? true)
                {
                    fg.AppendLine("MasterReferences =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (MasterReferences.Overall != null)
                        {
                            fg.AppendLine(MasterReferences.Overall.ToString());
                        }
                        if (MasterReferences.Specific != null)
                        {
                            foreach (var subItem in MasterReferences.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.VestigialData ?? true)
                {
                    fg.AppendLine($"VestigialData => {VestigialData}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ModHeader_ErrorMask : IErrorMask, IErrorMask<ModHeader_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Fluff;
        public MaskItem<Exception, ModStats_ErrorMask> Stats;
        public Exception TypeOffsets;
        public Exception Deleted;
        public Exception Author;
        public Exception Description;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, MasterReference_ErrorMask>>> MasterReferences;
        public Exception VestigialData;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Fluff:
                    return Fluff;
                case ModHeader_FieldIndex.Stats:
                    return Stats;
                case ModHeader_FieldIndex.TypeOffsets:
                    return TypeOffsets;
                case ModHeader_FieldIndex.Deleted:
                    return Deleted;
                case ModHeader_FieldIndex.Author:
                    return Author;
                case ModHeader_FieldIndex.Description:
                    return Description;
                case ModHeader_FieldIndex.MasterReferences:
                    return MasterReferences;
                case ModHeader_FieldIndex.VestigialData:
                    return VestigialData;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case ModHeader_FieldIndex.Stats:
                    this.Stats = new MaskItem<Exception, ModStats_ErrorMask>(ex, null);
                    break;
                case ModHeader_FieldIndex.TypeOffsets:
                    this.TypeOffsets = ex;
                    break;
                case ModHeader_FieldIndex.Deleted:
                    this.Deleted = ex;
                    break;
                case ModHeader_FieldIndex.Author:
                    this.Author = ex;
                    break;
                case ModHeader_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case ModHeader_FieldIndex.MasterReferences:
                    this.MasterReferences = new MaskItem<Exception, IEnumerable<MaskItem<Exception, MasterReference_ErrorMask>>>(ex, null);
                    break;
                case ModHeader_FieldIndex.VestigialData:
                    this.VestigialData = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case ModHeader_FieldIndex.Stats:
                    this.Stats = (MaskItem<Exception, ModStats_ErrorMask>)obj;
                    break;
                case ModHeader_FieldIndex.TypeOffsets:
                    this.TypeOffsets = (Exception)obj;
                    break;
                case ModHeader_FieldIndex.Deleted:
                    this.Deleted = (Exception)obj;
                    break;
                case ModHeader_FieldIndex.Author:
                    this.Author = (Exception)obj;
                    break;
                case ModHeader_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case ModHeader_FieldIndex.MasterReferences:
                    this.MasterReferences = (MaskItem<Exception, IEnumerable<MaskItem<Exception, MasterReference_ErrorMask>>>)obj;
                    break;
                case ModHeader_FieldIndex.VestigialData:
                    this.VestigialData = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Fluff != null) return true;
            if (Stats != null) return true;
            if (TypeOffsets != null) return true;
            if (Deleted != null) return true;
            if (Author != null) return true;
            if (Description != null) return true;
            if (MasterReferences != null) return true;
            if (VestigialData != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ModHeader_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Fluff => {Fluff}");
            Stats?.ToString(fg);
            fg.AppendLine($"TypeOffsets => {TypeOffsets}");
            fg.AppendLine($"Deleted => {Deleted}");
            fg.AppendLine($"Author => {Author}");
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine("MasterReferences =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (MasterReferences.Overall != null)
                {
                    fg.AppendLine(MasterReferences.Overall.ToString());
                }
                if (MasterReferences.Specific != null)
                {
                    foreach (var subItem in MasterReferences.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"VestigialData => {VestigialData}");
        }
        #endregion

        #region Combine
        public ModHeader_ErrorMask Combine(ModHeader_ErrorMask rhs)
        {
            var ret = new ModHeader_ErrorMask();
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.Stats = new MaskItem<Exception, ModStats_ErrorMask>(this.Stats.Overall.Combine(rhs.Stats.Overall), ((IErrorMask<ModStats_ErrorMask>)this.Stats.Specific).Combine(rhs.Stats.Specific));
            ret.TypeOffsets = this.TypeOffsets.Combine(rhs.TypeOffsets);
            ret.Deleted = this.Deleted.Combine(rhs.Deleted);
            ret.Author = this.Author.Combine(rhs.Author);
            ret.Description = this.Description.Combine(rhs.Description);
            ret.MasterReferences = new MaskItem<Exception, IEnumerable<MaskItem<Exception, MasterReference_ErrorMask>>>(this.MasterReferences.Overall.Combine(rhs.MasterReferences.Overall), new List<MaskItem<Exception, MasterReference_ErrorMask>>(this.MasterReferences.Specific.And(rhs.MasterReferences.Specific)));
            ret.VestigialData = this.VestigialData.Combine(rhs.VestigialData);
            return ret;
        }
        public static ModHeader_ErrorMask Combine(ModHeader_ErrorMask lhs, ModHeader_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ModHeader_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ModHeader_ErrorMask();
        }
        #endregion

    }
    public class ModHeader_CopyMask
    {
        public ModHeader_CopyMask()
        {
        }

        public ModHeader_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Fluff = defaultOn;
            this.Stats = new MaskItem<CopyOption, ModStats_CopyMask>(deepCopyOption, default);
            this.TypeOffsets = defaultOn;
            this.Deleted = defaultOn;
            this.Author = defaultOn;
            this.Description = defaultOn;
            this.MasterReferences = new MaskItem<CopyOption, MasterReference_CopyMask>(deepCopyOption, default);
            this.VestigialData = defaultOn;
        }

        #region Members
        public bool Fluff;
        public MaskItem<CopyOption, ModStats_CopyMask> Stats;
        public bool TypeOffsets;
        public bool Deleted;
        public bool Author;
        public bool Description;
        public MaskItem<CopyOption, MasterReference_CopyMask> MasterReferences;
        public bool VestigialData;
        #endregion

    }

    public class ModHeader_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Fluff;
        public MaskItem<bool, ModStats_TranslationMask> Stats;
        public bool TypeOffsets;
        public bool Deleted;
        public bool Author;
        public bool Description;
        public MaskItem<bool, MasterReference_TranslationMask> MasterReferences;
        public bool VestigialData;
        #endregion

        #region Ctors
        public ModHeader_TranslationMask()
        {
        }

        public ModHeader_TranslationMask(bool defaultOn)
        {
            this.Fluff = defaultOn;
            this.Stats = new MaskItem<bool, ModStats_TranslationMask>(defaultOn, null);
            this.TypeOffsets = defaultOn;
            this.Deleted = defaultOn;
            this.Author = defaultOn;
            this.Description = defaultOn;
            this.MasterReferences = new MaskItem<bool, MasterReference_TranslationMask>(defaultOn, null);
            this.VestigialData = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Fluff, null));
            ret.Add((Stats?.Overall ?? true, Stats?.Specific?.GetCrystal()));
            ret.Add((TypeOffsets, null));
            ret.Add((Deleted, null));
            ret.Add((Author, null));
            ret.Add((Description, null));
            ret.Add((MasterReferences?.Overall ?? true, MasterReferences?.Specific?.GetCrystal()));
            ret.Add((VestigialData, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class ModHeaderBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ModHeaderBinaryWriteTranslation Instance = new ModHeaderBinaryWriteTranslation();

        public static void Write_Embedded(
            IModHeaderGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff);
        }

        public static void Write_RecordTypes(
            IModHeaderGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            ((ModStatsBinaryWriteTranslation)((IBinaryItem)item.Stats).BinaryWriteTranslator).Write(
                item: item.Stats,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences,
                recordTypeConverter: null);
            if (item.TypeOffsets_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.TypeOffsets,
                    header: recordTypeConverter.ConvertToCustom(ModHeader_Registration.OFST_HEADER),
                    nullable: false);
            }
            if (item.Deleted_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Deleted,
                    header: recordTypeConverter.ConvertToCustom(ModHeader_Registration.DELE_HEADER),
                    nullable: false);
            }
            if (item.Author_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Author,
                    header: recordTypeConverter.ConvertToCustom(ModHeader_Registration.CNAM_HEADER),
                    nullable: false);
            }
            if (item.Description_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Description,
                    header: recordTypeConverter.ConvertToCustom(ModHeader_Registration.SNAM_HEADER),
                    nullable: false);
            }
            if (item.MasterReferences.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IMasterReferenceGetter>.Instance.Write(
                    writer: writer,
                    items: item.MasterReferences,
                    fieldIndex: (int)ModHeader_FieldIndex.MasterReferences,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IMasterReferenceGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        ((MasterReferenceBinaryWriteTranslation)((IBinaryItem)subItem).BinaryWriteTranslator).Write(
                            item: subItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
            if (item.VestigialData_IsSet)
            {
                Mutagen.Bethesda.Binary.UInt64BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.VestigialData,
                    header: recordTypeConverter.ConvertToCustom(ModHeader_Registration.DATA_HEADER),
                    nullable: false);
            }
        }

        public void Write(
            MutagenWriter writer,
            IModHeaderGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: ModHeader_Registration.TES4_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IModHeaderGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class ModHeaderBinaryCreateTranslation
    {
        public readonly static ModHeaderBinaryCreateTranslation Instance = new ModHeaderBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class ModHeaderBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IModHeaderGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out ModHeader_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ModHeaderBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ModHeader_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IModHeaderGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((ModHeaderBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IModHeaderGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((ModHeaderBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    public partial class ModHeaderBinaryWrapper : IModHeaderGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ModHeader_Registration.Instance;
        public static ModHeader_Registration Registration => ModHeader_Registration.Instance;
        protected object CommonInstance => ModHeaderCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IModHeaderGetter)rhs, include);

        protected object XmlWriteTranslator => ModHeaderXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        protected object BinaryWriteTranslator => ModHeaderBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        protected ReadOnlyMemorySlice<byte> _data;
        protected MetaDataConstants _meta;

        public ReadOnlySpan<Byte> Fluff => _data.Span.Slice(0, 12).ToArray();
        #region Stats
        private IModStatsGetter _Stats;
        public IModStatsGetter Stats => _Stats ?? new ModStats();
        #endregion
        #region TypeOffsets
        private int? _TypeOffsetsLocation;
        public bool TypeOffsets_IsSet => _TypeOffsetsLocation.HasValue;
        public ReadOnlySpan<Byte> TypeOffsets => _TypeOffsetsLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _TypeOffsetsLocation.Value, _meta).ToArray() : default;
        #endregion
        #region Deleted
        private int? _DeletedLocation;
        public bool Deleted_IsSet => _DeletedLocation.HasValue;
        public ReadOnlySpan<Byte> Deleted => _DeletedLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _DeletedLocation.Value, _meta).ToArray() : default;
        #endregion
        #region Author
        private int? _AuthorLocation;
        public bool Author_IsSet => _AuthorLocation.HasValue;
        public String Author => _AuthorLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _AuthorLocation.Value, _meta)) : default;
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public bool Description_IsSet => _DescriptionLocation.HasValue;
        public String Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _DescriptionLocation.Value, _meta)) : default;
        #endregion
        public IReadOnlySetList<IMasterReferenceGetter> MasterReferences { get; private set; } = EmptySetList<MasterReferenceBinaryWrapper>.Instance;
        #region VestigialData
        private int? _VestigialDataLocation;
        public bool VestigialData_IsSet => _VestigialDataLocation.HasValue;
        public UInt64 VestigialData => _VestigialDataLocation.HasValue ? BinaryPrimitives.ReadUInt64LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _VestigialDataLocation.Value, _meta)) : default;
        #endregion
        partial void CustomCtor(BinaryMemoryReadStream stream, int offset);

        protected ModHeaderBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            MetaDataConstants meta)
        {
            this._data = bytes;
            this._meta = meta;
        }

        public static ModHeaderBinaryWrapper ModHeaderFactory(
            BinaryMemoryReadStream stream,
            MetaDataConstants meta)
        {
            var ret = new ModHeaderBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, meta),
                meta: meta);
            var finalPos = stream.Position + meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(stream, offset);
            UtilityTranslation.FillSubrecordTypesForWrapper(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                meta: ret._meta,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int offset,
            RecordType type,
            int? lastParsed)
        {
            switch (type.TypeInt)
            {
                case 0x52444548: // HEDR
                {
                    this._Stats = ModStatsBinaryWrapper.ModStatsFactory(
                        stream: stream,
                        meta: _meta);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Stats);
                }
                case 0x5453464F: // OFST
                {
                    _TypeOffsetsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.TypeOffsets);
                }
                case 0x454C4544: // DELE
                {
                    _DeletedLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Deleted);
                }
                case 0x4D414E43: // CNAM
                {
                    _AuthorLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Author);
                }
                case 0x4D414E53: // SNAM
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Description);
                }
                case 0x5453414D: // MAST
                {
                    throw new NotImplementedException();
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.MasterReferences);
                }
                case 0x41544144: // DATA
                {
                    _VestigialDataLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.VestigialData);
                }
                default:
                    return TryGet<int?>.Succeed(null);
            }
        }
    }

    #endregion

    #endregion

}
