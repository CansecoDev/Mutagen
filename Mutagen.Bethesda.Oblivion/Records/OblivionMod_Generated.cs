/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
using System.Threading.Tasks;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class OblivionMod :
        IEquatable<IOblivionModGetter>,
        ILoquiObjectSetter<OblivionMod>,
        IOblivionMod
    {
        #region Ctor
        protected OblivionMod()
        {
            _GameSettings_Object = new Group<GameSetting>(this);
            _Globals_Object = new Group<Global>(this);
            _Classes_Object = new Group<Class>(this);
            _Factions_Object = new Group<Faction>(this);
            _Hairs_Object = new Group<Hair>(this);
            _Eyes_Object = new Group<Eye>(this);
            _Races_Object = new Group<Race>(this);
            _Sounds_Object = new Group<Sound>(this);
            _Skills_Object = new Group<SkillRecord>(this);
            _MagicEffects_Object = new Group<MagicEffect>(this);
            _Scripts_Object = new Group<Script>(this);
            _LandTextures_Object = new Group<LandTexture>(this);
            _Enchantments_Object = new Group<Enchantment>(this);
            _Spells_Object = new Group<SpellUnleveled>(this);
            _Birthsigns_Object = new Group<Birthsign>(this);
            _Activators_Object = new Group<Activator>(this);
            _AlchemicalApparatus_Object = new Group<AlchemicalApparatus>(this);
            _Armors_Object = new Group<Armor>(this);
            _Books_Object = new Group<Book>(this);
            _Clothes_Object = new Group<Clothing>(this);
            _Containers_Object = new Group<Container>(this);
            _Doors_Object = new Group<Door>(this);
            _Ingredients_Object = new Group<Ingredient>(this);
            _Lights_Object = new Group<Light>(this);
            _Miscellaneous_Object = new Group<Miscellaneous>(this);
            _Statics_Object = new Group<Static>(this);
            _Grasses_Object = new Group<Grass>(this);
            _Trees_Object = new Group<Tree>(this);
            _Flora_Object = new Group<Flora>(this);
            _Furniture_Object = new Group<Furniture>(this);
            _Weapons_Object = new Group<Weapon>(this);
            _Ammunitions_Object = new Group<Ammunition>(this);
            _Npcs_Object = new Group<Npc>(this);
            _Creatures_Object = new Group<Creature>(this);
            _LeveledCreatures_Object = new Group<LeveledCreature>(this);
            _SoulGems_Object = new Group<SoulGem>(this);
            _Keys_Object = new Group<Key>(this);
            _Potions_Object = new Group<Potion>(this);
            _Subspaces_Object = new Group<Subspace>(this);
            _SigilStones_Object = new Group<SigilStone>(this);
            _LeveledItems_Object = new Group<LeveledItem>(this);
            _Weathers_Object = new Group<Weather>(this);
            _Climates_Object = new Group<Climate>(this);
            _Regions_Object = new Group<Region>(this);
            _Worldspaces_Object = new Group<Worldspace>(this);
            _DialogTopics_Object = new Group<DialogTopic>(this);
            _Quests_Object = new Group<Quest>(this);
            _IdleAnimations_Object = new Group<IdleAnimation>(this);
            _AIPackages_Object = new Group<AIPackage>(this);
            _CombatStyles_Object = new Group<CombatStyle>(this);
            _LoadScreens_Object = new Group<LoadScreen>(this);
            _LeveledSpells_Object = new Group<LeveledSpell>(this);
            _AnimatedObjects_Object = new Group<AnimatedObject>(this);
            _Waters_Object = new Group<Water>(this);
            _EffectShaders_Object = new Group<EffectShader>(this);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ModHeader
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly OblivionModHeader _ModHeader_Object = new OblivionModHeader();
        public OblivionModHeader ModHeader => _ModHeader_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionModHeaderGetter IOblivionModGetter.ModHeader => _ModHeader_Object;
        #endregion
        #region GameSettings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<GameSetting> _GameSettings_Object;
        public Group<GameSetting> GameSettings => _GameSettings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IGameSettingGetter> IOblivionModGetter.GameSettings => _GameSettings_Object;
        #endregion
        #region Globals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Global> _Globals_Object;
        public Group<Global> Globals => _Globals_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IGlobalGetter> IOblivionModGetter.Globals => _Globals_Object;
        #endregion
        #region Classes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Class> _Classes_Object;
        public Group<Class> Classes => _Classes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IClassGetter> IOblivionModGetter.Classes => _Classes_Object;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Faction> _Factions_Object;
        public Group<Faction> Factions => _Factions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFactionGetter> IOblivionModGetter.Factions => _Factions_Object;
        #endregion
        #region Hairs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Hair> _Hairs_Object;
        public Group<Hair> Hairs => _Hairs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IHairGetter> IOblivionModGetter.Hairs => _Hairs_Object;
        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Eye> _Eyes_Object;
        public Group<Eye> Eyes => _Eyes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IEyeGetter> IOblivionModGetter.Eyes => _Eyes_Object;
        #endregion
        #region Races
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Race> _Races_Object;
        public Group<Race> Races => _Races_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IRaceGetter> IOblivionModGetter.Races => _Races_Object;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Sound> _Sounds_Object;
        public Group<Sound> Sounds => _Sounds_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISoundGetter> IOblivionModGetter.Sounds => _Sounds_Object;
        #endregion
        #region Skills
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SkillRecord> _Skills_Object;
        public Group<SkillRecord> Skills => _Skills_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISkillRecordGetter> IOblivionModGetter.Skills => _Skills_Object;
        #endregion
        #region MagicEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MagicEffect> _MagicEffects_Object;
        public Group<MagicEffect> MagicEffects => _MagicEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMagicEffectGetter> IOblivionModGetter.MagicEffects => _MagicEffects_Object;
        #endregion
        #region Scripts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Script> _Scripts_Object;
        public Group<Script> Scripts => _Scripts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IScriptGetter> IOblivionModGetter.Scripts => _Scripts_Object;
        #endregion
        #region LandTextures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LandTexture> _LandTextures_Object;
        public Group<LandTexture> LandTextures => _LandTextures_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILandTextureGetter> IOblivionModGetter.LandTextures => _LandTextures_Object;
        #endregion
        #region Enchantments
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Enchantment> _Enchantments_Object;
        public Group<Enchantment> Enchantments => _Enchantments_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IEnchantmentGetter> IOblivionModGetter.Enchantments => _Enchantments_Object;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SpellUnleveled> _Spells_Object;
        public Group<SpellUnleveled> Spells => _Spells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISpellUnleveledGetter> IOblivionModGetter.Spells => _Spells_Object;
        #endregion
        #region Birthsigns
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Birthsign> _Birthsigns_Object;
        public Group<Birthsign> Birthsigns => _Birthsigns_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IBirthsignGetter> IOblivionModGetter.Birthsigns => _Birthsigns_Object;
        #endregion
        #region Activators
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Activator> _Activators_Object;
        public Group<Activator> Activators => _Activators_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IActivatorGetter> IOblivionModGetter.Activators => _Activators_Object;
        #endregion
        #region AlchemicalApparatus
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AlchemicalApparatus> _AlchemicalApparatus_Object;
        public Group<AlchemicalApparatus> AlchemicalApparatus => _AlchemicalApparatus_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAlchemicalApparatusGetter> IOblivionModGetter.AlchemicalApparatus => _AlchemicalApparatus_Object;
        #endregion
        #region Armors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Armor> _Armors_Object;
        public Group<Armor> Armors => _Armors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IArmorGetter> IOblivionModGetter.Armors => _Armors_Object;
        #endregion
        #region Books
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Book> _Books_Object;
        public Group<Book> Books => _Books_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IBookGetter> IOblivionModGetter.Books => _Books_Object;
        #endregion
        #region Clothes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Clothing> _Clothes_Object;
        public Group<Clothing> Clothes => _Clothes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IClothingGetter> IOblivionModGetter.Clothes => _Clothes_Object;
        #endregion
        #region Containers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Container> _Containers_Object;
        public Group<Container> Containers => _Containers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IContainerGetter> IOblivionModGetter.Containers => _Containers_Object;
        #endregion
        #region Doors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Door> _Doors_Object;
        public Group<Door> Doors => _Doors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDoorGetter> IOblivionModGetter.Doors => _Doors_Object;
        #endregion
        #region Ingredients
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Ingredient> _Ingredients_Object;
        public Group<Ingredient> Ingredients => _Ingredients_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IIngredientGetter> IOblivionModGetter.Ingredients => _Ingredients_Object;
        #endregion
        #region Lights
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Light> _Lights_Object;
        public Group<Light> Lights => _Lights_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILightGetter> IOblivionModGetter.Lights => _Lights_Object;
        #endregion
        #region Miscellaneous
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Miscellaneous> _Miscellaneous_Object;
        public Group<Miscellaneous> Miscellaneous => _Miscellaneous_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMiscellaneousGetter> IOblivionModGetter.Miscellaneous => _Miscellaneous_Object;
        #endregion
        #region Statics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Static> _Statics_Object;
        public Group<Static> Statics => _Statics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IStaticGetter> IOblivionModGetter.Statics => _Statics_Object;
        #endregion
        #region Grasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Grass> _Grasses_Object;
        public Group<Grass> Grasses => _Grasses_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IGrassGetter> IOblivionModGetter.Grasses => _Grasses_Object;
        #endregion
        #region Trees
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Tree> _Trees_Object;
        public Group<Tree> Trees => _Trees_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ITreeGetter> IOblivionModGetter.Trees => _Trees_Object;
        #endregion
        #region Flora
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Flora> _Flora_Object;
        public Group<Flora> Flora => _Flora_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFloraGetter> IOblivionModGetter.Flora => _Flora_Object;
        #endregion
        #region Furniture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Furniture> _Furniture_Object;
        public Group<Furniture> Furniture => _Furniture_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFurnitureGetter> IOblivionModGetter.Furniture => _Furniture_Object;
        #endregion
        #region Weapons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Weapon> _Weapons_Object;
        public Group<Weapon> Weapons => _Weapons_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IWeaponGetter> IOblivionModGetter.Weapons => _Weapons_Object;
        #endregion
        #region Ammunitions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Ammunition> _Ammunitions_Object;
        public Group<Ammunition> Ammunitions => _Ammunitions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAmmunitionGetter> IOblivionModGetter.Ammunitions => _Ammunitions_Object;
        #endregion
        #region Npcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Npc> _Npcs_Object;
        public Group<Npc> Npcs => _Npcs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<INpcGetter> IOblivionModGetter.Npcs => _Npcs_Object;
        #endregion
        #region Creatures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Creature> _Creatures_Object;
        public Group<Creature> Creatures => _Creatures_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ICreatureGetter> IOblivionModGetter.Creatures => _Creatures_Object;
        #endregion
        #region LeveledCreatures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LeveledCreature> _LeveledCreatures_Object;
        public Group<LeveledCreature> LeveledCreatures => _LeveledCreatures_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILeveledCreatureGetter> IOblivionModGetter.LeveledCreatures => _LeveledCreatures_Object;
        #endregion
        #region SoulGems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SoulGem> _SoulGems_Object;
        public Group<SoulGem> SoulGems => _SoulGems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISoulGemGetter> IOblivionModGetter.SoulGems => _SoulGems_Object;
        #endregion
        #region Keys
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Key> _Keys_Object;
        public Group<Key> Keys => _Keys_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IKeyGetter> IOblivionModGetter.Keys => _Keys_Object;
        #endregion
        #region Potions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Potion> _Potions_Object;
        public Group<Potion> Potions => _Potions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IPotionGetter> IOblivionModGetter.Potions => _Potions_Object;
        #endregion
        #region Subspaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Subspace> _Subspaces_Object;
        public Group<Subspace> Subspaces => _Subspaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISubspaceGetter> IOblivionModGetter.Subspaces => _Subspaces_Object;
        #endregion
        #region SigilStones
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SigilStone> _SigilStones_Object;
        public Group<SigilStone> SigilStones => _SigilStones_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISigilStoneGetter> IOblivionModGetter.SigilStones => _SigilStones_Object;
        #endregion
        #region LeveledItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LeveledItem> _LeveledItems_Object;
        public Group<LeveledItem> LeveledItems => _LeveledItems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILeveledItemGetter> IOblivionModGetter.LeveledItems => _LeveledItems_Object;
        #endregion
        #region Weathers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Weather> _Weathers_Object;
        public Group<Weather> Weathers => _Weathers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IWeatherGetter> IOblivionModGetter.Weathers => _Weathers_Object;
        #endregion
        #region Climates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Climate> _Climates_Object;
        public Group<Climate> Climates => _Climates_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IClimateGetter> IOblivionModGetter.Climates => _Climates_Object;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Region> _Regions_Object;
        public Group<Region> Regions => _Regions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IRegionGetter> IOblivionModGetter.Regions => _Regions_Object;
        #endregion
        #region Cells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ListGroup<CellBlock> _Cells_Object = new ListGroup<CellBlock>();
        public ListGroup<CellBlock> Cells => _Cells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IListGroupGetter<ICellBlockGetter> IOblivionModGetter.Cells => _Cells_Object;
        #endregion
        #region Worldspaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Worldspace> _Worldspaces_Object;
        public Group<Worldspace> Worldspaces => _Worldspaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IWorldspaceGetter> IOblivionModGetter.Worldspaces => _Worldspaces_Object;
        #endregion
        #region DialogTopics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<DialogTopic> _DialogTopics_Object;
        public Group<DialogTopic> DialogTopics => _DialogTopics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDialogTopicGetter> IOblivionModGetter.DialogTopics => _DialogTopics_Object;
        #endregion
        #region Quests
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Quest> _Quests_Object;
        public Group<Quest> Quests => _Quests_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IQuestGetter> IOblivionModGetter.Quests => _Quests_Object;
        #endregion
        #region IdleAnimations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<IdleAnimation> _IdleAnimations_Object;
        public Group<IdleAnimation> IdleAnimations => _IdleAnimations_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IIdleAnimationGetter> IOblivionModGetter.IdleAnimations => _IdleAnimations_Object;
        #endregion
        #region AIPackages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AIPackage> _AIPackages_Object;
        public Group<AIPackage> AIPackages => _AIPackages_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAIPackageGetter> IOblivionModGetter.AIPackages => _AIPackages_Object;
        #endregion
        #region CombatStyles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<CombatStyle> _CombatStyles_Object;
        public Group<CombatStyle> CombatStyles => _CombatStyles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ICombatStyleGetter> IOblivionModGetter.CombatStyles => _CombatStyles_Object;
        #endregion
        #region LoadScreens
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LoadScreen> _LoadScreens_Object;
        public Group<LoadScreen> LoadScreens => _LoadScreens_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILoadScreenGetter> IOblivionModGetter.LoadScreens => _LoadScreens_Object;
        #endregion
        #region LeveledSpells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LeveledSpell> _LeveledSpells_Object;
        public Group<LeveledSpell> LeveledSpells => _LeveledSpells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILeveledSpellGetter> IOblivionModGetter.LeveledSpells => _LeveledSpells_Object;
        #endregion
        #region AnimatedObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AnimatedObject> _AnimatedObjects_Object;
        public Group<AnimatedObject> AnimatedObjects => _AnimatedObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAnimatedObjectGetter> IOblivionModGetter.AnimatedObjects => _AnimatedObjects_Object;
        #endregion
        #region Waters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Water> _Waters_Object;
        public Group<Water> Waters => _Waters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IWaterGetter> IOblivionModGetter.Waters => _Waters_Object;
        #endregion
        #region EffectShaders
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<EffectShader> _EffectShaders_Object;
        public Group<EffectShader> EffectShaders => _EffectShaders_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IEffectShaderGetter> IOblivionModGetter.EffectShaders => _EffectShaders_Object;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            OblivionModMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IOblivionModGetter rhs)) return false;
            return ((OblivionModCommon)((IOblivionModGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IOblivionModGetter? obj)
        {
            return ((OblivionModCommon)((IOblivionModGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((OblivionModCommon)((IOblivionModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ModHeader = new MaskItem<TItem, OblivionModHeader.Mask<TItem>?>(initialValue, new OblivionModHeader.Mask<TItem>(initialValue));
                this.GameSettings = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Globals = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Classes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Factions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Hairs = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Eyes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Races = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Sounds = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Skills = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MagicEffects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Scripts = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LandTextures = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Enchantments = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Spells = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Birthsigns = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Activators = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.AlchemicalApparatus = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Armors = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Books = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Clothes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Containers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Doors = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Ingredients = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Lights = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Miscellaneous = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Statics = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Grasses = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Trees = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Flora = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Furniture = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Weapons = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Ammunitions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Npcs = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Creatures = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LeveledCreatures = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.SoulGems = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Keys = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Potions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Subspaces = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.SigilStones = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LeveledItems = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Weathers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Climates = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Regions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Cells = new MaskItem<TItem, ListGroup.Mask<TItem>?>(initialValue, new ListGroup.Mask<TItem>(initialValue));
                this.Worldspaces = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.DialogTopics = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Quests = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.IdleAnimations = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.AIPackages = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.CombatStyles = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LoadScreens = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LeveledSpells = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.AnimatedObjects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Waters = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.EffectShaders = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem ModHeader,
                TItem GameSettings,
                TItem Globals,
                TItem Classes,
                TItem Factions,
                TItem Hairs,
                TItem Eyes,
                TItem Races,
                TItem Sounds,
                TItem Skills,
                TItem MagicEffects,
                TItem Scripts,
                TItem LandTextures,
                TItem Enchantments,
                TItem Spells,
                TItem Birthsigns,
                TItem Activators,
                TItem AlchemicalApparatus,
                TItem Armors,
                TItem Books,
                TItem Clothes,
                TItem Containers,
                TItem Doors,
                TItem Ingredients,
                TItem Lights,
                TItem Miscellaneous,
                TItem Statics,
                TItem Grasses,
                TItem Trees,
                TItem Flora,
                TItem Furniture,
                TItem Weapons,
                TItem Ammunitions,
                TItem Npcs,
                TItem Creatures,
                TItem LeveledCreatures,
                TItem SoulGems,
                TItem Keys,
                TItem Potions,
                TItem Subspaces,
                TItem SigilStones,
                TItem LeveledItems,
                TItem Weathers,
                TItem Climates,
                TItem Regions,
                TItem Cells,
                TItem Worldspaces,
                TItem DialogTopics,
                TItem Quests,
                TItem IdleAnimations,
                TItem AIPackages,
                TItem CombatStyles,
                TItem LoadScreens,
                TItem LeveledSpells,
                TItem AnimatedObjects,
                TItem Waters,
                TItem EffectShaders)
            {
                this.ModHeader = new MaskItem<TItem, OblivionModHeader.Mask<TItem>?>(ModHeader, new OblivionModHeader.Mask<TItem>(ModHeader));
                this.GameSettings = new MaskItem<TItem, Group.Mask<TItem>?>(GameSettings, new Group.Mask<TItem>(GameSettings));
                this.Globals = new MaskItem<TItem, Group.Mask<TItem>?>(Globals, new Group.Mask<TItem>(Globals));
                this.Classes = new MaskItem<TItem, Group.Mask<TItem>?>(Classes, new Group.Mask<TItem>(Classes));
                this.Factions = new MaskItem<TItem, Group.Mask<TItem>?>(Factions, new Group.Mask<TItem>(Factions));
                this.Hairs = new MaskItem<TItem, Group.Mask<TItem>?>(Hairs, new Group.Mask<TItem>(Hairs));
                this.Eyes = new MaskItem<TItem, Group.Mask<TItem>?>(Eyes, new Group.Mask<TItem>(Eyes));
                this.Races = new MaskItem<TItem, Group.Mask<TItem>?>(Races, new Group.Mask<TItem>(Races));
                this.Sounds = new MaskItem<TItem, Group.Mask<TItem>?>(Sounds, new Group.Mask<TItem>(Sounds));
                this.Skills = new MaskItem<TItem, Group.Mask<TItem>?>(Skills, new Group.Mask<TItem>(Skills));
                this.MagicEffects = new MaskItem<TItem, Group.Mask<TItem>?>(MagicEffects, new Group.Mask<TItem>(MagicEffects));
                this.Scripts = new MaskItem<TItem, Group.Mask<TItem>?>(Scripts, new Group.Mask<TItem>(Scripts));
                this.LandTextures = new MaskItem<TItem, Group.Mask<TItem>?>(LandTextures, new Group.Mask<TItem>(LandTextures));
                this.Enchantments = new MaskItem<TItem, Group.Mask<TItem>?>(Enchantments, new Group.Mask<TItem>(Enchantments));
                this.Spells = new MaskItem<TItem, Group.Mask<TItem>?>(Spells, new Group.Mask<TItem>(Spells));
                this.Birthsigns = new MaskItem<TItem, Group.Mask<TItem>?>(Birthsigns, new Group.Mask<TItem>(Birthsigns));
                this.Activators = new MaskItem<TItem, Group.Mask<TItem>?>(Activators, new Group.Mask<TItem>(Activators));
                this.AlchemicalApparatus = new MaskItem<TItem, Group.Mask<TItem>?>(AlchemicalApparatus, new Group.Mask<TItem>(AlchemicalApparatus));
                this.Armors = new MaskItem<TItem, Group.Mask<TItem>?>(Armors, new Group.Mask<TItem>(Armors));
                this.Books = new MaskItem<TItem, Group.Mask<TItem>?>(Books, new Group.Mask<TItem>(Books));
                this.Clothes = new MaskItem<TItem, Group.Mask<TItem>?>(Clothes, new Group.Mask<TItem>(Clothes));
                this.Containers = new MaskItem<TItem, Group.Mask<TItem>?>(Containers, new Group.Mask<TItem>(Containers));
                this.Doors = new MaskItem<TItem, Group.Mask<TItem>?>(Doors, new Group.Mask<TItem>(Doors));
                this.Ingredients = new MaskItem<TItem, Group.Mask<TItem>?>(Ingredients, new Group.Mask<TItem>(Ingredients));
                this.Lights = new MaskItem<TItem, Group.Mask<TItem>?>(Lights, new Group.Mask<TItem>(Lights));
                this.Miscellaneous = new MaskItem<TItem, Group.Mask<TItem>?>(Miscellaneous, new Group.Mask<TItem>(Miscellaneous));
                this.Statics = new MaskItem<TItem, Group.Mask<TItem>?>(Statics, new Group.Mask<TItem>(Statics));
                this.Grasses = new MaskItem<TItem, Group.Mask<TItem>?>(Grasses, new Group.Mask<TItem>(Grasses));
                this.Trees = new MaskItem<TItem, Group.Mask<TItem>?>(Trees, new Group.Mask<TItem>(Trees));
                this.Flora = new MaskItem<TItem, Group.Mask<TItem>?>(Flora, new Group.Mask<TItem>(Flora));
                this.Furniture = new MaskItem<TItem, Group.Mask<TItem>?>(Furniture, new Group.Mask<TItem>(Furniture));
                this.Weapons = new MaskItem<TItem, Group.Mask<TItem>?>(Weapons, new Group.Mask<TItem>(Weapons));
                this.Ammunitions = new MaskItem<TItem, Group.Mask<TItem>?>(Ammunitions, new Group.Mask<TItem>(Ammunitions));
                this.Npcs = new MaskItem<TItem, Group.Mask<TItem>?>(Npcs, new Group.Mask<TItem>(Npcs));
                this.Creatures = new MaskItem<TItem, Group.Mask<TItem>?>(Creatures, new Group.Mask<TItem>(Creatures));
                this.LeveledCreatures = new MaskItem<TItem, Group.Mask<TItem>?>(LeveledCreatures, new Group.Mask<TItem>(LeveledCreatures));
                this.SoulGems = new MaskItem<TItem, Group.Mask<TItem>?>(SoulGems, new Group.Mask<TItem>(SoulGems));
                this.Keys = new MaskItem<TItem, Group.Mask<TItem>?>(Keys, new Group.Mask<TItem>(Keys));
                this.Potions = new MaskItem<TItem, Group.Mask<TItem>?>(Potions, new Group.Mask<TItem>(Potions));
                this.Subspaces = new MaskItem<TItem, Group.Mask<TItem>?>(Subspaces, new Group.Mask<TItem>(Subspaces));
                this.SigilStones = new MaskItem<TItem, Group.Mask<TItem>?>(SigilStones, new Group.Mask<TItem>(SigilStones));
                this.LeveledItems = new MaskItem<TItem, Group.Mask<TItem>?>(LeveledItems, new Group.Mask<TItem>(LeveledItems));
                this.Weathers = new MaskItem<TItem, Group.Mask<TItem>?>(Weathers, new Group.Mask<TItem>(Weathers));
                this.Climates = new MaskItem<TItem, Group.Mask<TItem>?>(Climates, new Group.Mask<TItem>(Climates));
                this.Regions = new MaskItem<TItem, Group.Mask<TItem>?>(Regions, new Group.Mask<TItem>(Regions));
                this.Cells = new MaskItem<TItem, ListGroup.Mask<TItem>?>(Cells, new ListGroup.Mask<TItem>(Cells));
                this.Worldspaces = new MaskItem<TItem, Group.Mask<TItem>?>(Worldspaces, new Group.Mask<TItem>(Worldspaces));
                this.DialogTopics = new MaskItem<TItem, Group.Mask<TItem>?>(DialogTopics, new Group.Mask<TItem>(DialogTopics));
                this.Quests = new MaskItem<TItem, Group.Mask<TItem>?>(Quests, new Group.Mask<TItem>(Quests));
                this.IdleAnimations = new MaskItem<TItem, Group.Mask<TItem>?>(IdleAnimations, new Group.Mask<TItem>(IdleAnimations));
                this.AIPackages = new MaskItem<TItem, Group.Mask<TItem>?>(AIPackages, new Group.Mask<TItem>(AIPackages));
                this.CombatStyles = new MaskItem<TItem, Group.Mask<TItem>?>(CombatStyles, new Group.Mask<TItem>(CombatStyles));
                this.LoadScreens = new MaskItem<TItem, Group.Mask<TItem>?>(LoadScreens, new Group.Mask<TItem>(LoadScreens));
                this.LeveledSpells = new MaskItem<TItem, Group.Mask<TItem>?>(LeveledSpells, new Group.Mask<TItem>(LeveledSpells));
                this.AnimatedObjects = new MaskItem<TItem, Group.Mask<TItem>?>(AnimatedObjects, new Group.Mask<TItem>(AnimatedObjects));
                this.Waters = new MaskItem<TItem, Group.Mask<TItem>?>(Waters, new Group.Mask<TItem>(Waters));
                this.EffectShaders = new MaskItem<TItem, Group.Mask<TItem>?>(EffectShaders, new Group.Mask<TItem>(EffectShaders));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, OblivionModHeader.Mask<TItem>?>? ModHeader { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? GameSettings { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Globals { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Classes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Factions { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Hairs { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Eyes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Races { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Sounds { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Skills { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MagicEffects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Scripts { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LandTextures { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Enchantments { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Spells { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Birthsigns { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Activators { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? AlchemicalApparatus { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Armors { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Books { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Clothes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Containers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Doors { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Ingredients { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Lights { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Miscellaneous { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Statics { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Grasses { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Trees { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Flora { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Furniture { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Weapons { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Ammunitions { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Npcs { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Creatures { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LeveledCreatures { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? SoulGems { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Keys { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Potions { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Subspaces { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? SigilStones { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LeveledItems { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Weathers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Climates { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Regions { get; set; }
            public MaskItem<TItem, ListGroup.Mask<TItem>?>? Cells { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Worldspaces { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? DialogTopics { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Quests { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? IdleAnimations { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? AIPackages { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? CombatStyles { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LoadScreens { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LeveledSpells { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? AnimatedObjects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Waters { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? EffectShaders { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ModHeader, rhs.ModHeader)) return false;
                if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
                if (!object.Equals(this.Globals, rhs.Globals)) return false;
                if (!object.Equals(this.Classes, rhs.Classes)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
                if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
                if (!object.Equals(this.Races, rhs.Races)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                if (!object.Equals(this.Skills, rhs.Skills)) return false;
                if (!object.Equals(this.MagicEffects, rhs.MagicEffects)) return false;
                if (!object.Equals(this.Scripts, rhs.Scripts)) return false;
                if (!object.Equals(this.LandTextures, rhs.LandTextures)) return false;
                if (!object.Equals(this.Enchantments, rhs.Enchantments)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Birthsigns, rhs.Birthsigns)) return false;
                if (!object.Equals(this.Activators, rhs.Activators)) return false;
                if (!object.Equals(this.AlchemicalApparatus, rhs.AlchemicalApparatus)) return false;
                if (!object.Equals(this.Armors, rhs.Armors)) return false;
                if (!object.Equals(this.Books, rhs.Books)) return false;
                if (!object.Equals(this.Clothes, rhs.Clothes)) return false;
                if (!object.Equals(this.Containers, rhs.Containers)) return false;
                if (!object.Equals(this.Doors, rhs.Doors)) return false;
                if (!object.Equals(this.Ingredients, rhs.Ingredients)) return false;
                if (!object.Equals(this.Lights, rhs.Lights)) return false;
                if (!object.Equals(this.Miscellaneous, rhs.Miscellaneous)) return false;
                if (!object.Equals(this.Statics, rhs.Statics)) return false;
                if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
                if (!object.Equals(this.Trees, rhs.Trees)) return false;
                if (!object.Equals(this.Flora, rhs.Flora)) return false;
                if (!object.Equals(this.Furniture, rhs.Furniture)) return false;
                if (!object.Equals(this.Weapons, rhs.Weapons)) return false;
                if (!object.Equals(this.Ammunitions, rhs.Ammunitions)) return false;
                if (!object.Equals(this.Npcs, rhs.Npcs)) return false;
                if (!object.Equals(this.Creatures, rhs.Creatures)) return false;
                if (!object.Equals(this.LeveledCreatures, rhs.LeveledCreatures)) return false;
                if (!object.Equals(this.SoulGems, rhs.SoulGems)) return false;
                if (!object.Equals(this.Keys, rhs.Keys)) return false;
                if (!object.Equals(this.Potions, rhs.Potions)) return false;
                if (!object.Equals(this.Subspaces, rhs.Subspaces)) return false;
                if (!object.Equals(this.SigilStones, rhs.SigilStones)) return false;
                if (!object.Equals(this.LeveledItems, rhs.LeveledItems)) return false;
                if (!object.Equals(this.Weathers, rhs.Weathers)) return false;
                if (!object.Equals(this.Climates, rhs.Climates)) return false;
                if (!object.Equals(this.Regions, rhs.Regions)) return false;
                if (!object.Equals(this.Cells, rhs.Cells)) return false;
                if (!object.Equals(this.Worldspaces, rhs.Worldspaces)) return false;
                if (!object.Equals(this.DialogTopics, rhs.DialogTopics)) return false;
                if (!object.Equals(this.Quests, rhs.Quests)) return false;
                if (!object.Equals(this.IdleAnimations, rhs.IdleAnimations)) return false;
                if (!object.Equals(this.AIPackages, rhs.AIPackages)) return false;
                if (!object.Equals(this.CombatStyles, rhs.CombatStyles)) return false;
                if (!object.Equals(this.LoadScreens, rhs.LoadScreens)) return false;
                if (!object.Equals(this.LeveledSpells, rhs.LeveledSpells)) return false;
                if (!object.Equals(this.AnimatedObjects, rhs.AnimatedObjects)) return false;
                if (!object.Equals(this.Waters, rhs.Waters)) return false;
                if (!object.Equals(this.EffectShaders, rhs.EffectShaders)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ModHeader);
                hash.Add(this.GameSettings);
                hash.Add(this.Globals);
                hash.Add(this.Classes);
                hash.Add(this.Factions);
                hash.Add(this.Hairs);
                hash.Add(this.Eyes);
                hash.Add(this.Races);
                hash.Add(this.Sounds);
                hash.Add(this.Skills);
                hash.Add(this.MagicEffects);
                hash.Add(this.Scripts);
                hash.Add(this.LandTextures);
                hash.Add(this.Enchantments);
                hash.Add(this.Spells);
                hash.Add(this.Birthsigns);
                hash.Add(this.Activators);
                hash.Add(this.AlchemicalApparatus);
                hash.Add(this.Armors);
                hash.Add(this.Books);
                hash.Add(this.Clothes);
                hash.Add(this.Containers);
                hash.Add(this.Doors);
                hash.Add(this.Ingredients);
                hash.Add(this.Lights);
                hash.Add(this.Miscellaneous);
                hash.Add(this.Statics);
                hash.Add(this.Grasses);
                hash.Add(this.Trees);
                hash.Add(this.Flora);
                hash.Add(this.Furniture);
                hash.Add(this.Weapons);
                hash.Add(this.Ammunitions);
                hash.Add(this.Npcs);
                hash.Add(this.Creatures);
                hash.Add(this.LeveledCreatures);
                hash.Add(this.SoulGems);
                hash.Add(this.Keys);
                hash.Add(this.Potions);
                hash.Add(this.Subspaces);
                hash.Add(this.SigilStones);
                hash.Add(this.LeveledItems);
                hash.Add(this.Weathers);
                hash.Add(this.Climates);
                hash.Add(this.Regions);
                hash.Add(this.Cells);
                hash.Add(this.Worldspaces);
                hash.Add(this.DialogTopics);
                hash.Add(this.Quests);
                hash.Add(this.IdleAnimations);
                hash.Add(this.AIPackages);
                hash.Add(this.CombatStyles);
                hash.Add(this.LoadScreens);
                hash.Add(this.LeveledSpells);
                hash.Add(this.AnimatedObjects);
                hash.Add(this.Waters);
                hash.Add(this.EffectShaders);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (!eval(this.ModHeader.Overall)) return false;
                    if (this.ModHeader.Specific != null && !this.ModHeader.Specific.All(eval)) return false;
                }
                if (GameSettings != null)
                {
                    if (!eval(this.GameSettings.Overall)) return false;
                    if (this.GameSettings.Specific != null && !this.GameSettings.Specific.All(eval)) return false;
                }
                if (Globals != null)
                {
                    if (!eval(this.Globals.Overall)) return false;
                    if (this.Globals.Specific != null && !this.Globals.Specific.All(eval)) return false;
                }
                if (Classes != null)
                {
                    if (!eval(this.Classes.Overall)) return false;
                    if (this.Classes.Specific != null && !this.Classes.Specific.All(eval)) return false;
                }
                if (Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null && !this.Factions.Specific.All(eval)) return false;
                }
                if (Hairs != null)
                {
                    if (!eval(this.Hairs.Overall)) return false;
                    if (this.Hairs.Specific != null && !this.Hairs.Specific.All(eval)) return false;
                }
                if (Eyes != null)
                {
                    if (!eval(this.Eyes.Overall)) return false;
                    if (this.Eyes.Specific != null && !this.Eyes.Specific.All(eval)) return false;
                }
                if (Races != null)
                {
                    if (!eval(this.Races.Overall)) return false;
                    if (this.Races.Specific != null && !this.Races.Specific.All(eval)) return false;
                }
                if (Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null && !this.Sounds.Specific.All(eval)) return false;
                }
                if (Skills != null)
                {
                    if (!eval(this.Skills.Overall)) return false;
                    if (this.Skills.Specific != null && !this.Skills.Specific.All(eval)) return false;
                }
                if (MagicEffects != null)
                {
                    if (!eval(this.MagicEffects.Overall)) return false;
                    if (this.MagicEffects.Specific != null && !this.MagicEffects.Specific.All(eval)) return false;
                }
                if (Scripts != null)
                {
                    if (!eval(this.Scripts.Overall)) return false;
                    if (this.Scripts.Specific != null && !this.Scripts.Specific.All(eval)) return false;
                }
                if (LandTextures != null)
                {
                    if (!eval(this.LandTextures.Overall)) return false;
                    if (this.LandTextures.Specific != null && !this.LandTextures.Specific.All(eval)) return false;
                }
                if (Enchantments != null)
                {
                    if (!eval(this.Enchantments.Overall)) return false;
                    if (this.Enchantments.Specific != null && !this.Enchantments.Specific.All(eval)) return false;
                }
                if (Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null && !this.Spells.Specific.All(eval)) return false;
                }
                if (Birthsigns != null)
                {
                    if (!eval(this.Birthsigns.Overall)) return false;
                    if (this.Birthsigns.Specific != null && !this.Birthsigns.Specific.All(eval)) return false;
                }
                if (Activators != null)
                {
                    if (!eval(this.Activators.Overall)) return false;
                    if (this.Activators.Specific != null && !this.Activators.Specific.All(eval)) return false;
                }
                if (AlchemicalApparatus != null)
                {
                    if (!eval(this.AlchemicalApparatus.Overall)) return false;
                    if (this.AlchemicalApparatus.Specific != null && !this.AlchemicalApparatus.Specific.All(eval)) return false;
                }
                if (Armors != null)
                {
                    if (!eval(this.Armors.Overall)) return false;
                    if (this.Armors.Specific != null && !this.Armors.Specific.All(eval)) return false;
                }
                if (Books != null)
                {
                    if (!eval(this.Books.Overall)) return false;
                    if (this.Books.Specific != null && !this.Books.Specific.All(eval)) return false;
                }
                if (Clothes != null)
                {
                    if (!eval(this.Clothes.Overall)) return false;
                    if (this.Clothes.Specific != null && !this.Clothes.Specific.All(eval)) return false;
                }
                if (Containers != null)
                {
                    if (!eval(this.Containers.Overall)) return false;
                    if (this.Containers.Specific != null && !this.Containers.Specific.All(eval)) return false;
                }
                if (Doors != null)
                {
                    if (!eval(this.Doors.Overall)) return false;
                    if (this.Doors.Specific != null && !this.Doors.Specific.All(eval)) return false;
                }
                if (Ingredients != null)
                {
                    if (!eval(this.Ingredients.Overall)) return false;
                    if (this.Ingredients.Specific != null && !this.Ingredients.Specific.All(eval)) return false;
                }
                if (Lights != null)
                {
                    if (!eval(this.Lights.Overall)) return false;
                    if (this.Lights.Specific != null && !this.Lights.Specific.All(eval)) return false;
                }
                if (Miscellaneous != null)
                {
                    if (!eval(this.Miscellaneous.Overall)) return false;
                    if (this.Miscellaneous.Specific != null && !this.Miscellaneous.Specific.All(eval)) return false;
                }
                if (Statics != null)
                {
                    if (!eval(this.Statics.Overall)) return false;
                    if (this.Statics.Specific != null && !this.Statics.Specific.All(eval)) return false;
                }
                if (Grasses != null)
                {
                    if (!eval(this.Grasses.Overall)) return false;
                    if (this.Grasses.Specific != null && !this.Grasses.Specific.All(eval)) return false;
                }
                if (Trees != null)
                {
                    if (!eval(this.Trees.Overall)) return false;
                    if (this.Trees.Specific != null && !this.Trees.Specific.All(eval)) return false;
                }
                if (Flora != null)
                {
                    if (!eval(this.Flora.Overall)) return false;
                    if (this.Flora.Specific != null && !this.Flora.Specific.All(eval)) return false;
                }
                if (Furniture != null)
                {
                    if (!eval(this.Furniture.Overall)) return false;
                    if (this.Furniture.Specific != null && !this.Furniture.Specific.All(eval)) return false;
                }
                if (Weapons != null)
                {
                    if (!eval(this.Weapons.Overall)) return false;
                    if (this.Weapons.Specific != null && !this.Weapons.Specific.All(eval)) return false;
                }
                if (Ammunitions != null)
                {
                    if (!eval(this.Ammunitions.Overall)) return false;
                    if (this.Ammunitions.Specific != null && !this.Ammunitions.Specific.All(eval)) return false;
                }
                if (Npcs != null)
                {
                    if (!eval(this.Npcs.Overall)) return false;
                    if (this.Npcs.Specific != null && !this.Npcs.Specific.All(eval)) return false;
                }
                if (Creatures != null)
                {
                    if (!eval(this.Creatures.Overall)) return false;
                    if (this.Creatures.Specific != null && !this.Creatures.Specific.All(eval)) return false;
                }
                if (LeveledCreatures != null)
                {
                    if (!eval(this.LeveledCreatures.Overall)) return false;
                    if (this.LeveledCreatures.Specific != null && !this.LeveledCreatures.Specific.All(eval)) return false;
                }
                if (SoulGems != null)
                {
                    if (!eval(this.SoulGems.Overall)) return false;
                    if (this.SoulGems.Specific != null && !this.SoulGems.Specific.All(eval)) return false;
                }
                if (Keys != null)
                {
                    if (!eval(this.Keys.Overall)) return false;
                    if (this.Keys.Specific != null && !this.Keys.Specific.All(eval)) return false;
                }
                if (Potions != null)
                {
                    if (!eval(this.Potions.Overall)) return false;
                    if (this.Potions.Specific != null && !this.Potions.Specific.All(eval)) return false;
                }
                if (Subspaces != null)
                {
                    if (!eval(this.Subspaces.Overall)) return false;
                    if (this.Subspaces.Specific != null && !this.Subspaces.Specific.All(eval)) return false;
                }
                if (SigilStones != null)
                {
                    if (!eval(this.SigilStones.Overall)) return false;
                    if (this.SigilStones.Specific != null && !this.SigilStones.Specific.All(eval)) return false;
                }
                if (LeveledItems != null)
                {
                    if (!eval(this.LeveledItems.Overall)) return false;
                    if (this.LeveledItems.Specific != null && !this.LeveledItems.Specific.All(eval)) return false;
                }
                if (Weathers != null)
                {
                    if (!eval(this.Weathers.Overall)) return false;
                    if (this.Weathers.Specific != null && !this.Weathers.Specific.All(eval)) return false;
                }
                if (Climates != null)
                {
                    if (!eval(this.Climates.Overall)) return false;
                    if (this.Climates.Specific != null && !this.Climates.Specific.All(eval)) return false;
                }
                if (Regions != null)
                {
                    if (!eval(this.Regions.Overall)) return false;
                    if (this.Regions.Specific != null && !this.Regions.Specific.All(eval)) return false;
                }
                if (Cells != null)
                {
                    if (!eval(this.Cells.Overall)) return false;
                    if (this.Cells.Specific != null && !this.Cells.Specific.All(eval)) return false;
                }
                if (Worldspaces != null)
                {
                    if (!eval(this.Worldspaces.Overall)) return false;
                    if (this.Worldspaces.Specific != null && !this.Worldspaces.Specific.All(eval)) return false;
                }
                if (DialogTopics != null)
                {
                    if (!eval(this.DialogTopics.Overall)) return false;
                    if (this.DialogTopics.Specific != null && !this.DialogTopics.Specific.All(eval)) return false;
                }
                if (Quests != null)
                {
                    if (!eval(this.Quests.Overall)) return false;
                    if (this.Quests.Specific != null && !this.Quests.Specific.All(eval)) return false;
                }
                if (IdleAnimations != null)
                {
                    if (!eval(this.IdleAnimations.Overall)) return false;
                    if (this.IdleAnimations.Specific != null && !this.IdleAnimations.Specific.All(eval)) return false;
                }
                if (AIPackages != null)
                {
                    if (!eval(this.AIPackages.Overall)) return false;
                    if (this.AIPackages.Specific != null && !this.AIPackages.Specific.All(eval)) return false;
                }
                if (CombatStyles != null)
                {
                    if (!eval(this.CombatStyles.Overall)) return false;
                    if (this.CombatStyles.Specific != null && !this.CombatStyles.Specific.All(eval)) return false;
                }
                if (LoadScreens != null)
                {
                    if (!eval(this.LoadScreens.Overall)) return false;
                    if (this.LoadScreens.Specific != null && !this.LoadScreens.Specific.All(eval)) return false;
                }
                if (LeveledSpells != null)
                {
                    if (!eval(this.LeveledSpells.Overall)) return false;
                    if (this.LeveledSpells.Specific != null && !this.LeveledSpells.Specific.All(eval)) return false;
                }
                if (AnimatedObjects != null)
                {
                    if (!eval(this.AnimatedObjects.Overall)) return false;
                    if (this.AnimatedObjects.Specific != null && !this.AnimatedObjects.Specific.All(eval)) return false;
                }
                if (Waters != null)
                {
                    if (!eval(this.Waters.Overall)) return false;
                    if (this.Waters.Specific != null && !this.Waters.Specific.All(eval)) return false;
                }
                if (EffectShaders != null)
                {
                    if (!eval(this.EffectShaders.Overall)) return false;
                    if (this.EffectShaders.Specific != null && !this.EffectShaders.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (eval(this.ModHeader.Overall)) return true;
                    if (this.ModHeader.Specific != null && this.ModHeader.Specific.Any(eval)) return true;
                }
                if (GameSettings != null)
                {
                    if (eval(this.GameSettings.Overall)) return true;
                    if (this.GameSettings.Specific != null && this.GameSettings.Specific.Any(eval)) return true;
                }
                if (Globals != null)
                {
                    if (eval(this.Globals.Overall)) return true;
                    if (this.Globals.Specific != null && this.Globals.Specific.Any(eval)) return true;
                }
                if (Classes != null)
                {
                    if (eval(this.Classes.Overall)) return true;
                    if (this.Classes.Specific != null && this.Classes.Specific.Any(eval)) return true;
                }
                if (Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null && this.Factions.Specific.Any(eval)) return true;
                }
                if (Hairs != null)
                {
                    if (eval(this.Hairs.Overall)) return true;
                    if (this.Hairs.Specific != null && this.Hairs.Specific.Any(eval)) return true;
                }
                if (Eyes != null)
                {
                    if (eval(this.Eyes.Overall)) return true;
                    if (this.Eyes.Specific != null && this.Eyes.Specific.Any(eval)) return true;
                }
                if (Races != null)
                {
                    if (eval(this.Races.Overall)) return true;
                    if (this.Races.Specific != null && this.Races.Specific.Any(eval)) return true;
                }
                if (Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null && this.Sounds.Specific.Any(eval)) return true;
                }
                if (Skills != null)
                {
                    if (eval(this.Skills.Overall)) return true;
                    if (this.Skills.Specific != null && this.Skills.Specific.Any(eval)) return true;
                }
                if (MagicEffects != null)
                {
                    if (eval(this.MagicEffects.Overall)) return true;
                    if (this.MagicEffects.Specific != null && this.MagicEffects.Specific.Any(eval)) return true;
                }
                if (Scripts != null)
                {
                    if (eval(this.Scripts.Overall)) return true;
                    if (this.Scripts.Specific != null && this.Scripts.Specific.Any(eval)) return true;
                }
                if (LandTextures != null)
                {
                    if (eval(this.LandTextures.Overall)) return true;
                    if (this.LandTextures.Specific != null && this.LandTextures.Specific.Any(eval)) return true;
                }
                if (Enchantments != null)
                {
                    if (eval(this.Enchantments.Overall)) return true;
                    if (this.Enchantments.Specific != null && this.Enchantments.Specific.Any(eval)) return true;
                }
                if (Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null && this.Spells.Specific.Any(eval)) return true;
                }
                if (Birthsigns != null)
                {
                    if (eval(this.Birthsigns.Overall)) return true;
                    if (this.Birthsigns.Specific != null && this.Birthsigns.Specific.Any(eval)) return true;
                }
                if (Activators != null)
                {
                    if (eval(this.Activators.Overall)) return true;
                    if (this.Activators.Specific != null && this.Activators.Specific.Any(eval)) return true;
                }
                if (AlchemicalApparatus != null)
                {
                    if (eval(this.AlchemicalApparatus.Overall)) return true;
                    if (this.AlchemicalApparatus.Specific != null && this.AlchemicalApparatus.Specific.Any(eval)) return true;
                }
                if (Armors != null)
                {
                    if (eval(this.Armors.Overall)) return true;
                    if (this.Armors.Specific != null && this.Armors.Specific.Any(eval)) return true;
                }
                if (Books != null)
                {
                    if (eval(this.Books.Overall)) return true;
                    if (this.Books.Specific != null && this.Books.Specific.Any(eval)) return true;
                }
                if (Clothes != null)
                {
                    if (eval(this.Clothes.Overall)) return true;
                    if (this.Clothes.Specific != null && this.Clothes.Specific.Any(eval)) return true;
                }
                if (Containers != null)
                {
                    if (eval(this.Containers.Overall)) return true;
                    if (this.Containers.Specific != null && this.Containers.Specific.Any(eval)) return true;
                }
                if (Doors != null)
                {
                    if (eval(this.Doors.Overall)) return true;
                    if (this.Doors.Specific != null && this.Doors.Specific.Any(eval)) return true;
                }
                if (Ingredients != null)
                {
                    if (eval(this.Ingredients.Overall)) return true;
                    if (this.Ingredients.Specific != null && this.Ingredients.Specific.Any(eval)) return true;
                }
                if (Lights != null)
                {
                    if (eval(this.Lights.Overall)) return true;
                    if (this.Lights.Specific != null && this.Lights.Specific.Any(eval)) return true;
                }
                if (Miscellaneous != null)
                {
                    if (eval(this.Miscellaneous.Overall)) return true;
                    if (this.Miscellaneous.Specific != null && this.Miscellaneous.Specific.Any(eval)) return true;
                }
                if (Statics != null)
                {
                    if (eval(this.Statics.Overall)) return true;
                    if (this.Statics.Specific != null && this.Statics.Specific.Any(eval)) return true;
                }
                if (Grasses != null)
                {
                    if (eval(this.Grasses.Overall)) return true;
                    if (this.Grasses.Specific != null && this.Grasses.Specific.Any(eval)) return true;
                }
                if (Trees != null)
                {
                    if (eval(this.Trees.Overall)) return true;
                    if (this.Trees.Specific != null && this.Trees.Specific.Any(eval)) return true;
                }
                if (Flora != null)
                {
                    if (eval(this.Flora.Overall)) return true;
                    if (this.Flora.Specific != null && this.Flora.Specific.Any(eval)) return true;
                }
                if (Furniture != null)
                {
                    if (eval(this.Furniture.Overall)) return true;
                    if (this.Furniture.Specific != null && this.Furniture.Specific.Any(eval)) return true;
                }
                if (Weapons != null)
                {
                    if (eval(this.Weapons.Overall)) return true;
                    if (this.Weapons.Specific != null && this.Weapons.Specific.Any(eval)) return true;
                }
                if (Ammunitions != null)
                {
                    if (eval(this.Ammunitions.Overall)) return true;
                    if (this.Ammunitions.Specific != null && this.Ammunitions.Specific.Any(eval)) return true;
                }
                if (Npcs != null)
                {
                    if (eval(this.Npcs.Overall)) return true;
                    if (this.Npcs.Specific != null && this.Npcs.Specific.Any(eval)) return true;
                }
                if (Creatures != null)
                {
                    if (eval(this.Creatures.Overall)) return true;
                    if (this.Creatures.Specific != null && this.Creatures.Specific.Any(eval)) return true;
                }
                if (LeveledCreatures != null)
                {
                    if (eval(this.LeveledCreatures.Overall)) return true;
                    if (this.LeveledCreatures.Specific != null && this.LeveledCreatures.Specific.Any(eval)) return true;
                }
                if (SoulGems != null)
                {
                    if (eval(this.SoulGems.Overall)) return true;
                    if (this.SoulGems.Specific != null && this.SoulGems.Specific.Any(eval)) return true;
                }
                if (Keys != null)
                {
                    if (eval(this.Keys.Overall)) return true;
                    if (this.Keys.Specific != null && this.Keys.Specific.Any(eval)) return true;
                }
                if (Potions != null)
                {
                    if (eval(this.Potions.Overall)) return true;
                    if (this.Potions.Specific != null && this.Potions.Specific.Any(eval)) return true;
                }
                if (Subspaces != null)
                {
                    if (eval(this.Subspaces.Overall)) return true;
                    if (this.Subspaces.Specific != null && this.Subspaces.Specific.Any(eval)) return true;
                }
                if (SigilStones != null)
                {
                    if (eval(this.SigilStones.Overall)) return true;
                    if (this.SigilStones.Specific != null && this.SigilStones.Specific.Any(eval)) return true;
                }
                if (LeveledItems != null)
                {
                    if (eval(this.LeveledItems.Overall)) return true;
                    if (this.LeveledItems.Specific != null && this.LeveledItems.Specific.Any(eval)) return true;
                }
                if (Weathers != null)
                {
                    if (eval(this.Weathers.Overall)) return true;
                    if (this.Weathers.Specific != null && this.Weathers.Specific.Any(eval)) return true;
                }
                if (Climates != null)
                {
                    if (eval(this.Climates.Overall)) return true;
                    if (this.Climates.Specific != null && this.Climates.Specific.Any(eval)) return true;
                }
                if (Regions != null)
                {
                    if (eval(this.Regions.Overall)) return true;
                    if (this.Regions.Specific != null && this.Regions.Specific.Any(eval)) return true;
                }
                if (Cells != null)
                {
                    if (eval(this.Cells.Overall)) return true;
                    if (this.Cells.Specific != null && this.Cells.Specific.Any(eval)) return true;
                }
                if (Worldspaces != null)
                {
                    if (eval(this.Worldspaces.Overall)) return true;
                    if (this.Worldspaces.Specific != null && this.Worldspaces.Specific.Any(eval)) return true;
                }
                if (DialogTopics != null)
                {
                    if (eval(this.DialogTopics.Overall)) return true;
                    if (this.DialogTopics.Specific != null && this.DialogTopics.Specific.Any(eval)) return true;
                }
                if (Quests != null)
                {
                    if (eval(this.Quests.Overall)) return true;
                    if (this.Quests.Specific != null && this.Quests.Specific.Any(eval)) return true;
                }
                if (IdleAnimations != null)
                {
                    if (eval(this.IdleAnimations.Overall)) return true;
                    if (this.IdleAnimations.Specific != null && this.IdleAnimations.Specific.Any(eval)) return true;
                }
                if (AIPackages != null)
                {
                    if (eval(this.AIPackages.Overall)) return true;
                    if (this.AIPackages.Specific != null && this.AIPackages.Specific.Any(eval)) return true;
                }
                if (CombatStyles != null)
                {
                    if (eval(this.CombatStyles.Overall)) return true;
                    if (this.CombatStyles.Specific != null && this.CombatStyles.Specific.Any(eval)) return true;
                }
                if (LoadScreens != null)
                {
                    if (eval(this.LoadScreens.Overall)) return true;
                    if (this.LoadScreens.Specific != null && this.LoadScreens.Specific.Any(eval)) return true;
                }
                if (LeveledSpells != null)
                {
                    if (eval(this.LeveledSpells.Overall)) return true;
                    if (this.LeveledSpells.Specific != null && this.LeveledSpells.Specific.Any(eval)) return true;
                }
                if (AnimatedObjects != null)
                {
                    if (eval(this.AnimatedObjects.Overall)) return true;
                    if (this.AnimatedObjects.Specific != null && this.AnimatedObjects.Specific.Any(eval)) return true;
                }
                if (Waters != null)
                {
                    if (eval(this.Waters.Overall)) return true;
                    if (this.Waters.Specific != null && this.Waters.Specific.Any(eval)) return true;
                }
                if (EffectShaders != null)
                {
                    if (eval(this.EffectShaders.Overall)) return true;
                    if (this.EffectShaders.Specific != null && this.EffectShaders.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new OblivionMod.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ModHeader = this.ModHeader == null ? null : new MaskItem<R, OblivionModHeader.Mask<R>?>(eval(this.ModHeader.Overall), this.ModHeader.Specific?.Translate(eval));
                obj.GameSettings = this.GameSettings == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.GameSettings.Overall), this.GameSettings.Specific?.Translate(eval));
                obj.Globals = this.Globals == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Globals.Overall), this.Globals.Specific?.Translate(eval));
                obj.Classes = this.Classes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Classes.Overall), this.Classes.Specific?.Translate(eval));
                obj.Factions = this.Factions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Factions.Overall), this.Factions.Specific?.Translate(eval));
                obj.Hairs = this.Hairs == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Hairs.Overall), this.Hairs.Specific?.Translate(eval));
                obj.Eyes = this.Eyes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Eyes.Overall), this.Eyes.Specific?.Translate(eval));
                obj.Races = this.Races == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Races.Overall), this.Races.Specific?.Translate(eval));
                obj.Sounds = this.Sounds == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Sounds.Overall), this.Sounds.Specific?.Translate(eval));
                obj.Skills = this.Skills == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Skills.Overall), this.Skills.Specific?.Translate(eval));
                obj.MagicEffects = this.MagicEffects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MagicEffects.Overall), this.MagicEffects.Specific?.Translate(eval));
                obj.Scripts = this.Scripts == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Scripts.Overall), this.Scripts.Specific?.Translate(eval));
                obj.LandTextures = this.LandTextures == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LandTextures.Overall), this.LandTextures.Specific?.Translate(eval));
                obj.Enchantments = this.Enchantments == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Enchantments.Overall), this.Enchantments.Specific?.Translate(eval));
                obj.Spells = this.Spells == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Spells.Overall), this.Spells.Specific?.Translate(eval));
                obj.Birthsigns = this.Birthsigns == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Birthsigns.Overall), this.Birthsigns.Specific?.Translate(eval));
                obj.Activators = this.Activators == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Activators.Overall), this.Activators.Specific?.Translate(eval));
                obj.AlchemicalApparatus = this.AlchemicalApparatus == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.AlchemicalApparatus.Overall), this.AlchemicalApparatus.Specific?.Translate(eval));
                obj.Armors = this.Armors == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Armors.Overall), this.Armors.Specific?.Translate(eval));
                obj.Books = this.Books == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Books.Overall), this.Books.Specific?.Translate(eval));
                obj.Clothes = this.Clothes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Clothes.Overall), this.Clothes.Specific?.Translate(eval));
                obj.Containers = this.Containers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Containers.Overall), this.Containers.Specific?.Translate(eval));
                obj.Doors = this.Doors == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Doors.Overall), this.Doors.Specific?.Translate(eval));
                obj.Ingredients = this.Ingredients == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Ingredients.Overall), this.Ingredients.Specific?.Translate(eval));
                obj.Lights = this.Lights == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Lights.Overall), this.Lights.Specific?.Translate(eval));
                obj.Miscellaneous = this.Miscellaneous == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Miscellaneous.Overall), this.Miscellaneous.Specific?.Translate(eval));
                obj.Statics = this.Statics == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Statics.Overall), this.Statics.Specific?.Translate(eval));
                obj.Grasses = this.Grasses == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Grasses.Overall), this.Grasses.Specific?.Translate(eval));
                obj.Trees = this.Trees == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Trees.Overall), this.Trees.Specific?.Translate(eval));
                obj.Flora = this.Flora == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Flora.Overall), this.Flora.Specific?.Translate(eval));
                obj.Furniture = this.Furniture == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Furniture.Overall), this.Furniture.Specific?.Translate(eval));
                obj.Weapons = this.Weapons == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Weapons.Overall), this.Weapons.Specific?.Translate(eval));
                obj.Ammunitions = this.Ammunitions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Ammunitions.Overall), this.Ammunitions.Specific?.Translate(eval));
                obj.Npcs = this.Npcs == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Npcs.Overall), this.Npcs.Specific?.Translate(eval));
                obj.Creatures = this.Creatures == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Creatures.Overall), this.Creatures.Specific?.Translate(eval));
                obj.LeveledCreatures = this.LeveledCreatures == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LeveledCreatures.Overall), this.LeveledCreatures.Specific?.Translate(eval));
                obj.SoulGems = this.SoulGems == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.SoulGems.Overall), this.SoulGems.Specific?.Translate(eval));
                obj.Keys = this.Keys == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Keys.Overall), this.Keys.Specific?.Translate(eval));
                obj.Potions = this.Potions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Potions.Overall), this.Potions.Specific?.Translate(eval));
                obj.Subspaces = this.Subspaces == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Subspaces.Overall), this.Subspaces.Specific?.Translate(eval));
                obj.SigilStones = this.SigilStones == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.SigilStones.Overall), this.SigilStones.Specific?.Translate(eval));
                obj.LeveledItems = this.LeveledItems == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LeveledItems.Overall), this.LeveledItems.Specific?.Translate(eval));
                obj.Weathers = this.Weathers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Weathers.Overall), this.Weathers.Specific?.Translate(eval));
                obj.Climates = this.Climates == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Climates.Overall), this.Climates.Specific?.Translate(eval));
                obj.Regions = this.Regions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Regions.Overall), this.Regions.Specific?.Translate(eval));
                obj.Cells = this.Cells == null ? null : new MaskItem<R, ListGroup.Mask<R>?>(eval(this.Cells.Overall), this.Cells.Specific?.Translate(eval));
                obj.Worldspaces = this.Worldspaces == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Worldspaces.Overall), this.Worldspaces.Specific?.Translate(eval));
                obj.DialogTopics = this.DialogTopics == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.DialogTopics.Overall), this.DialogTopics.Specific?.Translate(eval));
                obj.Quests = this.Quests == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Quests.Overall), this.Quests.Specific?.Translate(eval));
                obj.IdleAnimations = this.IdleAnimations == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.IdleAnimations.Overall), this.IdleAnimations.Specific?.Translate(eval));
                obj.AIPackages = this.AIPackages == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.AIPackages.Overall), this.AIPackages.Specific?.Translate(eval));
                obj.CombatStyles = this.CombatStyles == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.CombatStyles.Overall), this.CombatStyles.Specific?.Translate(eval));
                obj.LoadScreens = this.LoadScreens == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LoadScreens.Overall), this.LoadScreens.Specific?.Translate(eval));
                obj.LeveledSpells = this.LeveledSpells == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LeveledSpells.Overall), this.LeveledSpells.Specific?.Translate(eval));
                obj.AnimatedObjects = this.AnimatedObjects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.AnimatedObjects.Overall), this.AnimatedObjects.Specific?.Translate(eval));
                obj.Waters = this.Waters == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Waters.Overall), this.Waters.Specific?.Translate(eval));
                obj.EffectShaders = this.EffectShaders == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.EffectShaders.Overall), this.EffectShaders.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(OblivionMod.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, OblivionMod.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(OblivionMod.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ModHeader?.Overall ?? true)
                    {
                        ModHeader?.ToString(fg);
                    }
                    if (printMask?.GameSettings?.Overall ?? true)
                    {
                        GameSettings?.ToString(fg);
                    }
                    if (printMask?.Globals?.Overall ?? true)
                    {
                        Globals?.ToString(fg);
                    }
                    if (printMask?.Classes?.Overall ?? true)
                    {
                        Classes?.ToString(fg);
                    }
                    if (printMask?.Factions?.Overall ?? true)
                    {
                        Factions?.ToString(fg);
                    }
                    if (printMask?.Hairs?.Overall ?? true)
                    {
                        Hairs?.ToString(fg);
                    }
                    if (printMask?.Eyes?.Overall ?? true)
                    {
                        Eyes?.ToString(fg);
                    }
                    if (printMask?.Races?.Overall ?? true)
                    {
                        Races?.ToString(fg);
                    }
                    if (printMask?.Sounds?.Overall ?? true)
                    {
                        Sounds?.ToString(fg);
                    }
                    if (printMask?.Skills?.Overall ?? true)
                    {
                        Skills?.ToString(fg);
                    }
                    if (printMask?.MagicEffects?.Overall ?? true)
                    {
                        MagicEffects?.ToString(fg);
                    }
                    if (printMask?.Scripts?.Overall ?? true)
                    {
                        Scripts?.ToString(fg);
                    }
                    if (printMask?.LandTextures?.Overall ?? true)
                    {
                        LandTextures?.ToString(fg);
                    }
                    if (printMask?.Enchantments?.Overall ?? true)
                    {
                        Enchantments?.ToString(fg);
                    }
                    if (printMask?.Spells?.Overall ?? true)
                    {
                        Spells?.ToString(fg);
                    }
                    if (printMask?.Birthsigns?.Overall ?? true)
                    {
                        Birthsigns?.ToString(fg);
                    }
                    if (printMask?.Activators?.Overall ?? true)
                    {
                        Activators?.ToString(fg);
                    }
                    if (printMask?.AlchemicalApparatus?.Overall ?? true)
                    {
                        AlchemicalApparatus?.ToString(fg);
                    }
                    if (printMask?.Armors?.Overall ?? true)
                    {
                        Armors?.ToString(fg);
                    }
                    if (printMask?.Books?.Overall ?? true)
                    {
                        Books?.ToString(fg);
                    }
                    if (printMask?.Clothes?.Overall ?? true)
                    {
                        Clothes?.ToString(fg);
                    }
                    if (printMask?.Containers?.Overall ?? true)
                    {
                        Containers?.ToString(fg);
                    }
                    if (printMask?.Doors?.Overall ?? true)
                    {
                        Doors?.ToString(fg);
                    }
                    if (printMask?.Ingredients?.Overall ?? true)
                    {
                        Ingredients?.ToString(fg);
                    }
                    if (printMask?.Lights?.Overall ?? true)
                    {
                        Lights?.ToString(fg);
                    }
                    if (printMask?.Miscellaneous?.Overall ?? true)
                    {
                        Miscellaneous?.ToString(fg);
                    }
                    if (printMask?.Statics?.Overall ?? true)
                    {
                        Statics?.ToString(fg);
                    }
                    if (printMask?.Grasses?.Overall ?? true)
                    {
                        Grasses?.ToString(fg);
                    }
                    if (printMask?.Trees?.Overall ?? true)
                    {
                        Trees?.ToString(fg);
                    }
                    if (printMask?.Flora?.Overall ?? true)
                    {
                        Flora?.ToString(fg);
                    }
                    if (printMask?.Furniture?.Overall ?? true)
                    {
                        Furniture?.ToString(fg);
                    }
                    if (printMask?.Weapons?.Overall ?? true)
                    {
                        Weapons?.ToString(fg);
                    }
                    if (printMask?.Ammunitions?.Overall ?? true)
                    {
                        Ammunitions?.ToString(fg);
                    }
                    if (printMask?.Npcs?.Overall ?? true)
                    {
                        Npcs?.ToString(fg);
                    }
                    if (printMask?.Creatures?.Overall ?? true)
                    {
                        Creatures?.ToString(fg);
                    }
                    if (printMask?.LeveledCreatures?.Overall ?? true)
                    {
                        LeveledCreatures?.ToString(fg);
                    }
                    if (printMask?.SoulGems?.Overall ?? true)
                    {
                        SoulGems?.ToString(fg);
                    }
                    if (printMask?.Keys?.Overall ?? true)
                    {
                        Keys?.ToString(fg);
                    }
                    if (printMask?.Potions?.Overall ?? true)
                    {
                        Potions?.ToString(fg);
                    }
                    if (printMask?.Subspaces?.Overall ?? true)
                    {
                        Subspaces?.ToString(fg);
                    }
                    if (printMask?.SigilStones?.Overall ?? true)
                    {
                        SigilStones?.ToString(fg);
                    }
                    if (printMask?.LeveledItems?.Overall ?? true)
                    {
                        LeveledItems?.ToString(fg);
                    }
                    if (printMask?.Weathers?.Overall ?? true)
                    {
                        Weathers?.ToString(fg);
                    }
                    if (printMask?.Climates?.Overall ?? true)
                    {
                        Climates?.ToString(fg);
                    }
                    if (printMask?.Regions?.Overall ?? true)
                    {
                        Regions?.ToString(fg);
                    }
                    if (printMask?.Cells?.Overall ?? true)
                    {
                        Cells?.ToString(fg);
                    }
                    if (printMask?.Worldspaces?.Overall ?? true)
                    {
                        Worldspaces?.ToString(fg);
                    }
                    if (printMask?.DialogTopics?.Overall ?? true)
                    {
                        DialogTopics?.ToString(fg);
                    }
                    if (printMask?.Quests?.Overall ?? true)
                    {
                        Quests?.ToString(fg);
                    }
                    if (printMask?.IdleAnimations?.Overall ?? true)
                    {
                        IdleAnimations?.ToString(fg);
                    }
                    if (printMask?.AIPackages?.Overall ?? true)
                    {
                        AIPackages?.ToString(fg);
                    }
                    if (printMask?.CombatStyles?.Overall ?? true)
                    {
                        CombatStyles?.ToString(fg);
                    }
                    if (printMask?.LoadScreens?.Overall ?? true)
                    {
                        LoadScreens?.ToString(fg);
                    }
                    if (printMask?.LeveledSpells?.Overall ?? true)
                    {
                        LeveledSpells?.ToString(fg);
                    }
                    if (printMask?.AnimatedObjects?.Overall ?? true)
                    {
                        AnimatedObjects?.ToString(fg);
                    }
                    if (printMask?.Waters?.Overall ?? true)
                    {
                        Waters?.ToString(fg);
                    }
                    if (printMask?.EffectShaders?.Overall ?? true)
                    {
                        EffectShaders?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, OblivionModHeader.ErrorMask?>? ModHeader;
            public MaskItem<Exception?, Group.ErrorMask<GameSetting.ErrorMask>?>? GameSettings;
            public MaskItem<Exception?, Group.ErrorMask<Global.ErrorMask>?>? Globals;
            public MaskItem<Exception?, Group.ErrorMask<Class.ErrorMask>?>? Classes;
            public MaskItem<Exception?, Group.ErrorMask<Faction.ErrorMask>?>? Factions;
            public MaskItem<Exception?, Group.ErrorMask<Hair.ErrorMask>?>? Hairs;
            public MaskItem<Exception?, Group.ErrorMask<Eye.ErrorMask>?>? Eyes;
            public MaskItem<Exception?, Group.ErrorMask<Race.ErrorMask>?>? Races;
            public MaskItem<Exception?, Group.ErrorMask<Sound.ErrorMask>?>? Sounds;
            public MaskItem<Exception?, Group.ErrorMask<SkillRecord.ErrorMask>?>? Skills;
            public MaskItem<Exception?, Group.ErrorMask<MagicEffect.ErrorMask>?>? MagicEffects;
            public MaskItem<Exception?, Group.ErrorMask<Script.ErrorMask>?>? Scripts;
            public MaskItem<Exception?, Group.ErrorMask<LandTexture.ErrorMask>?>? LandTextures;
            public MaskItem<Exception?, Group.ErrorMask<Enchantment.ErrorMask>?>? Enchantments;
            public MaskItem<Exception?, Group.ErrorMask<SpellUnleveled.ErrorMask>?>? Spells;
            public MaskItem<Exception?, Group.ErrorMask<Birthsign.ErrorMask>?>? Birthsigns;
            public MaskItem<Exception?, Group.ErrorMask<Activator.ErrorMask>?>? Activators;
            public MaskItem<Exception?, Group.ErrorMask<AlchemicalApparatus.ErrorMask>?>? AlchemicalApparatus;
            public MaskItem<Exception?, Group.ErrorMask<Armor.ErrorMask>?>? Armors;
            public MaskItem<Exception?, Group.ErrorMask<Book.ErrorMask>?>? Books;
            public MaskItem<Exception?, Group.ErrorMask<Clothing.ErrorMask>?>? Clothes;
            public MaskItem<Exception?, Group.ErrorMask<Container.ErrorMask>?>? Containers;
            public MaskItem<Exception?, Group.ErrorMask<Door.ErrorMask>?>? Doors;
            public MaskItem<Exception?, Group.ErrorMask<Ingredient.ErrorMask>?>? Ingredients;
            public MaskItem<Exception?, Group.ErrorMask<Light.ErrorMask>?>? Lights;
            public MaskItem<Exception?, Group.ErrorMask<Miscellaneous.ErrorMask>?>? Miscellaneous;
            public MaskItem<Exception?, Group.ErrorMask<Static.ErrorMask>?>? Statics;
            public MaskItem<Exception?, Group.ErrorMask<Grass.ErrorMask>?>? Grasses;
            public MaskItem<Exception?, Group.ErrorMask<Tree.ErrorMask>?>? Trees;
            public MaskItem<Exception?, Group.ErrorMask<Flora.ErrorMask>?>? Flora;
            public MaskItem<Exception?, Group.ErrorMask<Furniture.ErrorMask>?>? Furniture;
            public MaskItem<Exception?, Group.ErrorMask<Weapon.ErrorMask>?>? Weapons;
            public MaskItem<Exception?, Group.ErrorMask<Ammunition.ErrorMask>?>? Ammunitions;
            public MaskItem<Exception?, Group.ErrorMask<Npc.ErrorMask>?>? Npcs;
            public MaskItem<Exception?, Group.ErrorMask<Creature.ErrorMask>?>? Creatures;
            public MaskItem<Exception?, Group.ErrorMask<LeveledCreature.ErrorMask>?>? LeveledCreatures;
            public MaskItem<Exception?, Group.ErrorMask<SoulGem.ErrorMask>?>? SoulGems;
            public MaskItem<Exception?, Group.ErrorMask<Key.ErrorMask>?>? Keys;
            public MaskItem<Exception?, Group.ErrorMask<Potion.ErrorMask>?>? Potions;
            public MaskItem<Exception?, Group.ErrorMask<Subspace.ErrorMask>?>? Subspaces;
            public MaskItem<Exception?, Group.ErrorMask<SigilStone.ErrorMask>?>? SigilStones;
            public MaskItem<Exception?, Group.ErrorMask<LeveledItem.ErrorMask>?>? LeveledItems;
            public MaskItem<Exception?, Group.ErrorMask<Weather.ErrorMask>?>? Weathers;
            public MaskItem<Exception?, Group.ErrorMask<Climate.ErrorMask>?>? Climates;
            public MaskItem<Exception?, Group.ErrorMask<Region.ErrorMask>?>? Regions;
            public MaskItem<Exception?, ListGroup.ErrorMask<CellBlock.ErrorMask>?>? Cells;
            public MaskItem<Exception?, Group.ErrorMask<Worldspace.ErrorMask>?>? Worldspaces;
            public MaskItem<Exception?, Group.ErrorMask<DialogTopic.ErrorMask>?>? DialogTopics;
            public MaskItem<Exception?, Group.ErrorMask<Quest.ErrorMask>?>? Quests;
            public MaskItem<Exception?, Group.ErrorMask<IdleAnimation.ErrorMask>?>? IdleAnimations;
            public MaskItem<Exception?, Group.ErrorMask<AIPackage.ErrorMask>?>? AIPackages;
            public MaskItem<Exception?, Group.ErrorMask<CombatStyle.ErrorMask>?>? CombatStyles;
            public MaskItem<Exception?, Group.ErrorMask<LoadScreen.ErrorMask>?>? LoadScreens;
            public MaskItem<Exception?, Group.ErrorMask<LeveledSpell.ErrorMask>?>? LeveledSpells;
            public MaskItem<Exception?, Group.ErrorMask<AnimatedObject.ErrorMask>?>? AnimatedObjects;
            public MaskItem<Exception?, Group.ErrorMask<Water.ErrorMask>?>? Waters;
            public MaskItem<Exception?, Group.ErrorMask<EffectShader.ErrorMask>?>? EffectShaders;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
                switch (enu)
                {
                    case OblivionMod_FieldIndex.ModHeader:
                        return ModHeader;
                    case OblivionMod_FieldIndex.GameSettings:
                        return GameSettings;
                    case OblivionMod_FieldIndex.Globals:
                        return Globals;
                    case OblivionMod_FieldIndex.Classes:
                        return Classes;
                    case OblivionMod_FieldIndex.Factions:
                        return Factions;
                    case OblivionMod_FieldIndex.Hairs:
                        return Hairs;
                    case OblivionMod_FieldIndex.Eyes:
                        return Eyes;
                    case OblivionMod_FieldIndex.Races:
                        return Races;
                    case OblivionMod_FieldIndex.Sounds:
                        return Sounds;
                    case OblivionMod_FieldIndex.Skills:
                        return Skills;
                    case OblivionMod_FieldIndex.MagicEffects:
                        return MagicEffects;
                    case OblivionMod_FieldIndex.Scripts:
                        return Scripts;
                    case OblivionMod_FieldIndex.LandTextures:
                        return LandTextures;
                    case OblivionMod_FieldIndex.Enchantments:
                        return Enchantments;
                    case OblivionMod_FieldIndex.Spells:
                        return Spells;
                    case OblivionMod_FieldIndex.Birthsigns:
                        return Birthsigns;
                    case OblivionMod_FieldIndex.Activators:
                        return Activators;
                    case OblivionMod_FieldIndex.AlchemicalApparatus:
                        return AlchemicalApparatus;
                    case OblivionMod_FieldIndex.Armors:
                        return Armors;
                    case OblivionMod_FieldIndex.Books:
                        return Books;
                    case OblivionMod_FieldIndex.Clothes:
                        return Clothes;
                    case OblivionMod_FieldIndex.Containers:
                        return Containers;
                    case OblivionMod_FieldIndex.Doors:
                        return Doors;
                    case OblivionMod_FieldIndex.Ingredients:
                        return Ingredients;
                    case OblivionMod_FieldIndex.Lights:
                        return Lights;
                    case OblivionMod_FieldIndex.Miscellaneous:
                        return Miscellaneous;
                    case OblivionMod_FieldIndex.Statics:
                        return Statics;
                    case OblivionMod_FieldIndex.Grasses:
                        return Grasses;
                    case OblivionMod_FieldIndex.Trees:
                        return Trees;
                    case OblivionMod_FieldIndex.Flora:
                        return Flora;
                    case OblivionMod_FieldIndex.Furniture:
                        return Furniture;
                    case OblivionMod_FieldIndex.Weapons:
                        return Weapons;
                    case OblivionMod_FieldIndex.Ammunitions:
                        return Ammunitions;
                    case OblivionMod_FieldIndex.Npcs:
                        return Npcs;
                    case OblivionMod_FieldIndex.Creatures:
                        return Creatures;
                    case OblivionMod_FieldIndex.LeveledCreatures:
                        return LeveledCreatures;
                    case OblivionMod_FieldIndex.SoulGems:
                        return SoulGems;
                    case OblivionMod_FieldIndex.Keys:
                        return Keys;
                    case OblivionMod_FieldIndex.Potions:
                        return Potions;
                    case OblivionMod_FieldIndex.Subspaces:
                        return Subspaces;
                    case OblivionMod_FieldIndex.SigilStones:
                        return SigilStones;
                    case OblivionMod_FieldIndex.LeveledItems:
                        return LeveledItems;
                    case OblivionMod_FieldIndex.Weathers:
                        return Weathers;
                    case OblivionMod_FieldIndex.Climates:
                        return Climates;
                    case OblivionMod_FieldIndex.Regions:
                        return Regions;
                    case OblivionMod_FieldIndex.Cells:
                        return Cells;
                    case OblivionMod_FieldIndex.Worldspaces:
                        return Worldspaces;
                    case OblivionMod_FieldIndex.DialogTopics:
                        return DialogTopics;
                    case OblivionMod_FieldIndex.Quests:
                        return Quests;
                    case OblivionMod_FieldIndex.IdleAnimations:
                        return IdleAnimations;
                    case OblivionMod_FieldIndex.AIPackages:
                        return AIPackages;
                    case OblivionMod_FieldIndex.CombatStyles:
                        return CombatStyles;
                    case OblivionMod_FieldIndex.LoadScreens:
                        return LoadScreens;
                    case OblivionMod_FieldIndex.LeveledSpells:
                        return LeveledSpells;
                    case OblivionMod_FieldIndex.AnimatedObjects:
                        return AnimatedObjects;
                    case OblivionMod_FieldIndex.Waters:
                        return Waters;
                    case OblivionMod_FieldIndex.EffectShaders:
                        return EffectShaders;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
                switch (enu)
                {
                    case OblivionMod_FieldIndex.ModHeader:
                        this.ModHeader = new MaskItem<Exception?, OblivionModHeader.ErrorMask?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.GameSettings:
                        this.GameSettings = new MaskItem<Exception?, Group.ErrorMask<GameSetting.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Globals:
                        this.Globals = new MaskItem<Exception?, Group.ErrorMask<Global.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Classes:
                        this.Classes = new MaskItem<Exception?, Group.ErrorMask<Class.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, Group.ErrorMask<Faction.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Hairs:
                        this.Hairs = new MaskItem<Exception?, Group.ErrorMask<Hair.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Eyes:
                        this.Eyes = new MaskItem<Exception?, Group.ErrorMask<Eye.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Races:
                        this.Races = new MaskItem<Exception?, Group.ErrorMask<Race.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, Group.ErrorMask<Sound.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Skills:
                        this.Skills = new MaskItem<Exception?, Group.ErrorMask<SkillRecord.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.MagicEffects:
                        this.MagicEffects = new MaskItem<Exception?, Group.ErrorMask<MagicEffect.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Scripts:
                        this.Scripts = new MaskItem<Exception?, Group.ErrorMask<Script.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.LandTextures:
                        this.LandTextures = new MaskItem<Exception?, Group.ErrorMask<LandTexture.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Enchantments:
                        this.Enchantments = new MaskItem<Exception?, Group.ErrorMask<Enchantment.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, Group.ErrorMask<SpellUnleveled.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Birthsigns:
                        this.Birthsigns = new MaskItem<Exception?, Group.ErrorMask<Birthsign.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Activators:
                        this.Activators = new MaskItem<Exception?, Group.ErrorMask<Activator.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.AlchemicalApparatus:
                        this.AlchemicalApparatus = new MaskItem<Exception?, Group.ErrorMask<AlchemicalApparatus.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Armors:
                        this.Armors = new MaskItem<Exception?, Group.ErrorMask<Armor.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Books:
                        this.Books = new MaskItem<Exception?, Group.ErrorMask<Book.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Clothes:
                        this.Clothes = new MaskItem<Exception?, Group.ErrorMask<Clothing.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Containers:
                        this.Containers = new MaskItem<Exception?, Group.ErrorMask<Container.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Doors:
                        this.Doors = new MaskItem<Exception?, Group.ErrorMask<Door.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Ingredients:
                        this.Ingredients = new MaskItem<Exception?, Group.ErrorMask<Ingredient.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Lights:
                        this.Lights = new MaskItem<Exception?, Group.ErrorMask<Light.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Miscellaneous:
                        this.Miscellaneous = new MaskItem<Exception?, Group.ErrorMask<Miscellaneous.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Statics:
                        this.Statics = new MaskItem<Exception?, Group.ErrorMask<Static.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Grasses:
                        this.Grasses = new MaskItem<Exception?, Group.ErrorMask<Grass.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Trees:
                        this.Trees = new MaskItem<Exception?, Group.ErrorMask<Tree.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Flora:
                        this.Flora = new MaskItem<Exception?, Group.ErrorMask<Flora.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Furniture:
                        this.Furniture = new MaskItem<Exception?, Group.ErrorMask<Furniture.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Weapons:
                        this.Weapons = new MaskItem<Exception?, Group.ErrorMask<Weapon.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Ammunitions:
                        this.Ammunitions = new MaskItem<Exception?, Group.ErrorMask<Ammunition.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Npcs:
                        this.Npcs = new MaskItem<Exception?, Group.ErrorMask<Npc.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Creatures:
                        this.Creatures = new MaskItem<Exception?, Group.ErrorMask<Creature.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.LeveledCreatures:
                        this.LeveledCreatures = new MaskItem<Exception?, Group.ErrorMask<LeveledCreature.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.SoulGems:
                        this.SoulGems = new MaskItem<Exception?, Group.ErrorMask<SoulGem.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Keys:
                        this.Keys = new MaskItem<Exception?, Group.ErrorMask<Key.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Potions:
                        this.Potions = new MaskItem<Exception?, Group.ErrorMask<Potion.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Subspaces:
                        this.Subspaces = new MaskItem<Exception?, Group.ErrorMask<Subspace.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.SigilStones:
                        this.SigilStones = new MaskItem<Exception?, Group.ErrorMask<SigilStone.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.LeveledItems:
                        this.LeveledItems = new MaskItem<Exception?, Group.ErrorMask<LeveledItem.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Weathers:
                        this.Weathers = new MaskItem<Exception?, Group.ErrorMask<Weather.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Climates:
                        this.Climates = new MaskItem<Exception?, Group.ErrorMask<Climate.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Regions:
                        this.Regions = new MaskItem<Exception?, Group.ErrorMask<Region.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Cells:
                        this.Cells = new MaskItem<Exception?, ListGroup.ErrorMask<CellBlock.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Worldspaces:
                        this.Worldspaces = new MaskItem<Exception?, Group.ErrorMask<Worldspace.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.DialogTopics:
                        this.DialogTopics = new MaskItem<Exception?, Group.ErrorMask<DialogTopic.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Quests:
                        this.Quests = new MaskItem<Exception?, Group.ErrorMask<Quest.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.IdleAnimations:
                        this.IdleAnimations = new MaskItem<Exception?, Group.ErrorMask<IdleAnimation.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.AIPackages:
                        this.AIPackages = new MaskItem<Exception?, Group.ErrorMask<AIPackage.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.CombatStyles:
                        this.CombatStyles = new MaskItem<Exception?, Group.ErrorMask<CombatStyle.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.LoadScreens:
                        this.LoadScreens = new MaskItem<Exception?, Group.ErrorMask<LoadScreen.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.LeveledSpells:
                        this.LeveledSpells = new MaskItem<Exception?, Group.ErrorMask<LeveledSpell.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.AnimatedObjects:
                        this.AnimatedObjects = new MaskItem<Exception?, Group.ErrorMask<AnimatedObject.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Waters:
                        this.Waters = new MaskItem<Exception?, Group.ErrorMask<Water.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.EffectShaders:
                        this.EffectShaders = new MaskItem<Exception?, Group.ErrorMask<EffectShader.ErrorMask>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
                switch (enu)
                {
                    case OblivionMod_FieldIndex.ModHeader:
                        this.ModHeader = (MaskItem<Exception?, OblivionModHeader.ErrorMask?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.GameSettings:
                        this.GameSettings = (MaskItem<Exception?, Group.ErrorMask<GameSetting.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Globals:
                        this.Globals = (MaskItem<Exception?, Group.ErrorMask<Global.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Classes:
                        this.Classes = (MaskItem<Exception?, Group.ErrorMask<Class.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, Group.ErrorMask<Faction.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Hairs:
                        this.Hairs = (MaskItem<Exception?, Group.ErrorMask<Hair.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Eyes:
                        this.Eyes = (MaskItem<Exception?, Group.ErrorMask<Eye.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Races:
                        this.Races = (MaskItem<Exception?, Group.ErrorMask<Race.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, Group.ErrorMask<Sound.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Skills:
                        this.Skills = (MaskItem<Exception?, Group.ErrorMask<SkillRecord.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.MagicEffects:
                        this.MagicEffects = (MaskItem<Exception?, Group.ErrorMask<MagicEffect.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Scripts:
                        this.Scripts = (MaskItem<Exception?, Group.ErrorMask<Script.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.LandTextures:
                        this.LandTextures = (MaskItem<Exception?, Group.ErrorMask<LandTexture.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Enchantments:
                        this.Enchantments = (MaskItem<Exception?, Group.ErrorMask<Enchantment.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, Group.ErrorMask<SpellUnleveled.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Birthsigns:
                        this.Birthsigns = (MaskItem<Exception?, Group.ErrorMask<Birthsign.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Activators:
                        this.Activators = (MaskItem<Exception?, Group.ErrorMask<Activator.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.AlchemicalApparatus:
                        this.AlchemicalApparatus = (MaskItem<Exception?, Group.ErrorMask<AlchemicalApparatus.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Armors:
                        this.Armors = (MaskItem<Exception?, Group.ErrorMask<Armor.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Books:
                        this.Books = (MaskItem<Exception?, Group.ErrorMask<Book.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Clothes:
                        this.Clothes = (MaskItem<Exception?, Group.ErrorMask<Clothing.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Containers:
                        this.Containers = (MaskItem<Exception?, Group.ErrorMask<Container.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Doors:
                        this.Doors = (MaskItem<Exception?, Group.ErrorMask<Door.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Ingredients:
                        this.Ingredients = (MaskItem<Exception?, Group.ErrorMask<Ingredient.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Lights:
                        this.Lights = (MaskItem<Exception?, Group.ErrorMask<Light.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Miscellaneous:
                        this.Miscellaneous = (MaskItem<Exception?, Group.ErrorMask<Miscellaneous.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Statics:
                        this.Statics = (MaskItem<Exception?, Group.ErrorMask<Static.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Grasses:
                        this.Grasses = (MaskItem<Exception?, Group.ErrorMask<Grass.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Trees:
                        this.Trees = (MaskItem<Exception?, Group.ErrorMask<Tree.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Flora:
                        this.Flora = (MaskItem<Exception?, Group.ErrorMask<Flora.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Furniture:
                        this.Furniture = (MaskItem<Exception?, Group.ErrorMask<Furniture.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Weapons:
                        this.Weapons = (MaskItem<Exception?, Group.ErrorMask<Weapon.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Ammunitions:
                        this.Ammunitions = (MaskItem<Exception?, Group.ErrorMask<Ammunition.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Npcs:
                        this.Npcs = (MaskItem<Exception?, Group.ErrorMask<Npc.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Creatures:
                        this.Creatures = (MaskItem<Exception?, Group.ErrorMask<Creature.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.LeveledCreatures:
                        this.LeveledCreatures = (MaskItem<Exception?, Group.ErrorMask<LeveledCreature.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.SoulGems:
                        this.SoulGems = (MaskItem<Exception?, Group.ErrorMask<SoulGem.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Keys:
                        this.Keys = (MaskItem<Exception?, Group.ErrorMask<Key.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Potions:
                        this.Potions = (MaskItem<Exception?, Group.ErrorMask<Potion.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Subspaces:
                        this.Subspaces = (MaskItem<Exception?, Group.ErrorMask<Subspace.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.SigilStones:
                        this.SigilStones = (MaskItem<Exception?, Group.ErrorMask<SigilStone.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.LeveledItems:
                        this.LeveledItems = (MaskItem<Exception?, Group.ErrorMask<LeveledItem.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Weathers:
                        this.Weathers = (MaskItem<Exception?, Group.ErrorMask<Weather.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Climates:
                        this.Climates = (MaskItem<Exception?, Group.ErrorMask<Climate.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Regions:
                        this.Regions = (MaskItem<Exception?, Group.ErrorMask<Region.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Cells:
                        this.Cells = (MaskItem<Exception?, ListGroup.ErrorMask<CellBlock.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Worldspaces:
                        this.Worldspaces = (MaskItem<Exception?, Group.ErrorMask<Worldspace.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.DialogTopics:
                        this.DialogTopics = (MaskItem<Exception?, Group.ErrorMask<DialogTopic.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Quests:
                        this.Quests = (MaskItem<Exception?, Group.ErrorMask<Quest.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.IdleAnimations:
                        this.IdleAnimations = (MaskItem<Exception?, Group.ErrorMask<IdleAnimation.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.AIPackages:
                        this.AIPackages = (MaskItem<Exception?, Group.ErrorMask<AIPackage.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.CombatStyles:
                        this.CombatStyles = (MaskItem<Exception?, Group.ErrorMask<CombatStyle.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.LoadScreens:
                        this.LoadScreens = (MaskItem<Exception?, Group.ErrorMask<LoadScreen.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.LeveledSpells:
                        this.LeveledSpells = (MaskItem<Exception?, Group.ErrorMask<LeveledSpell.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.AnimatedObjects:
                        this.AnimatedObjects = (MaskItem<Exception?, Group.ErrorMask<AnimatedObject.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Waters:
                        this.Waters = (MaskItem<Exception?, Group.ErrorMask<Water.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.EffectShaders:
                        this.EffectShaders = (MaskItem<Exception?, Group.ErrorMask<EffectShader.ErrorMask>?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ModHeader != null) return true;
                if (GameSettings != null) return true;
                if (Globals != null) return true;
                if (Classes != null) return true;
                if (Factions != null) return true;
                if (Hairs != null) return true;
                if (Eyes != null) return true;
                if (Races != null) return true;
                if (Sounds != null) return true;
                if (Skills != null) return true;
                if (MagicEffects != null) return true;
                if (Scripts != null) return true;
                if (LandTextures != null) return true;
                if (Enchantments != null) return true;
                if (Spells != null) return true;
                if (Birthsigns != null) return true;
                if (Activators != null) return true;
                if (AlchemicalApparatus != null) return true;
                if (Armors != null) return true;
                if (Books != null) return true;
                if (Clothes != null) return true;
                if (Containers != null) return true;
                if (Doors != null) return true;
                if (Ingredients != null) return true;
                if (Lights != null) return true;
                if (Miscellaneous != null) return true;
                if (Statics != null) return true;
                if (Grasses != null) return true;
                if (Trees != null) return true;
                if (Flora != null) return true;
                if (Furniture != null) return true;
                if (Weapons != null) return true;
                if (Ammunitions != null) return true;
                if (Npcs != null) return true;
                if (Creatures != null) return true;
                if (LeveledCreatures != null) return true;
                if (SoulGems != null) return true;
                if (Keys != null) return true;
                if (Potions != null) return true;
                if (Subspaces != null) return true;
                if (SigilStones != null) return true;
                if (LeveledItems != null) return true;
                if (Weathers != null) return true;
                if (Climates != null) return true;
                if (Regions != null) return true;
                if (Cells != null) return true;
                if (Worldspaces != null) return true;
                if (DialogTopics != null) return true;
                if (Quests != null) return true;
                if (IdleAnimations != null) return true;
                if (AIPackages != null) return true;
                if (CombatStyles != null) return true;
                if (LoadScreens != null) return true;
                if (LeveledSpells != null) return true;
                if (AnimatedObjects != null) return true;
                if (Waters != null) return true;
                if (EffectShaders != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                ModHeader?.ToString(fg);
                GameSettings?.ToString(fg);
                Globals?.ToString(fg);
                Classes?.ToString(fg);
                Factions?.ToString(fg);
                Hairs?.ToString(fg);
                Eyes?.ToString(fg);
                Races?.ToString(fg);
                Sounds?.ToString(fg);
                Skills?.ToString(fg);
                MagicEffects?.ToString(fg);
                Scripts?.ToString(fg);
                LandTextures?.ToString(fg);
                Enchantments?.ToString(fg);
                Spells?.ToString(fg);
                Birthsigns?.ToString(fg);
                Activators?.ToString(fg);
                AlchemicalApparatus?.ToString(fg);
                Armors?.ToString(fg);
                Books?.ToString(fg);
                Clothes?.ToString(fg);
                Containers?.ToString(fg);
                Doors?.ToString(fg);
                Ingredients?.ToString(fg);
                Lights?.ToString(fg);
                Miscellaneous?.ToString(fg);
                Statics?.ToString(fg);
                Grasses?.ToString(fg);
                Trees?.ToString(fg);
                Flora?.ToString(fg);
                Furniture?.ToString(fg);
                Weapons?.ToString(fg);
                Ammunitions?.ToString(fg);
                Npcs?.ToString(fg);
                Creatures?.ToString(fg);
                LeveledCreatures?.ToString(fg);
                SoulGems?.ToString(fg);
                Keys?.ToString(fg);
                Potions?.ToString(fg);
                Subspaces?.ToString(fg);
                SigilStones?.ToString(fg);
                LeveledItems?.ToString(fg);
                Weathers?.ToString(fg);
                Climates?.ToString(fg);
                Regions?.ToString(fg);
                Cells?.ToString(fg);
                Worldspaces?.ToString(fg);
                DialogTopics?.ToString(fg);
                Quests?.ToString(fg);
                IdleAnimations?.ToString(fg);
                AIPackages?.ToString(fg);
                CombatStyles?.ToString(fg);
                LoadScreens?.ToString(fg);
                LeveledSpells?.ToString(fg);
                AnimatedObjects?.ToString(fg);
                Waters?.ToString(fg);
                EffectShaders?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ModHeader = this.ModHeader.Combine(rhs.ModHeader, (l, r) => l.Combine(r));
                ret.GameSettings = this.GameSettings.Combine(rhs.GameSettings, (l, r) => l.Combine(r));
                ret.Globals = this.Globals.Combine(rhs.Globals, (l, r) => l.Combine(r));
                ret.Classes = this.Classes.Combine(rhs.Classes, (l, r) => l.Combine(r));
                ret.Factions = this.Factions.Combine(rhs.Factions, (l, r) => l.Combine(r));
                ret.Hairs = this.Hairs.Combine(rhs.Hairs, (l, r) => l.Combine(r));
                ret.Eyes = this.Eyes.Combine(rhs.Eyes, (l, r) => l.Combine(r));
                ret.Races = this.Races.Combine(rhs.Races, (l, r) => l.Combine(r));
                ret.Sounds = this.Sounds.Combine(rhs.Sounds, (l, r) => l.Combine(r));
                ret.Skills = this.Skills.Combine(rhs.Skills, (l, r) => l.Combine(r));
                ret.MagicEffects = this.MagicEffects.Combine(rhs.MagicEffects, (l, r) => l.Combine(r));
                ret.Scripts = this.Scripts.Combine(rhs.Scripts, (l, r) => l.Combine(r));
                ret.LandTextures = this.LandTextures.Combine(rhs.LandTextures, (l, r) => l.Combine(r));
                ret.Enchantments = this.Enchantments.Combine(rhs.Enchantments, (l, r) => l.Combine(r));
                ret.Spells = this.Spells.Combine(rhs.Spells, (l, r) => l.Combine(r));
                ret.Birthsigns = this.Birthsigns.Combine(rhs.Birthsigns, (l, r) => l.Combine(r));
                ret.Activators = this.Activators.Combine(rhs.Activators, (l, r) => l.Combine(r));
                ret.AlchemicalApparatus = this.AlchemicalApparatus.Combine(rhs.AlchemicalApparatus, (l, r) => l.Combine(r));
                ret.Armors = this.Armors.Combine(rhs.Armors, (l, r) => l.Combine(r));
                ret.Books = this.Books.Combine(rhs.Books, (l, r) => l.Combine(r));
                ret.Clothes = this.Clothes.Combine(rhs.Clothes, (l, r) => l.Combine(r));
                ret.Containers = this.Containers.Combine(rhs.Containers, (l, r) => l.Combine(r));
                ret.Doors = this.Doors.Combine(rhs.Doors, (l, r) => l.Combine(r));
                ret.Ingredients = this.Ingredients.Combine(rhs.Ingredients, (l, r) => l.Combine(r));
                ret.Lights = this.Lights.Combine(rhs.Lights, (l, r) => l.Combine(r));
                ret.Miscellaneous = this.Miscellaneous.Combine(rhs.Miscellaneous, (l, r) => l.Combine(r));
                ret.Statics = this.Statics.Combine(rhs.Statics, (l, r) => l.Combine(r));
                ret.Grasses = this.Grasses.Combine(rhs.Grasses, (l, r) => l.Combine(r));
                ret.Trees = this.Trees.Combine(rhs.Trees, (l, r) => l.Combine(r));
                ret.Flora = this.Flora.Combine(rhs.Flora, (l, r) => l.Combine(r));
                ret.Furniture = this.Furniture.Combine(rhs.Furniture, (l, r) => l.Combine(r));
                ret.Weapons = this.Weapons.Combine(rhs.Weapons, (l, r) => l.Combine(r));
                ret.Ammunitions = this.Ammunitions.Combine(rhs.Ammunitions, (l, r) => l.Combine(r));
                ret.Npcs = this.Npcs.Combine(rhs.Npcs, (l, r) => l.Combine(r));
                ret.Creatures = this.Creatures.Combine(rhs.Creatures, (l, r) => l.Combine(r));
                ret.LeveledCreatures = this.LeveledCreatures.Combine(rhs.LeveledCreatures, (l, r) => l.Combine(r));
                ret.SoulGems = this.SoulGems.Combine(rhs.SoulGems, (l, r) => l.Combine(r));
                ret.Keys = this.Keys.Combine(rhs.Keys, (l, r) => l.Combine(r));
                ret.Potions = this.Potions.Combine(rhs.Potions, (l, r) => l.Combine(r));
                ret.Subspaces = this.Subspaces.Combine(rhs.Subspaces, (l, r) => l.Combine(r));
                ret.SigilStones = this.SigilStones.Combine(rhs.SigilStones, (l, r) => l.Combine(r));
                ret.LeveledItems = this.LeveledItems.Combine(rhs.LeveledItems, (l, r) => l.Combine(r));
                ret.Weathers = this.Weathers.Combine(rhs.Weathers, (l, r) => l.Combine(r));
                ret.Climates = this.Climates.Combine(rhs.Climates, (l, r) => l.Combine(r));
                ret.Regions = this.Regions.Combine(rhs.Regions, (l, r) => l.Combine(r));
                ret.Cells = this.Cells.Combine(rhs.Cells, (l, r) => l.Combine(r));
                ret.Worldspaces = this.Worldspaces.Combine(rhs.Worldspaces, (l, r) => l.Combine(r));
                ret.DialogTopics = this.DialogTopics.Combine(rhs.DialogTopics, (l, r) => l.Combine(r));
                ret.Quests = this.Quests.Combine(rhs.Quests, (l, r) => l.Combine(r));
                ret.IdleAnimations = this.IdleAnimations.Combine(rhs.IdleAnimations, (l, r) => l.Combine(r));
                ret.AIPackages = this.AIPackages.Combine(rhs.AIPackages, (l, r) => l.Combine(r));
                ret.CombatStyles = this.CombatStyles.Combine(rhs.CombatStyles, (l, r) => l.Combine(r));
                ret.LoadScreens = this.LoadScreens.Combine(rhs.LoadScreens, (l, r) => l.Combine(r));
                ret.LeveledSpells = this.LeveledSpells.Combine(rhs.LeveledSpells, (l, r) => l.Combine(r));
                ret.AnimatedObjects = this.AnimatedObjects.Combine(rhs.AnimatedObjects, (l, r) => l.Combine(r));
                ret.Waters = this.Waters.Combine(rhs.Waters, (l, r) => l.Combine(r));
                ret.EffectShaders = this.EffectShaders.Combine(rhs.EffectShaders, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public OblivionModHeader.TranslationMask? ModHeader;
            public Group.TranslationMask<GameSetting.TranslationMask>? GameSettings;
            public Group.TranslationMask<Global.TranslationMask>? Globals;
            public Group.TranslationMask<Class.TranslationMask>? Classes;
            public Group.TranslationMask<Faction.TranslationMask>? Factions;
            public Group.TranslationMask<Hair.TranslationMask>? Hairs;
            public Group.TranslationMask<Eye.TranslationMask>? Eyes;
            public Group.TranslationMask<Race.TranslationMask>? Races;
            public Group.TranslationMask<Sound.TranslationMask>? Sounds;
            public Group.TranslationMask<SkillRecord.TranslationMask>? Skills;
            public Group.TranslationMask<MagicEffect.TranslationMask>? MagicEffects;
            public Group.TranslationMask<Script.TranslationMask>? Scripts;
            public Group.TranslationMask<LandTexture.TranslationMask>? LandTextures;
            public Group.TranslationMask<Enchantment.TranslationMask>? Enchantments;
            public Group.TranslationMask<SpellUnleveled.TranslationMask>? Spells;
            public Group.TranslationMask<Birthsign.TranslationMask>? Birthsigns;
            public Group.TranslationMask<Activator.TranslationMask>? Activators;
            public Group.TranslationMask<AlchemicalApparatus.TranslationMask>? AlchemicalApparatus;
            public Group.TranslationMask<Armor.TranslationMask>? Armors;
            public Group.TranslationMask<Book.TranslationMask>? Books;
            public Group.TranslationMask<Clothing.TranslationMask>? Clothes;
            public Group.TranslationMask<Container.TranslationMask>? Containers;
            public Group.TranslationMask<Door.TranslationMask>? Doors;
            public Group.TranslationMask<Ingredient.TranslationMask>? Ingredients;
            public Group.TranslationMask<Light.TranslationMask>? Lights;
            public Group.TranslationMask<Miscellaneous.TranslationMask>? Miscellaneous;
            public Group.TranslationMask<Static.TranslationMask>? Statics;
            public Group.TranslationMask<Grass.TranslationMask>? Grasses;
            public Group.TranslationMask<Tree.TranslationMask>? Trees;
            public Group.TranslationMask<Flora.TranslationMask>? Flora;
            public Group.TranslationMask<Furniture.TranslationMask>? Furniture;
            public Group.TranslationMask<Weapon.TranslationMask>? Weapons;
            public Group.TranslationMask<Ammunition.TranslationMask>? Ammunitions;
            public Group.TranslationMask<Npc.TranslationMask>? Npcs;
            public Group.TranslationMask<Creature.TranslationMask>? Creatures;
            public Group.TranslationMask<LeveledCreature.TranslationMask>? LeveledCreatures;
            public Group.TranslationMask<SoulGem.TranslationMask>? SoulGems;
            public Group.TranslationMask<Key.TranslationMask>? Keys;
            public Group.TranslationMask<Potion.TranslationMask>? Potions;
            public Group.TranslationMask<Subspace.TranslationMask>? Subspaces;
            public Group.TranslationMask<SigilStone.TranslationMask>? SigilStones;
            public Group.TranslationMask<LeveledItem.TranslationMask>? LeveledItems;
            public Group.TranslationMask<Weather.TranslationMask>? Weathers;
            public Group.TranslationMask<Climate.TranslationMask>? Climates;
            public Group.TranslationMask<Region.TranslationMask>? Regions;
            public ListGroup.TranslationMask<CellBlock.TranslationMask>? Cells;
            public Group.TranslationMask<Worldspace.TranslationMask>? Worldspaces;
            public Group.TranslationMask<DialogTopic.TranslationMask>? DialogTopics;
            public Group.TranslationMask<Quest.TranslationMask>? Quests;
            public Group.TranslationMask<IdleAnimation.TranslationMask>? IdleAnimations;
            public Group.TranslationMask<AIPackage.TranslationMask>? AIPackages;
            public Group.TranslationMask<CombatStyle.TranslationMask>? CombatStyles;
            public Group.TranslationMask<LoadScreen.TranslationMask>? LoadScreens;
            public Group.TranslationMask<LeveledSpell.TranslationMask>? LeveledSpells;
            public Group.TranslationMask<AnimatedObject.TranslationMask>? AnimatedObjects;
            public Group.TranslationMask<Water.TranslationMask>? Waters;
            public Group.TranslationMask<EffectShader.TranslationMask>? EffectShaders;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ModHeader != null ? ModHeader.OnOverall : DefaultOn, ModHeader?.GetCrystal()));
                ret.Add((GameSettings != null ? GameSettings.OnOverall : DefaultOn, GameSettings?.GetCrystal()));
                ret.Add((Globals != null ? Globals.OnOverall : DefaultOn, Globals?.GetCrystal()));
                ret.Add((Classes != null ? Classes.OnOverall : DefaultOn, Classes?.GetCrystal()));
                ret.Add((Factions != null ? Factions.OnOverall : DefaultOn, Factions?.GetCrystal()));
                ret.Add((Hairs != null ? Hairs.OnOverall : DefaultOn, Hairs?.GetCrystal()));
                ret.Add((Eyes != null ? Eyes.OnOverall : DefaultOn, Eyes?.GetCrystal()));
                ret.Add((Races != null ? Races.OnOverall : DefaultOn, Races?.GetCrystal()));
                ret.Add((Sounds != null ? Sounds.OnOverall : DefaultOn, Sounds?.GetCrystal()));
                ret.Add((Skills != null ? Skills.OnOverall : DefaultOn, Skills?.GetCrystal()));
                ret.Add((MagicEffects != null ? MagicEffects.OnOverall : DefaultOn, MagicEffects?.GetCrystal()));
                ret.Add((Scripts != null ? Scripts.OnOverall : DefaultOn, Scripts?.GetCrystal()));
                ret.Add((LandTextures != null ? LandTextures.OnOverall : DefaultOn, LandTextures?.GetCrystal()));
                ret.Add((Enchantments != null ? Enchantments.OnOverall : DefaultOn, Enchantments?.GetCrystal()));
                ret.Add((Spells != null ? Spells.OnOverall : DefaultOn, Spells?.GetCrystal()));
                ret.Add((Birthsigns != null ? Birthsigns.OnOverall : DefaultOn, Birthsigns?.GetCrystal()));
                ret.Add((Activators != null ? Activators.OnOverall : DefaultOn, Activators?.GetCrystal()));
                ret.Add((AlchemicalApparatus != null ? AlchemicalApparatus.OnOverall : DefaultOn, AlchemicalApparatus?.GetCrystal()));
                ret.Add((Armors != null ? Armors.OnOverall : DefaultOn, Armors?.GetCrystal()));
                ret.Add((Books != null ? Books.OnOverall : DefaultOn, Books?.GetCrystal()));
                ret.Add((Clothes != null ? Clothes.OnOverall : DefaultOn, Clothes?.GetCrystal()));
                ret.Add((Containers != null ? Containers.OnOverall : DefaultOn, Containers?.GetCrystal()));
                ret.Add((Doors != null ? Doors.OnOverall : DefaultOn, Doors?.GetCrystal()));
                ret.Add((Ingredients != null ? Ingredients.OnOverall : DefaultOn, Ingredients?.GetCrystal()));
                ret.Add((Lights != null ? Lights.OnOverall : DefaultOn, Lights?.GetCrystal()));
                ret.Add((Miscellaneous != null ? Miscellaneous.OnOverall : DefaultOn, Miscellaneous?.GetCrystal()));
                ret.Add((Statics != null ? Statics.OnOverall : DefaultOn, Statics?.GetCrystal()));
                ret.Add((Grasses != null ? Grasses.OnOverall : DefaultOn, Grasses?.GetCrystal()));
                ret.Add((Trees != null ? Trees.OnOverall : DefaultOn, Trees?.GetCrystal()));
                ret.Add((Flora != null ? Flora.OnOverall : DefaultOn, Flora?.GetCrystal()));
                ret.Add((Furniture != null ? Furniture.OnOverall : DefaultOn, Furniture?.GetCrystal()));
                ret.Add((Weapons != null ? Weapons.OnOverall : DefaultOn, Weapons?.GetCrystal()));
                ret.Add((Ammunitions != null ? Ammunitions.OnOverall : DefaultOn, Ammunitions?.GetCrystal()));
                ret.Add((Npcs != null ? Npcs.OnOverall : DefaultOn, Npcs?.GetCrystal()));
                ret.Add((Creatures != null ? Creatures.OnOverall : DefaultOn, Creatures?.GetCrystal()));
                ret.Add((LeveledCreatures != null ? LeveledCreatures.OnOverall : DefaultOn, LeveledCreatures?.GetCrystal()));
                ret.Add((SoulGems != null ? SoulGems.OnOverall : DefaultOn, SoulGems?.GetCrystal()));
                ret.Add((Keys != null ? Keys.OnOverall : DefaultOn, Keys?.GetCrystal()));
                ret.Add((Potions != null ? Potions.OnOverall : DefaultOn, Potions?.GetCrystal()));
                ret.Add((Subspaces != null ? Subspaces.OnOverall : DefaultOn, Subspaces?.GetCrystal()));
                ret.Add((SigilStones != null ? SigilStones.OnOverall : DefaultOn, SigilStones?.GetCrystal()));
                ret.Add((LeveledItems != null ? LeveledItems.OnOverall : DefaultOn, LeveledItems?.GetCrystal()));
                ret.Add((Weathers != null ? Weathers.OnOverall : DefaultOn, Weathers?.GetCrystal()));
                ret.Add((Climates != null ? Climates.OnOverall : DefaultOn, Climates?.GetCrystal()));
                ret.Add((Regions != null ? Regions.OnOverall : DefaultOn, Regions?.GetCrystal()));
                ret.Add((Cells != null ? Cells.OnOverall : DefaultOn, Cells?.GetCrystal()));
                ret.Add((Worldspaces != null ? Worldspaces.OnOverall : DefaultOn, Worldspaces?.GetCrystal()));
                ret.Add((DialogTopics != null ? DialogTopics.OnOverall : DefaultOn, DialogTopics?.GetCrystal()));
                ret.Add((Quests != null ? Quests.OnOverall : DefaultOn, Quests?.GetCrystal()));
                ret.Add((IdleAnimations != null ? IdleAnimations.OnOverall : DefaultOn, IdleAnimations?.GetCrystal()));
                ret.Add((AIPackages != null ? AIPackages.OnOverall : DefaultOn, AIPackages?.GetCrystal()));
                ret.Add((CombatStyles != null ? CombatStyles.OnOverall : DefaultOn, CombatStyles?.GetCrystal()));
                ret.Add((LoadScreens != null ? LoadScreens.OnOverall : DefaultOn, LoadScreens?.GetCrystal()));
                ret.Add((LeveledSpells != null ? LeveledSpells.OnOverall : DefaultOn, LeveledSpells?.GetCrystal()));
                ret.Add((AnimatedObjects != null ? AnimatedObjects.OnOverall : DefaultOn, AnimatedObjects?.GetCrystal()));
                ret.Add((Waters != null ? Waters.OnOverall : DefaultOn, Waters?.GetCrystal()));
                ret.Add((EffectShaders != null ? EffectShaders.OnOverall : DefaultOn, EffectShaders?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = OblivionMod_Registration.TriggeringRecordType;
        public override GameRelease GameRelease => GameRelease.Oblivion;
        IReadOnlyCache<T, FormKey> IModGetter.GetTopLevelGroupGetter<T>() => this.GetTopLevelGroupGetter<T>();
        ICache<T, FormKey> IMod.GetGroup<T>() => this.GetGroup<T>();
        void IModGetter.WriteToBinary(string path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinaryParallel(string path, BinaryWriteParameters? param) => this.WriteToBinaryParallel(path, param);
        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => OblivionModMixIn.GetEqualsMask(this, (IOblivionModGetter)rhs, include);
        public override bool CanUseLocalization => false;
        public override bool UsingLocalization
        {
            get => false;
            set => throw new ArgumentException("Tried to set localization flag on unsupported mod type");
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<MasterReference> IMod.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IMod.NextFormID
        {
            get => this.ModHeader.Stats.NextFormID;
            set => this.ModHeader.Stats.NextFormID = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IModGetter.NextFormID => this.ModHeader.Stats.NextFormID;
        public OblivionMod(ModKey modKey)
            : base(modKey)
        {
            this.ModHeader.Stats.NextFormID = GetDefaultInitialNextFormID();
            _GameSettings_Object = new Group<GameSetting>(this);
            _Globals_Object = new Group<Global>(this);
            _Classes_Object = new Group<Class>(this);
            _Factions_Object = new Group<Faction>(this);
            _Hairs_Object = new Group<Hair>(this);
            _Eyes_Object = new Group<Eye>(this);
            _Races_Object = new Group<Race>(this);
            _Sounds_Object = new Group<Sound>(this);
            _Skills_Object = new Group<SkillRecord>(this);
            _MagicEffects_Object = new Group<MagicEffect>(this);
            _Scripts_Object = new Group<Script>(this);
            _LandTextures_Object = new Group<LandTexture>(this);
            _Enchantments_Object = new Group<Enchantment>(this);
            _Spells_Object = new Group<SpellUnleveled>(this);
            _Birthsigns_Object = new Group<Birthsign>(this);
            _Activators_Object = new Group<Activator>(this);
            _AlchemicalApparatus_Object = new Group<AlchemicalApparatus>(this);
            _Armors_Object = new Group<Armor>(this);
            _Books_Object = new Group<Book>(this);
            _Clothes_Object = new Group<Clothing>(this);
            _Containers_Object = new Group<Container>(this);
            _Doors_Object = new Group<Door>(this);
            _Ingredients_Object = new Group<Ingredient>(this);
            _Lights_Object = new Group<Light>(this);
            _Miscellaneous_Object = new Group<Miscellaneous>(this);
            _Statics_Object = new Group<Static>(this);
            _Grasses_Object = new Group<Grass>(this);
            _Trees_Object = new Group<Tree>(this);
            _Flora_Object = new Group<Flora>(this);
            _Furniture_Object = new Group<Furniture>(this);
            _Weapons_Object = new Group<Weapon>(this);
            _Ammunitions_Object = new Group<Ammunition>(this);
            _Npcs_Object = new Group<Npc>(this);
            _Creatures_Object = new Group<Creature>(this);
            _LeveledCreatures_Object = new Group<LeveledCreature>(this);
            _SoulGems_Object = new Group<SoulGem>(this);
            _Keys_Object = new Group<Key>(this);
            _Potions_Object = new Group<Potion>(this);
            _Subspaces_Object = new Group<Subspace>(this);
            _SigilStones_Object = new Group<SigilStone>(this);
            _LeveledItems_Object = new Group<LeveledItem>(this);
            _Weathers_Object = new Group<Weather>(this);
            _Climates_Object = new Group<Climate>(this);
            _Regions_Object = new Group<Region>(this);
            _Worldspaces_Object = new Group<Worldspace>(this);
            _DialogTopics_Object = new Group<DialogTopic>(this);
            _Quests_Object = new Group<Quest>(this);
            _IdleAnimations_Object = new Group<IdleAnimation>(this);
            _AIPackages_Object = new Group<AIPackage>(this);
            _CombatStyles_Object = new Group<CombatStyle>(this);
            _LoadScreens_Object = new Group<LoadScreen>(this);
            _LeveledSpells_Object = new Group<LeveledSpell>(this);
            _AnimatedObjects_Object = new Group<AnimatedObject>(this);
            _Waters_Object = new Group<Water>(this);
            _EffectShaders_Object = new Group<EffectShader>(this);
            CustomCtor();
        }
        public void AddRecords(
            OblivionMod rhsMod,
            GroupMask? mask = null)
        {
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.RecordCache.Set(rhsMod.GameSettings.RecordCache.Items);
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.RecordCache.Set(rhsMod.Globals.RecordCache.Items);
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.RecordCache.Set(rhsMod.Classes.RecordCache.Items);
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.RecordCache.Set(rhsMod.Factions.RecordCache.Items);
            }
            if (mask?.Hairs ?? true)
            {
                this.Hairs.RecordCache.Set(rhsMod.Hairs.RecordCache.Items);
            }
            if (mask?.Eyes ?? true)
            {
                this.Eyes.RecordCache.Set(rhsMod.Eyes.RecordCache.Items);
            }
            if (mask?.Races ?? true)
            {
                this.Races.RecordCache.Set(rhsMod.Races.RecordCache.Items);
            }
            if (mask?.Sounds ?? true)
            {
                this.Sounds.RecordCache.Set(rhsMod.Sounds.RecordCache.Items);
            }
            if (mask?.Skills ?? true)
            {
                this.Skills.RecordCache.Set(rhsMod.Skills.RecordCache.Items);
            }
            if (mask?.MagicEffects ?? true)
            {
                this.MagicEffects.RecordCache.Set(rhsMod.MagicEffects.RecordCache.Items);
            }
            if (mask?.Scripts ?? true)
            {
                this.Scripts.RecordCache.Set(rhsMod.Scripts.RecordCache.Items);
            }
            if (mask?.LandTextures ?? true)
            {
                this.LandTextures.RecordCache.Set(rhsMod.LandTextures.RecordCache.Items);
            }
            if (mask?.Enchantments ?? true)
            {
                this.Enchantments.RecordCache.Set(rhsMod.Enchantments.RecordCache.Items);
            }
            if (mask?.Spells ?? true)
            {
                this.Spells.RecordCache.Set(rhsMod.Spells.RecordCache.Items);
            }
            if (mask?.Birthsigns ?? true)
            {
                this.Birthsigns.RecordCache.Set(rhsMod.Birthsigns.RecordCache.Items);
            }
            if (mask?.Activators ?? true)
            {
                this.Activators.RecordCache.Set(rhsMod.Activators.RecordCache.Items);
            }
            if (mask?.AlchemicalApparatus ?? true)
            {
                this.AlchemicalApparatus.RecordCache.Set(rhsMod.AlchemicalApparatus.RecordCache.Items);
            }
            if (mask?.Armors ?? true)
            {
                this.Armors.RecordCache.Set(rhsMod.Armors.RecordCache.Items);
            }
            if (mask?.Books ?? true)
            {
                this.Books.RecordCache.Set(rhsMod.Books.RecordCache.Items);
            }
            if (mask?.Clothes ?? true)
            {
                this.Clothes.RecordCache.Set(rhsMod.Clothes.RecordCache.Items);
            }
            if (mask?.Containers ?? true)
            {
                this.Containers.RecordCache.Set(rhsMod.Containers.RecordCache.Items);
            }
            if (mask?.Doors ?? true)
            {
                this.Doors.RecordCache.Set(rhsMod.Doors.RecordCache.Items);
            }
            if (mask?.Ingredients ?? true)
            {
                this.Ingredients.RecordCache.Set(rhsMod.Ingredients.RecordCache.Items);
            }
            if (mask?.Lights ?? true)
            {
                this.Lights.RecordCache.Set(rhsMod.Lights.RecordCache.Items);
            }
            if (mask?.Miscellaneous ?? true)
            {
                this.Miscellaneous.RecordCache.Set(rhsMod.Miscellaneous.RecordCache.Items);
            }
            if (mask?.Statics ?? true)
            {
                this.Statics.RecordCache.Set(rhsMod.Statics.RecordCache.Items);
            }
            if (mask?.Grasses ?? true)
            {
                this.Grasses.RecordCache.Set(rhsMod.Grasses.RecordCache.Items);
            }
            if (mask?.Trees ?? true)
            {
                this.Trees.RecordCache.Set(rhsMod.Trees.RecordCache.Items);
            }
            if (mask?.Flora ?? true)
            {
                this.Flora.RecordCache.Set(rhsMod.Flora.RecordCache.Items);
            }
            if (mask?.Furniture ?? true)
            {
                this.Furniture.RecordCache.Set(rhsMod.Furniture.RecordCache.Items);
            }
            if (mask?.Weapons ?? true)
            {
                this.Weapons.RecordCache.Set(rhsMod.Weapons.RecordCache.Items);
            }
            if (mask?.Ammunitions ?? true)
            {
                this.Ammunitions.RecordCache.Set(rhsMod.Ammunitions.RecordCache.Items);
            }
            if (mask?.Npcs ?? true)
            {
                this.Npcs.RecordCache.Set(rhsMod.Npcs.RecordCache.Items);
            }
            if (mask?.Creatures ?? true)
            {
                this.Creatures.RecordCache.Set(rhsMod.Creatures.RecordCache.Items);
            }
            if (mask?.LeveledCreatures ?? true)
            {
                this.LeveledCreatures.RecordCache.Set(rhsMod.LeveledCreatures.RecordCache.Items);
            }
            if (mask?.SoulGems ?? true)
            {
                this.SoulGems.RecordCache.Set(rhsMod.SoulGems.RecordCache.Items);
            }
            if (mask?.Keys ?? true)
            {
                this.Keys.RecordCache.Set(rhsMod.Keys.RecordCache.Items);
            }
            if (mask?.Potions ?? true)
            {
                this.Potions.RecordCache.Set(rhsMod.Potions.RecordCache.Items);
            }
            if (mask?.Subspaces ?? true)
            {
                this.Subspaces.RecordCache.Set(rhsMod.Subspaces.RecordCache.Items);
            }
            if (mask?.SigilStones ?? true)
            {
                this.SigilStones.RecordCache.Set(rhsMod.SigilStones.RecordCache.Items);
            }
            if (mask?.LeveledItems ?? true)
            {
                this.LeveledItems.RecordCache.Set(rhsMod.LeveledItems.RecordCache.Items);
            }
            if (mask?.Weathers ?? true)
            {
                this.Weathers.RecordCache.Set(rhsMod.Weathers.RecordCache.Items);
            }
            if (mask?.Climates ?? true)
            {
                this.Climates.RecordCache.Set(rhsMod.Climates.RecordCache.Items);
            }
            if (mask?.Regions ?? true)
            {
                this.Regions.RecordCache.Set(rhsMod.Regions.RecordCache.Items);
            }
            if (mask?.Cells ?? true)
            {
                if (rhsMod.Cells.Records.Count > 0)
                {
                    throw new NotImplementedException("Cell additions need implementing");
                }
            }
            if (mask?.Worldspaces ?? true)
            {
                this.Worldspaces.RecordCache.Set(rhsMod.Worldspaces.RecordCache.Items);
            }
            if (mask?.DialogTopics ?? true)
            {
                this.DialogTopics.RecordCache.Set(rhsMod.DialogTopics.RecordCache.Items);
            }
            if (mask?.Quests ?? true)
            {
                this.Quests.RecordCache.Set(rhsMod.Quests.RecordCache.Items);
            }
            if (mask?.IdleAnimations ?? true)
            {
                this.IdleAnimations.RecordCache.Set(rhsMod.IdleAnimations.RecordCache.Items);
            }
            if (mask?.AIPackages ?? true)
            {
                this.AIPackages.RecordCache.Set(rhsMod.AIPackages.RecordCache.Items);
            }
            if (mask?.CombatStyles ?? true)
            {
                this.CombatStyles.RecordCache.Set(rhsMod.CombatStyles.RecordCache.Items);
            }
            if (mask?.LoadScreens ?? true)
            {
                this.LoadScreens.RecordCache.Set(rhsMod.LoadScreens.RecordCache.Items);
            }
            if (mask?.LeveledSpells ?? true)
            {
                this.LeveledSpells.RecordCache.Set(rhsMod.LeveledSpells.RecordCache.Items);
            }
            if (mask?.AnimatedObjects ?? true)
            {
                this.AnimatedObjects.RecordCache.Set(rhsMod.AnimatedObjects.RecordCache.Items);
            }
            if (mask?.Waters ?? true)
            {
                this.Waters.RecordCache.Set(rhsMod.Waters.RecordCache.Items);
            }
            if (mask?.EffectShaders ?? true)
            {
                this.EffectShaders.RecordCache.Set(rhsMod.EffectShaders.RecordCache.Items);
            }
        }

        public override void SyncRecordCount()
        {
            this.ModHeader.Stats.NumRecords = GetRecordCount();
        }

        public uint GetRecordCount()
        {
            uint count = (uint)this.EnumerateMajorRecords().Count();
            count += GameSettings.RecordCache.Count > 0 ? 1 : default(uint);
            count += Globals.RecordCache.Count > 0 ? 1 : default(uint);
            count += Classes.RecordCache.Count > 0 ? 1 : default(uint);
            count += Factions.RecordCache.Count > 0 ? 1 : default(uint);
            count += Hairs.RecordCache.Count > 0 ? 1 : default(uint);
            count += Eyes.RecordCache.Count > 0 ? 1 : default(uint);
            count += Races.RecordCache.Count > 0 ? 1 : default(uint);
            count += Sounds.RecordCache.Count > 0 ? 1 : default(uint);
            count += Skills.RecordCache.Count > 0 ? 1 : default(uint);
            count += MagicEffects.RecordCache.Count > 0 ? 1 : default(uint);
            count += Scripts.RecordCache.Count > 0 ? 1 : default(uint);
            count += LandTextures.RecordCache.Count > 0 ? 1 : default(uint);
            count += Enchantments.RecordCache.Count > 0 ? 1 : default(uint);
            count += Spells.RecordCache.Count > 0 ? 1 : default(uint);
            count += Birthsigns.RecordCache.Count > 0 ? 1 : default(uint);
            count += Activators.RecordCache.Count > 0 ? 1 : default(uint);
            count += AlchemicalApparatus.RecordCache.Count > 0 ? 1 : default(uint);
            count += Armors.RecordCache.Count > 0 ? 1 : default(uint);
            count += Books.RecordCache.Count > 0 ? 1 : default(uint);
            count += Clothes.RecordCache.Count > 0 ? 1 : default(uint);
            count += Containers.RecordCache.Count > 0 ? 1 : default(uint);
            count += Doors.RecordCache.Count > 0 ? 1 : default(uint);
            count += Ingredients.RecordCache.Count > 0 ? 1 : default(uint);
            count += Lights.RecordCache.Count > 0 ? 1 : default(uint);
            count += Miscellaneous.RecordCache.Count > 0 ? 1 : default(uint);
            count += Statics.RecordCache.Count > 0 ? 1 : default(uint);
            count += Grasses.RecordCache.Count > 0 ? 1 : default(uint);
            count += Trees.RecordCache.Count > 0 ? 1 : default(uint);
            count += Flora.RecordCache.Count > 0 ? 1 : default(uint);
            count += Furniture.RecordCache.Count > 0 ? 1 : default(uint);
            count += Weapons.RecordCache.Count > 0 ? 1 : default(uint);
            count += Ammunitions.RecordCache.Count > 0 ? 1 : default(uint);
            count += Npcs.RecordCache.Count > 0 ? 1 : default(uint);
            count += Creatures.RecordCache.Count > 0 ? 1 : default(uint);
            count += LeveledCreatures.RecordCache.Count > 0 ? 1 : default(uint);
            count += SoulGems.RecordCache.Count > 0 ? 1 : default(uint);
            count += Keys.RecordCache.Count > 0 ? 1 : default(uint);
            count += Potions.RecordCache.Count > 0 ? 1 : default(uint);
            count += Subspaces.RecordCache.Count > 0 ? 1 : default(uint);
            count += SigilStones.RecordCache.Count > 0 ? 1 : default(uint);
            count += LeveledItems.RecordCache.Count > 0 ? 1 : default(uint);
            count += Weathers.RecordCache.Count > 0 ? 1 : default(uint);
            count += Climates.RecordCache.Count > 0 ? 1 : default(uint);
            count += Regions.RecordCache.Count > 0 ? 1 : default(uint);
            count += Cells.Records.Count > 0 ? 1 : default(uint);
            count += Worldspaces.RecordCache.Count > 0 ? 1 : default(uint);
            count += DialogTopics.RecordCache.Count > 0 ? 1 : default(uint);
            count += Quests.RecordCache.Count > 0 ? 1 : default(uint);
            count += IdleAnimations.RecordCache.Count > 0 ? 1 : default(uint);
            count += AIPackages.RecordCache.Count > 0 ? 1 : default(uint);
            count += CombatStyles.RecordCache.Count > 0 ? 1 : default(uint);
            count += LoadScreens.RecordCache.Count > 0 ? 1 : default(uint);
            count += LeveledSpells.RecordCache.Count > 0 ? 1 : default(uint);
            count += AnimatedObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += Waters.RecordCache.Count > 0 ? 1 : default(uint);
            count += EffectShaders.RecordCache.Count > 0 ? 1 : default(uint);
            GetCustomRecordCount((customCount) => count += customCount);
            return count;
        }

        partial void GetCustomRecordCount(Action<uint> setter);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => OblivionModCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => OblivionModSetterCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IOblivionMod, TSetter, TGetter>> IMajorRecordContextEnumerable<IOblivionMod>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IOblivionMod, IMajorRecordCommon, IMajorRecordCommonGetter>> IMajorRecordContextEnumerable<IOblivionMod>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        #endregion

        #region Binary Translation
        #region Binary Create
        public static OblivionMod CreateFromBinary(
            MutagenFrame frame,
            ModKey modKey,
            GroupMask? importMask = null)
        {
            var ret = new OblivionMod(modKey: modKey);
            frame.MetaData.ModKey = modKey;
            ((OblivionModSetterCommon)((IOblivionModGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                importMask: importMask,
                modKey: modKey,
                frame: frame);
            return ret;
        }

        public static OblivionMod CreateFromBinary(
            ModPath path,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameRelease.Oblivion))
            {
                var modKey = path.ModKey;
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = new RecordInfoCache(() => new MutagenBinaryReadStream(path, GameRelease.Oblivion));
                frame.MetaData.Parallel = parallel;
                return CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static OblivionMod CreateFromBinary(
            ModPath path,
            ErrorMaskBuilder? errorMask,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameRelease.Oblivion))
            {
                var modKey = path.ModKey;
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = new RecordInfoCache(() => new MutagenBinaryReadStream(path, GameRelease.Oblivion));
                frame.MetaData.Parallel = parallel;
                return CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static OblivionMod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            RecordInfoCache infoCache,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            using (var reader = new MutagenBinaryReadStream(stream, modKey, GameRelease.Oblivion))
            {
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = infoCache;
                frame.MetaData.Parallel = parallel;
                return CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static OblivionMod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            RecordInfoCache infoCache,
            ErrorMaskBuilder? errorMask,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            using (var reader = new MutagenBinaryReadStream(stream, modKey, GameRelease.Oblivion))
            {
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = infoCache;
                frame.MetaData.Parallel = parallel;
                return CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        #endregion

        public static IOblivionModDisposableGetter CreateFromBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            ModKey modKey)
        {
            var meta = new ParsingBundle(GameRelease.Oblivion, new MasterReferenceReader(modKey));
            meta.RecordInfoCache = new RecordInfoCache(() => new MutagenMemoryReadStream(bytes, meta));
            return OblivionModBinaryOverlay.OblivionModFactory(
                stream: new MutagenMemoryReadStream(
                    data: bytes,
                    metaData: meta),
                modKey: modKey,
                shouldDispose: false);
        }

        public static IOblivionModDisposableGetter CreateFromBinaryOverlay(ModPath path)
        {
            return OblivionModBinaryOverlay.OblivionModFactory(path: path);
        }

        public static IOblivionModDisposableGetter CreateFromBinaryOverlay(
            Stream stream,
            ModKey modKey)
        {
            return OblivionModBinaryOverlay.OblivionModFactory(
                stream: new MutagenBinaryReadStream(stream, modKey, GameRelease.Oblivion),
                modKey: modKey,
                shouldDispose: false);
        }

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static OblivionMod GetNew()
        {
            return new OblivionMod();
        }

    }
    #endregion

    #region Interface
    public partial interface IOblivionMod :
        IContextMod<IOblivionMod>,
        IFormLinkContainer,
        ILoquiObjectSetter<IOblivionMod>,
        IMajorRecordEnumerable,
        IMod,
        IOblivionModGetter
    {
        new OblivionModHeader ModHeader { get; }
        new Group<GameSetting> GameSettings { get; }
        new Group<Global> Globals { get; }
        new Group<Class> Classes { get; }
        new Group<Faction> Factions { get; }
        new Group<Hair> Hairs { get; }
        new Group<Eye> Eyes { get; }
        new Group<Race> Races { get; }
        new Group<Sound> Sounds { get; }
        new Group<SkillRecord> Skills { get; }
        new Group<MagicEffect> MagicEffects { get; }
        new Group<Script> Scripts { get; }
        new Group<LandTexture> LandTextures { get; }
        new Group<Enchantment> Enchantments { get; }
        new Group<SpellUnleveled> Spells { get; }
        new Group<Birthsign> Birthsigns { get; }
        new Group<Activator> Activators { get; }
        new Group<AlchemicalApparatus> AlchemicalApparatus { get; }
        new Group<Armor> Armors { get; }
        new Group<Book> Books { get; }
        new Group<Clothing> Clothes { get; }
        new Group<Container> Containers { get; }
        new Group<Door> Doors { get; }
        new Group<Ingredient> Ingredients { get; }
        new Group<Light> Lights { get; }
        new Group<Miscellaneous> Miscellaneous { get; }
        new Group<Static> Statics { get; }
        new Group<Grass> Grasses { get; }
        new Group<Tree> Trees { get; }
        new Group<Flora> Flora { get; }
        new Group<Furniture> Furniture { get; }
        new Group<Weapon> Weapons { get; }
        new Group<Ammunition> Ammunitions { get; }
        new Group<Npc> Npcs { get; }
        new Group<Creature> Creatures { get; }
        new Group<LeveledCreature> LeveledCreatures { get; }
        new Group<SoulGem> SoulGems { get; }
        new Group<Key> Keys { get; }
        new Group<Potion> Potions { get; }
        new Group<Subspace> Subspaces { get; }
        new Group<SigilStone> SigilStones { get; }
        new Group<LeveledItem> LeveledItems { get; }
        new Group<Weather> Weathers { get; }
        new Group<Climate> Climates { get; }
        new Group<Region> Regions { get; }
        new ListGroup<CellBlock> Cells { get; }
        new Group<Worldspace> Worldspaces { get; }
        new Group<DialogTopic> DialogTopics { get; }
        new Group<Quest> Quests { get; }
        new Group<IdleAnimation> IdleAnimations { get; }
        new Group<AIPackage> AIPackages { get; }
        new Group<CombatStyle> CombatStyles { get; }
        new Group<LoadScreen> LoadScreens { get; }
        new Group<LeveledSpell> LeveledSpells { get; }
        new Group<AnimatedObject> AnimatedObjects { get; }
        new Group<Water> Waters { get; }
        new Group<EffectShader> EffectShaders { get; }
    }

    public partial interface IOblivionModGetter :
        ILoquiObject,
        IContextGetterMod<IOblivionMod>,
        IFormLinkContainerGetter,
        ILoquiObject<IOblivionModGetter>,
        IMajorRecordContextEnumerable<IOblivionMod>,
        IMajorRecordGetterEnumerable,
        IModGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => OblivionMod_Registration.Instance;
        IOblivionModHeaderGetter ModHeader { get; }
        IGroupGetter<IGameSettingGetter> GameSettings { get; }
        IGroupGetter<IGlobalGetter> Globals { get; }
        IGroupGetter<IClassGetter> Classes { get; }
        IGroupGetter<IFactionGetter> Factions { get; }
        IGroupGetter<IHairGetter> Hairs { get; }
        IGroupGetter<IEyeGetter> Eyes { get; }
        IGroupGetter<IRaceGetter> Races { get; }
        IGroupGetter<ISoundGetter> Sounds { get; }
        IGroupGetter<ISkillRecordGetter> Skills { get; }
        IGroupGetter<IMagicEffectGetter> MagicEffects { get; }
        IGroupGetter<IScriptGetter> Scripts { get; }
        IGroupGetter<ILandTextureGetter> LandTextures { get; }
        IGroupGetter<IEnchantmentGetter> Enchantments { get; }
        IGroupGetter<ISpellUnleveledGetter> Spells { get; }
        IGroupGetter<IBirthsignGetter> Birthsigns { get; }
        IGroupGetter<IActivatorGetter> Activators { get; }
        IGroupGetter<IAlchemicalApparatusGetter> AlchemicalApparatus { get; }
        IGroupGetter<IArmorGetter> Armors { get; }
        IGroupGetter<IBookGetter> Books { get; }
        IGroupGetter<IClothingGetter> Clothes { get; }
        IGroupGetter<IContainerGetter> Containers { get; }
        IGroupGetter<IDoorGetter> Doors { get; }
        IGroupGetter<IIngredientGetter> Ingredients { get; }
        IGroupGetter<ILightGetter> Lights { get; }
        IGroupGetter<IMiscellaneousGetter> Miscellaneous { get; }
        IGroupGetter<IStaticGetter> Statics { get; }
        IGroupGetter<IGrassGetter> Grasses { get; }
        IGroupGetter<ITreeGetter> Trees { get; }
        IGroupGetter<IFloraGetter> Flora { get; }
        IGroupGetter<IFurnitureGetter> Furniture { get; }
        IGroupGetter<IWeaponGetter> Weapons { get; }
        IGroupGetter<IAmmunitionGetter> Ammunitions { get; }
        IGroupGetter<INpcGetter> Npcs { get; }
        IGroupGetter<ICreatureGetter> Creatures { get; }
        IGroupGetter<ILeveledCreatureGetter> LeveledCreatures { get; }
        IGroupGetter<ISoulGemGetter> SoulGems { get; }
        IGroupGetter<IKeyGetter> Keys { get; }
        IGroupGetter<IPotionGetter> Potions { get; }
        IGroupGetter<ISubspaceGetter> Subspaces { get; }
        IGroupGetter<ISigilStoneGetter> SigilStones { get; }
        IGroupGetter<ILeveledItemGetter> LeveledItems { get; }
        IGroupGetter<IWeatherGetter> Weathers { get; }
        IGroupGetter<IClimateGetter> Climates { get; }
        IGroupGetter<IRegionGetter> Regions { get; }
        IListGroupGetter<ICellBlockGetter> Cells { get; }
        IGroupGetter<IWorldspaceGetter> Worldspaces { get; }
        IGroupGetter<IDialogTopicGetter> DialogTopics { get; }
        IGroupGetter<IQuestGetter> Quests { get; }
        IGroupGetter<IIdleAnimationGetter> IdleAnimations { get; }
        IGroupGetter<IAIPackageGetter> AIPackages { get; }
        IGroupGetter<ICombatStyleGetter> CombatStyles { get; }
        IGroupGetter<ILoadScreenGetter> LoadScreens { get; }
        IGroupGetter<ILeveledSpellGetter> LeveledSpells { get; }
        IGroupGetter<IAnimatedObjectGetter> AnimatedObjects { get; }
        IGroupGetter<IWaterGetter> Waters { get; }
        IGroupGetter<IEffectShaderGetter> EffectShaders { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class OblivionModMixIn
    {
        public static void Clear(this IOblivionMod item)
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static OblivionMod.Mask<bool> GetEqualsMask(
            this IOblivionModGetter item,
            IOblivionModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IOblivionModGetter item,
            string? name = null,
            OblivionMod.Mask<bool>? printMask = null)
        {
            return ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IOblivionModGetter item,
            FileGeneration fg,
            string? name = null,
            OblivionMod.Mask<bool>? printMask = null)
        {
            ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IOblivionModGetter item,
            IOblivionModGetter rhs)
        {
            return ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IOblivionMod lhs,
            IOblivionModGetter rhs)
        {
            ((OblivionModSetterTranslationCommon)((IOblivionModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IOblivionMod lhs,
            IOblivionModGetter rhs,
            OblivionMod.TranslationMask? copyMask = null)
        {
            ((OblivionModSetterTranslationCommon)((IOblivionModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IOblivionMod lhs,
            IOblivionModGetter rhs,
            out OblivionMod.ErrorMask errorMask,
            OblivionMod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((OblivionModSetterTranslationCommon)((IOblivionModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = OblivionMod.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IOblivionMod lhs,
            IOblivionModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((OblivionModSetterTranslationCommon)((IOblivionModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static OblivionMod DeepCopy(
            this IOblivionModGetter item,
            OblivionMod.TranslationMask? copyMask = null)
        {
            return ((OblivionModSetterTranslationCommon)((IOblivionModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static OblivionMod DeepCopy(
            this IOblivionModGetter item,
            out OblivionMod.ErrorMask errorMask,
            OblivionMod.TranslationMask? copyMask = null)
        {
            return ((OblivionModSetterTranslationCommon)((IOblivionModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static OblivionMod DeepCopy(
            this IOblivionModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((OblivionModSetterTranslationCommon)((IOblivionModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static IReadOnlyCache<T, FormKey> GetTopLevelGroupGetter<T>(this IOblivionModGetter obj)
            where T : IMajorRecordCommonGetter
        {
            return (IReadOnlyCache<T, FormKey>)((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).GetGroup<T>(obj: obj);
        }

        public static ICache<T, FormKey> GetGroup<T>(this IOblivionMod obj)
            where T : IMajorRecordCommon
        {
            return (ICache<T, FormKey>)((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).GetGroup<T>(obj: obj);
        }

        public static void WriteToBinaryParallel(
            this IOblivionModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null)
        {
            OblivionModCommon.WriteParallel(
                item: item,
                stream: stream,
                param: param ?? BinaryWriteParameters.Default,
                modKey: item.ModKey);
        }

        public static void WriteToBinaryParallel(
            this IOblivionModGetter item,
            string path,
            BinaryWriteParameters? param = null)
        {
            param ??= BinaryWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            using (var stream = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                OblivionModCommon.WriteParallel(
                    item: item,
                    stream: stream,
                    param: param,
                    modKey: modKey);
            }
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this IOblivionModGetter obj)
        {
            return ((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => throw RecordException.Factory(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this IOblivionModGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m)
                .Catch(e => throw RecordException.Factory(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            this IOblivionModGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordCommonGetter)m)
                .Catch(e => throw RecordException.Factory(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this IOblivionMod obj)
        {
            return ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => throw RecordException.Factory(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IOblivionMod obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m)
                .Catch(e => throw RecordException.Factory(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(
            this IOblivionMod obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordCommon)m)
                .Catch(e => throw RecordException.Factory(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IOblivionMod obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IOblivionMod obj,
            IEnumerable<FormKey> keys)
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IOblivionMod obj,
            HashSet<FormKey> keys)
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IOblivionMod obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IOblivionMod obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IOblivionMod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IOblivionMod obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IOblivionMod obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IOblivionMod obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IOblivionMod obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IOblivionMod obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IOblivionMod, TSetter, TGetter>> EnumerateMajorRecordContexts<TSetter, TGetter>(
            this IOblivionModGetter obj,
            ILinkCache linkCache,
            bool throwIfUnknown = true)
            where TSetter : class, IMajorRecordCommon, TGetter
            where TGetter : class, IMajorRecordCommonGetter
        {
            return ((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: typeof(TGetter),
                throwIfUnknown: throwIfUnknown)
                .Select(m => m.AsType<IOblivionMod, IMajorRecordCommon, IMajorRecordCommonGetter, TSetter, TGetter>())
                .Catch(e => throw RecordException.Factory(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IOblivionMod, IMajorRecordCommon, IMajorRecordCommonGetter>> EnumerateMajorRecordContexts(
            this IOblivionModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IOblivionMod item,
            MutagenFrame frame,
            ModKey modKey,
            GroupMask? importMask = null)
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                importMask: importMask,
                modKey: modKey,
                frame: frame);
        }

        public static void CopyInFromBinary(
            this IOblivionMod item,
            ModPath path,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameRelease.Oblivion))
            {
                var modKey = path.ModKey;
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = new RecordInfoCache(() => new MutagenBinaryReadStream(path, GameRelease.Oblivion));
                frame.MetaData.Parallel = parallel;
                CopyInFromBinary(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static void CopyInFromBinary(
            this IOblivionMod item,
            Stream stream,
            ModKey modKey,
            RecordInfoCache infoCache,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            using (var reader = new MutagenBinaryReadStream(stream, modKey, GameRelease.Oblivion))
            {
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = infoCache;
                frame.MetaData.Parallel = parallel;
                CopyInFromBinary(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum OblivionMod_FieldIndex
    {
        ModHeader = 0,
        GameSettings = 1,
        Globals = 2,
        Classes = 3,
        Factions = 4,
        Hairs = 5,
        Eyes = 6,
        Races = 7,
        Sounds = 8,
        Skills = 9,
        MagicEffects = 10,
        Scripts = 11,
        LandTextures = 12,
        Enchantments = 13,
        Spells = 14,
        Birthsigns = 15,
        Activators = 16,
        AlchemicalApparatus = 17,
        Armors = 18,
        Books = 19,
        Clothes = 20,
        Containers = 21,
        Doors = 22,
        Ingredients = 23,
        Lights = 24,
        Miscellaneous = 25,
        Statics = 26,
        Grasses = 27,
        Trees = 28,
        Flora = 29,
        Furniture = 30,
        Weapons = 31,
        Ammunitions = 32,
        Npcs = 33,
        Creatures = 34,
        LeveledCreatures = 35,
        SoulGems = 36,
        Keys = 37,
        Potions = 38,
        Subspaces = 39,
        SigilStones = 40,
        LeveledItems = 41,
        Weathers = 42,
        Climates = 43,
        Regions = 44,
        Cells = 45,
        Worldspaces = 46,
        DialogTopics = 47,
        Quests = 48,
        IdleAnimations = 49,
        AIPackages = 50,
        CombatStyles = 51,
        LoadScreens = 52,
        LeveledSpells = 53,
        AnimatedObjects = 54,
        Waters = 55,
        EffectShaders = 56,
    }
    #endregion

    #region Registration
    public partial class OblivionMod_Registration : ILoquiRegistration
    {
        public static readonly OblivionMod_Registration Instance = new OblivionMod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 3,
            version: 0);

        public const string GUID = "b6f626df-b164-466b-960a-1639d88f66bc";

        public const ushort AdditionalFieldCount = 57;

        public const ushort FieldCount = 57;

        public static readonly Type MaskType = typeof(OblivionMod.Mask<>);

        public static readonly Type ErrorMaskType = typeof(OblivionMod.ErrorMask);

        public static readonly Type ClassType = typeof(OblivionMod);

        public static readonly Type GetterType = typeof(IOblivionModGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IOblivionMod);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.OblivionMod";

        public const string Name = "OblivionMod";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TES4;
        public static readonly Type BinaryWriteTranslation = typeof(OblivionModBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class OblivionModSetterCommon
    {
        public static readonly OblivionModSetterCommon Instance = new OblivionModSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IOblivionMod item)
        {
            ClearPartial();
            item.GameSettings.Clear();
            item.Globals.Clear();
            item.Classes.Clear();
            item.Factions.Clear();
            item.Hairs.Clear();
            item.Eyes.Clear();
            item.Races.Clear();
            item.Sounds.Clear();
            item.Skills.Clear();
            item.MagicEffects.Clear();
            item.Scripts.Clear();
            item.LandTextures.Clear();
            item.Enchantments.Clear();
            item.Spells.Clear();
            item.Birthsigns.Clear();
            item.Activators.Clear();
            item.AlchemicalApparatus.Clear();
            item.Armors.Clear();
            item.Books.Clear();
            item.Clothes.Clear();
            item.Containers.Clear();
            item.Doors.Clear();
            item.Ingredients.Clear();
            item.Lights.Clear();
            item.Miscellaneous.Clear();
            item.Statics.Clear();
            item.Grasses.Clear();
            item.Trees.Clear();
            item.Flora.Clear();
            item.Furniture.Clear();
            item.Weapons.Clear();
            item.Ammunitions.Clear();
            item.Npcs.Clear();
            item.Creatures.Clear();
            item.LeveledCreatures.Clear();
            item.SoulGems.Clear();
            item.Keys.Clear();
            item.Potions.Clear();
            item.Subspaces.Clear();
            item.SigilStones.Clear();
            item.LeveledItems.Clear();
            item.Weathers.Clear();
            item.Climates.Clear();
            item.Regions.Clear();
            item.Worldspaces.Clear();
            item.DialogTopics.Clear();
            item.Quests.Clear();
            item.IdleAnimations.Clear();
            item.AIPackages.Clear();
            item.CombatStyles.Clear();
            item.LoadScreens.Clear();
            item.LeveledSpells.Clear();
            item.AnimatedObjects.Clear();
            item.Waters.Clear();
            item.EffectShaders.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IOblivionMod obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.GameSettings.RemapLinks(mapping);
            obj.Globals.RemapLinks(mapping);
            obj.Classes.RemapLinks(mapping);
            obj.Factions.RemapLinks(mapping);
            obj.Hairs.RemapLinks(mapping);
            obj.Eyes.RemapLinks(mapping);
            obj.Races.RemapLinks(mapping);
            obj.Sounds.RemapLinks(mapping);
            obj.Skills.RemapLinks(mapping);
            obj.MagicEffects.RemapLinks(mapping);
            obj.Scripts.RemapLinks(mapping);
            obj.LandTextures.RemapLinks(mapping);
            obj.Enchantments.RemapLinks(mapping);
            obj.Spells.RemapLinks(mapping);
            obj.Birthsigns.RemapLinks(mapping);
            obj.Activators.RemapLinks(mapping);
            obj.AlchemicalApparatus.RemapLinks(mapping);
            obj.Armors.RemapLinks(mapping);
            obj.Books.RemapLinks(mapping);
            obj.Clothes.RemapLinks(mapping);
            obj.Containers.RemapLinks(mapping);
            obj.Doors.RemapLinks(mapping);
            obj.Ingredients.RemapLinks(mapping);
            obj.Lights.RemapLinks(mapping);
            obj.Miscellaneous.RemapLinks(mapping);
            obj.Statics.RemapLinks(mapping);
            obj.Grasses.RemapLinks(mapping);
            obj.Trees.RemapLinks(mapping);
            obj.Flora.RemapLinks(mapping);
            obj.Furniture.RemapLinks(mapping);
            obj.Weapons.RemapLinks(mapping);
            obj.Ammunitions.RemapLinks(mapping);
            obj.Npcs.RemapLinks(mapping);
            obj.Creatures.RemapLinks(mapping);
            obj.LeveledCreatures.RemapLinks(mapping);
            obj.SoulGems.RemapLinks(mapping);
            obj.Keys.RemapLinks(mapping);
            obj.Potions.RemapLinks(mapping);
            obj.Subspaces.RemapLinks(mapping);
            obj.SigilStones.RemapLinks(mapping);
            obj.LeveledItems.RemapLinks(mapping);
            obj.Weathers.RemapLinks(mapping);
            obj.Climates.RemapLinks(mapping);
            obj.Regions.RemapLinks(mapping);
            obj.Cells.RemapLinks(mapping);
            obj.Worldspaces.RemapLinks(mapping);
            obj.DialogTopics.RemapLinks(mapping);
            obj.Quests.RemapLinks(mapping);
            obj.IdleAnimations.RemapLinks(mapping);
            obj.AIPackages.RemapLinks(mapping);
            obj.CombatStyles.RemapLinks(mapping);
            obj.LoadScreens.RemapLinks(mapping);
            obj.LeveledSpells.RemapLinks(mapping);
            obj.AnimatedObjects.RemapLinks(mapping);
            obj.Waters.RemapLinks(mapping);
            obj.EffectShaders.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(IOblivionMod obj)
        {
            foreach (var item in OblivionModCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            IOblivionMod obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in OblivionModCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            IOblivionMod obj,
            HashSet<FormKey> keys)
        {
            obj.GameSettings.Remove(keys);
            obj.Globals.Remove(keys);
            obj.Classes.Remove(keys);
            obj.Factions.Remove(keys);
            obj.Hairs.Remove(keys);
            obj.Eyes.Remove(keys);
            obj.Races.Remove(keys);
            obj.Sounds.Remove(keys);
            obj.Skills.Remove(keys);
            obj.MagicEffects.Remove(keys);
            obj.Scripts.Remove(keys);
            obj.LandTextures.Remove(keys);
            obj.Enchantments.Remove(keys);
            obj.Spells.Remove(keys);
            obj.Birthsigns.Remove(keys);
            obj.Activators.Remove(keys);
            obj.AlchemicalApparatus.Remove(keys);
            obj.Armors.Remove(keys);
            obj.Books.Remove(keys);
            obj.Clothes.Remove(keys);
            obj.Containers.Remove(keys);
            obj.Doors.Remove(keys);
            obj.Ingredients.Remove(keys);
            obj.Lights.Remove(keys);
            obj.Miscellaneous.Remove(keys);
            obj.Statics.Remove(keys);
            obj.Grasses.Remove(keys);
            obj.Trees.Remove(keys);
            obj.Flora.Remove(keys);
            obj.Furniture.Remove(keys);
            obj.Weapons.Remove(keys);
            obj.Ammunitions.Remove(keys);
            obj.Npcs.Remove(keys);
            obj.Creatures.Remove(keys);
            obj.LeveledCreatures.Remove(keys);
            obj.SoulGems.Remove(keys);
            obj.Keys.Remove(keys);
            obj.Potions.Remove(keys);
            obj.Subspaces.Remove(keys);
            obj.SigilStones.Remove(keys);
            obj.LeveledItems.Remove(keys);
            obj.Weathers.Remove(keys);
            obj.Climates.Remove(keys);
            obj.Regions.Remove(keys);
            obj.Cells.Remove(keys);
            obj.Worldspaces.Remove(keys);
            obj.DialogTopics.Remove(keys);
            obj.Quests.Remove(keys);
            obj.IdleAnimations.Remove(keys);
            obj.AIPackages.Remove(keys);
            obj.CombatStyles.Remove(keys);
            obj.LoadScreens.Remove(keys);
            obj.LeveledSpells.Remove(keys);
            obj.AnimatedObjects.Remove(keys);
            obj.Waters.Remove(keys);
            obj.EffectShaders.Remove(keys);
        }
        
        public void Remove(
            IOblivionMod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "OblivionMajorRecord":
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IOblivionMajorRecordGetter":
                    if (!OblivionMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    obj.GameSettings.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    obj.Globals.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    obj.Classes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    obj.Factions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    obj.Hairs.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Eye":
                case "IEyeGetter":
                case "IEye":
                case "IEyeInternal":
                    obj.Eyes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    obj.Races.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Sound":
                case "ISoundGetter":
                case "ISound":
                case "ISoundInternal":
                    obj.Sounds.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SkillRecord":
                case "ISkillRecordGetter":
                case "ISkillRecord":
                case "ISkillRecordInternal":
                    obj.Skills.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    obj.MagicEffects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Script":
                case "IScriptGetter":
                case "IScript":
                case "IScriptInternal":
                    obj.Scripts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LandTexture":
                case "ILandTextureGetter":
                case "ILandTexture":
                case "ILandTextureInternal":
                    obj.LandTextures.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Enchantment":
                case "IEnchantmentGetter":
                case "IEnchantment":
                case "IEnchantmentInternal":
                    obj.Enchantments.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SpellUnleveled":
                case "ISpellUnleveledGetter":
                case "ISpellUnleveled":
                case "ISpellUnleveledInternal":
                    obj.Spells.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Birthsign":
                case "IBirthsignGetter":
                case "IBirthsign":
                case "IBirthsignInternal":
                    obj.Birthsigns.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    obj.Activators.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    obj.AlchemicalApparatus.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    obj.Armors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    obj.Books.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Clothing":
                case "IClothingGetter":
                case "IClothing":
                case "IClothingInternal":
                    obj.Clothes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    obj.Containers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    obj.Doors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    obj.Ingredients.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    obj.Lights.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Miscellaneous":
                case "IMiscellaneousGetter":
                case "IMiscellaneous":
                case "IMiscellaneousInternal":
                    obj.Miscellaneous.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    obj.Statics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    obj.Grasses.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    obj.Trees.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    obj.Flora.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    obj.Furniture.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    obj.Weapons.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    obj.Ammunitions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    obj.Npcs.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Creature":
                case "ICreatureGetter":
                case "ICreature":
                case "ICreatureInternal":
                    obj.Creatures.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledCreature":
                case "ILeveledCreatureGetter":
                case "ILeveledCreature":
                case "ILeveledCreatureInternal":
                    obj.LeveledCreatures.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    obj.SoulGems.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    obj.Keys.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Potion":
                case "IPotionGetter":
                case "IPotion":
                case "IPotionInternal":
                    obj.Potions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Subspace":
                case "ISubspaceGetter":
                case "ISubspace":
                case "ISubspaceInternal":
                    obj.Subspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SigilStone":
                case "ISigilStoneGetter":
                case "ISigilStone":
                case "ISigilStoneInternal":
                    obj.SigilStones.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    obj.LeveledItems.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    obj.Weathers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    obj.Climates.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    obj.Regions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    obj.DialogTopics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    obj.Quests.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    obj.IdleAnimations.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AIPackage":
                case "IAIPackageGetter":
                case "IAIPackage":
                case "IAIPackageInternal":
                    obj.AIPackages.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    obj.CombatStyles.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    obj.LoadScreens.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    obj.LeveledSpells.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    obj.AnimatedObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    obj.Waters.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    obj.EffectShaders.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PathGrid":
                case "IPathGridGetter":
                case "IPathGrid":
                case "IPathGridInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlacedCreature":
                case "IPlacedCreatureGetter":
                case "IPlacedCreature":
                case "IPlacedCreatureInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Road":
                case "IRoadGetter":
                case "IRoad":
                case "IRoadInternal":
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogItem":
                case "IDialogItemGetter":
                case "IDialogItem":
                case "IDialogItemInternal":
                    obj.DialogTopics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IOwner":
                case "IOwnerGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IPlaced":
                case "IPlacedGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IOblivionMod item,
            MutagenFrame frame,
            ModKey modKey,
            GroupMask? importMask = null)
        {
            UtilityTranslation.ModParse(
                record: item,
                frame: frame,
                importMask: importMask,
                fillStructs: OblivionModBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: OblivionModBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class OblivionModCommon
    {
        public static readonly OblivionModCommon Instance = new OblivionModCommon();

        public OblivionMod.Mask<bool> GetEqualsMask(
            IOblivionModGetter item,
            IOblivionModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new OblivionMod.Mask<bool>(false);
            ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IOblivionModGetter item,
            IOblivionModGetter rhs,
            OblivionMod.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ModHeader = MaskItemExt.Factory(item.ModHeader.GetEqualsMask(rhs.ModHeader, include), include);
            ret.GameSettings = MaskItemExt.Factory(item.GameSettings.GetEqualsMask(rhs.GameSettings, include), include);
            ret.Globals = MaskItemExt.Factory(item.Globals.GetEqualsMask(rhs.Globals, include), include);
            ret.Classes = MaskItemExt.Factory(item.Classes.GetEqualsMask(rhs.Classes, include), include);
            ret.Factions = MaskItemExt.Factory(item.Factions.GetEqualsMask(rhs.Factions, include), include);
            ret.Hairs = MaskItemExt.Factory(item.Hairs.GetEqualsMask(rhs.Hairs, include), include);
            ret.Eyes = MaskItemExt.Factory(item.Eyes.GetEqualsMask(rhs.Eyes, include), include);
            ret.Races = MaskItemExt.Factory(item.Races.GetEqualsMask(rhs.Races, include), include);
            ret.Sounds = MaskItemExt.Factory(item.Sounds.GetEqualsMask(rhs.Sounds, include), include);
            ret.Skills = MaskItemExt.Factory(item.Skills.GetEqualsMask(rhs.Skills, include), include);
            ret.MagicEffects = MaskItemExt.Factory(item.MagicEffects.GetEqualsMask(rhs.MagicEffects, include), include);
            ret.Scripts = MaskItemExt.Factory(item.Scripts.GetEqualsMask(rhs.Scripts, include), include);
            ret.LandTextures = MaskItemExt.Factory(item.LandTextures.GetEqualsMask(rhs.LandTextures, include), include);
            ret.Enchantments = MaskItemExt.Factory(item.Enchantments.GetEqualsMask(rhs.Enchantments, include), include);
            ret.Spells = MaskItemExt.Factory(item.Spells.GetEqualsMask(rhs.Spells, include), include);
            ret.Birthsigns = MaskItemExt.Factory(item.Birthsigns.GetEqualsMask(rhs.Birthsigns, include), include);
            ret.Activators = MaskItemExt.Factory(item.Activators.GetEqualsMask(rhs.Activators, include), include);
            ret.AlchemicalApparatus = MaskItemExt.Factory(item.AlchemicalApparatus.GetEqualsMask(rhs.AlchemicalApparatus, include), include);
            ret.Armors = MaskItemExt.Factory(item.Armors.GetEqualsMask(rhs.Armors, include), include);
            ret.Books = MaskItemExt.Factory(item.Books.GetEqualsMask(rhs.Books, include), include);
            ret.Clothes = MaskItemExt.Factory(item.Clothes.GetEqualsMask(rhs.Clothes, include), include);
            ret.Containers = MaskItemExt.Factory(item.Containers.GetEqualsMask(rhs.Containers, include), include);
            ret.Doors = MaskItemExt.Factory(item.Doors.GetEqualsMask(rhs.Doors, include), include);
            ret.Ingredients = MaskItemExt.Factory(item.Ingredients.GetEqualsMask(rhs.Ingredients, include), include);
            ret.Lights = MaskItemExt.Factory(item.Lights.GetEqualsMask(rhs.Lights, include), include);
            ret.Miscellaneous = MaskItemExt.Factory(item.Miscellaneous.GetEqualsMask(rhs.Miscellaneous, include), include);
            ret.Statics = MaskItemExt.Factory(item.Statics.GetEqualsMask(rhs.Statics, include), include);
            ret.Grasses = MaskItemExt.Factory(item.Grasses.GetEqualsMask(rhs.Grasses, include), include);
            ret.Trees = MaskItemExt.Factory(item.Trees.GetEqualsMask(rhs.Trees, include), include);
            ret.Flora = MaskItemExt.Factory(item.Flora.GetEqualsMask(rhs.Flora, include), include);
            ret.Furniture = MaskItemExt.Factory(item.Furniture.GetEqualsMask(rhs.Furniture, include), include);
            ret.Weapons = MaskItemExt.Factory(item.Weapons.GetEqualsMask(rhs.Weapons, include), include);
            ret.Ammunitions = MaskItemExt.Factory(item.Ammunitions.GetEqualsMask(rhs.Ammunitions, include), include);
            ret.Npcs = MaskItemExt.Factory(item.Npcs.GetEqualsMask(rhs.Npcs, include), include);
            ret.Creatures = MaskItemExt.Factory(item.Creatures.GetEqualsMask(rhs.Creatures, include), include);
            ret.LeveledCreatures = MaskItemExt.Factory(item.LeveledCreatures.GetEqualsMask(rhs.LeveledCreatures, include), include);
            ret.SoulGems = MaskItemExt.Factory(item.SoulGems.GetEqualsMask(rhs.SoulGems, include), include);
            ret.Keys = MaskItemExt.Factory(item.Keys.GetEqualsMask(rhs.Keys, include), include);
            ret.Potions = MaskItemExt.Factory(item.Potions.GetEqualsMask(rhs.Potions, include), include);
            ret.Subspaces = MaskItemExt.Factory(item.Subspaces.GetEqualsMask(rhs.Subspaces, include), include);
            ret.SigilStones = MaskItemExt.Factory(item.SigilStones.GetEqualsMask(rhs.SigilStones, include), include);
            ret.LeveledItems = MaskItemExt.Factory(item.LeveledItems.GetEqualsMask(rhs.LeveledItems, include), include);
            ret.Weathers = MaskItemExt.Factory(item.Weathers.GetEqualsMask(rhs.Weathers, include), include);
            ret.Climates = MaskItemExt.Factory(item.Climates.GetEqualsMask(rhs.Climates, include), include);
            ret.Regions = MaskItemExt.Factory(item.Regions.GetEqualsMask(rhs.Regions, include), include);
            ret.Cells = MaskItemExt.Factory(item.Cells.GetEqualsMask(rhs.Cells, include), include);
            ret.Worldspaces = MaskItemExt.Factory(item.Worldspaces.GetEqualsMask(rhs.Worldspaces, include), include);
            ret.DialogTopics = MaskItemExt.Factory(item.DialogTopics.GetEqualsMask(rhs.DialogTopics, include), include);
            ret.Quests = MaskItemExt.Factory(item.Quests.GetEqualsMask(rhs.Quests, include), include);
            ret.IdleAnimations = MaskItemExt.Factory(item.IdleAnimations.GetEqualsMask(rhs.IdleAnimations, include), include);
            ret.AIPackages = MaskItemExt.Factory(item.AIPackages.GetEqualsMask(rhs.AIPackages, include), include);
            ret.CombatStyles = MaskItemExt.Factory(item.CombatStyles.GetEqualsMask(rhs.CombatStyles, include), include);
            ret.LoadScreens = MaskItemExt.Factory(item.LoadScreens.GetEqualsMask(rhs.LoadScreens, include), include);
            ret.LeveledSpells = MaskItemExt.Factory(item.LeveledSpells.GetEqualsMask(rhs.LeveledSpells, include), include);
            ret.AnimatedObjects = MaskItemExt.Factory(item.AnimatedObjects.GetEqualsMask(rhs.AnimatedObjects, include), include);
            ret.Waters = MaskItemExt.Factory(item.Waters.GetEqualsMask(rhs.Waters, include), include);
            ret.EffectShaders = MaskItemExt.Factory(item.EffectShaders.GetEqualsMask(rhs.EffectShaders, include), include);
        }
        
        public string ToString(
            IOblivionModGetter item,
            string? name = null,
            OblivionMod.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IOblivionModGetter item,
            FileGeneration fg,
            string? name = null,
            OblivionMod.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"OblivionMod =>");
            }
            else
            {
                fg.AppendLine($"{name} (OblivionMod) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IOblivionModGetter item,
            FileGeneration fg,
            OblivionMod.Mask<bool>? printMask = null)
        {
            if (printMask?.ModHeader?.Overall ?? true)
            {
                item.ModHeader?.ToString(fg, "ModHeader");
            }
            if (printMask?.GameSettings?.Overall ?? true)
            {
                item.GameSettings?.ToString(fg, "GameSettings");
            }
            if (printMask?.Globals?.Overall ?? true)
            {
                item.Globals?.ToString(fg, "Globals");
            }
            if (printMask?.Classes?.Overall ?? true)
            {
                item.Classes?.ToString(fg, "Classes");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                item.Factions?.ToString(fg, "Factions");
            }
            if (printMask?.Hairs?.Overall ?? true)
            {
                item.Hairs?.ToString(fg, "Hairs");
            }
            if (printMask?.Eyes?.Overall ?? true)
            {
                item.Eyes?.ToString(fg, "Eyes");
            }
            if (printMask?.Races?.Overall ?? true)
            {
                item.Races?.ToString(fg, "Races");
            }
            if (printMask?.Sounds?.Overall ?? true)
            {
                item.Sounds?.ToString(fg, "Sounds");
            }
            if (printMask?.Skills?.Overall ?? true)
            {
                item.Skills?.ToString(fg, "Skills");
            }
            if (printMask?.MagicEffects?.Overall ?? true)
            {
                item.MagicEffects?.ToString(fg, "MagicEffects");
            }
            if (printMask?.Scripts?.Overall ?? true)
            {
                item.Scripts?.ToString(fg, "Scripts");
            }
            if (printMask?.LandTextures?.Overall ?? true)
            {
                item.LandTextures?.ToString(fg, "LandTextures");
            }
            if (printMask?.Enchantments?.Overall ?? true)
            {
                item.Enchantments?.ToString(fg, "Enchantments");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                item.Spells?.ToString(fg, "Spells");
            }
            if (printMask?.Birthsigns?.Overall ?? true)
            {
                item.Birthsigns?.ToString(fg, "Birthsigns");
            }
            if (printMask?.Activators?.Overall ?? true)
            {
                item.Activators?.ToString(fg, "Activators");
            }
            if (printMask?.AlchemicalApparatus?.Overall ?? true)
            {
                item.AlchemicalApparatus?.ToString(fg, "AlchemicalApparatus");
            }
            if (printMask?.Armors?.Overall ?? true)
            {
                item.Armors?.ToString(fg, "Armors");
            }
            if (printMask?.Books?.Overall ?? true)
            {
                item.Books?.ToString(fg, "Books");
            }
            if (printMask?.Clothes?.Overall ?? true)
            {
                item.Clothes?.ToString(fg, "Clothes");
            }
            if (printMask?.Containers?.Overall ?? true)
            {
                item.Containers?.ToString(fg, "Containers");
            }
            if (printMask?.Doors?.Overall ?? true)
            {
                item.Doors?.ToString(fg, "Doors");
            }
            if (printMask?.Ingredients?.Overall ?? true)
            {
                item.Ingredients?.ToString(fg, "Ingredients");
            }
            if (printMask?.Lights?.Overall ?? true)
            {
                item.Lights?.ToString(fg, "Lights");
            }
            if (printMask?.Miscellaneous?.Overall ?? true)
            {
                item.Miscellaneous?.ToString(fg, "Miscellaneous");
            }
            if (printMask?.Statics?.Overall ?? true)
            {
                item.Statics?.ToString(fg, "Statics");
            }
            if (printMask?.Grasses?.Overall ?? true)
            {
                item.Grasses?.ToString(fg, "Grasses");
            }
            if (printMask?.Trees?.Overall ?? true)
            {
                item.Trees?.ToString(fg, "Trees");
            }
            if (printMask?.Flora?.Overall ?? true)
            {
                item.Flora?.ToString(fg, "Flora");
            }
            if (printMask?.Furniture?.Overall ?? true)
            {
                item.Furniture?.ToString(fg, "Furniture");
            }
            if (printMask?.Weapons?.Overall ?? true)
            {
                item.Weapons?.ToString(fg, "Weapons");
            }
            if (printMask?.Ammunitions?.Overall ?? true)
            {
                item.Ammunitions?.ToString(fg, "Ammunitions");
            }
            if (printMask?.Npcs?.Overall ?? true)
            {
                item.Npcs?.ToString(fg, "Npcs");
            }
            if (printMask?.Creatures?.Overall ?? true)
            {
                item.Creatures?.ToString(fg, "Creatures");
            }
            if (printMask?.LeveledCreatures?.Overall ?? true)
            {
                item.LeveledCreatures?.ToString(fg, "LeveledCreatures");
            }
            if (printMask?.SoulGems?.Overall ?? true)
            {
                item.SoulGems?.ToString(fg, "SoulGems");
            }
            if (printMask?.Keys?.Overall ?? true)
            {
                item.Keys?.ToString(fg, "Keys");
            }
            if (printMask?.Potions?.Overall ?? true)
            {
                item.Potions?.ToString(fg, "Potions");
            }
            if (printMask?.Subspaces?.Overall ?? true)
            {
                item.Subspaces?.ToString(fg, "Subspaces");
            }
            if (printMask?.SigilStones?.Overall ?? true)
            {
                item.SigilStones?.ToString(fg, "SigilStones");
            }
            if (printMask?.LeveledItems?.Overall ?? true)
            {
                item.LeveledItems?.ToString(fg, "LeveledItems");
            }
            if (printMask?.Weathers?.Overall ?? true)
            {
                item.Weathers?.ToString(fg, "Weathers");
            }
            if (printMask?.Climates?.Overall ?? true)
            {
                item.Climates?.ToString(fg, "Climates");
            }
            if (printMask?.Regions?.Overall ?? true)
            {
                item.Regions?.ToString(fg, "Regions");
            }
            if (printMask?.Cells?.Overall ?? true)
            {
                item.Cells?.ToString(fg, "Cells");
            }
            if (printMask?.Worldspaces?.Overall ?? true)
            {
                item.Worldspaces?.ToString(fg, "Worldspaces");
            }
            if (printMask?.DialogTopics?.Overall ?? true)
            {
                item.DialogTopics?.ToString(fg, "DialogTopics");
            }
            if (printMask?.Quests?.Overall ?? true)
            {
                item.Quests?.ToString(fg, "Quests");
            }
            if (printMask?.IdleAnimations?.Overall ?? true)
            {
                item.IdleAnimations?.ToString(fg, "IdleAnimations");
            }
            if (printMask?.AIPackages?.Overall ?? true)
            {
                item.AIPackages?.ToString(fg, "AIPackages");
            }
            if (printMask?.CombatStyles?.Overall ?? true)
            {
                item.CombatStyles?.ToString(fg, "CombatStyles");
            }
            if (printMask?.LoadScreens?.Overall ?? true)
            {
                item.LoadScreens?.ToString(fg, "LoadScreens");
            }
            if (printMask?.LeveledSpells?.Overall ?? true)
            {
                item.LeveledSpells?.ToString(fg, "LeveledSpells");
            }
            if (printMask?.AnimatedObjects?.Overall ?? true)
            {
                item.AnimatedObjects?.ToString(fg, "AnimatedObjects");
            }
            if (printMask?.Waters?.Overall ?? true)
            {
                item.Waters?.ToString(fg, "Waters");
            }
            if (printMask?.EffectShaders?.Overall ?? true)
            {
                item.EffectShaders?.ToString(fg, "EffectShaders");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IOblivionModGetter? lhs,
            IOblivionModGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.ModHeader, rhs.ModHeader)) return false;
            if (!object.Equals(lhs.GameSettings, rhs.GameSettings)) return false;
            if (!object.Equals(lhs.Globals, rhs.Globals)) return false;
            if (!object.Equals(lhs.Classes, rhs.Classes)) return false;
            if (!object.Equals(lhs.Factions, rhs.Factions)) return false;
            if (!object.Equals(lhs.Hairs, rhs.Hairs)) return false;
            if (!object.Equals(lhs.Eyes, rhs.Eyes)) return false;
            if (!object.Equals(lhs.Races, rhs.Races)) return false;
            if (!object.Equals(lhs.Sounds, rhs.Sounds)) return false;
            if (!object.Equals(lhs.Skills, rhs.Skills)) return false;
            if (!object.Equals(lhs.MagicEffects, rhs.MagicEffects)) return false;
            if (!object.Equals(lhs.Scripts, rhs.Scripts)) return false;
            if (!object.Equals(lhs.LandTextures, rhs.LandTextures)) return false;
            if (!object.Equals(lhs.Enchantments, rhs.Enchantments)) return false;
            if (!object.Equals(lhs.Spells, rhs.Spells)) return false;
            if (!object.Equals(lhs.Birthsigns, rhs.Birthsigns)) return false;
            if (!object.Equals(lhs.Activators, rhs.Activators)) return false;
            if (!object.Equals(lhs.AlchemicalApparatus, rhs.AlchemicalApparatus)) return false;
            if (!object.Equals(lhs.Armors, rhs.Armors)) return false;
            if (!object.Equals(lhs.Books, rhs.Books)) return false;
            if (!object.Equals(lhs.Clothes, rhs.Clothes)) return false;
            if (!object.Equals(lhs.Containers, rhs.Containers)) return false;
            if (!object.Equals(lhs.Doors, rhs.Doors)) return false;
            if (!object.Equals(lhs.Ingredients, rhs.Ingredients)) return false;
            if (!object.Equals(lhs.Lights, rhs.Lights)) return false;
            if (!object.Equals(lhs.Miscellaneous, rhs.Miscellaneous)) return false;
            if (!object.Equals(lhs.Statics, rhs.Statics)) return false;
            if (!object.Equals(lhs.Grasses, rhs.Grasses)) return false;
            if (!object.Equals(lhs.Trees, rhs.Trees)) return false;
            if (!object.Equals(lhs.Flora, rhs.Flora)) return false;
            if (!object.Equals(lhs.Furniture, rhs.Furniture)) return false;
            if (!object.Equals(lhs.Weapons, rhs.Weapons)) return false;
            if (!object.Equals(lhs.Ammunitions, rhs.Ammunitions)) return false;
            if (!object.Equals(lhs.Npcs, rhs.Npcs)) return false;
            if (!object.Equals(lhs.Creatures, rhs.Creatures)) return false;
            if (!object.Equals(lhs.LeveledCreatures, rhs.LeveledCreatures)) return false;
            if (!object.Equals(lhs.SoulGems, rhs.SoulGems)) return false;
            if (!object.Equals(lhs.Keys, rhs.Keys)) return false;
            if (!object.Equals(lhs.Potions, rhs.Potions)) return false;
            if (!object.Equals(lhs.Subspaces, rhs.Subspaces)) return false;
            if (!object.Equals(lhs.SigilStones, rhs.SigilStones)) return false;
            if (!object.Equals(lhs.LeveledItems, rhs.LeveledItems)) return false;
            if (!object.Equals(lhs.Weathers, rhs.Weathers)) return false;
            if (!object.Equals(lhs.Climates, rhs.Climates)) return false;
            if (!object.Equals(lhs.Regions, rhs.Regions)) return false;
            if (!object.Equals(lhs.Cells, rhs.Cells)) return false;
            if (!object.Equals(lhs.Worldspaces, rhs.Worldspaces)) return false;
            if (!object.Equals(lhs.DialogTopics, rhs.DialogTopics)) return false;
            if (!object.Equals(lhs.Quests, rhs.Quests)) return false;
            if (!object.Equals(lhs.IdleAnimations, rhs.IdleAnimations)) return false;
            if (!object.Equals(lhs.AIPackages, rhs.AIPackages)) return false;
            if (!object.Equals(lhs.CombatStyles, rhs.CombatStyles)) return false;
            if (!object.Equals(lhs.LoadScreens, rhs.LoadScreens)) return false;
            if (!object.Equals(lhs.LeveledSpells, rhs.LeveledSpells)) return false;
            if (!object.Equals(lhs.AnimatedObjects, rhs.AnimatedObjects)) return false;
            if (!object.Equals(lhs.Waters, rhs.Waters)) return false;
            if (!object.Equals(lhs.EffectShaders, rhs.EffectShaders)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IOblivionModGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ModHeader);
            hash.Add(item.GameSettings);
            hash.Add(item.Globals);
            hash.Add(item.Classes);
            hash.Add(item.Factions);
            hash.Add(item.Hairs);
            hash.Add(item.Eyes);
            hash.Add(item.Races);
            hash.Add(item.Sounds);
            hash.Add(item.Skills);
            hash.Add(item.MagicEffects);
            hash.Add(item.Scripts);
            hash.Add(item.LandTextures);
            hash.Add(item.Enchantments);
            hash.Add(item.Spells);
            hash.Add(item.Birthsigns);
            hash.Add(item.Activators);
            hash.Add(item.AlchemicalApparatus);
            hash.Add(item.Armors);
            hash.Add(item.Books);
            hash.Add(item.Clothes);
            hash.Add(item.Containers);
            hash.Add(item.Doors);
            hash.Add(item.Ingredients);
            hash.Add(item.Lights);
            hash.Add(item.Miscellaneous);
            hash.Add(item.Statics);
            hash.Add(item.Grasses);
            hash.Add(item.Trees);
            hash.Add(item.Flora);
            hash.Add(item.Furniture);
            hash.Add(item.Weapons);
            hash.Add(item.Ammunitions);
            hash.Add(item.Npcs);
            hash.Add(item.Creatures);
            hash.Add(item.LeveledCreatures);
            hash.Add(item.SoulGems);
            hash.Add(item.Keys);
            hash.Add(item.Potions);
            hash.Add(item.Subspaces);
            hash.Add(item.SigilStones);
            hash.Add(item.LeveledItems);
            hash.Add(item.Weathers);
            hash.Add(item.Climates);
            hash.Add(item.Regions);
            hash.Add(item.Cells);
            hash.Add(item.Worldspaces);
            hash.Add(item.DialogTopics);
            hash.Add(item.Quests);
            hash.Add(item.IdleAnimations);
            hash.Add(item.AIPackages);
            hash.Add(item.CombatStyles);
            hash.Add(item.LoadScreens);
            hash.Add(item.LeveledSpells);
            hash.Add(item.AnimatedObjects);
            hash.Add(item.Waters);
            hash.Add(item.EffectShaders);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return OblivionMod.GetNew();
        }
        
        #region Mutagen
        public object GetGroup<TMajor>(IOblivionModGetter obj)
            where TMajor : IMajorRecordCommonGetter
        {
            switch (typeof(TMajor).Name)
            {
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    return obj.GameSettings.RecordCache;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    return obj.Globals.RecordCache;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    return obj.Classes.RecordCache;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    return obj.Factions.RecordCache;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    return obj.Hairs.RecordCache;
                case "Eye":
                case "IEyeGetter":
                case "IEye":
                case "IEyeInternal":
                    return obj.Eyes.RecordCache;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    return obj.Races.RecordCache;
                case "Sound":
                case "ISoundGetter":
                case "ISound":
                case "ISoundInternal":
                    return obj.Sounds.RecordCache;
                case "SkillRecord":
                case "ISkillRecordGetter":
                case "ISkillRecord":
                case "ISkillRecordInternal":
                    return obj.Skills.RecordCache;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    return obj.MagicEffects.RecordCache;
                case "Script":
                case "IScriptGetter":
                case "IScript":
                case "IScriptInternal":
                    return obj.Scripts.RecordCache;
                case "LandTexture":
                case "ILandTextureGetter":
                case "ILandTexture":
                case "ILandTextureInternal":
                    return obj.LandTextures.RecordCache;
                case "Enchantment":
                case "IEnchantmentGetter":
                case "IEnchantment":
                case "IEnchantmentInternal":
                    return obj.Enchantments.RecordCache;
                case "SpellUnleveled":
                case "ISpellUnleveledGetter":
                case "ISpellUnleveled":
                case "ISpellUnleveledInternal":
                    return obj.Spells.RecordCache;
                case "Birthsign":
                case "IBirthsignGetter":
                case "IBirthsign":
                case "IBirthsignInternal":
                    return obj.Birthsigns.RecordCache;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    return obj.Activators.RecordCache;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    return obj.AlchemicalApparatus.RecordCache;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    return obj.Armors.RecordCache;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    return obj.Books.RecordCache;
                case "Clothing":
                case "IClothingGetter":
                case "IClothing":
                case "IClothingInternal":
                    return obj.Clothes.RecordCache;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    return obj.Containers.RecordCache;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    return obj.Doors.RecordCache;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    return obj.Ingredients.RecordCache;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    return obj.Lights.RecordCache;
                case "Miscellaneous":
                case "IMiscellaneousGetter":
                case "IMiscellaneous":
                case "IMiscellaneousInternal":
                    return obj.Miscellaneous.RecordCache;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    return obj.Statics.RecordCache;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    return obj.Grasses.RecordCache;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    return obj.Trees.RecordCache;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    return obj.Flora.RecordCache;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    return obj.Furniture.RecordCache;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    return obj.Weapons.RecordCache;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    return obj.Ammunitions.RecordCache;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    return obj.Npcs.RecordCache;
                case "Creature":
                case "ICreatureGetter":
                case "ICreature":
                case "ICreatureInternal":
                    return obj.Creatures.RecordCache;
                case "LeveledCreature":
                case "ILeveledCreatureGetter":
                case "ILeveledCreature":
                case "ILeveledCreatureInternal":
                    return obj.LeveledCreatures.RecordCache;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    return obj.SoulGems.RecordCache;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    return obj.Keys.RecordCache;
                case "Potion":
                case "IPotionGetter":
                case "IPotion":
                case "IPotionInternal":
                    return obj.Potions.RecordCache;
                case "Subspace":
                case "ISubspaceGetter":
                case "ISubspace":
                case "ISubspaceInternal":
                    return obj.Subspaces.RecordCache;
                case "SigilStone":
                case "ISigilStoneGetter":
                case "ISigilStone":
                case "ISigilStoneInternal":
                    return obj.SigilStones.RecordCache;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    return obj.LeveledItems.RecordCache;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    return obj.Weathers.RecordCache;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    return obj.Climates.RecordCache;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    return obj.Regions.RecordCache;
                case "CellBlock":
                case "ICellBlockGetter":
                case "ICellBlock":
                    return obj.Cells.Records;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    return obj.Worldspaces.RecordCache;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    return obj.DialogTopics.RecordCache;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    return obj.Quests.RecordCache;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    return obj.IdleAnimations.RecordCache;
                case "AIPackage":
                case "IAIPackageGetter":
                case "IAIPackage":
                case "IAIPackageInternal":
                    return obj.AIPackages.RecordCache;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    return obj.CombatStyles.RecordCache;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    return obj.LoadScreens.RecordCache;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    return obj.LeveledSpells.RecordCache;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    return obj.AnimatedObjects.RecordCache;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    return obj.Waters.RecordCache;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    return obj.EffectShaders.RecordCache;
                default:
                    throw new ArgumentException($"Unknown major record type: {typeof(TMajor)}");
            }
        }
        
        const int CutCount = 100;
        public static void WriteParallel(
            IOblivionModGetter item,
            Stream stream,
            BinaryWriteParameters param,
            ModKey modKey)
        {
            var bundle = new WritingBundle(GameConstants.Oblivion);
            var writer = new MutagenWriter(stream, bundle);
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            Stream[] outputStreams = new Stream[56];
            List<Action> toDo = new List<Action>();
            toDo.Add(() => WriteGroupParallel(item.GameSettings, writer.MetaData.MasterReferences!, 0, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Globals, writer.MetaData.MasterReferences!, 1, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Classes, writer.MetaData.MasterReferences!, 2, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Factions, writer.MetaData.MasterReferences!, 3, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Hairs, writer.MetaData.MasterReferences!, 4, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Eyes, writer.MetaData.MasterReferences!, 5, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Races, writer.MetaData.MasterReferences!, 6, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Sounds, writer.MetaData.MasterReferences!, 7, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Skills, writer.MetaData.MasterReferences!, 8, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.MagicEffects, writer.MetaData.MasterReferences!, 9, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Scripts, writer.MetaData.MasterReferences!, 10, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.LandTextures, writer.MetaData.MasterReferences!, 11, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Enchantments, writer.MetaData.MasterReferences!, 12, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Spells, writer.MetaData.MasterReferences!, 13, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Birthsigns, writer.MetaData.MasterReferences!, 14, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Activators, writer.MetaData.MasterReferences!, 15, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.AlchemicalApparatus, writer.MetaData.MasterReferences!, 16, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Armors, writer.MetaData.MasterReferences!, 17, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Books, writer.MetaData.MasterReferences!, 18, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Clothes, writer.MetaData.MasterReferences!, 19, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Containers, writer.MetaData.MasterReferences!, 20, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Doors, writer.MetaData.MasterReferences!, 21, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Ingredients, writer.MetaData.MasterReferences!, 22, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Lights, writer.MetaData.MasterReferences!, 23, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Miscellaneous, writer.MetaData.MasterReferences!, 24, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Statics, writer.MetaData.MasterReferences!, 25, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Grasses, writer.MetaData.MasterReferences!, 26, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Trees, writer.MetaData.MasterReferences!, 27, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Flora, writer.MetaData.MasterReferences!, 28, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Furniture, writer.MetaData.MasterReferences!, 29, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Weapons, writer.MetaData.MasterReferences!, 30, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Ammunitions, writer.MetaData.MasterReferences!, 31, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Npcs, writer.MetaData.MasterReferences!, 32, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Creatures, writer.MetaData.MasterReferences!, 33, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.LeveledCreatures, writer.MetaData.MasterReferences!, 34, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.SoulGems, writer.MetaData.MasterReferences!, 35, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Keys, writer.MetaData.MasterReferences!, 36, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Potions, writer.MetaData.MasterReferences!, 37, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Subspaces, writer.MetaData.MasterReferences!, 38, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.SigilStones, writer.MetaData.MasterReferences!, 39, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.LeveledItems, writer.MetaData.MasterReferences!, 40, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Weathers, writer.MetaData.MasterReferences!, 41, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Climates, writer.MetaData.MasterReferences!, 42, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Regions, writer.MetaData.MasterReferences!, 43, outputStreams));
            toDo.Add(() => WriteCellsParallel(item.Cells, writer.MetaData.MasterReferences!, 44, outputStreams));
            toDo.Add(() => WriteWorldspacesParallel(item.Worldspaces, writer.MetaData.MasterReferences!, 45, outputStreams));
            toDo.Add(() => WriteDialogTopicsParallel(item.DialogTopics, writer.MetaData.MasterReferences!, 46, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Quests, writer.MetaData.MasterReferences!, 47, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.IdleAnimations, writer.MetaData.MasterReferences!, 48, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.AIPackages, writer.MetaData.MasterReferences!, 49, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.CombatStyles, writer.MetaData.MasterReferences!, 50, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.LoadScreens, writer.MetaData.MasterReferences!, 51, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.LeveledSpells, writer.MetaData.MasterReferences!, 52, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.AnimatedObjects, writer.MetaData.MasterReferences!, 53, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Waters, writer.MetaData.MasterReferences!, 54, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.EffectShaders, writer.MetaData.MasterReferences!, 55, outputStreams));
            Parallel.Invoke(toDo.ToArray());
            UtilityTranslation.CompileStreamsInto(
                outputStreams.NotNull(),
                stream);
        }
        
        public static void WriteGroupParallel<T>(
            IGroupGetter<T> group,
            MasterReferenceReader masters,
            int targetIndex,
            Stream[] streamDepositArray)
            where T : class, IOblivionMajorRecordGetter, IBinaryItem
        {
            if (group.RecordCache.Count == 0) return;
            var cuts = group.Cut(CutCount).ToArray();
            Stream[] subStreams = new Stream[cuts.Length + 1];
            byte[] groupBytes = new byte[GameConstants.Oblivion.GroupConstants.HeaderLength];
            BinaryPrimitives.WriteInt32LittleEndian(groupBytes.AsSpan(), RecordTypes.GRUP.TypeInt);
            var groupByteStream = new MemoryStream(groupBytes);
            using (var stream = new MutagenWriter(groupByteStream, GameConstants.Oblivion, dispose: false))
            {
                stream.Position += 8;
                GroupBinaryWriteTranslation.WriteEmbedded<T>(group, stream);
            }
            subStreams[0] = groupByteStream;
            Parallel.ForEach(cuts, (cutItems, state, counter) =>
            {
                MemoryTributary trib = new MemoryTributary();
                var bundle = new WritingBundle(GameConstants.Oblivion)
                {
                    MasterReferences = masters
                };
                using (var stream = new MutagenWriter(trib, bundle, dispose: false))
                {
                    foreach (var item in cutItems)
                    {
                        item.WriteToBinary(stream);
                    }
                }
                subStreams[(int)counter + 1] = trib;
            });
            UtilityTranslation.CompileSetGroupLength(subStreams, groupBytes);
            streamDepositArray[targetIndex] = new CompositeReadStream(subStreams, resetPositions: true);
        }
        
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IOblivionModGetter obj)
        {
            if (obj.GameSettings is IFormLinkContainerGetter GameSettingslinkCont)
            {
                foreach (var item in GameSettingslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Globals is IFormLinkContainerGetter GlobalslinkCont)
            {
                foreach (var item in GlobalslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Classes is IFormLinkContainerGetter ClasseslinkCont)
            {
                foreach (var item in ClasseslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Factions is IFormLinkContainerGetter FactionslinkCont)
            {
                foreach (var item in FactionslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Hairs is IFormLinkContainerGetter HairslinkCont)
            {
                foreach (var item in HairslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Eyes is IFormLinkContainerGetter EyeslinkCont)
            {
                foreach (var item in EyeslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Races is IFormLinkContainerGetter RaceslinkCont)
            {
                foreach (var item in RaceslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Sounds is IFormLinkContainerGetter SoundslinkCont)
            {
                foreach (var item in SoundslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Skills is IFormLinkContainerGetter SkillslinkCont)
            {
                foreach (var item in SkillslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.MagicEffects is IFormLinkContainerGetter MagicEffectslinkCont)
            {
                foreach (var item in MagicEffectslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Scripts is IFormLinkContainerGetter ScriptslinkCont)
            {
                foreach (var item in ScriptslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.LandTextures is IFormLinkContainerGetter LandTextureslinkCont)
            {
                foreach (var item in LandTextureslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Enchantments is IFormLinkContainerGetter EnchantmentslinkCont)
            {
                foreach (var item in EnchantmentslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Spells is IFormLinkContainerGetter SpellslinkCont)
            {
                foreach (var item in SpellslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Birthsigns is IFormLinkContainerGetter BirthsignslinkCont)
            {
                foreach (var item in BirthsignslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Activators is IFormLinkContainerGetter ActivatorslinkCont)
            {
                foreach (var item in ActivatorslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.AlchemicalApparatus is IFormLinkContainerGetter AlchemicalApparatuslinkCont)
            {
                foreach (var item in AlchemicalApparatuslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Armors is IFormLinkContainerGetter ArmorslinkCont)
            {
                foreach (var item in ArmorslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Books is IFormLinkContainerGetter BookslinkCont)
            {
                foreach (var item in BookslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Clothes is IFormLinkContainerGetter ClotheslinkCont)
            {
                foreach (var item in ClotheslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Containers is IFormLinkContainerGetter ContainerslinkCont)
            {
                foreach (var item in ContainerslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Doors is IFormLinkContainerGetter DoorslinkCont)
            {
                foreach (var item in DoorslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Ingredients is IFormLinkContainerGetter IngredientslinkCont)
            {
                foreach (var item in IngredientslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Lights is IFormLinkContainerGetter LightslinkCont)
            {
                foreach (var item in LightslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Miscellaneous is IFormLinkContainerGetter MiscellaneouslinkCont)
            {
                foreach (var item in MiscellaneouslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Statics is IFormLinkContainerGetter StaticslinkCont)
            {
                foreach (var item in StaticslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Grasses is IFormLinkContainerGetter GrasseslinkCont)
            {
                foreach (var item in GrasseslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Trees is IFormLinkContainerGetter TreeslinkCont)
            {
                foreach (var item in TreeslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Flora is IFormLinkContainerGetter FloralinkCont)
            {
                foreach (var item in FloralinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Furniture is IFormLinkContainerGetter FurniturelinkCont)
            {
                foreach (var item in FurniturelinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Weapons is IFormLinkContainerGetter WeaponslinkCont)
            {
                foreach (var item in WeaponslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Ammunitions is IFormLinkContainerGetter AmmunitionslinkCont)
            {
                foreach (var item in AmmunitionslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Npcs is IFormLinkContainerGetter NpcslinkCont)
            {
                foreach (var item in NpcslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Creatures is IFormLinkContainerGetter CreatureslinkCont)
            {
                foreach (var item in CreatureslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.LeveledCreatures is IFormLinkContainerGetter LeveledCreatureslinkCont)
            {
                foreach (var item in LeveledCreatureslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.SoulGems is IFormLinkContainerGetter SoulGemslinkCont)
            {
                foreach (var item in SoulGemslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Keys is IFormLinkContainerGetter KeyslinkCont)
            {
                foreach (var item in KeyslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Potions is IFormLinkContainerGetter PotionslinkCont)
            {
                foreach (var item in PotionslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Subspaces is IFormLinkContainerGetter SubspaceslinkCont)
            {
                foreach (var item in SubspaceslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.SigilStones is IFormLinkContainerGetter SigilStoneslinkCont)
            {
                foreach (var item in SigilStoneslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.LeveledItems is IFormLinkContainerGetter LeveledItemslinkCont)
            {
                foreach (var item in LeveledItemslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Weathers is IFormLinkContainerGetter WeatherslinkCont)
            {
                foreach (var item in WeatherslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Climates is IFormLinkContainerGetter ClimateslinkCont)
            {
                foreach (var item in ClimateslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Regions is IFormLinkContainerGetter RegionslinkCont)
            {
                foreach (var item in RegionslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Cells.ContainedFormLinks)
            {
                yield return item;
            }
            if (obj.Worldspaces is IFormLinkContainerGetter WorldspaceslinkCont)
            {
                foreach (var item in WorldspaceslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.DialogTopics is IFormLinkContainerGetter DialogTopicslinkCont)
            {
                foreach (var item in DialogTopicslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Quests is IFormLinkContainerGetter QuestslinkCont)
            {
                foreach (var item in QuestslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.IdleAnimations is IFormLinkContainerGetter IdleAnimationslinkCont)
            {
                foreach (var item in IdleAnimationslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.AIPackages is IFormLinkContainerGetter AIPackageslinkCont)
            {
                foreach (var item in AIPackageslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.CombatStyles is IFormLinkContainerGetter CombatStyleslinkCont)
            {
                foreach (var item in CombatStyleslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.LoadScreens is IFormLinkContainerGetter LoadScreenslinkCont)
            {
                foreach (var item in LoadScreenslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.LeveledSpells is IFormLinkContainerGetter LeveledSpellslinkCont)
            {
                foreach (var item in LeveledSpellslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.AnimatedObjects is IFormLinkContainerGetter AnimatedObjectslinkCont)
            {
                foreach (var item in AnimatedObjectslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Waters is IFormLinkContainerGetter WaterslinkCont)
            {
                foreach (var item in WaterslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.EffectShaders is IFormLinkContainerGetter EffectShaderslinkCont)
            {
                foreach (var item in EffectShaderslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(IOblivionModGetter obj)
        {
            foreach (var item in obj.GameSettings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Globals.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Classes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Factions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Hairs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Eyes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Sounds.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Skills.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MagicEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Scripts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LandTextures.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Enchantments.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Spells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Birthsigns.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Activators.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AlchemicalApparatus.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Armors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Books.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Clothes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Containers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Doors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ingredients.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Lights.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Miscellaneous.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Statics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Grasses.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Trees.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Flora.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Furniture.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weapons.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ammunitions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Npcs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Creatures.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledCreatures.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoulGems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keys.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Potions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Subspaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SigilStones.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledItems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weathers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Climates.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Regions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Cells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Worldspaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DialogTopics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Quests.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.IdleAnimations.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AIPackages.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CombatStyles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LoadScreens.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledSpells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AnimatedObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Waters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EffectShaders.EnumerateMajorRecords())
            {
                yield return item;
            }
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            IOblivionModGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "OblivionMajorRecord":
                    if (!OblivionMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IOblivionMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in obj.GameSettings.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in obj.Globals.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in obj.Classes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in obj.Factions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    foreach (var item in obj.Hairs.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Eye":
                case "IEyeGetter":
                case "IEye":
                case "IEyeInternal":
                    foreach (var item in obj.Eyes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in obj.Races.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Sound":
                case "ISoundGetter":
                case "ISound":
                case "ISoundInternal":
                    foreach (var item in obj.Sounds.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SkillRecord":
                case "ISkillRecordGetter":
                case "ISkillRecord":
                case "ISkillRecordInternal":
                    foreach (var item in obj.Skills.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    foreach (var item in obj.MagicEffects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Script":
                case "IScriptGetter":
                case "IScript":
                case "IScriptInternal":
                    foreach (var item in obj.Scripts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LandTexture":
                case "ILandTextureGetter":
                case "ILandTexture":
                case "ILandTextureInternal":
                    foreach (var item in obj.LandTextures.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Enchantment":
                case "IEnchantmentGetter":
                case "IEnchantment":
                case "IEnchantmentInternal":
                    foreach (var item in obj.Enchantments.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SpellUnleveled":
                case "ISpellUnleveledGetter":
                case "ISpellUnleveled":
                case "ISpellUnleveledInternal":
                    foreach (var item in obj.Spells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Birthsign":
                case "IBirthsignGetter":
                case "IBirthsign":
                case "IBirthsignInternal":
                    foreach (var item in obj.Birthsigns.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    foreach (var item in obj.Activators.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    foreach (var item in obj.AlchemicalApparatus.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    foreach (var item in obj.Armors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    foreach (var item in obj.Books.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Clothing":
                case "IClothingGetter":
                case "IClothing":
                case "IClothingInternal":
                    foreach (var item in obj.Clothes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    foreach (var item in obj.Containers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    foreach (var item in obj.Doors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    foreach (var item in obj.Ingredients.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    foreach (var item in obj.Lights.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Miscellaneous":
                case "IMiscellaneousGetter":
                case "IMiscellaneous":
                case "IMiscellaneousInternal":
                    foreach (var item in obj.Miscellaneous.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    foreach (var item in obj.Statics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    foreach (var item in obj.Grasses.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    foreach (var item in obj.Trees.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    foreach (var item in obj.Flora.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    foreach (var item in obj.Furniture.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in obj.Weapons.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    foreach (var item in obj.Ammunitions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    foreach (var item in obj.Npcs.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Creature":
                case "ICreatureGetter":
                case "ICreature":
                case "ICreatureInternal":
                    foreach (var item in obj.Creatures.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledCreature":
                case "ILeveledCreatureGetter":
                case "ILeveledCreature":
                case "ILeveledCreatureInternal":
                    foreach (var item in obj.LeveledCreatures.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    foreach (var item in obj.SoulGems.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    foreach (var item in obj.Keys.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Potion":
                case "IPotionGetter":
                case "IPotion":
                case "IPotionInternal":
                    foreach (var item in obj.Potions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Subspace":
                case "ISubspaceGetter":
                case "ISubspace":
                case "ISubspaceInternal":
                    foreach (var item in obj.Subspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SigilStone":
                case "ISigilStoneGetter":
                case "ISigilStone":
                case "ISigilStoneInternal":
                    foreach (var item in obj.SigilStones.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    foreach (var item in obj.LeveledItems.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    foreach (var item in obj.Weathers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    foreach (var item in obj.Climates.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    foreach (var item in obj.Regions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    foreach (var item in obj.DialogTopics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    foreach (var item in obj.Quests.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    foreach (var item in obj.IdleAnimations.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AIPackage":
                case "IAIPackageGetter":
                case "IAIPackage":
                case "IAIPackageInternal":
                    foreach (var item in obj.AIPackages.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    foreach (var item in obj.CombatStyles.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    foreach (var item in obj.LoadScreens.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    foreach (var item in obj.LeveledSpells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    foreach (var item in obj.AnimatedObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    foreach (var item in obj.Waters.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    foreach (var item in obj.EffectShaders.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PathGrid":
                case "IPathGridGetter":
                case "IPathGrid":
                case "IPathGridInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedCreature":
                case "IPlacedCreatureGetter":
                case "IPlacedCreature":
                case "IPlacedCreatureInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Road":
                case "IRoadGetter":
                case "IRoad":
                case "IRoadInternal":
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogItem":
                case "IDialogItemGetter":
                case "IDialogItem":
                case "IDialogItemInternal":
                    foreach (var item in obj.DialogTopics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IOwner":
                {
                    if (!OblivionMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(INpcGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IOwnerGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(INpcGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IPlaced":
                {
                    if (!OblivionMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IPlacedGetter":
                {
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<IOblivionMod, IMajorRecordCommon, IMajorRecordCommonGetter>> EnumerateMajorRecordContexts(
            IOblivionModGetter obj,
            ILinkCache linkCache)
        {
            foreach (var item in obj.GameSettings)
            {
                yield return new ModContext<IOblivionMod, IGameSettingInternal, IGameSettingGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.GameSettings.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.GameSettings.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Globals)
            {
                yield return new ModContext<IOblivionMod, IGlobalInternal, IGlobalGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Globals.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Globals.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Classes)
            {
                yield return new ModContext<IOblivionMod, IClassInternal, IClassGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Classes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Classes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Factions)
            {
                yield return new ModContext<IOblivionMod, IFactionInternal, IFactionGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Factions.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Factions.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Hairs)
            {
                yield return new ModContext<IOblivionMod, IHairInternal, IHairGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Hairs.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Hairs.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Eyes)
            {
                yield return new ModContext<IOblivionMod, IEyeInternal, IEyeGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Eyes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Eyes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Races)
            {
                yield return new ModContext<IOblivionMod, IRaceInternal, IRaceGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Races.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Races.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Sounds)
            {
                yield return new ModContext<IOblivionMod, ISoundInternal, ISoundGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Sounds.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Sounds.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Skills)
            {
                yield return new ModContext<IOblivionMod, ISkillRecordInternal, ISkillRecordGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Skills.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Skills.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.MagicEffects)
            {
                yield return new ModContext<IOblivionMod, IMagicEffectInternal, IMagicEffectGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.MagicEffects.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.MagicEffects.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Scripts)
            {
                yield return new ModContext<IOblivionMod, IScriptInternal, IScriptGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Scripts.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Scripts.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.LandTextures)
            {
                yield return new ModContext<IOblivionMod, ILandTextureInternal, ILandTextureGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.LandTextures.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.LandTextures.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Enchantments)
            {
                yield return new ModContext<IOblivionMod, IEnchantmentInternal, IEnchantmentGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Enchantments.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Enchantments.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Spells)
            {
                yield return new ModContext<IOblivionMod, ISpellUnleveledInternal, ISpellUnleveledGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Spells.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Spells.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Birthsigns)
            {
                yield return new ModContext<IOblivionMod, IBirthsignInternal, IBirthsignGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Birthsigns.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Birthsigns.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Activators)
            {
                yield return new ModContext<IOblivionMod, IActivatorInternal, IActivatorGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Activators.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Activators.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.AlchemicalApparatus)
            {
                yield return new ModContext<IOblivionMod, IAlchemicalApparatusInternal, IAlchemicalApparatusGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.AlchemicalApparatus.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.AlchemicalApparatus.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Armors)
            {
                yield return new ModContext<IOblivionMod, IArmorInternal, IArmorGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Armors.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Armors.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Books)
            {
                yield return new ModContext<IOblivionMod, IBookInternal, IBookGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Books.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Books.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Clothes)
            {
                yield return new ModContext<IOblivionMod, IClothingInternal, IClothingGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Clothes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Clothes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Containers)
            {
                yield return new ModContext<IOblivionMod, IContainerInternal, IContainerGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Containers.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Containers.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Doors)
            {
                yield return new ModContext<IOblivionMod, IDoorInternal, IDoorGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Doors.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Doors.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Ingredients)
            {
                yield return new ModContext<IOblivionMod, IIngredientInternal, IIngredientGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Ingredients.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Ingredients.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Lights)
            {
                yield return new ModContext<IOblivionMod, ILightInternal, ILightGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Lights.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Lights.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Miscellaneous)
            {
                yield return new ModContext<IOblivionMod, IMiscellaneousInternal, IMiscellaneousGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Miscellaneous.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Miscellaneous.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Statics)
            {
                yield return new ModContext<IOblivionMod, IStaticInternal, IStaticGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Statics.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Statics.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Grasses)
            {
                yield return new ModContext<IOblivionMod, IGrassInternal, IGrassGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Grasses.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Grasses.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Trees)
            {
                yield return new ModContext<IOblivionMod, ITreeInternal, ITreeGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Trees.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Trees.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Flora)
            {
                yield return new ModContext<IOblivionMod, IFloraInternal, IFloraGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Flora.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Flora.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Furniture)
            {
                yield return new ModContext<IOblivionMod, IFurnitureInternal, IFurnitureGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Furniture.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Furniture.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Weapons)
            {
                yield return new ModContext<IOblivionMod, IWeaponInternal, IWeaponGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Weapons.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Weapons.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Ammunitions)
            {
                yield return new ModContext<IOblivionMod, IAmmunitionInternal, IAmmunitionGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Ammunitions.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Ammunitions.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Npcs)
            {
                yield return new ModContext<IOblivionMod, INpcInternal, INpcGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Npcs.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Npcs.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Creatures)
            {
                yield return new ModContext<IOblivionMod, ICreatureInternal, ICreatureGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Creatures.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Creatures.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.LeveledCreatures)
            {
                yield return new ModContext<IOblivionMod, ILeveledCreatureInternal, ILeveledCreatureGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.LeveledCreatures.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.LeveledCreatures.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.SoulGems)
            {
                yield return new ModContext<IOblivionMod, ISoulGemInternal, ISoulGemGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.SoulGems.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.SoulGems.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Keys)
            {
                yield return new ModContext<IOblivionMod, IKeyInternal, IKeyGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Keys.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Keys.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Potions)
            {
                yield return new ModContext<IOblivionMod, IPotionInternal, IPotionGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Potions.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Potions.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Subspaces)
            {
                yield return new ModContext<IOblivionMod, ISubspaceInternal, ISubspaceGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Subspaces.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Subspaces.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.SigilStones)
            {
                yield return new ModContext<IOblivionMod, ISigilStoneInternal, ISigilStoneGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.SigilStones.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.SigilStones.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.LeveledItems)
            {
                yield return new ModContext<IOblivionMod, ILeveledItemInternal, ILeveledItemGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.LeveledItems.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.LeveledItems.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Weathers)
            {
                yield return new ModContext<IOblivionMod, IWeatherInternal, IWeatherGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Weathers.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Weathers.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Climates)
            {
                yield return new ModContext<IOblivionMod, IClimateInternal, IClimateGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Climates.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Climates.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Regions)
            {
                yield return new ModContext<IOblivionMod, IRegionInternal, IRegionGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Regions.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Regions.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Worldspaces)
            {
                yield return new ModContext<IOblivionMod, IWorldspaceInternal, IWorldspaceGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(r, e));
            }
            foreach (var groupItem in obj.Worldspaces)
            {
                foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                    groupItem,
                    linkCache: linkCache,
                    modKey: obj.ModKey,
                    parent: null,
                    getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                    duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.DialogTopics)
            {
                yield return new ModContext<IOblivionMod, IDialogTopicInternal, IDialogTopicGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.DialogTopics.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.DialogTopics.DuplicateInAsNewRecord(r, e));
            }
            foreach (var groupItem in obj.DialogTopics)
            {
                foreach (var item in DialogTopicCommon.Instance.EnumerateMajorRecordContexts(
                    groupItem,
                    linkCache: linkCache,
                    modKey: obj.ModKey,
                    parent: null,
                    getOrAddAsOverride: (m, r) => m.DialogTopics.GetOrAddAsOverride(linkCache.Resolve<IDialogTopicGetter>(r.FormKey)),
                    duplicateInto: (m, r, e) => m.DialogTopics.DuplicateInAsNewRecord(linkCache.Resolve<IDialogTopicGetter>(r.FormKey), e)))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Quests)
            {
                yield return new ModContext<IOblivionMod, IQuestInternal, IQuestGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Quests.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Quests.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.IdleAnimations)
            {
                yield return new ModContext<IOblivionMod, IIdleAnimationInternal, IIdleAnimationGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.IdleAnimations.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.IdleAnimations.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.AIPackages)
            {
                yield return new ModContext<IOblivionMod, IAIPackageInternal, IAIPackageGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.AIPackages.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.AIPackages.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.CombatStyles)
            {
                yield return new ModContext<IOblivionMod, ICombatStyleInternal, ICombatStyleGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.CombatStyles.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.CombatStyles.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.LoadScreens)
            {
                yield return new ModContext<IOblivionMod, ILoadScreenInternal, ILoadScreenGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.LoadScreens.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.LoadScreens.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.LeveledSpells)
            {
                yield return new ModContext<IOblivionMod, ILeveledSpellInternal, ILeveledSpellGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.LeveledSpells.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.LeveledSpells.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.AnimatedObjects)
            {
                yield return new ModContext<IOblivionMod, IAnimatedObjectInternal, IAnimatedObjectGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.AnimatedObjects.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.AnimatedObjects.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Waters)
            {
                yield return new ModContext<IOblivionMod, IWaterInternal, IWaterGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Waters.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Waters.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.EffectShaders)
            {
                yield return new ModContext<IOblivionMod, IEffectShaderInternal, IEffectShaderGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.EffectShaders.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.EffectShaders.DuplicateInAsNewRecord(r, e));
            }
        }
        
        public IEnumerable<IModContext<IOblivionMod, IMajorRecordCommon, IMajorRecordCommonGetter>> EnumerateMajorRecordContexts(
            IOblivionModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "OblivionMajorRecord":
                    if (!OblivionMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IOblivionMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in obj.GameSettings)
                    {
                        yield return new ModContext<IOblivionMod, IGameSettingInternal, IGameSettingGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.GameSettings.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.GameSettings.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in obj.Globals)
                    {
                        yield return new ModContext<IOblivionMod, IGlobalInternal, IGlobalGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Globals.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Globals.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in obj.Classes)
                    {
                        yield return new ModContext<IOblivionMod, IClassInternal, IClassGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Classes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Classes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in obj.Factions)
                    {
                        yield return new ModContext<IOblivionMod, IFactionInternal, IFactionGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Factions.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Factions.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    foreach (var item in obj.Hairs)
                    {
                        yield return new ModContext<IOblivionMod, IHairInternal, IHairGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Hairs.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Hairs.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Eye":
                case "IEyeGetter":
                case "IEye":
                case "IEyeInternal":
                    foreach (var item in obj.Eyes)
                    {
                        yield return new ModContext<IOblivionMod, IEyeInternal, IEyeGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Eyes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Eyes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in obj.Races)
                    {
                        yield return new ModContext<IOblivionMod, IRaceInternal, IRaceGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Races.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Races.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Sound":
                case "ISoundGetter":
                case "ISound":
                case "ISoundInternal":
                    foreach (var item in obj.Sounds)
                    {
                        yield return new ModContext<IOblivionMod, ISoundInternal, ISoundGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Sounds.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Sounds.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "SkillRecord":
                case "ISkillRecordGetter":
                case "ISkillRecord":
                case "ISkillRecordInternal":
                    foreach (var item in obj.Skills)
                    {
                        yield return new ModContext<IOblivionMod, ISkillRecordInternal, ISkillRecordGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Skills.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Skills.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    foreach (var item in obj.MagicEffects)
                    {
                        yield return new ModContext<IOblivionMod, IMagicEffectInternal, IMagicEffectGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.MagicEffects.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.MagicEffects.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Script":
                case "IScriptGetter":
                case "IScript":
                case "IScriptInternal":
                    foreach (var item in obj.Scripts)
                    {
                        yield return new ModContext<IOblivionMod, IScriptInternal, IScriptGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Scripts.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Scripts.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "LandTexture":
                case "ILandTextureGetter":
                case "ILandTexture":
                case "ILandTextureInternal":
                    foreach (var item in obj.LandTextures)
                    {
                        yield return new ModContext<IOblivionMod, ILandTextureInternal, ILandTextureGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.LandTextures.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.LandTextures.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Enchantment":
                case "IEnchantmentGetter":
                case "IEnchantment":
                case "IEnchantmentInternal":
                    foreach (var item in obj.Enchantments)
                    {
                        yield return new ModContext<IOblivionMod, IEnchantmentInternal, IEnchantmentGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Enchantments.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Enchantments.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "SpellUnleveled":
                case "ISpellUnleveledGetter":
                case "ISpellUnleveled":
                case "ISpellUnleveledInternal":
                    foreach (var item in obj.Spells)
                    {
                        yield return new ModContext<IOblivionMod, ISpellUnleveledInternal, ISpellUnleveledGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Spells.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Spells.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Birthsign":
                case "IBirthsignGetter":
                case "IBirthsign":
                case "IBirthsignInternal":
                    foreach (var item in obj.Birthsigns)
                    {
                        yield return new ModContext<IOblivionMod, IBirthsignInternal, IBirthsignGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Birthsigns.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Birthsigns.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    foreach (var item in obj.Activators)
                    {
                        yield return new ModContext<IOblivionMod, IActivatorInternal, IActivatorGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Activators.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Activators.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    foreach (var item in obj.AlchemicalApparatus)
                    {
                        yield return new ModContext<IOblivionMod, IAlchemicalApparatusInternal, IAlchemicalApparatusGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.AlchemicalApparatus.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.AlchemicalApparatus.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    foreach (var item in obj.Armors)
                    {
                        yield return new ModContext<IOblivionMod, IArmorInternal, IArmorGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Armors.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Armors.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    foreach (var item in obj.Books)
                    {
                        yield return new ModContext<IOblivionMod, IBookInternal, IBookGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Books.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Books.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Clothing":
                case "IClothingGetter":
                case "IClothing":
                case "IClothingInternal":
                    foreach (var item in obj.Clothes)
                    {
                        yield return new ModContext<IOblivionMod, IClothingInternal, IClothingGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Clothes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Clothes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    foreach (var item in obj.Containers)
                    {
                        yield return new ModContext<IOblivionMod, IContainerInternal, IContainerGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Containers.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Containers.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    foreach (var item in obj.Doors)
                    {
                        yield return new ModContext<IOblivionMod, IDoorInternal, IDoorGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Doors.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Doors.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    foreach (var item in obj.Ingredients)
                    {
                        yield return new ModContext<IOblivionMod, IIngredientInternal, IIngredientGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Ingredients.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Ingredients.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    foreach (var item in obj.Lights)
                    {
                        yield return new ModContext<IOblivionMod, ILightInternal, ILightGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Lights.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Lights.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Miscellaneous":
                case "IMiscellaneousGetter":
                case "IMiscellaneous":
                case "IMiscellaneousInternal":
                    foreach (var item in obj.Miscellaneous)
                    {
                        yield return new ModContext<IOblivionMod, IMiscellaneousInternal, IMiscellaneousGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Miscellaneous.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Miscellaneous.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    foreach (var item in obj.Statics)
                    {
                        yield return new ModContext<IOblivionMod, IStaticInternal, IStaticGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Statics.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Statics.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    foreach (var item in obj.Grasses)
                    {
                        yield return new ModContext<IOblivionMod, IGrassInternal, IGrassGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Grasses.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Grasses.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    foreach (var item in obj.Trees)
                    {
                        yield return new ModContext<IOblivionMod, ITreeInternal, ITreeGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Trees.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Trees.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    foreach (var item in obj.Flora)
                    {
                        yield return new ModContext<IOblivionMod, IFloraInternal, IFloraGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Flora.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Flora.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    foreach (var item in obj.Furniture)
                    {
                        yield return new ModContext<IOblivionMod, IFurnitureInternal, IFurnitureGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Furniture.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Furniture.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in obj.Weapons)
                    {
                        yield return new ModContext<IOblivionMod, IWeaponInternal, IWeaponGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Weapons.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Weapons.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    foreach (var item in obj.Ammunitions)
                    {
                        yield return new ModContext<IOblivionMod, IAmmunitionInternal, IAmmunitionGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Ammunitions.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Ammunitions.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    foreach (var item in obj.Npcs)
                    {
                        yield return new ModContext<IOblivionMod, INpcInternal, INpcGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Npcs.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Npcs.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Creature":
                case "ICreatureGetter":
                case "ICreature":
                case "ICreatureInternal":
                    foreach (var item in obj.Creatures)
                    {
                        yield return new ModContext<IOblivionMod, ICreatureInternal, ICreatureGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Creatures.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Creatures.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "LeveledCreature":
                case "ILeveledCreatureGetter":
                case "ILeveledCreature":
                case "ILeveledCreatureInternal":
                    foreach (var item in obj.LeveledCreatures)
                    {
                        yield return new ModContext<IOblivionMod, ILeveledCreatureInternal, ILeveledCreatureGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.LeveledCreatures.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.LeveledCreatures.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    foreach (var item in obj.SoulGems)
                    {
                        yield return new ModContext<IOblivionMod, ISoulGemInternal, ISoulGemGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.SoulGems.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.SoulGems.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    foreach (var item in obj.Keys)
                    {
                        yield return new ModContext<IOblivionMod, IKeyInternal, IKeyGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Keys.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Keys.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Potion":
                case "IPotionGetter":
                case "IPotion":
                case "IPotionInternal":
                    foreach (var item in obj.Potions)
                    {
                        yield return new ModContext<IOblivionMod, IPotionInternal, IPotionGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Potions.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Potions.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Subspace":
                case "ISubspaceGetter":
                case "ISubspace":
                case "ISubspaceInternal":
                    foreach (var item in obj.Subspaces)
                    {
                        yield return new ModContext<IOblivionMod, ISubspaceInternal, ISubspaceGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Subspaces.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Subspaces.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "SigilStone":
                case "ISigilStoneGetter":
                case "ISigilStone":
                case "ISigilStoneInternal":
                    foreach (var item in obj.SigilStones)
                    {
                        yield return new ModContext<IOblivionMod, ISigilStoneInternal, ISigilStoneGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.SigilStones.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.SigilStones.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    foreach (var item in obj.LeveledItems)
                    {
                        yield return new ModContext<IOblivionMod, ILeveledItemInternal, ILeveledItemGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.LeveledItems.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.LeveledItems.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    foreach (var item in obj.Weathers)
                    {
                        yield return new ModContext<IOblivionMod, IWeatherInternal, IWeatherGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Weathers.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Weathers.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    foreach (var item in obj.Climates)
                    {
                        yield return new ModContext<IOblivionMod, IClimateInternal, IClimateGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Climates.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Climates.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    foreach (var item in obj.Regions)
                    {
                        yield return new ModContext<IOblivionMod, IRegionInternal, IRegionGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Regions.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Regions.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    foreach (var item in obj.Worldspaces)
                    {
                        yield return new ModContext<IOblivionMod, IWorldspaceInternal, IWorldspaceGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    foreach (var item in obj.DialogTopics)
                    {
                        yield return new ModContext<IOblivionMod, IDialogTopicInternal, IDialogTopicGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.DialogTopics.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.DialogTopics.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    foreach (var item in obj.Quests)
                    {
                        yield return new ModContext<IOblivionMod, IQuestInternal, IQuestGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Quests.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Quests.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    foreach (var item in obj.IdleAnimations)
                    {
                        yield return new ModContext<IOblivionMod, IIdleAnimationInternal, IIdleAnimationGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.IdleAnimations.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.IdleAnimations.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "AIPackage":
                case "IAIPackageGetter":
                case "IAIPackage":
                case "IAIPackageInternal":
                    foreach (var item in obj.AIPackages)
                    {
                        yield return new ModContext<IOblivionMod, IAIPackageInternal, IAIPackageGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.AIPackages.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.AIPackages.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    foreach (var item in obj.CombatStyles)
                    {
                        yield return new ModContext<IOblivionMod, ICombatStyleInternal, ICombatStyleGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.CombatStyles.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.CombatStyles.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    foreach (var item in obj.LoadScreens)
                    {
                        yield return new ModContext<IOblivionMod, ILoadScreenInternal, ILoadScreenGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.LoadScreens.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.LoadScreens.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    foreach (var item in obj.LeveledSpells)
                    {
                        yield return new ModContext<IOblivionMod, ILeveledSpellInternal, ILeveledSpellGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.LeveledSpells.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.LeveledSpells.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    foreach (var item in obj.AnimatedObjects)
                    {
                        yield return new ModContext<IOblivionMod, IAnimatedObjectInternal, IAnimatedObjectGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.AnimatedObjects.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.AnimatedObjects.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    foreach (var item in obj.Waters)
                    {
                        yield return new ModContext<IOblivionMod, IWaterInternal, IWaterGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Waters.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Waters.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    foreach (var item in obj.EffectShaders)
                    {
                        yield return new ModContext<IOblivionMod, IEffectShaderInternal, IEffectShaderGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.EffectShaders.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.EffectShaders.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PathGrid":
                case "IPathGridGetter":
                case "IPathGrid":
                case "IPathGridInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedCreature":
                case "IPlacedCreatureGetter":
                case "IPlacedCreature":
                case "IPlacedCreatureInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "Road":
                case "IRoadGetter":
                case "IRoad":
                case "IRoadInternal":
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "DialogItem":
                case "IDialogItemGetter":
                case "IDialogItem":
                case "IDialogItemInternal":
                    foreach (var groupItem in obj.DialogTopics)
                    {
                        foreach (var item in DialogTopicCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.DialogTopics.GetOrAddAsOverride(linkCache.Resolve<IDialogTopicGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.DialogTopics.DuplicateInAsNewRecord(linkCache.Resolve<IDialogTopicGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "IOwner":
                case "IOwnerGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IFactionGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(INpcGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IPlaced":
                case "IPlacedGetter":
                {
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        #endregion
        
    }
    public partial class OblivionModSetterTranslationCommon
    {
        public static readonly OblivionModSetterTranslationCommon Instance = new OblivionModSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IOblivionMod item,
            IOblivionModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.ModHeader) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.ModHeader);
                try
                {
                    item.ModHeader.DeepCopyIn(
                        rhs: rhs.ModHeader,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.ModHeader));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.GameSettings) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.GameSettings);
                try
                {
                    item.GameSettings.DeepCopyIn(
                        rhs: rhs.GameSettings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.GameSettings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Globals) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Globals);
                try
                {
                    item.Globals.DeepCopyIn(
                        rhs: rhs.Globals,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Globals));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Classes) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Classes);
                try
                {
                    item.Classes.DeepCopyIn(
                        rhs: rhs.Classes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Classes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Factions);
                try
                {
                    item.Factions.DeepCopyIn(
                        rhs: rhs.Factions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Factions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Hairs) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Hairs);
                try
                {
                    item.Hairs.DeepCopyIn(
                        rhs: rhs.Hairs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Hairs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Eyes) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Eyes);
                try
                {
                    item.Eyes.DeepCopyIn(
                        rhs: rhs.Eyes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Eyes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Races) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Races);
                try
                {
                    item.Races.DeepCopyIn(
                        rhs: rhs.Races,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Races));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Sounds);
                try
                {
                    item.Sounds.DeepCopyIn(
                        rhs: rhs.Sounds,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Sounds));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Skills) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Skills);
                try
                {
                    item.Skills.DeepCopyIn(
                        rhs: rhs.Skills,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Skills));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.MagicEffects) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.MagicEffects);
                try
                {
                    item.MagicEffects.DeepCopyIn(
                        rhs: rhs.MagicEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.MagicEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Scripts) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Scripts);
                try
                {
                    item.Scripts.DeepCopyIn(
                        rhs: rhs.Scripts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Scripts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LandTextures) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LandTextures);
                try
                {
                    item.LandTextures.DeepCopyIn(
                        rhs: rhs.LandTextures,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LandTextures));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Enchantments) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Enchantments);
                try
                {
                    item.Enchantments.DeepCopyIn(
                        rhs: rhs.Enchantments,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Enchantments));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Spells);
                try
                {
                    item.Spells.DeepCopyIn(
                        rhs: rhs.Spells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Spells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Birthsigns) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Birthsigns);
                try
                {
                    item.Birthsigns.DeepCopyIn(
                        rhs: rhs.Birthsigns,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Birthsigns));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Activators) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Activators);
                try
                {
                    item.Activators.DeepCopyIn(
                        rhs: rhs.Activators,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Activators));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AlchemicalApparatus) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.AlchemicalApparatus);
                try
                {
                    item.AlchemicalApparatus.DeepCopyIn(
                        rhs: rhs.AlchemicalApparatus,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.AlchemicalApparatus));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Armors) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Armors);
                try
                {
                    item.Armors.DeepCopyIn(
                        rhs: rhs.Armors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Armors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Books) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Books);
                try
                {
                    item.Books.DeepCopyIn(
                        rhs: rhs.Books,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Books));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Clothes) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Clothes);
                try
                {
                    item.Clothes.DeepCopyIn(
                        rhs: rhs.Clothes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Clothes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Containers) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Containers);
                try
                {
                    item.Containers.DeepCopyIn(
                        rhs: rhs.Containers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Containers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Doors) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Doors);
                try
                {
                    item.Doors.DeepCopyIn(
                        rhs: rhs.Doors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Doors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Ingredients) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Ingredients);
                try
                {
                    item.Ingredients.DeepCopyIn(
                        rhs: rhs.Ingredients,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Ingredients));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Lights) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Lights);
                try
                {
                    item.Lights.DeepCopyIn(
                        rhs: rhs.Lights,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Lights));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Miscellaneous) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Miscellaneous);
                try
                {
                    item.Miscellaneous.DeepCopyIn(
                        rhs: rhs.Miscellaneous,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Miscellaneous));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Statics) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Statics);
                try
                {
                    item.Statics.DeepCopyIn(
                        rhs: rhs.Statics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Statics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Grasses) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Grasses);
                try
                {
                    item.Grasses.DeepCopyIn(
                        rhs: rhs.Grasses,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Grasses));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Trees) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Trees);
                try
                {
                    item.Trees.DeepCopyIn(
                        rhs: rhs.Trees,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Trees));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Flora) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Flora);
                try
                {
                    item.Flora.DeepCopyIn(
                        rhs: rhs.Flora,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Flora));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Furniture) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Furniture);
                try
                {
                    item.Furniture.DeepCopyIn(
                        rhs: rhs.Furniture,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Furniture));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Weapons) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Weapons);
                try
                {
                    item.Weapons.DeepCopyIn(
                        rhs: rhs.Weapons,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Weapons));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Ammunitions) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Ammunitions);
                try
                {
                    item.Ammunitions.DeepCopyIn(
                        rhs: rhs.Ammunitions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Ammunitions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Npcs) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Npcs);
                try
                {
                    item.Npcs.DeepCopyIn(
                        rhs: rhs.Npcs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Npcs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Creatures) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Creatures);
                try
                {
                    item.Creatures.DeepCopyIn(
                        rhs: rhs.Creatures,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Creatures));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledCreatures) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledCreatures);
                try
                {
                    item.LeveledCreatures.DeepCopyIn(
                        rhs: rhs.LeveledCreatures,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LeveledCreatures));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.SoulGems) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.SoulGems);
                try
                {
                    item.SoulGems.DeepCopyIn(
                        rhs: rhs.SoulGems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.SoulGems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Keys) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Keys);
                try
                {
                    item.Keys.DeepCopyIn(
                        rhs: rhs.Keys,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Keys));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Potions) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Potions);
                try
                {
                    item.Potions.DeepCopyIn(
                        rhs: rhs.Potions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Potions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Subspaces) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Subspaces);
                try
                {
                    item.Subspaces.DeepCopyIn(
                        rhs: rhs.Subspaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Subspaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.SigilStones) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.SigilStones);
                try
                {
                    item.SigilStones.DeepCopyIn(
                        rhs: rhs.SigilStones,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.SigilStones));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledItems) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledItems);
                try
                {
                    item.LeveledItems.DeepCopyIn(
                        rhs: rhs.LeveledItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LeveledItems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Weathers) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Weathers);
                try
                {
                    item.Weathers.DeepCopyIn(
                        rhs: rhs.Weathers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Weathers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Climates) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Climates);
                try
                {
                    item.Climates.DeepCopyIn(
                        rhs: rhs.Climates,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Climates));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Regions) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Regions);
                try
                {
                    item.Regions.DeepCopyIn(
                        rhs: rhs.Regions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Regions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Cells) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Cells);
                try
                {
                    item.Cells.DeepCopyIn(
                        rhs: rhs.Cells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Cells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Worldspaces) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Worldspaces);
                try
                {
                    item.Worldspaces.DeepCopyIn(
                        rhs: rhs.Worldspaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Worldspaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.DialogTopics) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.DialogTopics);
                try
                {
                    item.DialogTopics.DeepCopyIn(
                        rhs: rhs.DialogTopics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.DialogTopics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Quests) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Quests);
                try
                {
                    item.Quests.DeepCopyIn(
                        rhs: rhs.Quests,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Quests));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.IdleAnimations) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.IdleAnimations);
                try
                {
                    item.IdleAnimations.DeepCopyIn(
                        rhs: rhs.IdleAnimations,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.IdleAnimations));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AIPackages) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.AIPackages);
                try
                {
                    item.AIPackages.DeepCopyIn(
                        rhs: rhs.AIPackages,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.AIPackages));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.CombatStyles) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.CombatStyles);
                try
                {
                    item.CombatStyles.DeepCopyIn(
                        rhs: rhs.CombatStyles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.CombatStyles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LoadScreens) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LoadScreens);
                try
                {
                    item.LoadScreens.DeepCopyIn(
                        rhs: rhs.LoadScreens,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LoadScreens));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledSpells) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledSpells);
                try
                {
                    item.LeveledSpells.DeepCopyIn(
                        rhs: rhs.LeveledSpells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LeveledSpells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AnimatedObjects) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.AnimatedObjects);
                try
                {
                    item.AnimatedObjects.DeepCopyIn(
                        rhs: rhs.AnimatedObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.AnimatedObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Waters) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Waters);
                try
                {
                    item.Waters.DeepCopyIn(
                        rhs: rhs.Waters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Waters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.EffectShaders) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.EffectShaders);
                try
                {
                    item.EffectShaders.DeepCopyIn(
                        rhs: rhs.EffectShaders,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.EffectShaders));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public OblivionMod DeepCopy(
            IOblivionModGetter item,
            OblivionMod.TranslationMask? copyMask = null)
        {
            OblivionMod ret = (OblivionMod)((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()!).GetNew();
            ((OblivionModSetterTranslationCommon)((IOblivionModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public OblivionMod DeepCopy(
            IOblivionModGetter item,
            out OblivionMod.ErrorMask errorMask,
            OblivionMod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            OblivionMod ret = (OblivionMod)((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()!).GetNew();
            ((OblivionModSetterTranslationCommon)((IOblivionModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = OblivionMod.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public OblivionMod DeepCopy(
            IOblivionModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            OblivionMod ret = (OblivionMod)((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()!).GetNew();
            ((OblivionModSetterTranslationCommon)((IOblivionModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class OblivionMod
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => OblivionMod_Registration.Instance;
        public static OblivionMod_Registration Registration => OblivionMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => OblivionModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return OblivionModSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => OblivionModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IOblivionModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IOblivionModGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IOblivionModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Mutagen
namespace Mutagen.Bethesda.Oblivion
{
    public class GroupMask
    {
        public bool GameSettings;
        public bool Globals;
        public bool Classes;
        public bool Factions;
        public bool Hairs;
        public bool Eyes;
        public bool Races;
        public bool Sounds;
        public bool Skills;
        public bool MagicEffects;
        public bool Scripts;
        public bool LandTextures;
        public bool Enchantments;
        public bool Spells;
        public bool Birthsigns;
        public bool Activators;
        public bool AlchemicalApparatus;
        public bool Armors;
        public bool Books;
        public bool Clothes;
        public bool Containers;
        public bool Doors;
        public bool Ingredients;
        public bool Lights;
        public bool Miscellaneous;
        public bool Statics;
        public bool Grasses;
        public bool Trees;
        public bool Flora;
        public bool Furniture;
        public bool Weapons;
        public bool Ammunitions;
        public bool Npcs;
        public bool Creatures;
        public bool LeveledCreatures;
        public bool SoulGems;
        public bool Keys;
        public bool Potions;
        public bool Subspaces;
        public bool SigilStones;
        public bool LeveledItems;
        public bool Weathers;
        public bool Climates;
        public bool Regions;
        public bool Cells;
        public bool Worldspaces;
        public bool DialogTopics;
        public bool Quests;
        public bool IdleAnimations;
        public bool AIPackages;
        public bool CombatStyles;
        public bool LoadScreens;
        public bool LeveledSpells;
        public bool AnimatedObjects;
        public bool Waters;
        public bool EffectShaders;
        public GroupMask()
        {
        }
        public GroupMask(bool defaultValue)
        {
            GameSettings = defaultValue;
            Globals = defaultValue;
            Classes = defaultValue;
            Factions = defaultValue;
            Hairs = defaultValue;
            Eyes = defaultValue;
            Races = defaultValue;
            Sounds = defaultValue;
            Skills = defaultValue;
            MagicEffects = defaultValue;
            Scripts = defaultValue;
            LandTextures = defaultValue;
            Enchantments = defaultValue;
            Spells = defaultValue;
            Birthsigns = defaultValue;
            Activators = defaultValue;
            AlchemicalApparatus = defaultValue;
            Armors = defaultValue;
            Books = defaultValue;
            Clothes = defaultValue;
            Containers = defaultValue;
            Doors = defaultValue;
            Ingredients = defaultValue;
            Lights = defaultValue;
            Miscellaneous = defaultValue;
            Statics = defaultValue;
            Grasses = defaultValue;
            Trees = defaultValue;
            Flora = defaultValue;
            Furniture = defaultValue;
            Weapons = defaultValue;
            Ammunitions = defaultValue;
            Npcs = defaultValue;
            Creatures = defaultValue;
            LeveledCreatures = defaultValue;
            SoulGems = defaultValue;
            Keys = defaultValue;
            Potions = defaultValue;
            Subspaces = defaultValue;
            SigilStones = defaultValue;
            LeveledItems = defaultValue;
            Weathers = defaultValue;
            Climates = defaultValue;
            Regions = defaultValue;
            Cells = defaultValue;
            Worldspaces = defaultValue;
            DialogTopics = defaultValue;
            Quests = defaultValue;
            IdleAnimations = defaultValue;
            AIPackages = defaultValue;
            CombatStyles = defaultValue;
            LoadScreens = defaultValue;
            LeveledSpells = defaultValue;
            AnimatedObjects = defaultValue;
            Waters = defaultValue;
            EffectShaders = defaultValue;
        }
    }

    public interface IOblivionModDisposableGetter : IOblivionModGetter, IModDisposeGetter
    {
    }

}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class OblivionModBinaryWriteTranslation
    {
        public readonly static OblivionModBinaryWriteTranslation Instance = new OblivionModBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IOblivionModGetter item,
            MutagenWriter writer,
            GroupMask? importMask,
            RecordTypeConverter? recordTypeConverter = null)
        {
            if (importMask?.GameSettings ?? true)
            {
                var GameSettingsItem = item.GameSettings;
                if (GameSettingsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)GameSettingsItem).BinaryWriteTranslator).Write<IGameSettingGetter>(
                        item: GameSettingsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Globals ?? true)
            {
                var GlobalsItem = item.Globals;
                if (GlobalsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)GlobalsItem).BinaryWriteTranslator).Write<IGlobalGetter>(
                        item: GlobalsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Classes ?? true)
            {
                var ClassesItem = item.Classes;
                if (ClassesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ClassesItem).BinaryWriteTranslator).Write<IClassGetter>(
                        item: ClassesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Factions ?? true)
            {
                var FactionsItem = item.Factions;
                if (FactionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FactionsItem).BinaryWriteTranslator).Write<IFactionGetter>(
                        item: FactionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Hairs ?? true)
            {
                var HairsItem = item.Hairs;
                if (HairsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)HairsItem).BinaryWriteTranslator).Write<IHairGetter>(
                        item: HairsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Eyes ?? true)
            {
                var EyesItem = item.Eyes;
                if (EyesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)EyesItem).BinaryWriteTranslator).Write<IEyeGetter>(
                        item: EyesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Races ?? true)
            {
                var RacesItem = item.Races;
                if (RacesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)RacesItem).BinaryWriteTranslator).Write<IRaceGetter>(
                        item: RacesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Sounds ?? true)
            {
                var SoundsItem = item.Sounds;
                if (SoundsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SoundsItem).BinaryWriteTranslator).Write<ISoundGetter>(
                        item: SoundsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Skills ?? true)
            {
                var SkillsItem = item.Skills;
                if (SkillsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SkillsItem).BinaryWriteTranslator).Write<ISkillRecordGetter>(
                        item: SkillsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MagicEffects ?? true)
            {
                var MagicEffectsItem = item.MagicEffects;
                if (MagicEffectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MagicEffectsItem).BinaryWriteTranslator).Write<IMagicEffectGetter>(
                        item: MagicEffectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Scripts ?? true)
            {
                var ScriptsItem = item.Scripts;
                if (ScriptsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ScriptsItem).BinaryWriteTranslator).Write<IScriptGetter>(
                        item: ScriptsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LandTextures ?? true)
            {
                var LandTexturesItem = item.LandTextures;
                if (LandTexturesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LandTexturesItem).BinaryWriteTranslator).Write<ILandTextureGetter>(
                        item: LandTexturesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Enchantments ?? true)
            {
                var EnchantmentsItem = item.Enchantments;
                if (EnchantmentsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)EnchantmentsItem).BinaryWriteTranslator).Write<IEnchantmentGetter>(
                        item: EnchantmentsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Spells ?? true)
            {
                var SpellsItem = item.Spells;
                if (SpellsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SpellsItem).BinaryWriteTranslator).Write<ISpellUnleveledGetter>(
                        item: SpellsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Birthsigns ?? true)
            {
                var BirthsignsItem = item.Birthsigns;
                if (BirthsignsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)BirthsignsItem).BinaryWriteTranslator).Write<IBirthsignGetter>(
                        item: BirthsignsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Activators ?? true)
            {
                var ActivatorsItem = item.Activators;
                if (ActivatorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ActivatorsItem).BinaryWriteTranslator).Write<IActivatorGetter>(
                        item: ActivatorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.AlchemicalApparatus ?? true)
            {
                var AlchemicalApparatusItem = item.AlchemicalApparatus;
                if (AlchemicalApparatusItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AlchemicalApparatusItem).BinaryWriteTranslator).Write<IAlchemicalApparatusGetter>(
                        item: AlchemicalApparatusItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Armors ?? true)
            {
                var ArmorsItem = item.Armors;
                if (ArmorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ArmorsItem).BinaryWriteTranslator).Write<IArmorGetter>(
                        item: ArmorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Books ?? true)
            {
                var BooksItem = item.Books;
                if (BooksItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)BooksItem).BinaryWriteTranslator).Write<IBookGetter>(
                        item: BooksItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Clothes ?? true)
            {
                var ClothesItem = item.Clothes;
                if (ClothesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ClothesItem).BinaryWriteTranslator).Write<IClothingGetter>(
                        item: ClothesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Containers ?? true)
            {
                var ContainersItem = item.Containers;
                if (ContainersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ContainersItem).BinaryWriteTranslator).Write<IContainerGetter>(
                        item: ContainersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Doors ?? true)
            {
                var DoorsItem = item.Doors;
                if (DoorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DoorsItem).BinaryWriteTranslator).Write<IDoorGetter>(
                        item: DoorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Ingredients ?? true)
            {
                var IngredientsItem = item.Ingredients;
                if (IngredientsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)IngredientsItem).BinaryWriteTranslator).Write<IIngredientGetter>(
                        item: IngredientsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Lights ?? true)
            {
                var LightsItem = item.Lights;
                if (LightsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LightsItem).BinaryWriteTranslator).Write<ILightGetter>(
                        item: LightsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Miscellaneous ?? true)
            {
                var MiscellaneousItem = item.Miscellaneous;
                if (MiscellaneousItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MiscellaneousItem).BinaryWriteTranslator).Write<IMiscellaneousGetter>(
                        item: MiscellaneousItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Statics ?? true)
            {
                var StaticsItem = item.Statics;
                if (StaticsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)StaticsItem).BinaryWriteTranslator).Write<IStaticGetter>(
                        item: StaticsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Grasses ?? true)
            {
                var GrassesItem = item.Grasses;
                if (GrassesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)GrassesItem).BinaryWriteTranslator).Write<IGrassGetter>(
                        item: GrassesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Trees ?? true)
            {
                var TreesItem = item.Trees;
                if (TreesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)TreesItem).BinaryWriteTranslator).Write<ITreeGetter>(
                        item: TreesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Flora ?? true)
            {
                var FloraItem = item.Flora;
                if (FloraItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FloraItem).BinaryWriteTranslator).Write<IFloraGetter>(
                        item: FloraItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Furniture ?? true)
            {
                var FurnitureItem = item.Furniture;
                if (FurnitureItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FurnitureItem).BinaryWriteTranslator).Write<IFurnitureGetter>(
                        item: FurnitureItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Weapons ?? true)
            {
                var WeaponsItem = item.Weapons;
                if (WeaponsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)WeaponsItem).BinaryWriteTranslator).Write<IWeaponGetter>(
                        item: WeaponsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Ammunitions ?? true)
            {
                var AmmunitionsItem = item.Ammunitions;
                if (AmmunitionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AmmunitionsItem).BinaryWriteTranslator).Write<IAmmunitionGetter>(
                        item: AmmunitionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Npcs ?? true)
            {
                var NpcsItem = item.Npcs;
                if (NpcsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)NpcsItem).BinaryWriteTranslator).Write<INpcGetter>(
                        item: NpcsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Creatures ?? true)
            {
                var CreaturesItem = item.Creatures;
                if (CreaturesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)CreaturesItem).BinaryWriteTranslator).Write<ICreatureGetter>(
                        item: CreaturesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LeveledCreatures ?? true)
            {
                var LeveledCreaturesItem = item.LeveledCreatures;
                if (LeveledCreaturesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LeveledCreaturesItem).BinaryWriteTranslator).Write<ILeveledCreatureGetter>(
                        item: LeveledCreaturesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.SoulGems ?? true)
            {
                var SoulGemsItem = item.SoulGems;
                if (SoulGemsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SoulGemsItem).BinaryWriteTranslator).Write<ISoulGemGetter>(
                        item: SoulGemsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Keys ?? true)
            {
                var KeysItem = item.Keys;
                if (KeysItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)KeysItem).BinaryWriteTranslator).Write<IKeyGetter>(
                        item: KeysItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Potions ?? true)
            {
                var PotionsItem = item.Potions;
                if (PotionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)PotionsItem).BinaryWriteTranslator).Write<IPotionGetter>(
                        item: PotionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Subspaces ?? true)
            {
                var SubspacesItem = item.Subspaces;
                if (SubspacesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SubspacesItem).BinaryWriteTranslator).Write<ISubspaceGetter>(
                        item: SubspacesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.SigilStones ?? true)
            {
                var SigilStonesItem = item.SigilStones;
                if (SigilStonesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SigilStonesItem).BinaryWriteTranslator).Write<ISigilStoneGetter>(
                        item: SigilStonesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LeveledItems ?? true)
            {
                var LeveledItemsItem = item.LeveledItems;
                if (LeveledItemsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LeveledItemsItem).BinaryWriteTranslator).Write<ILeveledItemGetter>(
                        item: LeveledItemsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Weathers ?? true)
            {
                var WeathersItem = item.Weathers;
                if (WeathersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)WeathersItem).BinaryWriteTranslator).Write<IWeatherGetter>(
                        item: WeathersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Climates ?? true)
            {
                var ClimatesItem = item.Climates;
                if (ClimatesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ClimatesItem).BinaryWriteTranslator).Write<IClimateGetter>(
                        item: ClimatesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Regions ?? true)
            {
                var RegionsItem = item.Regions;
                if (RegionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)RegionsItem).BinaryWriteTranslator).Write<IRegionGetter>(
                        item: RegionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Cells ?? true)
            {
                var CellsItem = item.Cells;
                if (CellsItem.Records.Count > 0)
                {
                    ((ListGroupBinaryWriteTranslation)((IBinaryItem)CellsItem).BinaryWriteTranslator).Write<ICellBlockGetter>(
                        item: CellsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Worldspaces ?? true)
            {
                var WorldspacesItem = item.Worldspaces;
                if (WorldspacesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)WorldspacesItem).BinaryWriteTranslator).Write<IWorldspaceGetter>(
                        item: WorldspacesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.DialogTopics ?? true)
            {
                var DialogTopicsItem = item.DialogTopics;
                if (DialogTopicsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DialogTopicsItem).BinaryWriteTranslator).Write<IDialogTopicGetter>(
                        item: DialogTopicsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Quests ?? true)
            {
                var QuestsItem = item.Quests;
                if (QuestsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)QuestsItem).BinaryWriteTranslator).Write<IQuestGetter>(
                        item: QuestsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.IdleAnimations ?? true)
            {
                var IdleAnimationsItem = item.IdleAnimations;
                if (IdleAnimationsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)IdleAnimationsItem).BinaryWriteTranslator).Write<IIdleAnimationGetter>(
                        item: IdleAnimationsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.AIPackages ?? true)
            {
                var AIPackagesItem = item.AIPackages;
                if (AIPackagesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AIPackagesItem).BinaryWriteTranslator).Write<IAIPackageGetter>(
                        item: AIPackagesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.CombatStyles ?? true)
            {
                var CombatStylesItem = item.CombatStyles;
                if (CombatStylesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)CombatStylesItem).BinaryWriteTranslator).Write<ICombatStyleGetter>(
                        item: CombatStylesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LoadScreens ?? true)
            {
                var LoadScreensItem = item.LoadScreens;
                if (LoadScreensItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LoadScreensItem).BinaryWriteTranslator).Write<ILoadScreenGetter>(
                        item: LoadScreensItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LeveledSpells ?? true)
            {
                var LeveledSpellsItem = item.LeveledSpells;
                if (LeveledSpellsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LeveledSpellsItem).BinaryWriteTranslator).Write<ILeveledSpellGetter>(
                        item: LeveledSpellsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.AnimatedObjects ?? true)
            {
                var AnimatedObjectsItem = item.AnimatedObjects;
                if (AnimatedObjectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AnimatedObjectsItem).BinaryWriteTranslator).Write<IAnimatedObjectGetter>(
                        item: AnimatedObjectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Waters ?? true)
            {
                var WatersItem = item.Waters;
                if (WatersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)WatersItem).BinaryWriteTranslator).Write<IWaterGetter>(
                        item: WatersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.EffectShaders ?? true)
            {
                var EffectShadersItem = item.EffectShaders;
                if (EffectShadersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)EffectShadersItem).BinaryWriteTranslator).Write<IEffectShaderGetter>(
                        item: EffectShadersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IOblivionModGetter item,
            ModKey modKey,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            WriteRecordTypes(
                item: item,
                writer: writer,
                importMask: importMask);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            ModKey modKey,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            Write(
                item: (IOblivionModGetter)item,
                importMask: importMask,
                writer: writer,
                param: param,
                modKey: modKey);
        }

    }

    public partial class OblivionModBinaryCreateTranslation
    {
        public readonly static OblivionModBinaryCreateTranslation Instance = new OblivionModBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IOblivionMod item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IOblivionMod item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            GroupMask? importMask,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    item.ModHeader.CopyInFromBinary(
                        frame: frame,
                        recordTypeConverter: null);
                    return (int)OblivionMod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    if (importMask?.GameSettings ?? true)
                    {
                        item.GameSettings.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.GLOB:
                {
                    if (importMask?.Globals ?? true)
                    {
                        item.Globals.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Globals;
                }
                case RecordTypeInts.CLAS:
                {
                    if (importMask?.Classes ?? true)
                    {
                        item.Classes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Classes;
                }
                case RecordTypeInts.FACT:
                {
                    if (importMask?.Factions ?? true)
                    {
                        item.Factions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Factions;
                }
                case RecordTypeInts.HAIR:
                {
                    if (importMask?.Hairs ?? true)
                    {
                        item.Hairs.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Hairs;
                }
                case RecordTypeInts.EYES:
                {
                    if (importMask?.Eyes ?? true)
                    {
                        item.Eyes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Eyes;
                }
                case RecordTypeInts.RACE:
                {
                    if (importMask?.Races ?? true)
                    {
                        item.Races.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Races;
                }
                case RecordTypeInts.SOUN:
                {
                    if (importMask?.Sounds ?? true)
                    {
                        item.Sounds.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Sounds;
                }
                case RecordTypeInts.SKIL:
                {
                    if (importMask?.Skills ?? true)
                    {
                        item.Skills.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Skills;
                }
                case RecordTypeInts.MGEF:
                {
                    if (importMask?.MagicEffects ?? true)
                    {
                        item.MagicEffects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.MagicEffects;
                }
                case RecordTypeInts.SCPT:
                {
                    if (importMask?.Scripts ?? true)
                    {
                        item.Scripts.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Scripts;
                }
                case RecordTypeInts.LTEX:
                {
                    if (importMask?.LandTextures ?? true)
                    {
                        item.LandTextures.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.LandTextures;
                }
                case RecordTypeInts.ENCH:
                {
                    if (importMask?.Enchantments ?? true)
                    {
                        item.Enchantments.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Enchantments;
                }
                case RecordTypeInts.SPEL:
                {
                    if (importMask?.Spells ?? true)
                    {
                        item.Spells.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Spells;
                }
                case RecordTypeInts.BSGN:
                {
                    if (importMask?.Birthsigns ?? true)
                    {
                        item.Birthsigns.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Birthsigns;
                }
                case RecordTypeInts.ACTI:
                {
                    if (importMask?.Activators ?? true)
                    {
                        item.Activators.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Activators;
                }
                case RecordTypeInts.APPA:
                {
                    if (importMask?.AlchemicalApparatus ?? true)
                    {
                        item.AlchemicalApparatus.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.AlchemicalApparatus;
                }
                case RecordTypeInts.ARMO:
                {
                    if (importMask?.Armors ?? true)
                    {
                        item.Armors.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Armors;
                }
                case RecordTypeInts.BOOK:
                {
                    if (importMask?.Books ?? true)
                    {
                        item.Books.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Books;
                }
                case RecordTypeInts.CLOT:
                {
                    if (importMask?.Clothes ?? true)
                    {
                        item.Clothes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Clothes;
                }
                case RecordTypeInts.CONT:
                {
                    if (importMask?.Containers ?? true)
                    {
                        item.Containers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Containers;
                }
                case RecordTypeInts.DOOR:
                {
                    if (importMask?.Doors ?? true)
                    {
                        item.Doors.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Doors;
                }
                case RecordTypeInts.INGR:
                {
                    if (importMask?.Ingredients ?? true)
                    {
                        item.Ingredients.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Ingredients;
                }
                case RecordTypeInts.LIGH:
                {
                    if (importMask?.Lights ?? true)
                    {
                        item.Lights.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Lights;
                }
                case RecordTypeInts.MISC:
                {
                    if (importMask?.Miscellaneous ?? true)
                    {
                        item.Miscellaneous.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Miscellaneous;
                }
                case RecordTypeInts.STAT:
                {
                    if (importMask?.Statics ?? true)
                    {
                        item.Statics.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Statics;
                }
                case RecordTypeInts.GRAS:
                {
                    if (importMask?.Grasses ?? true)
                    {
                        item.Grasses.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Grasses;
                }
                case RecordTypeInts.TREE:
                {
                    if (importMask?.Trees ?? true)
                    {
                        item.Trees.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Trees;
                }
                case RecordTypeInts.FLOR:
                {
                    if (importMask?.Flora ?? true)
                    {
                        item.Flora.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Flora;
                }
                case RecordTypeInts.FURN:
                {
                    if (importMask?.Furniture ?? true)
                    {
                        item.Furniture.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Furniture;
                }
                case RecordTypeInts.WEAP:
                {
                    if (importMask?.Weapons ?? true)
                    {
                        item.Weapons.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Weapons;
                }
                case RecordTypeInts.AMMO:
                {
                    if (importMask?.Ammunitions ?? true)
                    {
                        item.Ammunitions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Ammunitions;
                }
                case RecordTypeInts.NPC_:
                {
                    if (importMask?.Npcs ?? true)
                    {
                        item.Npcs.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Npcs;
                }
                case RecordTypeInts.CREA:
                {
                    if (importMask?.Creatures ?? true)
                    {
                        item.Creatures.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Creatures;
                }
                case RecordTypeInts.LVLC:
                {
                    if (importMask?.LeveledCreatures ?? true)
                    {
                        item.LeveledCreatures.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.LeveledCreatures;
                }
                case RecordTypeInts.SLGM:
                {
                    if (importMask?.SoulGems ?? true)
                    {
                        item.SoulGems.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.SoulGems;
                }
                case RecordTypeInts.KEYM:
                {
                    if (importMask?.Keys ?? true)
                    {
                        item.Keys.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Keys;
                }
                case RecordTypeInts.ALCH:
                {
                    if (importMask?.Potions ?? true)
                    {
                        item.Potions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Potions;
                }
                case RecordTypeInts.SBSP:
                {
                    if (importMask?.Subspaces ?? true)
                    {
                        item.Subspaces.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Subspaces;
                }
                case RecordTypeInts.SGST:
                {
                    if (importMask?.SigilStones ?? true)
                    {
                        item.SigilStones.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.SigilStones;
                }
                case RecordTypeInts.LVLI:
                {
                    if (importMask?.LeveledItems ?? true)
                    {
                        item.LeveledItems.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.LeveledItems;
                }
                case RecordTypeInts.WTHR:
                {
                    if (importMask?.Weathers ?? true)
                    {
                        item.Weathers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Weathers;
                }
                case RecordTypeInts.CLMT:
                {
                    if (importMask?.Climates ?? true)
                    {
                        item.Climates.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Climates;
                }
                case RecordTypeInts.REGN:
                {
                    if (importMask?.Regions ?? true)
                    {
                        item.Regions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Regions;
                }
                case RecordTypeInts.CELL:
                {
                    if (importMask?.Cells ?? true)
                    {
                        item.Cells.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Cells;
                }
                case RecordTypeInts.WRLD:
                {
                    if (importMask?.Worldspaces ?? true)
                    {
                        item.Worldspaces.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Worldspaces;
                }
                case RecordTypeInts.DIAL:
                {
                    if (importMask?.DialogTopics ?? true)
                    {
                        item.DialogTopics.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.DialogTopics;
                }
                case RecordTypeInts.QUST:
                {
                    if (importMask?.Quests ?? true)
                    {
                        item.Quests.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Quests;
                }
                case RecordTypeInts.IDLE:
                {
                    if (importMask?.IdleAnimations ?? true)
                    {
                        item.IdleAnimations.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.IdleAnimations;
                }
                case RecordTypeInts.PACK:
                {
                    if (importMask?.AIPackages ?? true)
                    {
                        item.AIPackages.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.AIPackages;
                }
                case RecordTypeInts.CSTY:
                {
                    if (importMask?.CombatStyles ?? true)
                    {
                        item.CombatStyles.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.CombatStyles;
                }
                case RecordTypeInts.LSCR:
                {
                    if (importMask?.LoadScreens ?? true)
                    {
                        item.LoadScreens.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.LoadScreens;
                }
                case RecordTypeInts.LVSP:
                {
                    if (importMask?.LeveledSpells ?? true)
                    {
                        item.LeveledSpells.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.LeveledSpells;
                }
                case RecordTypeInts.ANIO:
                {
                    if (importMask?.AnimatedObjects ?? true)
                    {
                        item.AnimatedObjects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.AnimatedObjects;
                }
                case RecordTypeInts.WATR:
                {
                    if (importMask?.Waters ?? true)
                    {
                        item.Waters.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Waters;
                }
                case RecordTypeInts.EFSH:
                {
                    if (importMask?.EffectShaders ?? true)
                    {
                        item.EffectShaders.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.EffectShaders;
                }
                default:
                    frame.Position += contentLength;
                    return default(int?);
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class OblivionModBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IOblivionModGetter item,
            MutagenWriter writer,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            var modKey = item.ModKey;
            OblivionModBinaryWriteTranslation.Instance.Write(
                item: item,
                importMask: importMask,
                writer: writer,
                param: param,
                modKey: modKey);
        }

        public static void WriteToBinary(
            this IOblivionModGetter item,
            string path,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            param ??= BinaryWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            var bundle = new WritingBundle(GameRelease.Oblivion)
            {
            };
            using var memStream = new MemoryTributary();
            using (var writer = new MutagenWriter(
                memStream,
                bundle,
                dispose: false))
            {
                OblivionModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
            using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                memStream.Position = 0;
                memStream.CopyTo(fs);
            }
        }

        public static void WriteToBinary(
            this IOblivionModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            var modKey = item.ModKey;
            using (var writer = new MutagenWriter(
                stream: stream,
                new WritingBundle(GameRelease.Oblivion),
                dispose: false))
            {
                OblivionModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    [DebuggerDisplay("{GameRelease} {ModKey.ToString()}")]
    public partial class OblivionModBinaryOverlay : IOblivionModDisposableGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => OblivionMod_Registration.Instance;
        public static OblivionMod_Registration Registration => OblivionMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => OblivionModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => OblivionModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IOblivionModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IOblivionModGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IOblivionModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public GameRelease GameRelease => GameRelease.Oblivion;
        IReadOnlyCache<T, FormKey> IModGetter.GetTopLevelGroupGetter<T>() => this.GetTopLevelGroupGetter<T>();
        void IModGetter.WriteToBinary(string path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinaryParallel(string path, BinaryWriteParameters? param) => this.WriteToBinaryParallel(path, param: param);
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        public bool CanUseLocalization => false;
        public bool UsingLocalization => false;
        public IEnumerable<FormLinkInformation> ContainedFormLinks => OblivionModCommon.Instance.GetContainedFormLinks(this);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IOblivionMod, TSetter, TGetter>> IMajorRecordContextEnumerable<IOblivionMod>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IOblivionMod, IMajorRecordCommon, IMajorRecordCommonGetter>> IMajorRecordContextEnumerable<IOblivionMod>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        uint IModGetter.NextFormID => ModHeader.Stats.NextFormID;
        public ModKey ModKey { get; }
        private readonly BinaryOverlayFactoryPackage _package;
        private readonly IBinaryReadStream _data;
        private readonly bool _shouldDispose;
        public void Dispose()
        {
            if (!_shouldDispose) return;
            _data.Dispose();
        }

        #region ModHeader
        private RangeInt64? _ModHeaderLocation;
        private IOblivionModHeaderGetter? _ModHeader => _ModHeaderLocation.HasValue ? OblivionModHeaderBinaryOverlay.OblivionModHeaderFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ModHeaderLocation!.Value.Min, _ModHeaderLocation!.Value.Max), _package), _package) : default;
        public IOblivionModHeaderGetter ModHeader => _ModHeader ?? new OblivionModHeader();
        #endregion
        #region GameSettings
        private RangeInt64? _GameSettingsLocation;
        private IGroupGetter<IGameSettingGetter>? _GameSettings => _GameSettingsLocation.HasValue ? GroupBinaryOverlay<IGameSettingGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _GameSettingsLocation!.Value.Min, _GameSettingsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IGameSettingGetter> GameSettings => _GameSettings ?? new Group<GameSetting>(this);
        #endregion
        #region Globals
        private RangeInt64? _GlobalsLocation;
        private IGroupGetter<IGlobalGetter>? _Globals => _GlobalsLocation.HasValue ? GroupBinaryOverlay<IGlobalGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _GlobalsLocation!.Value.Min, _GlobalsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IGlobalGetter> Globals => _Globals ?? new Group<Global>(this);
        #endregion
        #region Classes
        private RangeInt64? _ClassesLocation;
        private IGroupGetter<IClassGetter>? _Classes => _ClassesLocation.HasValue ? GroupBinaryOverlay<IClassGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ClassesLocation!.Value.Min, _ClassesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IClassGetter> Classes => _Classes ?? new Group<Class>(this);
        #endregion
        #region Factions
        private RangeInt64? _FactionsLocation;
        private IGroupGetter<IFactionGetter>? _Factions => _FactionsLocation.HasValue ? GroupBinaryOverlay<IFactionGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _FactionsLocation!.Value.Min, _FactionsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IFactionGetter> Factions => _Factions ?? new Group<Faction>(this);
        #endregion
        #region Hairs
        private RangeInt64? _HairsLocation;
        private IGroupGetter<IHairGetter>? _Hairs => _HairsLocation.HasValue ? GroupBinaryOverlay<IHairGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _HairsLocation!.Value.Min, _HairsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IHairGetter> Hairs => _Hairs ?? new Group<Hair>(this);
        #endregion
        #region Eyes
        private RangeInt64? _EyesLocation;
        private IGroupGetter<IEyeGetter>? _Eyes => _EyesLocation.HasValue ? GroupBinaryOverlay<IEyeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _EyesLocation!.Value.Min, _EyesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IEyeGetter> Eyes => _Eyes ?? new Group<Eye>(this);
        #endregion
        #region Races
        private RangeInt64? _RacesLocation;
        private IGroupGetter<IRaceGetter>? _Races => _RacesLocation.HasValue ? GroupBinaryOverlay<IRaceGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _RacesLocation!.Value.Min, _RacesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IRaceGetter> Races => _Races ?? new Group<Race>(this);
        #endregion
        #region Sounds
        private RangeInt64? _SoundsLocation;
        private IGroupGetter<ISoundGetter>? _Sounds => _SoundsLocation.HasValue ? GroupBinaryOverlay<ISoundGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SoundsLocation!.Value.Min, _SoundsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISoundGetter> Sounds => _Sounds ?? new Group<Sound>(this);
        #endregion
        #region Skills
        private RangeInt64? _SkillsLocation;
        private IGroupGetter<ISkillRecordGetter>? _Skills => _SkillsLocation.HasValue ? GroupBinaryOverlay<ISkillRecordGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SkillsLocation!.Value.Min, _SkillsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISkillRecordGetter> Skills => _Skills ?? new Group<SkillRecord>(this);
        #endregion
        #region MagicEffects
        private RangeInt64? _MagicEffectsLocation;
        private IGroupGetter<IMagicEffectGetter>? _MagicEffects => _MagicEffectsLocation.HasValue ? GroupBinaryOverlay<IMagicEffectGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MagicEffectsLocation!.Value.Min, _MagicEffectsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMagicEffectGetter> MagicEffects => _MagicEffects ?? new Group<MagicEffect>(this);
        #endregion
        #region Scripts
        private RangeInt64? _ScriptsLocation;
        private IGroupGetter<IScriptGetter>? _Scripts => _ScriptsLocation.HasValue ? GroupBinaryOverlay<IScriptGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ScriptsLocation!.Value.Min, _ScriptsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IScriptGetter> Scripts => _Scripts ?? new Group<Script>(this);
        #endregion
        #region LandTextures
        private RangeInt64? _LandTexturesLocation;
        private IGroupGetter<ILandTextureGetter>? _LandTextures => _LandTexturesLocation.HasValue ? GroupBinaryOverlay<ILandTextureGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LandTexturesLocation!.Value.Min, _LandTexturesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILandTextureGetter> LandTextures => _LandTextures ?? new Group<LandTexture>(this);
        #endregion
        #region Enchantments
        private RangeInt64? _EnchantmentsLocation;
        private IGroupGetter<IEnchantmentGetter>? _Enchantments => _EnchantmentsLocation.HasValue ? GroupBinaryOverlay<IEnchantmentGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _EnchantmentsLocation!.Value.Min, _EnchantmentsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IEnchantmentGetter> Enchantments => _Enchantments ?? new Group<Enchantment>(this);
        #endregion
        #region Spells
        private RangeInt64? _SpellsLocation;
        private IGroupGetter<ISpellUnleveledGetter>? _Spells => _SpellsLocation.HasValue ? GroupBinaryOverlay<ISpellUnleveledGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SpellsLocation!.Value.Min, _SpellsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISpellUnleveledGetter> Spells => _Spells ?? new Group<SpellUnleveled>(this);
        #endregion
        #region Birthsigns
        private RangeInt64? _BirthsignsLocation;
        private IGroupGetter<IBirthsignGetter>? _Birthsigns => _BirthsignsLocation.HasValue ? GroupBinaryOverlay<IBirthsignGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _BirthsignsLocation!.Value.Min, _BirthsignsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IBirthsignGetter> Birthsigns => _Birthsigns ?? new Group<Birthsign>(this);
        #endregion
        #region Activators
        private RangeInt64? _ActivatorsLocation;
        private IGroupGetter<IActivatorGetter>? _Activators => _ActivatorsLocation.HasValue ? GroupBinaryOverlay<IActivatorGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ActivatorsLocation!.Value.Min, _ActivatorsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IActivatorGetter> Activators => _Activators ?? new Group<Activator>(this);
        #endregion
        #region AlchemicalApparatus
        private RangeInt64? _AlchemicalApparatusLocation;
        private IGroupGetter<IAlchemicalApparatusGetter>? _AlchemicalApparatus => _AlchemicalApparatusLocation.HasValue ? GroupBinaryOverlay<IAlchemicalApparatusGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _AlchemicalApparatusLocation!.Value.Min, _AlchemicalApparatusLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IAlchemicalApparatusGetter> AlchemicalApparatus => _AlchemicalApparatus ?? new Group<AlchemicalApparatus>(this);
        #endregion
        #region Armors
        private RangeInt64? _ArmorsLocation;
        private IGroupGetter<IArmorGetter>? _Armors => _ArmorsLocation.HasValue ? GroupBinaryOverlay<IArmorGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ArmorsLocation!.Value.Min, _ArmorsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IArmorGetter> Armors => _Armors ?? new Group<Armor>(this);
        #endregion
        #region Books
        private RangeInt64? _BooksLocation;
        private IGroupGetter<IBookGetter>? _Books => _BooksLocation.HasValue ? GroupBinaryOverlay<IBookGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _BooksLocation!.Value.Min, _BooksLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IBookGetter> Books => _Books ?? new Group<Book>(this);
        #endregion
        #region Clothes
        private RangeInt64? _ClothesLocation;
        private IGroupGetter<IClothingGetter>? _Clothes => _ClothesLocation.HasValue ? GroupBinaryOverlay<IClothingGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ClothesLocation!.Value.Min, _ClothesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IClothingGetter> Clothes => _Clothes ?? new Group<Clothing>(this);
        #endregion
        #region Containers
        private RangeInt64? _ContainersLocation;
        private IGroupGetter<IContainerGetter>? _Containers => _ContainersLocation.HasValue ? GroupBinaryOverlay<IContainerGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ContainersLocation!.Value.Min, _ContainersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IContainerGetter> Containers => _Containers ?? new Group<Container>(this);
        #endregion
        #region Doors
        private RangeInt64? _DoorsLocation;
        private IGroupGetter<IDoorGetter>? _Doors => _DoorsLocation.HasValue ? GroupBinaryOverlay<IDoorGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _DoorsLocation!.Value.Min, _DoorsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IDoorGetter> Doors => _Doors ?? new Group<Door>(this);
        #endregion
        #region Ingredients
        private RangeInt64? _IngredientsLocation;
        private IGroupGetter<IIngredientGetter>? _Ingredients => _IngredientsLocation.HasValue ? GroupBinaryOverlay<IIngredientGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _IngredientsLocation!.Value.Min, _IngredientsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IIngredientGetter> Ingredients => _Ingredients ?? new Group<Ingredient>(this);
        #endregion
        #region Lights
        private RangeInt64? _LightsLocation;
        private IGroupGetter<ILightGetter>? _Lights => _LightsLocation.HasValue ? GroupBinaryOverlay<ILightGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LightsLocation!.Value.Min, _LightsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILightGetter> Lights => _Lights ?? new Group<Light>(this);
        #endregion
        #region Miscellaneous
        private RangeInt64? _MiscellaneousLocation;
        private IGroupGetter<IMiscellaneousGetter>? _Miscellaneous => _MiscellaneousLocation.HasValue ? GroupBinaryOverlay<IMiscellaneousGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MiscellaneousLocation!.Value.Min, _MiscellaneousLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMiscellaneousGetter> Miscellaneous => _Miscellaneous ?? new Group<Miscellaneous>(this);
        #endregion
        #region Statics
        private RangeInt64? _StaticsLocation;
        private IGroupGetter<IStaticGetter>? _Statics => _StaticsLocation.HasValue ? GroupBinaryOverlay<IStaticGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _StaticsLocation!.Value.Min, _StaticsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IStaticGetter> Statics => _Statics ?? new Group<Static>(this);
        #endregion
        #region Grasses
        private RangeInt64? _GrassesLocation;
        private IGroupGetter<IGrassGetter>? _Grasses => _GrassesLocation.HasValue ? GroupBinaryOverlay<IGrassGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _GrassesLocation!.Value.Min, _GrassesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IGrassGetter> Grasses => _Grasses ?? new Group<Grass>(this);
        #endregion
        #region Trees
        private RangeInt64? _TreesLocation;
        private IGroupGetter<ITreeGetter>? _Trees => _TreesLocation.HasValue ? GroupBinaryOverlay<ITreeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _TreesLocation!.Value.Min, _TreesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ITreeGetter> Trees => _Trees ?? new Group<Tree>(this);
        #endregion
        #region Flora
        private RangeInt64? _FloraLocation;
        private IGroupGetter<IFloraGetter>? _Flora => _FloraLocation.HasValue ? GroupBinaryOverlay<IFloraGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _FloraLocation!.Value.Min, _FloraLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IFloraGetter> Flora => _Flora ?? new Group<Flora>(this);
        #endregion
        #region Furniture
        private RangeInt64? _FurnitureLocation;
        private IGroupGetter<IFurnitureGetter>? _Furniture => _FurnitureLocation.HasValue ? GroupBinaryOverlay<IFurnitureGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _FurnitureLocation!.Value.Min, _FurnitureLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IFurnitureGetter> Furniture => _Furniture ?? new Group<Furniture>(this);
        #endregion
        #region Weapons
        private RangeInt64? _WeaponsLocation;
        private IGroupGetter<IWeaponGetter>? _Weapons => _WeaponsLocation.HasValue ? GroupBinaryOverlay<IWeaponGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _WeaponsLocation!.Value.Min, _WeaponsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IWeaponGetter> Weapons => _Weapons ?? new Group<Weapon>(this);
        #endregion
        #region Ammunitions
        private RangeInt64? _AmmunitionsLocation;
        private IGroupGetter<IAmmunitionGetter>? _Ammunitions => _AmmunitionsLocation.HasValue ? GroupBinaryOverlay<IAmmunitionGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _AmmunitionsLocation!.Value.Min, _AmmunitionsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IAmmunitionGetter> Ammunitions => _Ammunitions ?? new Group<Ammunition>(this);
        #endregion
        #region Npcs
        private RangeInt64? _NpcsLocation;
        private IGroupGetter<INpcGetter>? _Npcs => _NpcsLocation.HasValue ? GroupBinaryOverlay<INpcGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _NpcsLocation!.Value.Min, _NpcsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<INpcGetter> Npcs => _Npcs ?? new Group<Npc>(this);
        #endregion
        #region Creatures
        private RangeInt64? _CreaturesLocation;
        private IGroupGetter<ICreatureGetter>? _Creatures => _CreaturesLocation.HasValue ? GroupBinaryOverlay<ICreatureGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _CreaturesLocation!.Value.Min, _CreaturesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ICreatureGetter> Creatures => _Creatures ?? new Group<Creature>(this);
        #endregion
        #region LeveledCreatures
        private RangeInt64? _LeveledCreaturesLocation;
        private IGroupGetter<ILeveledCreatureGetter>? _LeveledCreatures => _LeveledCreaturesLocation.HasValue ? GroupBinaryOverlay<ILeveledCreatureGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LeveledCreaturesLocation!.Value.Min, _LeveledCreaturesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILeveledCreatureGetter> LeveledCreatures => _LeveledCreatures ?? new Group<LeveledCreature>(this);
        #endregion
        #region SoulGems
        private RangeInt64? _SoulGemsLocation;
        private IGroupGetter<ISoulGemGetter>? _SoulGems => _SoulGemsLocation.HasValue ? GroupBinaryOverlay<ISoulGemGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SoulGemsLocation!.Value.Min, _SoulGemsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISoulGemGetter> SoulGems => _SoulGems ?? new Group<SoulGem>(this);
        #endregion
        #region Keys
        private RangeInt64? _KeysLocation;
        private IGroupGetter<IKeyGetter>? _Keys => _KeysLocation.HasValue ? GroupBinaryOverlay<IKeyGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _KeysLocation!.Value.Min, _KeysLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IKeyGetter> Keys => _Keys ?? new Group<Key>(this);
        #endregion
        #region Potions
        private RangeInt64? _PotionsLocation;
        private IGroupGetter<IPotionGetter>? _Potions => _PotionsLocation.HasValue ? GroupBinaryOverlay<IPotionGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _PotionsLocation!.Value.Min, _PotionsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IPotionGetter> Potions => _Potions ?? new Group<Potion>(this);
        #endregion
        #region Subspaces
        private RangeInt64? _SubspacesLocation;
        private IGroupGetter<ISubspaceGetter>? _Subspaces => _SubspacesLocation.HasValue ? GroupBinaryOverlay<ISubspaceGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SubspacesLocation!.Value.Min, _SubspacesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISubspaceGetter> Subspaces => _Subspaces ?? new Group<Subspace>(this);
        #endregion
        #region SigilStones
        private RangeInt64? _SigilStonesLocation;
        private IGroupGetter<ISigilStoneGetter>? _SigilStones => _SigilStonesLocation.HasValue ? GroupBinaryOverlay<ISigilStoneGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SigilStonesLocation!.Value.Min, _SigilStonesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISigilStoneGetter> SigilStones => _SigilStones ?? new Group<SigilStone>(this);
        #endregion
        #region LeveledItems
        private RangeInt64? _LeveledItemsLocation;
        private IGroupGetter<ILeveledItemGetter>? _LeveledItems => _LeveledItemsLocation.HasValue ? GroupBinaryOverlay<ILeveledItemGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LeveledItemsLocation!.Value.Min, _LeveledItemsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILeveledItemGetter> LeveledItems => _LeveledItems ?? new Group<LeveledItem>(this);
        #endregion
        #region Weathers
        private RangeInt64? _WeathersLocation;
        private IGroupGetter<IWeatherGetter>? _Weathers => _WeathersLocation.HasValue ? GroupBinaryOverlay<IWeatherGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _WeathersLocation!.Value.Min, _WeathersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IWeatherGetter> Weathers => _Weathers ?? new Group<Weather>(this);
        #endregion
        #region Climates
        private RangeInt64? _ClimatesLocation;
        private IGroupGetter<IClimateGetter>? _Climates => _ClimatesLocation.HasValue ? GroupBinaryOverlay<IClimateGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ClimatesLocation!.Value.Min, _ClimatesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IClimateGetter> Climates => _Climates ?? new Group<Climate>(this);
        #endregion
        #region Regions
        private RangeInt64? _RegionsLocation;
        private IGroupGetter<IRegionGetter>? _Regions => _RegionsLocation.HasValue ? GroupBinaryOverlay<IRegionGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _RegionsLocation!.Value.Min, _RegionsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IRegionGetter> Regions => _Regions ?? new Group<Region>(this);
        #endregion
        #region Cells
        private RangeInt64? _CellsLocation;
        private IListGroupGetter<ICellBlockGetter>? _Cells => _CellsLocation.HasValue ? ListGroupBinaryOverlay<ICellBlockGetter>.ListGroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _CellsLocation!.Value.Min, _CellsLocation!.Value.Max), _package), _package) : default;
        public IListGroupGetter<ICellBlockGetter> Cells => _Cells ?? new ListGroup<CellBlock>();
        #endregion
        #region Worldspaces
        private RangeInt64? _WorldspacesLocation;
        private IGroupGetter<IWorldspaceGetter>? _Worldspaces => _WorldspacesLocation.HasValue ? GroupBinaryOverlay<IWorldspaceGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _WorldspacesLocation!.Value.Min, _WorldspacesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IWorldspaceGetter> Worldspaces => _Worldspaces ?? new Group<Worldspace>(this);
        #endregion
        #region DialogTopics
        private RangeInt64? _DialogTopicsLocation;
        private IGroupGetter<IDialogTopicGetter>? _DialogTopics => _DialogTopicsLocation.HasValue ? GroupBinaryOverlay<IDialogTopicGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _DialogTopicsLocation!.Value.Min, _DialogTopicsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IDialogTopicGetter> DialogTopics => _DialogTopics ?? new Group<DialogTopic>(this);
        #endregion
        #region Quests
        private RangeInt64? _QuestsLocation;
        private IGroupGetter<IQuestGetter>? _Quests => _QuestsLocation.HasValue ? GroupBinaryOverlay<IQuestGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _QuestsLocation!.Value.Min, _QuestsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IQuestGetter> Quests => _Quests ?? new Group<Quest>(this);
        #endregion
        #region IdleAnimations
        private RangeInt64? _IdleAnimationsLocation;
        private IGroupGetter<IIdleAnimationGetter>? _IdleAnimations => _IdleAnimationsLocation.HasValue ? GroupBinaryOverlay<IIdleAnimationGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _IdleAnimationsLocation!.Value.Min, _IdleAnimationsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IIdleAnimationGetter> IdleAnimations => _IdleAnimations ?? new Group<IdleAnimation>(this);
        #endregion
        #region AIPackages
        private RangeInt64? _AIPackagesLocation;
        private IGroupGetter<IAIPackageGetter>? _AIPackages => _AIPackagesLocation.HasValue ? GroupBinaryOverlay<IAIPackageGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _AIPackagesLocation!.Value.Min, _AIPackagesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IAIPackageGetter> AIPackages => _AIPackages ?? new Group<AIPackage>(this);
        #endregion
        #region CombatStyles
        private RangeInt64? _CombatStylesLocation;
        private IGroupGetter<ICombatStyleGetter>? _CombatStyles => _CombatStylesLocation.HasValue ? GroupBinaryOverlay<ICombatStyleGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _CombatStylesLocation!.Value.Min, _CombatStylesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ICombatStyleGetter> CombatStyles => _CombatStyles ?? new Group<CombatStyle>(this);
        #endregion
        #region LoadScreens
        private RangeInt64? _LoadScreensLocation;
        private IGroupGetter<ILoadScreenGetter>? _LoadScreens => _LoadScreensLocation.HasValue ? GroupBinaryOverlay<ILoadScreenGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LoadScreensLocation!.Value.Min, _LoadScreensLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILoadScreenGetter> LoadScreens => _LoadScreens ?? new Group<LoadScreen>(this);
        #endregion
        #region LeveledSpells
        private RangeInt64? _LeveledSpellsLocation;
        private IGroupGetter<ILeveledSpellGetter>? _LeveledSpells => _LeveledSpellsLocation.HasValue ? GroupBinaryOverlay<ILeveledSpellGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LeveledSpellsLocation!.Value.Min, _LeveledSpellsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILeveledSpellGetter> LeveledSpells => _LeveledSpells ?? new Group<LeveledSpell>(this);
        #endregion
        #region AnimatedObjects
        private RangeInt64? _AnimatedObjectsLocation;
        private IGroupGetter<IAnimatedObjectGetter>? _AnimatedObjects => _AnimatedObjectsLocation.HasValue ? GroupBinaryOverlay<IAnimatedObjectGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _AnimatedObjectsLocation!.Value.Min, _AnimatedObjectsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IAnimatedObjectGetter> AnimatedObjects => _AnimatedObjects ?? new Group<AnimatedObject>(this);
        #endregion
        #region Waters
        private RangeInt64? _WatersLocation;
        private IGroupGetter<IWaterGetter>? _Waters => _WatersLocation.HasValue ? GroupBinaryOverlay<IWaterGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _WatersLocation!.Value.Min, _WatersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IWaterGetter> Waters => _Waters ?? new Group<Water>(this);
        #endregion
        #region EffectShaders
        private RangeInt64? _EffectShadersLocation;
        private IGroupGetter<IEffectShaderGetter>? _EffectShaders => _EffectShadersLocation.HasValue ? GroupBinaryOverlay<IEffectShaderGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _EffectShadersLocation!.Value.Min, _EffectShadersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IEffectShaderGetter> EffectShaders => _EffectShaders ?? new Group<EffectShader>(this);
        #endregion
        protected OblivionModBinaryOverlay(
            IMutagenReadStream stream,
            ModKey modKey,
            bool shouldDispose)
        {
            this.ModKey = modKey;
            this._data = stream;
            this._package = new BinaryOverlayFactoryPackage(stream.MetaData);
            this._shouldDispose = shouldDispose;
        }

        public static OblivionModBinaryOverlay OblivionModFactory(
            ReadOnlyMemorySlice<byte> data,
            ModKey modKey)
        {
            var meta = new ParsingBundle(GameRelease.Oblivion, new MasterReferenceReader(modKey));
            meta.RecordInfoCache = new RecordInfoCache(() => new MutagenMemoryReadStream(data, meta));
            return OblivionModFactory(
                stream: new MutagenMemoryReadStream(
                    data: data,
                    metaData: meta),
                modKey: modKey,
                shouldDispose: false);
        }

        public static OblivionModBinaryOverlay OblivionModFactory(ModPath path)
        {
            var meta = new ParsingBundle(GameRelease.Oblivion, new MasterReferenceReader(path.ModKey))
            {
                RecordInfoCache = new RecordInfoCache(() => new MutagenBinaryReadStream(path, GameRelease.Oblivion))
            };
            var stream = new MutagenBinaryReadStream(
                path: path.Path,
                metaData: meta);
            try
            {
                return OblivionModFactory(
                    stream: stream,
                    path.ModKey,
                    shouldDispose: true);
            }
            catch (Exception)
            {
                stream.Dispose();
                throw;
            }
        }

        public static OblivionModBinaryOverlay OblivionModFactory(
            IMutagenReadStream stream,
            ModKey modKey,
            bool shouldDispose)
        {
            var ret = new OblivionModBinaryOverlay(
                stream: stream,
                modKey: modKey,
                shouldDispose: shouldDispose);
            BinaryOverlay.FillModTypes(
                stream: stream,
                package: ret._package,
                fill: ret.FillRecordType);
            return ret;
        }


        public ParseResult FillRecordType(
            IBinaryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    _ModHeaderLocation = new RangeInt64((stream.Position - offset), finalPos);
                    _package.MetaData.MasterReferences!.SetTo(
                        this.ModHeader.MasterReferences.Select(
                            master => new MasterReference()
                            {
                                Master = master.Master,
                                FileSize = master.FileSize,
                            }));
                    return (int)OblivionMod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    _GameSettingsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.GLOB:
                {
                    _GlobalsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Globals;
                }
                case RecordTypeInts.CLAS:
                {
                    _ClassesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Classes;
                }
                case RecordTypeInts.FACT:
                {
                    _FactionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Factions;
                }
                case RecordTypeInts.HAIR:
                {
                    _HairsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Hairs;
                }
                case RecordTypeInts.EYES:
                {
                    _EyesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Eyes;
                }
                case RecordTypeInts.RACE:
                {
                    _RacesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Races;
                }
                case RecordTypeInts.SOUN:
                {
                    _SoundsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Sounds;
                }
                case RecordTypeInts.SKIL:
                {
                    _SkillsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Skills;
                }
                case RecordTypeInts.MGEF:
                {
                    _MagicEffectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.MagicEffects;
                }
                case RecordTypeInts.SCPT:
                {
                    _ScriptsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Scripts;
                }
                case RecordTypeInts.LTEX:
                {
                    _LandTexturesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.LandTextures;
                }
                case RecordTypeInts.ENCH:
                {
                    _EnchantmentsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Enchantments;
                }
                case RecordTypeInts.SPEL:
                {
                    _SpellsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Spells;
                }
                case RecordTypeInts.BSGN:
                {
                    _BirthsignsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Birthsigns;
                }
                case RecordTypeInts.ACTI:
                {
                    _ActivatorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Activators;
                }
                case RecordTypeInts.APPA:
                {
                    _AlchemicalApparatusLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.AlchemicalApparatus;
                }
                case RecordTypeInts.ARMO:
                {
                    _ArmorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Armors;
                }
                case RecordTypeInts.BOOK:
                {
                    _BooksLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Books;
                }
                case RecordTypeInts.CLOT:
                {
                    _ClothesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Clothes;
                }
                case RecordTypeInts.CONT:
                {
                    _ContainersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Containers;
                }
                case RecordTypeInts.DOOR:
                {
                    _DoorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Doors;
                }
                case RecordTypeInts.INGR:
                {
                    _IngredientsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Ingredients;
                }
                case RecordTypeInts.LIGH:
                {
                    _LightsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Lights;
                }
                case RecordTypeInts.MISC:
                {
                    _MiscellaneousLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Miscellaneous;
                }
                case RecordTypeInts.STAT:
                {
                    _StaticsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Statics;
                }
                case RecordTypeInts.GRAS:
                {
                    _GrassesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Grasses;
                }
                case RecordTypeInts.TREE:
                {
                    _TreesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Trees;
                }
                case RecordTypeInts.FLOR:
                {
                    _FloraLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Flora;
                }
                case RecordTypeInts.FURN:
                {
                    _FurnitureLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Furniture;
                }
                case RecordTypeInts.WEAP:
                {
                    _WeaponsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Weapons;
                }
                case RecordTypeInts.AMMO:
                {
                    _AmmunitionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Ammunitions;
                }
                case RecordTypeInts.NPC_:
                {
                    _NpcsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Npcs;
                }
                case RecordTypeInts.CREA:
                {
                    _CreaturesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Creatures;
                }
                case RecordTypeInts.LVLC:
                {
                    _LeveledCreaturesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.LeveledCreatures;
                }
                case RecordTypeInts.SLGM:
                {
                    _SoulGemsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.SoulGems;
                }
                case RecordTypeInts.KEYM:
                {
                    _KeysLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Keys;
                }
                case RecordTypeInts.ALCH:
                {
                    _PotionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Potions;
                }
                case RecordTypeInts.SBSP:
                {
                    _SubspacesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Subspaces;
                }
                case RecordTypeInts.SGST:
                {
                    _SigilStonesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.SigilStones;
                }
                case RecordTypeInts.LVLI:
                {
                    _LeveledItemsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.LeveledItems;
                }
                case RecordTypeInts.WTHR:
                {
                    _WeathersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Weathers;
                }
                case RecordTypeInts.CLMT:
                {
                    _ClimatesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Climates;
                }
                case RecordTypeInts.REGN:
                {
                    _RegionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Regions;
                }
                case RecordTypeInts.CELL:
                {
                    _CellsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Cells;
                }
                case RecordTypeInts.WRLD:
                {
                    _WorldspacesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Worldspaces;
                }
                case RecordTypeInts.DIAL:
                {
                    _DialogTopicsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.DialogTopics;
                }
                case RecordTypeInts.QUST:
                {
                    _QuestsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Quests;
                }
                case RecordTypeInts.IDLE:
                {
                    _IdleAnimationsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.IdleAnimations;
                }
                case RecordTypeInts.PACK:
                {
                    _AIPackagesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.AIPackages;
                }
                case RecordTypeInts.CSTY:
                {
                    _CombatStylesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.CombatStyles;
                }
                case RecordTypeInts.LSCR:
                {
                    _LoadScreensLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.LoadScreens;
                }
                case RecordTypeInts.LVSP:
                {
                    _LeveledSpellsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.LeveledSpells;
                }
                case RecordTypeInts.ANIO:
                {
                    _AnimatedObjectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.AnimatedObjects;
                }
                case RecordTypeInts.WATR:
                {
                    _WatersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.Waters;
                }
                case RecordTypeInts.EFSH:
                {
                    _EffectShadersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)OblivionMod_FieldIndex.EffectShaders;
                }
                default:
                    return default(int?);
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            OblivionModMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IOblivionModGetter rhs)) return false;
            return ((OblivionModCommon)((IOblivionModGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IOblivionModGetter? obj)
        {
            return ((OblivionModCommon)((IOblivionModGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((OblivionModCommon)((IOblivionModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => OblivionModMixIn.GetEqualsMask(this, (IOblivionModGetter)rhs, include);
    }

}
#endregion

#endregion

