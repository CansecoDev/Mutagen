/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using DynamicData;
using CSharpExt.Rx;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class OblivionMod : 
        LoquiNotifyingObject,
        IOblivionMod,
        ILoquiObject<OblivionMod>,
        ILoquiObjectSetter,
        ILinkContainer,
        IEquatable<OblivionMod>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => OblivionMod_Registration.Instance;
        public static OblivionMod_Registration Registration => OblivionMod_Registration.Instance;

        #region Ctor
        protected OblivionMod()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            Observable.Merge(
                _GameSettings_Object.Items.Connect().Transform<IMajorRecord, GameSetting, FormKey>((i) => i),
                _Globals_Object.Items.Connect().Transform<IMajorRecord, Global, FormKey>((i) => i),
                _Classes_Object.Items.Connect().Transform<IMajorRecord, Class, FormKey>((i) => i),
                _Factions_Object.Items.Connect().Transform<IMajorRecord, Faction, FormKey>((i) => i),
                _Hairs_Object.Items.Connect().Transform<IMajorRecord, Hair, FormKey>((i) => i),
                _Eyes_Object.Items.Connect().Transform<IMajorRecord, Eye, FormKey>((i) => i),
                _Races_Object.Items.Connect().Transform<IMajorRecord, Race, FormKey>((i) => i),
                _Sounds_Object.Items.Connect().Transform<IMajorRecord, Sound, FormKey>((i) => i),
                _Skills_Object.Items.Connect().Transform<IMajorRecord, SkillRecord, FormKey>((i) => i),
                _MagicEffects_Object.Items.Connect().Transform<IMajorRecord, MagicEffect, FormKey>((i) => i),
                _Scripts_Object.Items.Connect().Transform<IMajorRecord, Script, FormKey>((i) => i),
                _LandTextures_Object.Items.Connect().Transform<IMajorRecord, LandTexture, FormKey>((i) => i),
                _Enchantments_Object.Items.Connect().Transform<IMajorRecord, Enchantment, FormKey>((i) => i),
                _Spells_Object.Items.Connect().Transform<IMajorRecord, SpellUnleveled, FormKey>((i) => i),
                _Birthsigns_Object.Items.Connect().Transform<IMajorRecord, Birthsign, FormKey>((i) => i),
                _Activators_Object.Items.Connect().Transform<IMajorRecord, Activator, FormKey>((i) => i),
                _AlchemicalApparatus_Object.Items.Connect().Transform<IMajorRecord, AlchemicalApparatus, FormKey>((i) => i),
                _Armors_Object.Items.Connect().Transform<IMajorRecord, Armor, FormKey>((i) => i),
                _Books_Object.Items.Connect().Transform<IMajorRecord, Book, FormKey>((i) => i),
                _Clothes_Object.Items.Connect().Transform<IMajorRecord, Clothing, FormKey>((i) => i),
                _Containers_Object.Items.Connect().Transform<IMajorRecord, Container, FormKey>((i) => i),
                _Doors_Object.Items.Connect().Transform<IMajorRecord, Door, FormKey>((i) => i),
                _Ingredients_Object.Items.Connect().Transform<IMajorRecord, Ingredient, FormKey>((i) => i),
                _Lights_Object.Items.Connect().Transform<IMajorRecord, Light, FormKey>((i) => i),
                _Miscellaneous_Object.Items.Connect().Transform<IMajorRecord, Miscellaneous, FormKey>((i) => i),
                _Statics_Object.Items.Connect().Transform<IMajorRecord, Static, FormKey>((i) => i),
                _Grasses_Object.Items.Connect().Transform<IMajorRecord, Grass, FormKey>((i) => i),
                _Trees_Object.Items.Connect().Transform<IMajorRecord, Tree, FormKey>((i) => i),
                _Flora_Object.Items.Connect().Transform<IMajorRecord, Flora, FormKey>((i) => i),
                _Furnature_Object.Items.Connect().Transform<IMajorRecord, Furnature, FormKey>((i) => i),
                _Weapons_Object.Items.Connect().Transform<IMajorRecord, Weapon, FormKey>((i) => i),
                _Ammo_Object.Items.Connect().Transform<IMajorRecord, Ammo, FormKey>((i) => i),
                _NPCs_Object.Items.Connect().Transform<IMajorRecord, NPC, FormKey>((i) => i),
                _Creatures_Object.Items.Connect().Transform<IMajorRecord, Creature, FormKey>((i) => i),
                _LeveledCreatures_Object.Items.Connect().Transform<IMajorRecord, LeveledCreature, FormKey>((i) => i),
                _SoulGems_Object.Items.Connect().Transform<IMajorRecord, SoulGem, FormKey>((i) => i),
                _Keys_Object.Items.Connect().Transform<IMajorRecord, Key, FormKey>((i) => i),
                _Potions_Object.Items.Connect().Transform<IMajorRecord, Potion, FormKey>((i) => i),
                _Subspaces_Object.Items.Connect().Transform<IMajorRecord, Subspace, FormKey>((i) => i),
                _SigilStones_Object.Items.Connect().Transform<IMajorRecord, SigilStone, FormKey>((i) => i),
                _LeveledItems_Object.Items.Connect().Transform<IMajorRecord, LeveledItem, FormKey>((i) => i),
                _Weathers_Object.Items.Connect().Transform<IMajorRecord, Weather, FormKey>((i) => i),
                _Climates_Object.Items.Connect().Transform<IMajorRecord, Climate, FormKey>((i) => i),
                _Regions_Object.Items.Connect().Transform<IMajorRecord, Region, FormKey>((i) => i),
                _Worldspaces_Object.Items.Connect().Transform<IMajorRecord, Worldspace, FormKey>((i) => i),
                _DialogTopics_Object.Items.Connect().Transform<IMajorRecord, DialogTopic, FormKey>((i) => i),
                _Quests_Object.Items.Connect().Transform<IMajorRecord, Quest, FormKey>((i) => i),
                _IdleAnimations_Object.Items.Connect().Transform<IMajorRecord, IdleAnimation, FormKey>((i) => i),
                _AIPackages_Object.Items.Connect().Transform<IMajorRecord, AIPackage, FormKey>((i) => i),
                _CombatStyles_Object.Items.Connect().Transform<IMajorRecord, CombatStyle, FormKey>((i) => i),
                _LoadScreens_Object.Items.Connect().Transform<IMajorRecord, LoadScreen, FormKey>((i) => i),
                _LeveledSpells_Object.Items.Connect().Transform<IMajorRecord, LeveledSpell, FormKey>((i) => i),
                _AnimatedObjects_Object.Items.Connect().Transform<IMajorRecord, AnimatedObject, FormKey>((i) => i),
                _Waters_Object.Items.Connect().Transform<IMajorRecord, Water, FormKey>((i) => i),
                _EffectShaders_Object.Items.Connect().Transform<IMajorRecord, EffectShader, FormKey>((i) => i))
                .PopulateInto(_majorRecords);
            _hasBeenSetTracker[(int)OblivionMod_FieldIndex.TES4] = true;
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TES4
        private TES4 _TES4_Object = new TES4();
        public bool TES4_IsSet => true;
        bool IOblivionModGetter.TES4_IsSet => TES4_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public TES4 TES4 => _TES4_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TES4 IOblivionModGetter.TES4 => this.TES4;
        #endregion
        #region GameSettings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<GameSetting> _GameSettings_Object = new Group<GameSetting>();
        public Group<GameSetting> GameSettings => _GameSettings_Object;
        #endregion
        #region Globals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Global> _Globals_Object = new Group<Global>();
        public Group<Global> Globals => _Globals_Object;
        #endregion
        #region Classes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Class> _Classes_Object = new Group<Class>();
        public Group<Class> Classes => _Classes_Object;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Faction> _Factions_Object = new Group<Faction>();
        public Group<Faction> Factions => _Factions_Object;
        #endregion
        #region Hairs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Hair> _Hairs_Object = new Group<Hair>();
        public Group<Hair> Hairs => _Hairs_Object;
        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Eye> _Eyes_Object = new Group<Eye>();
        public Group<Eye> Eyes => _Eyes_Object;
        #endregion
        #region Races
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Race> _Races_Object = new Group<Race>();
        public Group<Race> Races => _Races_Object;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Sound> _Sounds_Object = new Group<Sound>();
        public Group<Sound> Sounds => _Sounds_Object;
        #endregion
        #region Skills
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SkillRecord> _Skills_Object = new Group<SkillRecord>();
        public Group<SkillRecord> Skills => _Skills_Object;
        #endregion
        #region MagicEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MagicEffect> _MagicEffects_Object = new Group<MagicEffect>();
        public Group<MagicEffect> MagicEffects => _MagicEffects_Object;
        #endregion
        #region Scripts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Script> _Scripts_Object = new Group<Script>();
        public Group<Script> Scripts => _Scripts_Object;
        #endregion
        #region LandTextures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LandTexture> _LandTextures_Object = new Group<LandTexture>();
        public Group<LandTexture> LandTextures => _LandTextures_Object;
        #endregion
        #region Enchantments
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Enchantment> _Enchantments_Object = new Group<Enchantment>();
        public Group<Enchantment> Enchantments => _Enchantments_Object;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SpellUnleveled> _Spells_Object = new Group<SpellUnleveled>();
        public Group<SpellUnleveled> Spells => _Spells_Object;
        #endregion
        #region Birthsigns
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Birthsign> _Birthsigns_Object = new Group<Birthsign>();
        public Group<Birthsign> Birthsigns => _Birthsigns_Object;
        #endregion
        #region Activators
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Activator> _Activators_Object = new Group<Activator>();
        public Group<Activator> Activators => _Activators_Object;
        #endregion
        #region AlchemicalApparatus
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AlchemicalApparatus> _AlchemicalApparatus_Object = new Group<AlchemicalApparatus>();
        public Group<AlchemicalApparatus> AlchemicalApparatus => _AlchemicalApparatus_Object;
        #endregion
        #region Armors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Armor> _Armors_Object = new Group<Armor>();
        public Group<Armor> Armors => _Armors_Object;
        #endregion
        #region Books
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Book> _Books_Object = new Group<Book>();
        public Group<Book> Books => _Books_Object;
        #endregion
        #region Clothes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Clothing> _Clothes_Object = new Group<Clothing>();
        public Group<Clothing> Clothes => _Clothes_Object;
        #endregion
        #region Containers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Container> _Containers_Object = new Group<Container>();
        public Group<Container> Containers => _Containers_Object;
        #endregion
        #region Doors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Door> _Doors_Object = new Group<Door>();
        public Group<Door> Doors => _Doors_Object;
        #endregion
        #region Ingredients
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Ingredient> _Ingredients_Object = new Group<Ingredient>();
        public Group<Ingredient> Ingredients => _Ingredients_Object;
        #endregion
        #region Lights
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Light> _Lights_Object = new Group<Light>();
        public Group<Light> Lights => _Lights_Object;
        #endregion
        #region Miscellaneous
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Miscellaneous> _Miscellaneous_Object = new Group<Miscellaneous>();
        public Group<Miscellaneous> Miscellaneous => _Miscellaneous_Object;
        #endregion
        #region Statics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Static> _Statics_Object = new Group<Static>();
        public Group<Static> Statics => _Statics_Object;
        #endregion
        #region Grasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Grass> _Grasses_Object = new Group<Grass>();
        public Group<Grass> Grasses => _Grasses_Object;
        #endregion
        #region Trees
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Tree> _Trees_Object = new Group<Tree>();
        public Group<Tree> Trees => _Trees_Object;
        #endregion
        #region Flora
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Flora> _Flora_Object = new Group<Flora>();
        public Group<Flora> Flora => _Flora_Object;
        #endregion
        #region Furnature
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Furnature> _Furnature_Object = new Group<Furnature>();
        public Group<Furnature> Furnature => _Furnature_Object;
        #endregion
        #region Weapons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Weapon> _Weapons_Object = new Group<Weapon>();
        public Group<Weapon> Weapons => _Weapons_Object;
        #endregion
        #region Ammo
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Ammo> _Ammo_Object = new Group<Ammo>();
        public Group<Ammo> Ammo => _Ammo_Object;
        #endregion
        #region NPCs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<NPC> _NPCs_Object = new Group<NPC>();
        public Group<NPC> NPCs => _NPCs_Object;
        #endregion
        #region Creatures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Creature> _Creatures_Object = new Group<Creature>();
        public Group<Creature> Creatures => _Creatures_Object;
        #endregion
        #region LeveledCreatures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LeveledCreature> _LeveledCreatures_Object = new Group<LeveledCreature>();
        public Group<LeveledCreature> LeveledCreatures => _LeveledCreatures_Object;
        #endregion
        #region SoulGems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SoulGem> _SoulGems_Object = new Group<SoulGem>();
        public Group<SoulGem> SoulGems => _SoulGems_Object;
        #endregion
        #region Keys
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Key> _Keys_Object = new Group<Key>();
        public Group<Key> Keys => _Keys_Object;
        #endregion
        #region Potions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Potion> _Potions_Object = new Group<Potion>();
        public Group<Potion> Potions => _Potions_Object;
        #endregion
        #region Subspaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Subspace> _Subspaces_Object = new Group<Subspace>();
        public Group<Subspace> Subspaces => _Subspaces_Object;
        #endregion
        #region SigilStones
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SigilStone> _SigilStones_Object = new Group<SigilStone>();
        public Group<SigilStone> SigilStones => _SigilStones_Object;
        #endregion
        #region LeveledItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LeveledItem> _LeveledItems_Object = new Group<LeveledItem>();
        public Group<LeveledItem> LeveledItems => _LeveledItems_Object;
        #endregion
        #region Weathers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Weather> _Weathers_Object = new Group<Weather>();
        public Group<Weather> Weathers => _Weathers_Object;
        #endregion
        #region Climates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Climate> _Climates_Object = new Group<Climate>();
        public Group<Climate> Climates => _Climates_Object;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Region> _Regions_Object = new Group<Region>();
        public Group<Region> Regions => _Regions_Object;
        #endregion
        #region Cells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ListGroup<CellBlock> _Cells_Object = new ListGroup<CellBlock>();
        public ListGroup<CellBlock> Cells => _Cells_Object;
        #endregion
        #region Worldspaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Worldspace> _Worldspaces_Object = new Group<Worldspace>();
        public Group<Worldspace> Worldspaces => _Worldspaces_Object;
        #endregion
        #region DialogTopics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<DialogTopic> _DialogTopics_Object = new Group<DialogTopic>();
        public Group<DialogTopic> DialogTopics => _DialogTopics_Object;
        #endregion
        #region Quests
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Quest> _Quests_Object = new Group<Quest>();
        public Group<Quest> Quests => _Quests_Object;
        #endregion
        #region IdleAnimations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<IdleAnimation> _IdleAnimations_Object = new Group<IdleAnimation>();
        public Group<IdleAnimation> IdleAnimations => _IdleAnimations_Object;
        #endregion
        #region AIPackages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AIPackage> _AIPackages_Object = new Group<AIPackage>();
        public Group<AIPackage> AIPackages => _AIPackages_Object;
        #endregion
        #region CombatStyles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<CombatStyle> _CombatStyles_Object = new Group<CombatStyle>();
        public Group<CombatStyle> CombatStyles => _CombatStyles_Object;
        #endregion
        #region LoadScreens
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LoadScreen> _LoadScreens_Object = new Group<LoadScreen>();
        public Group<LoadScreen> LoadScreens => _LoadScreens_Object;
        #endregion
        #region LeveledSpells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LeveledSpell> _LeveledSpells_Object = new Group<LeveledSpell>();
        public Group<LeveledSpell> LeveledSpells => _LeveledSpells_Object;
        #endregion
        #region AnimatedObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AnimatedObject> _AnimatedObjects_Object = new Group<AnimatedObject>();
        public Group<AnimatedObject> AnimatedObjects => _AnimatedObjects_Object;
        #endregion
        #region Waters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Water> _Waters_Object = new Group<Water>();
        public Group<Water> Waters => _Waters_Object;
        #endregion
        #region EffectShaders
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<EffectShader> _EffectShaders_Object = new Group<EffectShader>();
        public Group<EffectShader> EffectShaders => _EffectShaders_Object;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => OblivionModCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => OblivionModCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => OblivionModCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            OblivionModCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<OblivionMod>.GetEqualsMask(OblivionMod rhs, EqualsMaskHelper.Include include) => OblivionModCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IOblivionModGetter>.GetEqualsMask(IOblivionModGetter rhs, EqualsMaskHelper.Include include) => OblivionModCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            OblivionMod_Mask<bool> printMask = null)
        {
            return OblivionModCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            OblivionModCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public OblivionMod_Mask<bool> GetHasBeenSetMask()
        {
            return OblivionModCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is OblivionMod rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(OblivionMod rhs)
        {
            if (rhs == null) return false;
            if (TES4_IsSet != rhs.TES4_IsSet) return false;
            if (TES4_IsSet)
            {
                if (!object.Equals(this.TES4, rhs.TES4)) return false;
            }
            if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
            if (!object.Equals(this.Globals, rhs.Globals)) return false;
            if (!object.Equals(this.Classes, rhs.Classes)) return false;
            if (!object.Equals(this.Factions, rhs.Factions)) return false;
            if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
            if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
            if (!object.Equals(this.Races, rhs.Races)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            if (!object.Equals(this.Skills, rhs.Skills)) return false;
            if (!object.Equals(this.MagicEffects, rhs.MagicEffects)) return false;
            if (!object.Equals(this.Scripts, rhs.Scripts)) return false;
            if (!object.Equals(this.LandTextures, rhs.LandTextures)) return false;
            if (!object.Equals(this.Enchantments, rhs.Enchantments)) return false;
            if (!object.Equals(this.Spells, rhs.Spells)) return false;
            if (!object.Equals(this.Birthsigns, rhs.Birthsigns)) return false;
            if (!object.Equals(this.Activators, rhs.Activators)) return false;
            if (!object.Equals(this.AlchemicalApparatus, rhs.AlchemicalApparatus)) return false;
            if (!object.Equals(this.Armors, rhs.Armors)) return false;
            if (!object.Equals(this.Books, rhs.Books)) return false;
            if (!object.Equals(this.Clothes, rhs.Clothes)) return false;
            if (!object.Equals(this.Containers, rhs.Containers)) return false;
            if (!object.Equals(this.Doors, rhs.Doors)) return false;
            if (!object.Equals(this.Ingredients, rhs.Ingredients)) return false;
            if (!object.Equals(this.Lights, rhs.Lights)) return false;
            if (!object.Equals(this.Miscellaneous, rhs.Miscellaneous)) return false;
            if (!object.Equals(this.Statics, rhs.Statics)) return false;
            if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
            if (!object.Equals(this.Trees, rhs.Trees)) return false;
            if (!object.Equals(this.Flora, rhs.Flora)) return false;
            if (!object.Equals(this.Furnature, rhs.Furnature)) return false;
            if (!object.Equals(this.Weapons, rhs.Weapons)) return false;
            if (!object.Equals(this.Ammo, rhs.Ammo)) return false;
            if (!object.Equals(this.NPCs, rhs.NPCs)) return false;
            if (!object.Equals(this.Creatures, rhs.Creatures)) return false;
            if (!object.Equals(this.LeveledCreatures, rhs.LeveledCreatures)) return false;
            if (!object.Equals(this.SoulGems, rhs.SoulGems)) return false;
            if (!object.Equals(this.Keys, rhs.Keys)) return false;
            if (!object.Equals(this.Potions, rhs.Potions)) return false;
            if (!object.Equals(this.Subspaces, rhs.Subspaces)) return false;
            if (!object.Equals(this.SigilStones, rhs.SigilStones)) return false;
            if (!object.Equals(this.LeveledItems, rhs.LeveledItems)) return false;
            if (!object.Equals(this.Weathers, rhs.Weathers)) return false;
            if (!object.Equals(this.Climates, rhs.Climates)) return false;
            if (!object.Equals(this.Regions, rhs.Regions)) return false;
            if (!object.Equals(this.Cells, rhs.Cells)) return false;
            if (!object.Equals(this.Worldspaces, rhs.Worldspaces)) return false;
            if (!object.Equals(this.DialogTopics, rhs.DialogTopics)) return false;
            if (!object.Equals(this.Quests, rhs.Quests)) return false;
            if (!object.Equals(this.IdleAnimations, rhs.IdleAnimations)) return false;
            if (!object.Equals(this.AIPackages, rhs.AIPackages)) return false;
            if (!object.Equals(this.CombatStyles, rhs.CombatStyles)) return false;
            if (!object.Equals(this.LoadScreens, rhs.LoadScreens)) return false;
            if (!object.Equals(this.LeveledSpells, rhs.LeveledSpells)) return false;
            if (!object.Equals(this.AnimatedObjects, rhs.AnimatedObjects)) return false;
            if (!object.Equals(this.Waters, rhs.Waters)) return false;
            if (!object.Equals(this.EffectShaders, rhs.EffectShaders)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (TES4_IsSet)
            {
                ret = HashHelper.GetHashCode(TES4).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(GameSettings).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Globals).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Classes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Factions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Hairs).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Eyes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Races).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Sounds).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Skills).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MagicEffects).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Scripts).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LandTextures).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Enchantments).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Spells).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Birthsigns).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Activators).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(AlchemicalApparatus).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Armors).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Books).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Clothes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Containers).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Doors).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Ingredients).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Lights).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Miscellaneous).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Statics).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Grasses).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Trees).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flora).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Furnature).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Weapons).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Ammo).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(NPCs).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Creatures).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LeveledCreatures).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SoulGems).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Keys).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Potions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Subspaces).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SigilStones).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LeveledItems).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Weathers).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Climates).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Regions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Cells).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Worldspaces).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DialogTopics).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Quests).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(IdleAnimations).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(AIPackages).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CombatStyles).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LoadScreens).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LeveledSpells).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(AnimatedObjects).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Waters).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EffectShaders).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static OblivionMod Create_Xml(
            XElement node,
            OblivionMod_TranslationMask translationMask = null)
        {
            return Create_Xml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static OblivionMod Create_Xml(
            XElement node,
            out OblivionMod_ErrorMask errorMask,
            bool doMasks = true,
            OblivionMod_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = OblivionMod_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static OblivionMod Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new OblivionMod();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    OblivionModCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
                foreach (var link in ret.Links)
                {
                    if (link.Linked) continue;
                    link.Link(modList: null, sourceMod: ret);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static OblivionMod Create_Xml(
            string path,
            OblivionMod_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static OblivionMod Create_Xml(
            string path,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static OblivionMod Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            OblivionMod_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static OblivionMod Create_Xml(
            Stream stream,
            OblivionMod_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static OblivionMod Create_Xml(
            Stream stream,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static OblivionMod Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            OblivionMod_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement node,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                node: node,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = OblivionMod_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<OblivionMod>.Instance.CopyIn(
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out OblivionMod_ErrorMask errorMask,
            bool doMasks = true,
            OblivionMod_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = OblivionMod_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            OblivionMod_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            OblivionModCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            OblivionMod item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "TES4":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.TES4);
                        item.TES4.CopyFieldsFrom(
                            rhs: TES4.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Cells":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Cells);
                        item.Cells.CopyFieldsFrom<CellBlock_CopyMask>(
                            rhs: ListGroup<CellBlock>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((OblivionMod_FieldIndex)index)
            {
                case OblivionMod_FieldIndex.TES4:
                    return _hasBeenSetTracker[index];
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                case OblivionMod_FieldIndex.Creatures:
                case OblivionMod_FieldIndex.LeveledCreatures:
                case OblivionMod_FieldIndex.SoulGems:
                case OblivionMod_FieldIndex.Keys:
                case OblivionMod_FieldIndex.Potions:
                case OblivionMod_FieldIndex.Subspaces:
                case OblivionMod_FieldIndex.SigilStones:
                case OblivionMod_FieldIndex.LeveledItems:
                case OblivionMod_FieldIndex.Weathers:
                case OblivionMod_FieldIndex.Climates:
                case OblivionMod_FieldIndex.Regions:
                case OblivionMod_FieldIndex.Cells:
                case OblivionMod_FieldIndex.Worldspaces:
                case OblivionMod_FieldIndex.DialogTopics:
                case OblivionMod_FieldIndex.Quests:
                case OblivionMod_FieldIndex.IdleAnimations:
                case OblivionMod_FieldIndex.AIPackages:
                case OblivionMod_FieldIndex.CombatStyles:
                case OblivionMod_FieldIndex.LoadScreens:
                case OblivionMod_FieldIndex.LeveledSpells:
                case OblivionMod_FieldIndex.AnimatedObjects:
                case OblivionMod_FieldIndex.Waters:
                case OblivionMod_FieldIndex.EffectShaders:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        private ISourceCache<IMajorRecord, FormKey> _majorRecords = new SourceCache<IMajorRecord, FormKey>(m => m.FormKey);
        public IObservableCache<IMajorRecord, FormKey> MajorRecords => _majorRecords;
        public IMajorRecord this[FormKey id]
        {
            get => MajorRecords.Lookup(id).Value;
            set => SetMajorRecord(id, value);
        }
        protected void SetMajorRecord(
            FormKey id,
            IMajorRecord record)
        {
            switch (record)
            {
                case GameSetting gamesettings:
                    _GameSettings_Object.Items.Set(gamesettings);
                    break;
                case Global globals:
                    _Globals_Object.Items.Set(globals);
                    break;
                case Class classes:
                    _Classes_Object.Items.Set(classes);
                    break;
                case Faction factions:
                    _Factions_Object.Items.Set(factions);
                    break;
                case Hair hairs:
                    _Hairs_Object.Items.Set(hairs);
                    break;
                case Eye eyes:
                    _Eyes_Object.Items.Set(eyes);
                    break;
                case Race races:
                    _Races_Object.Items.Set(races);
                    break;
                case Sound sounds:
                    _Sounds_Object.Items.Set(sounds);
                    break;
                case SkillRecord skills:
                    _Skills_Object.Items.Set(skills);
                    break;
                case MagicEffect magiceffects:
                    _MagicEffects_Object.Items.Set(magiceffects);
                    break;
                case Script scripts:
                    _Scripts_Object.Items.Set(scripts);
                    break;
                case LandTexture landtextures:
                    _LandTextures_Object.Items.Set(landtextures);
                    break;
                case Enchantment enchantments:
                    _Enchantments_Object.Items.Set(enchantments);
                    break;
                case SpellUnleveled spells:
                    _Spells_Object.Items.Set(spells);
                    break;
                case Birthsign birthsigns:
                    _Birthsigns_Object.Items.Set(birthsigns);
                    break;
                case Activator activators:
                    _Activators_Object.Items.Set(activators);
                    break;
                case AlchemicalApparatus alchemicalapparatus:
                    _AlchemicalApparatus_Object.Items.Set(alchemicalapparatus);
                    break;
                case Armor armors:
                    _Armors_Object.Items.Set(armors);
                    break;
                case Book books:
                    _Books_Object.Items.Set(books);
                    break;
                case Clothing clothes:
                    _Clothes_Object.Items.Set(clothes);
                    break;
                case Container containers:
                    _Containers_Object.Items.Set(containers);
                    break;
                case Door doors:
                    _Doors_Object.Items.Set(doors);
                    break;
                case Ingredient ingredients:
                    _Ingredients_Object.Items.Set(ingredients);
                    break;
                case Light lights:
                    _Lights_Object.Items.Set(lights);
                    break;
                case Miscellaneous miscellaneous:
                    _Miscellaneous_Object.Items.Set(miscellaneous);
                    break;
                case Static statics:
                    _Statics_Object.Items.Set(statics);
                    break;
                case Grass grasses:
                    _Grasses_Object.Items.Set(grasses);
                    break;
                case Tree trees:
                    _Trees_Object.Items.Set(trees);
                    break;
                case Flora flora:
                    _Flora_Object.Items.Set(flora);
                    break;
                case Furnature furnature:
                    _Furnature_Object.Items.Set(furnature);
                    break;
                case Weapon weapons:
                    _Weapons_Object.Items.Set(weapons);
                    break;
                case Ammo ammo:
                    _Ammo_Object.Items.Set(ammo);
                    break;
                case NPC npcs:
                    _NPCs_Object.Items.Set(npcs);
                    break;
                case Creature creatures:
                    _Creatures_Object.Items.Set(creatures);
                    break;
                case LeveledCreature leveledcreatures:
                    _LeveledCreatures_Object.Items.Set(leveledcreatures);
                    break;
                case SoulGem soulgems:
                    _SoulGems_Object.Items.Set(soulgems);
                    break;
                case Key keys:
                    _Keys_Object.Items.Set(keys);
                    break;
                case Potion potions:
                    _Potions_Object.Items.Set(potions);
                    break;
                case Subspace subspaces:
                    _Subspaces_Object.Items.Set(subspaces);
                    break;
                case SigilStone sigilstones:
                    _SigilStones_Object.Items.Set(sigilstones);
                    break;
                case LeveledItem leveleditems:
                    _LeveledItems_Object.Items.Set(leveleditems);
                    break;
                case Weather weathers:
                    _Weathers_Object.Items.Set(weathers);
                    break;
                case Climate climates:
                    _Climates_Object.Items.Set(climates);
                    break;
                case Region regions:
                    _Regions_Object.Items.Set(regions);
                    break;
                case Worldspace worldspaces:
                    _Worldspaces_Object.Items.Set(worldspaces);
                    break;
                case DialogTopic dialogtopics:
                    _DialogTopics_Object.Items.Set(dialogtopics);
                    break;
                case Quest quests:
                    _Quests_Object.Items.Set(quests);
                    break;
                case IdleAnimation idleanimations:
                    _IdleAnimations_Object.Items.Set(idleanimations);
                    break;
                case AIPackage aipackages:
                    _AIPackages_Object.Items.Set(aipackages);
                    break;
                case CombatStyle combatstyles:
                    _CombatStyles_Object.Items.Set(combatstyles);
                    break;
                case LoadScreen loadscreens:
                    _LoadScreens_Object.Items.Set(loadscreens);
                    break;
                case LeveledSpell leveledspells:
                    _LeveledSpells_Object.Items.Set(leveledspells);
                    break;
                case AnimatedObject animatedobjects:
                    _AnimatedObjects_Object.Items.Set(animatedobjects);
                    break;
                case Water waters:
                    _Waters_Object.Items.Set(waters);
                    break;
                case EffectShader effectshaders:
                    _EffectShaders_Object.Items.Set(effectshaders);
                    break;
                default:
                    throw new ArgumentException($"Unknown settable MajorRecord type: {record?.GetType()}");
            }
        }

        public ISourceCache<T, FormKey> GetGroup<T>()
            where T : IMajorRecord
        {
            var t = typeof(T);
            if (t.Equals(typeof(GameSetting)))
            {
                return (ISourceCache<T, FormKey>)GameSettings.Items;
            }
            if (t.Equals(typeof(Global)))
            {
                return (ISourceCache<T, FormKey>)Globals.Items;
            }
            if (t.Equals(typeof(Class)))
            {
                return (ISourceCache<T, FormKey>)Classes.Items;
            }
            if (t.Equals(typeof(Faction)))
            {
                return (ISourceCache<T, FormKey>)Factions.Items;
            }
            if (t.Equals(typeof(Hair)))
            {
                return (ISourceCache<T, FormKey>)Hairs.Items;
            }
            if (t.Equals(typeof(Eye)))
            {
                return (ISourceCache<T, FormKey>)Eyes.Items;
            }
            if (t.Equals(typeof(Race)))
            {
                return (ISourceCache<T, FormKey>)Races.Items;
            }
            if (t.Equals(typeof(Sound)))
            {
                return (ISourceCache<T, FormKey>)Sounds.Items;
            }
            if (t.Equals(typeof(SkillRecord)))
            {
                return (ISourceCache<T, FormKey>)Skills.Items;
            }
            if (t.Equals(typeof(MagicEffect)))
            {
                return (ISourceCache<T, FormKey>)MagicEffects.Items;
            }
            if (t.Equals(typeof(Script)))
            {
                return (ISourceCache<T, FormKey>)Scripts.Items;
            }
            if (t.Equals(typeof(LandTexture)))
            {
                return (ISourceCache<T, FormKey>)LandTextures.Items;
            }
            if (t.Equals(typeof(Enchantment)))
            {
                return (ISourceCache<T, FormKey>)Enchantments.Items;
            }
            if (t.Equals(typeof(SpellUnleveled)))
            {
                return (ISourceCache<T, FormKey>)Spells.Items;
            }
            if (t.Equals(typeof(Birthsign)))
            {
                return (ISourceCache<T, FormKey>)Birthsigns.Items;
            }
            if (t.Equals(typeof(Activator)))
            {
                return (ISourceCache<T, FormKey>)Activators.Items;
            }
            if (t.Equals(typeof(AlchemicalApparatus)))
            {
                return (ISourceCache<T, FormKey>)AlchemicalApparatus.Items;
            }
            if (t.Equals(typeof(Armor)))
            {
                return (ISourceCache<T, FormKey>)Armors.Items;
            }
            if (t.Equals(typeof(Book)))
            {
                return (ISourceCache<T, FormKey>)Books.Items;
            }
            if (t.Equals(typeof(Clothing)))
            {
                return (ISourceCache<T, FormKey>)Clothes.Items;
            }
            if (t.Equals(typeof(Container)))
            {
                return (ISourceCache<T, FormKey>)Containers.Items;
            }
            if (t.Equals(typeof(Door)))
            {
                return (ISourceCache<T, FormKey>)Doors.Items;
            }
            if (t.Equals(typeof(Ingredient)))
            {
                return (ISourceCache<T, FormKey>)Ingredients.Items;
            }
            if (t.Equals(typeof(Light)))
            {
                return (ISourceCache<T, FormKey>)Lights.Items;
            }
            if (t.Equals(typeof(Miscellaneous)))
            {
                return (ISourceCache<T, FormKey>)Miscellaneous.Items;
            }
            if (t.Equals(typeof(Static)))
            {
                return (ISourceCache<T, FormKey>)Statics.Items;
            }
            if (t.Equals(typeof(Grass)))
            {
                return (ISourceCache<T, FormKey>)Grasses.Items;
            }
            if (t.Equals(typeof(Tree)))
            {
                return (ISourceCache<T, FormKey>)Trees.Items;
            }
            if (t.Equals(typeof(Flora)))
            {
                return (ISourceCache<T, FormKey>)Flora.Items;
            }
            if (t.Equals(typeof(Furnature)))
            {
                return (ISourceCache<T, FormKey>)Furnature.Items;
            }
            if (t.Equals(typeof(Weapon)))
            {
                return (ISourceCache<T, FormKey>)Weapons.Items;
            }
            if (t.Equals(typeof(Ammo)))
            {
                return (ISourceCache<T, FormKey>)Ammo.Items;
            }
            if (t.Equals(typeof(NPC)))
            {
                return (ISourceCache<T, FormKey>)NPCs.Items;
            }
            if (t.Equals(typeof(Creature)))
            {
                return (ISourceCache<T, FormKey>)Creatures.Items;
            }
            if (t.Equals(typeof(LeveledCreature)))
            {
                return (ISourceCache<T, FormKey>)LeveledCreatures.Items;
            }
            if (t.Equals(typeof(SoulGem)))
            {
                return (ISourceCache<T, FormKey>)SoulGems.Items;
            }
            if (t.Equals(typeof(Key)))
            {
                return (ISourceCache<T, FormKey>)Keys.Items;
            }
            if (t.Equals(typeof(Potion)))
            {
                return (ISourceCache<T, FormKey>)Potions.Items;
            }
            if (t.Equals(typeof(Subspace)))
            {
                return (ISourceCache<T, FormKey>)Subspaces.Items;
            }
            if (t.Equals(typeof(SigilStone)))
            {
                return (ISourceCache<T, FormKey>)SigilStones.Items;
            }
            if (t.Equals(typeof(LeveledItem)))
            {
                return (ISourceCache<T, FormKey>)LeveledItems.Items;
            }
            if (t.Equals(typeof(Weather)))
            {
                return (ISourceCache<T, FormKey>)Weathers.Items;
            }
            if (t.Equals(typeof(Climate)))
            {
                return (ISourceCache<T, FormKey>)Climates.Items;
            }
            if (t.Equals(typeof(Region)))
            {
                return (ISourceCache<T, FormKey>)Regions.Items;
            }
            if (t.Equals(typeof(CellBlock)))
            {
                return (ISourceCache<T, FormKey>)Cells.Items;
            }
            if (t.Equals(typeof(Worldspace)))
            {
                return (ISourceCache<T, FormKey>)Worldspaces.Items;
            }
            if (t.Equals(typeof(DialogTopic)))
            {
                return (ISourceCache<T, FormKey>)DialogTopics.Items;
            }
            if (t.Equals(typeof(Quest)))
            {
                return (ISourceCache<T, FormKey>)Quests.Items;
            }
            if (t.Equals(typeof(IdleAnimation)))
            {
                return (ISourceCache<T, FormKey>)IdleAnimations.Items;
            }
            if (t.Equals(typeof(AIPackage)))
            {
                return (ISourceCache<T, FormKey>)AIPackages.Items;
            }
            if (t.Equals(typeof(CombatStyle)))
            {
                return (ISourceCache<T, FormKey>)CombatStyles.Items;
            }
            if (t.Equals(typeof(LoadScreen)))
            {
                return (ISourceCache<T, FormKey>)LoadScreens.Items;
            }
            if (t.Equals(typeof(LeveledSpell)))
            {
                return (ISourceCache<T, FormKey>)LeveledSpells.Items;
            }
            if (t.Equals(typeof(AnimatedObject)))
            {
                return (ISourceCache<T, FormKey>)AnimatedObjects.Items;
            }
            if (t.Equals(typeof(Water)))
            {
                return (ISourceCache<T, FormKey>)Waters.Items;
            }
            if (t.Equals(typeof(EffectShader)))
            {
                return (ISourceCache<T, FormKey>)EffectShaders.Items;
            }
            throw new ArgumentException($"Unkown group type: {t}");
        }

        public void AddRecords(
            OblivionMod rhsMod,
            GroupMask mask = null)
        {
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.Items.Set(rhsMod.GameSettings.Items.Items);
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.Items.Set(rhsMod.Globals.Items.Items);
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.Items.Set(rhsMod.Classes.Items.Items);
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.Items.Set(rhsMod.Factions.Items.Items);
            }
            if (mask?.Hairs ?? true)
            {
                this.Hairs.Items.Set(rhsMod.Hairs.Items.Items);
            }
            if (mask?.Eyes ?? true)
            {
                this.Eyes.Items.Set(rhsMod.Eyes.Items.Items);
            }
            if (mask?.Races ?? true)
            {
                this.Races.Items.Set(rhsMod.Races.Items.Items);
            }
            if (mask?.Sounds ?? true)
            {
                this.Sounds.Items.Set(rhsMod.Sounds.Items.Items);
            }
            if (mask?.Skills ?? true)
            {
                this.Skills.Items.Set(rhsMod.Skills.Items.Items);
            }
            if (mask?.MagicEffects ?? true)
            {
                this.MagicEffects.Items.Set(rhsMod.MagicEffects.Items.Items);
            }
            if (mask?.Scripts ?? true)
            {
                this.Scripts.Items.Set(rhsMod.Scripts.Items.Items);
            }
            if (mask?.LandTextures ?? true)
            {
                this.LandTextures.Items.Set(rhsMod.LandTextures.Items.Items);
            }
            if (mask?.Enchantments ?? true)
            {
                this.Enchantments.Items.Set(rhsMod.Enchantments.Items.Items);
            }
            if (mask?.Spells ?? true)
            {
                this.Spells.Items.Set(rhsMod.Spells.Items.Items);
            }
            if (mask?.Birthsigns ?? true)
            {
                this.Birthsigns.Items.Set(rhsMod.Birthsigns.Items.Items);
            }
            if (mask?.Activators ?? true)
            {
                this.Activators.Items.Set(rhsMod.Activators.Items.Items);
            }
            if (mask?.AlchemicalApparatus ?? true)
            {
                this.AlchemicalApparatus.Items.Set(rhsMod.AlchemicalApparatus.Items.Items);
            }
            if (mask?.Armors ?? true)
            {
                this.Armors.Items.Set(rhsMod.Armors.Items.Items);
            }
            if (mask?.Books ?? true)
            {
                this.Books.Items.Set(rhsMod.Books.Items.Items);
            }
            if (mask?.Clothes ?? true)
            {
                this.Clothes.Items.Set(rhsMod.Clothes.Items.Items);
            }
            if (mask?.Containers ?? true)
            {
                this.Containers.Items.Set(rhsMod.Containers.Items.Items);
            }
            if (mask?.Doors ?? true)
            {
                this.Doors.Items.Set(rhsMod.Doors.Items.Items);
            }
            if (mask?.Ingredients ?? true)
            {
                this.Ingredients.Items.Set(rhsMod.Ingredients.Items.Items);
            }
            if (mask?.Lights ?? true)
            {
                this.Lights.Items.Set(rhsMod.Lights.Items.Items);
            }
            if (mask?.Miscellaneous ?? true)
            {
                this.Miscellaneous.Items.Set(rhsMod.Miscellaneous.Items.Items);
            }
            if (mask?.Statics ?? true)
            {
                this.Statics.Items.Set(rhsMod.Statics.Items.Items);
            }
            if (mask?.Grasses ?? true)
            {
                this.Grasses.Items.Set(rhsMod.Grasses.Items.Items);
            }
            if (mask?.Trees ?? true)
            {
                this.Trees.Items.Set(rhsMod.Trees.Items.Items);
            }
            if (mask?.Flora ?? true)
            {
                this.Flora.Items.Set(rhsMod.Flora.Items.Items);
            }
            if (mask?.Furnature ?? true)
            {
                this.Furnature.Items.Set(rhsMod.Furnature.Items.Items);
            }
            if (mask?.Weapons ?? true)
            {
                this.Weapons.Items.Set(rhsMod.Weapons.Items.Items);
            }
            if (mask?.Ammo ?? true)
            {
                this.Ammo.Items.Set(rhsMod.Ammo.Items.Items);
            }
            if (mask?.NPCs ?? true)
            {
                this.NPCs.Items.Set(rhsMod.NPCs.Items.Items);
            }
            if (mask?.Creatures ?? true)
            {
                this.Creatures.Items.Set(rhsMod.Creatures.Items.Items);
            }
            if (mask?.LeveledCreatures ?? true)
            {
                this.LeveledCreatures.Items.Set(rhsMod.LeveledCreatures.Items.Items);
            }
            if (mask?.SoulGems ?? true)
            {
                this.SoulGems.Items.Set(rhsMod.SoulGems.Items.Items);
            }
            if (mask?.Keys ?? true)
            {
                this.Keys.Items.Set(rhsMod.Keys.Items.Items);
            }
            if (mask?.Potions ?? true)
            {
                this.Potions.Items.Set(rhsMod.Potions.Items.Items);
            }
            if (mask?.Subspaces ?? true)
            {
                this.Subspaces.Items.Set(rhsMod.Subspaces.Items.Items);
            }
            if (mask?.SigilStones ?? true)
            {
                this.SigilStones.Items.Set(rhsMod.SigilStones.Items.Items);
            }
            if (mask?.LeveledItems ?? true)
            {
                this.LeveledItems.Items.Set(rhsMod.LeveledItems.Items.Items);
            }
            if (mask?.Weathers ?? true)
            {
                this.Weathers.Items.Set(rhsMod.Weathers.Items.Items);
            }
            if (mask?.Climates ?? true)
            {
                this.Climates.Items.Set(rhsMod.Climates.Items.Items);
            }
            if (mask?.Regions ?? true)
            {
                this.Regions.Items.Set(rhsMod.Regions.Items.Items);
            }
            if (mask?.Cells ?? true)
            {
                if (rhsMod.Cells.Items.Count > 0)
                {
                    throw new NotImplementedException("Cell additions need implementing");
                }
            }
            if (mask?.Worldspaces ?? true)
            {
                this.Worldspaces.Items.Set(rhsMod.Worldspaces.Items.Items);
            }
            if (mask?.DialogTopics ?? true)
            {
                this.DialogTopics.Items.Set(rhsMod.DialogTopics.Items.Items);
            }
            if (mask?.Quests ?? true)
            {
                this.Quests.Items.Set(rhsMod.Quests.Items.Items);
            }
            if (mask?.IdleAnimations ?? true)
            {
                this.IdleAnimations.Items.Set(rhsMod.IdleAnimations.Items.Items);
            }
            if (mask?.AIPackages ?? true)
            {
                this.AIPackages.Items.Set(rhsMod.AIPackages.Items.Items);
            }
            if (mask?.CombatStyles ?? true)
            {
                this.CombatStyles.Items.Set(rhsMod.CombatStyles.Items.Items);
            }
            if (mask?.LoadScreens ?? true)
            {
                this.LoadScreens.Items.Set(rhsMod.LoadScreens.Items.Items);
            }
            if (mask?.LeveledSpells ?? true)
            {
                this.LeveledSpells.Items.Set(rhsMod.LeveledSpells.Items.Items);
            }
            if (mask?.AnimatedObjects ?? true)
            {
                this.AnimatedObjects.Items.Set(rhsMod.AnimatedObjects.Items.Items);
            }
            if (mask?.Waters ?? true)
            {
                this.Waters.Items.Set(rhsMod.Waters.Items.Items);
            }
            if (mask?.EffectShaders ?? true)
            {
                this.EffectShaders.Items.Set(rhsMod.EffectShaders.Items.Items);
            }
        }

        public Dictionary<FormKey, MajorRecord> CopyInDuplicate(
            OblivionMod rhs,
            GroupMask mask = null)
        {
            var duppedRecords = new List<(MajorRecord Record, FormKey OriginalFormKey)>();
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.Items.Set(
                    rhs.GameSettings.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<GameSetting>());
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.Items.Set(
                    rhs.Globals.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Global>());
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.Items.Set(
                    rhs.Classes.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Class>());
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.Items.Set(
                    rhs.Factions.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Faction>());
            }
            if (mask?.Hairs ?? true)
            {
                this.Hairs.Items.Set(
                    rhs.Hairs.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Hair>());
            }
            if (mask?.Eyes ?? true)
            {
                this.Eyes.Items.Set(
                    rhs.Eyes.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Eye>());
            }
            if (mask?.Races ?? true)
            {
                this.Races.Items.Set(
                    rhs.Races.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Race>());
            }
            if (mask?.Sounds ?? true)
            {
                this.Sounds.Items.Set(
                    rhs.Sounds.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Sound>());
            }
            if (mask?.Skills ?? true)
            {
                this.Skills.Items.Set(
                    rhs.Skills.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<SkillRecord>());
            }
            if (mask?.MagicEffects ?? true)
            {
                this.MagicEffects.Items.Set(
                    rhs.MagicEffects.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<MagicEffect>());
            }
            if (mask?.Scripts ?? true)
            {
                this.Scripts.Items.Set(
                    rhs.Scripts.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Script>());
            }
            if (mask?.LandTextures ?? true)
            {
                this.LandTextures.Items.Set(
                    rhs.LandTextures.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LandTexture>());
            }
            if (mask?.Enchantments ?? true)
            {
                this.Enchantments.Items.Set(
                    rhs.Enchantments.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Enchantment>());
            }
            if (mask?.Spells ?? true)
            {
                this.Spells.Items.Set(
                    rhs.Spells.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<SpellUnleveled>());
            }
            if (mask?.Birthsigns ?? true)
            {
                this.Birthsigns.Items.Set(
                    rhs.Birthsigns.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Birthsign>());
            }
            if (mask?.Activators ?? true)
            {
                this.Activators.Items.Set(
                    rhs.Activators.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Activator>());
            }
            if (mask?.AlchemicalApparatus ?? true)
            {
                this.AlchemicalApparatus.Items.Set(
                    rhs.AlchemicalApparatus.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<AlchemicalApparatus>());
            }
            if (mask?.Armors ?? true)
            {
                this.Armors.Items.Set(
                    rhs.Armors.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Armor>());
            }
            if (mask?.Books ?? true)
            {
                this.Books.Items.Set(
                    rhs.Books.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Book>());
            }
            if (mask?.Clothes ?? true)
            {
                this.Clothes.Items.Set(
                    rhs.Clothes.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Clothing>());
            }
            if (mask?.Containers ?? true)
            {
                this.Containers.Items.Set(
                    rhs.Containers.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Container>());
            }
            if (mask?.Doors ?? true)
            {
                this.Doors.Items.Set(
                    rhs.Doors.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Door>());
            }
            if (mask?.Ingredients ?? true)
            {
                this.Ingredients.Items.Set(
                    rhs.Ingredients.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Ingredient>());
            }
            if (mask?.Lights ?? true)
            {
                this.Lights.Items.Set(
                    rhs.Lights.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Light>());
            }
            if (mask?.Miscellaneous ?? true)
            {
                this.Miscellaneous.Items.Set(
                    rhs.Miscellaneous.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Miscellaneous>());
            }
            if (mask?.Statics ?? true)
            {
                this.Statics.Items.Set(
                    rhs.Statics.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Static>());
            }
            if (mask?.Grasses ?? true)
            {
                this.Grasses.Items.Set(
                    rhs.Grasses.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Grass>());
            }
            if (mask?.Trees ?? true)
            {
                this.Trees.Items.Set(
                    rhs.Trees.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Tree>());
            }
            if (mask?.Flora ?? true)
            {
                this.Flora.Items.Set(
                    rhs.Flora.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Flora>());
            }
            if (mask?.Furnature ?? true)
            {
                this.Furnature.Items.Set(
                    rhs.Furnature.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Furnature>());
            }
            if (mask?.Weapons ?? true)
            {
                this.Weapons.Items.Set(
                    rhs.Weapons.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Weapon>());
            }
            if (mask?.Ammo ?? true)
            {
                this.Ammo.Items.Set(
                    rhs.Ammo.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Ammo>());
            }
            if (mask?.NPCs ?? true)
            {
                this.NPCs.Items.Set(
                    rhs.NPCs.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<NPC>());
            }
            if (mask?.Creatures ?? true)
            {
                this.Creatures.Items.Set(
                    rhs.Creatures.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Creature>());
            }
            if (mask?.LeveledCreatures ?? true)
            {
                this.LeveledCreatures.Items.Set(
                    rhs.LeveledCreatures.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LeveledCreature>());
            }
            if (mask?.SoulGems ?? true)
            {
                this.SoulGems.Items.Set(
                    rhs.SoulGems.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<SoulGem>());
            }
            if (mask?.Keys ?? true)
            {
                this.Keys.Items.Set(
                    rhs.Keys.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Key>());
            }
            if (mask?.Potions ?? true)
            {
                this.Potions.Items.Set(
                    rhs.Potions.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Potion>());
            }
            if (mask?.Subspaces ?? true)
            {
                this.Subspaces.Items.Set(
                    rhs.Subspaces.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Subspace>());
            }
            if (mask?.SigilStones ?? true)
            {
                this.SigilStones.Items.Set(
                    rhs.SigilStones.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<SigilStone>());
            }
            if (mask?.LeveledItems ?? true)
            {
                this.LeveledItems.Items.Set(
                    rhs.LeveledItems.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LeveledItem>());
            }
            if (mask?.Weathers ?? true)
            {
                this.Weathers.Items.Set(
                    rhs.Weathers.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Weather>());
            }
            if (mask?.Climates ?? true)
            {
                this.Climates.Items.Set(
                    rhs.Climates.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Climate>());
            }
            if (mask?.Regions ?? true)
            {
                this.Regions.Items.Set(
                    rhs.Regions.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Region>());
            }
            if (mask?.Cells ?? true)
            {
                this.Cells.Items.AddRange(
                    rhs.Cells.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<CellBlock>());
            }
            if (mask?.Worldspaces ?? true)
            {
                this.Worldspaces.Items.Set(
                    rhs.Worldspaces.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Worldspace>());
            }
            if (mask?.DialogTopics ?? true)
            {
                this.DialogTopics.Items.Set(
                    rhs.DialogTopics.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<DialogTopic>());
            }
            if (mask?.Quests ?? true)
            {
                this.Quests.Items.Set(
                    rhs.Quests.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Quest>());
            }
            if (mask?.IdleAnimations ?? true)
            {
                this.IdleAnimations.Items.Set(
                    rhs.IdleAnimations.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<IdleAnimation>());
            }
            if (mask?.AIPackages ?? true)
            {
                this.AIPackages.Items.Set(
                    rhs.AIPackages.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<AIPackage>());
            }
            if (mask?.CombatStyles ?? true)
            {
                this.CombatStyles.Items.Set(
                    rhs.CombatStyles.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<CombatStyle>());
            }
            if (mask?.LoadScreens ?? true)
            {
                this.LoadScreens.Items.Set(
                    rhs.LoadScreens.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LoadScreen>());
            }
            if (mask?.LeveledSpells ?? true)
            {
                this.LeveledSpells.Items.Set(
                    rhs.LeveledSpells.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LeveledSpell>());
            }
            if (mask?.AnimatedObjects ?? true)
            {
                this.AnimatedObjects.Items.Set(
                    rhs.AnimatedObjects.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<AnimatedObject>());
            }
            if (mask?.Waters ?? true)
            {
                this.Waters.Items.Set(
                    rhs.Waters.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Water>());
            }
            if (mask?.EffectShaders ?? true)
            {
                this.EffectShaders.Items.Set(
                    rhs.EffectShaders.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<EffectShader>());
            }
            Dictionary<FormKey, MajorRecord> router = new Dictionary<FormKey, MajorRecord>();
            router.Set(duppedRecords.Select(dup => new KeyValuePair<FormKey, MajorRecord>(dup.OriginalFormKey, dup.Record)));
            foreach (var rec in router.Values)
            {
                foreach (var link in rec.Links)
                {
                    if (link.FormKey.ModKey == rhs.ModKey
                        && router.TryGetValue(link.FormKey, out var duppedRecord))
                    {
                        link.FormKey = duppedRecord.FormKey;
                    }
                }
            }
            foreach (var rec in router.Values)
            {
                foreach (var link in rec.Links)
                {
                    link.Link(modList: null, sourceMod: this);
                }
            }
            return router;
        }

        public void SyncRecordCount()
        {
            this.TES4.Header.NumRecords = GetRecordCount();
        }

        public int GetRecordCount()
        {
            int count = this.MajorRecords.Count;
            count += GameSettings.Items.Count > 0 ? 1 : 0;
            count += Globals.Items.Count > 0 ? 1 : 0;
            count += Classes.Items.Count > 0 ? 1 : 0;
            count += Factions.Items.Count > 0 ? 1 : 0;
            count += Hairs.Items.Count > 0 ? 1 : 0;
            count += Eyes.Items.Count > 0 ? 1 : 0;
            count += Races.Items.Count > 0 ? 1 : 0;
            count += Sounds.Items.Count > 0 ? 1 : 0;
            count += Skills.Items.Count > 0 ? 1 : 0;
            count += MagicEffects.Items.Count > 0 ? 1 : 0;
            count += Scripts.Items.Count > 0 ? 1 : 0;
            count += LandTextures.Items.Count > 0 ? 1 : 0;
            count += Enchantments.Items.Count > 0 ? 1 : 0;
            count += Spells.Items.Count > 0 ? 1 : 0;
            count += Birthsigns.Items.Count > 0 ? 1 : 0;
            count += Activators.Items.Count > 0 ? 1 : 0;
            count += AlchemicalApparatus.Items.Count > 0 ? 1 : 0;
            count += Armors.Items.Count > 0 ? 1 : 0;
            count += Books.Items.Count > 0 ? 1 : 0;
            count += Clothes.Items.Count > 0 ? 1 : 0;
            count += Containers.Items.Count > 0 ? 1 : 0;
            count += Doors.Items.Count > 0 ? 1 : 0;
            count += Ingredients.Items.Count > 0 ? 1 : 0;
            count += Lights.Items.Count > 0 ? 1 : 0;
            count += Miscellaneous.Items.Count > 0 ? 1 : 0;
            count += Statics.Items.Count > 0 ? 1 : 0;
            count += Grasses.Items.Count > 0 ? 1 : 0;
            count += Trees.Items.Count > 0 ? 1 : 0;
            count += Flora.Items.Count > 0 ? 1 : 0;
            count += Furnature.Items.Count > 0 ? 1 : 0;
            count += Weapons.Items.Count > 0 ? 1 : 0;
            count += Ammo.Items.Count > 0 ? 1 : 0;
            count += NPCs.Items.Count > 0 ? 1 : 0;
            count += Creatures.Items.Count > 0 ? 1 : 0;
            count += LeveledCreatures.Items.Count > 0 ? 1 : 0;
            count += SoulGems.Items.Count > 0 ? 1 : 0;
            count += Keys.Items.Count > 0 ? 1 : 0;
            count += Potions.Items.Count > 0 ? 1 : 0;
            count += Subspaces.Items.Count > 0 ? 1 : 0;
            count += SigilStones.Items.Count > 0 ? 1 : 0;
            count += LeveledItems.Items.Count > 0 ? 1 : 0;
            count += Weathers.Items.Count > 0 ? 1 : 0;
            count += Climates.Items.Count > 0 ? 1 : 0;
            count += Regions.Items.Count > 0 ? 1 : 0;
            count += Cells.Items.Count > 0 ? 1 : 0;
            count += Worldspaces.Items.Count > 0 ? 1 : 0;
            count += DialogTopics.Items.Count > 0 ? 1 : 0;
            count += Quests.Items.Count > 0 ? 1 : 0;
            count += IdleAnimations.Items.Count > 0 ? 1 : 0;
            count += AIPackages.Items.Count > 0 ? 1 : 0;
            count += CombatStyles.Items.Count > 0 ? 1 : 0;
            count += LoadScreens.Items.Count > 0 ? 1 : 0;
            count += LeveledSpells.Items.Count > 0 ? 1 : 0;
            count += AnimatedObjects.Items.Count > 0 ? 1 : 0;
            count += Waters.Items.Count > 0 ? 1 : 0;
            count += EffectShaders.Items.Count > 0 ? 1 : 0;
            GetCustomRecordCount((customCount) => count += customCount);
            return count;
        }

        partial void GetCustomRecordCount(Action<int> setter);

        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in Factions.Links)
            {
                yield return item;
            }
            foreach (var item in Races.Links)
            {
                yield return item;
            }
            foreach (var item in MagicEffects.Links)
            {
                yield return item;
            }
            if (Scripts is ILinkSubContainer ScriptslinkCont)
            {
                foreach (var item in ScriptslinkCont.Links)
                {
                    yield return item;
                }
            }
            foreach (var item in LandTextures.Links)
            {
                yield return item;
            }
            foreach (var item in Enchantments.Links)
            {
                yield return item;
            }
            foreach (var item in Spells.Links)
            {
                yield return item;
            }
            foreach (var item in Birthsigns.Links)
            {
                yield return item;
            }
            foreach (var item in Activators.Links)
            {
                yield return item;
            }
            foreach (var item in AlchemicalApparatus.Links)
            {
                yield return item;
            }
            foreach (var item in Armors.Links)
            {
                yield return item;
            }
            foreach (var item in Books.Links)
            {
                yield return item;
            }
            foreach (var item in Clothes.Links)
            {
                yield return item;
            }
            foreach (var item in Containers.Links)
            {
                yield return item;
            }
            foreach (var item in Doors.Links)
            {
                yield return item;
            }
            foreach (var item in Ingredients.Links)
            {
                yield return item;
            }
            foreach (var item in Lights.Links)
            {
                yield return item;
            }
            foreach (var item in Miscellaneous.Links)
            {
                yield return item;
            }
            foreach (var item in Flora.Links)
            {
                yield return item;
            }
            foreach (var item in Furnature.Links)
            {
                yield return item;
            }
            foreach (var item in Weapons.Links)
            {
                yield return item;
            }
            foreach (var item in Ammo.Links)
            {
                yield return item;
            }
            foreach (var item in NPCs.Links)
            {
                yield return item;
            }
            foreach (var item in Creatures.Links)
            {
                yield return item;
            }
            foreach (var item in LeveledCreatures.Links)
            {
                yield return item;
            }
            foreach (var item in SoulGems.Links)
            {
                yield return item;
            }
            foreach (var item in Keys.Links)
            {
                yield return item;
            }
            foreach (var item in Potions.Links)
            {
                yield return item;
            }
            foreach (var item in SigilStones.Links)
            {
                yield return item;
            }
            foreach (var item in LeveledItems.Links)
            {
                yield return item;
            }
            foreach (var item in Weathers.Links)
            {
                yield return item;
            }
            foreach (var item in Climates.Links)
            {
                yield return item;
            }
            foreach (var item in Regions.Links)
            {
                yield return item;
            }
            foreach (var item in Cells.Links)
            {
                yield return item;
            }
            foreach (var item in Worldspaces.Links)
            {
                yield return item;
            }
            foreach (var item in DialogTopics.Links)
            {
                yield return item;
            }
            foreach (var item in Quests.Links)
            {
                yield return item;
            }
            foreach (var item in IdleAnimations.Links)
            {
                yield return item;
            }
            foreach (var item in AIPackages.Links)
            {
                yield return item;
            }
            foreach (var item in LoadScreens.Links)
            {
                yield return item;
            }
            foreach (var item in LeveledSpells.Links)
            {
                yield return item;
            }
            foreach (var item in AnimatedObjects.Links)
            {
                yield return item;
            }
            foreach (var item in Waters.Links)
            {
                yield return item;
            }
            yield break;
        }

        public void Link(
            ModList<OblivionMod> modList,
            NotifyingFireParameters cmds = null)
        {
            Factions?.Link(
                modList,
                this,
                cmds);
            Races?.Link(
                modList,
                this,
                cmds);
            MagicEffects?.Link(
                modList,
                this,
                cmds);
            if (Scripts is ILinkSubContainer ScriptslinkCont)
            {
                ScriptslinkCont?.Link(
                    modList,
                    this,
                    cmds);
            }
            LandTextures?.Link(
                modList,
                this,
                cmds);
            Enchantments?.Link(
                modList,
                this,
                cmds);
            Spells?.Link(
                modList,
                this,
                cmds);
            Birthsigns?.Link(
                modList,
                this,
                cmds);
            Activators?.Link(
                modList,
                this,
                cmds);
            AlchemicalApparatus?.Link(
                modList,
                this,
                cmds);
            Armors?.Link(
                modList,
                this,
                cmds);
            Books?.Link(
                modList,
                this,
                cmds);
            Clothes?.Link(
                modList,
                this,
                cmds);
            Containers?.Link(
                modList,
                this,
                cmds);
            Doors?.Link(
                modList,
                this,
                cmds);
            Ingredients?.Link(
                modList,
                this,
                cmds);
            Lights?.Link(
                modList,
                this,
                cmds);
            Miscellaneous?.Link(
                modList,
                this,
                cmds);
            Flora?.Link(
                modList,
                this,
                cmds);
            Furnature?.Link(
                modList,
                this,
                cmds);
            Weapons?.Link(
                modList,
                this,
                cmds);
            Ammo?.Link(
                modList,
                this,
                cmds);
            NPCs?.Link(
                modList,
                this,
                cmds);
            Creatures?.Link(
                modList,
                this,
                cmds);
            LeveledCreatures?.Link(
                modList,
                this,
                cmds);
            SoulGems?.Link(
                modList,
                this,
                cmds);
            Keys?.Link(
                modList,
                this,
                cmds);
            Potions?.Link(
                modList,
                this,
                cmds);
            SigilStones?.Link(
                modList,
                this,
                cmds);
            LeveledItems?.Link(
                modList,
                this,
                cmds);
            Weathers?.Link(
                modList,
                this,
                cmds);
            Climates?.Link(
                modList,
                this,
                cmds);
            Regions?.Link(
                modList,
                this,
                cmds);
            Cells?.Link(
                modList,
                this,
                cmds);
            Worldspaces?.Link(
                modList,
                this,
                cmds);
            DialogTopics?.Link(
                modList,
                this,
                cmds);
            Quests?.Link(
                modList,
                this,
                cmds);
            IdleAnimations?.Link(
                modList,
                this,
                cmds);
            AIPackages?.Link(
                modList,
                this,
                cmds);
            LoadScreens?.Link(
                modList,
                this,
                cmds);
            LeveledSpells?.Link(
                modList,
                this,
                cmds);
            AnimatedObjects?.Link(
                modList,
                this,
                cmds);
            Waters?.Link(
                modList,
                this,
                cmds);
        }

        partial void Write_Xml_Folder_Scripts(
            DirectoryPath dir,
            string name,
            int index,
            ErrorMaskBuilder errorMask);

        partial void Create_Xml_Folder_Scripts(
            DirectoryPath dir,
            string name,
            int index,
            ErrorMaskBuilder errorMask);

        partial void Write_Xml_Folder_Worldspaces(
            DirectoryPath dir,
            string name,
            int index,
            ErrorMaskBuilder errorMask);

        partial void Create_Xml_Folder_Worldspaces(
            DirectoryPath dir,
            string name,
            int index,
            ErrorMaskBuilder errorMask);

        public static async Task<(OblivionMod Mod, OblivionMod_ErrorMask ErrorMask)> Create_Xml_Folder(
            DirectoryPath dir,
            ModKey modKey,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = null;
            var ret = new OblivionMod(modKey);
            ret.TES4.CopyFieldsFrom(TES4.Create_Xml(
                path: Path.Combine(dir.Path, "TES4.xml"),
                errorMask: errorMaskBuilder,
                translationMask: null));
            ret.GameSettings.Create_Xml_Folder<GameSetting>(
                dir: dir,
                name: nameof(GameSettings),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.GameSettings);
            ret.Globals.Create_Xml_Folder<Global>(
                dir: dir,
                name: nameof(Globals),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Globals);
            ret.Classes.Create_Xml_Folder<Class>(
                dir: dir,
                name: nameof(Classes),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Classes);
            ret.Factions.Create_Xml_Folder<Faction>(
                dir: dir,
                name: nameof(Factions),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Factions);
            ret.Hairs.Create_Xml_Folder<Hair>(
                dir: dir,
                name: nameof(Hairs),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Hairs);
            ret.Eyes.Create_Xml_Folder<Eye>(
                dir: dir,
                name: nameof(Eyes),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Eyes);
            ret.Races.Create_Xml_Folder<Race>(
                dir: dir,
                name: nameof(Races),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Races);
            ret.Sounds.Create_Xml_Folder<Sound>(
                dir: dir,
                name: nameof(Sounds),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Sounds);
            ret.Skills.Create_Xml_Folder<SkillRecord>(
                dir: dir,
                name: nameof(Skills),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Skills);
            ret.MagicEffects.Create_Xml_Folder<MagicEffect>(
                dir: dir,
                name: nameof(MagicEffects),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.MagicEffects);
            ret.Create_Xml_Folder_Scripts(
                dir: dir,
                name: nameof(Scripts),
                index: (int)OblivionMod_FieldIndex.Scripts,
                errorMask: errorMaskBuilder);
            ret.LandTextures.Create_Xml_Folder<LandTexture>(
                dir: dir,
                name: nameof(LandTextures),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.LandTextures);
            ret.Enchantments.Create_Xml_Folder<Enchantment>(
                dir: dir,
                name: nameof(Enchantments),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Enchantments);
            ret.Spells.Create_Xml_Folder<SpellUnleveled>(
                dir: dir,
                name: nameof(Spells),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Spells);
            ret.Birthsigns.Create_Xml_Folder<Birthsign>(
                dir: dir,
                name: nameof(Birthsigns),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Birthsigns);
            ret.Activators.Create_Xml_Folder<Activator>(
                dir: dir,
                name: nameof(Activators),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Activators);
            ret.AlchemicalApparatus.Create_Xml_Folder<AlchemicalApparatus>(
                dir: dir,
                name: nameof(AlchemicalApparatus),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.AlchemicalApparatus);
            ret.Armors.Create_Xml_Folder<Armor>(
                dir: dir,
                name: nameof(Armors),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Armors);
            ret.Books.Create_Xml_Folder<Book>(
                dir: dir,
                name: nameof(Books),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Books);
            ret.Clothes.Create_Xml_Folder<Clothing>(
                dir: dir,
                name: nameof(Clothes),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Clothes);
            ret.Containers.Create_Xml_Folder<Container>(
                dir: dir,
                name: nameof(Containers),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Containers);
            ret.Doors.Create_Xml_Folder<Door>(
                dir: dir,
                name: nameof(Doors),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Doors);
            ret.Ingredients.Create_Xml_Folder<Ingredient>(
                dir: dir,
                name: nameof(Ingredients),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Ingredients);
            ret.Lights.Create_Xml_Folder<Light>(
                dir: dir,
                name: nameof(Lights),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Lights);
            ret.Miscellaneous.Create_Xml_Folder<Miscellaneous>(
                dir: dir,
                name: nameof(Miscellaneous),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Miscellaneous);
            ret.Statics.Create_Xml_Folder<Static>(
                dir: dir,
                name: nameof(Statics),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Statics);
            ret.Grasses.Create_Xml_Folder<Grass>(
                dir: dir,
                name: nameof(Grasses),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Grasses);
            ret.Trees.Create_Xml_Folder<Tree>(
                dir: dir,
                name: nameof(Trees),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Trees);
            ret.Flora.Create_Xml_Folder<Flora>(
                dir: dir,
                name: nameof(Flora),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Flora);
            ret.Furnature.Create_Xml_Folder<Furnature>(
                dir: dir,
                name: nameof(Furnature),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Furnature);
            ret.Weapons.Create_Xml_Folder<Weapon>(
                dir: dir,
                name: nameof(Weapons),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Weapons);
            ret.Ammo.Create_Xml_Folder<Ammo>(
                dir: dir,
                name: nameof(Ammo),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Ammo);
            ret.NPCs.Create_Xml_Folder<NPC>(
                dir: dir,
                name: nameof(NPCs),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.NPCs);
            ret.Creatures.Create_Xml_Folder<Creature>(
                dir: dir,
                name: nameof(Creatures),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Creatures);
            ret.LeveledCreatures.Create_Xml_Folder<LeveledCreature>(
                dir: dir,
                name: nameof(LeveledCreatures),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.LeveledCreatures);
            ret.SoulGems.Create_Xml_Folder<SoulGem>(
                dir: dir,
                name: nameof(SoulGems),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.SoulGems);
            ret.Keys.Create_Xml_Folder<Key>(
                dir: dir,
                name: nameof(Keys),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Keys);
            ret.Potions.Create_Xml_Folder<Potion>(
                dir: dir,
                name: nameof(Potions),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Potions);
            ret.Subspaces.Create_Xml_Folder<Subspace>(
                dir: dir,
                name: nameof(Subspaces),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Subspaces);
            ret.SigilStones.Create_Xml_Folder<SigilStone>(
                dir: dir,
                name: nameof(SigilStones),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.SigilStones);
            ret.LeveledItems.Create_Xml_Folder<LeveledItem>(
                dir: dir,
                name: nameof(LeveledItems),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.LeveledItems);
            ret.Weathers.Create_Xml_Folder<Weather>(
                dir: dir,
                name: nameof(Weathers),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Weathers);
            ret.Climates.Create_Xml_Folder<Climate>(
                dir: dir,
                name: nameof(Climates),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Climates);
            ret.Regions.Create_Xml_Folder<Region>(
                dir: dir,
                name: nameof(Regions),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Regions);
            ret.Cells.Create_Xml_Folder<CellBlock>(
                dir: dir,
                name: nameof(Cells),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Cells);
            ret.Create_Xml_Folder_Worldspaces(
                dir: dir,
                name: nameof(Worldspaces),
                index: (int)OblivionMod_FieldIndex.Worldspaces,
                errorMask: errorMaskBuilder);
            ret.DialogTopics.Create_Xml_Folder<DialogTopic>(
                dir: dir,
                name: nameof(DialogTopics),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.DialogTopics);
            ret.Quests.Create_Xml_Folder<Quest>(
                dir: dir,
                name: nameof(Quests),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Quests);
            ret.IdleAnimations.Create_Xml_Folder<IdleAnimation>(
                dir: dir,
                name: nameof(IdleAnimations),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.IdleAnimations);
            ret.AIPackages.Create_Xml_Folder<AIPackage>(
                dir: dir,
                name: nameof(AIPackages),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.AIPackages);
            ret.CombatStyles.Create_Xml_Folder<CombatStyle>(
                dir: dir,
                name: nameof(CombatStyles),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.CombatStyles);
            ret.LoadScreens.Create_Xml_Folder<LoadScreen>(
                dir: dir,
                name: nameof(LoadScreens),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.LoadScreens);
            ret.LeveledSpells.Create_Xml_Folder<LeveledSpell>(
                dir: dir,
                name: nameof(LeveledSpells),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.LeveledSpells);
            ret.AnimatedObjects.Create_Xml_Folder<AnimatedObject>(
                dir: dir,
                name: nameof(AnimatedObjects),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.AnimatedObjects);
            ret.Waters.Create_Xml_Folder<Water>(
                dir: dir,
                name: nameof(Waters),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Waters);
            ret.EffectShaders.Create_Xml_Folder<EffectShader>(
                dir: dir,
                name: nameof(EffectShaders),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.EffectShaders);
            foreach (var link in ret.Links)
            {
                if (link.Linked) continue;
                link.Link(modList: null, sourceMod: ret);
            }
            return (ret, null);
        }

        public async Task<OblivionMod_ErrorMask> Write_XmlFolder(
            DirectoryPath dir,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = null;
            dir.Create();
            this.TES4.Write_Xml(
                path: Path.Combine(dir.Path, "TES4.xml"),
                errorMask: errorMaskBuilder,
                translationMask: null);
            await GameSettings.Write_Xml_Folder<GameSetting, GameSetting_ErrorMask>(
                dir: dir.Path,
                name: nameof(GameSettings),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.GameSettings);
            await Globals.Write_Xml_Folder<Global, Global_ErrorMask>(
                dir: dir.Path,
                name: nameof(Globals),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Globals);
            await Classes.Write_Xml_Folder<Class, Class_ErrorMask>(
                dir: dir.Path,
                name: nameof(Classes),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Classes);
            await Factions.Write_Xml_Folder<Faction, Faction_ErrorMask>(
                dir: dir.Path,
                name: nameof(Factions),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Factions);
            await Hairs.Write_Xml_Folder<Hair, Hair_ErrorMask>(
                dir: dir.Path,
                name: nameof(Hairs),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Hairs);
            await Eyes.Write_Xml_Folder<Eye, Eye_ErrorMask>(
                dir: dir.Path,
                name: nameof(Eyes),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Eyes);
            await Races.Write_Xml_Folder<Race, Race_ErrorMask>(
                dir: dir.Path,
                name: nameof(Races),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Races);
            await Sounds.Write_Xml_Folder<Sound, Sound_ErrorMask>(
                dir: dir.Path,
                name: nameof(Sounds),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Sounds);
            await Skills.Write_Xml_Folder<SkillRecord, SkillRecord_ErrorMask>(
                dir: dir.Path,
                name: nameof(Skills),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Skills);
            await MagicEffects.Write_Xml_Folder<MagicEffect, MagicEffect_ErrorMask>(
                dir: dir.Path,
                name: nameof(MagicEffects),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.MagicEffects);
            Write_Xml_Folder_Scripts(
                dir: dir,
                name: nameof(Scripts),
                index: (int)OblivionMod_FieldIndex.Scripts,
                errorMask: errorMaskBuilder);
            await LandTextures.Write_Xml_Folder<LandTexture, LandTexture_ErrorMask>(
                dir: dir.Path,
                name: nameof(LandTextures),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.LandTextures);
            await Enchantments.Write_Xml_Folder<Enchantment, Enchantment_ErrorMask>(
                dir: dir.Path,
                name: nameof(Enchantments),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Enchantments);
            await Spells.Write_Xml_Folder<SpellUnleveled, SpellUnleveled_ErrorMask>(
                dir: dir.Path,
                name: nameof(Spells),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Spells);
            await Birthsigns.Write_Xml_Folder<Birthsign, Birthsign_ErrorMask>(
                dir: dir.Path,
                name: nameof(Birthsigns),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Birthsigns);
            await Activators.Write_Xml_Folder<Activator, Activator_ErrorMask>(
                dir: dir.Path,
                name: nameof(Activators),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Activators);
            await AlchemicalApparatus.Write_Xml_Folder<AlchemicalApparatus, AlchemicalApparatus_ErrorMask>(
                dir: dir.Path,
                name: nameof(AlchemicalApparatus),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.AlchemicalApparatus);
            await Armors.Write_Xml_Folder<Armor, Armor_ErrorMask>(
                dir: dir.Path,
                name: nameof(Armors),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Armors);
            await Books.Write_Xml_Folder<Book, Book_ErrorMask>(
                dir: dir.Path,
                name: nameof(Books),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Books);
            await Clothes.Write_Xml_Folder<Clothing, Clothing_ErrorMask>(
                dir: dir.Path,
                name: nameof(Clothes),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Clothes);
            await Containers.Write_Xml_Folder<Container, Container_ErrorMask>(
                dir: dir.Path,
                name: nameof(Containers),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Containers);
            await Doors.Write_Xml_Folder<Door, Door_ErrorMask>(
                dir: dir.Path,
                name: nameof(Doors),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Doors);
            await Ingredients.Write_Xml_Folder<Ingredient, Ingredient_ErrorMask>(
                dir: dir.Path,
                name: nameof(Ingredients),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Ingredients);
            await Lights.Write_Xml_Folder<Light, Light_ErrorMask>(
                dir: dir.Path,
                name: nameof(Lights),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Lights);
            await Miscellaneous.Write_Xml_Folder<Miscellaneous, Miscellaneous_ErrorMask>(
                dir: dir.Path,
                name: nameof(Miscellaneous),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Miscellaneous);
            await Statics.Write_Xml_Folder<Static, Static_ErrorMask>(
                dir: dir.Path,
                name: nameof(Statics),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Statics);
            await Grasses.Write_Xml_Folder<Grass, Grass_ErrorMask>(
                dir: dir.Path,
                name: nameof(Grasses),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Grasses);
            await Trees.Write_Xml_Folder<Tree, Tree_ErrorMask>(
                dir: dir.Path,
                name: nameof(Trees),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Trees);
            await Flora.Write_Xml_Folder<Flora, Flora_ErrorMask>(
                dir: dir.Path,
                name: nameof(Flora),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Flora);
            await Furnature.Write_Xml_Folder<Furnature, Furnature_ErrorMask>(
                dir: dir.Path,
                name: nameof(Furnature),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Furnature);
            await Weapons.Write_Xml_Folder<Weapon, Weapon_ErrorMask>(
                dir: dir.Path,
                name: nameof(Weapons),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Weapons);
            await Ammo.Write_Xml_Folder<Ammo, Ammo_ErrorMask>(
                dir: dir.Path,
                name: nameof(Ammo),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Ammo);
            await NPCs.Write_Xml_Folder<NPC, NPC_ErrorMask>(
                dir: dir.Path,
                name: nameof(NPCs),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.NPCs);
            await Creatures.Write_Xml_Folder<Creature, Creature_ErrorMask>(
                dir: dir.Path,
                name: nameof(Creatures),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Creatures);
            await LeveledCreatures.Write_Xml_Folder<LeveledCreature, LeveledCreature_ErrorMask>(
                dir: dir.Path,
                name: nameof(LeveledCreatures),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.LeveledCreatures);
            await SoulGems.Write_Xml_Folder<SoulGem, SoulGem_ErrorMask>(
                dir: dir.Path,
                name: nameof(SoulGems),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.SoulGems);
            await Keys.Write_Xml_Folder<Key, Key_ErrorMask>(
                dir: dir.Path,
                name: nameof(Keys),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Keys);
            await Potions.Write_Xml_Folder<Potion, Potion_ErrorMask>(
                dir: dir.Path,
                name: nameof(Potions),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Potions);
            await Subspaces.Write_Xml_Folder<Subspace, Subspace_ErrorMask>(
                dir: dir.Path,
                name: nameof(Subspaces),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Subspaces);
            await SigilStones.Write_Xml_Folder<SigilStone, SigilStone_ErrorMask>(
                dir: dir.Path,
                name: nameof(SigilStones),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.SigilStones);
            await LeveledItems.Write_Xml_Folder<LeveledItem, LeveledItem_ErrorMask>(
                dir: dir.Path,
                name: nameof(LeveledItems),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.LeveledItems);
            await Weathers.Write_Xml_Folder<Weather, Weather_ErrorMask>(
                dir: dir.Path,
                name: nameof(Weathers),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Weathers);
            await Climates.Write_Xml_Folder<Climate, Climate_ErrorMask>(
                dir: dir.Path,
                name: nameof(Climates),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Climates);
            await Regions.Write_Xml_Folder<Region, Region_ErrorMask>(
                dir: dir.Path,
                name: nameof(Regions),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Regions);
            await Cells.Write_Xml_Folder(
                dir: dir.Path,
                name: nameof(Cells),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Cells);
            Write_Xml_Folder_Worldspaces(
                dir: dir,
                name: nameof(Worldspaces),
                index: (int)OblivionMod_FieldIndex.Worldspaces,
                errorMask: errorMaskBuilder);
            await DialogTopics.Write_Xml_Folder<DialogTopic, DialogTopic_ErrorMask>(
                dir: dir.Path,
                name: nameof(DialogTopics),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.DialogTopics);
            await Quests.Write_Xml_Folder<Quest, Quest_ErrorMask>(
                dir: dir.Path,
                name: nameof(Quests),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Quests);
            await IdleAnimations.Write_Xml_Folder<IdleAnimation, IdleAnimation_ErrorMask>(
                dir: dir.Path,
                name: nameof(IdleAnimations),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.IdleAnimations);
            await AIPackages.Write_Xml_Folder<AIPackage, AIPackage_ErrorMask>(
                dir: dir.Path,
                name: nameof(AIPackages),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.AIPackages);
            await CombatStyles.Write_Xml_Folder<CombatStyle, CombatStyle_ErrorMask>(
                dir: dir.Path,
                name: nameof(CombatStyles),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.CombatStyles);
            await LoadScreens.Write_Xml_Folder<LoadScreen, LoadScreen_ErrorMask>(
                dir: dir.Path,
                name: nameof(LoadScreens),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.LoadScreens);
            await LeveledSpells.Write_Xml_Folder<LeveledSpell, LeveledSpell_ErrorMask>(
                dir: dir.Path,
                name: nameof(LeveledSpells),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.LeveledSpells);
            await AnimatedObjects.Write_Xml_Folder<AnimatedObject, AnimatedObject_ErrorMask>(
                dir: dir.Path,
                name: nameof(AnimatedObjects),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.AnimatedObjects);
            await Waters.Write_Xml_Folder<Water, Water_ErrorMask>(
                dir: dir.Path,
                name: nameof(Waters),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.Waters);
            await EffectShaders.Write_Xml_Folder<EffectShader, EffectShader_ErrorMask>(
                dir: dir.Path,
                name: nameof(EffectShaders),
                errorMask: errorMaskBuilder,
                index: (int)OblivionMod_FieldIndex.EffectShaders);
            return null;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static OblivionMod Create_Binary(
            MutagenFrame frame,
            ModKey modKey,
            GroupMask importMask = null)
        {
            return Create_Binary(
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static OblivionMod Create_Binary(
            MutagenFrame frame,
            ModKey modKey,
            out OblivionMod_ErrorMask errorMask,
            bool doMasks = true,
            GroupMask importMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = OblivionMod_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static OblivionMod Create_Binary(
            MutagenFrame frame,
            ModKey modKey,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            var ret = new OblivionMod(modKey);
            var masterReferences = new MasterReferences(ret.TES4.MasterReferences, modKey);
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            importMask: importMask,
                            masterReferences: masterReferences,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                    }
                }
                foreach (var link in ret.Links)
                {
                    if (link.Linked) continue;
                    link.Link(modList: null, sourceMod: ret);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static OblivionMod Create_Binary(
            string path,
            ModKey modKey,
            GroupMask importMask = null)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static OblivionMod Create_Binary(
            string path,
            ModKey modKey,
            out OblivionMod_ErrorMask errorMask,
            GroupMask importMask = null)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static OblivionMod Create_Binary(
            string path,
            ModKey modKey,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        public static OblivionMod Create_Binary(
            Stream stream,
            ModKey modKey,
            GroupMask importMask = null)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static OblivionMod Create_Binary(
            Stream stream,
            ModKey modKey,
            out OblivionMod_ErrorMask errorMask,
            GroupMask importMask = null)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static OblivionMod Create_Binary(
            Stream stream,
            ModKey modKey,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            ModKey modKey,
            out OblivionMod_ErrorMask errorMask,
            bool doMasks = true,
            GroupMask importMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                importMask: importMask,
                modKey: modKey,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = OblivionMod_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            ModKey modKey,
            out OblivionMod_ErrorMask errorMask,
            bool doMasks = true,
            GroupMask importMask = null)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        importMask: importMask,
                        modKey: modKey,
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(
            string path,
            ModKey modKey,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        importMask: importMask,
                        modKey: modKey,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: errorMask);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }
        public virtual void Write_Binary(
            Stream stream,
            ModKey modKey,
            out OblivionMod_ErrorMask errorMask,
            bool doMasks = true,
            GroupMask importMask = null)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    importMask: importMask,
                    modKey: modKey,
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(
            Stream stream,
            ModKey modKey,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    importMask: importMask,
                    modKey: modKey,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }
        public void Write_Binary(
            MutagenWriter writer,
            ModKey modKey,
            GroupMask importMask = null)
        {
            this.Write_Binary(
                importMask: importMask,
                modKey: modKey,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            string path,
            ModKey modKey,
            GroupMask importMask = null)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        importMask: importMask,
                        modKey: modKey,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(
            Stream stream,
            ModKey modKey,
            GroupMask importMask = null)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    importMask: importMask,
                    modKey: modKey,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        public void Write_Binary(
            MutagenWriter writer,
            ModKey modKey,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            OblivionModCommon.Write_Binary(
                item: this,
                importMask: importMask,
                modKey: modKey,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            OblivionMod item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            OblivionMod item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            GroupMask importMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x34534554: // TES4
                    using (errorMask.PushIndex((int)OblivionMod_FieldIndex.TES4))
                    {
                        var tmpTES4 = TES4.Create_Binary(
                            frame: frame,
                            errorMask: errorMask,
                            recordTypeConverter: null,
                            masterReferences: masterReferences);
                        item.TES4.CopyFieldsFrom(
                            rhs: tmpTES4,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.TES4);
                case 0x54534D47: // GMST
                    if (importMask?.GameSettings ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.GameSettings))
                        {
                            var tmpGameSettings = Group<GameSetting>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.GameSettings.CopyFieldsFrom<GameSetting_CopyMask>(
                                rhs: tmpGameSettings,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.GameSettings);
                case 0x424F4C47: // GLOB
                    if (importMask?.Globals ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Globals))
                        {
                            var tmpGlobals = Group<Global>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Globals.CopyFieldsFrom<Global_CopyMask>(
                                rhs: tmpGlobals,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Globals);
                case 0x53414C43: // CLAS
                    if (importMask?.Classes ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Classes))
                        {
                            var tmpClasses = Group<Class>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Classes.CopyFieldsFrom<Class_CopyMask>(
                                rhs: tmpClasses,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Classes);
                case 0x54434146: // FACT
                    if (importMask?.Factions ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Factions))
                        {
                            var tmpFactions = Group<Faction>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Factions.CopyFieldsFrom<Faction_CopyMask>(
                                rhs: tmpFactions,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Factions);
                case 0x52494148: // HAIR
                    if (importMask?.Hairs ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Hairs))
                        {
                            var tmpHairs = Group<Hair>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Hairs.CopyFieldsFrom<Hair_CopyMask>(
                                rhs: tmpHairs,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Hairs);
                case 0x53455945: // EYES
                    if (importMask?.Eyes ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Eyes))
                        {
                            var tmpEyes = Group<Eye>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Eyes.CopyFieldsFrom<Eye_CopyMask>(
                                rhs: tmpEyes,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Eyes);
                case 0x45434152: // RACE
                    if (importMask?.Races ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Races))
                        {
                            var tmpRaces = Group<Race>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Races.CopyFieldsFrom<Race_CopyMask>(
                                rhs: tmpRaces,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Races);
                case 0x4E554F53: // SOUN
                    if (importMask?.Sounds ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Sounds))
                        {
                            var tmpSounds = Group<Sound>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Sounds.CopyFieldsFrom<Sound_CopyMask>(
                                rhs: tmpSounds,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Sounds);
                case 0x4C494B53: // SKIL
                    if (importMask?.Skills ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Skills))
                        {
                            var tmpSkills = Group<SkillRecord>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Skills.CopyFieldsFrom<SkillRecord_CopyMask>(
                                rhs: tmpSkills,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Skills);
                case 0x4645474D: // MGEF
                    if (importMask?.MagicEffects ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.MagicEffects))
                        {
                            var tmpMagicEffects = Group<MagicEffect>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.MagicEffects.CopyFieldsFrom<MagicEffect_CopyMask>(
                                rhs: tmpMagicEffects,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.MagicEffects);
                case 0x54504353: // SCPT
                    if (importMask?.Scripts ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Scripts))
                        {
                            var tmpScripts = Group<Script>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Scripts.CopyFieldsFrom<Script_CopyMask>(
                                rhs: tmpScripts,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Scripts);
                case 0x5845544C: // LTEX
                    if (importMask?.LandTextures ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.LandTextures))
                        {
                            var tmpLandTextures = Group<LandTexture>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.LandTextures.CopyFieldsFrom<LandTexture_CopyMask>(
                                rhs: tmpLandTextures,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.LandTextures);
                case 0x48434E45: // ENCH
                    if (importMask?.Enchantments ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Enchantments))
                        {
                            var tmpEnchantments = Group<Enchantment>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Enchantments.CopyFieldsFrom<Enchantment_CopyMask>(
                                rhs: tmpEnchantments,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Enchantments);
                case 0x4C455053: // SPEL
                    if (importMask?.Spells ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Spells))
                        {
                            var tmpSpells = Group<SpellUnleveled>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Spells.CopyFieldsFrom<SpellUnleveled_CopyMask>(
                                rhs: tmpSpells,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Spells);
                case 0x4E475342: // BSGN
                    if (importMask?.Birthsigns ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Birthsigns))
                        {
                            var tmpBirthsigns = Group<Birthsign>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Birthsigns.CopyFieldsFrom<Birthsign_CopyMask>(
                                rhs: tmpBirthsigns,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Birthsigns);
                case 0x49544341: // ACTI
                    if (importMask?.Activators ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Activators))
                        {
                            var tmpActivators = Group<Activator>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Activators.CopyFieldsFrom<Activator_CopyMask>(
                                rhs: tmpActivators,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Activators);
                case 0x41505041: // APPA
                    if (importMask?.AlchemicalApparatus ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.AlchemicalApparatus))
                        {
                            var tmpAlchemicalApparatus = Group<AlchemicalApparatus>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.AlchemicalApparatus.CopyFieldsFrom<AlchemicalApparatus_CopyMask>(
                                rhs: tmpAlchemicalApparatus,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.AlchemicalApparatus);
                case 0x4F4D5241: // ARMO
                    if (importMask?.Armors ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Armors))
                        {
                            var tmpArmors = Group<Armor>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Armors.CopyFieldsFrom<Armor_CopyMask>(
                                rhs: tmpArmors,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Armors);
                case 0x4B4F4F42: // BOOK
                    if (importMask?.Books ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Books))
                        {
                            var tmpBooks = Group<Book>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Books.CopyFieldsFrom<Book_CopyMask>(
                                rhs: tmpBooks,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Books);
                case 0x544F4C43: // CLOT
                    if (importMask?.Clothes ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Clothes))
                        {
                            var tmpClothes = Group<Clothing>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Clothes.CopyFieldsFrom<Clothing_CopyMask>(
                                rhs: tmpClothes,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Clothes);
                case 0x544E4F43: // CONT
                    if (importMask?.Containers ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Containers))
                        {
                            var tmpContainers = Group<Container>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Containers.CopyFieldsFrom<Container_CopyMask>(
                                rhs: tmpContainers,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Containers);
                case 0x524F4F44: // DOOR
                    if (importMask?.Doors ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Doors))
                        {
                            var tmpDoors = Group<Door>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Doors.CopyFieldsFrom<Door_CopyMask>(
                                rhs: tmpDoors,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Doors);
                case 0x52474E49: // INGR
                    if (importMask?.Ingredients ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Ingredients))
                        {
                            var tmpIngredients = Group<Ingredient>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Ingredients.CopyFieldsFrom<Ingredient_CopyMask>(
                                rhs: tmpIngredients,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Ingredients);
                case 0x4847494C: // LIGH
                    if (importMask?.Lights ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Lights))
                        {
                            var tmpLights = Group<Light>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Lights.CopyFieldsFrom<Light_CopyMask>(
                                rhs: tmpLights,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Lights);
                case 0x4353494D: // MISC
                    if (importMask?.Miscellaneous ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Miscellaneous))
                        {
                            var tmpMiscellaneous = Group<Miscellaneous>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Miscellaneous.CopyFieldsFrom<Miscellaneous_CopyMask>(
                                rhs: tmpMiscellaneous,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Miscellaneous);
                case 0x54415453: // STAT
                    if (importMask?.Statics ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Statics))
                        {
                            var tmpStatics = Group<Static>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Statics.CopyFieldsFrom<Static_CopyMask>(
                                rhs: tmpStatics,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Statics);
                case 0x53415247: // GRAS
                    if (importMask?.Grasses ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Grasses))
                        {
                            var tmpGrasses = Group<Grass>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Grasses.CopyFieldsFrom<Grass_CopyMask>(
                                rhs: tmpGrasses,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Grasses);
                case 0x45455254: // TREE
                    if (importMask?.Trees ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Trees))
                        {
                            var tmpTrees = Group<Tree>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Trees.CopyFieldsFrom<Tree_CopyMask>(
                                rhs: tmpTrees,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Trees);
                case 0x524F4C46: // FLOR
                    if (importMask?.Flora ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Flora))
                        {
                            var tmpFlora = Group<Flora>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Flora.CopyFieldsFrom<Flora_CopyMask>(
                                rhs: tmpFlora,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Flora);
                case 0x4E525546: // FURN
                    if (importMask?.Furnature ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Furnature))
                        {
                            var tmpFurnature = Group<Furnature>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Furnature.CopyFieldsFrom<Furnature_CopyMask>(
                                rhs: tmpFurnature,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Furnature);
                case 0x50414557: // WEAP
                    if (importMask?.Weapons ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Weapons))
                        {
                            var tmpWeapons = Group<Weapon>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Weapons.CopyFieldsFrom<Weapon_CopyMask>(
                                rhs: tmpWeapons,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Weapons);
                case 0x4F4D4D41: // AMMO
                    if (importMask?.Ammo ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Ammo))
                        {
                            var tmpAmmo = Group<Ammo>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Ammo.CopyFieldsFrom<Ammo_CopyMask>(
                                rhs: tmpAmmo,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Ammo);
                case 0x5F43504E: // NPC_
                    if (importMask?.NPCs ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.NPCs))
                        {
                            var tmpNPCs = Group<NPC>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.NPCs.CopyFieldsFrom<NPC_CopyMask>(
                                rhs: tmpNPCs,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.NPCs);
                case 0x41455243: // CREA
                    if (importMask?.Creatures ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Creatures))
                        {
                            var tmpCreatures = Group<Creature>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Creatures.CopyFieldsFrom<Creature_CopyMask>(
                                rhs: tmpCreatures,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Creatures);
                case 0x434C564C: // LVLC
                    if (importMask?.LeveledCreatures ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.LeveledCreatures))
                        {
                            var tmpLeveledCreatures = Group<LeveledCreature>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.LeveledCreatures.CopyFieldsFrom<LeveledCreature_CopyMask>(
                                rhs: tmpLeveledCreatures,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.LeveledCreatures);
                case 0x4D474C53: // SLGM
                    if (importMask?.SoulGems ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.SoulGems))
                        {
                            var tmpSoulGems = Group<SoulGem>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.SoulGems.CopyFieldsFrom<SoulGem_CopyMask>(
                                rhs: tmpSoulGems,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.SoulGems);
                case 0x4D59454B: // KEYM
                    if (importMask?.Keys ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Keys))
                        {
                            var tmpKeys = Group<Key>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Keys.CopyFieldsFrom<Key_CopyMask>(
                                rhs: tmpKeys,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Keys);
                case 0x48434C41: // ALCH
                    if (importMask?.Potions ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Potions))
                        {
                            var tmpPotions = Group<Potion>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Potions.CopyFieldsFrom<Potion_CopyMask>(
                                rhs: tmpPotions,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Potions);
                case 0x50534253: // SBSP
                    if (importMask?.Subspaces ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Subspaces))
                        {
                            var tmpSubspaces = Group<Subspace>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Subspaces.CopyFieldsFrom<Subspace_CopyMask>(
                                rhs: tmpSubspaces,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Subspaces);
                case 0x54534753: // SGST
                    if (importMask?.SigilStones ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.SigilStones))
                        {
                            var tmpSigilStones = Group<SigilStone>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.SigilStones.CopyFieldsFrom<SigilStone_CopyMask>(
                                rhs: tmpSigilStones,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.SigilStones);
                case 0x494C564C: // LVLI
                    if (importMask?.LeveledItems ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.LeveledItems))
                        {
                            var tmpLeveledItems = Group<LeveledItem>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.LeveledItems.CopyFieldsFrom<LeveledItem_CopyMask>(
                                rhs: tmpLeveledItems,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.LeveledItems);
                case 0x52485457: // WTHR
                    if (importMask?.Weathers ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Weathers))
                        {
                            var tmpWeathers = Group<Weather>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Weathers.CopyFieldsFrom<Weather_CopyMask>(
                                rhs: tmpWeathers,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Weathers);
                case 0x544D4C43: // CLMT
                    if (importMask?.Climates ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Climates))
                        {
                            var tmpClimates = Group<Climate>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Climates.CopyFieldsFrom<Climate_CopyMask>(
                                rhs: tmpClimates,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Climates);
                case 0x4E474552: // REGN
                    if (importMask?.Regions ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Regions))
                        {
                            var tmpRegions = Group<Region>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Regions.CopyFieldsFrom<Region_CopyMask>(
                                rhs: tmpRegions,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Regions);
                case 0x4C4C4543: // CELL
                    if (importMask?.Cells ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Cells))
                        {
                            var tmpCells = ListGroup<CellBlock>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Cells.CopyFieldsFrom<CellBlock_CopyMask>(
                                rhs: tmpCells,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Cells);
                case 0x444C5257: // WRLD
                    if (importMask?.Worldspaces ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Worldspaces))
                        {
                            var tmpWorldspaces = Group<Worldspace>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Worldspaces.CopyFieldsFrom<Worldspace_CopyMask>(
                                rhs: tmpWorldspaces,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Worldspaces);
                case 0x4C414944: // DIAL
                    if (importMask?.DialogTopics ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.DialogTopics))
                        {
                            var tmpDialogTopics = Group<DialogTopic>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.DialogTopics.CopyFieldsFrom<DialogTopic_CopyMask>(
                                rhs: tmpDialogTopics,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.DialogTopics);
                case 0x54535551: // QUST
                    if (importMask?.Quests ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Quests))
                        {
                            var tmpQuests = Group<Quest>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Quests.CopyFieldsFrom<Quest_CopyMask>(
                                rhs: tmpQuests,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Quests);
                case 0x454C4449: // IDLE
                    if (importMask?.IdleAnimations ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.IdleAnimations))
                        {
                            var tmpIdleAnimations = Group<IdleAnimation>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.IdleAnimations.CopyFieldsFrom<IdleAnimation_CopyMask>(
                                rhs: tmpIdleAnimations,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.IdleAnimations);
                case 0x4B434150: // PACK
                    if (importMask?.AIPackages ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.AIPackages))
                        {
                            var tmpAIPackages = Group<AIPackage>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.AIPackages.CopyFieldsFrom<AIPackage_CopyMask>(
                                rhs: tmpAIPackages,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.AIPackages);
                case 0x59545343: // CSTY
                    if (importMask?.CombatStyles ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.CombatStyles))
                        {
                            var tmpCombatStyles = Group<CombatStyle>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.CombatStyles.CopyFieldsFrom<CombatStyle_CopyMask>(
                                rhs: tmpCombatStyles,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.CombatStyles);
                case 0x5243534C: // LSCR
                    if (importMask?.LoadScreens ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.LoadScreens))
                        {
                            var tmpLoadScreens = Group<LoadScreen>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.LoadScreens.CopyFieldsFrom<LoadScreen_CopyMask>(
                                rhs: tmpLoadScreens,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.LoadScreens);
                case 0x5053564C: // LVSP
                    if (importMask?.LeveledSpells ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.LeveledSpells))
                        {
                            var tmpLeveledSpells = Group<LeveledSpell>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.LeveledSpells.CopyFieldsFrom<LeveledSpell_CopyMask>(
                                rhs: tmpLeveledSpells,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.LeveledSpells);
                case 0x4F494E41: // ANIO
                    if (importMask?.AnimatedObjects ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.AnimatedObjects))
                        {
                            var tmpAnimatedObjects = Group<AnimatedObject>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.AnimatedObjects.CopyFieldsFrom<AnimatedObject_CopyMask>(
                                rhs: tmpAnimatedObjects,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.AnimatedObjects);
                case 0x52544157: // WATR
                    if (importMask?.Waters ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.Waters))
                        {
                            var tmpWaters = Group<Water>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Waters.CopyFieldsFrom<Water_CopyMask>(
                                rhs: tmpWaters,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Waters);
                case 0x48534645: // EFSH
                    if (importMask?.EffectShaders ?? true)
                    {
                        using (errorMask.PushIndex((int)OblivionMod_FieldIndex.EffectShaders))
                        {
                            var tmpEffectShaders = Group<EffectShader>.Create_Binary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.EffectShaders.CopyFieldsFrom<EffectShader_CopyMask>(
                                rhs: tmpEffectShaders,
                                def: null,
                                cmds: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.EffectShaders);
                default:
                    errorMask?.ReportWarning($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
                    frame.Position += contentLength;
                    return TryGet<int?>.Succeed(null);
            }
        }

        #endregion

        public OblivionMod Copy(
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null)
        {
            return OblivionMod.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static OblivionMod Copy(
            IOblivionMod item,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null)
        {
            OblivionMod ret;
            if (item.GetType().Equals(typeof(OblivionMod)))
            {
                ret = new OblivionMod();
            }
            else
            {
                ret = (OblivionMod)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static OblivionMod Copy_ToLoqui(
            IOblivionModGetter item,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null)
        {
            OblivionMod ret;
            if (item.GetType().Equals(typeof(OblivionMod)))
            {
                ret = new OblivionMod() as OblivionMod;
            }
            else
            {
                ret = (OblivionMod)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IOblivionModGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IOblivionModGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IOblivionModGetter rhs,
            OblivionMod_CopyMask copyMask,
            IOblivionModGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IOblivionModGetter rhs,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            OblivionModCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = OblivionMod_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IOblivionModGetter rhs,
            ErrorMaskBuilder errorMask,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            OblivionModCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    this.TES4.CopyFieldsFrom(rhs: (TES4)obj);
                    break;
                case OblivionMod_FieldIndex.GameSettings:
                    this._GameSettings_Object.CopyFieldsFrom<GameSetting_CopyMask>(rhs: (Group<GameSetting>)obj);
                    break;
                case OblivionMod_FieldIndex.Globals:
                    this._Globals_Object.CopyFieldsFrom<Global_CopyMask>(rhs: (Group<Global>)obj);
                    break;
                case OblivionMod_FieldIndex.Classes:
                    this._Classes_Object.CopyFieldsFrom<Class_CopyMask>(rhs: (Group<Class>)obj);
                    break;
                case OblivionMod_FieldIndex.Factions:
                    this._Factions_Object.CopyFieldsFrom<Faction_CopyMask>(rhs: (Group<Faction>)obj);
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    this._Hairs_Object.CopyFieldsFrom<Hair_CopyMask>(rhs: (Group<Hair>)obj);
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    this._Eyes_Object.CopyFieldsFrom<Eye_CopyMask>(rhs: (Group<Eye>)obj);
                    break;
                case OblivionMod_FieldIndex.Races:
                    this._Races_Object.CopyFieldsFrom<Race_CopyMask>(rhs: (Group<Race>)obj);
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    this._Sounds_Object.CopyFieldsFrom<Sound_CopyMask>(rhs: (Group<Sound>)obj);
                    break;
                case OblivionMod_FieldIndex.Skills:
                    this._Skills_Object.CopyFieldsFrom<SkillRecord_CopyMask>(rhs: (Group<SkillRecord>)obj);
                    break;
                case OblivionMod_FieldIndex.MagicEffects:
                    this._MagicEffects_Object.CopyFieldsFrom<MagicEffect_CopyMask>(rhs: (Group<MagicEffect>)obj);
                    break;
                case OblivionMod_FieldIndex.Scripts:
                    this._Scripts_Object.CopyFieldsFrom<Script_CopyMask>(rhs: (Group<Script>)obj);
                    break;
                case OblivionMod_FieldIndex.LandTextures:
                    this._LandTextures_Object.CopyFieldsFrom<LandTexture_CopyMask>(rhs: (Group<LandTexture>)obj);
                    break;
                case OblivionMod_FieldIndex.Enchantments:
                    this._Enchantments_Object.CopyFieldsFrom<Enchantment_CopyMask>(rhs: (Group<Enchantment>)obj);
                    break;
                case OblivionMod_FieldIndex.Spells:
                    this._Spells_Object.CopyFieldsFrom<SpellUnleveled_CopyMask>(rhs: (Group<SpellUnleveled>)obj);
                    break;
                case OblivionMod_FieldIndex.Birthsigns:
                    this._Birthsigns_Object.CopyFieldsFrom<Birthsign_CopyMask>(rhs: (Group<Birthsign>)obj);
                    break;
                case OblivionMod_FieldIndex.Activators:
                    this._Activators_Object.CopyFieldsFrom<Activator_CopyMask>(rhs: (Group<Activator>)obj);
                    break;
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    this._AlchemicalApparatus_Object.CopyFieldsFrom<AlchemicalApparatus_CopyMask>(rhs: (Group<AlchemicalApparatus>)obj);
                    break;
                case OblivionMod_FieldIndex.Armors:
                    this._Armors_Object.CopyFieldsFrom<Armor_CopyMask>(rhs: (Group<Armor>)obj);
                    break;
                case OblivionMod_FieldIndex.Books:
                    this._Books_Object.CopyFieldsFrom<Book_CopyMask>(rhs: (Group<Book>)obj);
                    break;
                case OblivionMod_FieldIndex.Clothes:
                    this._Clothes_Object.CopyFieldsFrom<Clothing_CopyMask>(rhs: (Group<Clothing>)obj);
                    break;
                case OblivionMod_FieldIndex.Containers:
                    this._Containers_Object.CopyFieldsFrom<Container_CopyMask>(rhs: (Group<Container>)obj);
                    break;
                case OblivionMod_FieldIndex.Doors:
                    this._Doors_Object.CopyFieldsFrom<Door_CopyMask>(rhs: (Group<Door>)obj);
                    break;
                case OblivionMod_FieldIndex.Ingredients:
                    this._Ingredients_Object.CopyFieldsFrom<Ingredient_CopyMask>(rhs: (Group<Ingredient>)obj);
                    break;
                case OblivionMod_FieldIndex.Lights:
                    this._Lights_Object.CopyFieldsFrom<Light_CopyMask>(rhs: (Group<Light>)obj);
                    break;
                case OblivionMod_FieldIndex.Miscellaneous:
                    this._Miscellaneous_Object.CopyFieldsFrom<Miscellaneous_CopyMask>(rhs: (Group<Miscellaneous>)obj);
                    break;
                case OblivionMod_FieldIndex.Statics:
                    this._Statics_Object.CopyFieldsFrom<Static_CopyMask>(rhs: (Group<Static>)obj);
                    break;
                case OblivionMod_FieldIndex.Grasses:
                    this._Grasses_Object.CopyFieldsFrom<Grass_CopyMask>(rhs: (Group<Grass>)obj);
                    break;
                case OblivionMod_FieldIndex.Trees:
                    this._Trees_Object.CopyFieldsFrom<Tree_CopyMask>(rhs: (Group<Tree>)obj);
                    break;
                case OblivionMod_FieldIndex.Flora:
                    this._Flora_Object.CopyFieldsFrom<Flora_CopyMask>(rhs: (Group<Flora>)obj);
                    break;
                case OblivionMod_FieldIndex.Furnature:
                    this._Furnature_Object.CopyFieldsFrom<Furnature_CopyMask>(rhs: (Group<Furnature>)obj);
                    break;
                case OblivionMod_FieldIndex.Weapons:
                    this._Weapons_Object.CopyFieldsFrom<Weapon_CopyMask>(rhs: (Group<Weapon>)obj);
                    break;
                case OblivionMod_FieldIndex.Ammo:
                    this._Ammo_Object.CopyFieldsFrom<Ammo_CopyMask>(rhs: (Group<Ammo>)obj);
                    break;
                case OblivionMod_FieldIndex.NPCs:
                    this._NPCs_Object.CopyFieldsFrom<NPC_CopyMask>(rhs: (Group<NPC>)obj);
                    break;
                case OblivionMod_FieldIndex.Creatures:
                    this._Creatures_Object.CopyFieldsFrom<Creature_CopyMask>(rhs: (Group<Creature>)obj);
                    break;
                case OblivionMod_FieldIndex.LeveledCreatures:
                    this._LeveledCreatures_Object.CopyFieldsFrom<LeveledCreature_CopyMask>(rhs: (Group<LeveledCreature>)obj);
                    break;
                case OblivionMod_FieldIndex.SoulGems:
                    this._SoulGems_Object.CopyFieldsFrom<SoulGem_CopyMask>(rhs: (Group<SoulGem>)obj);
                    break;
                case OblivionMod_FieldIndex.Keys:
                    this._Keys_Object.CopyFieldsFrom<Key_CopyMask>(rhs: (Group<Key>)obj);
                    break;
                case OblivionMod_FieldIndex.Potions:
                    this._Potions_Object.CopyFieldsFrom<Potion_CopyMask>(rhs: (Group<Potion>)obj);
                    break;
                case OblivionMod_FieldIndex.Subspaces:
                    this._Subspaces_Object.CopyFieldsFrom<Subspace_CopyMask>(rhs: (Group<Subspace>)obj);
                    break;
                case OblivionMod_FieldIndex.SigilStones:
                    this._SigilStones_Object.CopyFieldsFrom<SigilStone_CopyMask>(rhs: (Group<SigilStone>)obj);
                    break;
                case OblivionMod_FieldIndex.LeveledItems:
                    this._LeveledItems_Object.CopyFieldsFrom<LeveledItem_CopyMask>(rhs: (Group<LeveledItem>)obj);
                    break;
                case OblivionMod_FieldIndex.Weathers:
                    this._Weathers_Object.CopyFieldsFrom<Weather_CopyMask>(rhs: (Group<Weather>)obj);
                    break;
                case OblivionMod_FieldIndex.Climates:
                    this._Climates_Object.CopyFieldsFrom<Climate_CopyMask>(rhs: (Group<Climate>)obj);
                    break;
                case OblivionMod_FieldIndex.Regions:
                    this._Regions_Object.CopyFieldsFrom<Region_CopyMask>(rhs: (Group<Region>)obj);
                    break;
                case OblivionMod_FieldIndex.Cells:
                    this._Cells_Object.CopyFieldsFrom<CellBlock_CopyMask>(rhs: (ListGroup<CellBlock>)obj);
                    break;
                case OblivionMod_FieldIndex.Worldspaces:
                    this._Worldspaces_Object.CopyFieldsFrom<Worldspace_CopyMask>(rhs: (Group<Worldspace>)obj);
                    break;
                case OblivionMod_FieldIndex.DialogTopics:
                    this._DialogTopics_Object.CopyFieldsFrom<DialogTopic_CopyMask>(rhs: (Group<DialogTopic>)obj);
                    break;
                case OblivionMod_FieldIndex.Quests:
                    this._Quests_Object.CopyFieldsFrom<Quest_CopyMask>(rhs: (Group<Quest>)obj);
                    break;
                case OblivionMod_FieldIndex.IdleAnimations:
                    this._IdleAnimations_Object.CopyFieldsFrom<IdleAnimation_CopyMask>(rhs: (Group<IdleAnimation>)obj);
                    break;
                case OblivionMod_FieldIndex.AIPackages:
                    this._AIPackages_Object.CopyFieldsFrom<AIPackage_CopyMask>(rhs: (Group<AIPackage>)obj);
                    break;
                case OblivionMod_FieldIndex.CombatStyles:
                    this._CombatStyles_Object.CopyFieldsFrom<CombatStyle_CopyMask>(rhs: (Group<CombatStyle>)obj);
                    break;
                case OblivionMod_FieldIndex.LoadScreens:
                    this._LoadScreens_Object.CopyFieldsFrom<LoadScreen_CopyMask>(rhs: (Group<LoadScreen>)obj);
                    break;
                case OblivionMod_FieldIndex.LeveledSpells:
                    this._LeveledSpells_Object.CopyFieldsFrom<LeveledSpell_CopyMask>(rhs: (Group<LeveledSpell>)obj);
                    break;
                case OblivionMod_FieldIndex.AnimatedObjects:
                    this._AnimatedObjects_Object.CopyFieldsFrom<AnimatedObject_CopyMask>(rhs: (Group<AnimatedObject>)obj);
                    break;
                case OblivionMod_FieldIndex.Waters:
                    this._Waters_Object.CopyFieldsFrom<Water_CopyMask>(rhs: (Group<Water>)obj);
                    break;
                case OblivionMod_FieldIndex.EffectShaders:
                    this._EffectShaders_Object.CopyFieldsFrom<EffectShader_CopyMask>(rhs: (Group<EffectShader>)obj);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            OblivionModCommon.Clear(this, cmds);
        }


        public static OblivionMod Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new OblivionMod();
            foreach (var pair in fields)
            {
                CopyInInternal_OblivionMod(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_OblivionMod(OblivionMod obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out OblivionMod_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    obj.TES4.CopyFieldsFrom(rhs: (TES4)pair.Value);
                    break;
                case OblivionMod_FieldIndex.GameSettings:
                    obj._GameSettings_Object.CopyFieldsFrom<GameSetting_CopyMask>(rhs: (Group<GameSetting>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Globals:
                    obj._Globals_Object.CopyFieldsFrom<Global_CopyMask>(rhs: (Group<Global>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Classes:
                    obj._Classes_Object.CopyFieldsFrom<Class_CopyMask>(rhs: (Group<Class>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Factions:
                    obj._Factions_Object.CopyFieldsFrom<Faction_CopyMask>(rhs: (Group<Faction>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    obj._Hairs_Object.CopyFieldsFrom<Hair_CopyMask>(rhs: (Group<Hair>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    obj._Eyes_Object.CopyFieldsFrom<Eye_CopyMask>(rhs: (Group<Eye>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Races:
                    obj._Races_Object.CopyFieldsFrom<Race_CopyMask>(rhs: (Group<Race>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    obj._Sounds_Object.CopyFieldsFrom<Sound_CopyMask>(rhs: (Group<Sound>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Skills:
                    obj._Skills_Object.CopyFieldsFrom<SkillRecord_CopyMask>(rhs: (Group<SkillRecord>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.MagicEffects:
                    obj._MagicEffects_Object.CopyFieldsFrom<MagicEffect_CopyMask>(rhs: (Group<MagicEffect>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Scripts:
                    obj._Scripts_Object.CopyFieldsFrom<Script_CopyMask>(rhs: (Group<Script>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.LandTextures:
                    obj._LandTextures_Object.CopyFieldsFrom<LandTexture_CopyMask>(rhs: (Group<LandTexture>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Enchantments:
                    obj._Enchantments_Object.CopyFieldsFrom<Enchantment_CopyMask>(rhs: (Group<Enchantment>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Spells:
                    obj._Spells_Object.CopyFieldsFrom<SpellUnleveled_CopyMask>(rhs: (Group<SpellUnleveled>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Birthsigns:
                    obj._Birthsigns_Object.CopyFieldsFrom<Birthsign_CopyMask>(rhs: (Group<Birthsign>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Activators:
                    obj._Activators_Object.CopyFieldsFrom<Activator_CopyMask>(rhs: (Group<Activator>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    obj._AlchemicalApparatus_Object.CopyFieldsFrom<AlchemicalApparatus_CopyMask>(rhs: (Group<AlchemicalApparatus>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Armors:
                    obj._Armors_Object.CopyFieldsFrom<Armor_CopyMask>(rhs: (Group<Armor>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Books:
                    obj._Books_Object.CopyFieldsFrom<Book_CopyMask>(rhs: (Group<Book>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Clothes:
                    obj._Clothes_Object.CopyFieldsFrom<Clothing_CopyMask>(rhs: (Group<Clothing>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Containers:
                    obj._Containers_Object.CopyFieldsFrom<Container_CopyMask>(rhs: (Group<Container>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Doors:
                    obj._Doors_Object.CopyFieldsFrom<Door_CopyMask>(rhs: (Group<Door>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Ingredients:
                    obj._Ingredients_Object.CopyFieldsFrom<Ingredient_CopyMask>(rhs: (Group<Ingredient>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Lights:
                    obj._Lights_Object.CopyFieldsFrom<Light_CopyMask>(rhs: (Group<Light>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Miscellaneous:
                    obj._Miscellaneous_Object.CopyFieldsFrom<Miscellaneous_CopyMask>(rhs: (Group<Miscellaneous>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Statics:
                    obj._Statics_Object.CopyFieldsFrom<Static_CopyMask>(rhs: (Group<Static>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Grasses:
                    obj._Grasses_Object.CopyFieldsFrom<Grass_CopyMask>(rhs: (Group<Grass>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Trees:
                    obj._Trees_Object.CopyFieldsFrom<Tree_CopyMask>(rhs: (Group<Tree>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Flora:
                    obj._Flora_Object.CopyFieldsFrom<Flora_CopyMask>(rhs: (Group<Flora>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Furnature:
                    obj._Furnature_Object.CopyFieldsFrom<Furnature_CopyMask>(rhs: (Group<Furnature>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Weapons:
                    obj._Weapons_Object.CopyFieldsFrom<Weapon_CopyMask>(rhs: (Group<Weapon>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Ammo:
                    obj._Ammo_Object.CopyFieldsFrom<Ammo_CopyMask>(rhs: (Group<Ammo>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.NPCs:
                    obj._NPCs_Object.CopyFieldsFrom<NPC_CopyMask>(rhs: (Group<NPC>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Creatures:
                    obj._Creatures_Object.CopyFieldsFrom<Creature_CopyMask>(rhs: (Group<Creature>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.LeveledCreatures:
                    obj._LeveledCreatures_Object.CopyFieldsFrom<LeveledCreature_CopyMask>(rhs: (Group<LeveledCreature>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.SoulGems:
                    obj._SoulGems_Object.CopyFieldsFrom<SoulGem_CopyMask>(rhs: (Group<SoulGem>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Keys:
                    obj._Keys_Object.CopyFieldsFrom<Key_CopyMask>(rhs: (Group<Key>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Potions:
                    obj._Potions_Object.CopyFieldsFrom<Potion_CopyMask>(rhs: (Group<Potion>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Subspaces:
                    obj._Subspaces_Object.CopyFieldsFrom<Subspace_CopyMask>(rhs: (Group<Subspace>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.SigilStones:
                    obj._SigilStones_Object.CopyFieldsFrom<SigilStone_CopyMask>(rhs: (Group<SigilStone>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.LeveledItems:
                    obj._LeveledItems_Object.CopyFieldsFrom<LeveledItem_CopyMask>(rhs: (Group<LeveledItem>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Weathers:
                    obj._Weathers_Object.CopyFieldsFrom<Weather_CopyMask>(rhs: (Group<Weather>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Climates:
                    obj._Climates_Object.CopyFieldsFrom<Climate_CopyMask>(rhs: (Group<Climate>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Regions:
                    obj._Regions_Object.CopyFieldsFrom<Region_CopyMask>(rhs: (Group<Region>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Cells:
                    obj._Cells_Object.CopyFieldsFrom<CellBlock_CopyMask>(rhs: (ListGroup<CellBlock>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Worldspaces:
                    obj._Worldspaces_Object.CopyFieldsFrom<Worldspace_CopyMask>(rhs: (Group<Worldspace>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.DialogTopics:
                    obj._DialogTopics_Object.CopyFieldsFrom<DialogTopic_CopyMask>(rhs: (Group<DialogTopic>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Quests:
                    obj._Quests_Object.CopyFieldsFrom<Quest_CopyMask>(rhs: (Group<Quest>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.IdleAnimations:
                    obj._IdleAnimations_Object.CopyFieldsFrom<IdleAnimation_CopyMask>(rhs: (Group<IdleAnimation>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.AIPackages:
                    obj._AIPackages_Object.CopyFieldsFrom<AIPackage_CopyMask>(rhs: (Group<AIPackage>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.CombatStyles:
                    obj._CombatStyles_Object.CopyFieldsFrom<CombatStyle_CopyMask>(rhs: (Group<CombatStyle>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.LoadScreens:
                    obj._LoadScreens_Object.CopyFieldsFrom<LoadScreen_CopyMask>(rhs: (Group<LoadScreen>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.LeveledSpells:
                    obj._LeveledSpells_Object.CopyFieldsFrom<LeveledSpell_CopyMask>(rhs: (Group<LeveledSpell>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.AnimatedObjects:
                    obj._AnimatedObjects_Object.CopyFieldsFrom<AnimatedObject_CopyMask>(rhs: (Group<AnimatedObject>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Waters:
                    obj._Waters_Object.CopyFieldsFrom<Water_CopyMask>(rhs: (Group<Water>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.EffectShaders:
                    obj._EffectShaders_Object.CopyFieldsFrom<EffectShader_CopyMask>(rhs: (Group<EffectShader>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, OblivionMod obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IOblivionMod : IOblivionModGetter, ILoquiClass<IOblivionMod, IOblivionModGetter>, ILoquiClass<OblivionMod, IOblivionModGetter>
    {
    }

    public partial interface IOblivionModGetter : ILoquiObject
    {
        #region TES4
        TES4 TES4 { get; }
        bool TES4_IsSet { get; }

        #endregion
        #region GameSettings
        Group<GameSetting> GameSettings { get; }
        #endregion
        #region Globals
        Group<Global> Globals { get; }
        #endregion
        #region Classes
        Group<Class> Classes { get; }
        #endregion
        #region Factions
        Group<Faction> Factions { get; }
        #endregion
        #region Hairs
        Group<Hair> Hairs { get; }
        #endregion
        #region Eyes
        Group<Eye> Eyes { get; }
        #endregion
        #region Races
        Group<Race> Races { get; }
        #endregion
        #region Sounds
        Group<Sound> Sounds { get; }
        #endregion
        #region Skills
        Group<SkillRecord> Skills { get; }
        #endregion
        #region MagicEffects
        Group<MagicEffect> MagicEffects { get; }
        #endregion
        #region Scripts
        Group<Script> Scripts { get; }
        #endregion
        #region LandTextures
        Group<LandTexture> LandTextures { get; }
        #endregion
        #region Enchantments
        Group<Enchantment> Enchantments { get; }
        #endregion
        #region Spells
        Group<SpellUnleveled> Spells { get; }
        #endregion
        #region Birthsigns
        Group<Birthsign> Birthsigns { get; }
        #endregion
        #region Activators
        Group<Activator> Activators { get; }
        #endregion
        #region AlchemicalApparatus
        Group<AlchemicalApparatus> AlchemicalApparatus { get; }
        #endregion
        #region Armors
        Group<Armor> Armors { get; }
        #endregion
        #region Books
        Group<Book> Books { get; }
        #endregion
        #region Clothes
        Group<Clothing> Clothes { get; }
        #endregion
        #region Containers
        Group<Container> Containers { get; }
        #endregion
        #region Doors
        Group<Door> Doors { get; }
        #endregion
        #region Ingredients
        Group<Ingredient> Ingredients { get; }
        #endregion
        #region Lights
        Group<Light> Lights { get; }
        #endregion
        #region Miscellaneous
        Group<Miscellaneous> Miscellaneous { get; }
        #endregion
        #region Statics
        Group<Static> Statics { get; }
        #endregion
        #region Grasses
        Group<Grass> Grasses { get; }
        #endregion
        #region Trees
        Group<Tree> Trees { get; }
        #endregion
        #region Flora
        Group<Flora> Flora { get; }
        #endregion
        #region Furnature
        Group<Furnature> Furnature { get; }
        #endregion
        #region Weapons
        Group<Weapon> Weapons { get; }
        #endregion
        #region Ammo
        Group<Ammo> Ammo { get; }
        #endregion
        #region NPCs
        Group<NPC> NPCs { get; }
        #endregion
        #region Creatures
        Group<Creature> Creatures { get; }
        #endregion
        #region LeveledCreatures
        Group<LeveledCreature> LeveledCreatures { get; }
        #endregion
        #region SoulGems
        Group<SoulGem> SoulGems { get; }
        #endregion
        #region Keys
        Group<Key> Keys { get; }
        #endregion
        #region Potions
        Group<Potion> Potions { get; }
        #endregion
        #region Subspaces
        Group<Subspace> Subspaces { get; }
        #endregion
        #region SigilStones
        Group<SigilStone> SigilStones { get; }
        #endregion
        #region LeveledItems
        Group<LeveledItem> LeveledItems { get; }
        #endregion
        #region Weathers
        Group<Weather> Weathers { get; }
        #endregion
        #region Climates
        Group<Climate> Climates { get; }
        #endregion
        #region Regions
        Group<Region> Regions { get; }
        #endregion
        #region Cells
        ListGroup<CellBlock> Cells { get; }
        #endregion
        #region Worldspaces
        Group<Worldspace> Worldspaces { get; }
        #endregion
        #region DialogTopics
        Group<DialogTopic> DialogTopics { get; }
        #endregion
        #region Quests
        Group<Quest> Quests { get; }
        #endregion
        #region IdleAnimations
        Group<IdleAnimation> IdleAnimations { get; }
        #endregion
        #region AIPackages
        Group<AIPackage> AIPackages { get; }
        #endregion
        #region CombatStyles
        Group<CombatStyle> CombatStyles { get; }
        #endregion
        #region LoadScreens
        Group<LoadScreen> LoadScreens { get; }
        #endregion
        #region LeveledSpells
        Group<LeveledSpell> LeveledSpells { get; }
        #endregion
        #region AnimatedObjects
        Group<AnimatedObject> AnimatedObjects { get; }
        #endregion
        #region Waters
        Group<Water> Waters { get; }
        #endregion
        #region EffectShaders
        Group<EffectShader> EffectShaders { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum OblivionMod_FieldIndex
    {
        TES4 = 0,
        GameSettings = 1,
        Globals = 2,
        Classes = 3,
        Factions = 4,
        Hairs = 5,
        Eyes = 6,
        Races = 7,
        Sounds = 8,
        Skills = 9,
        MagicEffects = 10,
        Scripts = 11,
        LandTextures = 12,
        Enchantments = 13,
        Spells = 14,
        Birthsigns = 15,
        Activators = 16,
        AlchemicalApparatus = 17,
        Armors = 18,
        Books = 19,
        Clothes = 20,
        Containers = 21,
        Doors = 22,
        Ingredients = 23,
        Lights = 24,
        Miscellaneous = 25,
        Statics = 26,
        Grasses = 27,
        Trees = 28,
        Flora = 29,
        Furnature = 30,
        Weapons = 31,
        Ammo = 32,
        NPCs = 33,
        Creatures = 34,
        LeveledCreatures = 35,
        SoulGems = 36,
        Keys = 37,
        Potions = 38,
        Subspaces = 39,
        SigilStones = 40,
        LeveledItems = 41,
        Weathers = 42,
        Climates = 43,
        Regions = 44,
        Cells = 45,
        Worldspaces = 46,
        DialogTopics = 47,
        Quests = 48,
        IdleAnimations = 49,
        AIPackages = 50,
        CombatStyles = 51,
        LoadScreens = 52,
        LeveledSpells = 53,
        AnimatedObjects = 54,
        Waters = 55,
        EffectShaders = 56,
    }
    #endregion

    #region Registration
    public class OblivionMod_Registration : ILoquiRegistration
    {
        public static readonly OblivionMod_Registration Instance = new OblivionMod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 3,
            version: 0);

        public const string GUID = "b6f626df-b164-466b-960a-1639d88f66bc";

        public const ushort AdditionalFieldCount = 57;

        public const ushort FieldCount = 57;

        public static readonly Type MaskType = typeof(OblivionMod_Mask<>);

        public static readonly Type ErrorMaskType = typeof(OblivionMod_ErrorMask);

        public static readonly Type ClassType = typeof(OblivionMod);

        public static readonly Type GetterType = typeof(IOblivionModGetter);

        public static readonly Type SetterType = typeof(IOblivionMod);

        public static readonly Type CommonType = typeof(OblivionModCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.OblivionMod";

        public const string Name = "OblivionMod";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TES4":
                    return (ushort)OblivionMod_FieldIndex.TES4;
                case "GAMESETTINGS":
                    return (ushort)OblivionMod_FieldIndex.GameSettings;
                case "GLOBALS":
                    return (ushort)OblivionMod_FieldIndex.Globals;
                case "CLASSES":
                    return (ushort)OblivionMod_FieldIndex.Classes;
                case "FACTIONS":
                    return (ushort)OblivionMod_FieldIndex.Factions;
                case "HAIRS":
                    return (ushort)OblivionMod_FieldIndex.Hairs;
                case "EYES":
                    return (ushort)OblivionMod_FieldIndex.Eyes;
                case "RACES":
                    return (ushort)OblivionMod_FieldIndex.Races;
                case "SOUNDS":
                    return (ushort)OblivionMod_FieldIndex.Sounds;
                case "SKILLS":
                    return (ushort)OblivionMod_FieldIndex.Skills;
                case "MAGICEFFECTS":
                    return (ushort)OblivionMod_FieldIndex.MagicEffects;
                case "SCRIPTS":
                    return (ushort)OblivionMod_FieldIndex.Scripts;
                case "LANDTEXTURES":
                    return (ushort)OblivionMod_FieldIndex.LandTextures;
                case "ENCHANTMENTS":
                    return (ushort)OblivionMod_FieldIndex.Enchantments;
                case "SPELLS":
                    return (ushort)OblivionMod_FieldIndex.Spells;
                case "BIRTHSIGNS":
                    return (ushort)OblivionMod_FieldIndex.Birthsigns;
                case "ACTIVATORS":
                    return (ushort)OblivionMod_FieldIndex.Activators;
                case "ALCHEMICALAPPARATUS":
                    return (ushort)OblivionMod_FieldIndex.AlchemicalApparatus;
                case "ARMORS":
                    return (ushort)OblivionMod_FieldIndex.Armors;
                case "BOOKS":
                    return (ushort)OblivionMod_FieldIndex.Books;
                case "CLOTHES":
                    return (ushort)OblivionMod_FieldIndex.Clothes;
                case "CONTAINERS":
                    return (ushort)OblivionMod_FieldIndex.Containers;
                case "DOORS":
                    return (ushort)OblivionMod_FieldIndex.Doors;
                case "INGREDIENTS":
                    return (ushort)OblivionMod_FieldIndex.Ingredients;
                case "LIGHTS":
                    return (ushort)OblivionMod_FieldIndex.Lights;
                case "MISCELLANEOUS":
                    return (ushort)OblivionMod_FieldIndex.Miscellaneous;
                case "STATICS":
                    return (ushort)OblivionMod_FieldIndex.Statics;
                case "GRASSES":
                    return (ushort)OblivionMod_FieldIndex.Grasses;
                case "TREES":
                    return (ushort)OblivionMod_FieldIndex.Trees;
                case "FLORA":
                    return (ushort)OblivionMod_FieldIndex.Flora;
                case "FURNATURE":
                    return (ushort)OblivionMod_FieldIndex.Furnature;
                case "WEAPONS":
                    return (ushort)OblivionMod_FieldIndex.Weapons;
                case "AMMO":
                    return (ushort)OblivionMod_FieldIndex.Ammo;
                case "NPCS":
                    return (ushort)OblivionMod_FieldIndex.NPCs;
                case "CREATURES":
                    return (ushort)OblivionMod_FieldIndex.Creatures;
                case "LEVELEDCREATURES":
                    return (ushort)OblivionMod_FieldIndex.LeveledCreatures;
                case "SOULGEMS":
                    return (ushort)OblivionMod_FieldIndex.SoulGems;
                case "KEYS":
                    return (ushort)OblivionMod_FieldIndex.Keys;
                case "POTIONS":
                    return (ushort)OblivionMod_FieldIndex.Potions;
                case "SUBSPACES":
                    return (ushort)OblivionMod_FieldIndex.Subspaces;
                case "SIGILSTONES":
                    return (ushort)OblivionMod_FieldIndex.SigilStones;
                case "LEVELEDITEMS":
                    return (ushort)OblivionMod_FieldIndex.LeveledItems;
                case "WEATHERS":
                    return (ushort)OblivionMod_FieldIndex.Weathers;
                case "CLIMATES":
                    return (ushort)OblivionMod_FieldIndex.Climates;
                case "REGIONS":
                    return (ushort)OblivionMod_FieldIndex.Regions;
                case "CELLS":
                    return (ushort)OblivionMod_FieldIndex.Cells;
                case "WORLDSPACES":
                    return (ushort)OblivionMod_FieldIndex.Worldspaces;
                case "DIALOGTOPICS":
                    return (ushort)OblivionMod_FieldIndex.DialogTopics;
                case "QUESTS":
                    return (ushort)OblivionMod_FieldIndex.Quests;
                case "IDLEANIMATIONS":
                    return (ushort)OblivionMod_FieldIndex.IdleAnimations;
                case "AIPACKAGES":
                    return (ushort)OblivionMod_FieldIndex.AIPackages;
                case "COMBATSTYLES":
                    return (ushort)OblivionMod_FieldIndex.CombatStyles;
                case "LOADSCREENS":
                    return (ushort)OblivionMod_FieldIndex.LoadScreens;
                case "LEVELEDSPELLS":
                    return (ushort)OblivionMod_FieldIndex.LeveledSpells;
                case "ANIMATEDOBJECTS":
                    return (ushort)OblivionMod_FieldIndex.AnimatedObjects;
                case "WATERS":
                    return (ushort)OblivionMod_FieldIndex.Waters;
                case "EFFECTSHADERS":
                    return (ushort)OblivionMod_FieldIndex.EffectShaders;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                case OblivionMod_FieldIndex.Creatures:
                case OblivionMod_FieldIndex.LeveledCreatures:
                case OblivionMod_FieldIndex.SoulGems:
                case OblivionMod_FieldIndex.Keys:
                case OblivionMod_FieldIndex.Potions:
                case OblivionMod_FieldIndex.Subspaces:
                case OblivionMod_FieldIndex.SigilStones:
                case OblivionMod_FieldIndex.LeveledItems:
                case OblivionMod_FieldIndex.Weathers:
                case OblivionMod_FieldIndex.Climates:
                case OblivionMod_FieldIndex.Regions:
                case OblivionMod_FieldIndex.Cells:
                case OblivionMod_FieldIndex.Worldspaces:
                case OblivionMod_FieldIndex.DialogTopics:
                case OblivionMod_FieldIndex.Quests:
                case OblivionMod_FieldIndex.IdleAnimations:
                case OblivionMod_FieldIndex.AIPackages:
                case OblivionMod_FieldIndex.CombatStyles:
                case OblivionMod_FieldIndex.LoadScreens:
                case OblivionMod_FieldIndex.LeveledSpells:
                case OblivionMod_FieldIndex.AnimatedObjects:
                case OblivionMod_FieldIndex.Waters:
                case OblivionMod_FieldIndex.EffectShaders:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                case OblivionMod_FieldIndex.Creatures:
                case OblivionMod_FieldIndex.LeveledCreatures:
                case OblivionMod_FieldIndex.SoulGems:
                case OblivionMod_FieldIndex.Keys:
                case OblivionMod_FieldIndex.Potions:
                case OblivionMod_FieldIndex.Subspaces:
                case OblivionMod_FieldIndex.SigilStones:
                case OblivionMod_FieldIndex.LeveledItems:
                case OblivionMod_FieldIndex.Weathers:
                case OblivionMod_FieldIndex.Climates:
                case OblivionMod_FieldIndex.Regions:
                case OblivionMod_FieldIndex.Cells:
                case OblivionMod_FieldIndex.Worldspaces:
                case OblivionMod_FieldIndex.DialogTopics:
                case OblivionMod_FieldIndex.Quests:
                case OblivionMod_FieldIndex.IdleAnimations:
                case OblivionMod_FieldIndex.AIPackages:
                case OblivionMod_FieldIndex.CombatStyles:
                case OblivionMod_FieldIndex.LoadScreens:
                case OblivionMod_FieldIndex.LeveledSpells:
                case OblivionMod_FieldIndex.AnimatedObjects:
                case OblivionMod_FieldIndex.Waters:
                case OblivionMod_FieldIndex.EffectShaders:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                case OblivionMod_FieldIndex.Creatures:
                case OblivionMod_FieldIndex.LeveledCreatures:
                case OblivionMod_FieldIndex.SoulGems:
                case OblivionMod_FieldIndex.Keys:
                case OblivionMod_FieldIndex.Potions:
                case OblivionMod_FieldIndex.Subspaces:
                case OblivionMod_FieldIndex.SigilStones:
                case OblivionMod_FieldIndex.LeveledItems:
                case OblivionMod_FieldIndex.Weathers:
                case OblivionMod_FieldIndex.Climates:
                case OblivionMod_FieldIndex.Regions:
                case OblivionMod_FieldIndex.Cells:
                case OblivionMod_FieldIndex.Worldspaces:
                case OblivionMod_FieldIndex.DialogTopics:
                case OblivionMod_FieldIndex.Quests:
                case OblivionMod_FieldIndex.IdleAnimations:
                case OblivionMod_FieldIndex.AIPackages:
                case OblivionMod_FieldIndex.CombatStyles:
                case OblivionMod_FieldIndex.LoadScreens:
                case OblivionMod_FieldIndex.LeveledSpells:
                case OblivionMod_FieldIndex.AnimatedObjects:
                case OblivionMod_FieldIndex.Waters:
                case OblivionMod_FieldIndex.EffectShaders:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return "TES4";
                case OblivionMod_FieldIndex.GameSettings:
                    return "GameSettings";
                case OblivionMod_FieldIndex.Globals:
                    return "Globals";
                case OblivionMod_FieldIndex.Classes:
                    return "Classes";
                case OblivionMod_FieldIndex.Factions:
                    return "Factions";
                case OblivionMod_FieldIndex.Hairs:
                    return "Hairs";
                case OblivionMod_FieldIndex.Eyes:
                    return "Eyes";
                case OblivionMod_FieldIndex.Races:
                    return "Races";
                case OblivionMod_FieldIndex.Sounds:
                    return "Sounds";
                case OblivionMod_FieldIndex.Skills:
                    return "Skills";
                case OblivionMod_FieldIndex.MagicEffects:
                    return "MagicEffects";
                case OblivionMod_FieldIndex.Scripts:
                    return "Scripts";
                case OblivionMod_FieldIndex.LandTextures:
                    return "LandTextures";
                case OblivionMod_FieldIndex.Enchantments:
                    return "Enchantments";
                case OblivionMod_FieldIndex.Spells:
                    return "Spells";
                case OblivionMod_FieldIndex.Birthsigns:
                    return "Birthsigns";
                case OblivionMod_FieldIndex.Activators:
                    return "Activators";
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    return "AlchemicalApparatus";
                case OblivionMod_FieldIndex.Armors:
                    return "Armors";
                case OblivionMod_FieldIndex.Books:
                    return "Books";
                case OblivionMod_FieldIndex.Clothes:
                    return "Clothes";
                case OblivionMod_FieldIndex.Containers:
                    return "Containers";
                case OblivionMod_FieldIndex.Doors:
                    return "Doors";
                case OblivionMod_FieldIndex.Ingredients:
                    return "Ingredients";
                case OblivionMod_FieldIndex.Lights:
                    return "Lights";
                case OblivionMod_FieldIndex.Miscellaneous:
                    return "Miscellaneous";
                case OblivionMod_FieldIndex.Statics:
                    return "Statics";
                case OblivionMod_FieldIndex.Grasses:
                    return "Grasses";
                case OblivionMod_FieldIndex.Trees:
                    return "Trees";
                case OblivionMod_FieldIndex.Flora:
                    return "Flora";
                case OblivionMod_FieldIndex.Furnature:
                    return "Furnature";
                case OblivionMod_FieldIndex.Weapons:
                    return "Weapons";
                case OblivionMod_FieldIndex.Ammo:
                    return "Ammo";
                case OblivionMod_FieldIndex.NPCs:
                    return "NPCs";
                case OblivionMod_FieldIndex.Creatures:
                    return "Creatures";
                case OblivionMod_FieldIndex.LeveledCreatures:
                    return "LeveledCreatures";
                case OblivionMod_FieldIndex.SoulGems:
                    return "SoulGems";
                case OblivionMod_FieldIndex.Keys:
                    return "Keys";
                case OblivionMod_FieldIndex.Potions:
                    return "Potions";
                case OblivionMod_FieldIndex.Subspaces:
                    return "Subspaces";
                case OblivionMod_FieldIndex.SigilStones:
                    return "SigilStones";
                case OblivionMod_FieldIndex.LeveledItems:
                    return "LeveledItems";
                case OblivionMod_FieldIndex.Weathers:
                    return "Weathers";
                case OblivionMod_FieldIndex.Climates:
                    return "Climates";
                case OblivionMod_FieldIndex.Regions:
                    return "Regions";
                case OblivionMod_FieldIndex.Cells:
                    return "Cells";
                case OblivionMod_FieldIndex.Worldspaces:
                    return "Worldspaces";
                case OblivionMod_FieldIndex.DialogTopics:
                    return "DialogTopics";
                case OblivionMod_FieldIndex.Quests:
                    return "Quests";
                case OblivionMod_FieldIndex.IdleAnimations:
                    return "IdleAnimations";
                case OblivionMod_FieldIndex.AIPackages:
                    return "AIPackages";
                case OblivionMod_FieldIndex.CombatStyles:
                    return "CombatStyles";
                case OblivionMod_FieldIndex.LoadScreens:
                    return "LoadScreens";
                case OblivionMod_FieldIndex.LeveledSpells:
                    return "LeveledSpells";
                case OblivionMod_FieldIndex.AnimatedObjects:
                    return "AnimatedObjects";
                case OblivionMod_FieldIndex.Waters:
                    return "Waters";
                case OblivionMod_FieldIndex.EffectShaders:
                    return "EffectShaders";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                case OblivionMod_FieldIndex.Creatures:
                case OblivionMod_FieldIndex.LeveledCreatures:
                case OblivionMod_FieldIndex.SoulGems:
                case OblivionMod_FieldIndex.Keys:
                case OblivionMod_FieldIndex.Potions:
                case OblivionMod_FieldIndex.Subspaces:
                case OblivionMod_FieldIndex.SigilStones:
                case OblivionMod_FieldIndex.LeveledItems:
                case OblivionMod_FieldIndex.Weathers:
                case OblivionMod_FieldIndex.Climates:
                case OblivionMod_FieldIndex.Regions:
                case OblivionMod_FieldIndex.Cells:
                case OblivionMod_FieldIndex.Worldspaces:
                case OblivionMod_FieldIndex.DialogTopics:
                case OblivionMod_FieldIndex.Quests:
                case OblivionMod_FieldIndex.IdleAnimations:
                case OblivionMod_FieldIndex.AIPackages:
                case OblivionMod_FieldIndex.CombatStyles:
                case OblivionMod_FieldIndex.LoadScreens:
                case OblivionMod_FieldIndex.LeveledSpells:
                case OblivionMod_FieldIndex.AnimatedObjects:
                case OblivionMod_FieldIndex.Waters:
                case OblivionMod_FieldIndex.EffectShaders:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                case OblivionMod_FieldIndex.Cells:
                    return true;
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                case OblivionMod_FieldIndex.Creatures:
                case OblivionMod_FieldIndex.LeveledCreatures:
                case OblivionMod_FieldIndex.SoulGems:
                case OblivionMod_FieldIndex.Keys:
                case OblivionMod_FieldIndex.Potions:
                case OblivionMod_FieldIndex.Subspaces:
                case OblivionMod_FieldIndex.SigilStones:
                case OblivionMod_FieldIndex.LeveledItems:
                case OblivionMod_FieldIndex.Weathers:
                case OblivionMod_FieldIndex.Climates:
                case OblivionMod_FieldIndex.Regions:
                case OblivionMod_FieldIndex.Worldspaces:
                case OblivionMod_FieldIndex.DialogTopics:
                case OblivionMod_FieldIndex.Quests:
                case OblivionMod_FieldIndex.IdleAnimations:
                case OblivionMod_FieldIndex.AIPackages:
                case OblivionMod_FieldIndex.CombatStyles:
                case OblivionMod_FieldIndex.LoadScreens:
                case OblivionMod_FieldIndex.LeveledSpells:
                case OblivionMod_FieldIndex.AnimatedObjects:
                case OblivionMod_FieldIndex.Waters:
                case OblivionMod_FieldIndex.EffectShaders:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return typeof(TES4);
                case OblivionMod_FieldIndex.GameSettings:
                    return typeof(Group<GameSetting>);
                case OblivionMod_FieldIndex.Globals:
                    return typeof(Group<Global>);
                case OblivionMod_FieldIndex.Classes:
                    return typeof(Group<Class>);
                case OblivionMod_FieldIndex.Factions:
                    return typeof(Group<Faction>);
                case OblivionMod_FieldIndex.Hairs:
                    return typeof(Group<Hair>);
                case OblivionMod_FieldIndex.Eyes:
                    return typeof(Group<Eye>);
                case OblivionMod_FieldIndex.Races:
                    return typeof(Group<Race>);
                case OblivionMod_FieldIndex.Sounds:
                    return typeof(Group<Sound>);
                case OblivionMod_FieldIndex.Skills:
                    return typeof(Group<SkillRecord>);
                case OblivionMod_FieldIndex.MagicEffects:
                    return typeof(Group<MagicEffect>);
                case OblivionMod_FieldIndex.Scripts:
                    return typeof(Group<Script>);
                case OblivionMod_FieldIndex.LandTextures:
                    return typeof(Group<LandTexture>);
                case OblivionMod_FieldIndex.Enchantments:
                    return typeof(Group<Enchantment>);
                case OblivionMod_FieldIndex.Spells:
                    return typeof(Group<SpellUnleveled>);
                case OblivionMod_FieldIndex.Birthsigns:
                    return typeof(Group<Birthsign>);
                case OblivionMod_FieldIndex.Activators:
                    return typeof(Group<Activator>);
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    return typeof(Group<AlchemicalApparatus>);
                case OblivionMod_FieldIndex.Armors:
                    return typeof(Group<Armor>);
                case OblivionMod_FieldIndex.Books:
                    return typeof(Group<Book>);
                case OblivionMod_FieldIndex.Clothes:
                    return typeof(Group<Clothing>);
                case OblivionMod_FieldIndex.Containers:
                    return typeof(Group<Container>);
                case OblivionMod_FieldIndex.Doors:
                    return typeof(Group<Door>);
                case OblivionMod_FieldIndex.Ingredients:
                    return typeof(Group<Ingredient>);
                case OblivionMod_FieldIndex.Lights:
                    return typeof(Group<Light>);
                case OblivionMod_FieldIndex.Miscellaneous:
                    return typeof(Group<Miscellaneous>);
                case OblivionMod_FieldIndex.Statics:
                    return typeof(Group<Static>);
                case OblivionMod_FieldIndex.Grasses:
                    return typeof(Group<Grass>);
                case OblivionMod_FieldIndex.Trees:
                    return typeof(Group<Tree>);
                case OblivionMod_FieldIndex.Flora:
                    return typeof(Group<Flora>);
                case OblivionMod_FieldIndex.Furnature:
                    return typeof(Group<Furnature>);
                case OblivionMod_FieldIndex.Weapons:
                    return typeof(Group<Weapon>);
                case OblivionMod_FieldIndex.Ammo:
                    return typeof(Group<Ammo>);
                case OblivionMod_FieldIndex.NPCs:
                    return typeof(Group<NPC>);
                case OblivionMod_FieldIndex.Creatures:
                    return typeof(Group<Creature>);
                case OblivionMod_FieldIndex.LeveledCreatures:
                    return typeof(Group<LeveledCreature>);
                case OblivionMod_FieldIndex.SoulGems:
                    return typeof(Group<SoulGem>);
                case OblivionMod_FieldIndex.Keys:
                    return typeof(Group<Key>);
                case OblivionMod_FieldIndex.Potions:
                    return typeof(Group<Potion>);
                case OblivionMod_FieldIndex.Subspaces:
                    return typeof(Group<Subspace>);
                case OblivionMod_FieldIndex.SigilStones:
                    return typeof(Group<SigilStone>);
                case OblivionMod_FieldIndex.LeveledItems:
                    return typeof(Group<LeveledItem>);
                case OblivionMod_FieldIndex.Weathers:
                    return typeof(Group<Weather>);
                case OblivionMod_FieldIndex.Climates:
                    return typeof(Group<Climate>);
                case OblivionMod_FieldIndex.Regions:
                    return typeof(Group<Region>);
                case OblivionMod_FieldIndex.Cells:
                    return typeof(ListGroup<CellBlock>);
                case OblivionMod_FieldIndex.Worldspaces:
                    return typeof(Group<Worldspace>);
                case OblivionMod_FieldIndex.DialogTopics:
                    return typeof(Group<DialogTopic>);
                case OblivionMod_FieldIndex.Quests:
                    return typeof(Group<Quest>);
                case OblivionMod_FieldIndex.IdleAnimations:
                    return typeof(Group<IdleAnimation>);
                case OblivionMod_FieldIndex.AIPackages:
                    return typeof(Group<AIPackage>);
                case OblivionMod_FieldIndex.CombatStyles:
                    return typeof(Group<CombatStyle>);
                case OblivionMod_FieldIndex.LoadScreens:
                    return typeof(Group<LoadScreen>);
                case OblivionMod_FieldIndex.LeveledSpells:
                    return typeof(Group<LeveledSpell>);
                case OblivionMod_FieldIndex.AnimatedObjects:
                    return typeof(Group<AnimatedObject>);
                case OblivionMod_FieldIndex.Waters:
                    return typeof(Group<Water>);
                case OblivionMod_FieldIndex.EffectShaders:
                    return typeof(Group<EffectShader>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType TES4_HEADER = new RecordType("TES4");
        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType GLOB_HEADER = new RecordType("GLOB");
        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType HAIR_HEADER = new RecordType("HAIR");
        public static readonly RecordType EYES_HEADER = new RecordType("EYES");
        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType SOUN_HEADER = new RecordType("SOUN");
        public static readonly RecordType SKIL_HEADER = new RecordType("SKIL");
        public static readonly RecordType MGEF_HEADER = new RecordType("MGEF");
        public static readonly RecordType SCPT_HEADER = new RecordType("SCPT");
        public static readonly RecordType LTEX_HEADER = new RecordType("LTEX");
        public static readonly RecordType ENCH_HEADER = new RecordType("ENCH");
        public static readonly RecordType SPEL_HEADER = new RecordType("SPEL");
        public static readonly RecordType BSGN_HEADER = new RecordType("BSGN");
        public static readonly RecordType ACTI_HEADER = new RecordType("ACTI");
        public static readonly RecordType APPA_HEADER = new RecordType("APPA");
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType BOOK_HEADER = new RecordType("BOOK");
        public static readonly RecordType CLOT_HEADER = new RecordType("CLOT");
        public static readonly RecordType CONT_HEADER = new RecordType("CONT");
        public static readonly RecordType DOOR_HEADER = new RecordType("DOOR");
        public static readonly RecordType INGR_HEADER = new RecordType("INGR");
        public static readonly RecordType LIGH_HEADER = new RecordType("LIGH");
        public static readonly RecordType MISC_HEADER = new RecordType("MISC");
        public static readonly RecordType STAT_HEADER = new RecordType("STAT");
        public static readonly RecordType GRAS_HEADER = new RecordType("GRAS");
        public static readonly RecordType TREE_HEADER = new RecordType("TREE");
        public static readonly RecordType FLOR_HEADER = new RecordType("FLOR");
        public static readonly RecordType FURN_HEADER = new RecordType("FURN");
        public static readonly RecordType WEAP_HEADER = new RecordType("WEAP");
        public static readonly RecordType AMMO_HEADER = new RecordType("AMMO");
        public static readonly RecordType NPC__HEADER = new RecordType("NPC_");
        public static readonly RecordType CREA_HEADER = new RecordType("CREA");
        public static readonly RecordType LVLC_HEADER = new RecordType("LVLC");
        public static readonly RecordType SLGM_HEADER = new RecordType("SLGM");
        public static readonly RecordType KEYM_HEADER = new RecordType("KEYM");
        public static readonly RecordType ALCH_HEADER = new RecordType("ALCH");
        public static readonly RecordType SBSP_HEADER = new RecordType("SBSP");
        public static readonly RecordType SGST_HEADER = new RecordType("SGST");
        public static readonly RecordType LVLI_HEADER = new RecordType("LVLI");
        public static readonly RecordType WTHR_HEADER = new RecordType("WTHR");
        public static readonly RecordType CLMT_HEADER = new RecordType("CLMT");
        public static readonly RecordType REGN_HEADER = new RecordType("REGN");
        public static readonly RecordType CELL_HEADER = new RecordType("CELL");
        public static readonly RecordType WRLD_HEADER = new RecordType("WRLD");
        public static readonly RecordType DIAL_HEADER = new RecordType("DIAL");
        public static readonly RecordType QUST_HEADER = new RecordType("QUST");
        public static readonly RecordType IDLE_HEADER = new RecordType("IDLE");
        public static readonly RecordType PACK_HEADER = new RecordType("PACK");
        public static readonly RecordType CSTY_HEADER = new RecordType("CSTY");
        public static readonly RecordType LSCR_HEADER = new RecordType("LSCR");
        public static readonly RecordType LVSP_HEADER = new RecordType("LVSP");
        public static readonly RecordType ANIO_HEADER = new RecordType("ANIO");
        public static readonly RecordType WATR_HEADER = new RecordType("WATR");
        public static readonly RecordType EFSH_HEADER = new RecordType("EFSH");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        TES4_HEADER,
                        GMST_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 57;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class OblivionModCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IOblivionMod item,
            IOblivionModGetter rhs,
            IOblivionModGetter def,
            ErrorMaskBuilder errorMask,
            OblivionMod_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.TES4.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.TES4);
                try
                {
                    TES4Common.CopyFieldsFrom(
                        item: item.TES4,
                        rhs: rhs.TES4,
                        def: def?.TES4,
                        errorMask: errorMask,
                        copyMask: copyMask?.TES4.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.GameSettings.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.GameSettings);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.GameSettings,
                        rhs: rhs.GameSettings,
                        def: def?.GameSettings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GameSettings.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Globals.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Globals);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Globals,
                        rhs: rhs.Globals,
                        def: def?.Globals,
                        errorMask: errorMask,
                        copyMask: copyMask?.Globals.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Classes.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Classes);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Classes,
                        rhs: rhs.Classes,
                        def: def?.Classes,
                        errorMask: errorMask,
                        copyMask: copyMask?.Classes.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Factions.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Factions);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Factions,
                        rhs: rhs.Factions,
                        def: def?.Factions,
                        errorMask: errorMask,
                        copyMask: copyMask?.Factions.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Hairs.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Hairs);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Hairs,
                        rhs: rhs.Hairs,
                        def: def?.Hairs,
                        errorMask: errorMask,
                        copyMask: copyMask?.Hairs.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Eyes.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Eyes);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Eyes,
                        rhs: rhs.Eyes,
                        def: def?.Eyes,
                        errorMask: errorMask,
                        copyMask: copyMask?.Eyes.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Races.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Races);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Races,
                        rhs: rhs.Races,
                        def: def?.Races,
                        errorMask: errorMask,
                        copyMask: copyMask?.Races.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Sounds.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Sounds);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Sounds,
                        rhs: rhs.Sounds,
                        def: def?.Sounds,
                        errorMask: errorMask,
                        copyMask: copyMask?.Sounds.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Skills.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Skills);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Skills,
                        rhs: rhs.Skills,
                        def: def?.Skills,
                        errorMask: errorMask,
                        copyMask: copyMask?.Skills.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MagicEffects.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.MagicEffects);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.MagicEffects,
                        rhs: rhs.MagicEffects,
                        def: def?.MagicEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.MagicEffects.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Scripts.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Scripts);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Scripts,
                        rhs: rhs.Scripts,
                        def: def?.Scripts,
                        errorMask: errorMask,
                        copyMask: copyMask?.Scripts.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LandTextures.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LandTextures);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.LandTextures,
                        rhs: rhs.LandTextures,
                        def: def?.LandTextures,
                        errorMask: errorMask,
                        copyMask: copyMask?.LandTextures.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Enchantments.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Enchantments);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Enchantments,
                        rhs: rhs.Enchantments,
                        def: def?.Enchantments,
                        errorMask: errorMask,
                        copyMask: copyMask?.Enchantments.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Spells.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Spells);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Spells,
                        rhs: rhs.Spells,
                        def: def?.Spells,
                        errorMask: errorMask,
                        copyMask: copyMask?.Spells.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Birthsigns.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Birthsigns);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Birthsigns,
                        rhs: rhs.Birthsigns,
                        def: def?.Birthsigns,
                        errorMask: errorMask,
                        copyMask: copyMask?.Birthsigns.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Activators.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Activators);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Activators,
                        rhs: rhs.Activators,
                        def: def?.Activators,
                        errorMask: errorMask,
                        copyMask: copyMask?.Activators.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AlchemicalApparatus.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.AlchemicalApparatus);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.AlchemicalApparatus,
                        rhs: rhs.AlchemicalApparatus,
                        def: def?.AlchemicalApparatus,
                        errorMask: errorMask,
                        copyMask: copyMask?.AlchemicalApparatus.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Armors.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Armors);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Armors,
                        rhs: rhs.Armors,
                        def: def?.Armors,
                        errorMask: errorMask,
                        copyMask: copyMask?.Armors.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Books.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Books);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Books,
                        rhs: rhs.Books,
                        def: def?.Books,
                        errorMask: errorMask,
                        copyMask: copyMask?.Books.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Clothes.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Clothes);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Clothes,
                        rhs: rhs.Clothes,
                        def: def?.Clothes,
                        errorMask: errorMask,
                        copyMask: copyMask?.Clothes.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Containers.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Containers);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Containers,
                        rhs: rhs.Containers,
                        def: def?.Containers,
                        errorMask: errorMask,
                        copyMask: copyMask?.Containers.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Doors.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Doors);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Doors,
                        rhs: rhs.Doors,
                        def: def?.Doors,
                        errorMask: errorMask,
                        copyMask: copyMask?.Doors.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Ingredients.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Ingredients);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Ingredients,
                        rhs: rhs.Ingredients,
                        def: def?.Ingredients,
                        errorMask: errorMask,
                        copyMask: copyMask?.Ingredients.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Lights.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Lights);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Lights,
                        rhs: rhs.Lights,
                        def: def?.Lights,
                        errorMask: errorMask,
                        copyMask: copyMask?.Lights.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Miscellaneous.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Miscellaneous);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Miscellaneous,
                        rhs: rhs.Miscellaneous,
                        def: def?.Miscellaneous,
                        errorMask: errorMask,
                        copyMask: copyMask?.Miscellaneous.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Statics.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Statics);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Statics,
                        rhs: rhs.Statics,
                        def: def?.Statics,
                        errorMask: errorMask,
                        copyMask: copyMask?.Statics.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Grasses.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Grasses);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Grasses,
                        rhs: rhs.Grasses,
                        def: def?.Grasses,
                        errorMask: errorMask,
                        copyMask: copyMask?.Grasses.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Trees.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Trees);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Trees,
                        rhs: rhs.Trees,
                        def: def?.Trees,
                        errorMask: errorMask,
                        copyMask: copyMask?.Trees.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flora.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Flora);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Flora,
                        rhs: rhs.Flora,
                        def: def?.Flora,
                        errorMask: errorMask,
                        copyMask: copyMask?.Flora.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Furnature.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Furnature);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Furnature,
                        rhs: rhs.Furnature,
                        def: def?.Furnature,
                        errorMask: errorMask,
                        copyMask: copyMask?.Furnature.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Weapons.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Weapons);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Weapons,
                        rhs: rhs.Weapons,
                        def: def?.Weapons,
                        errorMask: errorMask,
                        copyMask: copyMask?.Weapons.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Ammo.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Ammo);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Ammo,
                        rhs: rhs.Ammo,
                        def: def?.Ammo,
                        errorMask: errorMask,
                        copyMask: copyMask?.Ammo.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.NPCs.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.NPCs);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.NPCs,
                        rhs: rhs.NPCs,
                        def: def?.NPCs,
                        errorMask: errorMask,
                        copyMask: copyMask?.NPCs.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Creatures.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Creatures);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Creatures,
                        rhs: rhs.Creatures,
                        def: def?.Creatures,
                        errorMask: errorMask,
                        copyMask: copyMask?.Creatures.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LeveledCreatures.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledCreatures);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.LeveledCreatures,
                        rhs: rhs.LeveledCreatures,
                        def: def?.LeveledCreatures,
                        errorMask: errorMask,
                        copyMask: copyMask?.LeveledCreatures.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SoulGems.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.SoulGems);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.SoulGems,
                        rhs: rhs.SoulGems,
                        def: def?.SoulGems,
                        errorMask: errorMask,
                        copyMask: copyMask?.SoulGems.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Keys.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Keys);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Keys,
                        rhs: rhs.Keys,
                        def: def?.Keys,
                        errorMask: errorMask,
                        copyMask: copyMask?.Keys.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Potions.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Potions);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Potions,
                        rhs: rhs.Potions,
                        def: def?.Potions,
                        errorMask: errorMask,
                        copyMask: copyMask?.Potions.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Subspaces.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Subspaces);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Subspaces,
                        rhs: rhs.Subspaces,
                        def: def?.Subspaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.Subspaces.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SigilStones.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.SigilStones);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.SigilStones,
                        rhs: rhs.SigilStones,
                        def: def?.SigilStones,
                        errorMask: errorMask,
                        copyMask: copyMask?.SigilStones.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LeveledItems.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledItems);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.LeveledItems,
                        rhs: rhs.LeveledItems,
                        def: def?.LeveledItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.LeveledItems.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Weathers.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Weathers);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Weathers,
                        rhs: rhs.Weathers,
                        def: def?.Weathers,
                        errorMask: errorMask,
                        copyMask: copyMask?.Weathers.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Climates.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Climates);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Climates,
                        rhs: rhs.Climates,
                        def: def?.Climates,
                        errorMask: errorMask,
                        copyMask: copyMask?.Climates.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Regions.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Regions);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Regions,
                        rhs: rhs.Regions,
                        def: def?.Regions,
                        errorMask: errorMask,
                        copyMask: copyMask?.Regions.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Cells.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Cells);
                try
                {
                    ListGroupCommon.CopyFieldsFrom(
                        item: item.Cells,
                        rhs: rhs.Cells,
                        def: def?.Cells,
                        errorMask: errorMask,
                        copyMask: copyMask?.Cells.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Worldspaces.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Worldspaces);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Worldspaces,
                        rhs: rhs.Worldspaces,
                        def: def?.Worldspaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.Worldspaces.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DialogTopics.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.DialogTopics);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.DialogTopics,
                        rhs: rhs.DialogTopics,
                        def: def?.DialogTopics,
                        errorMask: errorMask,
                        copyMask: copyMask?.DialogTopics.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Quests.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Quests);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Quests,
                        rhs: rhs.Quests,
                        def: def?.Quests,
                        errorMask: errorMask,
                        copyMask: copyMask?.Quests.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.IdleAnimations.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.IdleAnimations);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.IdleAnimations,
                        rhs: rhs.IdleAnimations,
                        def: def?.IdleAnimations,
                        errorMask: errorMask,
                        copyMask: copyMask?.IdleAnimations.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AIPackages.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.AIPackages);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.AIPackages,
                        rhs: rhs.AIPackages,
                        def: def?.AIPackages,
                        errorMask: errorMask,
                        copyMask: copyMask?.AIPackages.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CombatStyles.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.CombatStyles);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.CombatStyles,
                        rhs: rhs.CombatStyles,
                        def: def?.CombatStyles,
                        errorMask: errorMask,
                        copyMask: copyMask?.CombatStyles.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LoadScreens.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LoadScreens);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.LoadScreens,
                        rhs: rhs.LoadScreens,
                        def: def?.LoadScreens,
                        errorMask: errorMask,
                        copyMask: copyMask?.LoadScreens.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LeveledSpells.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledSpells);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.LeveledSpells,
                        rhs: rhs.LeveledSpells,
                        def: def?.LeveledSpells,
                        errorMask: errorMask,
                        copyMask: copyMask?.LeveledSpells.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AnimatedObjects.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.AnimatedObjects);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.AnimatedObjects,
                        rhs: rhs.AnimatedObjects,
                        def: def?.AnimatedObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.AnimatedObjects.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Waters.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Waters);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.Waters,
                        rhs: rhs.Waters,
                        def: def?.Waters,
                        errorMask: errorMask,
                        copyMask: copyMask?.Waters.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EffectShaders.Overall ?? true)
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.EffectShaders);
                try
                {
                    GroupCommon.CopyFieldsFrom(
                        item: item.EffectShaders,
                        rhs: rhs.EffectShaders,
                        def: def?.EffectShaders,
                        errorMask: errorMask,
                        copyMask: copyMask?.EffectShaders.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IOblivionMod obj,
            NotifyingFireParameters cmds = null)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                case OblivionMod_FieldIndex.Creatures:
                case OblivionMod_FieldIndex.LeveledCreatures:
                case OblivionMod_FieldIndex.SoulGems:
                case OblivionMod_FieldIndex.Keys:
                case OblivionMod_FieldIndex.Potions:
                case OblivionMod_FieldIndex.Subspaces:
                case OblivionMod_FieldIndex.SigilStones:
                case OblivionMod_FieldIndex.LeveledItems:
                case OblivionMod_FieldIndex.Weathers:
                case OblivionMod_FieldIndex.Climates:
                case OblivionMod_FieldIndex.Regions:
                case OblivionMod_FieldIndex.Cells:
                case OblivionMod_FieldIndex.Worldspaces:
                case OblivionMod_FieldIndex.DialogTopics:
                case OblivionMod_FieldIndex.Quests:
                case OblivionMod_FieldIndex.IdleAnimations:
                case OblivionMod_FieldIndex.AIPackages:
                case OblivionMod_FieldIndex.CombatStyles:
                case OblivionMod_FieldIndex.LoadScreens:
                case OblivionMod_FieldIndex.LeveledSpells:
                case OblivionMod_FieldIndex.AnimatedObjects:
                case OblivionMod_FieldIndex.Waters:
                case OblivionMod_FieldIndex.EffectShaders:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case OblivionMod_FieldIndex.TES4:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IOblivionMod obj,
            NotifyingUnsetParameters cmds = null)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case OblivionMod_FieldIndex.GameSettings:
                    GroupCommon.Clear(obj.GameSettings, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Globals:
                    GroupCommon.Clear(obj.Globals, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Classes:
                    GroupCommon.Clear(obj.Classes, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Factions:
                    GroupCommon.Clear(obj.Factions, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    GroupCommon.Clear(obj.Hairs, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    GroupCommon.Clear(obj.Eyes, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Races:
                    GroupCommon.Clear(obj.Races, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    GroupCommon.Clear(obj.Sounds, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Skills:
                    GroupCommon.Clear(obj.Skills, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.MagicEffects:
                    GroupCommon.Clear(obj.MagicEffects, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Scripts:
                    GroupCommon.Clear(obj.Scripts, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.LandTextures:
                    GroupCommon.Clear(obj.LandTextures, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Enchantments:
                    GroupCommon.Clear(obj.Enchantments, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Spells:
                    GroupCommon.Clear(obj.Spells, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Birthsigns:
                    GroupCommon.Clear(obj.Birthsigns, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Activators:
                    GroupCommon.Clear(obj.Activators, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    GroupCommon.Clear(obj.AlchemicalApparatus, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Armors:
                    GroupCommon.Clear(obj.Armors, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Books:
                    GroupCommon.Clear(obj.Books, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Clothes:
                    GroupCommon.Clear(obj.Clothes, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Containers:
                    GroupCommon.Clear(obj.Containers, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Doors:
                    GroupCommon.Clear(obj.Doors, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Ingredients:
                    GroupCommon.Clear(obj.Ingredients, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Lights:
                    GroupCommon.Clear(obj.Lights, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Miscellaneous:
                    GroupCommon.Clear(obj.Miscellaneous, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Statics:
                    GroupCommon.Clear(obj.Statics, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Grasses:
                    GroupCommon.Clear(obj.Grasses, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Trees:
                    GroupCommon.Clear(obj.Trees, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Flora:
                    GroupCommon.Clear(obj.Flora, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Furnature:
                    GroupCommon.Clear(obj.Furnature, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Weapons:
                    GroupCommon.Clear(obj.Weapons, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Ammo:
                    GroupCommon.Clear(obj.Ammo, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.NPCs:
                    GroupCommon.Clear(obj.NPCs, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Creatures:
                    GroupCommon.Clear(obj.Creatures, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.LeveledCreatures:
                    GroupCommon.Clear(obj.LeveledCreatures, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.SoulGems:
                    GroupCommon.Clear(obj.SoulGems, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Keys:
                    GroupCommon.Clear(obj.Keys, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Potions:
                    GroupCommon.Clear(obj.Potions, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Subspaces:
                    GroupCommon.Clear(obj.Subspaces, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.SigilStones:
                    GroupCommon.Clear(obj.SigilStones, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.LeveledItems:
                    GroupCommon.Clear(obj.LeveledItems, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Weathers:
                    GroupCommon.Clear(obj.Weathers, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Climates:
                    GroupCommon.Clear(obj.Climates, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Regions:
                    GroupCommon.Clear(obj.Regions, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Cells:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case OblivionMod_FieldIndex.Worldspaces:
                    GroupCommon.Clear(obj.Worldspaces, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.DialogTopics:
                    GroupCommon.Clear(obj.DialogTopics, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Quests:
                    GroupCommon.Clear(obj.Quests, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.IdleAnimations:
                    GroupCommon.Clear(obj.IdleAnimations, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.AIPackages:
                    GroupCommon.Clear(obj.AIPackages, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.CombatStyles:
                    GroupCommon.Clear(obj.CombatStyles, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.LoadScreens:
                    GroupCommon.Clear(obj.LoadScreens, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.LeveledSpells:
                    GroupCommon.Clear(obj.LeveledSpells, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.AnimatedObjects:
                    GroupCommon.Clear(obj.AnimatedObjects, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Waters:
                    GroupCommon.Clear(obj.Waters, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.EffectShaders:
                    GroupCommon.Clear(obj.EffectShaders, cmds.ToUnsetParams());
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IOblivionMod obj)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                case OblivionMod_FieldIndex.Creatures:
                case OblivionMod_FieldIndex.LeveledCreatures:
                case OblivionMod_FieldIndex.SoulGems:
                case OblivionMod_FieldIndex.Keys:
                case OblivionMod_FieldIndex.Potions:
                case OblivionMod_FieldIndex.Subspaces:
                case OblivionMod_FieldIndex.SigilStones:
                case OblivionMod_FieldIndex.LeveledItems:
                case OblivionMod_FieldIndex.Weathers:
                case OblivionMod_FieldIndex.Climates:
                case OblivionMod_FieldIndex.Regions:
                case OblivionMod_FieldIndex.Cells:
                case OblivionMod_FieldIndex.Worldspaces:
                case OblivionMod_FieldIndex.DialogTopics:
                case OblivionMod_FieldIndex.Quests:
                case OblivionMod_FieldIndex.IdleAnimations:
                case OblivionMod_FieldIndex.AIPackages:
                case OblivionMod_FieldIndex.CombatStyles:
                case OblivionMod_FieldIndex.LoadScreens:
                case OblivionMod_FieldIndex.LeveledSpells:
                case OblivionMod_FieldIndex.AnimatedObjects:
                case OblivionMod_FieldIndex.Waters:
                case OblivionMod_FieldIndex.EffectShaders:
                    return true;
                case OblivionMod_FieldIndex.TES4:
                    return obj.TES4_IsSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IOblivionModGetter obj)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return obj.TES4;
                case OblivionMod_FieldIndex.GameSettings:
                    return obj.GameSettings;
                case OblivionMod_FieldIndex.Globals:
                    return obj.Globals;
                case OblivionMod_FieldIndex.Classes:
                    return obj.Classes;
                case OblivionMod_FieldIndex.Factions:
                    return obj.Factions;
                case OblivionMod_FieldIndex.Hairs:
                    return obj.Hairs;
                case OblivionMod_FieldIndex.Eyes:
                    return obj.Eyes;
                case OblivionMod_FieldIndex.Races:
                    return obj.Races;
                case OblivionMod_FieldIndex.Sounds:
                    return obj.Sounds;
                case OblivionMod_FieldIndex.Skills:
                    return obj.Skills;
                case OblivionMod_FieldIndex.MagicEffects:
                    return obj.MagicEffects;
                case OblivionMod_FieldIndex.Scripts:
                    return obj.Scripts;
                case OblivionMod_FieldIndex.LandTextures:
                    return obj.LandTextures;
                case OblivionMod_FieldIndex.Enchantments:
                    return obj.Enchantments;
                case OblivionMod_FieldIndex.Spells:
                    return obj.Spells;
                case OblivionMod_FieldIndex.Birthsigns:
                    return obj.Birthsigns;
                case OblivionMod_FieldIndex.Activators:
                    return obj.Activators;
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    return obj.AlchemicalApparatus;
                case OblivionMod_FieldIndex.Armors:
                    return obj.Armors;
                case OblivionMod_FieldIndex.Books:
                    return obj.Books;
                case OblivionMod_FieldIndex.Clothes:
                    return obj.Clothes;
                case OblivionMod_FieldIndex.Containers:
                    return obj.Containers;
                case OblivionMod_FieldIndex.Doors:
                    return obj.Doors;
                case OblivionMod_FieldIndex.Ingredients:
                    return obj.Ingredients;
                case OblivionMod_FieldIndex.Lights:
                    return obj.Lights;
                case OblivionMod_FieldIndex.Miscellaneous:
                    return obj.Miscellaneous;
                case OblivionMod_FieldIndex.Statics:
                    return obj.Statics;
                case OblivionMod_FieldIndex.Grasses:
                    return obj.Grasses;
                case OblivionMod_FieldIndex.Trees:
                    return obj.Trees;
                case OblivionMod_FieldIndex.Flora:
                    return obj.Flora;
                case OblivionMod_FieldIndex.Furnature:
                    return obj.Furnature;
                case OblivionMod_FieldIndex.Weapons:
                    return obj.Weapons;
                case OblivionMod_FieldIndex.Ammo:
                    return obj.Ammo;
                case OblivionMod_FieldIndex.NPCs:
                    return obj.NPCs;
                case OblivionMod_FieldIndex.Creatures:
                    return obj.Creatures;
                case OblivionMod_FieldIndex.LeveledCreatures:
                    return obj.LeveledCreatures;
                case OblivionMod_FieldIndex.SoulGems:
                    return obj.SoulGems;
                case OblivionMod_FieldIndex.Keys:
                    return obj.Keys;
                case OblivionMod_FieldIndex.Potions:
                    return obj.Potions;
                case OblivionMod_FieldIndex.Subspaces:
                    return obj.Subspaces;
                case OblivionMod_FieldIndex.SigilStones:
                    return obj.SigilStones;
                case OblivionMod_FieldIndex.LeveledItems:
                    return obj.LeveledItems;
                case OblivionMod_FieldIndex.Weathers:
                    return obj.Weathers;
                case OblivionMod_FieldIndex.Climates:
                    return obj.Climates;
                case OblivionMod_FieldIndex.Regions:
                    return obj.Regions;
                case OblivionMod_FieldIndex.Cells:
                    return obj.Cells;
                case OblivionMod_FieldIndex.Worldspaces:
                    return obj.Worldspaces;
                case OblivionMod_FieldIndex.DialogTopics:
                    return obj.DialogTopics;
                case OblivionMod_FieldIndex.Quests:
                    return obj.Quests;
                case OblivionMod_FieldIndex.IdleAnimations:
                    return obj.IdleAnimations;
                case OblivionMod_FieldIndex.AIPackages:
                    return obj.AIPackages;
                case OblivionMod_FieldIndex.CombatStyles:
                    return obj.CombatStyles;
                case OblivionMod_FieldIndex.LoadScreens:
                    return obj.LoadScreens;
                case OblivionMod_FieldIndex.LeveledSpells:
                    return obj.LeveledSpells;
                case OblivionMod_FieldIndex.AnimatedObjects:
                    return obj.AnimatedObjects;
                case OblivionMod_FieldIndex.Waters:
                    return obj.Waters;
                case OblivionMod_FieldIndex.EffectShaders:
                    return obj.EffectShaders;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IOblivionMod item,
            NotifyingUnsetParameters cmds = null)
        {
        }

        public static OblivionMod_Mask<bool> GetEqualsMask(
            this IOblivionModGetter item,
            IOblivionModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new OblivionMod_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IOblivionModGetter item,
            IOblivionModGetter rhs,
            OblivionMod_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.TES4 = EqualsMaskHelper.EqualsHelper(
                item.TES4_IsSet,
                rhs.TES4_IsSet,
                item.TES4,
                rhs.TES4,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.GameSettings = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.GameSettings, rhs.GameSettings, include), include);
            ret.Globals = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Globals, rhs.Globals, include), include);
            ret.Classes = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Classes, rhs.Classes, include), include);
            ret.Factions = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Factions, rhs.Factions, include), include);
            ret.Hairs = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Hairs, rhs.Hairs, include), include);
            ret.Eyes = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Eyes, rhs.Eyes, include), include);
            ret.Races = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Races, rhs.Races, include), include);
            ret.Sounds = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Sounds, rhs.Sounds, include), include);
            ret.Skills = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Skills, rhs.Skills, include), include);
            ret.MagicEffects = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.MagicEffects, rhs.MagicEffects, include), include);
            ret.Scripts = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Scripts, rhs.Scripts, include), include);
            ret.LandTextures = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.LandTextures, rhs.LandTextures, include), include);
            ret.Enchantments = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Enchantments, rhs.Enchantments, include), include);
            ret.Spells = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Spells, rhs.Spells, include), include);
            ret.Birthsigns = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Birthsigns, rhs.Birthsigns, include), include);
            ret.Activators = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Activators, rhs.Activators, include), include);
            ret.AlchemicalApparatus = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.AlchemicalApparatus, rhs.AlchemicalApparatus, include), include);
            ret.Armors = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Armors, rhs.Armors, include), include);
            ret.Books = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Books, rhs.Books, include), include);
            ret.Clothes = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Clothes, rhs.Clothes, include), include);
            ret.Containers = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Containers, rhs.Containers, include), include);
            ret.Doors = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Doors, rhs.Doors, include), include);
            ret.Ingredients = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Ingredients, rhs.Ingredients, include), include);
            ret.Lights = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Lights, rhs.Lights, include), include);
            ret.Miscellaneous = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Miscellaneous, rhs.Miscellaneous, include), include);
            ret.Statics = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Statics, rhs.Statics, include), include);
            ret.Grasses = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Grasses, rhs.Grasses, include), include);
            ret.Trees = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Trees, rhs.Trees, include), include);
            ret.Flora = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Flora, rhs.Flora, include), include);
            ret.Furnature = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Furnature, rhs.Furnature, include), include);
            ret.Weapons = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Weapons, rhs.Weapons, include), include);
            ret.Ammo = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Ammo, rhs.Ammo, include), include);
            ret.NPCs = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.NPCs, rhs.NPCs, include), include);
            ret.Creatures = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Creatures, rhs.Creatures, include), include);
            ret.LeveledCreatures = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.LeveledCreatures, rhs.LeveledCreatures, include), include);
            ret.SoulGems = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.SoulGems, rhs.SoulGems, include), include);
            ret.Keys = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Keys, rhs.Keys, include), include);
            ret.Potions = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Potions, rhs.Potions, include), include);
            ret.Subspaces = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Subspaces, rhs.Subspaces, include), include);
            ret.SigilStones = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.SigilStones, rhs.SigilStones, include), include);
            ret.LeveledItems = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.LeveledItems, rhs.LeveledItems, include), include);
            ret.Weathers = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Weathers, rhs.Weathers, include), include);
            ret.Climates = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Climates, rhs.Climates, include), include);
            ret.Regions = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Regions, rhs.Regions, include), include);
            ret.Cells = MaskItemExt.Factory(ListGroupCommon.GetEqualsMask(item.Cells, rhs.Cells, include), include);
            ret.Worldspaces = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Worldspaces, rhs.Worldspaces, include), include);
            ret.DialogTopics = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.DialogTopics, rhs.DialogTopics, include), include);
            ret.Quests = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Quests, rhs.Quests, include), include);
            ret.IdleAnimations = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.IdleAnimations, rhs.IdleAnimations, include), include);
            ret.AIPackages = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.AIPackages, rhs.AIPackages, include), include);
            ret.CombatStyles = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.CombatStyles, rhs.CombatStyles, include), include);
            ret.LoadScreens = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.LoadScreens, rhs.LoadScreens, include), include);
            ret.LeveledSpells = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.LeveledSpells, rhs.LeveledSpells, include), include);
            ret.AnimatedObjects = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.AnimatedObjects, rhs.AnimatedObjects, include), include);
            ret.Waters = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.Waters, rhs.Waters, include), include);
            ret.EffectShaders = MaskItemExt.Factory(GroupCommon.GetEqualsMask(item.EffectShaders, rhs.EffectShaders, include), include);
        }

        public static string ToString(
            this IOblivionModGetter item,
            string name = null,
            OblivionMod_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IOblivionModGetter item,
            FileGeneration fg,
            string name = null,
            OblivionMod_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(OblivionMod)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(OblivionMod)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TES4?.Overall ?? true)
                {
                    item.TES4?.ToString(fg, "TES4");
                }
                if (printMask?.GameSettings?.Overall ?? true)
                {
                    item.GameSettings?.ToString(fg, "GameSettings");
                }
                if (printMask?.Globals?.Overall ?? true)
                {
                    item.Globals?.ToString(fg, "Globals");
                }
                if (printMask?.Classes?.Overall ?? true)
                {
                    item.Classes?.ToString(fg, "Classes");
                }
                if (printMask?.Factions?.Overall ?? true)
                {
                    item.Factions?.ToString(fg, "Factions");
                }
                if (printMask?.Hairs?.Overall ?? true)
                {
                    item.Hairs?.ToString(fg, "Hairs");
                }
                if (printMask?.Eyes?.Overall ?? true)
                {
                    item.Eyes?.ToString(fg, "Eyes");
                }
                if (printMask?.Races?.Overall ?? true)
                {
                    item.Races?.ToString(fg, "Races");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    item.Sounds?.ToString(fg, "Sounds");
                }
                if (printMask?.Skills?.Overall ?? true)
                {
                    item.Skills?.ToString(fg, "Skills");
                }
                if (printMask?.MagicEffects?.Overall ?? true)
                {
                    item.MagicEffects?.ToString(fg, "MagicEffects");
                }
                if (printMask?.Scripts?.Overall ?? true)
                {
                    item.Scripts?.ToString(fg, "Scripts");
                }
                if (printMask?.LandTextures?.Overall ?? true)
                {
                    item.LandTextures?.ToString(fg, "LandTextures");
                }
                if (printMask?.Enchantments?.Overall ?? true)
                {
                    item.Enchantments?.ToString(fg, "Enchantments");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    item.Spells?.ToString(fg, "Spells");
                }
                if (printMask?.Birthsigns?.Overall ?? true)
                {
                    item.Birthsigns?.ToString(fg, "Birthsigns");
                }
                if (printMask?.Activators?.Overall ?? true)
                {
                    item.Activators?.ToString(fg, "Activators");
                }
                if (printMask?.AlchemicalApparatus?.Overall ?? true)
                {
                    item.AlchemicalApparatus?.ToString(fg, "AlchemicalApparatus");
                }
                if (printMask?.Armors?.Overall ?? true)
                {
                    item.Armors?.ToString(fg, "Armors");
                }
                if (printMask?.Books?.Overall ?? true)
                {
                    item.Books?.ToString(fg, "Books");
                }
                if (printMask?.Clothes?.Overall ?? true)
                {
                    item.Clothes?.ToString(fg, "Clothes");
                }
                if (printMask?.Containers?.Overall ?? true)
                {
                    item.Containers?.ToString(fg, "Containers");
                }
                if (printMask?.Doors?.Overall ?? true)
                {
                    item.Doors?.ToString(fg, "Doors");
                }
                if (printMask?.Ingredients?.Overall ?? true)
                {
                    item.Ingredients?.ToString(fg, "Ingredients");
                }
                if (printMask?.Lights?.Overall ?? true)
                {
                    item.Lights?.ToString(fg, "Lights");
                }
                if (printMask?.Miscellaneous?.Overall ?? true)
                {
                    item.Miscellaneous?.ToString(fg, "Miscellaneous");
                }
                if (printMask?.Statics?.Overall ?? true)
                {
                    item.Statics?.ToString(fg, "Statics");
                }
                if (printMask?.Grasses?.Overall ?? true)
                {
                    item.Grasses?.ToString(fg, "Grasses");
                }
                if (printMask?.Trees?.Overall ?? true)
                {
                    item.Trees?.ToString(fg, "Trees");
                }
                if (printMask?.Flora?.Overall ?? true)
                {
                    item.Flora?.ToString(fg, "Flora");
                }
                if (printMask?.Furnature?.Overall ?? true)
                {
                    item.Furnature?.ToString(fg, "Furnature");
                }
                if (printMask?.Weapons?.Overall ?? true)
                {
                    item.Weapons?.ToString(fg, "Weapons");
                }
                if (printMask?.Ammo?.Overall ?? true)
                {
                    item.Ammo?.ToString(fg, "Ammo");
                }
                if (printMask?.NPCs?.Overall ?? true)
                {
                    item.NPCs?.ToString(fg, "NPCs");
                }
                if (printMask?.Creatures?.Overall ?? true)
                {
                    item.Creatures?.ToString(fg, "Creatures");
                }
                if (printMask?.LeveledCreatures?.Overall ?? true)
                {
                    item.LeveledCreatures?.ToString(fg, "LeveledCreatures");
                }
                if (printMask?.SoulGems?.Overall ?? true)
                {
                    item.SoulGems?.ToString(fg, "SoulGems");
                }
                if (printMask?.Keys?.Overall ?? true)
                {
                    item.Keys?.ToString(fg, "Keys");
                }
                if (printMask?.Potions?.Overall ?? true)
                {
                    item.Potions?.ToString(fg, "Potions");
                }
                if (printMask?.Subspaces?.Overall ?? true)
                {
                    item.Subspaces?.ToString(fg, "Subspaces");
                }
                if (printMask?.SigilStones?.Overall ?? true)
                {
                    item.SigilStones?.ToString(fg, "SigilStones");
                }
                if (printMask?.LeveledItems?.Overall ?? true)
                {
                    item.LeveledItems?.ToString(fg, "LeveledItems");
                }
                if (printMask?.Weathers?.Overall ?? true)
                {
                    item.Weathers?.ToString(fg, "Weathers");
                }
                if (printMask?.Climates?.Overall ?? true)
                {
                    item.Climates?.ToString(fg, "Climates");
                }
                if (printMask?.Regions?.Overall ?? true)
                {
                    item.Regions?.ToString(fg, "Regions");
                }
                if (printMask?.Cells?.Overall ?? true)
                {
                    item.Cells?.ToString(fg, "Cells");
                }
                if (printMask?.Worldspaces?.Overall ?? true)
                {
                    item.Worldspaces?.ToString(fg, "Worldspaces");
                }
                if (printMask?.DialogTopics?.Overall ?? true)
                {
                    item.DialogTopics?.ToString(fg, "DialogTopics");
                }
                if (printMask?.Quests?.Overall ?? true)
                {
                    item.Quests?.ToString(fg, "Quests");
                }
                if (printMask?.IdleAnimations?.Overall ?? true)
                {
                    item.IdleAnimations?.ToString(fg, "IdleAnimations");
                }
                if (printMask?.AIPackages?.Overall ?? true)
                {
                    item.AIPackages?.ToString(fg, "AIPackages");
                }
                if (printMask?.CombatStyles?.Overall ?? true)
                {
                    item.CombatStyles?.ToString(fg, "CombatStyles");
                }
                if (printMask?.LoadScreens?.Overall ?? true)
                {
                    item.LoadScreens?.ToString(fg, "LoadScreens");
                }
                if (printMask?.LeveledSpells?.Overall ?? true)
                {
                    item.LeveledSpells?.ToString(fg, "LeveledSpells");
                }
                if (printMask?.AnimatedObjects?.Overall ?? true)
                {
                    item.AnimatedObjects?.ToString(fg, "AnimatedObjects");
                }
                if (printMask?.Waters?.Overall ?? true)
                {
                    item.Waters?.ToString(fg, "Waters");
                }
                if (printMask?.EffectShaders?.Overall ?? true)
                {
                    item.EffectShaders?.ToString(fg, "EffectShaders");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IOblivionModGetter item,
            OblivionMod_Mask<bool?> checkMask)
        {
            if (checkMask.TES4.Overall.HasValue && checkMask.TES4.Overall.Value != item.TES4_IsSet) return false;
            if (checkMask.TES4.Specific != null && (item.TES4 == null || !item.TES4.HasBeenSet(checkMask.TES4.Specific))) return false;
            return true;
        }

        public static OblivionMod_Mask<bool> GetHasBeenSetMask(IOblivionModGetter item)
        {
            var ret = new OblivionMod_Mask<bool>();
            ret.TES4 = new MaskItem<bool, TES4_Mask<bool>>(item.TES4_IsSet, TES4Common.GetHasBeenSetMask(item.TES4));
            ret.GameSettings = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.GameSettings));
            ret.Globals = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Globals));
            ret.Classes = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Classes));
            ret.Factions = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Factions));
            ret.Hairs = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Hairs));
            ret.Eyes = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Eyes));
            ret.Races = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Races));
            ret.Sounds = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Sounds));
            ret.Skills = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Skills));
            ret.MagicEffects = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.MagicEffects));
            ret.Scripts = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Scripts));
            ret.LandTextures = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.LandTextures));
            ret.Enchantments = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Enchantments));
            ret.Spells = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Spells));
            ret.Birthsigns = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Birthsigns));
            ret.Activators = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Activators));
            ret.AlchemicalApparatus = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.AlchemicalApparatus));
            ret.Armors = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Armors));
            ret.Books = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Books));
            ret.Clothes = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Clothes));
            ret.Containers = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Containers));
            ret.Doors = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Doors));
            ret.Ingredients = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Ingredients));
            ret.Lights = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Lights));
            ret.Miscellaneous = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Miscellaneous));
            ret.Statics = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Statics));
            ret.Grasses = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Grasses));
            ret.Trees = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Trees));
            ret.Flora = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Flora));
            ret.Furnature = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Furnature));
            ret.Weapons = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Weapons));
            ret.Ammo = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Ammo));
            ret.NPCs = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.NPCs));
            ret.Creatures = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Creatures));
            ret.LeveledCreatures = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.LeveledCreatures));
            ret.SoulGems = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.SoulGems));
            ret.Keys = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Keys));
            ret.Potions = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Potions));
            ret.Subspaces = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Subspaces));
            ret.SigilStones = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.SigilStones));
            ret.LeveledItems = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.LeveledItems));
            ret.Weathers = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Weathers));
            ret.Climates = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Climates));
            ret.Regions = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Regions));
            ret.Cells = new MaskItem<bool, ListGroup_Mask<bool>>(true, ListGroupCommon.GetHasBeenSetMask(item.Cells));
            ret.Worldspaces = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Worldspaces));
            ret.DialogTopics = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.DialogTopics));
            ret.Quests = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Quests));
            ret.IdleAnimations = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.IdleAnimations));
            ret.AIPackages = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.AIPackages));
            ret.CombatStyles = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.CombatStyles));
            ret.LoadScreens = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.LoadScreens));
            ret.LeveledSpells = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.LeveledSpells));
            ret.AnimatedObjects = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.AnimatedObjects));
            ret.Waters = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Waters));
            ret.EffectShaders = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.EffectShaders));
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            OblivionMod item,
            bool doMasks,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = OblivionMod_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            OblivionMod item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.OblivionMod");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.OblivionMod");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this OblivionMod item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.TES4_IsSet
                && (translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.TES4) ?? true))
            {
                LoquiXmlTranslation<TES4>.Instance.Write(
                    node: node,
                    item: item.TES4,
                    name: nameof(item.TES4),
                    fieldIndex: (int)OblivionMod_FieldIndex.TES4,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.TES4));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.GameSettings) ?? true))
            {
                LoquiXmlTranslation<Group<GameSetting>>.Instance.Write(
                    node: node,
                    item: item.GameSettings,
                    name: nameof(item.GameSettings),
                    fieldIndex: (int)OblivionMod_FieldIndex.GameSettings,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.GameSettings));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Globals) ?? true))
            {
                LoquiXmlTranslation<Group<Global>>.Instance.Write(
                    node: node,
                    item: item.Globals,
                    name: nameof(item.Globals),
                    fieldIndex: (int)OblivionMod_FieldIndex.Globals,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Globals));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Classes) ?? true))
            {
                LoquiXmlTranslation<Group<Class>>.Instance.Write(
                    node: node,
                    item: item.Classes,
                    name: nameof(item.Classes),
                    fieldIndex: (int)OblivionMod_FieldIndex.Classes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Classes));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Factions) ?? true))
            {
                LoquiXmlTranslation<Group<Faction>>.Instance.Write(
                    node: node,
                    item: item.Factions,
                    name: nameof(item.Factions),
                    fieldIndex: (int)OblivionMod_FieldIndex.Factions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Factions));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Hairs) ?? true))
            {
                LoquiXmlTranslation<Group<Hair>>.Instance.Write(
                    node: node,
                    item: item.Hairs,
                    name: nameof(item.Hairs),
                    fieldIndex: (int)OblivionMod_FieldIndex.Hairs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Hairs));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Eyes) ?? true))
            {
                LoquiXmlTranslation<Group<Eye>>.Instance.Write(
                    node: node,
                    item: item.Eyes,
                    name: nameof(item.Eyes),
                    fieldIndex: (int)OblivionMod_FieldIndex.Eyes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Eyes));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Races) ?? true))
            {
                LoquiXmlTranslation<Group<Race>>.Instance.Write(
                    node: node,
                    item: item.Races,
                    name: nameof(item.Races),
                    fieldIndex: (int)OblivionMod_FieldIndex.Races,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Races));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Sounds) ?? true))
            {
                LoquiXmlTranslation<Group<Sound>>.Instance.Write(
                    node: node,
                    item: item.Sounds,
                    name: nameof(item.Sounds),
                    fieldIndex: (int)OblivionMod_FieldIndex.Sounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Sounds));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Skills) ?? true))
            {
                LoquiXmlTranslation<Group<SkillRecord>>.Instance.Write(
                    node: node,
                    item: item.Skills,
                    name: nameof(item.Skills),
                    fieldIndex: (int)OblivionMod_FieldIndex.Skills,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Skills));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.MagicEffects) ?? true))
            {
                LoquiXmlTranslation<Group<MagicEffect>>.Instance.Write(
                    node: node,
                    item: item.MagicEffects,
                    name: nameof(item.MagicEffects),
                    fieldIndex: (int)OblivionMod_FieldIndex.MagicEffects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.MagicEffects));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Scripts) ?? true))
            {
                LoquiXmlTranslation<Group<Script>>.Instance.Write(
                    node: node,
                    item: item.Scripts,
                    name: nameof(item.Scripts),
                    fieldIndex: (int)OblivionMod_FieldIndex.Scripts,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Scripts));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LandTextures) ?? true))
            {
                LoquiXmlTranslation<Group<LandTexture>>.Instance.Write(
                    node: node,
                    item: item.LandTextures,
                    name: nameof(item.LandTextures),
                    fieldIndex: (int)OblivionMod_FieldIndex.LandTextures,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LandTextures));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Enchantments) ?? true))
            {
                LoquiXmlTranslation<Group<Enchantment>>.Instance.Write(
                    node: node,
                    item: item.Enchantments,
                    name: nameof(item.Enchantments),
                    fieldIndex: (int)OblivionMod_FieldIndex.Enchantments,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Enchantments));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Spells) ?? true))
            {
                LoquiXmlTranslation<Group<SpellUnleveled>>.Instance.Write(
                    node: node,
                    item: item.Spells,
                    name: nameof(item.Spells),
                    fieldIndex: (int)OblivionMod_FieldIndex.Spells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Spells));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Birthsigns) ?? true))
            {
                LoquiXmlTranslation<Group<Birthsign>>.Instance.Write(
                    node: node,
                    item: item.Birthsigns,
                    name: nameof(item.Birthsigns),
                    fieldIndex: (int)OblivionMod_FieldIndex.Birthsigns,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Birthsigns));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Activators) ?? true))
            {
                LoquiXmlTranslation<Group<Activator>>.Instance.Write(
                    node: node,
                    item: item.Activators,
                    name: nameof(item.Activators),
                    fieldIndex: (int)OblivionMod_FieldIndex.Activators,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Activators));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AlchemicalApparatus) ?? true))
            {
                LoquiXmlTranslation<Group<AlchemicalApparatus>>.Instance.Write(
                    node: node,
                    item: item.AlchemicalApparatus,
                    name: nameof(item.AlchemicalApparatus),
                    fieldIndex: (int)OblivionMod_FieldIndex.AlchemicalApparatus,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.AlchemicalApparatus));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Armors) ?? true))
            {
                LoquiXmlTranslation<Group<Armor>>.Instance.Write(
                    node: node,
                    item: item.Armors,
                    name: nameof(item.Armors),
                    fieldIndex: (int)OblivionMod_FieldIndex.Armors,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Armors));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Books) ?? true))
            {
                LoquiXmlTranslation<Group<Book>>.Instance.Write(
                    node: node,
                    item: item.Books,
                    name: nameof(item.Books),
                    fieldIndex: (int)OblivionMod_FieldIndex.Books,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Books));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Clothes) ?? true))
            {
                LoquiXmlTranslation<Group<Clothing>>.Instance.Write(
                    node: node,
                    item: item.Clothes,
                    name: nameof(item.Clothes),
                    fieldIndex: (int)OblivionMod_FieldIndex.Clothes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Clothes));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Containers) ?? true))
            {
                LoquiXmlTranslation<Group<Container>>.Instance.Write(
                    node: node,
                    item: item.Containers,
                    name: nameof(item.Containers),
                    fieldIndex: (int)OblivionMod_FieldIndex.Containers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Containers));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Doors) ?? true))
            {
                LoquiXmlTranslation<Group<Door>>.Instance.Write(
                    node: node,
                    item: item.Doors,
                    name: nameof(item.Doors),
                    fieldIndex: (int)OblivionMod_FieldIndex.Doors,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Doors));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Ingredients) ?? true))
            {
                LoquiXmlTranslation<Group<Ingredient>>.Instance.Write(
                    node: node,
                    item: item.Ingredients,
                    name: nameof(item.Ingredients),
                    fieldIndex: (int)OblivionMod_FieldIndex.Ingredients,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Ingredients));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Lights) ?? true))
            {
                LoquiXmlTranslation<Group<Light>>.Instance.Write(
                    node: node,
                    item: item.Lights,
                    name: nameof(item.Lights),
                    fieldIndex: (int)OblivionMod_FieldIndex.Lights,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Lights));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Miscellaneous) ?? true))
            {
                LoquiXmlTranslation<Group<Miscellaneous>>.Instance.Write(
                    node: node,
                    item: item.Miscellaneous,
                    name: nameof(item.Miscellaneous),
                    fieldIndex: (int)OblivionMod_FieldIndex.Miscellaneous,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Miscellaneous));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Statics) ?? true))
            {
                LoquiXmlTranslation<Group<Static>>.Instance.Write(
                    node: node,
                    item: item.Statics,
                    name: nameof(item.Statics),
                    fieldIndex: (int)OblivionMod_FieldIndex.Statics,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Statics));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Grasses) ?? true))
            {
                LoquiXmlTranslation<Group<Grass>>.Instance.Write(
                    node: node,
                    item: item.Grasses,
                    name: nameof(item.Grasses),
                    fieldIndex: (int)OblivionMod_FieldIndex.Grasses,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Grasses));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Trees) ?? true))
            {
                LoquiXmlTranslation<Group<Tree>>.Instance.Write(
                    node: node,
                    item: item.Trees,
                    name: nameof(item.Trees),
                    fieldIndex: (int)OblivionMod_FieldIndex.Trees,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Trees));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Flora) ?? true))
            {
                LoquiXmlTranslation<Group<Flora>>.Instance.Write(
                    node: node,
                    item: item.Flora,
                    name: nameof(item.Flora),
                    fieldIndex: (int)OblivionMod_FieldIndex.Flora,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Flora));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Furnature) ?? true))
            {
                LoquiXmlTranslation<Group<Furnature>>.Instance.Write(
                    node: node,
                    item: item.Furnature,
                    name: nameof(item.Furnature),
                    fieldIndex: (int)OblivionMod_FieldIndex.Furnature,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Furnature));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Weapons) ?? true))
            {
                LoquiXmlTranslation<Group<Weapon>>.Instance.Write(
                    node: node,
                    item: item.Weapons,
                    name: nameof(item.Weapons),
                    fieldIndex: (int)OblivionMod_FieldIndex.Weapons,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Weapons));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Ammo) ?? true))
            {
                LoquiXmlTranslation<Group<Ammo>>.Instance.Write(
                    node: node,
                    item: item.Ammo,
                    name: nameof(item.Ammo),
                    fieldIndex: (int)OblivionMod_FieldIndex.Ammo,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Ammo));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.NPCs) ?? true))
            {
                LoquiXmlTranslation<Group<NPC>>.Instance.Write(
                    node: node,
                    item: item.NPCs,
                    name: nameof(item.NPCs),
                    fieldIndex: (int)OblivionMod_FieldIndex.NPCs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.NPCs));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Creatures) ?? true))
            {
                LoquiXmlTranslation<Group<Creature>>.Instance.Write(
                    node: node,
                    item: item.Creatures,
                    name: nameof(item.Creatures),
                    fieldIndex: (int)OblivionMod_FieldIndex.Creatures,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Creatures));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledCreatures) ?? true))
            {
                LoquiXmlTranslation<Group<LeveledCreature>>.Instance.Write(
                    node: node,
                    item: item.LeveledCreatures,
                    name: nameof(item.LeveledCreatures),
                    fieldIndex: (int)OblivionMod_FieldIndex.LeveledCreatures,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LeveledCreatures));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.SoulGems) ?? true))
            {
                LoquiXmlTranslation<Group<SoulGem>>.Instance.Write(
                    node: node,
                    item: item.SoulGems,
                    name: nameof(item.SoulGems),
                    fieldIndex: (int)OblivionMod_FieldIndex.SoulGems,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.SoulGems));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Keys) ?? true))
            {
                LoquiXmlTranslation<Group<Key>>.Instance.Write(
                    node: node,
                    item: item.Keys,
                    name: nameof(item.Keys),
                    fieldIndex: (int)OblivionMod_FieldIndex.Keys,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Keys));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Potions) ?? true))
            {
                LoquiXmlTranslation<Group<Potion>>.Instance.Write(
                    node: node,
                    item: item.Potions,
                    name: nameof(item.Potions),
                    fieldIndex: (int)OblivionMod_FieldIndex.Potions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Potions));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Subspaces) ?? true))
            {
                LoquiXmlTranslation<Group<Subspace>>.Instance.Write(
                    node: node,
                    item: item.Subspaces,
                    name: nameof(item.Subspaces),
                    fieldIndex: (int)OblivionMod_FieldIndex.Subspaces,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Subspaces));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.SigilStones) ?? true))
            {
                LoquiXmlTranslation<Group<SigilStone>>.Instance.Write(
                    node: node,
                    item: item.SigilStones,
                    name: nameof(item.SigilStones),
                    fieldIndex: (int)OblivionMod_FieldIndex.SigilStones,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.SigilStones));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledItems) ?? true))
            {
                LoquiXmlTranslation<Group<LeveledItem>>.Instance.Write(
                    node: node,
                    item: item.LeveledItems,
                    name: nameof(item.LeveledItems),
                    fieldIndex: (int)OblivionMod_FieldIndex.LeveledItems,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LeveledItems));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Weathers) ?? true))
            {
                LoquiXmlTranslation<Group<Weather>>.Instance.Write(
                    node: node,
                    item: item.Weathers,
                    name: nameof(item.Weathers),
                    fieldIndex: (int)OblivionMod_FieldIndex.Weathers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Weathers));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Climates) ?? true))
            {
                LoquiXmlTranslation<Group<Climate>>.Instance.Write(
                    node: node,
                    item: item.Climates,
                    name: nameof(item.Climates),
                    fieldIndex: (int)OblivionMod_FieldIndex.Climates,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Climates));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Regions) ?? true))
            {
                LoquiXmlTranslation<Group<Region>>.Instance.Write(
                    node: node,
                    item: item.Regions,
                    name: nameof(item.Regions),
                    fieldIndex: (int)OblivionMod_FieldIndex.Regions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Regions));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Cells) ?? true))
            {
                LoquiXmlTranslation<ListGroup<CellBlock>>.Instance.Write(
                    node: node,
                    item: item.Cells,
                    name: nameof(item.Cells),
                    fieldIndex: (int)OblivionMod_FieldIndex.Cells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Cells));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Worldspaces) ?? true))
            {
                LoquiXmlTranslation<Group<Worldspace>>.Instance.Write(
                    node: node,
                    item: item.Worldspaces,
                    name: nameof(item.Worldspaces),
                    fieldIndex: (int)OblivionMod_FieldIndex.Worldspaces,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Worldspaces));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.DialogTopics) ?? true))
            {
                LoquiXmlTranslation<Group<DialogTopic>>.Instance.Write(
                    node: node,
                    item: item.DialogTopics,
                    name: nameof(item.DialogTopics),
                    fieldIndex: (int)OblivionMod_FieldIndex.DialogTopics,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.DialogTopics));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Quests) ?? true))
            {
                LoquiXmlTranslation<Group<Quest>>.Instance.Write(
                    node: node,
                    item: item.Quests,
                    name: nameof(item.Quests),
                    fieldIndex: (int)OblivionMod_FieldIndex.Quests,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Quests));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.IdleAnimations) ?? true))
            {
                LoquiXmlTranslation<Group<IdleAnimation>>.Instance.Write(
                    node: node,
                    item: item.IdleAnimations,
                    name: nameof(item.IdleAnimations),
                    fieldIndex: (int)OblivionMod_FieldIndex.IdleAnimations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.IdleAnimations));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AIPackages) ?? true))
            {
                LoquiXmlTranslation<Group<AIPackage>>.Instance.Write(
                    node: node,
                    item: item.AIPackages,
                    name: nameof(item.AIPackages),
                    fieldIndex: (int)OblivionMod_FieldIndex.AIPackages,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.AIPackages));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.CombatStyles) ?? true))
            {
                LoquiXmlTranslation<Group<CombatStyle>>.Instance.Write(
                    node: node,
                    item: item.CombatStyles,
                    name: nameof(item.CombatStyles),
                    fieldIndex: (int)OblivionMod_FieldIndex.CombatStyles,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.CombatStyles));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LoadScreens) ?? true))
            {
                LoquiXmlTranslation<Group<LoadScreen>>.Instance.Write(
                    node: node,
                    item: item.LoadScreens,
                    name: nameof(item.LoadScreens),
                    fieldIndex: (int)OblivionMod_FieldIndex.LoadScreens,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LoadScreens));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledSpells) ?? true))
            {
                LoquiXmlTranslation<Group<LeveledSpell>>.Instance.Write(
                    node: node,
                    item: item.LeveledSpells,
                    name: nameof(item.LeveledSpells),
                    fieldIndex: (int)OblivionMod_FieldIndex.LeveledSpells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LeveledSpells));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AnimatedObjects) ?? true))
            {
                LoquiXmlTranslation<Group<AnimatedObject>>.Instance.Write(
                    node: node,
                    item: item.AnimatedObjects,
                    name: nameof(item.AnimatedObjects),
                    fieldIndex: (int)OblivionMod_FieldIndex.AnimatedObjects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.AnimatedObjects));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Waters) ?? true))
            {
                LoquiXmlTranslation<Group<Water>>.Instance.Write(
                    node: node,
                    item: item.Waters,
                    name: nameof(item.Waters),
                    fieldIndex: (int)OblivionMod_FieldIndex.Waters,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Waters));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.EffectShaders) ?? true))
            {
                LoquiXmlTranslation<Group<EffectShader>>.Instance.Write(
                    node: node,
                    item: item.EffectShaders,
                    name: nameof(item.EffectShaders),
                    fieldIndex: (int)OblivionMod_FieldIndex.EffectShaders,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.EffectShaders));
            }
        }

        public static void FillPublic_Xml(
            this OblivionMod item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    OblivionModCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this OblivionMod item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "GameSettings":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.GameSettings);
                        item.GameSettings.CopyFieldsFrom<GameSetting_CopyMask>(
                            rhs: Group<GameSetting>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Globals":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Globals);
                        item.Globals.CopyFieldsFrom<Global_CopyMask>(
                            rhs: Group<Global>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Classes":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Classes);
                        item.Classes.CopyFieldsFrom<Class_CopyMask>(
                            rhs: Group<Class>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Factions":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Factions);
                        item.Factions.CopyFieldsFrom<Faction_CopyMask>(
                            rhs: Group<Faction>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hairs":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Hairs);
                        item.Hairs.CopyFieldsFrom<Hair_CopyMask>(
                            rhs: Group<Hair>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eyes":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Eyes);
                        item.Eyes.CopyFieldsFrom<Eye_CopyMask>(
                            rhs: Group<Eye>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Races":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Races);
                        item.Races.CopyFieldsFrom<Race_CopyMask>(
                            rhs: Group<Race>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Sounds);
                        item.Sounds.CopyFieldsFrom<Sound_CopyMask>(
                            rhs: Group<Sound>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Skills":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Skills);
                        item.Skills.CopyFieldsFrom<SkillRecord_CopyMask>(
                            rhs: Group<SkillRecord>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MagicEffects":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.MagicEffects);
                        item.MagicEffects.CopyFieldsFrom<MagicEffect_CopyMask>(
                            rhs: Group<MagicEffect>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Scripts":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Scripts);
                        item.Scripts.CopyFieldsFrom<Script_CopyMask>(
                            rhs: Group<Script>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LandTextures":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.LandTextures);
                        item.LandTextures.CopyFieldsFrom<LandTexture_CopyMask>(
                            rhs: Group<LandTexture>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Enchantments":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Enchantments);
                        item.Enchantments.CopyFieldsFrom<Enchantment_CopyMask>(
                            rhs: Group<Enchantment>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Spells":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Spells);
                        item.Spells.CopyFieldsFrom<SpellUnleveled_CopyMask>(
                            rhs: Group<SpellUnleveled>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Birthsigns":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Birthsigns);
                        item.Birthsigns.CopyFieldsFrom<Birthsign_CopyMask>(
                            rhs: Group<Birthsign>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Activators":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Activators);
                        item.Activators.CopyFieldsFrom<Activator_CopyMask>(
                            rhs: Group<Activator>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AlchemicalApparatus":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.AlchemicalApparatus);
                        item.AlchemicalApparatus.CopyFieldsFrom<AlchemicalApparatus_CopyMask>(
                            rhs: Group<AlchemicalApparatus>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Armors":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Armors);
                        item.Armors.CopyFieldsFrom<Armor_CopyMask>(
                            rhs: Group<Armor>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Books":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Books);
                        item.Books.CopyFieldsFrom<Book_CopyMask>(
                            rhs: Group<Book>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Clothes":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Clothes);
                        item.Clothes.CopyFieldsFrom<Clothing_CopyMask>(
                            rhs: Group<Clothing>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Containers":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Containers);
                        item.Containers.CopyFieldsFrom<Container_CopyMask>(
                            rhs: Group<Container>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Doors":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Doors);
                        item.Doors.CopyFieldsFrom<Door_CopyMask>(
                            rhs: Group<Door>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ingredients":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Ingredients);
                        item.Ingredients.CopyFieldsFrom<Ingredient_CopyMask>(
                            rhs: Group<Ingredient>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Lights":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Lights);
                        item.Lights.CopyFieldsFrom<Light_CopyMask>(
                            rhs: Group<Light>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Miscellaneous":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Miscellaneous);
                        item.Miscellaneous.CopyFieldsFrom<Miscellaneous_CopyMask>(
                            rhs: Group<Miscellaneous>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Statics":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Statics);
                        item.Statics.CopyFieldsFrom<Static_CopyMask>(
                            rhs: Group<Static>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Grasses":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Grasses);
                        item.Grasses.CopyFieldsFrom<Grass_CopyMask>(
                            rhs: Group<Grass>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Trees":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Trees);
                        item.Trees.CopyFieldsFrom<Tree_CopyMask>(
                            rhs: Group<Tree>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flora":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Flora);
                        item.Flora.CopyFieldsFrom<Flora_CopyMask>(
                            rhs: Group<Flora>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Furnature":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Furnature);
                        item.Furnature.CopyFieldsFrom<Furnature_CopyMask>(
                            rhs: Group<Furnature>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weapons":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Weapons);
                        item.Weapons.CopyFieldsFrom<Weapon_CopyMask>(
                            rhs: Group<Weapon>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ammo":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Ammo);
                        item.Ammo.CopyFieldsFrom<Ammo_CopyMask>(
                            rhs: Group<Ammo>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NPCs":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.NPCs);
                        item.NPCs.CopyFieldsFrom<NPC_CopyMask>(
                            rhs: Group<NPC>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Creatures":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Creatures);
                        item.Creatures.CopyFieldsFrom<Creature_CopyMask>(
                            rhs: Group<Creature>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeveledCreatures":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledCreatures);
                        item.LeveledCreatures.CopyFieldsFrom<LeveledCreature_CopyMask>(
                            rhs: Group<LeveledCreature>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SoulGems":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.SoulGems);
                        item.SoulGems.CopyFieldsFrom<SoulGem_CopyMask>(
                            rhs: Group<SoulGem>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Keys":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Keys);
                        item.Keys.CopyFieldsFrom<Key_CopyMask>(
                            rhs: Group<Key>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Potions":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Potions);
                        item.Potions.CopyFieldsFrom<Potion_CopyMask>(
                            rhs: Group<Potion>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Subspaces":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Subspaces);
                        item.Subspaces.CopyFieldsFrom<Subspace_CopyMask>(
                            rhs: Group<Subspace>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SigilStones":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.SigilStones);
                        item.SigilStones.CopyFieldsFrom<SigilStone_CopyMask>(
                            rhs: Group<SigilStone>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeveledItems":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledItems);
                        item.LeveledItems.CopyFieldsFrom<LeveledItem_CopyMask>(
                            rhs: Group<LeveledItem>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weathers":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Weathers);
                        item.Weathers.CopyFieldsFrom<Weather_CopyMask>(
                            rhs: Group<Weather>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Climates":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Climates);
                        item.Climates.CopyFieldsFrom<Climate_CopyMask>(
                            rhs: Group<Climate>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Regions":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Regions);
                        item.Regions.CopyFieldsFrom<Region_CopyMask>(
                            rhs: Group<Region>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Worldspaces":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Worldspaces);
                        item.Worldspaces.CopyFieldsFrom<Worldspace_CopyMask>(
                            rhs: Group<Worldspace>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DialogTopics":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.DialogTopics);
                        item.DialogTopics.CopyFieldsFrom<DialogTopic_CopyMask>(
                            rhs: Group<DialogTopic>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Quests":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Quests);
                        item.Quests.CopyFieldsFrom<Quest_CopyMask>(
                            rhs: Group<Quest>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IdleAnimations":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.IdleAnimations);
                        item.IdleAnimations.CopyFieldsFrom<IdleAnimation_CopyMask>(
                            rhs: Group<IdleAnimation>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AIPackages":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.AIPackages);
                        item.AIPackages.CopyFieldsFrom<AIPackage_CopyMask>(
                            rhs: Group<AIPackage>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CombatStyles":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.CombatStyles);
                        item.CombatStyles.CopyFieldsFrom<CombatStyle_CopyMask>(
                            rhs: Group<CombatStyle>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LoadScreens":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.LoadScreens);
                        item.LoadScreens.CopyFieldsFrom<LoadScreen_CopyMask>(
                            rhs: Group<LoadScreen>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeveledSpells":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledSpells);
                        item.LeveledSpells.CopyFieldsFrom<LeveledSpell_CopyMask>(
                            rhs: Group<LeveledSpell>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AnimatedObjects":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.AnimatedObjects);
                        item.AnimatedObjects.CopyFieldsFrom<AnimatedObject_CopyMask>(
                            rhs: Group<AnimatedObject>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Waters":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Waters);
                        item.Waters.CopyFieldsFrom<Water_CopyMask>(
                            rhs: Group<Water>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EffectShaders":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.EffectShaders);
                        item.EffectShaders.CopyFieldsFrom<EffectShader_CopyMask>(
                            rhs: Group<EffectShader>.Create_Xml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            OblivionMod item,
            ModKey modKey,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out OblivionMod_ErrorMask errorMask,
            GroupMask importMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                importMask: importMask,
                modKey: modKey,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = OblivionMod_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            OblivionMod item,
            ModKey modKey,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                importMask: importMask,
                modKey: modKey,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            OblivionMod item,
            MutagenWriter writer,
            GroupMask importMask,
            ModKey modKey,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MasterReferences masterReferences = new MasterReferences(item.TES4.MasterReferences, modKey);
            if (item.TES4_IsSet)
            {
                LoquiBinaryTranslation<TES4>.Instance.Write(
                    writer: writer,
                    item: item.TES4,
                    fieldIndex: (int)OblivionMod_FieldIndex.TES4,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
            if (importMask?.GameSettings ?? true)
            {
                if (item.GameSettings.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<GameSetting>>.Instance.Write(
                        writer: writer,
                        item: item.GameSettings,
                        fieldIndex: (int)OblivionMod_FieldIndex.GameSettings,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Globals ?? true)
            {
                if (item.Globals.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Global>>.Instance.Write(
                        writer: writer,
                        item: item.Globals,
                        fieldIndex: (int)OblivionMod_FieldIndex.Globals,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Classes ?? true)
            {
                if (item.Classes.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Class>>.Instance.Write(
                        writer: writer,
                        item: item.Classes,
                        fieldIndex: (int)OblivionMod_FieldIndex.Classes,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Factions ?? true)
            {
                if (item.Factions.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Faction>>.Instance.Write(
                        writer: writer,
                        item: item.Factions,
                        fieldIndex: (int)OblivionMod_FieldIndex.Factions,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Hairs ?? true)
            {
                if (item.Hairs.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Hair>>.Instance.Write(
                        writer: writer,
                        item: item.Hairs,
                        fieldIndex: (int)OblivionMod_FieldIndex.Hairs,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Eyes ?? true)
            {
                if (item.Eyes.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Eye>>.Instance.Write(
                        writer: writer,
                        item: item.Eyes,
                        fieldIndex: (int)OblivionMod_FieldIndex.Eyes,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Races ?? true)
            {
                if (item.Races.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Race>>.Instance.Write(
                        writer: writer,
                        item: item.Races,
                        fieldIndex: (int)OblivionMod_FieldIndex.Races,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Sounds ?? true)
            {
                if (item.Sounds.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Sound>>.Instance.Write(
                        writer: writer,
                        item: item.Sounds,
                        fieldIndex: (int)OblivionMod_FieldIndex.Sounds,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Skills ?? true)
            {
                if (item.Skills.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<SkillRecord>>.Instance.Write(
                        writer: writer,
                        item: item.Skills,
                        fieldIndex: (int)OblivionMod_FieldIndex.Skills,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.MagicEffects ?? true)
            {
                if (item.MagicEffects.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<MagicEffect>>.Instance.Write(
                        writer: writer,
                        item: item.MagicEffects,
                        fieldIndex: (int)OblivionMod_FieldIndex.MagicEffects,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Scripts ?? true)
            {
                if (item.Scripts.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Script>>.Instance.Write(
                        writer: writer,
                        item: item.Scripts,
                        fieldIndex: (int)OblivionMod_FieldIndex.Scripts,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.LandTextures ?? true)
            {
                if (item.LandTextures.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<LandTexture>>.Instance.Write(
                        writer: writer,
                        item: item.LandTextures,
                        fieldIndex: (int)OblivionMod_FieldIndex.LandTextures,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Enchantments ?? true)
            {
                if (item.Enchantments.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Enchantment>>.Instance.Write(
                        writer: writer,
                        item: item.Enchantments,
                        fieldIndex: (int)OblivionMod_FieldIndex.Enchantments,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Spells ?? true)
            {
                if (item.Spells.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<SpellUnleveled>>.Instance.Write(
                        writer: writer,
                        item: item.Spells,
                        fieldIndex: (int)OblivionMod_FieldIndex.Spells,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Birthsigns ?? true)
            {
                if (item.Birthsigns.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Birthsign>>.Instance.Write(
                        writer: writer,
                        item: item.Birthsigns,
                        fieldIndex: (int)OblivionMod_FieldIndex.Birthsigns,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Activators ?? true)
            {
                if (item.Activators.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Activator>>.Instance.Write(
                        writer: writer,
                        item: item.Activators,
                        fieldIndex: (int)OblivionMod_FieldIndex.Activators,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.AlchemicalApparatus ?? true)
            {
                if (item.AlchemicalApparatus.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<AlchemicalApparatus>>.Instance.Write(
                        writer: writer,
                        item: item.AlchemicalApparatus,
                        fieldIndex: (int)OblivionMod_FieldIndex.AlchemicalApparatus,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Armors ?? true)
            {
                if (item.Armors.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Armor>>.Instance.Write(
                        writer: writer,
                        item: item.Armors,
                        fieldIndex: (int)OblivionMod_FieldIndex.Armors,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Books ?? true)
            {
                if (item.Books.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Book>>.Instance.Write(
                        writer: writer,
                        item: item.Books,
                        fieldIndex: (int)OblivionMod_FieldIndex.Books,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Clothes ?? true)
            {
                if (item.Clothes.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Clothing>>.Instance.Write(
                        writer: writer,
                        item: item.Clothes,
                        fieldIndex: (int)OblivionMod_FieldIndex.Clothes,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Containers ?? true)
            {
                if (item.Containers.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Container>>.Instance.Write(
                        writer: writer,
                        item: item.Containers,
                        fieldIndex: (int)OblivionMod_FieldIndex.Containers,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Doors ?? true)
            {
                if (item.Doors.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Door>>.Instance.Write(
                        writer: writer,
                        item: item.Doors,
                        fieldIndex: (int)OblivionMod_FieldIndex.Doors,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Ingredients ?? true)
            {
                if (item.Ingredients.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Ingredient>>.Instance.Write(
                        writer: writer,
                        item: item.Ingredients,
                        fieldIndex: (int)OblivionMod_FieldIndex.Ingredients,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Lights ?? true)
            {
                if (item.Lights.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Light>>.Instance.Write(
                        writer: writer,
                        item: item.Lights,
                        fieldIndex: (int)OblivionMod_FieldIndex.Lights,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Miscellaneous ?? true)
            {
                if (item.Miscellaneous.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Miscellaneous>>.Instance.Write(
                        writer: writer,
                        item: item.Miscellaneous,
                        fieldIndex: (int)OblivionMod_FieldIndex.Miscellaneous,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Statics ?? true)
            {
                if (item.Statics.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Static>>.Instance.Write(
                        writer: writer,
                        item: item.Statics,
                        fieldIndex: (int)OblivionMod_FieldIndex.Statics,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Grasses ?? true)
            {
                if (item.Grasses.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Grass>>.Instance.Write(
                        writer: writer,
                        item: item.Grasses,
                        fieldIndex: (int)OblivionMod_FieldIndex.Grasses,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Trees ?? true)
            {
                if (item.Trees.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Tree>>.Instance.Write(
                        writer: writer,
                        item: item.Trees,
                        fieldIndex: (int)OblivionMod_FieldIndex.Trees,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Flora ?? true)
            {
                if (item.Flora.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Flora>>.Instance.Write(
                        writer: writer,
                        item: item.Flora,
                        fieldIndex: (int)OblivionMod_FieldIndex.Flora,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Furnature ?? true)
            {
                if (item.Furnature.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Furnature>>.Instance.Write(
                        writer: writer,
                        item: item.Furnature,
                        fieldIndex: (int)OblivionMod_FieldIndex.Furnature,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Weapons ?? true)
            {
                if (item.Weapons.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Weapon>>.Instance.Write(
                        writer: writer,
                        item: item.Weapons,
                        fieldIndex: (int)OblivionMod_FieldIndex.Weapons,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Ammo ?? true)
            {
                if (item.Ammo.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Ammo>>.Instance.Write(
                        writer: writer,
                        item: item.Ammo,
                        fieldIndex: (int)OblivionMod_FieldIndex.Ammo,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.NPCs ?? true)
            {
                if (item.NPCs.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<NPC>>.Instance.Write(
                        writer: writer,
                        item: item.NPCs,
                        fieldIndex: (int)OblivionMod_FieldIndex.NPCs,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Creatures ?? true)
            {
                if (item.Creatures.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Creature>>.Instance.Write(
                        writer: writer,
                        item: item.Creatures,
                        fieldIndex: (int)OblivionMod_FieldIndex.Creatures,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.LeveledCreatures ?? true)
            {
                if (item.LeveledCreatures.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<LeveledCreature>>.Instance.Write(
                        writer: writer,
                        item: item.LeveledCreatures,
                        fieldIndex: (int)OblivionMod_FieldIndex.LeveledCreatures,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.SoulGems ?? true)
            {
                if (item.SoulGems.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<SoulGem>>.Instance.Write(
                        writer: writer,
                        item: item.SoulGems,
                        fieldIndex: (int)OblivionMod_FieldIndex.SoulGems,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Keys ?? true)
            {
                if (item.Keys.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Key>>.Instance.Write(
                        writer: writer,
                        item: item.Keys,
                        fieldIndex: (int)OblivionMod_FieldIndex.Keys,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Potions ?? true)
            {
                if (item.Potions.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Potion>>.Instance.Write(
                        writer: writer,
                        item: item.Potions,
                        fieldIndex: (int)OblivionMod_FieldIndex.Potions,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Subspaces ?? true)
            {
                if (item.Subspaces.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Subspace>>.Instance.Write(
                        writer: writer,
                        item: item.Subspaces,
                        fieldIndex: (int)OblivionMod_FieldIndex.Subspaces,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.SigilStones ?? true)
            {
                if (item.SigilStones.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<SigilStone>>.Instance.Write(
                        writer: writer,
                        item: item.SigilStones,
                        fieldIndex: (int)OblivionMod_FieldIndex.SigilStones,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.LeveledItems ?? true)
            {
                if (item.LeveledItems.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<LeveledItem>>.Instance.Write(
                        writer: writer,
                        item: item.LeveledItems,
                        fieldIndex: (int)OblivionMod_FieldIndex.LeveledItems,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Weathers ?? true)
            {
                if (item.Weathers.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Weather>>.Instance.Write(
                        writer: writer,
                        item: item.Weathers,
                        fieldIndex: (int)OblivionMod_FieldIndex.Weathers,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Climates ?? true)
            {
                if (item.Climates.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Climate>>.Instance.Write(
                        writer: writer,
                        item: item.Climates,
                        fieldIndex: (int)OblivionMod_FieldIndex.Climates,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Regions ?? true)
            {
                if (item.Regions.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Region>>.Instance.Write(
                        writer: writer,
                        item: item.Regions,
                        fieldIndex: (int)OblivionMod_FieldIndex.Regions,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Cells ?? true)
            {
                if (item.Cells.Items.Count > 0)
                {
                    LoquiBinaryTranslation<ListGroup<CellBlock>>.Instance.Write(
                        writer: writer,
                        item: item.Cells,
                        fieldIndex: (int)OblivionMod_FieldIndex.Cells,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Worldspaces ?? true)
            {
                if (item.Worldspaces.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Worldspace>>.Instance.Write(
                        writer: writer,
                        item: item.Worldspaces,
                        fieldIndex: (int)OblivionMod_FieldIndex.Worldspaces,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.DialogTopics ?? true)
            {
                if (item.DialogTopics.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<DialogTopic>>.Instance.Write(
                        writer: writer,
                        item: item.DialogTopics,
                        fieldIndex: (int)OblivionMod_FieldIndex.DialogTopics,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Quests ?? true)
            {
                if (item.Quests.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Quest>>.Instance.Write(
                        writer: writer,
                        item: item.Quests,
                        fieldIndex: (int)OblivionMod_FieldIndex.Quests,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.IdleAnimations ?? true)
            {
                if (item.IdleAnimations.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<IdleAnimation>>.Instance.Write(
                        writer: writer,
                        item: item.IdleAnimations,
                        fieldIndex: (int)OblivionMod_FieldIndex.IdleAnimations,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.AIPackages ?? true)
            {
                if (item.AIPackages.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<AIPackage>>.Instance.Write(
                        writer: writer,
                        item: item.AIPackages,
                        fieldIndex: (int)OblivionMod_FieldIndex.AIPackages,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.CombatStyles ?? true)
            {
                if (item.CombatStyles.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<CombatStyle>>.Instance.Write(
                        writer: writer,
                        item: item.CombatStyles,
                        fieldIndex: (int)OblivionMod_FieldIndex.CombatStyles,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.LoadScreens ?? true)
            {
                if (item.LoadScreens.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<LoadScreen>>.Instance.Write(
                        writer: writer,
                        item: item.LoadScreens,
                        fieldIndex: (int)OblivionMod_FieldIndex.LoadScreens,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.LeveledSpells ?? true)
            {
                if (item.LeveledSpells.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<LeveledSpell>>.Instance.Write(
                        writer: writer,
                        item: item.LeveledSpells,
                        fieldIndex: (int)OblivionMod_FieldIndex.LeveledSpells,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.AnimatedObjects ?? true)
            {
                if (item.AnimatedObjects.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<AnimatedObject>>.Instance.Write(
                        writer: writer,
                        item: item.AnimatedObjects,
                        fieldIndex: (int)OblivionMod_FieldIndex.AnimatedObjects,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.Waters ?? true)
            {
                if (item.Waters.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<Water>>.Instance.Write(
                        writer: writer,
                        item: item.Waters,
                        fieldIndex: (int)OblivionMod_FieldIndex.Waters,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (importMask?.EffectShaders ?? true)
            {
                if (item.EffectShaders.Items.Count > 0)
                {
                    LoquiBinaryTranslation<Group<EffectShader>>.Instance.Write(
                        writer: writer,
                        item: item.EffectShaders,
                        fieldIndex: (int)OblivionMod_FieldIndex.EffectShaders,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class OblivionMod_Mask<T> : IMask<T>, IEquatable<OblivionMod_Mask<T>>
    {
        #region Ctors
        public OblivionMod_Mask()
        {
        }

        public OblivionMod_Mask(T initialValue)
        {
            this.TES4 = new MaskItem<T, TES4_Mask<T>>(initialValue, new TES4_Mask<T>(initialValue));
            this.GameSettings = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Globals = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Classes = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Factions = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Hairs = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Eyes = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Races = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Sounds = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Skills = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.MagicEffects = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Scripts = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.LandTextures = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Enchantments = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Spells = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Birthsigns = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Activators = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.AlchemicalApparatus = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Armors = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Books = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Clothes = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Containers = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Doors = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Ingredients = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Lights = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Miscellaneous = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Statics = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Grasses = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Trees = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Flora = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Furnature = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Weapons = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Ammo = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.NPCs = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Creatures = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.LeveledCreatures = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.SoulGems = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Keys = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Potions = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Subspaces = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.SigilStones = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.LeveledItems = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Weathers = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Climates = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Regions = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Cells = new MaskItem<T, ListGroup_Mask<T>>(initialValue, new ListGroup_Mask<T>(initialValue));
            this.Worldspaces = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.DialogTopics = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Quests = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.IdleAnimations = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.AIPackages = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.CombatStyles = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.LoadScreens = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.LeveledSpells = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.AnimatedObjects = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Waters = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.EffectShaders = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public MaskItem<T, TES4_Mask<T>> TES4 { get; set; }
        public MaskItem<T, Group_Mask<T>> GameSettings { get; set; }
        public MaskItem<T, Group_Mask<T>> Globals { get; set; }
        public MaskItem<T, Group_Mask<T>> Classes { get; set; }
        public MaskItem<T, Group_Mask<T>> Factions { get; set; }
        public MaskItem<T, Group_Mask<T>> Hairs { get; set; }
        public MaskItem<T, Group_Mask<T>> Eyes { get; set; }
        public MaskItem<T, Group_Mask<T>> Races { get; set; }
        public MaskItem<T, Group_Mask<T>> Sounds { get; set; }
        public MaskItem<T, Group_Mask<T>> Skills { get; set; }
        public MaskItem<T, Group_Mask<T>> MagicEffects { get; set; }
        public MaskItem<T, Group_Mask<T>> Scripts { get; set; }
        public MaskItem<T, Group_Mask<T>> LandTextures { get; set; }
        public MaskItem<T, Group_Mask<T>> Enchantments { get; set; }
        public MaskItem<T, Group_Mask<T>> Spells { get; set; }
        public MaskItem<T, Group_Mask<T>> Birthsigns { get; set; }
        public MaskItem<T, Group_Mask<T>> Activators { get; set; }
        public MaskItem<T, Group_Mask<T>> AlchemicalApparatus { get; set; }
        public MaskItem<T, Group_Mask<T>> Armors { get; set; }
        public MaskItem<T, Group_Mask<T>> Books { get; set; }
        public MaskItem<T, Group_Mask<T>> Clothes { get; set; }
        public MaskItem<T, Group_Mask<T>> Containers { get; set; }
        public MaskItem<T, Group_Mask<T>> Doors { get; set; }
        public MaskItem<T, Group_Mask<T>> Ingredients { get; set; }
        public MaskItem<T, Group_Mask<T>> Lights { get; set; }
        public MaskItem<T, Group_Mask<T>> Miscellaneous { get; set; }
        public MaskItem<T, Group_Mask<T>> Statics { get; set; }
        public MaskItem<T, Group_Mask<T>> Grasses { get; set; }
        public MaskItem<T, Group_Mask<T>> Trees { get; set; }
        public MaskItem<T, Group_Mask<T>> Flora { get; set; }
        public MaskItem<T, Group_Mask<T>> Furnature { get; set; }
        public MaskItem<T, Group_Mask<T>> Weapons { get; set; }
        public MaskItem<T, Group_Mask<T>> Ammo { get; set; }
        public MaskItem<T, Group_Mask<T>> NPCs { get; set; }
        public MaskItem<T, Group_Mask<T>> Creatures { get; set; }
        public MaskItem<T, Group_Mask<T>> LeveledCreatures { get; set; }
        public MaskItem<T, Group_Mask<T>> SoulGems { get; set; }
        public MaskItem<T, Group_Mask<T>> Keys { get; set; }
        public MaskItem<T, Group_Mask<T>> Potions { get; set; }
        public MaskItem<T, Group_Mask<T>> Subspaces { get; set; }
        public MaskItem<T, Group_Mask<T>> SigilStones { get; set; }
        public MaskItem<T, Group_Mask<T>> LeveledItems { get; set; }
        public MaskItem<T, Group_Mask<T>> Weathers { get; set; }
        public MaskItem<T, Group_Mask<T>> Climates { get; set; }
        public MaskItem<T, Group_Mask<T>> Regions { get; set; }
        public MaskItem<T, ListGroup_Mask<T>> Cells { get; set; }
        public MaskItem<T, Group_Mask<T>> Worldspaces { get; set; }
        public MaskItem<T, Group_Mask<T>> DialogTopics { get; set; }
        public MaskItem<T, Group_Mask<T>> Quests { get; set; }
        public MaskItem<T, Group_Mask<T>> IdleAnimations { get; set; }
        public MaskItem<T, Group_Mask<T>> AIPackages { get; set; }
        public MaskItem<T, Group_Mask<T>> CombatStyles { get; set; }
        public MaskItem<T, Group_Mask<T>> LoadScreens { get; set; }
        public MaskItem<T, Group_Mask<T>> LeveledSpells { get; set; }
        public MaskItem<T, Group_Mask<T>> AnimatedObjects { get; set; }
        public MaskItem<T, Group_Mask<T>> Waters { get; set; }
        public MaskItem<T, Group_Mask<T>> EffectShaders { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is OblivionMod_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(OblivionMod_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.TES4, rhs.TES4)) return false;
            if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
            if (!object.Equals(this.Globals, rhs.Globals)) return false;
            if (!object.Equals(this.Classes, rhs.Classes)) return false;
            if (!object.Equals(this.Factions, rhs.Factions)) return false;
            if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
            if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
            if (!object.Equals(this.Races, rhs.Races)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            if (!object.Equals(this.Skills, rhs.Skills)) return false;
            if (!object.Equals(this.MagicEffects, rhs.MagicEffects)) return false;
            if (!object.Equals(this.Scripts, rhs.Scripts)) return false;
            if (!object.Equals(this.LandTextures, rhs.LandTextures)) return false;
            if (!object.Equals(this.Enchantments, rhs.Enchantments)) return false;
            if (!object.Equals(this.Spells, rhs.Spells)) return false;
            if (!object.Equals(this.Birthsigns, rhs.Birthsigns)) return false;
            if (!object.Equals(this.Activators, rhs.Activators)) return false;
            if (!object.Equals(this.AlchemicalApparatus, rhs.AlchemicalApparatus)) return false;
            if (!object.Equals(this.Armors, rhs.Armors)) return false;
            if (!object.Equals(this.Books, rhs.Books)) return false;
            if (!object.Equals(this.Clothes, rhs.Clothes)) return false;
            if (!object.Equals(this.Containers, rhs.Containers)) return false;
            if (!object.Equals(this.Doors, rhs.Doors)) return false;
            if (!object.Equals(this.Ingredients, rhs.Ingredients)) return false;
            if (!object.Equals(this.Lights, rhs.Lights)) return false;
            if (!object.Equals(this.Miscellaneous, rhs.Miscellaneous)) return false;
            if (!object.Equals(this.Statics, rhs.Statics)) return false;
            if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
            if (!object.Equals(this.Trees, rhs.Trees)) return false;
            if (!object.Equals(this.Flora, rhs.Flora)) return false;
            if (!object.Equals(this.Furnature, rhs.Furnature)) return false;
            if (!object.Equals(this.Weapons, rhs.Weapons)) return false;
            if (!object.Equals(this.Ammo, rhs.Ammo)) return false;
            if (!object.Equals(this.NPCs, rhs.NPCs)) return false;
            if (!object.Equals(this.Creatures, rhs.Creatures)) return false;
            if (!object.Equals(this.LeveledCreatures, rhs.LeveledCreatures)) return false;
            if (!object.Equals(this.SoulGems, rhs.SoulGems)) return false;
            if (!object.Equals(this.Keys, rhs.Keys)) return false;
            if (!object.Equals(this.Potions, rhs.Potions)) return false;
            if (!object.Equals(this.Subspaces, rhs.Subspaces)) return false;
            if (!object.Equals(this.SigilStones, rhs.SigilStones)) return false;
            if (!object.Equals(this.LeveledItems, rhs.LeveledItems)) return false;
            if (!object.Equals(this.Weathers, rhs.Weathers)) return false;
            if (!object.Equals(this.Climates, rhs.Climates)) return false;
            if (!object.Equals(this.Regions, rhs.Regions)) return false;
            if (!object.Equals(this.Cells, rhs.Cells)) return false;
            if (!object.Equals(this.Worldspaces, rhs.Worldspaces)) return false;
            if (!object.Equals(this.DialogTopics, rhs.DialogTopics)) return false;
            if (!object.Equals(this.Quests, rhs.Quests)) return false;
            if (!object.Equals(this.IdleAnimations, rhs.IdleAnimations)) return false;
            if (!object.Equals(this.AIPackages, rhs.AIPackages)) return false;
            if (!object.Equals(this.CombatStyles, rhs.CombatStyles)) return false;
            if (!object.Equals(this.LoadScreens, rhs.LoadScreens)) return false;
            if (!object.Equals(this.LeveledSpells, rhs.LeveledSpells)) return false;
            if (!object.Equals(this.AnimatedObjects, rhs.AnimatedObjects)) return false;
            if (!object.Equals(this.Waters, rhs.Waters)) return false;
            if (!object.Equals(this.EffectShaders, rhs.EffectShaders)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.TES4?.GetHashCode());
            ret = ret.CombineHashCode(this.GameSettings?.GetHashCode());
            ret = ret.CombineHashCode(this.Globals?.GetHashCode());
            ret = ret.CombineHashCode(this.Classes?.GetHashCode());
            ret = ret.CombineHashCode(this.Factions?.GetHashCode());
            ret = ret.CombineHashCode(this.Hairs?.GetHashCode());
            ret = ret.CombineHashCode(this.Eyes?.GetHashCode());
            ret = ret.CombineHashCode(this.Races?.GetHashCode());
            ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
            ret = ret.CombineHashCode(this.Skills?.GetHashCode());
            ret = ret.CombineHashCode(this.MagicEffects?.GetHashCode());
            ret = ret.CombineHashCode(this.Scripts?.GetHashCode());
            ret = ret.CombineHashCode(this.LandTextures?.GetHashCode());
            ret = ret.CombineHashCode(this.Enchantments?.GetHashCode());
            ret = ret.CombineHashCode(this.Spells?.GetHashCode());
            ret = ret.CombineHashCode(this.Birthsigns?.GetHashCode());
            ret = ret.CombineHashCode(this.Activators?.GetHashCode());
            ret = ret.CombineHashCode(this.AlchemicalApparatus?.GetHashCode());
            ret = ret.CombineHashCode(this.Armors?.GetHashCode());
            ret = ret.CombineHashCode(this.Books?.GetHashCode());
            ret = ret.CombineHashCode(this.Clothes?.GetHashCode());
            ret = ret.CombineHashCode(this.Containers?.GetHashCode());
            ret = ret.CombineHashCode(this.Doors?.GetHashCode());
            ret = ret.CombineHashCode(this.Ingredients?.GetHashCode());
            ret = ret.CombineHashCode(this.Lights?.GetHashCode());
            ret = ret.CombineHashCode(this.Miscellaneous?.GetHashCode());
            ret = ret.CombineHashCode(this.Statics?.GetHashCode());
            ret = ret.CombineHashCode(this.Grasses?.GetHashCode());
            ret = ret.CombineHashCode(this.Trees?.GetHashCode());
            ret = ret.CombineHashCode(this.Flora?.GetHashCode());
            ret = ret.CombineHashCode(this.Furnature?.GetHashCode());
            ret = ret.CombineHashCode(this.Weapons?.GetHashCode());
            ret = ret.CombineHashCode(this.Ammo?.GetHashCode());
            ret = ret.CombineHashCode(this.NPCs?.GetHashCode());
            ret = ret.CombineHashCode(this.Creatures?.GetHashCode());
            ret = ret.CombineHashCode(this.LeveledCreatures?.GetHashCode());
            ret = ret.CombineHashCode(this.SoulGems?.GetHashCode());
            ret = ret.CombineHashCode(this.Keys?.GetHashCode());
            ret = ret.CombineHashCode(this.Potions?.GetHashCode());
            ret = ret.CombineHashCode(this.Subspaces?.GetHashCode());
            ret = ret.CombineHashCode(this.SigilStones?.GetHashCode());
            ret = ret.CombineHashCode(this.LeveledItems?.GetHashCode());
            ret = ret.CombineHashCode(this.Weathers?.GetHashCode());
            ret = ret.CombineHashCode(this.Climates?.GetHashCode());
            ret = ret.CombineHashCode(this.Regions?.GetHashCode());
            ret = ret.CombineHashCode(this.Cells?.GetHashCode());
            ret = ret.CombineHashCode(this.Worldspaces?.GetHashCode());
            ret = ret.CombineHashCode(this.DialogTopics?.GetHashCode());
            ret = ret.CombineHashCode(this.Quests?.GetHashCode());
            ret = ret.CombineHashCode(this.IdleAnimations?.GetHashCode());
            ret = ret.CombineHashCode(this.AIPackages?.GetHashCode());
            ret = ret.CombineHashCode(this.CombatStyles?.GetHashCode());
            ret = ret.CombineHashCode(this.LoadScreens?.GetHashCode());
            ret = ret.CombineHashCode(this.LeveledSpells?.GetHashCode());
            ret = ret.CombineHashCode(this.AnimatedObjects?.GetHashCode());
            ret = ret.CombineHashCode(this.Waters?.GetHashCode());
            ret = ret.CombineHashCode(this.EffectShaders?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (TES4 != null)
            {
                if (!eval(this.TES4.Overall)) return false;
                if (this.TES4.Specific != null && !this.TES4.Specific.AllEqual(eval)) return false;
            }
            if (GameSettings != null)
            {
                if (!eval(this.GameSettings.Overall)) return false;
                if (this.GameSettings.Specific != null && !this.GameSettings.Specific.AllEqual(eval)) return false;
            }
            if (Globals != null)
            {
                if (!eval(this.Globals.Overall)) return false;
                if (this.Globals.Specific != null && !this.Globals.Specific.AllEqual(eval)) return false;
            }
            if (Classes != null)
            {
                if (!eval(this.Classes.Overall)) return false;
                if (this.Classes.Specific != null && !this.Classes.Specific.AllEqual(eval)) return false;
            }
            if (Factions != null)
            {
                if (!eval(this.Factions.Overall)) return false;
                if (this.Factions.Specific != null && !this.Factions.Specific.AllEqual(eval)) return false;
            }
            if (Hairs != null)
            {
                if (!eval(this.Hairs.Overall)) return false;
                if (this.Hairs.Specific != null && !this.Hairs.Specific.AllEqual(eval)) return false;
            }
            if (Eyes != null)
            {
                if (!eval(this.Eyes.Overall)) return false;
                if (this.Eyes.Specific != null && !this.Eyes.Specific.AllEqual(eval)) return false;
            }
            if (Races != null)
            {
                if (!eval(this.Races.Overall)) return false;
                if (this.Races.Specific != null && !this.Races.Specific.AllEqual(eval)) return false;
            }
            if (Sounds != null)
            {
                if (!eval(this.Sounds.Overall)) return false;
                if (this.Sounds.Specific != null && !this.Sounds.Specific.AllEqual(eval)) return false;
            }
            if (Skills != null)
            {
                if (!eval(this.Skills.Overall)) return false;
                if (this.Skills.Specific != null && !this.Skills.Specific.AllEqual(eval)) return false;
            }
            if (MagicEffects != null)
            {
                if (!eval(this.MagicEffects.Overall)) return false;
                if (this.MagicEffects.Specific != null && !this.MagicEffects.Specific.AllEqual(eval)) return false;
            }
            if (Scripts != null)
            {
                if (!eval(this.Scripts.Overall)) return false;
                if (this.Scripts.Specific != null && !this.Scripts.Specific.AllEqual(eval)) return false;
            }
            if (LandTextures != null)
            {
                if (!eval(this.LandTextures.Overall)) return false;
                if (this.LandTextures.Specific != null && !this.LandTextures.Specific.AllEqual(eval)) return false;
            }
            if (Enchantments != null)
            {
                if (!eval(this.Enchantments.Overall)) return false;
                if (this.Enchantments.Specific != null && !this.Enchantments.Specific.AllEqual(eval)) return false;
            }
            if (Spells != null)
            {
                if (!eval(this.Spells.Overall)) return false;
                if (this.Spells.Specific != null && !this.Spells.Specific.AllEqual(eval)) return false;
            }
            if (Birthsigns != null)
            {
                if (!eval(this.Birthsigns.Overall)) return false;
                if (this.Birthsigns.Specific != null && !this.Birthsigns.Specific.AllEqual(eval)) return false;
            }
            if (Activators != null)
            {
                if (!eval(this.Activators.Overall)) return false;
                if (this.Activators.Specific != null && !this.Activators.Specific.AllEqual(eval)) return false;
            }
            if (AlchemicalApparatus != null)
            {
                if (!eval(this.AlchemicalApparatus.Overall)) return false;
                if (this.AlchemicalApparatus.Specific != null && !this.AlchemicalApparatus.Specific.AllEqual(eval)) return false;
            }
            if (Armors != null)
            {
                if (!eval(this.Armors.Overall)) return false;
                if (this.Armors.Specific != null && !this.Armors.Specific.AllEqual(eval)) return false;
            }
            if (Books != null)
            {
                if (!eval(this.Books.Overall)) return false;
                if (this.Books.Specific != null && !this.Books.Specific.AllEqual(eval)) return false;
            }
            if (Clothes != null)
            {
                if (!eval(this.Clothes.Overall)) return false;
                if (this.Clothes.Specific != null && !this.Clothes.Specific.AllEqual(eval)) return false;
            }
            if (Containers != null)
            {
                if (!eval(this.Containers.Overall)) return false;
                if (this.Containers.Specific != null && !this.Containers.Specific.AllEqual(eval)) return false;
            }
            if (Doors != null)
            {
                if (!eval(this.Doors.Overall)) return false;
                if (this.Doors.Specific != null && !this.Doors.Specific.AllEqual(eval)) return false;
            }
            if (Ingredients != null)
            {
                if (!eval(this.Ingredients.Overall)) return false;
                if (this.Ingredients.Specific != null && !this.Ingredients.Specific.AllEqual(eval)) return false;
            }
            if (Lights != null)
            {
                if (!eval(this.Lights.Overall)) return false;
                if (this.Lights.Specific != null && !this.Lights.Specific.AllEqual(eval)) return false;
            }
            if (Miscellaneous != null)
            {
                if (!eval(this.Miscellaneous.Overall)) return false;
                if (this.Miscellaneous.Specific != null && !this.Miscellaneous.Specific.AllEqual(eval)) return false;
            }
            if (Statics != null)
            {
                if (!eval(this.Statics.Overall)) return false;
                if (this.Statics.Specific != null && !this.Statics.Specific.AllEqual(eval)) return false;
            }
            if (Grasses != null)
            {
                if (!eval(this.Grasses.Overall)) return false;
                if (this.Grasses.Specific != null && !this.Grasses.Specific.AllEqual(eval)) return false;
            }
            if (Trees != null)
            {
                if (!eval(this.Trees.Overall)) return false;
                if (this.Trees.Specific != null && !this.Trees.Specific.AllEqual(eval)) return false;
            }
            if (Flora != null)
            {
                if (!eval(this.Flora.Overall)) return false;
                if (this.Flora.Specific != null && !this.Flora.Specific.AllEqual(eval)) return false;
            }
            if (Furnature != null)
            {
                if (!eval(this.Furnature.Overall)) return false;
                if (this.Furnature.Specific != null && !this.Furnature.Specific.AllEqual(eval)) return false;
            }
            if (Weapons != null)
            {
                if (!eval(this.Weapons.Overall)) return false;
                if (this.Weapons.Specific != null && !this.Weapons.Specific.AllEqual(eval)) return false;
            }
            if (Ammo != null)
            {
                if (!eval(this.Ammo.Overall)) return false;
                if (this.Ammo.Specific != null && !this.Ammo.Specific.AllEqual(eval)) return false;
            }
            if (NPCs != null)
            {
                if (!eval(this.NPCs.Overall)) return false;
                if (this.NPCs.Specific != null && !this.NPCs.Specific.AllEqual(eval)) return false;
            }
            if (Creatures != null)
            {
                if (!eval(this.Creatures.Overall)) return false;
                if (this.Creatures.Specific != null && !this.Creatures.Specific.AllEqual(eval)) return false;
            }
            if (LeveledCreatures != null)
            {
                if (!eval(this.LeveledCreatures.Overall)) return false;
                if (this.LeveledCreatures.Specific != null && !this.LeveledCreatures.Specific.AllEqual(eval)) return false;
            }
            if (SoulGems != null)
            {
                if (!eval(this.SoulGems.Overall)) return false;
                if (this.SoulGems.Specific != null && !this.SoulGems.Specific.AllEqual(eval)) return false;
            }
            if (Keys != null)
            {
                if (!eval(this.Keys.Overall)) return false;
                if (this.Keys.Specific != null && !this.Keys.Specific.AllEqual(eval)) return false;
            }
            if (Potions != null)
            {
                if (!eval(this.Potions.Overall)) return false;
                if (this.Potions.Specific != null && !this.Potions.Specific.AllEqual(eval)) return false;
            }
            if (Subspaces != null)
            {
                if (!eval(this.Subspaces.Overall)) return false;
                if (this.Subspaces.Specific != null && !this.Subspaces.Specific.AllEqual(eval)) return false;
            }
            if (SigilStones != null)
            {
                if (!eval(this.SigilStones.Overall)) return false;
                if (this.SigilStones.Specific != null && !this.SigilStones.Specific.AllEqual(eval)) return false;
            }
            if (LeveledItems != null)
            {
                if (!eval(this.LeveledItems.Overall)) return false;
                if (this.LeveledItems.Specific != null && !this.LeveledItems.Specific.AllEqual(eval)) return false;
            }
            if (Weathers != null)
            {
                if (!eval(this.Weathers.Overall)) return false;
                if (this.Weathers.Specific != null && !this.Weathers.Specific.AllEqual(eval)) return false;
            }
            if (Climates != null)
            {
                if (!eval(this.Climates.Overall)) return false;
                if (this.Climates.Specific != null && !this.Climates.Specific.AllEqual(eval)) return false;
            }
            if (Regions != null)
            {
                if (!eval(this.Regions.Overall)) return false;
                if (this.Regions.Specific != null && !this.Regions.Specific.AllEqual(eval)) return false;
            }
            if (Cells != null)
            {
                if (!eval(this.Cells.Overall)) return false;
                if (this.Cells.Specific != null && !this.Cells.Specific.AllEqual(eval)) return false;
            }
            if (Worldspaces != null)
            {
                if (!eval(this.Worldspaces.Overall)) return false;
                if (this.Worldspaces.Specific != null && !this.Worldspaces.Specific.AllEqual(eval)) return false;
            }
            if (DialogTopics != null)
            {
                if (!eval(this.DialogTopics.Overall)) return false;
                if (this.DialogTopics.Specific != null && !this.DialogTopics.Specific.AllEqual(eval)) return false;
            }
            if (Quests != null)
            {
                if (!eval(this.Quests.Overall)) return false;
                if (this.Quests.Specific != null && !this.Quests.Specific.AllEqual(eval)) return false;
            }
            if (IdleAnimations != null)
            {
                if (!eval(this.IdleAnimations.Overall)) return false;
                if (this.IdleAnimations.Specific != null && !this.IdleAnimations.Specific.AllEqual(eval)) return false;
            }
            if (AIPackages != null)
            {
                if (!eval(this.AIPackages.Overall)) return false;
                if (this.AIPackages.Specific != null && !this.AIPackages.Specific.AllEqual(eval)) return false;
            }
            if (CombatStyles != null)
            {
                if (!eval(this.CombatStyles.Overall)) return false;
                if (this.CombatStyles.Specific != null && !this.CombatStyles.Specific.AllEqual(eval)) return false;
            }
            if (LoadScreens != null)
            {
                if (!eval(this.LoadScreens.Overall)) return false;
                if (this.LoadScreens.Specific != null && !this.LoadScreens.Specific.AllEqual(eval)) return false;
            }
            if (LeveledSpells != null)
            {
                if (!eval(this.LeveledSpells.Overall)) return false;
                if (this.LeveledSpells.Specific != null && !this.LeveledSpells.Specific.AllEqual(eval)) return false;
            }
            if (AnimatedObjects != null)
            {
                if (!eval(this.AnimatedObjects.Overall)) return false;
                if (this.AnimatedObjects.Specific != null && !this.AnimatedObjects.Specific.AllEqual(eval)) return false;
            }
            if (Waters != null)
            {
                if (!eval(this.Waters.Overall)) return false;
                if (this.Waters.Specific != null && !this.Waters.Specific.AllEqual(eval)) return false;
            }
            if (EffectShaders != null)
            {
                if (!eval(this.EffectShaders.Overall)) return false;
                if (this.EffectShaders.Specific != null && !this.EffectShaders.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public OblivionMod_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new OblivionMod_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(OblivionMod_Mask<R> obj, Func<T, R> eval)
        {
            if (this.TES4 != null)
            {
                obj.TES4 = new MaskItem<R, TES4_Mask<R>>();
                obj.TES4.Overall = eval(this.TES4.Overall);
                if (this.TES4.Specific != null)
                {
                    obj.TES4.Specific = this.TES4.Specific.Translate(eval);
                }
            }
            if (this.GameSettings != null)
            {
                obj.GameSettings = new MaskItem<R, Group_Mask<R>>();
                obj.GameSettings.Overall = eval(this.GameSettings.Overall);
                if (this.GameSettings.Specific != null)
                {
                    obj.GameSettings.Specific = this.GameSettings.Specific.Translate(eval);
                }
            }
            if (this.Globals != null)
            {
                obj.Globals = new MaskItem<R, Group_Mask<R>>();
                obj.Globals.Overall = eval(this.Globals.Overall);
                if (this.Globals.Specific != null)
                {
                    obj.Globals.Specific = this.Globals.Specific.Translate(eval);
                }
            }
            if (this.Classes != null)
            {
                obj.Classes = new MaskItem<R, Group_Mask<R>>();
                obj.Classes.Overall = eval(this.Classes.Overall);
                if (this.Classes.Specific != null)
                {
                    obj.Classes.Specific = this.Classes.Specific.Translate(eval);
                }
            }
            if (this.Factions != null)
            {
                obj.Factions = new MaskItem<R, Group_Mask<R>>();
                obj.Factions.Overall = eval(this.Factions.Overall);
                if (this.Factions.Specific != null)
                {
                    obj.Factions.Specific = this.Factions.Specific.Translate(eval);
                }
            }
            if (this.Hairs != null)
            {
                obj.Hairs = new MaskItem<R, Group_Mask<R>>();
                obj.Hairs.Overall = eval(this.Hairs.Overall);
                if (this.Hairs.Specific != null)
                {
                    obj.Hairs.Specific = this.Hairs.Specific.Translate(eval);
                }
            }
            if (this.Eyes != null)
            {
                obj.Eyes = new MaskItem<R, Group_Mask<R>>();
                obj.Eyes.Overall = eval(this.Eyes.Overall);
                if (this.Eyes.Specific != null)
                {
                    obj.Eyes.Specific = this.Eyes.Specific.Translate(eval);
                }
            }
            if (this.Races != null)
            {
                obj.Races = new MaskItem<R, Group_Mask<R>>();
                obj.Races.Overall = eval(this.Races.Overall);
                if (this.Races.Specific != null)
                {
                    obj.Races.Specific = this.Races.Specific.Translate(eval);
                }
            }
            if (this.Sounds != null)
            {
                obj.Sounds = new MaskItem<R, Group_Mask<R>>();
                obj.Sounds.Overall = eval(this.Sounds.Overall);
                if (this.Sounds.Specific != null)
                {
                    obj.Sounds.Specific = this.Sounds.Specific.Translate(eval);
                }
            }
            if (this.Skills != null)
            {
                obj.Skills = new MaskItem<R, Group_Mask<R>>();
                obj.Skills.Overall = eval(this.Skills.Overall);
                if (this.Skills.Specific != null)
                {
                    obj.Skills.Specific = this.Skills.Specific.Translate(eval);
                }
            }
            if (this.MagicEffects != null)
            {
                obj.MagicEffects = new MaskItem<R, Group_Mask<R>>();
                obj.MagicEffects.Overall = eval(this.MagicEffects.Overall);
                if (this.MagicEffects.Specific != null)
                {
                    obj.MagicEffects.Specific = this.MagicEffects.Specific.Translate(eval);
                }
            }
            if (this.Scripts != null)
            {
                obj.Scripts = new MaskItem<R, Group_Mask<R>>();
                obj.Scripts.Overall = eval(this.Scripts.Overall);
                if (this.Scripts.Specific != null)
                {
                    obj.Scripts.Specific = this.Scripts.Specific.Translate(eval);
                }
            }
            if (this.LandTextures != null)
            {
                obj.LandTextures = new MaskItem<R, Group_Mask<R>>();
                obj.LandTextures.Overall = eval(this.LandTextures.Overall);
                if (this.LandTextures.Specific != null)
                {
                    obj.LandTextures.Specific = this.LandTextures.Specific.Translate(eval);
                }
            }
            if (this.Enchantments != null)
            {
                obj.Enchantments = new MaskItem<R, Group_Mask<R>>();
                obj.Enchantments.Overall = eval(this.Enchantments.Overall);
                if (this.Enchantments.Specific != null)
                {
                    obj.Enchantments.Specific = this.Enchantments.Specific.Translate(eval);
                }
            }
            if (this.Spells != null)
            {
                obj.Spells = new MaskItem<R, Group_Mask<R>>();
                obj.Spells.Overall = eval(this.Spells.Overall);
                if (this.Spells.Specific != null)
                {
                    obj.Spells.Specific = this.Spells.Specific.Translate(eval);
                }
            }
            if (this.Birthsigns != null)
            {
                obj.Birthsigns = new MaskItem<R, Group_Mask<R>>();
                obj.Birthsigns.Overall = eval(this.Birthsigns.Overall);
                if (this.Birthsigns.Specific != null)
                {
                    obj.Birthsigns.Specific = this.Birthsigns.Specific.Translate(eval);
                }
            }
            if (this.Activators != null)
            {
                obj.Activators = new MaskItem<R, Group_Mask<R>>();
                obj.Activators.Overall = eval(this.Activators.Overall);
                if (this.Activators.Specific != null)
                {
                    obj.Activators.Specific = this.Activators.Specific.Translate(eval);
                }
            }
            if (this.AlchemicalApparatus != null)
            {
                obj.AlchemicalApparatus = new MaskItem<R, Group_Mask<R>>();
                obj.AlchemicalApparatus.Overall = eval(this.AlchemicalApparatus.Overall);
                if (this.AlchemicalApparatus.Specific != null)
                {
                    obj.AlchemicalApparatus.Specific = this.AlchemicalApparatus.Specific.Translate(eval);
                }
            }
            if (this.Armors != null)
            {
                obj.Armors = new MaskItem<R, Group_Mask<R>>();
                obj.Armors.Overall = eval(this.Armors.Overall);
                if (this.Armors.Specific != null)
                {
                    obj.Armors.Specific = this.Armors.Specific.Translate(eval);
                }
            }
            if (this.Books != null)
            {
                obj.Books = new MaskItem<R, Group_Mask<R>>();
                obj.Books.Overall = eval(this.Books.Overall);
                if (this.Books.Specific != null)
                {
                    obj.Books.Specific = this.Books.Specific.Translate(eval);
                }
            }
            if (this.Clothes != null)
            {
                obj.Clothes = new MaskItem<R, Group_Mask<R>>();
                obj.Clothes.Overall = eval(this.Clothes.Overall);
                if (this.Clothes.Specific != null)
                {
                    obj.Clothes.Specific = this.Clothes.Specific.Translate(eval);
                }
            }
            if (this.Containers != null)
            {
                obj.Containers = new MaskItem<R, Group_Mask<R>>();
                obj.Containers.Overall = eval(this.Containers.Overall);
                if (this.Containers.Specific != null)
                {
                    obj.Containers.Specific = this.Containers.Specific.Translate(eval);
                }
            }
            if (this.Doors != null)
            {
                obj.Doors = new MaskItem<R, Group_Mask<R>>();
                obj.Doors.Overall = eval(this.Doors.Overall);
                if (this.Doors.Specific != null)
                {
                    obj.Doors.Specific = this.Doors.Specific.Translate(eval);
                }
            }
            if (this.Ingredients != null)
            {
                obj.Ingredients = new MaskItem<R, Group_Mask<R>>();
                obj.Ingredients.Overall = eval(this.Ingredients.Overall);
                if (this.Ingredients.Specific != null)
                {
                    obj.Ingredients.Specific = this.Ingredients.Specific.Translate(eval);
                }
            }
            if (this.Lights != null)
            {
                obj.Lights = new MaskItem<R, Group_Mask<R>>();
                obj.Lights.Overall = eval(this.Lights.Overall);
                if (this.Lights.Specific != null)
                {
                    obj.Lights.Specific = this.Lights.Specific.Translate(eval);
                }
            }
            if (this.Miscellaneous != null)
            {
                obj.Miscellaneous = new MaskItem<R, Group_Mask<R>>();
                obj.Miscellaneous.Overall = eval(this.Miscellaneous.Overall);
                if (this.Miscellaneous.Specific != null)
                {
                    obj.Miscellaneous.Specific = this.Miscellaneous.Specific.Translate(eval);
                }
            }
            if (this.Statics != null)
            {
                obj.Statics = new MaskItem<R, Group_Mask<R>>();
                obj.Statics.Overall = eval(this.Statics.Overall);
                if (this.Statics.Specific != null)
                {
                    obj.Statics.Specific = this.Statics.Specific.Translate(eval);
                }
            }
            if (this.Grasses != null)
            {
                obj.Grasses = new MaskItem<R, Group_Mask<R>>();
                obj.Grasses.Overall = eval(this.Grasses.Overall);
                if (this.Grasses.Specific != null)
                {
                    obj.Grasses.Specific = this.Grasses.Specific.Translate(eval);
                }
            }
            if (this.Trees != null)
            {
                obj.Trees = new MaskItem<R, Group_Mask<R>>();
                obj.Trees.Overall = eval(this.Trees.Overall);
                if (this.Trees.Specific != null)
                {
                    obj.Trees.Specific = this.Trees.Specific.Translate(eval);
                }
            }
            if (this.Flora != null)
            {
                obj.Flora = new MaskItem<R, Group_Mask<R>>();
                obj.Flora.Overall = eval(this.Flora.Overall);
                if (this.Flora.Specific != null)
                {
                    obj.Flora.Specific = this.Flora.Specific.Translate(eval);
                }
            }
            if (this.Furnature != null)
            {
                obj.Furnature = new MaskItem<R, Group_Mask<R>>();
                obj.Furnature.Overall = eval(this.Furnature.Overall);
                if (this.Furnature.Specific != null)
                {
                    obj.Furnature.Specific = this.Furnature.Specific.Translate(eval);
                }
            }
            if (this.Weapons != null)
            {
                obj.Weapons = new MaskItem<R, Group_Mask<R>>();
                obj.Weapons.Overall = eval(this.Weapons.Overall);
                if (this.Weapons.Specific != null)
                {
                    obj.Weapons.Specific = this.Weapons.Specific.Translate(eval);
                }
            }
            if (this.Ammo != null)
            {
                obj.Ammo = new MaskItem<R, Group_Mask<R>>();
                obj.Ammo.Overall = eval(this.Ammo.Overall);
                if (this.Ammo.Specific != null)
                {
                    obj.Ammo.Specific = this.Ammo.Specific.Translate(eval);
                }
            }
            if (this.NPCs != null)
            {
                obj.NPCs = new MaskItem<R, Group_Mask<R>>();
                obj.NPCs.Overall = eval(this.NPCs.Overall);
                if (this.NPCs.Specific != null)
                {
                    obj.NPCs.Specific = this.NPCs.Specific.Translate(eval);
                }
            }
            if (this.Creatures != null)
            {
                obj.Creatures = new MaskItem<R, Group_Mask<R>>();
                obj.Creatures.Overall = eval(this.Creatures.Overall);
                if (this.Creatures.Specific != null)
                {
                    obj.Creatures.Specific = this.Creatures.Specific.Translate(eval);
                }
            }
            if (this.LeveledCreatures != null)
            {
                obj.LeveledCreatures = new MaskItem<R, Group_Mask<R>>();
                obj.LeveledCreatures.Overall = eval(this.LeveledCreatures.Overall);
                if (this.LeveledCreatures.Specific != null)
                {
                    obj.LeveledCreatures.Specific = this.LeveledCreatures.Specific.Translate(eval);
                }
            }
            if (this.SoulGems != null)
            {
                obj.SoulGems = new MaskItem<R, Group_Mask<R>>();
                obj.SoulGems.Overall = eval(this.SoulGems.Overall);
                if (this.SoulGems.Specific != null)
                {
                    obj.SoulGems.Specific = this.SoulGems.Specific.Translate(eval);
                }
            }
            if (this.Keys != null)
            {
                obj.Keys = new MaskItem<R, Group_Mask<R>>();
                obj.Keys.Overall = eval(this.Keys.Overall);
                if (this.Keys.Specific != null)
                {
                    obj.Keys.Specific = this.Keys.Specific.Translate(eval);
                }
            }
            if (this.Potions != null)
            {
                obj.Potions = new MaskItem<R, Group_Mask<R>>();
                obj.Potions.Overall = eval(this.Potions.Overall);
                if (this.Potions.Specific != null)
                {
                    obj.Potions.Specific = this.Potions.Specific.Translate(eval);
                }
            }
            if (this.Subspaces != null)
            {
                obj.Subspaces = new MaskItem<R, Group_Mask<R>>();
                obj.Subspaces.Overall = eval(this.Subspaces.Overall);
                if (this.Subspaces.Specific != null)
                {
                    obj.Subspaces.Specific = this.Subspaces.Specific.Translate(eval);
                }
            }
            if (this.SigilStones != null)
            {
                obj.SigilStones = new MaskItem<R, Group_Mask<R>>();
                obj.SigilStones.Overall = eval(this.SigilStones.Overall);
                if (this.SigilStones.Specific != null)
                {
                    obj.SigilStones.Specific = this.SigilStones.Specific.Translate(eval);
                }
            }
            if (this.LeveledItems != null)
            {
                obj.LeveledItems = new MaskItem<R, Group_Mask<R>>();
                obj.LeveledItems.Overall = eval(this.LeveledItems.Overall);
                if (this.LeveledItems.Specific != null)
                {
                    obj.LeveledItems.Specific = this.LeveledItems.Specific.Translate(eval);
                }
            }
            if (this.Weathers != null)
            {
                obj.Weathers = new MaskItem<R, Group_Mask<R>>();
                obj.Weathers.Overall = eval(this.Weathers.Overall);
                if (this.Weathers.Specific != null)
                {
                    obj.Weathers.Specific = this.Weathers.Specific.Translate(eval);
                }
            }
            if (this.Climates != null)
            {
                obj.Climates = new MaskItem<R, Group_Mask<R>>();
                obj.Climates.Overall = eval(this.Climates.Overall);
                if (this.Climates.Specific != null)
                {
                    obj.Climates.Specific = this.Climates.Specific.Translate(eval);
                }
            }
            if (this.Regions != null)
            {
                obj.Regions = new MaskItem<R, Group_Mask<R>>();
                obj.Regions.Overall = eval(this.Regions.Overall);
                if (this.Regions.Specific != null)
                {
                    obj.Regions.Specific = this.Regions.Specific.Translate(eval);
                }
            }
            if (this.Cells != null)
            {
                obj.Cells = new MaskItem<R, ListGroup_Mask<R>>();
                obj.Cells.Overall = eval(this.Cells.Overall);
                if (this.Cells.Specific != null)
                {
                    obj.Cells.Specific = this.Cells.Specific.Translate(eval);
                }
            }
            if (this.Worldspaces != null)
            {
                obj.Worldspaces = new MaskItem<R, Group_Mask<R>>();
                obj.Worldspaces.Overall = eval(this.Worldspaces.Overall);
                if (this.Worldspaces.Specific != null)
                {
                    obj.Worldspaces.Specific = this.Worldspaces.Specific.Translate(eval);
                }
            }
            if (this.DialogTopics != null)
            {
                obj.DialogTopics = new MaskItem<R, Group_Mask<R>>();
                obj.DialogTopics.Overall = eval(this.DialogTopics.Overall);
                if (this.DialogTopics.Specific != null)
                {
                    obj.DialogTopics.Specific = this.DialogTopics.Specific.Translate(eval);
                }
            }
            if (this.Quests != null)
            {
                obj.Quests = new MaskItem<R, Group_Mask<R>>();
                obj.Quests.Overall = eval(this.Quests.Overall);
                if (this.Quests.Specific != null)
                {
                    obj.Quests.Specific = this.Quests.Specific.Translate(eval);
                }
            }
            if (this.IdleAnimations != null)
            {
                obj.IdleAnimations = new MaskItem<R, Group_Mask<R>>();
                obj.IdleAnimations.Overall = eval(this.IdleAnimations.Overall);
                if (this.IdleAnimations.Specific != null)
                {
                    obj.IdleAnimations.Specific = this.IdleAnimations.Specific.Translate(eval);
                }
            }
            if (this.AIPackages != null)
            {
                obj.AIPackages = new MaskItem<R, Group_Mask<R>>();
                obj.AIPackages.Overall = eval(this.AIPackages.Overall);
                if (this.AIPackages.Specific != null)
                {
                    obj.AIPackages.Specific = this.AIPackages.Specific.Translate(eval);
                }
            }
            if (this.CombatStyles != null)
            {
                obj.CombatStyles = new MaskItem<R, Group_Mask<R>>();
                obj.CombatStyles.Overall = eval(this.CombatStyles.Overall);
                if (this.CombatStyles.Specific != null)
                {
                    obj.CombatStyles.Specific = this.CombatStyles.Specific.Translate(eval);
                }
            }
            if (this.LoadScreens != null)
            {
                obj.LoadScreens = new MaskItem<R, Group_Mask<R>>();
                obj.LoadScreens.Overall = eval(this.LoadScreens.Overall);
                if (this.LoadScreens.Specific != null)
                {
                    obj.LoadScreens.Specific = this.LoadScreens.Specific.Translate(eval);
                }
            }
            if (this.LeveledSpells != null)
            {
                obj.LeveledSpells = new MaskItem<R, Group_Mask<R>>();
                obj.LeveledSpells.Overall = eval(this.LeveledSpells.Overall);
                if (this.LeveledSpells.Specific != null)
                {
                    obj.LeveledSpells.Specific = this.LeveledSpells.Specific.Translate(eval);
                }
            }
            if (this.AnimatedObjects != null)
            {
                obj.AnimatedObjects = new MaskItem<R, Group_Mask<R>>();
                obj.AnimatedObjects.Overall = eval(this.AnimatedObjects.Overall);
                if (this.AnimatedObjects.Specific != null)
                {
                    obj.AnimatedObjects.Specific = this.AnimatedObjects.Specific.Translate(eval);
                }
            }
            if (this.Waters != null)
            {
                obj.Waters = new MaskItem<R, Group_Mask<R>>();
                obj.Waters.Overall = eval(this.Waters.Overall);
                if (this.Waters.Specific != null)
                {
                    obj.Waters.Specific = this.Waters.Specific.Translate(eval);
                }
            }
            if (this.EffectShaders != null)
            {
                obj.EffectShaders = new MaskItem<R, Group_Mask<R>>();
                obj.EffectShaders.Overall = eval(this.EffectShaders.Overall);
                if (this.EffectShaders.Specific != null)
                {
                    obj.EffectShaders.Specific = this.EffectShaders.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(OblivionMod_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, OblivionMod_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(OblivionMod_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TES4?.Overall ?? true)
                {
                    TES4?.ToString(fg);
                }
                if (printMask?.GameSettings?.Overall ?? true)
                {
                    GameSettings?.ToString(fg);
                }
                if (printMask?.Globals?.Overall ?? true)
                {
                    Globals?.ToString(fg);
                }
                if (printMask?.Classes?.Overall ?? true)
                {
                    Classes?.ToString(fg);
                }
                if (printMask?.Factions?.Overall ?? true)
                {
                    Factions?.ToString(fg);
                }
                if (printMask?.Hairs?.Overall ?? true)
                {
                    Hairs?.ToString(fg);
                }
                if (printMask?.Eyes?.Overall ?? true)
                {
                    Eyes?.ToString(fg);
                }
                if (printMask?.Races?.Overall ?? true)
                {
                    Races?.ToString(fg);
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    Sounds?.ToString(fg);
                }
                if (printMask?.Skills?.Overall ?? true)
                {
                    Skills?.ToString(fg);
                }
                if (printMask?.MagicEffects?.Overall ?? true)
                {
                    MagicEffects?.ToString(fg);
                }
                if (printMask?.Scripts?.Overall ?? true)
                {
                    Scripts?.ToString(fg);
                }
                if (printMask?.LandTextures?.Overall ?? true)
                {
                    LandTextures?.ToString(fg);
                }
                if (printMask?.Enchantments?.Overall ?? true)
                {
                    Enchantments?.ToString(fg);
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    Spells?.ToString(fg);
                }
                if (printMask?.Birthsigns?.Overall ?? true)
                {
                    Birthsigns?.ToString(fg);
                }
                if (printMask?.Activators?.Overall ?? true)
                {
                    Activators?.ToString(fg);
                }
                if (printMask?.AlchemicalApparatus?.Overall ?? true)
                {
                    AlchemicalApparatus?.ToString(fg);
                }
                if (printMask?.Armors?.Overall ?? true)
                {
                    Armors?.ToString(fg);
                }
                if (printMask?.Books?.Overall ?? true)
                {
                    Books?.ToString(fg);
                }
                if (printMask?.Clothes?.Overall ?? true)
                {
                    Clothes?.ToString(fg);
                }
                if (printMask?.Containers?.Overall ?? true)
                {
                    Containers?.ToString(fg);
                }
                if (printMask?.Doors?.Overall ?? true)
                {
                    Doors?.ToString(fg);
                }
                if (printMask?.Ingredients?.Overall ?? true)
                {
                    Ingredients?.ToString(fg);
                }
                if (printMask?.Lights?.Overall ?? true)
                {
                    Lights?.ToString(fg);
                }
                if (printMask?.Miscellaneous?.Overall ?? true)
                {
                    Miscellaneous?.ToString(fg);
                }
                if (printMask?.Statics?.Overall ?? true)
                {
                    Statics?.ToString(fg);
                }
                if (printMask?.Grasses?.Overall ?? true)
                {
                    Grasses?.ToString(fg);
                }
                if (printMask?.Trees?.Overall ?? true)
                {
                    Trees?.ToString(fg);
                }
                if (printMask?.Flora?.Overall ?? true)
                {
                    Flora?.ToString(fg);
                }
                if (printMask?.Furnature?.Overall ?? true)
                {
                    Furnature?.ToString(fg);
                }
                if (printMask?.Weapons?.Overall ?? true)
                {
                    Weapons?.ToString(fg);
                }
                if (printMask?.Ammo?.Overall ?? true)
                {
                    Ammo?.ToString(fg);
                }
                if (printMask?.NPCs?.Overall ?? true)
                {
                    NPCs?.ToString(fg);
                }
                if (printMask?.Creatures?.Overall ?? true)
                {
                    Creatures?.ToString(fg);
                }
                if (printMask?.LeveledCreatures?.Overall ?? true)
                {
                    LeveledCreatures?.ToString(fg);
                }
                if (printMask?.SoulGems?.Overall ?? true)
                {
                    SoulGems?.ToString(fg);
                }
                if (printMask?.Keys?.Overall ?? true)
                {
                    Keys?.ToString(fg);
                }
                if (printMask?.Potions?.Overall ?? true)
                {
                    Potions?.ToString(fg);
                }
                if (printMask?.Subspaces?.Overall ?? true)
                {
                    Subspaces?.ToString(fg);
                }
                if (printMask?.SigilStones?.Overall ?? true)
                {
                    SigilStones?.ToString(fg);
                }
                if (printMask?.LeveledItems?.Overall ?? true)
                {
                    LeveledItems?.ToString(fg);
                }
                if (printMask?.Weathers?.Overall ?? true)
                {
                    Weathers?.ToString(fg);
                }
                if (printMask?.Climates?.Overall ?? true)
                {
                    Climates?.ToString(fg);
                }
                if (printMask?.Regions?.Overall ?? true)
                {
                    Regions?.ToString(fg);
                }
                if (printMask?.Cells?.Overall ?? true)
                {
                    Cells?.ToString(fg);
                }
                if (printMask?.Worldspaces?.Overall ?? true)
                {
                    Worldspaces?.ToString(fg);
                }
                if (printMask?.DialogTopics?.Overall ?? true)
                {
                    DialogTopics?.ToString(fg);
                }
                if (printMask?.Quests?.Overall ?? true)
                {
                    Quests?.ToString(fg);
                }
                if (printMask?.IdleAnimations?.Overall ?? true)
                {
                    IdleAnimations?.ToString(fg);
                }
                if (printMask?.AIPackages?.Overall ?? true)
                {
                    AIPackages?.ToString(fg);
                }
                if (printMask?.CombatStyles?.Overall ?? true)
                {
                    CombatStyles?.ToString(fg);
                }
                if (printMask?.LoadScreens?.Overall ?? true)
                {
                    LoadScreens?.ToString(fg);
                }
                if (printMask?.LeveledSpells?.Overall ?? true)
                {
                    LeveledSpells?.ToString(fg);
                }
                if (printMask?.AnimatedObjects?.Overall ?? true)
                {
                    AnimatedObjects?.ToString(fg);
                }
                if (printMask?.Waters?.Overall ?? true)
                {
                    Waters?.ToString(fg);
                }
                if (printMask?.EffectShaders?.Overall ?? true)
                {
                    EffectShaders?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class OblivionMod_ErrorMask : IErrorMask, IErrorMask<OblivionMod_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, TES4_ErrorMask> TES4;
        public MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>> GameSettings;
        public MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>> Globals;
        public MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>> Classes;
        public MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>> Factions;
        public MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>> Hairs;
        public MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>> Eyes;
        public MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>> Races;
        public MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>> Sounds;
        public MaskItem<Exception, Group_ErrorMask<SkillRecord_ErrorMask>> Skills;
        public MaskItem<Exception, Group_ErrorMask<MagicEffect_ErrorMask>> MagicEffects;
        public MaskItem<Exception, Group_ErrorMask<Script_ErrorMask>> Scripts;
        public MaskItem<Exception, Group_ErrorMask<LandTexture_ErrorMask>> LandTextures;
        public MaskItem<Exception, Group_ErrorMask<Enchantment_ErrorMask>> Enchantments;
        public MaskItem<Exception, Group_ErrorMask<SpellUnleveled_ErrorMask>> Spells;
        public MaskItem<Exception, Group_ErrorMask<Birthsign_ErrorMask>> Birthsigns;
        public MaskItem<Exception, Group_ErrorMask<Activator_ErrorMask>> Activators;
        public MaskItem<Exception, Group_ErrorMask<AlchemicalApparatus_ErrorMask>> AlchemicalApparatus;
        public MaskItem<Exception, Group_ErrorMask<Armor_ErrorMask>> Armors;
        public MaskItem<Exception, Group_ErrorMask<Book_ErrorMask>> Books;
        public MaskItem<Exception, Group_ErrorMask<Clothing_ErrorMask>> Clothes;
        public MaskItem<Exception, Group_ErrorMask<Container_ErrorMask>> Containers;
        public MaskItem<Exception, Group_ErrorMask<Door_ErrorMask>> Doors;
        public MaskItem<Exception, Group_ErrorMask<Ingredient_ErrorMask>> Ingredients;
        public MaskItem<Exception, Group_ErrorMask<Light_ErrorMask>> Lights;
        public MaskItem<Exception, Group_ErrorMask<Miscellaneous_ErrorMask>> Miscellaneous;
        public MaskItem<Exception, Group_ErrorMask<Static_ErrorMask>> Statics;
        public MaskItem<Exception, Group_ErrorMask<Grass_ErrorMask>> Grasses;
        public MaskItem<Exception, Group_ErrorMask<Tree_ErrorMask>> Trees;
        public MaskItem<Exception, Group_ErrorMask<Flora_ErrorMask>> Flora;
        public MaskItem<Exception, Group_ErrorMask<Furnature_ErrorMask>> Furnature;
        public MaskItem<Exception, Group_ErrorMask<Weapon_ErrorMask>> Weapons;
        public MaskItem<Exception, Group_ErrorMask<Ammo_ErrorMask>> Ammo;
        public MaskItem<Exception, Group_ErrorMask<NPC_ErrorMask>> NPCs;
        public MaskItem<Exception, Group_ErrorMask<Creature_ErrorMask>> Creatures;
        public MaskItem<Exception, Group_ErrorMask<LeveledCreature_ErrorMask>> LeveledCreatures;
        public MaskItem<Exception, Group_ErrorMask<SoulGem_ErrorMask>> SoulGems;
        public MaskItem<Exception, Group_ErrorMask<Key_ErrorMask>> Keys;
        public MaskItem<Exception, Group_ErrorMask<Potion_ErrorMask>> Potions;
        public MaskItem<Exception, Group_ErrorMask<Subspace_ErrorMask>> Subspaces;
        public MaskItem<Exception, Group_ErrorMask<SigilStone_ErrorMask>> SigilStones;
        public MaskItem<Exception, Group_ErrorMask<LeveledItem_ErrorMask>> LeveledItems;
        public MaskItem<Exception, Group_ErrorMask<Weather_ErrorMask>> Weathers;
        public MaskItem<Exception, Group_ErrorMask<Climate_ErrorMask>> Climates;
        public MaskItem<Exception, Group_ErrorMask<Region_ErrorMask>> Regions;
        public MaskItem<Exception, ListGroup_ErrorMask<CellBlock_ErrorMask>> Cells;
        public MaskItem<Exception, Group_ErrorMask<Worldspace_ErrorMask>> Worldspaces;
        public MaskItem<Exception, Group_ErrorMask<DialogTopic_ErrorMask>> DialogTopics;
        public MaskItem<Exception, Group_ErrorMask<Quest_ErrorMask>> Quests;
        public MaskItem<Exception, Group_ErrorMask<IdleAnimation_ErrorMask>> IdleAnimations;
        public MaskItem<Exception, Group_ErrorMask<AIPackage_ErrorMask>> AIPackages;
        public MaskItem<Exception, Group_ErrorMask<CombatStyle_ErrorMask>> CombatStyles;
        public MaskItem<Exception, Group_ErrorMask<LoadScreen_ErrorMask>> LoadScreens;
        public MaskItem<Exception, Group_ErrorMask<LeveledSpell_ErrorMask>> LeveledSpells;
        public MaskItem<Exception, Group_ErrorMask<AnimatedObject_ErrorMask>> AnimatedObjects;
        public MaskItem<Exception, Group_ErrorMask<Water_ErrorMask>> Waters;
        public MaskItem<Exception, Group_ErrorMask<EffectShader_ErrorMask>> EffectShaders;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return TES4;
                case OblivionMod_FieldIndex.GameSettings:
                    return GameSettings;
                case OblivionMod_FieldIndex.Globals:
                    return Globals;
                case OblivionMod_FieldIndex.Classes:
                    return Classes;
                case OblivionMod_FieldIndex.Factions:
                    return Factions;
                case OblivionMod_FieldIndex.Hairs:
                    return Hairs;
                case OblivionMod_FieldIndex.Eyes:
                    return Eyes;
                case OblivionMod_FieldIndex.Races:
                    return Races;
                case OblivionMod_FieldIndex.Sounds:
                    return Sounds;
                case OblivionMod_FieldIndex.Skills:
                    return Skills;
                case OblivionMod_FieldIndex.MagicEffects:
                    return MagicEffects;
                case OblivionMod_FieldIndex.Scripts:
                    return Scripts;
                case OblivionMod_FieldIndex.LandTextures:
                    return LandTextures;
                case OblivionMod_FieldIndex.Enchantments:
                    return Enchantments;
                case OblivionMod_FieldIndex.Spells:
                    return Spells;
                case OblivionMod_FieldIndex.Birthsigns:
                    return Birthsigns;
                case OblivionMod_FieldIndex.Activators:
                    return Activators;
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    return AlchemicalApparatus;
                case OblivionMod_FieldIndex.Armors:
                    return Armors;
                case OblivionMod_FieldIndex.Books:
                    return Books;
                case OblivionMod_FieldIndex.Clothes:
                    return Clothes;
                case OblivionMod_FieldIndex.Containers:
                    return Containers;
                case OblivionMod_FieldIndex.Doors:
                    return Doors;
                case OblivionMod_FieldIndex.Ingredients:
                    return Ingredients;
                case OblivionMod_FieldIndex.Lights:
                    return Lights;
                case OblivionMod_FieldIndex.Miscellaneous:
                    return Miscellaneous;
                case OblivionMod_FieldIndex.Statics:
                    return Statics;
                case OblivionMod_FieldIndex.Grasses:
                    return Grasses;
                case OblivionMod_FieldIndex.Trees:
                    return Trees;
                case OblivionMod_FieldIndex.Flora:
                    return Flora;
                case OblivionMod_FieldIndex.Furnature:
                    return Furnature;
                case OblivionMod_FieldIndex.Weapons:
                    return Weapons;
                case OblivionMod_FieldIndex.Ammo:
                    return Ammo;
                case OblivionMod_FieldIndex.NPCs:
                    return NPCs;
                case OblivionMod_FieldIndex.Creatures:
                    return Creatures;
                case OblivionMod_FieldIndex.LeveledCreatures:
                    return LeveledCreatures;
                case OblivionMod_FieldIndex.SoulGems:
                    return SoulGems;
                case OblivionMod_FieldIndex.Keys:
                    return Keys;
                case OblivionMod_FieldIndex.Potions:
                    return Potions;
                case OblivionMod_FieldIndex.Subspaces:
                    return Subspaces;
                case OblivionMod_FieldIndex.SigilStones:
                    return SigilStones;
                case OblivionMod_FieldIndex.LeveledItems:
                    return LeveledItems;
                case OblivionMod_FieldIndex.Weathers:
                    return Weathers;
                case OblivionMod_FieldIndex.Climates:
                    return Climates;
                case OblivionMod_FieldIndex.Regions:
                    return Regions;
                case OblivionMod_FieldIndex.Cells:
                    return Cells;
                case OblivionMod_FieldIndex.Worldspaces:
                    return Worldspaces;
                case OblivionMod_FieldIndex.DialogTopics:
                    return DialogTopics;
                case OblivionMod_FieldIndex.Quests:
                    return Quests;
                case OblivionMod_FieldIndex.IdleAnimations:
                    return IdleAnimations;
                case OblivionMod_FieldIndex.AIPackages:
                    return AIPackages;
                case OblivionMod_FieldIndex.CombatStyles:
                    return CombatStyles;
                case OblivionMod_FieldIndex.LoadScreens:
                    return LoadScreens;
                case OblivionMod_FieldIndex.LeveledSpells:
                    return LeveledSpells;
                case OblivionMod_FieldIndex.AnimatedObjects:
                    return AnimatedObjects;
                case OblivionMod_FieldIndex.Waters:
                    return Waters;
                case OblivionMod_FieldIndex.EffectShaders:
                    return EffectShaders;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    this.TES4 = new MaskItem<Exception, TES4_ErrorMask>(ex, null);
                    break;
                case OblivionMod_FieldIndex.GameSettings:
                    this.GameSettings = new MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Globals:
                    this.Globals = new MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Classes:
                    this.Classes = new MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Factions:
                    this.Factions = new MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    this.Hairs = new MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    this.Eyes = new MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Races:
                    this.Races = new MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    this.Sounds = new MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Skills:
                    this.Skills = new MaskItem<Exception, Group_ErrorMask<SkillRecord_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.MagicEffects:
                    this.MagicEffects = new MaskItem<Exception, Group_ErrorMask<MagicEffect_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Scripts:
                    this.Scripts = new MaskItem<Exception, Group_ErrorMask<Script_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.LandTextures:
                    this.LandTextures = new MaskItem<Exception, Group_ErrorMask<LandTexture_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Enchantments:
                    this.Enchantments = new MaskItem<Exception, Group_ErrorMask<Enchantment_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Spells:
                    this.Spells = new MaskItem<Exception, Group_ErrorMask<SpellUnleveled_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Birthsigns:
                    this.Birthsigns = new MaskItem<Exception, Group_ErrorMask<Birthsign_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Activators:
                    this.Activators = new MaskItem<Exception, Group_ErrorMask<Activator_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    this.AlchemicalApparatus = new MaskItem<Exception, Group_ErrorMask<AlchemicalApparatus_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Armors:
                    this.Armors = new MaskItem<Exception, Group_ErrorMask<Armor_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Books:
                    this.Books = new MaskItem<Exception, Group_ErrorMask<Book_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Clothes:
                    this.Clothes = new MaskItem<Exception, Group_ErrorMask<Clothing_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Containers:
                    this.Containers = new MaskItem<Exception, Group_ErrorMask<Container_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Doors:
                    this.Doors = new MaskItem<Exception, Group_ErrorMask<Door_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Ingredients:
                    this.Ingredients = new MaskItem<Exception, Group_ErrorMask<Ingredient_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Lights:
                    this.Lights = new MaskItem<Exception, Group_ErrorMask<Light_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Miscellaneous:
                    this.Miscellaneous = new MaskItem<Exception, Group_ErrorMask<Miscellaneous_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Statics:
                    this.Statics = new MaskItem<Exception, Group_ErrorMask<Static_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Grasses:
                    this.Grasses = new MaskItem<Exception, Group_ErrorMask<Grass_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Trees:
                    this.Trees = new MaskItem<Exception, Group_ErrorMask<Tree_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Flora:
                    this.Flora = new MaskItem<Exception, Group_ErrorMask<Flora_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Furnature:
                    this.Furnature = new MaskItem<Exception, Group_ErrorMask<Furnature_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Weapons:
                    this.Weapons = new MaskItem<Exception, Group_ErrorMask<Weapon_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Ammo:
                    this.Ammo = new MaskItem<Exception, Group_ErrorMask<Ammo_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.NPCs:
                    this.NPCs = new MaskItem<Exception, Group_ErrorMask<NPC_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Creatures:
                    this.Creatures = new MaskItem<Exception, Group_ErrorMask<Creature_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.LeveledCreatures:
                    this.LeveledCreatures = new MaskItem<Exception, Group_ErrorMask<LeveledCreature_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.SoulGems:
                    this.SoulGems = new MaskItem<Exception, Group_ErrorMask<SoulGem_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Keys:
                    this.Keys = new MaskItem<Exception, Group_ErrorMask<Key_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Potions:
                    this.Potions = new MaskItem<Exception, Group_ErrorMask<Potion_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Subspaces:
                    this.Subspaces = new MaskItem<Exception, Group_ErrorMask<Subspace_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.SigilStones:
                    this.SigilStones = new MaskItem<Exception, Group_ErrorMask<SigilStone_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.LeveledItems:
                    this.LeveledItems = new MaskItem<Exception, Group_ErrorMask<LeveledItem_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Weathers:
                    this.Weathers = new MaskItem<Exception, Group_ErrorMask<Weather_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Climates:
                    this.Climates = new MaskItem<Exception, Group_ErrorMask<Climate_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Regions:
                    this.Regions = new MaskItem<Exception, Group_ErrorMask<Region_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Cells:
                    this.Cells = new MaskItem<Exception, ListGroup_ErrorMask<CellBlock_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Worldspaces:
                    this.Worldspaces = new MaskItem<Exception, Group_ErrorMask<Worldspace_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.DialogTopics:
                    this.DialogTopics = new MaskItem<Exception, Group_ErrorMask<DialogTopic_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Quests:
                    this.Quests = new MaskItem<Exception, Group_ErrorMask<Quest_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.IdleAnimations:
                    this.IdleAnimations = new MaskItem<Exception, Group_ErrorMask<IdleAnimation_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.AIPackages:
                    this.AIPackages = new MaskItem<Exception, Group_ErrorMask<AIPackage_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.CombatStyles:
                    this.CombatStyles = new MaskItem<Exception, Group_ErrorMask<CombatStyle_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.LoadScreens:
                    this.LoadScreens = new MaskItem<Exception, Group_ErrorMask<LoadScreen_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.LeveledSpells:
                    this.LeveledSpells = new MaskItem<Exception, Group_ErrorMask<LeveledSpell_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.AnimatedObjects:
                    this.AnimatedObjects = new MaskItem<Exception, Group_ErrorMask<AnimatedObject_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Waters:
                    this.Waters = new MaskItem<Exception, Group_ErrorMask<Water_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.EffectShaders:
                    this.EffectShaders = new MaskItem<Exception, Group_ErrorMask<EffectShader_ErrorMask>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    this.TES4 = (MaskItem<Exception, TES4_ErrorMask>)obj;
                    break;
                case OblivionMod_FieldIndex.GameSettings:
                    this.GameSettings = (MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Globals:
                    this.Globals = (MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Classes:
                    this.Classes = (MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Factions:
                    this.Factions = (MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    this.Hairs = (MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    this.Eyes = (MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Races:
                    this.Races = (MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    this.Sounds = (MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Skills:
                    this.Skills = (MaskItem<Exception, Group_ErrorMask<SkillRecord_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.MagicEffects:
                    this.MagicEffects = (MaskItem<Exception, Group_ErrorMask<MagicEffect_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Scripts:
                    this.Scripts = (MaskItem<Exception, Group_ErrorMask<Script_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.LandTextures:
                    this.LandTextures = (MaskItem<Exception, Group_ErrorMask<LandTexture_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Enchantments:
                    this.Enchantments = (MaskItem<Exception, Group_ErrorMask<Enchantment_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Spells:
                    this.Spells = (MaskItem<Exception, Group_ErrorMask<SpellUnleveled_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Birthsigns:
                    this.Birthsigns = (MaskItem<Exception, Group_ErrorMask<Birthsign_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Activators:
                    this.Activators = (MaskItem<Exception, Group_ErrorMask<Activator_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    this.AlchemicalApparatus = (MaskItem<Exception, Group_ErrorMask<AlchemicalApparatus_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Armors:
                    this.Armors = (MaskItem<Exception, Group_ErrorMask<Armor_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Books:
                    this.Books = (MaskItem<Exception, Group_ErrorMask<Book_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Clothes:
                    this.Clothes = (MaskItem<Exception, Group_ErrorMask<Clothing_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Containers:
                    this.Containers = (MaskItem<Exception, Group_ErrorMask<Container_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Doors:
                    this.Doors = (MaskItem<Exception, Group_ErrorMask<Door_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Ingredients:
                    this.Ingredients = (MaskItem<Exception, Group_ErrorMask<Ingredient_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Lights:
                    this.Lights = (MaskItem<Exception, Group_ErrorMask<Light_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Miscellaneous:
                    this.Miscellaneous = (MaskItem<Exception, Group_ErrorMask<Miscellaneous_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Statics:
                    this.Statics = (MaskItem<Exception, Group_ErrorMask<Static_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Grasses:
                    this.Grasses = (MaskItem<Exception, Group_ErrorMask<Grass_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Trees:
                    this.Trees = (MaskItem<Exception, Group_ErrorMask<Tree_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Flora:
                    this.Flora = (MaskItem<Exception, Group_ErrorMask<Flora_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Furnature:
                    this.Furnature = (MaskItem<Exception, Group_ErrorMask<Furnature_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Weapons:
                    this.Weapons = (MaskItem<Exception, Group_ErrorMask<Weapon_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Ammo:
                    this.Ammo = (MaskItem<Exception, Group_ErrorMask<Ammo_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.NPCs:
                    this.NPCs = (MaskItem<Exception, Group_ErrorMask<NPC_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Creatures:
                    this.Creatures = (MaskItem<Exception, Group_ErrorMask<Creature_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.LeveledCreatures:
                    this.LeveledCreatures = (MaskItem<Exception, Group_ErrorMask<LeveledCreature_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.SoulGems:
                    this.SoulGems = (MaskItem<Exception, Group_ErrorMask<SoulGem_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Keys:
                    this.Keys = (MaskItem<Exception, Group_ErrorMask<Key_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Potions:
                    this.Potions = (MaskItem<Exception, Group_ErrorMask<Potion_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Subspaces:
                    this.Subspaces = (MaskItem<Exception, Group_ErrorMask<Subspace_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.SigilStones:
                    this.SigilStones = (MaskItem<Exception, Group_ErrorMask<SigilStone_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.LeveledItems:
                    this.LeveledItems = (MaskItem<Exception, Group_ErrorMask<LeveledItem_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Weathers:
                    this.Weathers = (MaskItem<Exception, Group_ErrorMask<Weather_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Climates:
                    this.Climates = (MaskItem<Exception, Group_ErrorMask<Climate_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Regions:
                    this.Regions = (MaskItem<Exception, Group_ErrorMask<Region_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Cells:
                    this.Cells = (MaskItem<Exception, ListGroup_ErrorMask<CellBlock_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Worldspaces:
                    this.Worldspaces = (MaskItem<Exception, Group_ErrorMask<Worldspace_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.DialogTopics:
                    this.DialogTopics = (MaskItem<Exception, Group_ErrorMask<DialogTopic_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Quests:
                    this.Quests = (MaskItem<Exception, Group_ErrorMask<Quest_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.IdleAnimations:
                    this.IdleAnimations = (MaskItem<Exception, Group_ErrorMask<IdleAnimation_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.AIPackages:
                    this.AIPackages = (MaskItem<Exception, Group_ErrorMask<AIPackage_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.CombatStyles:
                    this.CombatStyles = (MaskItem<Exception, Group_ErrorMask<CombatStyle_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.LoadScreens:
                    this.LoadScreens = (MaskItem<Exception, Group_ErrorMask<LoadScreen_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.LeveledSpells:
                    this.LeveledSpells = (MaskItem<Exception, Group_ErrorMask<LeveledSpell_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.AnimatedObjects:
                    this.AnimatedObjects = (MaskItem<Exception, Group_ErrorMask<AnimatedObject_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Waters:
                    this.Waters = (MaskItem<Exception, Group_ErrorMask<Water_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.EffectShaders:
                    this.EffectShaders = (MaskItem<Exception, Group_ErrorMask<EffectShader_ErrorMask>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (TES4 != null) return true;
            if (GameSettings != null) return true;
            if (Globals != null) return true;
            if (Classes != null) return true;
            if (Factions != null) return true;
            if (Hairs != null) return true;
            if (Eyes != null) return true;
            if (Races != null) return true;
            if (Sounds != null) return true;
            if (Skills != null) return true;
            if (MagicEffects != null) return true;
            if (Scripts != null) return true;
            if (LandTextures != null) return true;
            if (Enchantments != null) return true;
            if (Spells != null) return true;
            if (Birthsigns != null) return true;
            if (Activators != null) return true;
            if (AlchemicalApparatus != null) return true;
            if (Armors != null) return true;
            if (Books != null) return true;
            if (Clothes != null) return true;
            if (Containers != null) return true;
            if (Doors != null) return true;
            if (Ingredients != null) return true;
            if (Lights != null) return true;
            if (Miscellaneous != null) return true;
            if (Statics != null) return true;
            if (Grasses != null) return true;
            if (Trees != null) return true;
            if (Flora != null) return true;
            if (Furnature != null) return true;
            if (Weapons != null) return true;
            if (Ammo != null) return true;
            if (NPCs != null) return true;
            if (Creatures != null) return true;
            if (LeveledCreatures != null) return true;
            if (SoulGems != null) return true;
            if (Keys != null) return true;
            if (Potions != null) return true;
            if (Subspaces != null) return true;
            if (SigilStones != null) return true;
            if (LeveledItems != null) return true;
            if (Weathers != null) return true;
            if (Climates != null) return true;
            if (Regions != null) return true;
            if (Cells != null) return true;
            if (Worldspaces != null) return true;
            if (DialogTopics != null) return true;
            if (Quests != null) return true;
            if (IdleAnimations != null) return true;
            if (AIPackages != null) return true;
            if (CombatStyles != null) return true;
            if (LoadScreens != null) return true;
            if (LeveledSpells != null) return true;
            if (AnimatedObjects != null) return true;
            if (Waters != null) return true;
            if (EffectShaders != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("OblivionMod_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            TES4?.ToString(fg);
            GameSettings?.ToString(fg);
            Globals?.ToString(fg);
            Classes?.ToString(fg);
            Factions?.ToString(fg);
            Hairs?.ToString(fg);
            Eyes?.ToString(fg);
            Races?.ToString(fg);
            Sounds?.ToString(fg);
            Skills?.ToString(fg);
            MagicEffects?.ToString(fg);
            Scripts?.ToString(fg);
            LandTextures?.ToString(fg);
            Enchantments?.ToString(fg);
            Spells?.ToString(fg);
            Birthsigns?.ToString(fg);
            Activators?.ToString(fg);
            AlchemicalApparatus?.ToString(fg);
            Armors?.ToString(fg);
            Books?.ToString(fg);
            Clothes?.ToString(fg);
            Containers?.ToString(fg);
            Doors?.ToString(fg);
            Ingredients?.ToString(fg);
            Lights?.ToString(fg);
            Miscellaneous?.ToString(fg);
            Statics?.ToString(fg);
            Grasses?.ToString(fg);
            Trees?.ToString(fg);
            Flora?.ToString(fg);
            Furnature?.ToString(fg);
            Weapons?.ToString(fg);
            Ammo?.ToString(fg);
            NPCs?.ToString(fg);
            Creatures?.ToString(fg);
            LeveledCreatures?.ToString(fg);
            SoulGems?.ToString(fg);
            Keys?.ToString(fg);
            Potions?.ToString(fg);
            Subspaces?.ToString(fg);
            SigilStones?.ToString(fg);
            LeveledItems?.ToString(fg);
            Weathers?.ToString(fg);
            Climates?.ToString(fg);
            Regions?.ToString(fg);
            Cells?.ToString(fg);
            Worldspaces?.ToString(fg);
            DialogTopics?.ToString(fg);
            Quests?.ToString(fg);
            IdleAnimations?.ToString(fg);
            AIPackages?.ToString(fg);
            CombatStyles?.ToString(fg);
            LoadScreens?.ToString(fg);
            LeveledSpells?.ToString(fg);
            AnimatedObjects?.ToString(fg);
            Waters?.ToString(fg);
            EffectShaders?.ToString(fg);
        }
        #endregion

        #region Combine
        public OblivionMod_ErrorMask Combine(OblivionMod_ErrorMask rhs)
        {
            var ret = new OblivionMod_ErrorMask();
            ret.TES4 = new MaskItem<Exception, TES4_ErrorMask>(this.TES4.Overall.Combine(rhs.TES4.Overall), ((IErrorMask<TES4_ErrorMask>)this.TES4.Specific).Combine(rhs.TES4.Specific));
            ret.GameSettings = new MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>(this.GameSettings.Overall.Combine(rhs.GameSettings.Overall), ((IErrorMask<Group_ErrorMask<GameSetting_ErrorMask>>)this.GameSettings.Specific).Combine(rhs.GameSettings.Specific));
            ret.Globals = new MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>(this.Globals.Overall.Combine(rhs.Globals.Overall), ((IErrorMask<Group_ErrorMask<Global_ErrorMask>>)this.Globals.Specific).Combine(rhs.Globals.Specific));
            ret.Classes = new MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>(this.Classes.Overall.Combine(rhs.Classes.Overall), ((IErrorMask<Group_ErrorMask<Class_ErrorMask>>)this.Classes.Specific).Combine(rhs.Classes.Specific));
            ret.Factions = new MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>(this.Factions.Overall.Combine(rhs.Factions.Overall), ((IErrorMask<Group_ErrorMask<Faction_ErrorMask>>)this.Factions.Specific).Combine(rhs.Factions.Specific));
            ret.Hairs = new MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>(this.Hairs.Overall.Combine(rhs.Hairs.Overall), ((IErrorMask<Group_ErrorMask<Hair_ErrorMask>>)this.Hairs.Specific).Combine(rhs.Hairs.Specific));
            ret.Eyes = new MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>(this.Eyes.Overall.Combine(rhs.Eyes.Overall), ((IErrorMask<Group_ErrorMask<Eye_ErrorMask>>)this.Eyes.Specific).Combine(rhs.Eyes.Specific));
            ret.Races = new MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>(this.Races.Overall.Combine(rhs.Races.Overall), ((IErrorMask<Group_ErrorMask<Race_ErrorMask>>)this.Races.Specific).Combine(rhs.Races.Specific));
            ret.Sounds = new MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>(this.Sounds.Overall.Combine(rhs.Sounds.Overall), ((IErrorMask<Group_ErrorMask<Sound_ErrorMask>>)this.Sounds.Specific).Combine(rhs.Sounds.Specific));
            ret.Skills = new MaskItem<Exception, Group_ErrorMask<SkillRecord_ErrorMask>>(this.Skills.Overall.Combine(rhs.Skills.Overall), ((IErrorMask<Group_ErrorMask<SkillRecord_ErrorMask>>)this.Skills.Specific).Combine(rhs.Skills.Specific));
            ret.MagicEffects = new MaskItem<Exception, Group_ErrorMask<MagicEffect_ErrorMask>>(this.MagicEffects.Overall.Combine(rhs.MagicEffects.Overall), ((IErrorMask<Group_ErrorMask<MagicEffect_ErrorMask>>)this.MagicEffects.Specific).Combine(rhs.MagicEffects.Specific));
            ret.Scripts = new MaskItem<Exception, Group_ErrorMask<Script_ErrorMask>>(this.Scripts.Overall.Combine(rhs.Scripts.Overall), ((IErrorMask<Group_ErrorMask<Script_ErrorMask>>)this.Scripts.Specific).Combine(rhs.Scripts.Specific));
            ret.LandTextures = new MaskItem<Exception, Group_ErrorMask<LandTexture_ErrorMask>>(this.LandTextures.Overall.Combine(rhs.LandTextures.Overall), ((IErrorMask<Group_ErrorMask<LandTexture_ErrorMask>>)this.LandTextures.Specific).Combine(rhs.LandTextures.Specific));
            ret.Enchantments = new MaskItem<Exception, Group_ErrorMask<Enchantment_ErrorMask>>(this.Enchantments.Overall.Combine(rhs.Enchantments.Overall), ((IErrorMask<Group_ErrorMask<Enchantment_ErrorMask>>)this.Enchantments.Specific).Combine(rhs.Enchantments.Specific));
            ret.Spells = new MaskItem<Exception, Group_ErrorMask<SpellUnleveled_ErrorMask>>(this.Spells.Overall.Combine(rhs.Spells.Overall), ((IErrorMask<Group_ErrorMask<SpellUnleveled_ErrorMask>>)this.Spells.Specific).Combine(rhs.Spells.Specific));
            ret.Birthsigns = new MaskItem<Exception, Group_ErrorMask<Birthsign_ErrorMask>>(this.Birthsigns.Overall.Combine(rhs.Birthsigns.Overall), ((IErrorMask<Group_ErrorMask<Birthsign_ErrorMask>>)this.Birthsigns.Specific).Combine(rhs.Birthsigns.Specific));
            ret.Activators = new MaskItem<Exception, Group_ErrorMask<Activator_ErrorMask>>(this.Activators.Overall.Combine(rhs.Activators.Overall), ((IErrorMask<Group_ErrorMask<Activator_ErrorMask>>)this.Activators.Specific).Combine(rhs.Activators.Specific));
            ret.AlchemicalApparatus = new MaskItem<Exception, Group_ErrorMask<AlchemicalApparatus_ErrorMask>>(this.AlchemicalApparatus.Overall.Combine(rhs.AlchemicalApparatus.Overall), ((IErrorMask<Group_ErrorMask<AlchemicalApparatus_ErrorMask>>)this.AlchemicalApparatus.Specific).Combine(rhs.AlchemicalApparatus.Specific));
            ret.Armors = new MaskItem<Exception, Group_ErrorMask<Armor_ErrorMask>>(this.Armors.Overall.Combine(rhs.Armors.Overall), ((IErrorMask<Group_ErrorMask<Armor_ErrorMask>>)this.Armors.Specific).Combine(rhs.Armors.Specific));
            ret.Books = new MaskItem<Exception, Group_ErrorMask<Book_ErrorMask>>(this.Books.Overall.Combine(rhs.Books.Overall), ((IErrorMask<Group_ErrorMask<Book_ErrorMask>>)this.Books.Specific).Combine(rhs.Books.Specific));
            ret.Clothes = new MaskItem<Exception, Group_ErrorMask<Clothing_ErrorMask>>(this.Clothes.Overall.Combine(rhs.Clothes.Overall), ((IErrorMask<Group_ErrorMask<Clothing_ErrorMask>>)this.Clothes.Specific).Combine(rhs.Clothes.Specific));
            ret.Containers = new MaskItem<Exception, Group_ErrorMask<Container_ErrorMask>>(this.Containers.Overall.Combine(rhs.Containers.Overall), ((IErrorMask<Group_ErrorMask<Container_ErrorMask>>)this.Containers.Specific).Combine(rhs.Containers.Specific));
            ret.Doors = new MaskItem<Exception, Group_ErrorMask<Door_ErrorMask>>(this.Doors.Overall.Combine(rhs.Doors.Overall), ((IErrorMask<Group_ErrorMask<Door_ErrorMask>>)this.Doors.Specific).Combine(rhs.Doors.Specific));
            ret.Ingredients = new MaskItem<Exception, Group_ErrorMask<Ingredient_ErrorMask>>(this.Ingredients.Overall.Combine(rhs.Ingredients.Overall), ((IErrorMask<Group_ErrorMask<Ingredient_ErrorMask>>)this.Ingredients.Specific).Combine(rhs.Ingredients.Specific));
            ret.Lights = new MaskItem<Exception, Group_ErrorMask<Light_ErrorMask>>(this.Lights.Overall.Combine(rhs.Lights.Overall), ((IErrorMask<Group_ErrorMask<Light_ErrorMask>>)this.Lights.Specific).Combine(rhs.Lights.Specific));
            ret.Miscellaneous = new MaskItem<Exception, Group_ErrorMask<Miscellaneous_ErrorMask>>(this.Miscellaneous.Overall.Combine(rhs.Miscellaneous.Overall), ((IErrorMask<Group_ErrorMask<Miscellaneous_ErrorMask>>)this.Miscellaneous.Specific).Combine(rhs.Miscellaneous.Specific));
            ret.Statics = new MaskItem<Exception, Group_ErrorMask<Static_ErrorMask>>(this.Statics.Overall.Combine(rhs.Statics.Overall), ((IErrorMask<Group_ErrorMask<Static_ErrorMask>>)this.Statics.Specific).Combine(rhs.Statics.Specific));
            ret.Grasses = new MaskItem<Exception, Group_ErrorMask<Grass_ErrorMask>>(this.Grasses.Overall.Combine(rhs.Grasses.Overall), ((IErrorMask<Group_ErrorMask<Grass_ErrorMask>>)this.Grasses.Specific).Combine(rhs.Grasses.Specific));
            ret.Trees = new MaskItem<Exception, Group_ErrorMask<Tree_ErrorMask>>(this.Trees.Overall.Combine(rhs.Trees.Overall), ((IErrorMask<Group_ErrorMask<Tree_ErrorMask>>)this.Trees.Specific).Combine(rhs.Trees.Specific));
            ret.Flora = new MaskItem<Exception, Group_ErrorMask<Flora_ErrorMask>>(this.Flora.Overall.Combine(rhs.Flora.Overall), ((IErrorMask<Group_ErrorMask<Flora_ErrorMask>>)this.Flora.Specific).Combine(rhs.Flora.Specific));
            ret.Furnature = new MaskItem<Exception, Group_ErrorMask<Furnature_ErrorMask>>(this.Furnature.Overall.Combine(rhs.Furnature.Overall), ((IErrorMask<Group_ErrorMask<Furnature_ErrorMask>>)this.Furnature.Specific).Combine(rhs.Furnature.Specific));
            ret.Weapons = new MaskItem<Exception, Group_ErrorMask<Weapon_ErrorMask>>(this.Weapons.Overall.Combine(rhs.Weapons.Overall), ((IErrorMask<Group_ErrorMask<Weapon_ErrorMask>>)this.Weapons.Specific).Combine(rhs.Weapons.Specific));
            ret.Ammo = new MaskItem<Exception, Group_ErrorMask<Ammo_ErrorMask>>(this.Ammo.Overall.Combine(rhs.Ammo.Overall), ((IErrorMask<Group_ErrorMask<Ammo_ErrorMask>>)this.Ammo.Specific).Combine(rhs.Ammo.Specific));
            ret.NPCs = new MaskItem<Exception, Group_ErrorMask<NPC_ErrorMask>>(this.NPCs.Overall.Combine(rhs.NPCs.Overall), ((IErrorMask<Group_ErrorMask<NPC_ErrorMask>>)this.NPCs.Specific).Combine(rhs.NPCs.Specific));
            ret.Creatures = new MaskItem<Exception, Group_ErrorMask<Creature_ErrorMask>>(this.Creatures.Overall.Combine(rhs.Creatures.Overall), ((IErrorMask<Group_ErrorMask<Creature_ErrorMask>>)this.Creatures.Specific).Combine(rhs.Creatures.Specific));
            ret.LeveledCreatures = new MaskItem<Exception, Group_ErrorMask<LeveledCreature_ErrorMask>>(this.LeveledCreatures.Overall.Combine(rhs.LeveledCreatures.Overall), ((IErrorMask<Group_ErrorMask<LeveledCreature_ErrorMask>>)this.LeveledCreatures.Specific).Combine(rhs.LeveledCreatures.Specific));
            ret.SoulGems = new MaskItem<Exception, Group_ErrorMask<SoulGem_ErrorMask>>(this.SoulGems.Overall.Combine(rhs.SoulGems.Overall), ((IErrorMask<Group_ErrorMask<SoulGem_ErrorMask>>)this.SoulGems.Specific).Combine(rhs.SoulGems.Specific));
            ret.Keys = new MaskItem<Exception, Group_ErrorMask<Key_ErrorMask>>(this.Keys.Overall.Combine(rhs.Keys.Overall), ((IErrorMask<Group_ErrorMask<Key_ErrorMask>>)this.Keys.Specific).Combine(rhs.Keys.Specific));
            ret.Potions = new MaskItem<Exception, Group_ErrorMask<Potion_ErrorMask>>(this.Potions.Overall.Combine(rhs.Potions.Overall), ((IErrorMask<Group_ErrorMask<Potion_ErrorMask>>)this.Potions.Specific).Combine(rhs.Potions.Specific));
            ret.Subspaces = new MaskItem<Exception, Group_ErrorMask<Subspace_ErrorMask>>(this.Subspaces.Overall.Combine(rhs.Subspaces.Overall), ((IErrorMask<Group_ErrorMask<Subspace_ErrorMask>>)this.Subspaces.Specific).Combine(rhs.Subspaces.Specific));
            ret.SigilStones = new MaskItem<Exception, Group_ErrorMask<SigilStone_ErrorMask>>(this.SigilStones.Overall.Combine(rhs.SigilStones.Overall), ((IErrorMask<Group_ErrorMask<SigilStone_ErrorMask>>)this.SigilStones.Specific).Combine(rhs.SigilStones.Specific));
            ret.LeveledItems = new MaskItem<Exception, Group_ErrorMask<LeveledItem_ErrorMask>>(this.LeveledItems.Overall.Combine(rhs.LeveledItems.Overall), ((IErrorMask<Group_ErrorMask<LeveledItem_ErrorMask>>)this.LeveledItems.Specific).Combine(rhs.LeveledItems.Specific));
            ret.Weathers = new MaskItem<Exception, Group_ErrorMask<Weather_ErrorMask>>(this.Weathers.Overall.Combine(rhs.Weathers.Overall), ((IErrorMask<Group_ErrorMask<Weather_ErrorMask>>)this.Weathers.Specific).Combine(rhs.Weathers.Specific));
            ret.Climates = new MaskItem<Exception, Group_ErrorMask<Climate_ErrorMask>>(this.Climates.Overall.Combine(rhs.Climates.Overall), ((IErrorMask<Group_ErrorMask<Climate_ErrorMask>>)this.Climates.Specific).Combine(rhs.Climates.Specific));
            ret.Regions = new MaskItem<Exception, Group_ErrorMask<Region_ErrorMask>>(this.Regions.Overall.Combine(rhs.Regions.Overall), ((IErrorMask<Group_ErrorMask<Region_ErrorMask>>)this.Regions.Specific).Combine(rhs.Regions.Specific));
            ret.Cells = new MaskItem<Exception, ListGroup_ErrorMask<CellBlock_ErrorMask>>(this.Cells.Overall.Combine(rhs.Cells.Overall), ((IErrorMask<ListGroup_ErrorMask<CellBlock_ErrorMask>>)this.Cells.Specific).Combine(rhs.Cells.Specific));
            ret.Worldspaces = new MaskItem<Exception, Group_ErrorMask<Worldspace_ErrorMask>>(this.Worldspaces.Overall.Combine(rhs.Worldspaces.Overall), ((IErrorMask<Group_ErrorMask<Worldspace_ErrorMask>>)this.Worldspaces.Specific).Combine(rhs.Worldspaces.Specific));
            ret.DialogTopics = new MaskItem<Exception, Group_ErrorMask<DialogTopic_ErrorMask>>(this.DialogTopics.Overall.Combine(rhs.DialogTopics.Overall), ((IErrorMask<Group_ErrorMask<DialogTopic_ErrorMask>>)this.DialogTopics.Specific).Combine(rhs.DialogTopics.Specific));
            ret.Quests = new MaskItem<Exception, Group_ErrorMask<Quest_ErrorMask>>(this.Quests.Overall.Combine(rhs.Quests.Overall), ((IErrorMask<Group_ErrorMask<Quest_ErrorMask>>)this.Quests.Specific).Combine(rhs.Quests.Specific));
            ret.IdleAnimations = new MaskItem<Exception, Group_ErrorMask<IdleAnimation_ErrorMask>>(this.IdleAnimations.Overall.Combine(rhs.IdleAnimations.Overall), ((IErrorMask<Group_ErrorMask<IdleAnimation_ErrorMask>>)this.IdleAnimations.Specific).Combine(rhs.IdleAnimations.Specific));
            ret.AIPackages = new MaskItem<Exception, Group_ErrorMask<AIPackage_ErrorMask>>(this.AIPackages.Overall.Combine(rhs.AIPackages.Overall), ((IErrorMask<Group_ErrorMask<AIPackage_ErrorMask>>)this.AIPackages.Specific).Combine(rhs.AIPackages.Specific));
            ret.CombatStyles = new MaskItem<Exception, Group_ErrorMask<CombatStyle_ErrorMask>>(this.CombatStyles.Overall.Combine(rhs.CombatStyles.Overall), ((IErrorMask<Group_ErrorMask<CombatStyle_ErrorMask>>)this.CombatStyles.Specific).Combine(rhs.CombatStyles.Specific));
            ret.LoadScreens = new MaskItem<Exception, Group_ErrorMask<LoadScreen_ErrorMask>>(this.LoadScreens.Overall.Combine(rhs.LoadScreens.Overall), ((IErrorMask<Group_ErrorMask<LoadScreen_ErrorMask>>)this.LoadScreens.Specific).Combine(rhs.LoadScreens.Specific));
            ret.LeveledSpells = new MaskItem<Exception, Group_ErrorMask<LeveledSpell_ErrorMask>>(this.LeveledSpells.Overall.Combine(rhs.LeveledSpells.Overall), ((IErrorMask<Group_ErrorMask<LeveledSpell_ErrorMask>>)this.LeveledSpells.Specific).Combine(rhs.LeveledSpells.Specific));
            ret.AnimatedObjects = new MaskItem<Exception, Group_ErrorMask<AnimatedObject_ErrorMask>>(this.AnimatedObjects.Overall.Combine(rhs.AnimatedObjects.Overall), ((IErrorMask<Group_ErrorMask<AnimatedObject_ErrorMask>>)this.AnimatedObjects.Specific).Combine(rhs.AnimatedObjects.Specific));
            ret.Waters = new MaskItem<Exception, Group_ErrorMask<Water_ErrorMask>>(this.Waters.Overall.Combine(rhs.Waters.Overall), ((IErrorMask<Group_ErrorMask<Water_ErrorMask>>)this.Waters.Specific).Combine(rhs.Waters.Specific));
            ret.EffectShaders = new MaskItem<Exception, Group_ErrorMask<EffectShader_ErrorMask>>(this.EffectShaders.Overall.Combine(rhs.EffectShaders.Overall), ((IErrorMask<Group_ErrorMask<EffectShader_ErrorMask>>)this.EffectShaders.Specific).Combine(rhs.EffectShaders.Specific));
            return ret;
        }
        public static OblivionMod_ErrorMask Combine(OblivionMod_ErrorMask lhs, OblivionMod_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static OblivionMod_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new OblivionMod_ErrorMask();
        }
        #endregion

    }
    public class OblivionMod_CopyMask
    {
        public OblivionMod_CopyMask()
        {
        }

        public OblivionMod_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.TES4 = new MaskItem<bool, TES4_CopyMask>(defaultOn, default);
            this.GameSettings = new MaskItem<bool, Group_CopyMask<GameSetting_CopyMask>>(defaultOn, default);
            this.Globals = new MaskItem<bool, Group_CopyMask<Global_CopyMask>>(defaultOn, default);
            this.Classes = new MaskItem<bool, Group_CopyMask<Class_CopyMask>>(defaultOn, default);
            this.Factions = new MaskItem<bool, Group_CopyMask<Faction_CopyMask>>(defaultOn, default);
            this.Hairs = new MaskItem<bool, Group_CopyMask<Hair_CopyMask>>(defaultOn, default);
            this.Eyes = new MaskItem<bool, Group_CopyMask<Eye_CopyMask>>(defaultOn, default);
            this.Races = new MaskItem<bool, Group_CopyMask<Race_CopyMask>>(defaultOn, default);
            this.Sounds = new MaskItem<bool, Group_CopyMask<Sound_CopyMask>>(defaultOn, default);
            this.Skills = new MaskItem<bool, Group_CopyMask<SkillRecord_CopyMask>>(defaultOn, default);
            this.MagicEffects = new MaskItem<bool, Group_CopyMask<MagicEffect_CopyMask>>(defaultOn, default);
            this.Scripts = new MaskItem<bool, Group_CopyMask<Script_CopyMask>>(defaultOn, default);
            this.LandTextures = new MaskItem<bool, Group_CopyMask<LandTexture_CopyMask>>(defaultOn, default);
            this.Enchantments = new MaskItem<bool, Group_CopyMask<Enchantment_CopyMask>>(defaultOn, default);
            this.Spells = new MaskItem<bool, Group_CopyMask<SpellUnleveled_CopyMask>>(defaultOn, default);
            this.Birthsigns = new MaskItem<bool, Group_CopyMask<Birthsign_CopyMask>>(defaultOn, default);
            this.Activators = new MaskItem<bool, Group_CopyMask<Activator_CopyMask>>(defaultOn, default);
            this.AlchemicalApparatus = new MaskItem<bool, Group_CopyMask<AlchemicalApparatus_CopyMask>>(defaultOn, default);
            this.Armors = new MaskItem<bool, Group_CopyMask<Armor_CopyMask>>(defaultOn, default);
            this.Books = new MaskItem<bool, Group_CopyMask<Book_CopyMask>>(defaultOn, default);
            this.Clothes = new MaskItem<bool, Group_CopyMask<Clothing_CopyMask>>(defaultOn, default);
            this.Containers = new MaskItem<bool, Group_CopyMask<Container_CopyMask>>(defaultOn, default);
            this.Doors = new MaskItem<bool, Group_CopyMask<Door_CopyMask>>(defaultOn, default);
            this.Ingredients = new MaskItem<bool, Group_CopyMask<Ingredient_CopyMask>>(defaultOn, default);
            this.Lights = new MaskItem<bool, Group_CopyMask<Light_CopyMask>>(defaultOn, default);
            this.Miscellaneous = new MaskItem<bool, Group_CopyMask<Miscellaneous_CopyMask>>(defaultOn, default);
            this.Statics = new MaskItem<bool, Group_CopyMask<Static_CopyMask>>(defaultOn, default);
            this.Grasses = new MaskItem<bool, Group_CopyMask<Grass_CopyMask>>(defaultOn, default);
            this.Trees = new MaskItem<bool, Group_CopyMask<Tree_CopyMask>>(defaultOn, default);
            this.Flora = new MaskItem<bool, Group_CopyMask<Flora_CopyMask>>(defaultOn, default);
            this.Furnature = new MaskItem<bool, Group_CopyMask<Furnature_CopyMask>>(defaultOn, default);
            this.Weapons = new MaskItem<bool, Group_CopyMask<Weapon_CopyMask>>(defaultOn, default);
            this.Ammo = new MaskItem<bool, Group_CopyMask<Ammo_CopyMask>>(defaultOn, default);
            this.NPCs = new MaskItem<bool, Group_CopyMask<NPC_CopyMask>>(defaultOn, default);
            this.Creatures = new MaskItem<bool, Group_CopyMask<Creature_CopyMask>>(defaultOn, default);
            this.LeveledCreatures = new MaskItem<bool, Group_CopyMask<LeveledCreature_CopyMask>>(defaultOn, default);
            this.SoulGems = new MaskItem<bool, Group_CopyMask<SoulGem_CopyMask>>(defaultOn, default);
            this.Keys = new MaskItem<bool, Group_CopyMask<Key_CopyMask>>(defaultOn, default);
            this.Potions = new MaskItem<bool, Group_CopyMask<Potion_CopyMask>>(defaultOn, default);
            this.Subspaces = new MaskItem<bool, Group_CopyMask<Subspace_CopyMask>>(defaultOn, default);
            this.SigilStones = new MaskItem<bool, Group_CopyMask<SigilStone_CopyMask>>(defaultOn, default);
            this.LeveledItems = new MaskItem<bool, Group_CopyMask<LeveledItem_CopyMask>>(defaultOn, default);
            this.Weathers = new MaskItem<bool, Group_CopyMask<Weather_CopyMask>>(defaultOn, default);
            this.Climates = new MaskItem<bool, Group_CopyMask<Climate_CopyMask>>(defaultOn, default);
            this.Regions = new MaskItem<bool, Group_CopyMask<Region_CopyMask>>(defaultOn, default);
            this.Cells = new MaskItem<bool, ListGroup_CopyMask<CellBlock_CopyMask>>(defaultOn, default);
            this.Worldspaces = new MaskItem<bool, Group_CopyMask<Worldspace_CopyMask>>(defaultOn, default);
            this.DialogTopics = new MaskItem<bool, Group_CopyMask<DialogTopic_CopyMask>>(defaultOn, default);
            this.Quests = new MaskItem<bool, Group_CopyMask<Quest_CopyMask>>(defaultOn, default);
            this.IdleAnimations = new MaskItem<bool, Group_CopyMask<IdleAnimation_CopyMask>>(defaultOn, default);
            this.AIPackages = new MaskItem<bool, Group_CopyMask<AIPackage_CopyMask>>(defaultOn, default);
            this.CombatStyles = new MaskItem<bool, Group_CopyMask<CombatStyle_CopyMask>>(defaultOn, default);
            this.LoadScreens = new MaskItem<bool, Group_CopyMask<LoadScreen_CopyMask>>(defaultOn, default);
            this.LeveledSpells = new MaskItem<bool, Group_CopyMask<LeveledSpell_CopyMask>>(defaultOn, default);
            this.AnimatedObjects = new MaskItem<bool, Group_CopyMask<AnimatedObject_CopyMask>>(defaultOn, default);
            this.Waters = new MaskItem<bool, Group_CopyMask<Water_CopyMask>>(defaultOn, default);
            this.EffectShaders = new MaskItem<bool, Group_CopyMask<EffectShader_CopyMask>>(defaultOn, default);
        }

        #region Members
        public MaskItem<bool, TES4_CopyMask> TES4;
        public MaskItem<bool, Group_CopyMask<GameSetting_CopyMask>> GameSettings;
        public MaskItem<bool, Group_CopyMask<Global_CopyMask>> Globals;
        public MaskItem<bool, Group_CopyMask<Class_CopyMask>> Classes;
        public MaskItem<bool, Group_CopyMask<Faction_CopyMask>> Factions;
        public MaskItem<bool, Group_CopyMask<Hair_CopyMask>> Hairs;
        public MaskItem<bool, Group_CopyMask<Eye_CopyMask>> Eyes;
        public MaskItem<bool, Group_CopyMask<Race_CopyMask>> Races;
        public MaskItem<bool, Group_CopyMask<Sound_CopyMask>> Sounds;
        public MaskItem<bool, Group_CopyMask<SkillRecord_CopyMask>> Skills;
        public MaskItem<bool, Group_CopyMask<MagicEffect_CopyMask>> MagicEffects;
        public MaskItem<bool, Group_CopyMask<Script_CopyMask>> Scripts;
        public MaskItem<bool, Group_CopyMask<LandTexture_CopyMask>> LandTextures;
        public MaskItem<bool, Group_CopyMask<Enchantment_CopyMask>> Enchantments;
        public MaskItem<bool, Group_CopyMask<SpellUnleveled_CopyMask>> Spells;
        public MaskItem<bool, Group_CopyMask<Birthsign_CopyMask>> Birthsigns;
        public MaskItem<bool, Group_CopyMask<Activator_CopyMask>> Activators;
        public MaskItem<bool, Group_CopyMask<AlchemicalApparatus_CopyMask>> AlchemicalApparatus;
        public MaskItem<bool, Group_CopyMask<Armor_CopyMask>> Armors;
        public MaskItem<bool, Group_CopyMask<Book_CopyMask>> Books;
        public MaskItem<bool, Group_CopyMask<Clothing_CopyMask>> Clothes;
        public MaskItem<bool, Group_CopyMask<Container_CopyMask>> Containers;
        public MaskItem<bool, Group_CopyMask<Door_CopyMask>> Doors;
        public MaskItem<bool, Group_CopyMask<Ingredient_CopyMask>> Ingredients;
        public MaskItem<bool, Group_CopyMask<Light_CopyMask>> Lights;
        public MaskItem<bool, Group_CopyMask<Miscellaneous_CopyMask>> Miscellaneous;
        public MaskItem<bool, Group_CopyMask<Static_CopyMask>> Statics;
        public MaskItem<bool, Group_CopyMask<Grass_CopyMask>> Grasses;
        public MaskItem<bool, Group_CopyMask<Tree_CopyMask>> Trees;
        public MaskItem<bool, Group_CopyMask<Flora_CopyMask>> Flora;
        public MaskItem<bool, Group_CopyMask<Furnature_CopyMask>> Furnature;
        public MaskItem<bool, Group_CopyMask<Weapon_CopyMask>> Weapons;
        public MaskItem<bool, Group_CopyMask<Ammo_CopyMask>> Ammo;
        public MaskItem<bool, Group_CopyMask<NPC_CopyMask>> NPCs;
        public MaskItem<bool, Group_CopyMask<Creature_CopyMask>> Creatures;
        public MaskItem<bool, Group_CopyMask<LeveledCreature_CopyMask>> LeveledCreatures;
        public MaskItem<bool, Group_CopyMask<SoulGem_CopyMask>> SoulGems;
        public MaskItem<bool, Group_CopyMask<Key_CopyMask>> Keys;
        public MaskItem<bool, Group_CopyMask<Potion_CopyMask>> Potions;
        public MaskItem<bool, Group_CopyMask<Subspace_CopyMask>> Subspaces;
        public MaskItem<bool, Group_CopyMask<SigilStone_CopyMask>> SigilStones;
        public MaskItem<bool, Group_CopyMask<LeveledItem_CopyMask>> LeveledItems;
        public MaskItem<bool, Group_CopyMask<Weather_CopyMask>> Weathers;
        public MaskItem<bool, Group_CopyMask<Climate_CopyMask>> Climates;
        public MaskItem<bool, Group_CopyMask<Region_CopyMask>> Regions;
        public MaskItem<bool, ListGroup_CopyMask<CellBlock_CopyMask>> Cells;
        public MaskItem<bool, Group_CopyMask<Worldspace_CopyMask>> Worldspaces;
        public MaskItem<bool, Group_CopyMask<DialogTopic_CopyMask>> DialogTopics;
        public MaskItem<bool, Group_CopyMask<Quest_CopyMask>> Quests;
        public MaskItem<bool, Group_CopyMask<IdleAnimation_CopyMask>> IdleAnimations;
        public MaskItem<bool, Group_CopyMask<AIPackage_CopyMask>> AIPackages;
        public MaskItem<bool, Group_CopyMask<CombatStyle_CopyMask>> CombatStyles;
        public MaskItem<bool, Group_CopyMask<LoadScreen_CopyMask>> LoadScreens;
        public MaskItem<bool, Group_CopyMask<LeveledSpell_CopyMask>> LeveledSpells;
        public MaskItem<bool, Group_CopyMask<AnimatedObject_CopyMask>> AnimatedObjects;
        public MaskItem<bool, Group_CopyMask<Water_CopyMask>> Waters;
        public MaskItem<bool, Group_CopyMask<EffectShader_CopyMask>> EffectShaders;
        #endregion

    }

    public class OblivionMod_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public MaskItem<bool, TES4_TranslationMask> TES4;
        public MaskItem<bool, Group_TranslationMask<GameSetting_TranslationMask>> GameSettings;
        public MaskItem<bool, Group_TranslationMask<Global_TranslationMask>> Globals;
        public MaskItem<bool, Group_TranslationMask<Class_TranslationMask>> Classes;
        public MaskItem<bool, Group_TranslationMask<Faction_TranslationMask>> Factions;
        public MaskItem<bool, Group_TranslationMask<Hair_TranslationMask>> Hairs;
        public MaskItem<bool, Group_TranslationMask<Eye_TranslationMask>> Eyes;
        public MaskItem<bool, Group_TranslationMask<Race_TranslationMask>> Races;
        public MaskItem<bool, Group_TranslationMask<Sound_TranslationMask>> Sounds;
        public MaskItem<bool, Group_TranslationMask<SkillRecord_TranslationMask>> Skills;
        public MaskItem<bool, Group_TranslationMask<MagicEffect_TranslationMask>> MagicEffects;
        public MaskItem<bool, Group_TranslationMask<Script_TranslationMask>> Scripts;
        public MaskItem<bool, Group_TranslationMask<LandTexture_TranslationMask>> LandTextures;
        public MaskItem<bool, Group_TranslationMask<Enchantment_TranslationMask>> Enchantments;
        public MaskItem<bool, Group_TranslationMask<SpellUnleveled_TranslationMask>> Spells;
        public MaskItem<bool, Group_TranslationMask<Birthsign_TranslationMask>> Birthsigns;
        public MaskItem<bool, Group_TranslationMask<Activator_TranslationMask>> Activators;
        public MaskItem<bool, Group_TranslationMask<AlchemicalApparatus_TranslationMask>> AlchemicalApparatus;
        public MaskItem<bool, Group_TranslationMask<Armor_TranslationMask>> Armors;
        public MaskItem<bool, Group_TranslationMask<Book_TranslationMask>> Books;
        public MaskItem<bool, Group_TranslationMask<Clothing_TranslationMask>> Clothes;
        public MaskItem<bool, Group_TranslationMask<Container_TranslationMask>> Containers;
        public MaskItem<bool, Group_TranslationMask<Door_TranslationMask>> Doors;
        public MaskItem<bool, Group_TranslationMask<Ingredient_TranslationMask>> Ingredients;
        public MaskItem<bool, Group_TranslationMask<Light_TranslationMask>> Lights;
        public MaskItem<bool, Group_TranslationMask<Miscellaneous_TranslationMask>> Miscellaneous;
        public MaskItem<bool, Group_TranslationMask<Static_TranslationMask>> Statics;
        public MaskItem<bool, Group_TranslationMask<Grass_TranslationMask>> Grasses;
        public MaskItem<bool, Group_TranslationMask<Tree_TranslationMask>> Trees;
        public MaskItem<bool, Group_TranslationMask<Flora_TranslationMask>> Flora;
        public MaskItem<bool, Group_TranslationMask<Furnature_TranslationMask>> Furnature;
        public MaskItem<bool, Group_TranslationMask<Weapon_TranslationMask>> Weapons;
        public MaskItem<bool, Group_TranslationMask<Ammo_TranslationMask>> Ammo;
        public MaskItem<bool, Group_TranslationMask<NPC_TranslationMask>> NPCs;
        public MaskItem<bool, Group_TranslationMask<Creature_TranslationMask>> Creatures;
        public MaskItem<bool, Group_TranslationMask<LeveledCreature_TranslationMask>> LeveledCreatures;
        public MaskItem<bool, Group_TranslationMask<SoulGem_TranslationMask>> SoulGems;
        public MaskItem<bool, Group_TranslationMask<Key_TranslationMask>> Keys;
        public MaskItem<bool, Group_TranslationMask<Potion_TranslationMask>> Potions;
        public MaskItem<bool, Group_TranslationMask<Subspace_TranslationMask>> Subspaces;
        public MaskItem<bool, Group_TranslationMask<SigilStone_TranslationMask>> SigilStones;
        public MaskItem<bool, Group_TranslationMask<LeveledItem_TranslationMask>> LeveledItems;
        public MaskItem<bool, Group_TranslationMask<Weather_TranslationMask>> Weathers;
        public MaskItem<bool, Group_TranslationMask<Climate_TranslationMask>> Climates;
        public MaskItem<bool, Group_TranslationMask<Region_TranslationMask>> Regions;
        public MaskItem<bool, ListGroup_TranslationMask<CellBlock_TranslationMask>> Cells;
        public MaskItem<bool, Group_TranslationMask<Worldspace_TranslationMask>> Worldspaces;
        public MaskItem<bool, Group_TranslationMask<DialogTopic_TranslationMask>> DialogTopics;
        public MaskItem<bool, Group_TranslationMask<Quest_TranslationMask>> Quests;
        public MaskItem<bool, Group_TranslationMask<IdleAnimation_TranslationMask>> IdleAnimations;
        public MaskItem<bool, Group_TranslationMask<AIPackage_TranslationMask>> AIPackages;
        public MaskItem<bool, Group_TranslationMask<CombatStyle_TranslationMask>> CombatStyles;
        public MaskItem<bool, Group_TranslationMask<LoadScreen_TranslationMask>> LoadScreens;
        public MaskItem<bool, Group_TranslationMask<LeveledSpell_TranslationMask>> LeveledSpells;
        public MaskItem<bool, Group_TranslationMask<AnimatedObject_TranslationMask>> AnimatedObjects;
        public MaskItem<bool, Group_TranslationMask<Water_TranslationMask>> Waters;
        public MaskItem<bool, Group_TranslationMask<EffectShader_TranslationMask>> EffectShaders;
        #endregion

        #region Ctors
        public OblivionMod_TranslationMask()
        {
        }

        public OblivionMod_TranslationMask(bool defaultOn)
        {
            this.TES4 = new MaskItem<bool, TES4_TranslationMask>(defaultOn, null);
            this.GameSettings = new MaskItem<bool, Group_TranslationMask<GameSetting_TranslationMask>>(defaultOn, null);
            this.Globals = new MaskItem<bool, Group_TranslationMask<Global_TranslationMask>>(defaultOn, null);
            this.Classes = new MaskItem<bool, Group_TranslationMask<Class_TranslationMask>>(defaultOn, null);
            this.Factions = new MaskItem<bool, Group_TranslationMask<Faction_TranslationMask>>(defaultOn, null);
            this.Hairs = new MaskItem<bool, Group_TranslationMask<Hair_TranslationMask>>(defaultOn, null);
            this.Eyes = new MaskItem<bool, Group_TranslationMask<Eye_TranslationMask>>(defaultOn, null);
            this.Races = new MaskItem<bool, Group_TranslationMask<Race_TranslationMask>>(defaultOn, null);
            this.Sounds = new MaskItem<bool, Group_TranslationMask<Sound_TranslationMask>>(defaultOn, null);
            this.Skills = new MaskItem<bool, Group_TranslationMask<SkillRecord_TranslationMask>>(defaultOn, null);
            this.MagicEffects = new MaskItem<bool, Group_TranslationMask<MagicEffect_TranslationMask>>(defaultOn, null);
            this.Scripts = new MaskItem<bool, Group_TranslationMask<Script_TranslationMask>>(defaultOn, null);
            this.LandTextures = new MaskItem<bool, Group_TranslationMask<LandTexture_TranslationMask>>(defaultOn, null);
            this.Enchantments = new MaskItem<bool, Group_TranslationMask<Enchantment_TranslationMask>>(defaultOn, null);
            this.Spells = new MaskItem<bool, Group_TranslationMask<SpellUnleveled_TranslationMask>>(defaultOn, null);
            this.Birthsigns = new MaskItem<bool, Group_TranslationMask<Birthsign_TranslationMask>>(defaultOn, null);
            this.Activators = new MaskItem<bool, Group_TranslationMask<Activator_TranslationMask>>(defaultOn, null);
            this.AlchemicalApparatus = new MaskItem<bool, Group_TranslationMask<AlchemicalApparatus_TranslationMask>>(defaultOn, null);
            this.Armors = new MaskItem<bool, Group_TranslationMask<Armor_TranslationMask>>(defaultOn, null);
            this.Books = new MaskItem<bool, Group_TranslationMask<Book_TranslationMask>>(defaultOn, null);
            this.Clothes = new MaskItem<bool, Group_TranslationMask<Clothing_TranslationMask>>(defaultOn, null);
            this.Containers = new MaskItem<bool, Group_TranslationMask<Container_TranslationMask>>(defaultOn, null);
            this.Doors = new MaskItem<bool, Group_TranslationMask<Door_TranslationMask>>(defaultOn, null);
            this.Ingredients = new MaskItem<bool, Group_TranslationMask<Ingredient_TranslationMask>>(defaultOn, null);
            this.Lights = new MaskItem<bool, Group_TranslationMask<Light_TranslationMask>>(defaultOn, null);
            this.Miscellaneous = new MaskItem<bool, Group_TranslationMask<Miscellaneous_TranslationMask>>(defaultOn, null);
            this.Statics = new MaskItem<bool, Group_TranslationMask<Static_TranslationMask>>(defaultOn, null);
            this.Grasses = new MaskItem<bool, Group_TranslationMask<Grass_TranslationMask>>(defaultOn, null);
            this.Trees = new MaskItem<bool, Group_TranslationMask<Tree_TranslationMask>>(defaultOn, null);
            this.Flora = new MaskItem<bool, Group_TranslationMask<Flora_TranslationMask>>(defaultOn, null);
            this.Furnature = new MaskItem<bool, Group_TranslationMask<Furnature_TranslationMask>>(defaultOn, null);
            this.Weapons = new MaskItem<bool, Group_TranslationMask<Weapon_TranslationMask>>(defaultOn, null);
            this.Ammo = new MaskItem<bool, Group_TranslationMask<Ammo_TranslationMask>>(defaultOn, null);
            this.NPCs = new MaskItem<bool, Group_TranslationMask<NPC_TranslationMask>>(defaultOn, null);
            this.Creatures = new MaskItem<bool, Group_TranslationMask<Creature_TranslationMask>>(defaultOn, null);
            this.LeveledCreatures = new MaskItem<bool, Group_TranslationMask<LeveledCreature_TranslationMask>>(defaultOn, null);
            this.SoulGems = new MaskItem<bool, Group_TranslationMask<SoulGem_TranslationMask>>(defaultOn, null);
            this.Keys = new MaskItem<bool, Group_TranslationMask<Key_TranslationMask>>(defaultOn, null);
            this.Potions = new MaskItem<bool, Group_TranslationMask<Potion_TranslationMask>>(defaultOn, null);
            this.Subspaces = new MaskItem<bool, Group_TranslationMask<Subspace_TranslationMask>>(defaultOn, null);
            this.SigilStones = new MaskItem<bool, Group_TranslationMask<SigilStone_TranslationMask>>(defaultOn, null);
            this.LeveledItems = new MaskItem<bool, Group_TranslationMask<LeveledItem_TranslationMask>>(defaultOn, null);
            this.Weathers = new MaskItem<bool, Group_TranslationMask<Weather_TranslationMask>>(defaultOn, null);
            this.Climates = new MaskItem<bool, Group_TranslationMask<Climate_TranslationMask>>(defaultOn, null);
            this.Regions = new MaskItem<bool, Group_TranslationMask<Region_TranslationMask>>(defaultOn, null);
            this.Cells = new MaskItem<bool, ListGroup_TranslationMask<CellBlock_TranslationMask>>(defaultOn, null);
            this.Worldspaces = new MaskItem<bool, Group_TranslationMask<Worldspace_TranslationMask>>(defaultOn, null);
            this.DialogTopics = new MaskItem<bool, Group_TranslationMask<DialogTopic_TranslationMask>>(defaultOn, null);
            this.Quests = new MaskItem<bool, Group_TranslationMask<Quest_TranslationMask>>(defaultOn, null);
            this.IdleAnimations = new MaskItem<bool, Group_TranslationMask<IdleAnimation_TranslationMask>>(defaultOn, null);
            this.AIPackages = new MaskItem<bool, Group_TranslationMask<AIPackage_TranslationMask>>(defaultOn, null);
            this.CombatStyles = new MaskItem<bool, Group_TranslationMask<CombatStyle_TranslationMask>>(defaultOn, null);
            this.LoadScreens = new MaskItem<bool, Group_TranslationMask<LoadScreen_TranslationMask>>(defaultOn, null);
            this.LeveledSpells = new MaskItem<bool, Group_TranslationMask<LeveledSpell_TranslationMask>>(defaultOn, null);
            this.AnimatedObjects = new MaskItem<bool, Group_TranslationMask<AnimatedObject_TranslationMask>>(defaultOn, null);
            this.Waters = new MaskItem<bool, Group_TranslationMask<Water_TranslationMask>>(defaultOn, null);
            this.EffectShaders = new MaskItem<bool, Group_TranslationMask<EffectShader_TranslationMask>>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((TES4?.Overall ?? true, TES4?.Specific?.GetCrystal()));
            ret.Add((GameSettings?.Overall ?? true, GameSettings?.Specific?.GetCrystal()));
            ret.Add((Globals?.Overall ?? true, Globals?.Specific?.GetCrystal()));
            ret.Add((Classes?.Overall ?? true, Classes?.Specific?.GetCrystal()));
            ret.Add((Factions?.Overall ?? true, Factions?.Specific?.GetCrystal()));
            ret.Add((Hairs?.Overall ?? true, Hairs?.Specific?.GetCrystal()));
            ret.Add((Eyes?.Overall ?? true, Eyes?.Specific?.GetCrystal()));
            ret.Add((Races?.Overall ?? true, Races?.Specific?.GetCrystal()));
            ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
            ret.Add((Skills?.Overall ?? true, Skills?.Specific?.GetCrystal()));
            ret.Add((MagicEffects?.Overall ?? true, MagicEffects?.Specific?.GetCrystal()));
            ret.Add((Scripts?.Overall ?? true, Scripts?.Specific?.GetCrystal()));
            ret.Add((LandTextures?.Overall ?? true, LandTextures?.Specific?.GetCrystal()));
            ret.Add((Enchantments?.Overall ?? true, Enchantments?.Specific?.GetCrystal()));
            ret.Add((Spells?.Overall ?? true, Spells?.Specific?.GetCrystal()));
            ret.Add((Birthsigns?.Overall ?? true, Birthsigns?.Specific?.GetCrystal()));
            ret.Add((Activators?.Overall ?? true, Activators?.Specific?.GetCrystal()));
            ret.Add((AlchemicalApparatus?.Overall ?? true, AlchemicalApparatus?.Specific?.GetCrystal()));
            ret.Add((Armors?.Overall ?? true, Armors?.Specific?.GetCrystal()));
            ret.Add((Books?.Overall ?? true, Books?.Specific?.GetCrystal()));
            ret.Add((Clothes?.Overall ?? true, Clothes?.Specific?.GetCrystal()));
            ret.Add((Containers?.Overall ?? true, Containers?.Specific?.GetCrystal()));
            ret.Add((Doors?.Overall ?? true, Doors?.Specific?.GetCrystal()));
            ret.Add((Ingredients?.Overall ?? true, Ingredients?.Specific?.GetCrystal()));
            ret.Add((Lights?.Overall ?? true, Lights?.Specific?.GetCrystal()));
            ret.Add((Miscellaneous?.Overall ?? true, Miscellaneous?.Specific?.GetCrystal()));
            ret.Add((Statics?.Overall ?? true, Statics?.Specific?.GetCrystal()));
            ret.Add((Grasses?.Overall ?? true, Grasses?.Specific?.GetCrystal()));
            ret.Add((Trees?.Overall ?? true, Trees?.Specific?.GetCrystal()));
            ret.Add((Flora?.Overall ?? true, Flora?.Specific?.GetCrystal()));
            ret.Add((Furnature?.Overall ?? true, Furnature?.Specific?.GetCrystal()));
            ret.Add((Weapons?.Overall ?? true, Weapons?.Specific?.GetCrystal()));
            ret.Add((Ammo?.Overall ?? true, Ammo?.Specific?.GetCrystal()));
            ret.Add((NPCs?.Overall ?? true, NPCs?.Specific?.GetCrystal()));
            ret.Add((Creatures?.Overall ?? true, Creatures?.Specific?.GetCrystal()));
            ret.Add((LeveledCreatures?.Overall ?? true, LeveledCreatures?.Specific?.GetCrystal()));
            ret.Add((SoulGems?.Overall ?? true, SoulGems?.Specific?.GetCrystal()));
            ret.Add((Keys?.Overall ?? true, Keys?.Specific?.GetCrystal()));
            ret.Add((Potions?.Overall ?? true, Potions?.Specific?.GetCrystal()));
            ret.Add((Subspaces?.Overall ?? true, Subspaces?.Specific?.GetCrystal()));
            ret.Add((SigilStones?.Overall ?? true, SigilStones?.Specific?.GetCrystal()));
            ret.Add((LeveledItems?.Overall ?? true, LeveledItems?.Specific?.GetCrystal()));
            ret.Add((Weathers?.Overall ?? true, Weathers?.Specific?.GetCrystal()));
            ret.Add((Climates?.Overall ?? true, Climates?.Specific?.GetCrystal()));
            ret.Add((Regions?.Overall ?? true, Regions?.Specific?.GetCrystal()));
            ret.Add((Cells?.Overall ?? true, Cells?.Specific?.GetCrystal()));
            ret.Add((Worldspaces?.Overall ?? true, Worldspaces?.Specific?.GetCrystal()));
            ret.Add((DialogTopics?.Overall ?? true, DialogTopics?.Specific?.GetCrystal()));
            ret.Add((Quests?.Overall ?? true, Quests?.Specific?.GetCrystal()));
            ret.Add((IdleAnimations?.Overall ?? true, IdleAnimations?.Specific?.GetCrystal()));
            ret.Add((AIPackages?.Overall ?? true, AIPackages?.Specific?.GetCrystal()));
            ret.Add((CombatStyles?.Overall ?? true, CombatStyles?.Specific?.GetCrystal()));
            ret.Add((LoadScreens?.Overall ?? true, LoadScreens?.Specific?.GetCrystal()));
            ret.Add((LeveledSpells?.Overall ?? true, LeveledSpells?.Specific?.GetCrystal()));
            ret.Add((AnimatedObjects?.Overall ?? true, AnimatedObjects?.Specific?.GetCrystal()));
            ret.Add((Waters?.Overall ?? true, Waters?.Specific?.GetCrystal()));
            ret.Add((EffectShaders?.Overall ?? true, EffectShaders?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #region Mutagen
    public class GroupMask
    {
        public bool GameSettings;
        public bool Globals;
        public bool Classes;
        public bool Factions;
        public bool Hairs;
        public bool Eyes;
        public bool Races;
        public bool Sounds;
        public bool Skills;
        public bool MagicEffects;
        public bool Scripts;
        public bool LandTextures;
        public bool Enchantments;
        public bool Spells;
        public bool Birthsigns;
        public bool Activators;
        public bool AlchemicalApparatus;
        public bool Armors;
        public bool Books;
        public bool Clothes;
        public bool Containers;
        public bool Doors;
        public bool Ingredients;
        public bool Lights;
        public bool Miscellaneous;
        public bool Statics;
        public bool Grasses;
        public bool Trees;
        public bool Flora;
        public bool Furnature;
        public bool Weapons;
        public bool Ammo;
        public bool NPCs;
        public bool Creatures;
        public bool LeveledCreatures;
        public bool SoulGems;
        public bool Keys;
        public bool Potions;
        public bool Subspaces;
        public bool SigilStones;
        public bool LeveledItems;
        public bool Weathers;
        public bool Climates;
        public bool Regions;
        public bool Cells;
        public bool Worldspaces;
        public bool DialogTopics;
        public bool Quests;
        public bool IdleAnimations;
        public bool AIPackages;
        public bool CombatStyles;
        public bool LoadScreens;
        public bool LeveledSpells;
        public bool AnimatedObjects;
        public bool Waters;
        public bool EffectShaders;
        public GroupMask()
        {
        }
        public GroupMask(bool defaultValue)
        {
            GameSettings = defaultValue;
            Globals = defaultValue;
            Classes = defaultValue;
            Factions = defaultValue;
            Hairs = defaultValue;
            Eyes = defaultValue;
            Races = defaultValue;
            Sounds = defaultValue;
            Skills = defaultValue;
            MagicEffects = defaultValue;
            Scripts = defaultValue;
            LandTextures = defaultValue;
            Enchantments = defaultValue;
            Spells = defaultValue;
            Birthsigns = defaultValue;
            Activators = defaultValue;
            AlchemicalApparatus = defaultValue;
            Armors = defaultValue;
            Books = defaultValue;
            Clothes = defaultValue;
            Containers = defaultValue;
            Doors = defaultValue;
            Ingredients = defaultValue;
            Lights = defaultValue;
            Miscellaneous = defaultValue;
            Statics = defaultValue;
            Grasses = defaultValue;
            Trees = defaultValue;
            Flora = defaultValue;
            Furnature = defaultValue;
            Weapons = defaultValue;
            Ammo = defaultValue;
            NPCs = defaultValue;
            Creatures = defaultValue;
            LeveledCreatures = defaultValue;
            SoulGems = defaultValue;
            Keys = defaultValue;
            Potions = defaultValue;
            Subspaces = defaultValue;
            SigilStones = defaultValue;
            LeveledItems = defaultValue;
            Weathers = defaultValue;
            Climates = defaultValue;
            Regions = defaultValue;
            Cells = defaultValue;
            Worldspaces = defaultValue;
            DialogTopics = defaultValue;
            Quests = defaultValue;
            IdleAnimations = defaultValue;
            AIPackages = defaultValue;
            CombatStyles = defaultValue;
            LoadScreens = defaultValue;
            LeveledSpells = defaultValue;
            AnimatedObjects = defaultValue;
            Waters = defaultValue;
            EffectShaders = defaultValue;
        }
    }
    #endregion

    #endregion

}
