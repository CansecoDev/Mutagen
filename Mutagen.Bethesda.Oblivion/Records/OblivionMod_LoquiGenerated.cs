/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class OblivionMod : IOblivionMod, ILoquiObjectSetter, IEquatable<OblivionMod>
    {
        ILoquiRegistration ILoquiObject.Registration => OblivionMod_Registration.Instance;
        public static OblivionMod_Registration Registration => OblivionMod_Registration.Instance;

        #region Ctor
        public OblivionMod()
        {
            _TES4 = NotifyingSetItem.Factory<TES4>(
                defaultVal: _TES4_Object,
                markAsSet: true);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TES4
        private TES4 _TES4_Object = new TES4();
        protected readonly INotifyingSetItem<TES4> _TES4;
        public INotifyingSetItemGetter<TES4> TES4_Property => this._TES4;
        TES4 IOblivionModGetter.TES4 => this.TES4;
        public TES4 TES4 { get => _TES4.Item; }
        INotifyingSetItemGetter<TES4> IOblivionModGetter.TES4_Property => this.TES4_Property;
        #endregion
        #region GameSettings
        private Group<GameSetting> _GameSettings_Object = new Group<GameSetting>();
        public Group<GameSetting> GameSettings => _GameSettings_Object;
        #endregion
        #region Globals
        private Group<Global> _Globals_Object = new Group<Global>();
        public Group<Global> Globals => _Globals_Object;
        #endregion
        #region Classes
        private Group<Class> _Classes_Object = new Group<Class>();
        public Group<Class> Classes => _Classes_Object;
        #endregion
        #region Factions
        private Group<Faction> _Factions_Object = new Group<Faction>();
        public Group<Faction> Factions => _Factions_Object;
        #endregion
        #region Hairs
        private Group<Hair> _Hairs_Object = new Group<Hair>();
        public Group<Hair> Hairs => _Hairs_Object;
        #endregion
        #region Eyes
        private Group<Eye> _Eyes_Object = new Group<Eye>();
        public Group<Eye> Eyes => _Eyes_Object;
        #endregion
        #region Races
        private Group<Race> _Races_Object = new Group<Race>();
        public Group<Race> Races => _Races_Object;
        #endregion
        #region Sounds
        private Group<Sound> _Sounds_Object = new Group<Sound>();
        public Group<Sound> Sounds => _Sounds_Object;
        #endregion
        #region Skills
        private Group<SkillRecord> _Skills_Object = new Group<SkillRecord>();
        public Group<SkillRecord> Skills => _Skills_Object;
        #endregion
        #region MagicEffects
        private Group<MagicEffect> _MagicEffects_Object = new Group<MagicEffect>();
        public Group<MagicEffect> MagicEffects => _MagicEffects_Object;
        #endregion
        #region Scripts
        private Group<Script> _Scripts_Object = new Group<Script>();
        public Group<Script> Scripts => _Scripts_Object;
        #endregion
        #region LandTextures
        private Group<LandTexture> _LandTextures_Object = new Group<LandTexture>();
        public Group<LandTexture> LandTextures => _LandTextures_Object;
        #endregion
        #region Enchantments
        private Group<Enchantment> _Enchantments_Object = new Group<Enchantment>();
        public Group<Enchantment> Enchantments => _Enchantments_Object;
        #endregion
        #region Spells
        private Group<SpellUnleveled> _Spells_Object = new Group<SpellUnleveled>();
        public Group<SpellUnleveled> Spells => _Spells_Object;
        #endregion
        #region Birthsigns
        private Group<Birthsign> _Birthsigns_Object = new Group<Birthsign>();
        public Group<Birthsign> Birthsigns => _Birthsigns_Object;
        #endregion
        #region Activators
        private Group<Activator> _Activators_Object = new Group<Activator>();
        public Group<Activator> Activators => _Activators_Object;
        #endregion
        #region AlchemicalApparatus
        private Group<AlchemicalApparatus> _AlchemicalApparatus_Object = new Group<AlchemicalApparatus>();
        public Group<AlchemicalApparatus> AlchemicalApparatus => _AlchemicalApparatus_Object;
        #endregion
        #region Armors
        private Group<Armor> _Armors_Object = new Group<Armor>();
        public Group<Armor> Armors => _Armors_Object;
        #endregion
        #region Books
        private Group<Book> _Books_Object = new Group<Book>();
        public Group<Book> Books => _Books_Object;
        #endregion
        #region Clothes
        private Group<Clothing> _Clothes_Object = new Group<Clothing>();
        public Group<Clothing> Clothes => _Clothes_Object;
        #endregion
        #region Containers
        private Group<Container> _Containers_Object = new Group<Container>();
        public Group<Container> Containers => _Containers_Object;
        #endregion
        #region Doors
        private Group<Door> _Doors_Object = new Group<Door>();
        public Group<Door> Doors => _Doors_Object;
        #endregion
        #region Ingredients
        private Group<Ingredient> _Ingredients_Object = new Group<Ingredient>();
        public Group<Ingredient> Ingredients => _Ingredients_Object;
        #endregion
        #region Lights
        private Group<Light> _Lights_Object = new Group<Light>();
        public Group<Light> Lights => _Lights_Object;
        #endregion
        #region Miscellaneous
        private Group<Miscellaneous> _Miscellaneous_Object = new Group<Miscellaneous>();
        public Group<Miscellaneous> Miscellaneous => _Miscellaneous_Object;
        #endregion
        #region Statics
        private Group<Static> _Statics_Object = new Group<Static>();
        public Group<Static> Statics => _Statics_Object;
        #endregion
        #region Grasses
        private Group<Grass> _Grasses_Object = new Group<Grass>();
        public Group<Grass> Grasses => _Grasses_Object;
        #endregion
        #region Trees
        private Group<Tree> _Trees_Object = new Group<Tree>();
        public Group<Tree> Trees => _Trees_Object;
        #endregion
        #region Flora
        private Group<Flora> _Flora_Object = new Group<Flora>();
        public Group<Flora> Flora => _Flora_Object;
        #endregion
        #region Furnature
        private Group<Furnature> _Furnature_Object = new Group<Furnature>();
        public Group<Furnature> Furnature => _Furnature_Object;
        #endregion
        #region Weapons
        private Group<Weapon> _Weapons_Object = new Group<Weapon>();
        public Group<Weapon> Weapons => _Weapons_Object;
        #endregion
        #region Ammo
        private Group<Ammo> _Ammo_Object = new Group<Ammo>();
        public Group<Ammo> Ammo => _Ammo_Object;
        #endregion
        #region NPCs
        private Group<NPC> _NPCs_Object = new Group<NPC>();
        public Group<NPC> NPCs => _NPCs_Object;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => OblivionModCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => OblivionModCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => OblivionModCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            OblivionModCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return OblivionModCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            OblivionMod_Mask<bool> printMask = null)
        {
            return OblivionModCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            OblivionModCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public OblivionMod_Mask<bool> GetHasBeenSetMask()
        {
            return OblivionModCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is OblivionMod rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(OblivionMod rhs)
        {
            if (rhs == null) return false;
            if (TES4_Property.HasBeenSet != rhs.TES4_Property.HasBeenSet) return false;
            if (TES4_Property.HasBeenSet)
            {
                if (!object.Equals(TES4, rhs.TES4)) return false;
            }
            if (!object.Equals(GameSettings, rhs.GameSettings)) return false;
            if (!object.Equals(Globals, rhs.Globals)) return false;
            if (!object.Equals(Classes, rhs.Classes)) return false;
            if (!object.Equals(Factions, rhs.Factions)) return false;
            if (!object.Equals(Hairs, rhs.Hairs)) return false;
            if (!object.Equals(Eyes, rhs.Eyes)) return false;
            if (!object.Equals(Races, rhs.Races)) return false;
            if (!object.Equals(Sounds, rhs.Sounds)) return false;
            if (!object.Equals(Skills, rhs.Skills)) return false;
            if (!object.Equals(MagicEffects, rhs.MagicEffects)) return false;
            if (!object.Equals(Scripts, rhs.Scripts)) return false;
            if (!object.Equals(LandTextures, rhs.LandTextures)) return false;
            if (!object.Equals(Enchantments, rhs.Enchantments)) return false;
            if (!object.Equals(Spells, rhs.Spells)) return false;
            if (!object.Equals(Birthsigns, rhs.Birthsigns)) return false;
            if (!object.Equals(Activators, rhs.Activators)) return false;
            if (!object.Equals(AlchemicalApparatus, rhs.AlchemicalApparatus)) return false;
            if (!object.Equals(Armors, rhs.Armors)) return false;
            if (!object.Equals(Books, rhs.Books)) return false;
            if (!object.Equals(Clothes, rhs.Clothes)) return false;
            if (!object.Equals(Containers, rhs.Containers)) return false;
            if (!object.Equals(Doors, rhs.Doors)) return false;
            if (!object.Equals(Ingredients, rhs.Ingredients)) return false;
            if (!object.Equals(Lights, rhs.Lights)) return false;
            if (!object.Equals(Miscellaneous, rhs.Miscellaneous)) return false;
            if (!object.Equals(Statics, rhs.Statics)) return false;
            if (!object.Equals(Grasses, rhs.Grasses)) return false;
            if (!object.Equals(Trees, rhs.Trees)) return false;
            if (!object.Equals(Flora, rhs.Flora)) return false;
            if (!object.Equals(Furnature, rhs.Furnature)) return false;
            if (!object.Equals(Weapons, rhs.Weapons)) return false;
            if (!object.Equals(Ammo, rhs.Ammo)) return false;
            if (!object.Equals(NPCs, rhs.NPCs)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (TES4_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(TES4).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(GameSettings).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Globals).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Classes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Factions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Hairs).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Eyes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Races).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Sounds).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Skills).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MagicEffects).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Scripts).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LandTextures).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Enchantments).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Spells).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Birthsigns).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Activators).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(AlchemicalApparatus).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Armors).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Books).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Clothes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Containers).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Doors).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Ingredients).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Lights).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Miscellaneous).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Statics).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Grasses).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Trees).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flora).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Furnature).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Weapons).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Ammo).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(NPCs).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static OblivionMod Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static OblivionMod Create_XML(
            XElement root,
            out OblivionMod_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static OblivionMod Create_XML(
            XElement root,
            bool doMasks,
            out OblivionMod_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (OblivionMod Object, OblivionMod_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            OblivionMod_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new OblivionMod_ErrorMask()) : default(Func<OblivionMod_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static OblivionMod Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static OblivionMod Create_XML(
            string path,
            out OblivionMod_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static OblivionMod Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static OblivionMod Create_XML(
            Stream stream,
            out OblivionMod_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<OblivionMod, OblivionMod_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<OblivionMod, OblivionMod_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out OblivionMod_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (OblivionMod_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out OblivionMod_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out OblivionMod_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            OblivionModCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static OblivionMod Create_XML_Internal(
            XElement root,
            Func<OblivionMod_ErrorMask> errorMask)
        {
            var ret = new OblivionMod();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            OblivionMod item,
            XElement root,
            string name,
            Func<OblivionMod_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "TES4":
                    TES4Common.CopyFieldsFrom(
                        item: item._TES4_Object,
                        rhs: TES4.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out TES4_ErrorMask TES4createMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out TES4_ErrorMask TES4copyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.TES4,
                        errMaskObj: MaskItem<Exception, TES4_ErrorMask>.WrapValue(TES4_ErrorMask.Combine(TES4createMask, TES4copyMask)));
                    break;
                case "GameSettings":
                    GroupCommon.CopyFieldsFrom<GameSetting, GameSetting_ErrorMask, GameSetting_CopyMask>(
                        item: item._GameSettings_Object,
                        rhs: Group<GameSetting>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<GameSetting_ErrorMask> GameSettingscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<GameSetting_ErrorMask> GameSettingscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.GameSettings,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>.WrapValue(Group_ErrorMask<GameSetting_ErrorMask>.Combine(GameSettingscreateMask, GameSettingscopyMask)));
                    break;
                case "Globals":
                    GroupCommon.CopyFieldsFrom<Global, Global_ErrorMask, Global_CopyMask>(
                        item: item._Globals_Object,
                        rhs: Group<Global>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Global_ErrorMask> GlobalscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Global_ErrorMask> GlobalscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Globals,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>.WrapValue(Group_ErrorMask<Global_ErrorMask>.Combine(GlobalscreateMask, GlobalscopyMask)));
                    break;
                case "Classes":
                    GroupCommon.CopyFieldsFrom<Class, Class_ErrorMask, Class_CopyMask>(
                        item: item._Classes_Object,
                        rhs: Group<Class>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Class_ErrorMask> ClassescreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Class_ErrorMask> ClassescopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Classes,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>.WrapValue(Group_ErrorMask<Class_ErrorMask>.Combine(ClassescreateMask, ClassescopyMask)));
                    break;
                case "Factions":
                    GroupCommon.CopyFieldsFrom<Faction, Faction_ErrorMask, Faction_CopyMask>(
                        item: item._Factions_Object,
                        rhs: Group<Faction>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Faction_ErrorMask> FactionscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Faction_ErrorMask> FactionscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Factions,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>.WrapValue(Group_ErrorMask<Faction_ErrorMask>.Combine(FactionscreateMask, FactionscopyMask)));
                    break;
                case "Hairs":
                    GroupCommon.CopyFieldsFrom<Hair, Hair_ErrorMask, Hair_CopyMask>(
                        item: item._Hairs_Object,
                        rhs: Group<Hair>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Hair_ErrorMask> HairscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Hair_ErrorMask> HairscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Hairs,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>.WrapValue(Group_ErrorMask<Hair_ErrorMask>.Combine(HairscreateMask, HairscopyMask)));
                    break;
                case "Eyes":
                    GroupCommon.CopyFieldsFrom<Eye, Eye_ErrorMask, Eye_CopyMask>(
                        item: item._Eyes_Object,
                        rhs: Group<Eye>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Eye_ErrorMask> EyescreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Eye_ErrorMask> EyescopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Eyes,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>.WrapValue(Group_ErrorMask<Eye_ErrorMask>.Combine(EyescreateMask, EyescopyMask)));
                    break;
                case "Races":
                    GroupCommon.CopyFieldsFrom<Race, Race_ErrorMask, Race_CopyMask>(
                        item: item._Races_Object,
                        rhs: Group<Race>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Race_ErrorMask> RacescreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Race_ErrorMask> RacescopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Races,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>.WrapValue(Group_ErrorMask<Race_ErrorMask>.Combine(RacescreateMask, RacescopyMask)));
                    break;
                case "Sounds":
                    GroupCommon.CopyFieldsFrom<Sound, Sound_ErrorMask, Sound_CopyMask>(
                        item: item._Sounds_Object,
                        rhs: Group<Sound>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Sound_ErrorMask> SoundscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Sound_ErrorMask> SoundscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Sounds,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>.WrapValue(Group_ErrorMask<Sound_ErrorMask>.Combine(SoundscreateMask, SoundscopyMask)));
                    break;
                case "Skills":
                    GroupCommon.CopyFieldsFrom<SkillRecord, SkillRecord_ErrorMask, SkillRecord_CopyMask>(
                        item: item._Skills_Object,
                        rhs: Group<SkillRecord>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<SkillRecord_ErrorMask> SkillscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<SkillRecord_ErrorMask> SkillscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Skills,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<SkillRecord_ErrorMask>>.WrapValue(Group_ErrorMask<SkillRecord_ErrorMask>.Combine(SkillscreateMask, SkillscopyMask)));
                    break;
                case "MagicEffects":
                    GroupCommon.CopyFieldsFrom<MagicEffect, MagicEffect_ErrorMask, MagicEffect_CopyMask>(
                        item: item._MagicEffects_Object,
                        rhs: Group<MagicEffect>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<MagicEffect_ErrorMask> MagicEffectscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<MagicEffect_ErrorMask> MagicEffectscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.MagicEffects,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<MagicEffect_ErrorMask>>.WrapValue(Group_ErrorMask<MagicEffect_ErrorMask>.Combine(MagicEffectscreateMask, MagicEffectscopyMask)));
                    break;
                case "Scripts":
                    GroupCommon.CopyFieldsFrom<Script, Script_ErrorMask, Script_CopyMask>(
                        item: item._Scripts_Object,
                        rhs: Group<Script>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Script_ErrorMask> ScriptscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Script_ErrorMask> ScriptscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Scripts,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Script_ErrorMask>>.WrapValue(Group_ErrorMask<Script_ErrorMask>.Combine(ScriptscreateMask, ScriptscopyMask)));
                    break;
                case "LandTextures":
                    GroupCommon.CopyFieldsFrom<LandTexture, LandTexture_ErrorMask, LandTexture_CopyMask>(
                        item: item._LandTextures_Object,
                        rhs: Group<LandTexture>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<LandTexture_ErrorMask> LandTexturescreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<LandTexture_ErrorMask> LandTexturescopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.LandTextures,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<LandTexture_ErrorMask>>.WrapValue(Group_ErrorMask<LandTexture_ErrorMask>.Combine(LandTexturescreateMask, LandTexturescopyMask)));
                    break;
                case "Enchantments":
                    GroupCommon.CopyFieldsFrom<Enchantment, Enchantment_ErrorMask, Enchantment_CopyMask>(
                        item: item._Enchantments_Object,
                        rhs: Group<Enchantment>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Enchantment_ErrorMask> EnchantmentscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Enchantment_ErrorMask> EnchantmentscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Enchantments,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Enchantment_ErrorMask>>.WrapValue(Group_ErrorMask<Enchantment_ErrorMask>.Combine(EnchantmentscreateMask, EnchantmentscopyMask)));
                    break;
                case "Spells":
                    GroupCommon.CopyFieldsFrom<SpellUnleveled, SpellUnleveled_ErrorMask, SpellUnleveled_CopyMask>(
                        item: item._Spells_Object,
                        rhs: Group<SpellUnleveled>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<SpellUnleveled_ErrorMask> SpellscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<SpellUnleveled_ErrorMask> SpellscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Spells,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<SpellUnleveled_ErrorMask>>.WrapValue(Group_ErrorMask<SpellUnleveled_ErrorMask>.Combine(SpellscreateMask, SpellscopyMask)));
                    break;
                case "Birthsigns":
                    GroupCommon.CopyFieldsFrom<Birthsign, Birthsign_ErrorMask, Birthsign_CopyMask>(
                        item: item._Birthsigns_Object,
                        rhs: Group<Birthsign>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Birthsign_ErrorMask> BirthsignscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Birthsign_ErrorMask> BirthsignscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Birthsigns,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Birthsign_ErrorMask>>.WrapValue(Group_ErrorMask<Birthsign_ErrorMask>.Combine(BirthsignscreateMask, BirthsignscopyMask)));
                    break;
                case "Activators":
                    GroupCommon.CopyFieldsFrom<Activator, Activator_ErrorMask, Activator_CopyMask>(
                        item: item._Activators_Object,
                        rhs: Group<Activator>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Activator_ErrorMask> ActivatorscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Activator_ErrorMask> ActivatorscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Activators,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Activator_ErrorMask>>.WrapValue(Group_ErrorMask<Activator_ErrorMask>.Combine(ActivatorscreateMask, ActivatorscopyMask)));
                    break;
                case "AlchemicalApparatus":
                    GroupCommon.CopyFieldsFrom<AlchemicalApparatus, AlchemicalApparatus_ErrorMask, AlchemicalApparatus_CopyMask>(
                        item: item._AlchemicalApparatus_Object,
                        rhs: Group<AlchemicalApparatus>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<AlchemicalApparatus_ErrorMask> AlchemicalApparatuscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<AlchemicalApparatus_ErrorMask> AlchemicalApparatuscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.AlchemicalApparatus,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<AlchemicalApparatus_ErrorMask>>.WrapValue(Group_ErrorMask<AlchemicalApparatus_ErrorMask>.Combine(AlchemicalApparatuscreateMask, AlchemicalApparatuscopyMask)));
                    break;
                case "Armors":
                    GroupCommon.CopyFieldsFrom<Armor, Armor_ErrorMask, Armor_CopyMask>(
                        item: item._Armors_Object,
                        rhs: Group<Armor>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Armor_ErrorMask> ArmorscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Armor_ErrorMask> ArmorscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Armors,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Armor_ErrorMask>>.WrapValue(Group_ErrorMask<Armor_ErrorMask>.Combine(ArmorscreateMask, ArmorscopyMask)));
                    break;
                case "Books":
                    GroupCommon.CopyFieldsFrom<Book, Book_ErrorMask, Book_CopyMask>(
                        item: item._Books_Object,
                        rhs: Group<Book>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Book_ErrorMask> BookscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Book_ErrorMask> BookscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Books,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Book_ErrorMask>>.WrapValue(Group_ErrorMask<Book_ErrorMask>.Combine(BookscreateMask, BookscopyMask)));
                    break;
                case "Clothes":
                    GroupCommon.CopyFieldsFrom<Clothing, Clothing_ErrorMask, Clothing_CopyMask>(
                        item: item._Clothes_Object,
                        rhs: Group<Clothing>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Clothing_ErrorMask> ClothescreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Clothing_ErrorMask> ClothescopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Clothes,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Clothing_ErrorMask>>.WrapValue(Group_ErrorMask<Clothing_ErrorMask>.Combine(ClothescreateMask, ClothescopyMask)));
                    break;
                case "Containers":
                    GroupCommon.CopyFieldsFrom<Container, Container_ErrorMask, Container_CopyMask>(
                        item: item._Containers_Object,
                        rhs: Group<Container>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Container_ErrorMask> ContainerscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Container_ErrorMask> ContainerscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Containers,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Container_ErrorMask>>.WrapValue(Group_ErrorMask<Container_ErrorMask>.Combine(ContainerscreateMask, ContainerscopyMask)));
                    break;
                case "Doors":
                    GroupCommon.CopyFieldsFrom<Door, Door_ErrorMask, Door_CopyMask>(
                        item: item._Doors_Object,
                        rhs: Group<Door>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Door_ErrorMask> DoorscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Door_ErrorMask> DoorscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Doors,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Door_ErrorMask>>.WrapValue(Group_ErrorMask<Door_ErrorMask>.Combine(DoorscreateMask, DoorscopyMask)));
                    break;
                case "Ingredients":
                    GroupCommon.CopyFieldsFrom<Ingredient, Ingredient_ErrorMask, Ingredient_CopyMask>(
                        item: item._Ingredients_Object,
                        rhs: Group<Ingredient>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Ingredient_ErrorMask> IngredientscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Ingredient_ErrorMask> IngredientscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Ingredients,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Ingredient_ErrorMask>>.WrapValue(Group_ErrorMask<Ingredient_ErrorMask>.Combine(IngredientscreateMask, IngredientscopyMask)));
                    break;
                case "Lights":
                    GroupCommon.CopyFieldsFrom<Light, Light_ErrorMask, Light_CopyMask>(
                        item: item._Lights_Object,
                        rhs: Group<Light>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Light_ErrorMask> LightscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Light_ErrorMask> LightscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Lights,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Light_ErrorMask>>.WrapValue(Group_ErrorMask<Light_ErrorMask>.Combine(LightscreateMask, LightscopyMask)));
                    break;
                case "Miscellaneous":
                    GroupCommon.CopyFieldsFrom<Miscellaneous, Miscellaneous_ErrorMask, Miscellaneous_CopyMask>(
                        item: item._Miscellaneous_Object,
                        rhs: Group<Miscellaneous>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Miscellaneous_ErrorMask> MiscellaneouscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Miscellaneous_ErrorMask> MiscellaneouscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Miscellaneous,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Miscellaneous_ErrorMask>>.WrapValue(Group_ErrorMask<Miscellaneous_ErrorMask>.Combine(MiscellaneouscreateMask, MiscellaneouscopyMask)));
                    break;
                case "Statics":
                    GroupCommon.CopyFieldsFrom<Static, Static_ErrorMask, Static_CopyMask>(
                        item: item._Statics_Object,
                        rhs: Group<Static>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Static_ErrorMask> StaticscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Static_ErrorMask> StaticscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Statics,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Static_ErrorMask>>.WrapValue(Group_ErrorMask<Static_ErrorMask>.Combine(StaticscreateMask, StaticscopyMask)));
                    break;
                case "Grasses":
                    GroupCommon.CopyFieldsFrom<Grass, Grass_ErrorMask, Grass_CopyMask>(
                        item: item._Grasses_Object,
                        rhs: Group<Grass>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Grass_ErrorMask> GrassescreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Grass_ErrorMask> GrassescopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Grasses,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Grass_ErrorMask>>.WrapValue(Group_ErrorMask<Grass_ErrorMask>.Combine(GrassescreateMask, GrassescopyMask)));
                    break;
                case "Trees":
                    GroupCommon.CopyFieldsFrom<Tree, Tree_ErrorMask, Tree_CopyMask>(
                        item: item._Trees_Object,
                        rhs: Group<Tree>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Tree_ErrorMask> TreescreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Tree_ErrorMask> TreescopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Trees,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Tree_ErrorMask>>.WrapValue(Group_ErrorMask<Tree_ErrorMask>.Combine(TreescreateMask, TreescopyMask)));
                    break;
                case "Flora":
                    GroupCommon.CopyFieldsFrom<Flora, Flora_ErrorMask, Flora_CopyMask>(
                        item: item._Flora_Object,
                        rhs: Group<Flora>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Flora_ErrorMask> FloracreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Flora_ErrorMask> FloracopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Flora,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Flora_ErrorMask>>.WrapValue(Group_ErrorMask<Flora_ErrorMask>.Combine(FloracreateMask, FloracopyMask)));
                    break;
                case "Furnature":
                    GroupCommon.CopyFieldsFrom<Furnature, Furnature_ErrorMask, Furnature_CopyMask>(
                        item: item._Furnature_Object,
                        rhs: Group<Furnature>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Furnature_ErrorMask> FurnaturecreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Furnature_ErrorMask> FurnaturecopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Furnature,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Furnature_ErrorMask>>.WrapValue(Group_ErrorMask<Furnature_ErrorMask>.Combine(FurnaturecreateMask, FurnaturecopyMask)));
                    break;
                case "Weapons":
                    GroupCommon.CopyFieldsFrom<Weapon, Weapon_ErrorMask, Weapon_CopyMask>(
                        item: item._Weapons_Object,
                        rhs: Group<Weapon>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Weapon_ErrorMask> WeaponscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Weapon_ErrorMask> WeaponscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Weapons,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Weapon_ErrorMask>>.WrapValue(Group_ErrorMask<Weapon_ErrorMask>.Combine(WeaponscreateMask, WeaponscopyMask)));
                    break;
                case "Ammo":
                    GroupCommon.CopyFieldsFrom<Ammo, Ammo_ErrorMask, Ammo_CopyMask>(
                        item: item._Ammo_Object,
                        rhs: Group<Ammo>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<Ammo_ErrorMask> AmmocreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Ammo_ErrorMask> AmmocopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.Ammo,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<Ammo_ErrorMask>>.WrapValue(Group_ErrorMask<Ammo_ErrorMask>.Combine(AmmocreateMask, AmmocopyMask)));
                    break;
                case "NPCs":
                    GroupCommon.CopyFieldsFrom<NPC, NPC_ErrorMask, NPC_CopyMask>(
                        item: item._NPCs_Object,
                        rhs: Group<NPC>.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out Group_ErrorMask<NPC_ErrorMask> NPCscreateMask)
                        ,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<NPC_ErrorMask> NPCscopyMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        index: (int)OblivionMod_FieldIndex.NPCs,
                        errMaskObj: MaskItem<Exception, Group_ErrorMask<NPC_ErrorMask>>.WrapValue(Group_ErrorMask<NPC_ErrorMask>.Combine(NPCscreateMask, NPCscopyMask)));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Mutagen
        public IEnumerable<MajorRecord> MajorRecords => GetMajorRecords();
        private IEnumerable<MajorRecord> GetMajorRecords()
        {
            foreach (var rec in GameSettings.Items)
            {
                yield return rec;
            }
            foreach (var rec in Globals.Items)
            {
                yield return rec;
            }
            foreach (var rec in Classes.Items)
            {
                yield return rec;
            }
            foreach (var rec in Factions.Items)
            {
                yield return rec;
            }
            foreach (var rec in Hairs.Items)
            {
                yield return rec;
            }
            foreach (var rec in Eyes.Items)
            {
                yield return rec;
            }
            foreach (var rec in Races.Items)
            {
                yield return rec;
            }
            foreach (var rec in Sounds.Items)
            {
                yield return rec;
            }
            foreach (var rec in Skills.Items)
            {
                yield return rec;
            }
            foreach (var rec in MagicEffects.Items)
            {
                yield return rec;
            }
            foreach (var rec in Scripts.Items)
            {
                yield return rec;
            }
            foreach (var rec in LandTextures.Items)
            {
                yield return rec;
            }
            foreach (var rec in Enchantments.Items)
            {
                yield return rec;
            }
            foreach (var rec in Spells.Items)
            {
                yield return rec;
            }
            foreach (var rec in Birthsigns.Items)
            {
                yield return rec;
            }
            foreach (var rec in Activators.Items)
            {
                yield return rec;
            }
            foreach (var rec in AlchemicalApparatus.Items)
            {
                yield return rec;
            }
            foreach (var rec in Armors.Items)
            {
                yield return rec;
            }
            foreach (var rec in Books.Items)
            {
                yield return rec;
            }
            foreach (var rec in Clothes.Items)
            {
                yield return rec;
            }
            foreach (var rec in Containers.Items)
            {
                yield return rec;
            }
            foreach (var rec in Doors.Items)
            {
                yield return rec;
            }
            foreach (var rec in Ingredients.Items)
            {
                yield return rec;
            }
            foreach (var rec in Lights.Items)
            {
                yield return rec;
            }
            foreach (var rec in Miscellaneous.Items)
            {
                yield return rec;
            }
            foreach (var rec in Statics.Items)
            {
                yield return rec;
            }
            foreach (var rec in Grasses.Items)
            {
                yield return rec;
            }
            foreach (var rec in Trees.Items)
            {
                yield return rec;
            }
            foreach (var rec in Flora.Items)
            {
                yield return rec;
            }
            foreach (var rec in Furnature.Items)
            {
                yield return rec;
            }
            foreach (var rec in Weapons.Items)
            {
                yield return rec;
            }
            foreach (var rec in Ammo.Items)
            {
                yield return rec;
            }
            foreach (var rec in NPCs.Items)
            {
                yield return rec;
            }
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static OblivionMod Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static OblivionMod Create_Binary(
            MutagenFrame frame,
            out OblivionMod_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static OblivionMod Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out OblivionMod_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (OblivionMod Object, OblivionMod_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            OblivionMod_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new OblivionMod_ErrorMask()) : default(Func<OblivionMod_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static OblivionMod Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static OblivionMod Create_Binary(
            string path,
            out OblivionMod_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static OblivionMod Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static OblivionMod Create_Binary(
            Stream stream,
            out OblivionMod_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<OblivionMod, OblivionMod_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<OblivionMod, OblivionMod_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out OblivionMod_ErrorMask errorMask)
        {
            errorMask = (OblivionMod_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out OblivionMod_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out OblivionMod_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            OblivionModCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static OblivionMod Create_Binary_Internal(
            MutagenFrame frame,
            Func<OblivionMod_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new OblivionMod();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            OblivionMod item,
            MutagenFrame frame,
            Func<OblivionMod_ErrorMask> errorMask)
        {
        }

        protected static TryGet<OblivionMod_FieldIndex?> Fill_Binary_RecordTypes(
            OblivionMod item,
            MutagenFrame frame,
            Func<OblivionMod_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "TES4":
                    var tmpTES4 = TES4.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out TES4_ErrorMask TES4createMask);
                    TES4Common.CopyFieldsFrom(
                        item: item._TES4_Object,
                        rhs: tmpTES4,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out TES4_ErrorMask TES4errorMask);
                    var combinedTES4 = TES4_ErrorMask.Combine(TES4createMask, TES4errorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.TES4,
                        errMaskObj: combinedTES4 == null ? null : new MaskItem<Exception, TES4_ErrorMask>(null, combinedTES4));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.TES4);
                case "GMST":
                    var tmpGameSettings = Group<GameSetting>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<GameSetting_ErrorMask> GameSettingscreateMask);
                    GroupCommon.CopyFieldsFrom<GameSetting, GameSetting_ErrorMask, GameSetting_CopyMask>(
                        item: item._GameSettings_Object,
                        rhs: tmpGameSettings,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<GameSetting_ErrorMask> GameSettingserrorMask);
                    var combinedGameSettings = Group_ErrorMask<GameSetting_ErrorMask>.Combine(GameSettingscreateMask, GameSettingserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.GameSettings,
                        errMaskObj: combinedGameSettings == null ? null : new MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>(null, combinedGameSettings));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.GameSettings);
                case "GLOB":
                    var tmpGlobals = Group<Global>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Global_ErrorMask> GlobalscreateMask);
                    GroupCommon.CopyFieldsFrom<Global, Global_ErrorMask, Global_CopyMask>(
                        item: item._Globals_Object,
                        rhs: tmpGlobals,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Global_ErrorMask> GlobalserrorMask);
                    var combinedGlobals = Group_ErrorMask<Global_ErrorMask>.Combine(GlobalscreateMask, GlobalserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Globals,
                        errMaskObj: combinedGlobals == null ? null : new MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>(null, combinedGlobals));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Globals);
                case "CLAS":
                    var tmpClasses = Group<Class>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Class_ErrorMask> ClassescreateMask);
                    GroupCommon.CopyFieldsFrom<Class, Class_ErrorMask, Class_CopyMask>(
                        item: item._Classes_Object,
                        rhs: tmpClasses,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Class_ErrorMask> ClasseserrorMask);
                    var combinedClasses = Group_ErrorMask<Class_ErrorMask>.Combine(ClassescreateMask, ClasseserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Classes,
                        errMaskObj: combinedClasses == null ? null : new MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>(null, combinedClasses));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Classes);
                case "FACT":
                    var tmpFactions = Group<Faction>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Faction_ErrorMask> FactionscreateMask);
                    GroupCommon.CopyFieldsFrom<Faction, Faction_ErrorMask, Faction_CopyMask>(
                        item: item._Factions_Object,
                        rhs: tmpFactions,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Faction_ErrorMask> FactionserrorMask);
                    var combinedFactions = Group_ErrorMask<Faction_ErrorMask>.Combine(FactionscreateMask, FactionserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Factions,
                        errMaskObj: combinedFactions == null ? null : new MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>(null, combinedFactions));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Factions);
                case "HAIR":
                    var tmpHairs = Group<Hair>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Hair_ErrorMask> HairscreateMask);
                    GroupCommon.CopyFieldsFrom<Hair, Hair_ErrorMask, Hair_CopyMask>(
                        item: item._Hairs_Object,
                        rhs: tmpHairs,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Hair_ErrorMask> HairserrorMask);
                    var combinedHairs = Group_ErrorMask<Hair_ErrorMask>.Combine(HairscreateMask, HairserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Hairs,
                        errMaskObj: combinedHairs == null ? null : new MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>(null, combinedHairs));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Hairs);
                case "EYES":
                    var tmpEyes = Group<Eye>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Eye_ErrorMask> EyescreateMask);
                    GroupCommon.CopyFieldsFrom<Eye, Eye_ErrorMask, Eye_CopyMask>(
                        item: item._Eyes_Object,
                        rhs: tmpEyes,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Eye_ErrorMask> EyeserrorMask);
                    var combinedEyes = Group_ErrorMask<Eye_ErrorMask>.Combine(EyescreateMask, EyeserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Eyes,
                        errMaskObj: combinedEyes == null ? null : new MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>(null, combinedEyes));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Eyes);
                case "RACE":
                    var tmpRaces = Group<Race>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Race_ErrorMask> RacescreateMask);
                    GroupCommon.CopyFieldsFrom<Race, Race_ErrorMask, Race_CopyMask>(
                        item: item._Races_Object,
                        rhs: tmpRaces,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Race_ErrorMask> RaceserrorMask);
                    var combinedRaces = Group_ErrorMask<Race_ErrorMask>.Combine(RacescreateMask, RaceserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Races,
                        errMaskObj: combinedRaces == null ? null : new MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>(null, combinedRaces));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Races);
                case "SOUN":
                    var tmpSounds = Group<Sound>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Sound_ErrorMask> SoundscreateMask);
                    GroupCommon.CopyFieldsFrom<Sound, Sound_ErrorMask, Sound_CopyMask>(
                        item: item._Sounds_Object,
                        rhs: tmpSounds,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Sound_ErrorMask> SoundserrorMask);
                    var combinedSounds = Group_ErrorMask<Sound_ErrorMask>.Combine(SoundscreateMask, SoundserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Sounds,
                        errMaskObj: combinedSounds == null ? null : new MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>(null, combinedSounds));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Sounds);
                case "SKIL":
                    var tmpSkills = Group<SkillRecord>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<SkillRecord_ErrorMask> SkillscreateMask);
                    GroupCommon.CopyFieldsFrom<SkillRecord, SkillRecord_ErrorMask, SkillRecord_CopyMask>(
                        item: item._Skills_Object,
                        rhs: tmpSkills,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<SkillRecord_ErrorMask> SkillserrorMask);
                    var combinedSkills = Group_ErrorMask<SkillRecord_ErrorMask>.Combine(SkillscreateMask, SkillserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Skills,
                        errMaskObj: combinedSkills == null ? null : new MaskItem<Exception, Group_ErrorMask<SkillRecord_ErrorMask>>(null, combinedSkills));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Skills);
                case "MGEF":
                    var tmpMagicEffects = Group<MagicEffect>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<MagicEffect_ErrorMask> MagicEffectscreateMask);
                    GroupCommon.CopyFieldsFrom<MagicEffect, MagicEffect_ErrorMask, MagicEffect_CopyMask>(
                        item: item._MagicEffects_Object,
                        rhs: tmpMagicEffects,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<MagicEffect_ErrorMask> MagicEffectserrorMask);
                    var combinedMagicEffects = Group_ErrorMask<MagicEffect_ErrorMask>.Combine(MagicEffectscreateMask, MagicEffectserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.MagicEffects,
                        errMaskObj: combinedMagicEffects == null ? null : new MaskItem<Exception, Group_ErrorMask<MagicEffect_ErrorMask>>(null, combinedMagicEffects));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.MagicEffects);
                case "SCPT":
                    var tmpScripts = Group<Script>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Script_ErrorMask> ScriptscreateMask);
                    GroupCommon.CopyFieldsFrom<Script, Script_ErrorMask, Script_CopyMask>(
                        item: item._Scripts_Object,
                        rhs: tmpScripts,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Script_ErrorMask> ScriptserrorMask);
                    var combinedScripts = Group_ErrorMask<Script_ErrorMask>.Combine(ScriptscreateMask, ScriptserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Scripts,
                        errMaskObj: combinedScripts == null ? null : new MaskItem<Exception, Group_ErrorMask<Script_ErrorMask>>(null, combinedScripts));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Scripts);
                case "LTEX":
                    var tmpLandTextures = Group<LandTexture>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<LandTexture_ErrorMask> LandTexturescreateMask);
                    GroupCommon.CopyFieldsFrom<LandTexture, LandTexture_ErrorMask, LandTexture_CopyMask>(
                        item: item._LandTextures_Object,
                        rhs: tmpLandTextures,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<LandTexture_ErrorMask> LandTextureserrorMask);
                    var combinedLandTextures = Group_ErrorMask<LandTexture_ErrorMask>.Combine(LandTexturescreateMask, LandTextureserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.LandTextures,
                        errMaskObj: combinedLandTextures == null ? null : new MaskItem<Exception, Group_ErrorMask<LandTexture_ErrorMask>>(null, combinedLandTextures));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.LandTextures);
                case "ENCH":
                    var tmpEnchantments = Group<Enchantment>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Enchantment_ErrorMask> EnchantmentscreateMask);
                    GroupCommon.CopyFieldsFrom<Enchantment, Enchantment_ErrorMask, Enchantment_CopyMask>(
                        item: item._Enchantments_Object,
                        rhs: tmpEnchantments,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Enchantment_ErrorMask> EnchantmentserrorMask);
                    var combinedEnchantments = Group_ErrorMask<Enchantment_ErrorMask>.Combine(EnchantmentscreateMask, EnchantmentserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Enchantments,
                        errMaskObj: combinedEnchantments == null ? null : new MaskItem<Exception, Group_ErrorMask<Enchantment_ErrorMask>>(null, combinedEnchantments));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Enchantments);
                case "SPEL":
                    var tmpSpells = Group<SpellUnleveled>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<SpellUnleveled_ErrorMask> SpellscreateMask);
                    GroupCommon.CopyFieldsFrom<SpellUnleveled, SpellUnleveled_ErrorMask, SpellUnleveled_CopyMask>(
                        item: item._Spells_Object,
                        rhs: tmpSpells,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<SpellUnleveled_ErrorMask> SpellserrorMask);
                    var combinedSpells = Group_ErrorMask<SpellUnleveled_ErrorMask>.Combine(SpellscreateMask, SpellserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Spells,
                        errMaskObj: combinedSpells == null ? null : new MaskItem<Exception, Group_ErrorMask<SpellUnleveled_ErrorMask>>(null, combinedSpells));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Spells);
                case "BSGN":
                    var tmpBirthsigns = Group<Birthsign>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Birthsign_ErrorMask> BirthsignscreateMask);
                    GroupCommon.CopyFieldsFrom<Birthsign, Birthsign_ErrorMask, Birthsign_CopyMask>(
                        item: item._Birthsigns_Object,
                        rhs: tmpBirthsigns,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Birthsign_ErrorMask> BirthsignserrorMask);
                    var combinedBirthsigns = Group_ErrorMask<Birthsign_ErrorMask>.Combine(BirthsignscreateMask, BirthsignserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Birthsigns,
                        errMaskObj: combinedBirthsigns == null ? null : new MaskItem<Exception, Group_ErrorMask<Birthsign_ErrorMask>>(null, combinedBirthsigns));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Birthsigns);
                case "ACTI":
                    var tmpActivators = Group<Activator>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Activator_ErrorMask> ActivatorscreateMask);
                    GroupCommon.CopyFieldsFrom<Activator, Activator_ErrorMask, Activator_CopyMask>(
                        item: item._Activators_Object,
                        rhs: tmpActivators,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Activator_ErrorMask> ActivatorserrorMask);
                    var combinedActivators = Group_ErrorMask<Activator_ErrorMask>.Combine(ActivatorscreateMask, ActivatorserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Activators,
                        errMaskObj: combinedActivators == null ? null : new MaskItem<Exception, Group_ErrorMask<Activator_ErrorMask>>(null, combinedActivators));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Activators);
                case "APPA":
                    var tmpAlchemicalApparatus = Group<AlchemicalApparatus>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<AlchemicalApparatus_ErrorMask> AlchemicalApparatuscreateMask);
                    GroupCommon.CopyFieldsFrom<AlchemicalApparatus, AlchemicalApparatus_ErrorMask, AlchemicalApparatus_CopyMask>(
                        item: item._AlchemicalApparatus_Object,
                        rhs: tmpAlchemicalApparatus,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<AlchemicalApparatus_ErrorMask> AlchemicalApparatuserrorMask);
                    var combinedAlchemicalApparatus = Group_ErrorMask<AlchemicalApparatus_ErrorMask>.Combine(AlchemicalApparatuscreateMask, AlchemicalApparatuserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.AlchemicalApparatus,
                        errMaskObj: combinedAlchemicalApparatus == null ? null : new MaskItem<Exception, Group_ErrorMask<AlchemicalApparatus_ErrorMask>>(null, combinedAlchemicalApparatus));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.AlchemicalApparatus);
                case "ARMO":
                    var tmpArmors = Group<Armor>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Armor_ErrorMask> ArmorscreateMask);
                    GroupCommon.CopyFieldsFrom<Armor, Armor_ErrorMask, Armor_CopyMask>(
                        item: item._Armors_Object,
                        rhs: tmpArmors,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Armor_ErrorMask> ArmorserrorMask);
                    var combinedArmors = Group_ErrorMask<Armor_ErrorMask>.Combine(ArmorscreateMask, ArmorserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Armors,
                        errMaskObj: combinedArmors == null ? null : new MaskItem<Exception, Group_ErrorMask<Armor_ErrorMask>>(null, combinedArmors));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Armors);
                case "BOOK":
                    var tmpBooks = Group<Book>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Book_ErrorMask> BookscreateMask);
                    GroupCommon.CopyFieldsFrom<Book, Book_ErrorMask, Book_CopyMask>(
                        item: item._Books_Object,
                        rhs: tmpBooks,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Book_ErrorMask> BookserrorMask);
                    var combinedBooks = Group_ErrorMask<Book_ErrorMask>.Combine(BookscreateMask, BookserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Books,
                        errMaskObj: combinedBooks == null ? null : new MaskItem<Exception, Group_ErrorMask<Book_ErrorMask>>(null, combinedBooks));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Books);
                case "CLOT":
                    var tmpClothes = Group<Clothing>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Clothing_ErrorMask> ClothescreateMask);
                    GroupCommon.CopyFieldsFrom<Clothing, Clothing_ErrorMask, Clothing_CopyMask>(
                        item: item._Clothes_Object,
                        rhs: tmpClothes,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Clothing_ErrorMask> ClotheserrorMask);
                    var combinedClothes = Group_ErrorMask<Clothing_ErrorMask>.Combine(ClothescreateMask, ClotheserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Clothes,
                        errMaskObj: combinedClothes == null ? null : new MaskItem<Exception, Group_ErrorMask<Clothing_ErrorMask>>(null, combinedClothes));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Clothes);
                case "CONT":
                    var tmpContainers = Group<Container>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Container_ErrorMask> ContainerscreateMask);
                    GroupCommon.CopyFieldsFrom<Container, Container_ErrorMask, Container_CopyMask>(
                        item: item._Containers_Object,
                        rhs: tmpContainers,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Container_ErrorMask> ContainerserrorMask);
                    var combinedContainers = Group_ErrorMask<Container_ErrorMask>.Combine(ContainerscreateMask, ContainerserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Containers,
                        errMaskObj: combinedContainers == null ? null : new MaskItem<Exception, Group_ErrorMask<Container_ErrorMask>>(null, combinedContainers));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Containers);
                case "DOOR":
                    var tmpDoors = Group<Door>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Door_ErrorMask> DoorscreateMask);
                    GroupCommon.CopyFieldsFrom<Door, Door_ErrorMask, Door_CopyMask>(
                        item: item._Doors_Object,
                        rhs: tmpDoors,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Door_ErrorMask> DoorserrorMask);
                    var combinedDoors = Group_ErrorMask<Door_ErrorMask>.Combine(DoorscreateMask, DoorserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Doors,
                        errMaskObj: combinedDoors == null ? null : new MaskItem<Exception, Group_ErrorMask<Door_ErrorMask>>(null, combinedDoors));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Doors);
                case "INGR":
                    var tmpIngredients = Group<Ingredient>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Ingredient_ErrorMask> IngredientscreateMask);
                    GroupCommon.CopyFieldsFrom<Ingredient, Ingredient_ErrorMask, Ingredient_CopyMask>(
                        item: item._Ingredients_Object,
                        rhs: tmpIngredients,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Ingredient_ErrorMask> IngredientserrorMask);
                    var combinedIngredients = Group_ErrorMask<Ingredient_ErrorMask>.Combine(IngredientscreateMask, IngredientserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Ingredients,
                        errMaskObj: combinedIngredients == null ? null : new MaskItem<Exception, Group_ErrorMask<Ingredient_ErrorMask>>(null, combinedIngredients));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Ingredients);
                case "LIGH":
                    var tmpLights = Group<Light>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Light_ErrorMask> LightscreateMask);
                    GroupCommon.CopyFieldsFrom<Light, Light_ErrorMask, Light_CopyMask>(
                        item: item._Lights_Object,
                        rhs: tmpLights,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Light_ErrorMask> LightserrorMask);
                    var combinedLights = Group_ErrorMask<Light_ErrorMask>.Combine(LightscreateMask, LightserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Lights,
                        errMaskObj: combinedLights == null ? null : new MaskItem<Exception, Group_ErrorMask<Light_ErrorMask>>(null, combinedLights));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Lights);
                case "MISC":
                    var tmpMiscellaneous = Group<Miscellaneous>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Miscellaneous_ErrorMask> MiscellaneouscreateMask);
                    GroupCommon.CopyFieldsFrom<Miscellaneous, Miscellaneous_ErrorMask, Miscellaneous_CopyMask>(
                        item: item._Miscellaneous_Object,
                        rhs: tmpMiscellaneous,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Miscellaneous_ErrorMask> MiscellaneouserrorMask);
                    var combinedMiscellaneous = Group_ErrorMask<Miscellaneous_ErrorMask>.Combine(MiscellaneouscreateMask, MiscellaneouserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Miscellaneous,
                        errMaskObj: combinedMiscellaneous == null ? null : new MaskItem<Exception, Group_ErrorMask<Miscellaneous_ErrorMask>>(null, combinedMiscellaneous));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Miscellaneous);
                case "STAT":
                    var tmpStatics = Group<Static>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Static_ErrorMask> StaticscreateMask);
                    GroupCommon.CopyFieldsFrom<Static, Static_ErrorMask, Static_CopyMask>(
                        item: item._Statics_Object,
                        rhs: tmpStatics,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Static_ErrorMask> StaticserrorMask);
                    var combinedStatics = Group_ErrorMask<Static_ErrorMask>.Combine(StaticscreateMask, StaticserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Statics,
                        errMaskObj: combinedStatics == null ? null : new MaskItem<Exception, Group_ErrorMask<Static_ErrorMask>>(null, combinedStatics));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Statics);
                case "GRAS":
                    var tmpGrasses = Group<Grass>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Grass_ErrorMask> GrassescreateMask);
                    GroupCommon.CopyFieldsFrom<Grass, Grass_ErrorMask, Grass_CopyMask>(
                        item: item._Grasses_Object,
                        rhs: tmpGrasses,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Grass_ErrorMask> GrasseserrorMask);
                    var combinedGrasses = Group_ErrorMask<Grass_ErrorMask>.Combine(GrassescreateMask, GrasseserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Grasses,
                        errMaskObj: combinedGrasses == null ? null : new MaskItem<Exception, Group_ErrorMask<Grass_ErrorMask>>(null, combinedGrasses));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Grasses);
                case "TREE":
                    var tmpTrees = Group<Tree>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Tree_ErrorMask> TreescreateMask);
                    GroupCommon.CopyFieldsFrom<Tree, Tree_ErrorMask, Tree_CopyMask>(
                        item: item._Trees_Object,
                        rhs: tmpTrees,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Tree_ErrorMask> TreeserrorMask);
                    var combinedTrees = Group_ErrorMask<Tree_ErrorMask>.Combine(TreescreateMask, TreeserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Trees,
                        errMaskObj: combinedTrees == null ? null : new MaskItem<Exception, Group_ErrorMask<Tree_ErrorMask>>(null, combinedTrees));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Trees);
                case "FLOR":
                    var tmpFlora = Group<Flora>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Flora_ErrorMask> FloracreateMask);
                    GroupCommon.CopyFieldsFrom<Flora, Flora_ErrorMask, Flora_CopyMask>(
                        item: item._Flora_Object,
                        rhs: tmpFlora,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Flora_ErrorMask> FloraerrorMask);
                    var combinedFlora = Group_ErrorMask<Flora_ErrorMask>.Combine(FloracreateMask, FloraerrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Flora,
                        errMaskObj: combinedFlora == null ? null : new MaskItem<Exception, Group_ErrorMask<Flora_ErrorMask>>(null, combinedFlora));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Flora);
                case "FURN":
                    var tmpFurnature = Group<Furnature>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Furnature_ErrorMask> FurnaturecreateMask);
                    GroupCommon.CopyFieldsFrom<Furnature, Furnature_ErrorMask, Furnature_CopyMask>(
                        item: item._Furnature_Object,
                        rhs: tmpFurnature,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Furnature_ErrorMask> FurnatureerrorMask);
                    var combinedFurnature = Group_ErrorMask<Furnature_ErrorMask>.Combine(FurnaturecreateMask, FurnatureerrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Furnature,
                        errMaskObj: combinedFurnature == null ? null : new MaskItem<Exception, Group_ErrorMask<Furnature_ErrorMask>>(null, combinedFurnature));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Furnature);
                case "WEAP":
                    var tmpWeapons = Group<Weapon>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Weapon_ErrorMask> WeaponscreateMask);
                    GroupCommon.CopyFieldsFrom<Weapon, Weapon_ErrorMask, Weapon_CopyMask>(
                        item: item._Weapons_Object,
                        rhs: tmpWeapons,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Weapon_ErrorMask> WeaponserrorMask);
                    var combinedWeapons = Group_ErrorMask<Weapon_ErrorMask>.Combine(WeaponscreateMask, WeaponserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Weapons,
                        errMaskObj: combinedWeapons == null ? null : new MaskItem<Exception, Group_ErrorMask<Weapon_ErrorMask>>(null, combinedWeapons));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Weapons);
                case "AMMO":
                    var tmpAmmo = Group<Ammo>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Ammo_ErrorMask> AmmocreateMask);
                    GroupCommon.CopyFieldsFrom<Ammo, Ammo_ErrorMask, Ammo_CopyMask>(
                        item: item._Ammo_Object,
                        rhs: tmpAmmo,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<Ammo_ErrorMask> AmmoerrorMask);
                    var combinedAmmo = Group_ErrorMask<Ammo_ErrorMask>.Combine(AmmocreateMask, AmmoerrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.Ammo,
                        errMaskObj: combinedAmmo == null ? null : new MaskItem<Exception, Group_ErrorMask<Ammo_ErrorMask>>(null, combinedAmmo));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.Ammo);
                case "NPC_":
                    var tmpNPCs = Group<NPC>.Create_Binary(
                        frame: frame,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<NPC_ErrorMask> NPCscreateMask);
                    GroupCommon.CopyFieldsFrom<NPC, NPC_ErrorMask, NPC_CopyMask>(
                        item: item._NPCs_Object,
                        rhs: tmpNPCs,
                        def: null,
                        cmds: null,
                        copyMask: null,
                        doMasks: errorMask != null,
                        errorMask: out Group_ErrorMask<NPC_ErrorMask> NPCserrorMask);
                    var combinedNPCs = Group_ErrorMask<NPC_ErrorMask>.Combine(NPCscreateMask, NPCserrorMask);
                    ErrorMask.HandleErrorMask(
                        creator: errorMask,
                        index: (int)OblivionMod_FieldIndex.NPCs,
                        errMaskObj: combinedNPCs == null ? null : new MaskItem<Exception, Group_ErrorMask<NPC_ErrorMask>>(null, combinedNPCs));
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(OblivionMod_FieldIndex.NPCs);
                default:
                    errorMask().Warnings.Add($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
                    frame.Position += contentLength;
                    return TryGet<OblivionMod_FieldIndex?>.Succeed(null);
            }
        }

        #endregion

        public OblivionMod Copy(
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null)
        {
            return OblivionMod.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static OblivionMod Copy(
            IOblivionMod item,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null)
        {
            OblivionMod ret;
            if (item.GetType().Equals(typeof(OblivionMod)))
            {
                ret = new OblivionMod();
            }
            else
            {
                ret = (OblivionMod)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null)
            where CopyType : class, IOblivionMod
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(OblivionMod)))
            {
                ret = new OblivionMod() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static OblivionMod Copy_ToLoqui(
            IOblivionModGetter item,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null)
        {
            OblivionMod ret;
            if (item.GetType().Equals(typeof(OblivionMod)))
            {
                ret = new OblivionMod() as OblivionMod;
            }
            else
            {
                ret = (OblivionMod)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    this._TES4_Object.CopyFieldsFrom(rhs: (TES4)obj);
                    break;
                case OblivionMod_FieldIndex.GameSettings:
                    this._GameSettings_Object.CopyFieldsFrom<GameSetting, GameSetting_CopyMask>(rhs: (Group<GameSetting>)obj);
                    break;
                case OblivionMod_FieldIndex.Globals:
                    this._Globals_Object.CopyFieldsFrom<Global, Global_CopyMask>(rhs: (Group<Global>)obj);
                    break;
                case OblivionMod_FieldIndex.Classes:
                    this._Classes_Object.CopyFieldsFrom<Class, Class_CopyMask>(rhs: (Group<Class>)obj);
                    break;
                case OblivionMod_FieldIndex.Factions:
                    this._Factions_Object.CopyFieldsFrom<Faction, Faction_CopyMask>(rhs: (Group<Faction>)obj);
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    this._Hairs_Object.CopyFieldsFrom<Hair, Hair_CopyMask>(rhs: (Group<Hair>)obj);
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    this._Eyes_Object.CopyFieldsFrom<Eye, Eye_CopyMask>(rhs: (Group<Eye>)obj);
                    break;
                case OblivionMod_FieldIndex.Races:
                    this._Races_Object.CopyFieldsFrom<Race, Race_CopyMask>(rhs: (Group<Race>)obj);
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    this._Sounds_Object.CopyFieldsFrom<Sound, Sound_CopyMask>(rhs: (Group<Sound>)obj);
                    break;
                case OblivionMod_FieldIndex.Skills:
                    this._Skills_Object.CopyFieldsFrom<SkillRecord, SkillRecord_CopyMask>(rhs: (Group<SkillRecord>)obj);
                    break;
                case OblivionMod_FieldIndex.MagicEffects:
                    this._MagicEffects_Object.CopyFieldsFrom<MagicEffect, MagicEffect_CopyMask>(rhs: (Group<MagicEffect>)obj);
                    break;
                case OblivionMod_FieldIndex.Scripts:
                    this._Scripts_Object.CopyFieldsFrom<Script, Script_CopyMask>(rhs: (Group<Script>)obj);
                    break;
                case OblivionMod_FieldIndex.LandTextures:
                    this._LandTextures_Object.CopyFieldsFrom<LandTexture, LandTexture_CopyMask>(rhs: (Group<LandTexture>)obj);
                    break;
                case OblivionMod_FieldIndex.Enchantments:
                    this._Enchantments_Object.CopyFieldsFrom<Enchantment, Enchantment_CopyMask>(rhs: (Group<Enchantment>)obj);
                    break;
                case OblivionMod_FieldIndex.Spells:
                    this._Spells_Object.CopyFieldsFrom<SpellUnleveled, SpellUnleveled_CopyMask>(rhs: (Group<SpellUnleveled>)obj);
                    break;
                case OblivionMod_FieldIndex.Birthsigns:
                    this._Birthsigns_Object.CopyFieldsFrom<Birthsign, Birthsign_CopyMask>(rhs: (Group<Birthsign>)obj);
                    break;
                case OblivionMod_FieldIndex.Activators:
                    this._Activators_Object.CopyFieldsFrom<Activator, Activator_CopyMask>(rhs: (Group<Activator>)obj);
                    break;
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    this._AlchemicalApparatus_Object.CopyFieldsFrom<AlchemicalApparatus, AlchemicalApparatus_CopyMask>(rhs: (Group<AlchemicalApparatus>)obj);
                    break;
                case OblivionMod_FieldIndex.Armors:
                    this._Armors_Object.CopyFieldsFrom<Armor, Armor_CopyMask>(rhs: (Group<Armor>)obj);
                    break;
                case OblivionMod_FieldIndex.Books:
                    this._Books_Object.CopyFieldsFrom<Book, Book_CopyMask>(rhs: (Group<Book>)obj);
                    break;
                case OblivionMod_FieldIndex.Clothes:
                    this._Clothes_Object.CopyFieldsFrom<Clothing, Clothing_CopyMask>(rhs: (Group<Clothing>)obj);
                    break;
                case OblivionMod_FieldIndex.Containers:
                    this._Containers_Object.CopyFieldsFrom<Container, Container_CopyMask>(rhs: (Group<Container>)obj);
                    break;
                case OblivionMod_FieldIndex.Doors:
                    this._Doors_Object.CopyFieldsFrom<Door, Door_CopyMask>(rhs: (Group<Door>)obj);
                    break;
                case OblivionMod_FieldIndex.Ingredients:
                    this._Ingredients_Object.CopyFieldsFrom<Ingredient, Ingredient_CopyMask>(rhs: (Group<Ingredient>)obj);
                    break;
                case OblivionMod_FieldIndex.Lights:
                    this._Lights_Object.CopyFieldsFrom<Light, Light_CopyMask>(rhs: (Group<Light>)obj);
                    break;
                case OblivionMod_FieldIndex.Miscellaneous:
                    this._Miscellaneous_Object.CopyFieldsFrom<Miscellaneous, Miscellaneous_CopyMask>(rhs: (Group<Miscellaneous>)obj);
                    break;
                case OblivionMod_FieldIndex.Statics:
                    this._Statics_Object.CopyFieldsFrom<Static, Static_CopyMask>(rhs: (Group<Static>)obj);
                    break;
                case OblivionMod_FieldIndex.Grasses:
                    this._Grasses_Object.CopyFieldsFrom<Grass, Grass_CopyMask>(rhs: (Group<Grass>)obj);
                    break;
                case OblivionMod_FieldIndex.Trees:
                    this._Trees_Object.CopyFieldsFrom<Tree, Tree_CopyMask>(rhs: (Group<Tree>)obj);
                    break;
                case OblivionMod_FieldIndex.Flora:
                    this._Flora_Object.CopyFieldsFrom<Flora, Flora_CopyMask>(rhs: (Group<Flora>)obj);
                    break;
                case OblivionMod_FieldIndex.Furnature:
                    this._Furnature_Object.CopyFieldsFrom<Furnature, Furnature_CopyMask>(rhs: (Group<Furnature>)obj);
                    break;
                case OblivionMod_FieldIndex.Weapons:
                    this._Weapons_Object.CopyFieldsFrom<Weapon, Weapon_CopyMask>(rhs: (Group<Weapon>)obj);
                    break;
                case OblivionMod_FieldIndex.Ammo:
                    this._Ammo_Object.CopyFieldsFrom<Ammo, Ammo_CopyMask>(rhs: (Group<Ammo>)obj);
                    break;
                case OblivionMod_FieldIndex.NPCs:
                    this._NPCs_Object.CopyFieldsFrom<NPC, NPC_CopyMask>(rhs: (Group<NPC>)obj);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            OblivionModCommon.Clear(this, cmds);
        }


        public static OblivionMod Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new OblivionMod();
            foreach (var pair in fields)
            {
                CopyInInternal_OblivionMod(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_OblivionMod(OblivionMod obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out OblivionMod_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    obj._TES4_Object.CopyFieldsFrom(rhs: (TES4)pair.Value);
                    break;
                case OblivionMod_FieldIndex.GameSettings:
                    obj._GameSettings_Object.CopyFieldsFrom<GameSetting, GameSetting_CopyMask>(rhs: (Group<GameSetting>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Globals:
                    obj._Globals_Object.CopyFieldsFrom<Global, Global_CopyMask>(rhs: (Group<Global>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Classes:
                    obj._Classes_Object.CopyFieldsFrom<Class, Class_CopyMask>(rhs: (Group<Class>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Factions:
                    obj._Factions_Object.CopyFieldsFrom<Faction, Faction_CopyMask>(rhs: (Group<Faction>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    obj._Hairs_Object.CopyFieldsFrom<Hair, Hair_CopyMask>(rhs: (Group<Hair>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    obj._Eyes_Object.CopyFieldsFrom<Eye, Eye_CopyMask>(rhs: (Group<Eye>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Races:
                    obj._Races_Object.CopyFieldsFrom<Race, Race_CopyMask>(rhs: (Group<Race>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    obj._Sounds_Object.CopyFieldsFrom<Sound, Sound_CopyMask>(rhs: (Group<Sound>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Skills:
                    obj._Skills_Object.CopyFieldsFrom<SkillRecord, SkillRecord_CopyMask>(rhs: (Group<SkillRecord>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.MagicEffects:
                    obj._MagicEffects_Object.CopyFieldsFrom<MagicEffect, MagicEffect_CopyMask>(rhs: (Group<MagicEffect>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Scripts:
                    obj._Scripts_Object.CopyFieldsFrom<Script, Script_CopyMask>(rhs: (Group<Script>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.LandTextures:
                    obj._LandTextures_Object.CopyFieldsFrom<LandTexture, LandTexture_CopyMask>(rhs: (Group<LandTexture>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Enchantments:
                    obj._Enchantments_Object.CopyFieldsFrom<Enchantment, Enchantment_CopyMask>(rhs: (Group<Enchantment>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Spells:
                    obj._Spells_Object.CopyFieldsFrom<SpellUnleveled, SpellUnleveled_CopyMask>(rhs: (Group<SpellUnleveled>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Birthsigns:
                    obj._Birthsigns_Object.CopyFieldsFrom<Birthsign, Birthsign_CopyMask>(rhs: (Group<Birthsign>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Activators:
                    obj._Activators_Object.CopyFieldsFrom<Activator, Activator_CopyMask>(rhs: (Group<Activator>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    obj._AlchemicalApparatus_Object.CopyFieldsFrom<AlchemicalApparatus, AlchemicalApparatus_CopyMask>(rhs: (Group<AlchemicalApparatus>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Armors:
                    obj._Armors_Object.CopyFieldsFrom<Armor, Armor_CopyMask>(rhs: (Group<Armor>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Books:
                    obj._Books_Object.CopyFieldsFrom<Book, Book_CopyMask>(rhs: (Group<Book>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Clothes:
                    obj._Clothes_Object.CopyFieldsFrom<Clothing, Clothing_CopyMask>(rhs: (Group<Clothing>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Containers:
                    obj._Containers_Object.CopyFieldsFrom<Container, Container_CopyMask>(rhs: (Group<Container>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Doors:
                    obj._Doors_Object.CopyFieldsFrom<Door, Door_CopyMask>(rhs: (Group<Door>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Ingredients:
                    obj._Ingredients_Object.CopyFieldsFrom<Ingredient, Ingredient_CopyMask>(rhs: (Group<Ingredient>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Lights:
                    obj._Lights_Object.CopyFieldsFrom<Light, Light_CopyMask>(rhs: (Group<Light>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Miscellaneous:
                    obj._Miscellaneous_Object.CopyFieldsFrom<Miscellaneous, Miscellaneous_CopyMask>(rhs: (Group<Miscellaneous>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Statics:
                    obj._Statics_Object.CopyFieldsFrom<Static, Static_CopyMask>(rhs: (Group<Static>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Grasses:
                    obj._Grasses_Object.CopyFieldsFrom<Grass, Grass_CopyMask>(rhs: (Group<Grass>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Trees:
                    obj._Trees_Object.CopyFieldsFrom<Tree, Tree_CopyMask>(rhs: (Group<Tree>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Flora:
                    obj._Flora_Object.CopyFieldsFrom<Flora, Flora_CopyMask>(rhs: (Group<Flora>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Furnature:
                    obj._Furnature_Object.CopyFieldsFrom<Furnature, Furnature_CopyMask>(rhs: (Group<Furnature>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Weapons:
                    obj._Weapons_Object.CopyFieldsFrom<Weapon, Weapon_CopyMask>(rhs: (Group<Weapon>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.Ammo:
                    obj._Ammo_Object.CopyFieldsFrom<Ammo, Ammo_CopyMask>(rhs: (Group<Ammo>)pair.Value);
                    break;
                case OblivionMod_FieldIndex.NPCs:
                    obj._NPCs_Object.CopyFieldsFrom<NPC, NPC_CopyMask>(rhs: (Group<NPC>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, OblivionMod obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IOblivionMod : IOblivionModGetter, ILoquiClass<IOblivionMod, IOblivionModGetter>, ILoquiClass<OblivionMod, IOblivionModGetter>
    {
    }

    public interface IOblivionModGetter : ILoquiObject
    {
        #region TES4
        TES4 TES4 { get; }
        INotifyingSetItemGetter<TES4> TES4_Property { get; }

        #endregion
        #region GameSettings
        Group<GameSetting> GameSettings { get; }
        #endregion
        #region Globals
        Group<Global> Globals { get; }
        #endregion
        #region Classes
        Group<Class> Classes { get; }
        #endregion
        #region Factions
        Group<Faction> Factions { get; }
        #endregion
        #region Hairs
        Group<Hair> Hairs { get; }
        #endregion
        #region Eyes
        Group<Eye> Eyes { get; }
        #endregion
        #region Races
        Group<Race> Races { get; }
        #endregion
        #region Sounds
        Group<Sound> Sounds { get; }
        #endregion
        #region Skills
        Group<SkillRecord> Skills { get; }
        #endregion
        #region MagicEffects
        Group<MagicEffect> MagicEffects { get; }
        #endregion
        #region Scripts
        Group<Script> Scripts { get; }
        #endregion
        #region LandTextures
        Group<LandTexture> LandTextures { get; }
        #endregion
        #region Enchantments
        Group<Enchantment> Enchantments { get; }
        #endregion
        #region Spells
        Group<SpellUnleveled> Spells { get; }
        #endregion
        #region Birthsigns
        Group<Birthsign> Birthsigns { get; }
        #endregion
        #region Activators
        Group<Activator> Activators { get; }
        #endregion
        #region AlchemicalApparatus
        Group<AlchemicalApparatus> AlchemicalApparatus { get; }
        #endregion
        #region Armors
        Group<Armor> Armors { get; }
        #endregion
        #region Books
        Group<Book> Books { get; }
        #endregion
        #region Clothes
        Group<Clothing> Clothes { get; }
        #endregion
        #region Containers
        Group<Container> Containers { get; }
        #endregion
        #region Doors
        Group<Door> Doors { get; }
        #endregion
        #region Ingredients
        Group<Ingredient> Ingredients { get; }
        #endregion
        #region Lights
        Group<Light> Lights { get; }
        #endregion
        #region Miscellaneous
        Group<Miscellaneous> Miscellaneous { get; }
        #endregion
        #region Statics
        Group<Static> Statics { get; }
        #endregion
        #region Grasses
        Group<Grass> Grasses { get; }
        #endregion
        #region Trees
        Group<Tree> Trees { get; }
        #endregion
        #region Flora
        Group<Flora> Flora { get; }
        #endregion
        #region Furnature
        Group<Furnature> Furnature { get; }
        #endregion
        #region Weapons
        Group<Weapon> Weapons { get; }
        #endregion
        #region Ammo
        Group<Ammo> Ammo { get; }
        #endregion
        #region NPCs
        Group<NPC> NPCs { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum OblivionMod_FieldIndex
    {
        TES4 = 0,
        GameSettings = 1,
        Globals = 2,
        Classes = 3,
        Factions = 4,
        Hairs = 5,
        Eyes = 6,
        Races = 7,
        Sounds = 8,
        Skills = 9,
        MagicEffects = 10,
        Scripts = 11,
        LandTextures = 12,
        Enchantments = 13,
        Spells = 14,
        Birthsigns = 15,
        Activators = 16,
        AlchemicalApparatus = 17,
        Armors = 18,
        Books = 19,
        Clothes = 20,
        Containers = 21,
        Doors = 22,
        Ingredients = 23,
        Lights = 24,
        Miscellaneous = 25,
        Statics = 26,
        Grasses = 27,
        Trees = 28,
        Flora = 29,
        Furnature = 30,
        Weapons = 31,
        Ammo = 32,
        NPCs = 33,
    }
    #endregion

    #region Registration
    public class OblivionMod_Registration : ILoquiRegistration
    {
        public static readonly OblivionMod_Registration Instance = new OblivionMod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 3,
            version: 0);

        public const string GUID = "b6f626df-b164-466b-960a-1639d88f66bc";

        public const ushort FieldCount = 34;

        public static readonly Type MaskType = typeof(OblivionMod_Mask<>);

        public static readonly Type ErrorMaskType = typeof(OblivionMod_ErrorMask);

        public static readonly Type ClassType = typeof(OblivionMod);

        public static readonly Type GetterType = typeof(IOblivionModGetter);

        public static readonly Type SetterType = typeof(IOblivionMod);

        public static readonly Type CommonType = typeof(OblivionModCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.OblivionMod";

        public const string Name = "OblivionMod";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TES4":
                    return (ushort)OblivionMod_FieldIndex.TES4;
                case "GAMESETTINGS":
                    return (ushort)OblivionMod_FieldIndex.GameSettings;
                case "GLOBALS":
                    return (ushort)OblivionMod_FieldIndex.Globals;
                case "CLASSES":
                    return (ushort)OblivionMod_FieldIndex.Classes;
                case "FACTIONS":
                    return (ushort)OblivionMod_FieldIndex.Factions;
                case "HAIRS":
                    return (ushort)OblivionMod_FieldIndex.Hairs;
                case "EYES":
                    return (ushort)OblivionMod_FieldIndex.Eyes;
                case "RACES":
                    return (ushort)OblivionMod_FieldIndex.Races;
                case "SOUNDS":
                    return (ushort)OblivionMod_FieldIndex.Sounds;
                case "SKILLS":
                    return (ushort)OblivionMod_FieldIndex.Skills;
                case "MAGICEFFECTS":
                    return (ushort)OblivionMod_FieldIndex.MagicEffects;
                case "SCRIPTS":
                    return (ushort)OblivionMod_FieldIndex.Scripts;
                case "LANDTEXTURES":
                    return (ushort)OblivionMod_FieldIndex.LandTextures;
                case "ENCHANTMENTS":
                    return (ushort)OblivionMod_FieldIndex.Enchantments;
                case "SPELLS":
                    return (ushort)OblivionMod_FieldIndex.Spells;
                case "BIRTHSIGNS":
                    return (ushort)OblivionMod_FieldIndex.Birthsigns;
                case "ACTIVATORS":
                    return (ushort)OblivionMod_FieldIndex.Activators;
                case "ALCHEMICALAPPARATUS":
                    return (ushort)OblivionMod_FieldIndex.AlchemicalApparatus;
                case "ARMORS":
                    return (ushort)OblivionMod_FieldIndex.Armors;
                case "BOOKS":
                    return (ushort)OblivionMod_FieldIndex.Books;
                case "CLOTHES":
                    return (ushort)OblivionMod_FieldIndex.Clothes;
                case "CONTAINERS":
                    return (ushort)OblivionMod_FieldIndex.Containers;
                case "DOORS":
                    return (ushort)OblivionMod_FieldIndex.Doors;
                case "INGREDIENTS":
                    return (ushort)OblivionMod_FieldIndex.Ingredients;
                case "LIGHTS":
                    return (ushort)OblivionMod_FieldIndex.Lights;
                case "MISCELLANEOUS":
                    return (ushort)OblivionMod_FieldIndex.Miscellaneous;
                case "STATICS":
                    return (ushort)OblivionMod_FieldIndex.Statics;
                case "GRASSES":
                    return (ushort)OblivionMod_FieldIndex.Grasses;
                case "TREES":
                    return (ushort)OblivionMod_FieldIndex.Trees;
                case "FLORA":
                    return (ushort)OblivionMod_FieldIndex.Flora;
                case "FURNATURE":
                    return (ushort)OblivionMod_FieldIndex.Furnature;
                case "WEAPONS":
                    return (ushort)OblivionMod_FieldIndex.Weapons;
                case "AMMO":
                    return (ushort)OblivionMod_FieldIndex.Ammo;
                case "NPCS":
                    return (ushort)OblivionMod_FieldIndex.NPCs;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return "TES4";
                case OblivionMod_FieldIndex.GameSettings:
                    return "GameSettings";
                case OblivionMod_FieldIndex.Globals:
                    return "Globals";
                case OblivionMod_FieldIndex.Classes:
                    return "Classes";
                case OblivionMod_FieldIndex.Factions:
                    return "Factions";
                case OblivionMod_FieldIndex.Hairs:
                    return "Hairs";
                case OblivionMod_FieldIndex.Eyes:
                    return "Eyes";
                case OblivionMod_FieldIndex.Races:
                    return "Races";
                case OblivionMod_FieldIndex.Sounds:
                    return "Sounds";
                case OblivionMod_FieldIndex.Skills:
                    return "Skills";
                case OblivionMod_FieldIndex.MagicEffects:
                    return "MagicEffects";
                case OblivionMod_FieldIndex.Scripts:
                    return "Scripts";
                case OblivionMod_FieldIndex.LandTextures:
                    return "LandTextures";
                case OblivionMod_FieldIndex.Enchantments:
                    return "Enchantments";
                case OblivionMod_FieldIndex.Spells:
                    return "Spells";
                case OblivionMod_FieldIndex.Birthsigns:
                    return "Birthsigns";
                case OblivionMod_FieldIndex.Activators:
                    return "Activators";
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    return "AlchemicalApparatus";
                case OblivionMod_FieldIndex.Armors:
                    return "Armors";
                case OblivionMod_FieldIndex.Books:
                    return "Books";
                case OblivionMod_FieldIndex.Clothes:
                    return "Clothes";
                case OblivionMod_FieldIndex.Containers:
                    return "Containers";
                case OblivionMod_FieldIndex.Doors:
                    return "Doors";
                case OblivionMod_FieldIndex.Ingredients:
                    return "Ingredients";
                case OblivionMod_FieldIndex.Lights:
                    return "Lights";
                case OblivionMod_FieldIndex.Miscellaneous:
                    return "Miscellaneous";
                case OblivionMod_FieldIndex.Statics:
                    return "Statics";
                case OblivionMod_FieldIndex.Grasses:
                    return "Grasses";
                case OblivionMod_FieldIndex.Trees:
                    return "Trees";
                case OblivionMod_FieldIndex.Flora:
                    return "Flora";
                case OblivionMod_FieldIndex.Furnature:
                    return "Furnature";
                case OblivionMod_FieldIndex.Weapons:
                    return "Weapons";
                case OblivionMod_FieldIndex.Ammo:
                    return "Ammo";
                case OblivionMod_FieldIndex.NPCs:
                    return "NPCs";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return true;
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return typeof(TES4);
                case OblivionMod_FieldIndex.GameSettings:
                    return typeof(Group<GameSetting>);
                case OblivionMod_FieldIndex.Globals:
                    return typeof(Group<Global>);
                case OblivionMod_FieldIndex.Classes:
                    return typeof(Group<Class>);
                case OblivionMod_FieldIndex.Factions:
                    return typeof(Group<Faction>);
                case OblivionMod_FieldIndex.Hairs:
                    return typeof(Group<Hair>);
                case OblivionMod_FieldIndex.Eyes:
                    return typeof(Group<Eye>);
                case OblivionMod_FieldIndex.Races:
                    return typeof(Group<Race>);
                case OblivionMod_FieldIndex.Sounds:
                    return typeof(Group<Sound>);
                case OblivionMod_FieldIndex.Skills:
                    return typeof(Group<SkillRecord>);
                case OblivionMod_FieldIndex.MagicEffects:
                    return typeof(Group<MagicEffect>);
                case OblivionMod_FieldIndex.Scripts:
                    return typeof(Group<Script>);
                case OblivionMod_FieldIndex.LandTextures:
                    return typeof(Group<LandTexture>);
                case OblivionMod_FieldIndex.Enchantments:
                    return typeof(Group<Enchantment>);
                case OblivionMod_FieldIndex.Spells:
                    return typeof(Group<SpellUnleveled>);
                case OblivionMod_FieldIndex.Birthsigns:
                    return typeof(Group<Birthsign>);
                case OblivionMod_FieldIndex.Activators:
                    return typeof(Group<Activator>);
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    return typeof(Group<AlchemicalApparatus>);
                case OblivionMod_FieldIndex.Armors:
                    return typeof(Group<Armor>);
                case OblivionMod_FieldIndex.Books:
                    return typeof(Group<Book>);
                case OblivionMod_FieldIndex.Clothes:
                    return typeof(Group<Clothing>);
                case OblivionMod_FieldIndex.Containers:
                    return typeof(Group<Container>);
                case OblivionMod_FieldIndex.Doors:
                    return typeof(Group<Door>);
                case OblivionMod_FieldIndex.Ingredients:
                    return typeof(Group<Ingredient>);
                case OblivionMod_FieldIndex.Lights:
                    return typeof(Group<Light>);
                case OblivionMod_FieldIndex.Miscellaneous:
                    return typeof(Group<Miscellaneous>);
                case OblivionMod_FieldIndex.Statics:
                    return typeof(Group<Static>);
                case OblivionMod_FieldIndex.Grasses:
                    return typeof(Group<Grass>);
                case OblivionMod_FieldIndex.Trees:
                    return typeof(Group<Tree>);
                case OblivionMod_FieldIndex.Flora:
                    return typeof(Group<Flora>);
                case OblivionMod_FieldIndex.Furnature:
                    return typeof(Group<Furnature>);
                case OblivionMod_FieldIndex.Weapons:
                    return typeof(Group<Weapon>);
                case OblivionMod_FieldIndex.Ammo:
                    return typeof(Group<Ammo>);
                case OblivionMod_FieldIndex.NPCs:
                    return typeof(Group<NPC>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType TES4_HEADER = new RecordType("TES4");
        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType GLOB_HEADER = new RecordType("GLOB");
        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType HAIR_HEADER = new RecordType("HAIR");
        public static readonly RecordType EYES_HEADER = new RecordType("EYES");
        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType SOUN_HEADER = new RecordType("SOUN");
        public static readonly RecordType SKIL_HEADER = new RecordType("SKIL");
        public static readonly RecordType MGEF_HEADER = new RecordType("MGEF");
        public static readonly RecordType SCPT_HEADER = new RecordType("SCPT");
        public static readonly RecordType LTEX_HEADER = new RecordType("LTEX");
        public static readonly RecordType ENCH_HEADER = new RecordType("ENCH");
        public static readonly RecordType SPEL_HEADER = new RecordType("SPEL");
        public static readonly RecordType BSGN_HEADER = new RecordType("BSGN");
        public static readonly RecordType ACTI_HEADER = new RecordType("ACTI");
        public static readonly RecordType APPA_HEADER = new RecordType("APPA");
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType BOOK_HEADER = new RecordType("BOOK");
        public static readonly RecordType CLOT_HEADER = new RecordType("CLOT");
        public static readonly RecordType CONT_HEADER = new RecordType("CONT");
        public static readonly RecordType DOOR_HEADER = new RecordType("DOOR");
        public static readonly RecordType INGR_HEADER = new RecordType("INGR");
        public static readonly RecordType LIGH_HEADER = new RecordType("LIGH");
        public static readonly RecordType MISC_HEADER = new RecordType("MISC");
        public static readonly RecordType STAT_HEADER = new RecordType("STAT");
        public static readonly RecordType GRAS_HEADER = new RecordType("GRAS");
        public static readonly RecordType TREE_HEADER = new RecordType("TREE");
        public static readonly RecordType FLOR_HEADER = new RecordType("FLOR");
        public static readonly RecordType FURN_HEADER = new RecordType("FURN");
        public static readonly RecordType WEAP_HEADER = new RecordType("WEAP");
        public static readonly RecordType AMMO_HEADER = new RecordType("AMMO");
        public static readonly RecordType NPC__HEADER = new RecordType("NPC_");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        TES4_HEADER,
                        GMST_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 34;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class OblivionModCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IOblivionMod item,
            IOblivionModGetter rhs,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            OblivionModCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IOblivionMod item,
            IOblivionModGetter rhs,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            OblivionModCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IOblivionMod item,
            IOblivionModGetter rhs,
            IOblivionModGetter def,
            bool doMasks,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            OblivionMod_ErrorMask retErrorMask = null;
            Func<OblivionMod_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new OblivionMod_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IOblivionMod item,
            IOblivionModGetter rhs,
            IOblivionModGetter def,
            bool doMasks,
            Func<OblivionMod_ErrorMask> errorMask,
            OblivionMod_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.TES4.Overall ?? true)
            {
                try
                {
                    TES4Common.CopyFieldsFrom(
                        item: item.TES4,
                        rhs: rhs.TES4,
                        def: def?.TES4,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<TES4_ErrorMask>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.TES4.Specific == null)
                            {
                                baseMask.TES4 = new MaskItem<Exception, TES4_ErrorMask>(null, new TES4_ErrorMask());
                            }
                            return baseMask.TES4.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.TES4.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.TES4, ex);
                }
            }
            if (copyMask?.GameSettings.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<GameSetting, GameSetting_ErrorMask, GameSetting_CopyMask>(
                        item: item.GameSettings,
                        rhs: rhs.GameSettings,
                        def: def?.GameSettings,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<GameSetting_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.GameSettings.Specific == null)
                            {
                                baseMask.GameSettings = new MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>(null, new Group_ErrorMask<GameSetting_ErrorMask>());
                            }
                            return baseMask.GameSettings.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.GameSettings.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.GameSettings, ex);
                }
            }
            if (copyMask?.Globals.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Global, Global_ErrorMask, Global_CopyMask>(
                        item: item.Globals,
                        rhs: rhs.Globals,
                        def: def?.Globals,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Global_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Globals.Specific == null)
                            {
                                baseMask.Globals = new MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>(null, new Group_ErrorMask<Global_ErrorMask>());
                            }
                            return baseMask.Globals.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Globals.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Globals, ex);
                }
            }
            if (copyMask?.Classes.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Class, Class_ErrorMask, Class_CopyMask>(
                        item: item.Classes,
                        rhs: rhs.Classes,
                        def: def?.Classes,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Class_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Classes.Specific == null)
                            {
                                baseMask.Classes = new MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>(null, new Group_ErrorMask<Class_ErrorMask>());
                            }
                            return baseMask.Classes.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Classes.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Classes, ex);
                }
            }
            if (copyMask?.Factions.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Faction, Faction_ErrorMask, Faction_CopyMask>(
                        item: item.Factions,
                        rhs: rhs.Factions,
                        def: def?.Factions,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Faction_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Factions.Specific == null)
                            {
                                baseMask.Factions = new MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>(null, new Group_ErrorMask<Faction_ErrorMask>());
                            }
                            return baseMask.Factions.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Factions.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Factions, ex);
                }
            }
            if (copyMask?.Hairs.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Hair, Hair_ErrorMask, Hair_CopyMask>(
                        item: item.Hairs,
                        rhs: rhs.Hairs,
                        def: def?.Hairs,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Hair_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Hairs.Specific == null)
                            {
                                baseMask.Hairs = new MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>(null, new Group_ErrorMask<Hair_ErrorMask>());
                            }
                            return baseMask.Hairs.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Hairs.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Hairs, ex);
                }
            }
            if (copyMask?.Eyes.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Eye, Eye_ErrorMask, Eye_CopyMask>(
                        item: item.Eyes,
                        rhs: rhs.Eyes,
                        def: def?.Eyes,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Eye_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Eyes.Specific == null)
                            {
                                baseMask.Eyes = new MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>(null, new Group_ErrorMask<Eye_ErrorMask>());
                            }
                            return baseMask.Eyes.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Eyes.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Eyes, ex);
                }
            }
            if (copyMask?.Races.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Race, Race_ErrorMask, Race_CopyMask>(
                        item: item.Races,
                        rhs: rhs.Races,
                        def: def?.Races,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Race_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Races.Specific == null)
                            {
                                baseMask.Races = new MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>(null, new Group_ErrorMask<Race_ErrorMask>());
                            }
                            return baseMask.Races.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Races.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Races, ex);
                }
            }
            if (copyMask?.Sounds.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Sound, Sound_ErrorMask, Sound_CopyMask>(
                        item: item.Sounds,
                        rhs: rhs.Sounds,
                        def: def?.Sounds,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Sound_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Sounds.Specific == null)
                            {
                                baseMask.Sounds = new MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>(null, new Group_ErrorMask<Sound_ErrorMask>());
                            }
                            return baseMask.Sounds.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Sounds.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Sounds, ex);
                }
            }
            if (copyMask?.Skills.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<SkillRecord, SkillRecord_ErrorMask, SkillRecord_CopyMask>(
                        item: item.Skills,
                        rhs: rhs.Skills,
                        def: def?.Skills,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<SkillRecord_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Skills.Specific == null)
                            {
                                baseMask.Skills = new MaskItem<Exception, Group_ErrorMask<SkillRecord_ErrorMask>>(null, new Group_ErrorMask<SkillRecord_ErrorMask>());
                            }
                            return baseMask.Skills.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Skills.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Skills, ex);
                }
            }
            if (copyMask?.MagicEffects.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<MagicEffect, MagicEffect_ErrorMask, MagicEffect_CopyMask>(
                        item: item.MagicEffects,
                        rhs: rhs.MagicEffects,
                        def: def?.MagicEffects,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<MagicEffect_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.MagicEffects.Specific == null)
                            {
                                baseMask.MagicEffects = new MaskItem<Exception, Group_ErrorMask<MagicEffect_ErrorMask>>(null, new Group_ErrorMask<MagicEffect_ErrorMask>());
                            }
                            return baseMask.MagicEffects.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.MagicEffects.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.MagicEffects, ex);
                }
            }
            if (copyMask?.Scripts.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Script, Script_ErrorMask, Script_CopyMask>(
                        item: item.Scripts,
                        rhs: rhs.Scripts,
                        def: def?.Scripts,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Script_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Scripts.Specific == null)
                            {
                                baseMask.Scripts = new MaskItem<Exception, Group_ErrorMask<Script_ErrorMask>>(null, new Group_ErrorMask<Script_ErrorMask>());
                            }
                            return baseMask.Scripts.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Scripts.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Scripts, ex);
                }
            }
            if (copyMask?.LandTextures.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<LandTexture, LandTexture_ErrorMask, LandTexture_CopyMask>(
                        item: item.LandTextures,
                        rhs: rhs.LandTextures,
                        def: def?.LandTextures,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<LandTexture_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.LandTextures.Specific == null)
                            {
                                baseMask.LandTextures = new MaskItem<Exception, Group_ErrorMask<LandTexture_ErrorMask>>(null, new Group_ErrorMask<LandTexture_ErrorMask>());
                            }
                            return baseMask.LandTextures.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.LandTextures.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.LandTextures, ex);
                }
            }
            if (copyMask?.Enchantments.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Enchantment, Enchantment_ErrorMask, Enchantment_CopyMask>(
                        item: item.Enchantments,
                        rhs: rhs.Enchantments,
                        def: def?.Enchantments,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Enchantment_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Enchantments.Specific == null)
                            {
                                baseMask.Enchantments = new MaskItem<Exception, Group_ErrorMask<Enchantment_ErrorMask>>(null, new Group_ErrorMask<Enchantment_ErrorMask>());
                            }
                            return baseMask.Enchantments.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Enchantments.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Enchantments, ex);
                }
            }
            if (copyMask?.Spells.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<SpellUnleveled, SpellUnleveled_ErrorMask, SpellUnleveled_CopyMask>(
                        item: item.Spells,
                        rhs: rhs.Spells,
                        def: def?.Spells,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<SpellUnleveled_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Spells.Specific == null)
                            {
                                baseMask.Spells = new MaskItem<Exception, Group_ErrorMask<SpellUnleveled_ErrorMask>>(null, new Group_ErrorMask<SpellUnleveled_ErrorMask>());
                            }
                            return baseMask.Spells.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Spells.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Spells, ex);
                }
            }
            if (copyMask?.Birthsigns.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Birthsign, Birthsign_ErrorMask, Birthsign_CopyMask>(
                        item: item.Birthsigns,
                        rhs: rhs.Birthsigns,
                        def: def?.Birthsigns,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Birthsign_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Birthsigns.Specific == null)
                            {
                                baseMask.Birthsigns = new MaskItem<Exception, Group_ErrorMask<Birthsign_ErrorMask>>(null, new Group_ErrorMask<Birthsign_ErrorMask>());
                            }
                            return baseMask.Birthsigns.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Birthsigns.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Birthsigns, ex);
                }
            }
            if (copyMask?.Activators.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Activator, Activator_ErrorMask, Activator_CopyMask>(
                        item: item.Activators,
                        rhs: rhs.Activators,
                        def: def?.Activators,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Activator_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Activators.Specific == null)
                            {
                                baseMask.Activators = new MaskItem<Exception, Group_ErrorMask<Activator_ErrorMask>>(null, new Group_ErrorMask<Activator_ErrorMask>());
                            }
                            return baseMask.Activators.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Activators.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Activators, ex);
                }
            }
            if (copyMask?.AlchemicalApparatus.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<AlchemicalApparatus, AlchemicalApparatus_ErrorMask, AlchemicalApparatus_CopyMask>(
                        item: item.AlchemicalApparatus,
                        rhs: rhs.AlchemicalApparatus,
                        def: def?.AlchemicalApparatus,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<AlchemicalApparatus_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.AlchemicalApparatus.Specific == null)
                            {
                                baseMask.AlchemicalApparatus = new MaskItem<Exception, Group_ErrorMask<AlchemicalApparatus_ErrorMask>>(null, new Group_ErrorMask<AlchemicalApparatus_ErrorMask>());
                            }
                            return baseMask.AlchemicalApparatus.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.AlchemicalApparatus.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.AlchemicalApparatus, ex);
                }
            }
            if (copyMask?.Armors.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Armor, Armor_ErrorMask, Armor_CopyMask>(
                        item: item.Armors,
                        rhs: rhs.Armors,
                        def: def?.Armors,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Armor_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Armors.Specific == null)
                            {
                                baseMask.Armors = new MaskItem<Exception, Group_ErrorMask<Armor_ErrorMask>>(null, new Group_ErrorMask<Armor_ErrorMask>());
                            }
                            return baseMask.Armors.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Armors.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Armors, ex);
                }
            }
            if (copyMask?.Books.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Book, Book_ErrorMask, Book_CopyMask>(
                        item: item.Books,
                        rhs: rhs.Books,
                        def: def?.Books,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Book_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Books.Specific == null)
                            {
                                baseMask.Books = new MaskItem<Exception, Group_ErrorMask<Book_ErrorMask>>(null, new Group_ErrorMask<Book_ErrorMask>());
                            }
                            return baseMask.Books.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Books.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Books, ex);
                }
            }
            if (copyMask?.Clothes.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Clothing, Clothing_ErrorMask, Clothing_CopyMask>(
                        item: item.Clothes,
                        rhs: rhs.Clothes,
                        def: def?.Clothes,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Clothing_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Clothes.Specific == null)
                            {
                                baseMask.Clothes = new MaskItem<Exception, Group_ErrorMask<Clothing_ErrorMask>>(null, new Group_ErrorMask<Clothing_ErrorMask>());
                            }
                            return baseMask.Clothes.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Clothes.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Clothes, ex);
                }
            }
            if (copyMask?.Containers.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Container, Container_ErrorMask, Container_CopyMask>(
                        item: item.Containers,
                        rhs: rhs.Containers,
                        def: def?.Containers,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Container_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Containers.Specific == null)
                            {
                                baseMask.Containers = new MaskItem<Exception, Group_ErrorMask<Container_ErrorMask>>(null, new Group_ErrorMask<Container_ErrorMask>());
                            }
                            return baseMask.Containers.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Containers.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Containers, ex);
                }
            }
            if (copyMask?.Doors.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Door, Door_ErrorMask, Door_CopyMask>(
                        item: item.Doors,
                        rhs: rhs.Doors,
                        def: def?.Doors,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Door_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Doors.Specific == null)
                            {
                                baseMask.Doors = new MaskItem<Exception, Group_ErrorMask<Door_ErrorMask>>(null, new Group_ErrorMask<Door_ErrorMask>());
                            }
                            return baseMask.Doors.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Doors.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Doors, ex);
                }
            }
            if (copyMask?.Ingredients.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Ingredient, Ingredient_ErrorMask, Ingredient_CopyMask>(
                        item: item.Ingredients,
                        rhs: rhs.Ingredients,
                        def: def?.Ingredients,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Ingredient_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Ingredients.Specific == null)
                            {
                                baseMask.Ingredients = new MaskItem<Exception, Group_ErrorMask<Ingredient_ErrorMask>>(null, new Group_ErrorMask<Ingredient_ErrorMask>());
                            }
                            return baseMask.Ingredients.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Ingredients.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Ingredients, ex);
                }
            }
            if (copyMask?.Lights.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Light, Light_ErrorMask, Light_CopyMask>(
                        item: item.Lights,
                        rhs: rhs.Lights,
                        def: def?.Lights,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Light_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Lights.Specific == null)
                            {
                                baseMask.Lights = new MaskItem<Exception, Group_ErrorMask<Light_ErrorMask>>(null, new Group_ErrorMask<Light_ErrorMask>());
                            }
                            return baseMask.Lights.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Lights.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Lights, ex);
                }
            }
            if (copyMask?.Miscellaneous.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Miscellaneous, Miscellaneous_ErrorMask, Miscellaneous_CopyMask>(
                        item: item.Miscellaneous,
                        rhs: rhs.Miscellaneous,
                        def: def?.Miscellaneous,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Miscellaneous_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Miscellaneous.Specific == null)
                            {
                                baseMask.Miscellaneous = new MaskItem<Exception, Group_ErrorMask<Miscellaneous_ErrorMask>>(null, new Group_ErrorMask<Miscellaneous_ErrorMask>());
                            }
                            return baseMask.Miscellaneous.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Miscellaneous.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Miscellaneous, ex);
                }
            }
            if (copyMask?.Statics.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Static, Static_ErrorMask, Static_CopyMask>(
                        item: item.Statics,
                        rhs: rhs.Statics,
                        def: def?.Statics,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Static_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Statics.Specific == null)
                            {
                                baseMask.Statics = new MaskItem<Exception, Group_ErrorMask<Static_ErrorMask>>(null, new Group_ErrorMask<Static_ErrorMask>());
                            }
                            return baseMask.Statics.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Statics.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Statics, ex);
                }
            }
            if (copyMask?.Grasses.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Grass, Grass_ErrorMask, Grass_CopyMask>(
                        item: item.Grasses,
                        rhs: rhs.Grasses,
                        def: def?.Grasses,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Grass_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Grasses.Specific == null)
                            {
                                baseMask.Grasses = new MaskItem<Exception, Group_ErrorMask<Grass_ErrorMask>>(null, new Group_ErrorMask<Grass_ErrorMask>());
                            }
                            return baseMask.Grasses.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Grasses.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Grasses, ex);
                }
            }
            if (copyMask?.Trees.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Tree, Tree_ErrorMask, Tree_CopyMask>(
                        item: item.Trees,
                        rhs: rhs.Trees,
                        def: def?.Trees,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Tree_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Trees.Specific == null)
                            {
                                baseMask.Trees = new MaskItem<Exception, Group_ErrorMask<Tree_ErrorMask>>(null, new Group_ErrorMask<Tree_ErrorMask>());
                            }
                            return baseMask.Trees.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Trees.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Trees, ex);
                }
            }
            if (copyMask?.Flora.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Flora, Flora_ErrorMask, Flora_CopyMask>(
                        item: item.Flora,
                        rhs: rhs.Flora,
                        def: def?.Flora,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Flora_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Flora.Specific == null)
                            {
                                baseMask.Flora = new MaskItem<Exception, Group_ErrorMask<Flora_ErrorMask>>(null, new Group_ErrorMask<Flora_ErrorMask>());
                            }
                            return baseMask.Flora.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Flora.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Flora, ex);
                }
            }
            if (copyMask?.Furnature.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Furnature, Furnature_ErrorMask, Furnature_CopyMask>(
                        item: item.Furnature,
                        rhs: rhs.Furnature,
                        def: def?.Furnature,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Furnature_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Furnature.Specific == null)
                            {
                                baseMask.Furnature = new MaskItem<Exception, Group_ErrorMask<Furnature_ErrorMask>>(null, new Group_ErrorMask<Furnature_ErrorMask>());
                            }
                            return baseMask.Furnature.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Furnature.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Furnature, ex);
                }
            }
            if (copyMask?.Weapons.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Weapon, Weapon_ErrorMask, Weapon_CopyMask>(
                        item: item.Weapons,
                        rhs: rhs.Weapons,
                        def: def?.Weapons,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Weapon_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Weapons.Specific == null)
                            {
                                baseMask.Weapons = new MaskItem<Exception, Group_ErrorMask<Weapon_ErrorMask>>(null, new Group_ErrorMask<Weapon_ErrorMask>());
                            }
                            return baseMask.Weapons.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Weapons.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Weapons, ex);
                }
            }
            if (copyMask?.Ammo.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<Ammo, Ammo_ErrorMask, Ammo_CopyMask>(
                        item: item.Ammo,
                        rhs: rhs.Ammo,
                        def: def?.Ammo,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<Ammo_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Ammo.Specific == null)
                            {
                                baseMask.Ammo = new MaskItem<Exception, Group_ErrorMask<Ammo_ErrorMask>>(null, new Group_ErrorMask<Ammo_ErrorMask>());
                            }
                            return baseMask.Ammo.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Ammo.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Ammo, ex);
                }
            }
            if (copyMask?.NPCs.Overall ?? true)
            {
                try
                {
                    GroupCommon.CopyFieldsFrom<NPC, NPC_ErrorMask, NPC_CopyMask>(
                        item: item.NPCs,
                        rhs: rhs.NPCs,
                        def: def?.NPCs,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<Group_ErrorMask<NPC_ErrorMask>>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.NPCs.Specific == null)
                            {
                                baseMask.NPCs = new MaskItem<Exception, Group_ErrorMask<NPC_ErrorMask>>(null, new Group_ErrorMask<NPC_ErrorMask>());
                            }
                            return baseMask.NPCs.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.NPCs.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.NPCs, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IOblivionMod obj,
            NotifyingFireParameters cmds = null)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case OblivionMod_FieldIndex.TES4:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IOblivionMod obj,
            NotifyingUnsetParameters cmds = null)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case OblivionMod_FieldIndex.GameSettings:
                    GroupCommon.Clear(obj.GameSettings, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Globals:
                    GroupCommon.Clear(obj.Globals, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Classes:
                    GroupCommon.Clear(obj.Classes, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Factions:
                    GroupCommon.Clear(obj.Factions, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    GroupCommon.Clear(obj.Hairs, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    GroupCommon.Clear(obj.Eyes, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Races:
                    GroupCommon.Clear(obj.Races, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    GroupCommon.Clear(obj.Sounds, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Skills:
                    GroupCommon.Clear(obj.Skills, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.MagicEffects:
                    GroupCommon.Clear(obj.MagicEffects, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Scripts:
                    GroupCommon.Clear(obj.Scripts, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.LandTextures:
                    GroupCommon.Clear(obj.LandTextures, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Enchantments:
                    GroupCommon.Clear(obj.Enchantments, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Spells:
                    GroupCommon.Clear(obj.Spells, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Birthsigns:
                    GroupCommon.Clear(obj.Birthsigns, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Activators:
                    GroupCommon.Clear(obj.Activators, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    GroupCommon.Clear(obj.AlchemicalApparatus, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Armors:
                    GroupCommon.Clear(obj.Armors, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Books:
                    GroupCommon.Clear(obj.Books, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Clothes:
                    GroupCommon.Clear(obj.Clothes, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Containers:
                    GroupCommon.Clear(obj.Containers, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Doors:
                    GroupCommon.Clear(obj.Doors, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Ingredients:
                    GroupCommon.Clear(obj.Ingredients, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Lights:
                    GroupCommon.Clear(obj.Lights, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Miscellaneous:
                    GroupCommon.Clear(obj.Miscellaneous, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Statics:
                    GroupCommon.Clear(obj.Statics, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Grasses:
                    GroupCommon.Clear(obj.Grasses, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Trees:
                    GroupCommon.Clear(obj.Trees, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Flora:
                    GroupCommon.Clear(obj.Flora, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Furnature:
                    GroupCommon.Clear(obj.Furnature, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Weapons:
                    GroupCommon.Clear(obj.Weapons, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.Ammo:
                    GroupCommon.Clear(obj.Ammo, cmds.ToUnsetParams());
                    break;
                case OblivionMod_FieldIndex.NPCs:
                    GroupCommon.Clear(obj.NPCs, cmds.ToUnsetParams());
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IOblivionMod obj)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                    return true;
                case OblivionMod_FieldIndex.TES4:
                    return obj.TES4_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IOblivionModGetter obj)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return obj.TES4;
                case OblivionMod_FieldIndex.GameSettings:
                    return obj.GameSettings;
                case OblivionMod_FieldIndex.Globals:
                    return obj.Globals;
                case OblivionMod_FieldIndex.Classes:
                    return obj.Classes;
                case OblivionMod_FieldIndex.Factions:
                    return obj.Factions;
                case OblivionMod_FieldIndex.Hairs:
                    return obj.Hairs;
                case OblivionMod_FieldIndex.Eyes:
                    return obj.Eyes;
                case OblivionMod_FieldIndex.Races:
                    return obj.Races;
                case OblivionMod_FieldIndex.Sounds:
                    return obj.Sounds;
                case OblivionMod_FieldIndex.Skills:
                    return obj.Skills;
                case OblivionMod_FieldIndex.MagicEffects:
                    return obj.MagicEffects;
                case OblivionMod_FieldIndex.Scripts:
                    return obj.Scripts;
                case OblivionMod_FieldIndex.LandTextures:
                    return obj.LandTextures;
                case OblivionMod_FieldIndex.Enchantments:
                    return obj.Enchantments;
                case OblivionMod_FieldIndex.Spells:
                    return obj.Spells;
                case OblivionMod_FieldIndex.Birthsigns:
                    return obj.Birthsigns;
                case OblivionMod_FieldIndex.Activators:
                    return obj.Activators;
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    return obj.AlchemicalApparatus;
                case OblivionMod_FieldIndex.Armors:
                    return obj.Armors;
                case OblivionMod_FieldIndex.Books:
                    return obj.Books;
                case OblivionMod_FieldIndex.Clothes:
                    return obj.Clothes;
                case OblivionMod_FieldIndex.Containers:
                    return obj.Containers;
                case OblivionMod_FieldIndex.Doors:
                    return obj.Doors;
                case OblivionMod_FieldIndex.Ingredients:
                    return obj.Ingredients;
                case OblivionMod_FieldIndex.Lights:
                    return obj.Lights;
                case OblivionMod_FieldIndex.Miscellaneous:
                    return obj.Miscellaneous;
                case OblivionMod_FieldIndex.Statics:
                    return obj.Statics;
                case OblivionMod_FieldIndex.Grasses:
                    return obj.Grasses;
                case OblivionMod_FieldIndex.Trees:
                    return obj.Trees;
                case OblivionMod_FieldIndex.Flora:
                    return obj.Flora;
                case OblivionMod_FieldIndex.Furnature:
                    return obj.Furnature;
                case OblivionMod_FieldIndex.Weapons:
                    return obj.Weapons;
                case OblivionMod_FieldIndex.Ammo:
                    return obj.Ammo;
                case OblivionMod_FieldIndex.NPCs:
                    return obj.NPCs;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IOblivionMod item,
            NotifyingUnsetParameters cmds = null)
        {
        }

        public static OblivionMod_Mask<bool> GetEqualsMask(
            this IOblivionModGetter item,
            IOblivionModGetter rhs)
        {
            var ret = new OblivionMod_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IOblivionModGetter item,
            IOblivionModGetter rhs,
            OblivionMod_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.TES4 = item.TES4_Property.LoquiEqualsHelper(rhs.TES4_Property, (loqLhs, loqRhs) => TES4Common.GetEqualsMask(loqLhs, loqRhs));
            ret.GameSettings = new MaskItem<bool, Group_Mask<bool>>();
            ret.GameSettings.Specific = GroupCommon.GetEqualsMask(item.GameSettings, rhs.GameSettings);
            ret.GameSettings.Overall = ret.GameSettings.Specific.AllEqual((b) => b);
            ret.Globals = new MaskItem<bool, Group_Mask<bool>>();
            ret.Globals.Specific = GroupCommon.GetEqualsMask(item.Globals, rhs.Globals);
            ret.Globals.Overall = ret.Globals.Specific.AllEqual((b) => b);
            ret.Classes = new MaskItem<bool, Group_Mask<bool>>();
            ret.Classes.Specific = GroupCommon.GetEqualsMask(item.Classes, rhs.Classes);
            ret.Classes.Overall = ret.Classes.Specific.AllEqual((b) => b);
            ret.Factions = new MaskItem<bool, Group_Mask<bool>>();
            ret.Factions.Specific = GroupCommon.GetEqualsMask(item.Factions, rhs.Factions);
            ret.Factions.Overall = ret.Factions.Specific.AllEqual((b) => b);
            ret.Hairs = new MaskItem<bool, Group_Mask<bool>>();
            ret.Hairs.Specific = GroupCommon.GetEqualsMask(item.Hairs, rhs.Hairs);
            ret.Hairs.Overall = ret.Hairs.Specific.AllEqual((b) => b);
            ret.Eyes = new MaskItem<bool, Group_Mask<bool>>();
            ret.Eyes.Specific = GroupCommon.GetEqualsMask(item.Eyes, rhs.Eyes);
            ret.Eyes.Overall = ret.Eyes.Specific.AllEqual((b) => b);
            ret.Races = new MaskItem<bool, Group_Mask<bool>>();
            ret.Races.Specific = GroupCommon.GetEqualsMask(item.Races, rhs.Races);
            ret.Races.Overall = ret.Races.Specific.AllEqual((b) => b);
            ret.Sounds = new MaskItem<bool, Group_Mask<bool>>();
            ret.Sounds.Specific = GroupCommon.GetEqualsMask(item.Sounds, rhs.Sounds);
            ret.Sounds.Overall = ret.Sounds.Specific.AllEqual((b) => b);
            ret.Skills = new MaskItem<bool, Group_Mask<bool>>();
            ret.Skills.Specific = GroupCommon.GetEqualsMask(item.Skills, rhs.Skills);
            ret.Skills.Overall = ret.Skills.Specific.AllEqual((b) => b);
            ret.MagicEffects = new MaskItem<bool, Group_Mask<bool>>();
            ret.MagicEffects.Specific = GroupCommon.GetEqualsMask(item.MagicEffects, rhs.MagicEffects);
            ret.MagicEffects.Overall = ret.MagicEffects.Specific.AllEqual((b) => b);
            ret.Scripts = new MaskItem<bool, Group_Mask<bool>>();
            ret.Scripts.Specific = GroupCommon.GetEqualsMask(item.Scripts, rhs.Scripts);
            ret.Scripts.Overall = ret.Scripts.Specific.AllEqual((b) => b);
            ret.LandTextures = new MaskItem<bool, Group_Mask<bool>>();
            ret.LandTextures.Specific = GroupCommon.GetEqualsMask(item.LandTextures, rhs.LandTextures);
            ret.LandTextures.Overall = ret.LandTextures.Specific.AllEqual((b) => b);
            ret.Enchantments = new MaskItem<bool, Group_Mask<bool>>();
            ret.Enchantments.Specific = GroupCommon.GetEqualsMask(item.Enchantments, rhs.Enchantments);
            ret.Enchantments.Overall = ret.Enchantments.Specific.AllEqual((b) => b);
            ret.Spells = new MaskItem<bool, Group_Mask<bool>>();
            ret.Spells.Specific = GroupCommon.GetEqualsMask(item.Spells, rhs.Spells);
            ret.Spells.Overall = ret.Spells.Specific.AllEqual((b) => b);
            ret.Birthsigns = new MaskItem<bool, Group_Mask<bool>>();
            ret.Birthsigns.Specific = GroupCommon.GetEqualsMask(item.Birthsigns, rhs.Birthsigns);
            ret.Birthsigns.Overall = ret.Birthsigns.Specific.AllEqual((b) => b);
            ret.Activators = new MaskItem<bool, Group_Mask<bool>>();
            ret.Activators.Specific = GroupCommon.GetEqualsMask(item.Activators, rhs.Activators);
            ret.Activators.Overall = ret.Activators.Specific.AllEqual((b) => b);
            ret.AlchemicalApparatus = new MaskItem<bool, Group_Mask<bool>>();
            ret.AlchemicalApparatus.Specific = GroupCommon.GetEqualsMask(item.AlchemicalApparatus, rhs.AlchemicalApparatus);
            ret.AlchemicalApparatus.Overall = ret.AlchemicalApparatus.Specific.AllEqual((b) => b);
            ret.Armors = new MaskItem<bool, Group_Mask<bool>>();
            ret.Armors.Specific = GroupCommon.GetEqualsMask(item.Armors, rhs.Armors);
            ret.Armors.Overall = ret.Armors.Specific.AllEqual((b) => b);
            ret.Books = new MaskItem<bool, Group_Mask<bool>>();
            ret.Books.Specific = GroupCommon.GetEqualsMask(item.Books, rhs.Books);
            ret.Books.Overall = ret.Books.Specific.AllEqual((b) => b);
            ret.Clothes = new MaskItem<bool, Group_Mask<bool>>();
            ret.Clothes.Specific = GroupCommon.GetEqualsMask(item.Clothes, rhs.Clothes);
            ret.Clothes.Overall = ret.Clothes.Specific.AllEqual((b) => b);
            ret.Containers = new MaskItem<bool, Group_Mask<bool>>();
            ret.Containers.Specific = GroupCommon.GetEqualsMask(item.Containers, rhs.Containers);
            ret.Containers.Overall = ret.Containers.Specific.AllEqual((b) => b);
            ret.Doors = new MaskItem<bool, Group_Mask<bool>>();
            ret.Doors.Specific = GroupCommon.GetEqualsMask(item.Doors, rhs.Doors);
            ret.Doors.Overall = ret.Doors.Specific.AllEqual((b) => b);
            ret.Ingredients = new MaskItem<bool, Group_Mask<bool>>();
            ret.Ingredients.Specific = GroupCommon.GetEqualsMask(item.Ingredients, rhs.Ingredients);
            ret.Ingredients.Overall = ret.Ingredients.Specific.AllEqual((b) => b);
            ret.Lights = new MaskItem<bool, Group_Mask<bool>>();
            ret.Lights.Specific = GroupCommon.GetEqualsMask(item.Lights, rhs.Lights);
            ret.Lights.Overall = ret.Lights.Specific.AllEqual((b) => b);
            ret.Miscellaneous = new MaskItem<bool, Group_Mask<bool>>();
            ret.Miscellaneous.Specific = GroupCommon.GetEqualsMask(item.Miscellaneous, rhs.Miscellaneous);
            ret.Miscellaneous.Overall = ret.Miscellaneous.Specific.AllEqual((b) => b);
            ret.Statics = new MaskItem<bool, Group_Mask<bool>>();
            ret.Statics.Specific = GroupCommon.GetEqualsMask(item.Statics, rhs.Statics);
            ret.Statics.Overall = ret.Statics.Specific.AllEqual((b) => b);
            ret.Grasses = new MaskItem<bool, Group_Mask<bool>>();
            ret.Grasses.Specific = GroupCommon.GetEqualsMask(item.Grasses, rhs.Grasses);
            ret.Grasses.Overall = ret.Grasses.Specific.AllEqual((b) => b);
            ret.Trees = new MaskItem<bool, Group_Mask<bool>>();
            ret.Trees.Specific = GroupCommon.GetEqualsMask(item.Trees, rhs.Trees);
            ret.Trees.Overall = ret.Trees.Specific.AllEqual((b) => b);
            ret.Flora = new MaskItem<bool, Group_Mask<bool>>();
            ret.Flora.Specific = GroupCommon.GetEqualsMask(item.Flora, rhs.Flora);
            ret.Flora.Overall = ret.Flora.Specific.AllEqual((b) => b);
            ret.Furnature = new MaskItem<bool, Group_Mask<bool>>();
            ret.Furnature.Specific = GroupCommon.GetEqualsMask(item.Furnature, rhs.Furnature);
            ret.Furnature.Overall = ret.Furnature.Specific.AllEqual((b) => b);
            ret.Weapons = new MaskItem<bool, Group_Mask<bool>>();
            ret.Weapons.Specific = GroupCommon.GetEqualsMask(item.Weapons, rhs.Weapons);
            ret.Weapons.Overall = ret.Weapons.Specific.AllEqual((b) => b);
            ret.Ammo = new MaskItem<bool, Group_Mask<bool>>();
            ret.Ammo.Specific = GroupCommon.GetEqualsMask(item.Ammo, rhs.Ammo);
            ret.Ammo.Overall = ret.Ammo.Specific.AllEqual((b) => b);
            ret.NPCs = new MaskItem<bool, Group_Mask<bool>>();
            ret.NPCs.Specific = GroupCommon.GetEqualsMask(item.NPCs, rhs.NPCs);
            ret.NPCs.Overall = ret.NPCs.Specific.AllEqual((b) => b);
        }

        public static string ToString(
            this IOblivionModGetter item,
            string name = null,
            OblivionMod_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IOblivionModGetter item,
            FileGeneration fg,
            string name = null,
            OblivionMod_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(OblivionMod)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(OblivionMod)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TES4?.Overall ?? true)
                {
                    item.TES4?.ToString(fg, "TES4");
                }
                if (printMask?.GameSettings?.Overall ?? true)
                {
                    item.GameSettings?.ToString(fg, "GameSettings");
                }
                if (printMask?.Globals?.Overall ?? true)
                {
                    item.Globals?.ToString(fg, "Globals");
                }
                if (printMask?.Classes?.Overall ?? true)
                {
                    item.Classes?.ToString(fg, "Classes");
                }
                if (printMask?.Factions?.Overall ?? true)
                {
                    item.Factions?.ToString(fg, "Factions");
                }
                if (printMask?.Hairs?.Overall ?? true)
                {
                    item.Hairs?.ToString(fg, "Hairs");
                }
                if (printMask?.Eyes?.Overall ?? true)
                {
                    item.Eyes?.ToString(fg, "Eyes");
                }
                if (printMask?.Races?.Overall ?? true)
                {
                    item.Races?.ToString(fg, "Races");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    item.Sounds?.ToString(fg, "Sounds");
                }
                if (printMask?.Skills?.Overall ?? true)
                {
                    item.Skills?.ToString(fg, "Skills");
                }
                if (printMask?.MagicEffects?.Overall ?? true)
                {
                    item.MagicEffects?.ToString(fg, "MagicEffects");
                }
                if (printMask?.Scripts?.Overall ?? true)
                {
                    item.Scripts?.ToString(fg, "Scripts");
                }
                if (printMask?.LandTextures?.Overall ?? true)
                {
                    item.LandTextures?.ToString(fg, "LandTextures");
                }
                if (printMask?.Enchantments?.Overall ?? true)
                {
                    item.Enchantments?.ToString(fg, "Enchantments");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    item.Spells?.ToString(fg, "Spells");
                }
                if (printMask?.Birthsigns?.Overall ?? true)
                {
                    item.Birthsigns?.ToString(fg, "Birthsigns");
                }
                if (printMask?.Activators?.Overall ?? true)
                {
                    item.Activators?.ToString(fg, "Activators");
                }
                if (printMask?.AlchemicalApparatus?.Overall ?? true)
                {
                    item.AlchemicalApparatus?.ToString(fg, "AlchemicalApparatus");
                }
                if (printMask?.Armors?.Overall ?? true)
                {
                    item.Armors?.ToString(fg, "Armors");
                }
                if (printMask?.Books?.Overall ?? true)
                {
                    item.Books?.ToString(fg, "Books");
                }
                if (printMask?.Clothes?.Overall ?? true)
                {
                    item.Clothes?.ToString(fg, "Clothes");
                }
                if (printMask?.Containers?.Overall ?? true)
                {
                    item.Containers?.ToString(fg, "Containers");
                }
                if (printMask?.Doors?.Overall ?? true)
                {
                    item.Doors?.ToString(fg, "Doors");
                }
                if (printMask?.Ingredients?.Overall ?? true)
                {
                    item.Ingredients?.ToString(fg, "Ingredients");
                }
                if (printMask?.Lights?.Overall ?? true)
                {
                    item.Lights?.ToString(fg, "Lights");
                }
                if (printMask?.Miscellaneous?.Overall ?? true)
                {
                    item.Miscellaneous?.ToString(fg, "Miscellaneous");
                }
                if (printMask?.Statics?.Overall ?? true)
                {
                    item.Statics?.ToString(fg, "Statics");
                }
                if (printMask?.Grasses?.Overall ?? true)
                {
                    item.Grasses?.ToString(fg, "Grasses");
                }
                if (printMask?.Trees?.Overall ?? true)
                {
                    item.Trees?.ToString(fg, "Trees");
                }
                if (printMask?.Flora?.Overall ?? true)
                {
                    item.Flora?.ToString(fg, "Flora");
                }
                if (printMask?.Furnature?.Overall ?? true)
                {
                    item.Furnature?.ToString(fg, "Furnature");
                }
                if (printMask?.Weapons?.Overall ?? true)
                {
                    item.Weapons?.ToString(fg, "Weapons");
                }
                if (printMask?.Ammo?.Overall ?? true)
                {
                    item.Ammo?.ToString(fg, "Ammo");
                }
                if (printMask?.NPCs?.Overall ?? true)
                {
                    item.NPCs?.ToString(fg, "NPCs");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IOblivionModGetter item,
            OblivionMod_Mask<bool?> checkMask)
        {
            if (checkMask.TES4.Overall.HasValue && checkMask.TES4.Overall.Value != item.TES4_Property.HasBeenSet) return false;
            if (checkMask.TES4.Specific != null && (item.TES4_Property.Item == null || !item.TES4_Property.Item.HasBeenSet(checkMask.TES4.Specific))) return false;
            return true;
        }

        public static OblivionMod_Mask<bool> GetHasBeenSetMask(IOblivionModGetter item)
        {
            var ret = new OblivionMod_Mask<bool>();
            ret.TES4 = new MaskItem<bool, TES4_Mask<bool>>(item.TES4_Property.HasBeenSet, TES4Common.GetHasBeenSetMask(item.TES4_Property.Item));
            ret.GameSettings = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.GameSettings));
            ret.Globals = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Globals));
            ret.Classes = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Classes));
            ret.Factions = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Factions));
            ret.Hairs = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Hairs));
            ret.Eyes = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Eyes));
            ret.Races = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Races));
            ret.Sounds = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Sounds));
            ret.Skills = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Skills));
            ret.MagicEffects = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.MagicEffects));
            ret.Scripts = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Scripts));
            ret.LandTextures = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.LandTextures));
            ret.Enchantments = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Enchantments));
            ret.Spells = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Spells));
            ret.Birthsigns = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Birthsigns));
            ret.Activators = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Activators));
            ret.AlchemicalApparatus = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.AlchemicalApparatus));
            ret.Armors = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Armors));
            ret.Books = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Books));
            ret.Clothes = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Clothes));
            ret.Containers = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Containers));
            ret.Doors = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Doors));
            ret.Ingredients = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Ingredients));
            ret.Lights = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Lights));
            ret.Miscellaneous = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Miscellaneous));
            ret.Statics = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Statics));
            ret.Grasses = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Grasses));
            ret.Trees = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Trees));
            ret.Flora = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Flora));
            ret.Furnature = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Furnature));
            ret.Weapons = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Weapons));
            ret.Ammo = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.Ammo));
            ret.NPCs = new MaskItem<bool, Group_Mask<bool>>(true, GroupCommon.GetHasBeenSetMask(item.NPCs));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IOblivionModGetter item,
            bool doMasks,
            out OblivionMod_ErrorMask errorMask,
            string name = null)
        {
            OblivionMod_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new OblivionMod_ErrorMask()) : default(Func<OblivionMod_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IOblivionModGetter item,
            Func<OblivionMod_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.OblivionMod"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.OblivionMod");
                    }
                    if (item.TES4_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<TES4, TES4_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.TES4_Property,
                            name: nameof(item.TES4),
                            fieldIndex: (int)OblivionMod_FieldIndex.TES4,
                            errorMask: errorMask);
                    }
                    LoquiXmlTranslation<Group<GameSetting>, Group_ErrorMask<GameSetting_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.GameSettings,
                        name: nameof(item.GameSettings),
                        fieldIndex: (int)OblivionMod_FieldIndex.GameSettings,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Global>, Group_ErrorMask<Global_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Globals,
                        name: nameof(item.Globals),
                        fieldIndex: (int)OblivionMod_FieldIndex.Globals,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Class>, Group_ErrorMask<Class_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Classes,
                        name: nameof(item.Classes),
                        fieldIndex: (int)OblivionMod_FieldIndex.Classes,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Faction>, Group_ErrorMask<Faction_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Factions,
                        name: nameof(item.Factions),
                        fieldIndex: (int)OblivionMod_FieldIndex.Factions,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Hair>, Group_ErrorMask<Hair_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Hairs,
                        name: nameof(item.Hairs),
                        fieldIndex: (int)OblivionMod_FieldIndex.Hairs,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Eye>, Group_ErrorMask<Eye_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Eyes,
                        name: nameof(item.Eyes),
                        fieldIndex: (int)OblivionMod_FieldIndex.Eyes,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Race>, Group_ErrorMask<Race_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Races,
                        name: nameof(item.Races),
                        fieldIndex: (int)OblivionMod_FieldIndex.Races,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Sound>, Group_ErrorMask<Sound_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Sounds,
                        name: nameof(item.Sounds),
                        fieldIndex: (int)OblivionMod_FieldIndex.Sounds,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<SkillRecord>, Group_ErrorMask<SkillRecord_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Skills,
                        name: nameof(item.Skills),
                        fieldIndex: (int)OblivionMod_FieldIndex.Skills,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<MagicEffect>, Group_ErrorMask<MagicEffect_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.MagicEffects,
                        name: nameof(item.MagicEffects),
                        fieldIndex: (int)OblivionMod_FieldIndex.MagicEffects,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Script>, Group_ErrorMask<Script_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Scripts,
                        name: nameof(item.Scripts),
                        fieldIndex: (int)OblivionMod_FieldIndex.Scripts,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<LandTexture>, Group_ErrorMask<LandTexture_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.LandTextures,
                        name: nameof(item.LandTextures),
                        fieldIndex: (int)OblivionMod_FieldIndex.LandTextures,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Enchantment>, Group_ErrorMask<Enchantment_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Enchantments,
                        name: nameof(item.Enchantments),
                        fieldIndex: (int)OblivionMod_FieldIndex.Enchantments,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<SpellUnleveled>, Group_ErrorMask<SpellUnleveled_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Spells,
                        name: nameof(item.Spells),
                        fieldIndex: (int)OblivionMod_FieldIndex.Spells,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Birthsign>, Group_ErrorMask<Birthsign_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Birthsigns,
                        name: nameof(item.Birthsigns),
                        fieldIndex: (int)OblivionMod_FieldIndex.Birthsigns,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Activator>, Group_ErrorMask<Activator_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Activators,
                        name: nameof(item.Activators),
                        fieldIndex: (int)OblivionMod_FieldIndex.Activators,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<AlchemicalApparatus>, Group_ErrorMask<AlchemicalApparatus_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.AlchemicalApparatus,
                        name: nameof(item.AlchemicalApparatus),
                        fieldIndex: (int)OblivionMod_FieldIndex.AlchemicalApparatus,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Armor>, Group_ErrorMask<Armor_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Armors,
                        name: nameof(item.Armors),
                        fieldIndex: (int)OblivionMod_FieldIndex.Armors,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Book>, Group_ErrorMask<Book_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Books,
                        name: nameof(item.Books),
                        fieldIndex: (int)OblivionMod_FieldIndex.Books,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Clothing>, Group_ErrorMask<Clothing_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Clothes,
                        name: nameof(item.Clothes),
                        fieldIndex: (int)OblivionMod_FieldIndex.Clothes,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Container>, Group_ErrorMask<Container_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Containers,
                        name: nameof(item.Containers),
                        fieldIndex: (int)OblivionMod_FieldIndex.Containers,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Door>, Group_ErrorMask<Door_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Doors,
                        name: nameof(item.Doors),
                        fieldIndex: (int)OblivionMod_FieldIndex.Doors,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Ingredient>, Group_ErrorMask<Ingredient_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Ingredients,
                        name: nameof(item.Ingredients),
                        fieldIndex: (int)OblivionMod_FieldIndex.Ingredients,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Light>, Group_ErrorMask<Light_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Lights,
                        name: nameof(item.Lights),
                        fieldIndex: (int)OblivionMod_FieldIndex.Lights,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Miscellaneous>, Group_ErrorMask<Miscellaneous_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Miscellaneous,
                        name: nameof(item.Miscellaneous),
                        fieldIndex: (int)OblivionMod_FieldIndex.Miscellaneous,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Static>, Group_ErrorMask<Static_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Statics,
                        name: nameof(item.Statics),
                        fieldIndex: (int)OblivionMod_FieldIndex.Statics,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Grass>, Group_ErrorMask<Grass_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Grasses,
                        name: nameof(item.Grasses),
                        fieldIndex: (int)OblivionMod_FieldIndex.Grasses,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Tree>, Group_ErrorMask<Tree_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Trees,
                        name: nameof(item.Trees),
                        fieldIndex: (int)OblivionMod_FieldIndex.Trees,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Flora>, Group_ErrorMask<Flora_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Flora,
                        name: nameof(item.Flora),
                        fieldIndex: (int)OblivionMod_FieldIndex.Flora,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Furnature>, Group_ErrorMask<Furnature_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Furnature,
                        name: nameof(item.Furnature),
                        fieldIndex: (int)OblivionMod_FieldIndex.Furnature,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Weapon>, Group_ErrorMask<Weapon_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Weapons,
                        name: nameof(item.Weapons),
                        fieldIndex: (int)OblivionMod_FieldIndex.Weapons,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<Ammo>, Group_ErrorMask<Ammo_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.Ammo,
                        name: nameof(item.Ammo),
                        fieldIndex: (int)OblivionMod_FieldIndex.Ammo,
                        errorMask: errorMask);
                    LoquiXmlTranslation<Group<NPC>, Group_ErrorMask<NPC_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.NPCs,
                        name: nameof(item.NPCs),
                        fieldIndex: (int)OblivionMod_FieldIndex.NPCs,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            OblivionMod item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out OblivionMod_ErrorMask errorMask)
        {
            OblivionMod_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new OblivionMod_ErrorMask()) : default(Func<OblivionMod_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            OblivionMod item,
            RecordTypeConverter recordTypeConverter,
            Func<OblivionMod_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            OblivionMod item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<OblivionMod_ErrorMask> errorMask)
        {
            LoquiBinaryTranslation<TES4, TES4_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.TES4_Property,
                fieldIndex: (int)OblivionMod_FieldIndex.TES4,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<GameSetting>, Group_ErrorMask<GameSetting_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.GameSettings,
                fieldIndex: (int)OblivionMod_FieldIndex.GameSettings,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Global>, Group_ErrorMask<Global_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Globals,
                fieldIndex: (int)OblivionMod_FieldIndex.Globals,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Class>, Group_ErrorMask<Class_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Classes,
                fieldIndex: (int)OblivionMod_FieldIndex.Classes,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Faction>, Group_ErrorMask<Faction_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Factions,
                fieldIndex: (int)OblivionMod_FieldIndex.Factions,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Hair>, Group_ErrorMask<Hair_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Hairs,
                fieldIndex: (int)OblivionMod_FieldIndex.Hairs,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Eye>, Group_ErrorMask<Eye_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Eyes,
                fieldIndex: (int)OblivionMod_FieldIndex.Eyes,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Race>, Group_ErrorMask<Race_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Races,
                fieldIndex: (int)OblivionMod_FieldIndex.Races,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Sound>, Group_ErrorMask<Sound_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Sounds,
                fieldIndex: (int)OblivionMod_FieldIndex.Sounds,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<SkillRecord>, Group_ErrorMask<SkillRecord_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Skills,
                fieldIndex: (int)OblivionMod_FieldIndex.Skills,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<MagicEffect>, Group_ErrorMask<MagicEffect_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.MagicEffects,
                fieldIndex: (int)OblivionMod_FieldIndex.MagicEffects,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Script>, Group_ErrorMask<Script_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Scripts,
                fieldIndex: (int)OblivionMod_FieldIndex.Scripts,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<LandTexture>, Group_ErrorMask<LandTexture_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.LandTextures,
                fieldIndex: (int)OblivionMod_FieldIndex.LandTextures,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Enchantment>, Group_ErrorMask<Enchantment_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Enchantments,
                fieldIndex: (int)OblivionMod_FieldIndex.Enchantments,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<SpellUnleveled>, Group_ErrorMask<SpellUnleveled_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Spells,
                fieldIndex: (int)OblivionMod_FieldIndex.Spells,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Birthsign>, Group_ErrorMask<Birthsign_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Birthsigns,
                fieldIndex: (int)OblivionMod_FieldIndex.Birthsigns,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Activator>, Group_ErrorMask<Activator_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Activators,
                fieldIndex: (int)OblivionMod_FieldIndex.Activators,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<AlchemicalApparatus>, Group_ErrorMask<AlchemicalApparatus_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.AlchemicalApparatus,
                fieldIndex: (int)OblivionMod_FieldIndex.AlchemicalApparatus,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Armor>, Group_ErrorMask<Armor_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Armors,
                fieldIndex: (int)OblivionMod_FieldIndex.Armors,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Book>, Group_ErrorMask<Book_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Books,
                fieldIndex: (int)OblivionMod_FieldIndex.Books,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Clothing>, Group_ErrorMask<Clothing_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Clothes,
                fieldIndex: (int)OblivionMod_FieldIndex.Clothes,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Container>, Group_ErrorMask<Container_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Containers,
                fieldIndex: (int)OblivionMod_FieldIndex.Containers,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Door>, Group_ErrorMask<Door_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Doors,
                fieldIndex: (int)OblivionMod_FieldIndex.Doors,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Ingredient>, Group_ErrorMask<Ingredient_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Ingredients,
                fieldIndex: (int)OblivionMod_FieldIndex.Ingredients,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Light>, Group_ErrorMask<Light_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Lights,
                fieldIndex: (int)OblivionMod_FieldIndex.Lights,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Miscellaneous>, Group_ErrorMask<Miscellaneous_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Miscellaneous,
                fieldIndex: (int)OblivionMod_FieldIndex.Miscellaneous,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Static>, Group_ErrorMask<Static_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Statics,
                fieldIndex: (int)OblivionMod_FieldIndex.Statics,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Grass>, Group_ErrorMask<Grass_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Grasses,
                fieldIndex: (int)OblivionMod_FieldIndex.Grasses,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Tree>, Group_ErrorMask<Tree_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Trees,
                fieldIndex: (int)OblivionMod_FieldIndex.Trees,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Flora>, Group_ErrorMask<Flora_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Flora,
                fieldIndex: (int)OblivionMod_FieldIndex.Flora,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Furnature>, Group_ErrorMask<Furnature_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Furnature,
                fieldIndex: (int)OblivionMod_FieldIndex.Furnature,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Weapon>, Group_ErrorMask<Weapon_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Weapons,
                fieldIndex: (int)OblivionMod_FieldIndex.Weapons,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Ammo>, Group_ErrorMask<Ammo_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Ammo,
                fieldIndex: (int)OblivionMod_FieldIndex.Ammo,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<NPC>, Group_ErrorMask<NPC_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.NPCs,
                fieldIndex: (int)OblivionMod_FieldIndex.NPCs,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class OblivionMod_Mask<T> : IMask<T>, IEquatable<OblivionMod_Mask<T>>
    {
        #region Ctors
        public OblivionMod_Mask()
        {
        }

        public OblivionMod_Mask(T initialValue)
        {
            this.TES4 = new MaskItem<T, TES4_Mask<T>>(initialValue, new TES4_Mask<T>(initialValue));
            this.GameSettings = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Globals = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Classes = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Factions = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Hairs = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Eyes = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Races = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Sounds = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Skills = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.MagicEffects = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Scripts = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.LandTextures = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Enchantments = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Spells = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Birthsigns = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Activators = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.AlchemicalApparatus = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Armors = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Books = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Clothes = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Containers = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Doors = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Ingredients = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Lights = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Miscellaneous = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Statics = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Grasses = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Trees = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Flora = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Furnature = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Weapons = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Ammo = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.NPCs = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public MaskItem<T, TES4_Mask<T>> TES4 { get; set; }
        public MaskItem<T, Group_Mask<T>> GameSettings { get; set; }
        public MaskItem<T, Group_Mask<T>> Globals { get; set; }
        public MaskItem<T, Group_Mask<T>> Classes { get; set; }
        public MaskItem<T, Group_Mask<T>> Factions { get; set; }
        public MaskItem<T, Group_Mask<T>> Hairs { get; set; }
        public MaskItem<T, Group_Mask<T>> Eyes { get; set; }
        public MaskItem<T, Group_Mask<T>> Races { get; set; }
        public MaskItem<T, Group_Mask<T>> Sounds { get; set; }
        public MaskItem<T, Group_Mask<T>> Skills { get; set; }
        public MaskItem<T, Group_Mask<T>> MagicEffects { get; set; }
        public MaskItem<T, Group_Mask<T>> Scripts { get; set; }
        public MaskItem<T, Group_Mask<T>> LandTextures { get; set; }
        public MaskItem<T, Group_Mask<T>> Enchantments { get; set; }
        public MaskItem<T, Group_Mask<T>> Spells { get; set; }
        public MaskItem<T, Group_Mask<T>> Birthsigns { get; set; }
        public MaskItem<T, Group_Mask<T>> Activators { get; set; }
        public MaskItem<T, Group_Mask<T>> AlchemicalApparatus { get; set; }
        public MaskItem<T, Group_Mask<T>> Armors { get; set; }
        public MaskItem<T, Group_Mask<T>> Books { get; set; }
        public MaskItem<T, Group_Mask<T>> Clothes { get; set; }
        public MaskItem<T, Group_Mask<T>> Containers { get; set; }
        public MaskItem<T, Group_Mask<T>> Doors { get; set; }
        public MaskItem<T, Group_Mask<T>> Ingredients { get; set; }
        public MaskItem<T, Group_Mask<T>> Lights { get; set; }
        public MaskItem<T, Group_Mask<T>> Miscellaneous { get; set; }
        public MaskItem<T, Group_Mask<T>> Statics { get; set; }
        public MaskItem<T, Group_Mask<T>> Grasses { get; set; }
        public MaskItem<T, Group_Mask<T>> Trees { get; set; }
        public MaskItem<T, Group_Mask<T>> Flora { get; set; }
        public MaskItem<T, Group_Mask<T>> Furnature { get; set; }
        public MaskItem<T, Group_Mask<T>> Weapons { get; set; }
        public MaskItem<T, Group_Mask<T>> Ammo { get; set; }
        public MaskItem<T, Group_Mask<T>> NPCs { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is OblivionMod_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(OblivionMod_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.TES4, rhs.TES4)) return false;
            if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
            if (!object.Equals(this.Globals, rhs.Globals)) return false;
            if (!object.Equals(this.Classes, rhs.Classes)) return false;
            if (!object.Equals(this.Factions, rhs.Factions)) return false;
            if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
            if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
            if (!object.Equals(this.Races, rhs.Races)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            if (!object.Equals(this.Skills, rhs.Skills)) return false;
            if (!object.Equals(this.MagicEffects, rhs.MagicEffects)) return false;
            if (!object.Equals(this.Scripts, rhs.Scripts)) return false;
            if (!object.Equals(this.LandTextures, rhs.LandTextures)) return false;
            if (!object.Equals(this.Enchantments, rhs.Enchantments)) return false;
            if (!object.Equals(this.Spells, rhs.Spells)) return false;
            if (!object.Equals(this.Birthsigns, rhs.Birthsigns)) return false;
            if (!object.Equals(this.Activators, rhs.Activators)) return false;
            if (!object.Equals(this.AlchemicalApparatus, rhs.AlchemicalApparatus)) return false;
            if (!object.Equals(this.Armors, rhs.Armors)) return false;
            if (!object.Equals(this.Books, rhs.Books)) return false;
            if (!object.Equals(this.Clothes, rhs.Clothes)) return false;
            if (!object.Equals(this.Containers, rhs.Containers)) return false;
            if (!object.Equals(this.Doors, rhs.Doors)) return false;
            if (!object.Equals(this.Ingredients, rhs.Ingredients)) return false;
            if (!object.Equals(this.Lights, rhs.Lights)) return false;
            if (!object.Equals(this.Miscellaneous, rhs.Miscellaneous)) return false;
            if (!object.Equals(this.Statics, rhs.Statics)) return false;
            if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
            if (!object.Equals(this.Trees, rhs.Trees)) return false;
            if (!object.Equals(this.Flora, rhs.Flora)) return false;
            if (!object.Equals(this.Furnature, rhs.Furnature)) return false;
            if (!object.Equals(this.Weapons, rhs.Weapons)) return false;
            if (!object.Equals(this.Ammo, rhs.Ammo)) return false;
            if (!object.Equals(this.NPCs, rhs.NPCs)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.TES4?.GetHashCode());
            ret = ret.CombineHashCode(this.GameSettings?.GetHashCode());
            ret = ret.CombineHashCode(this.Globals?.GetHashCode());
            ret = ret.CombineHashCode(this.Classes?.GetHashCode());
            ret = ret.CombineHashCode(this.Factions?.GetHashCode());
            ret = ret.CombineHashCode(this.Hairs?.GetHashCode());
            ret = ret.CombineHashCode(this.Eyes?.GetHashCode());
            ret = ret.CombineHashCode(this.Races?.GetHashCode());
            ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
            ret = ret.CombineHashCode(this.Skills?.GetHashCode());
            ret = ret.CombineHashCode(this.MagicEffects?.GetHashCode());
            ret = ret.CombineHashCode(this.Scripts?.GetHashCode());
            ret = ret.CombineHashCode(this.LandTextures?.GetHashCode());
            ret = ret.CombineHashCode(this.Enchantments?.GetHashCode());
            ret = ret.CombineHashCode(this.Spells?.GetHashCode());
            ret = ret.CombineHashCode(this.Birthsigns?.GetHashCode());
            ret = ret.CombineHashCode(this.Activators?.GetHashCode());
            ret = ret.CombineHashCode(this.AlchemicalApparatus?.GetHashCode());
            ret = ret.CombineHashCode(this.Armors?.GetHashCode());
            ret = ret.CombineHashCode(this.Books?.GetHashCode());
            ret = ret.CombineHashCode(this.Clothes?.GetHashCode());
            ret = ret.CombineHashCode(this.Containers?.GetHashCode());
            ret = ret.CombineHashCode(this.Doors?.GetHashCode());
            ret = ret.CombineHashCode(this.Ingredients?.GetHashCode());
            ret = ret.CombineHashCode(this.Lights?.GetHashCode());
            ret = ret.CombineHashCode(this.Miscellaneous?.GetHashCode());
            ret = ret.CombineHashCode(this.Statics?.GetHashCode());
            ret = ret.CombineHashCode(this.Grasses?.GetHashCode());
            ret = ret.CombineHashCode(this.Trees?.GetHashCode());
            ret = ret.CombineHashCode(this.Flora?.GetHashCode());
            ret = ret.CombineHashCode(this.Furnature?.GetHashCode());
            ret = ret.CombineHashCode(this.Weapons?.GetHashCode());
            ret = ret.CombineHashCode(this.Ammo?.GetHashCode());
            ret = ret.CombineHashCode(this.NPCs?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (TES4 != null)
            {
                if (!eval(this.TES4.Overall)) return false;
                if (this.TES4.Specific != null && !this.TES4.Specific.AllEqual(eval)) return false;
            }
            if (GameSettings != null)
            {
                if (!eval(this.GameSettings.Overall)) return false;
                if (this.GameSettings.Specific != null && !this.GameSettings.Specific.AllEqual(eval)) return false;
            }
            if (Globals != null)
            {
                if (!eval(this.Globals.Overall)) return false;
                if (this.Globals.Specific != null && !this.Globals.Specific.AllEqual(eval)) return false;
            }
            if (Classes != null)
            {
                if (!eval(this.Classes.Overall)) return false;
                if (this.Classes.Specific != null && !this.Classes.Specific.AllEqual(eval)) return false;
            }
            if (Factions != null)
            {
                if (!eval(this.Factions.Overall)) return false;
                if (this.Factions.Specific != null && !this.Factions.Specific.AllEqual(eval)) return false;
            }
            if (Hairs != null)
            {
                if (!eval(this.Hairs.Overall)) return false;
                if (this.Hairs.Specific != null && !this.Hairs.Specific.AllEqual(eval)) return false;
            }
            if (Eyes != null)
            {
                if (!eval(this.Eyes.Overall)) return false;
                if (this.Eyes.Specific != null && !this.Eyes.Specific.AllEqual(eval)) return false;
            }
            if (Races != null)
            {
                if (!eval(this.Races.Overall)) return false;
                if (this.Races.Specific != null && !this.Races.Specific.AllEqual(eval)) return false;
            }
            if (Sounds != null)
            {
                if (!eval(this.Sounds.Overall)) return false;
                if (this.Sounds.Specific != null && !this.Sounds.Specific.AllEqual(eval)) return false;
            }
            if (Skills != null)
            {
                if (!eval(this.Skills.Overall)) return false;
                if (this.Skills.Specific != null && !this.Skills.Specific.AllEqual(eval)) return false;
            }
            if (MagicEffects != null)
            {
                if (!eval(this.MagicEffects.Overall)) return false;
                if (this.MagicEffects.Specific != null && !this.MagicEffects.Specific.AllEqual(eval)) return false;
            }
            if (Scripts != null)
            {
                if (!eval(this.Scripts.Overall)) return false;
                if (this.Scripts.Specific != null && !this.Scripts.Specific.AllEqual(eval)) return false;
            }
            if (LandTextures != null)
            {
                if (!eval(this.LandTextures.Overall)) return false;
                if (this.LandTextures.Specific != null && !this.LandTextures.Specific.AllEqual(eval)) return false;
            }
            if (Enchantments != null)
            {
                if (!eval(this.Enchantments.Overall)) return false;
                if (this.Enchantments.Specific != null && !this.Enchantments.Specific.AllEqual(eval)) return false;
            }
            if (Spells != null)
            {
                if (!eval(this.Spells.Overall)) return false;
                if (this.Spells.Specific != null && !this.Spells.Specific.AllEqual(eval)) return false;
            }
            if (Birthsigns != null)
            {
                if (!eval(this.Birthsigns.Overall)) return false;
                if (this.Birthsigns.Specific != null && !this.Birthsigns.Specific.AllEqual(eval)) return false;
            }
            if (Activators != null)
            {
                if (!eval(this.Activators.Overall)) return false;
                if (this.Activators.Specific != null && !this.Activators.Specific.AllEqual(eval)) return false;
            }
            if (AlchemicalApparatus != null)
            {
                if (!eval(this.AlchemicalApparatus.Overall)) return false;
                if (this.AlchemicalApparatus.Specific != null && !this.AlchemicalApparatus.Specific.AllEqual(eval)) return false;
            }
            if (Armors != null)
            {
                if (!eval(this.Armors.Overall)) return false;
                if (this.Armors.Specific != null && !this.Armors.Specific.AllEqual(eval)) return false;
            }
            if (Books != null)
            {
                if (!eval(this.Books.Overall)) return false;
                if (this.Books.Specific != null && !this.Books.Specific.AllEqual(eval)) return false;
            }
            if (Clothes != null)
            {
                if (!eval(this.Clothes.Overall)) return false;
                if (this.Clothes.Specific != null && !this.Clothes.Specific.AllEqual(eval)) return false;
            }
            if (Containers != null)
            {
                if (!eval(this.Containers.Overall)) return false;
                if (this.Containers.Specific != null && !this.Containers.Specific.AllEqual(eval)) return false;
            }
            if (Doors != null)
            {
                if (!eval(this.Doors.Overall)) return false;
                if (this.Doors.Specific != null && !this.Doors.Specific.AllEqual(eval)) return false;
            }
            if (Ingredients != null)
            {
                if (!eval(this.Ingredients.Overall)) return false;
                if (this.Ingredients.Specific != null && !this.Ingredients.Specific.AllEqual(eval)) return false;
            }
            if (Lights != null)
            {
                if (!eval(this.Lights.Overall)) return false;
                if (this.Lights.Specific != null && !this.Lights.Specific.AllEqual(eval)) return false;
            }
            if (Miscellaneous != null)
            {
                if (!eval(this.Miscellaneous.Overall)) return false;
                if (this.Miscellaneous.Specific != null && !this.Miscellaneous.Specific.AllEqual(eval)) return false;
            }
            if (Statics != null)
            {
                if (!eval(this.Statics.Overall)) return false;
                if (this.Statics.Specific != null && !this.Statics.Specific.AllEqual(eval)) return false;
            }
            if (Grasses != null)
            {
                if (!eval(this.Grasses.Overall)) return false;
                if (this.Grasses.Specific != null && !this.Grasses.Specific.AllEqual(eval)) return false;
            }
            if (Trees != null)
            {
                if (!eval(this.Trees.Overall)) return false;
                if (this.Trees.Specific != null && !this.Trees.Specific.AllEqual(eval)) return false;
            }
            if (Flora != null)
            {
                if (!eval(this.Flora.Overall)) return false;
                if (this.Flora.Specific != null && !this.Flora.Specific.AllEqual(eval)) return false;
            }
            if (Furnature != null)
            {
                if (!eval(this.Furnature.Overall)) return false;
                if (this.Furnature.Specific != null && !this.Furnature.Specific.AllEqual(eval)) return false;
            }
            if (Weapons != null)
            {
                if (!eval(this.Weapons.Overall)) return false;
                if (this.Weapons.Specific != null && !this.Weapons.Specific.AllEqual(eval)) return false;
            }
            if (Ammo != null)
            {
                if (!eval(this.Ammo.Overall)) return false;
                if (this.Ammo.Specific != null && !this.Ammo.Specific.AllEqual(eval)) return false;
            }
            if (NPCs != null)
            {
                if (!eval(this.NPCs.Overall)) return false;
                if (this.NPCs.Specific != null && !this.NPCs.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public OblivionMod_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new OblivionMod_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(OblivionMod_Mask<R> obj, Func<T, R> eval)
        {
            if (this.TES4 != null)
            {
                obj.TES4 = new MaskItem<R, TES4_Mask<R>>();
                obj.TES4.Overall = eval(this.TES4.Overall);
                if (this.TES4.Specific != null)
                {
                    obj.TES4.Specific = this.TES4.Specific.Translate(eval);
                }
            }
            if (this.GameSettings != null)
            {
                obj.GameSettings = new MaskItem<R, Group_Mask<R>>();
                obj.GameSettings.Overall = eval(this.GameSettings.Overall);
                if (this.GameSettings.Specific != null)
                {
                    obj.GameSettings.Specific = this.GameSettings.Specific.Translate(eval);
                }
            }
            if (this.Globals != null)
            {
                obj.Globals = new MaskItem<R, Group_Mask<R>>();
                obj.Globals.Overall = eval(this.Globals.Overall);
                if (this.Globals.Specific != null)
                {
                    obj.Globals.Specific = this.Globals.Specific.Translate(eval);
                }
            }
            if (this.Classes != null)
            {
                obj.Classes = new MaskItem<R, Group_Mask<R>>();
                obj.Classes.Overall = eval(this.Classes.Overall);
                if (this.Classes.Specific != null)
                {
                    obj.Classes.Specific = this.Classes.Specific.Translate(eval);
                }
            }
            if (this.Factions != null)
            {
                obj.Factions = new MaskItem<R, Group_Mask<R>>();
                obj.Factions.Overall = eval(this.Factions.Overall);
                if (this.Factions.Specific != null)
                {
                    obj.Factions.Specific = this.Factions.Specific.Translate(eval);
                }
            }
            if (this.Hairs != null)
            {
                obj.Hairs = new MaskItem<R, Group_Mask<R>>();
                obj.Hairs.Overall = eval(this.Hairs.Overall);
                if (this.Hairs.Specific != null)
                {
                    obj.Hairs.Specific = this.Hairs.Specific.Translate(eval);
                }
            }
            if (this.Eyes != null)
            {
                obj.Eyes = new MaskItem<R, Group_Mask<R>>();
                obj.Eyes.Overall = eval(this.Eyes.Overall);
                if (this.Eyes.Specific != null)
                {
                    obj.Eyes.Specific = this.Eyes.Specific.Translate(eval);
                }
            }
            if (this.Races != null)
            {
                obj.Races = new MaskItem<R, Group_Mask<R>>();
                obj.Races.Overall = eval(this.Races.Overall);
                if (this.Races.Specific != null)
                {
                    obj.Races.Specific = this.Races.Specific.Translate(eval);
                }
            }
            if (this.Sounds != null)
            {
                obj.Sounds = new MaskItem<R, Group_Mask<R>>();
                obj.Sounds.Overall = eval(this.Sounds.Overall);
                if (this.Sounds.Specific != null)
                {
                    obj.Sounds.Specific = this.Sounds.Specific.Translate(eval);
                }
            }
            if (this.Skills != null)
            {
                obj.Skills = new MaskItem<R, Group_Mask<R>>();
                obj.Skills.Overall = eval(this.Skills.Overall);
                if (this.Skills.Specific != null)
                {
                    obj.Skills.Specific = this.Skills.Specific.Translate(eval);
                }
            }
            if (this.MagicEffects != null)
            {
                obj.MagicEffects = new MaskItem<R, Group_Mask<R>>();
                obj.MagicEffects.Overall = eval(this.MagicEffects.Overall);
                if (this.MagicEffects.Specific != null)
                {
                    obj.MagicEffects.Specific = this.MagicEffects.Specific.Translate(eval);
                }
            }
            if (this.Scripts != null)
            {
                obj.Scripts = new MaskItem<R, Group_Mask<R>>();
                obj.Scripts.Overall = eval(this.Scripts.Overall);
                if (this.Scripts.Specific != null)
                {
                    obj.Scripts.Specific = this.Scripts.Specific.Translate(eval);
                }
            }
            if (this.LandTextures != null)
            {
                obj.LandTextures = new MaskItem<R, Group_Mask<R>>();
                obj.LandTextures.Overall = eval(this.LandTextures.Overall);
                if (this.LandTextures.Specific != null)
                {
                    obj.LandTextures.Specific = this.LandTextures.Specific.Translate(eval);
                }
            }
            if (this.Enchantments != null)
            {
                obj.Enchantments = new MaskItem<R, Group_Mask<R>>();
                obj.Enchantments.Overall = eval(this.Enchantments.Overall);
                if (this.Enchantments.Specific != null)
                {
                    obj.Enchantments.Specific = this.Enchantments.Specific.Translate(eval);
                }
            }
            if (this.Spells != null)
            {
                obj.Spells = new MaskItem<R, Group_Mask<R>>();
                obj.Spells.Overall = eval(this.Spells.Overall);
                if (this.Spells.Specific != null)
                {
                    obj.Spells.Specific = this.Spells.Specific.Translate(eval);
                }
            }
            if (this.Birthsigns != null)
            {
                obj.Birthsigns = new MaskItem<R, Group_Mask<R>>();
                obj.Birthsigns.Overall = eval(this.Birthsigns.Overall);
                if (this.Birthsigns.Specific != null)
                {
                    obj.Birthsigns.Specific = this.Birthsigns.Specific.Translate(eval);
                }
            }
            if (this.Activators != null)
            {
                obj.Activators = new MaskItem<R, Group_Mask<R>>();
                obj.Activators.Overall = eval(this.Activators.Overall);
                if (this.Activators.Specific != null)
                {
                    obj.Activators.Specific = this.Activators.Specific.Translate(eval);
                }
            }
            if (this.AlchemicalApparatus != null)
            {
                obj.AlchemicalApparatus = new MaskItem<R, Group_Mask<R>>();
                obj.AlchemicalApparatus.Overall = eval(this.AlchemicalApparatus.Overall);
                if (this.AlchemicalApparatus.Specific != null)
                {
                    obj.AlchemicalApparatus.Specific = this.AlchemicalApparatus.Specific.Translate(eval);
                }
            }
            if (this.Armors != null)
            {
                obj.Armors = new MaskItem<R, Group_Mask<R>>();
                obj.Armors.Overall = eval(this.Armors.Overall);
                if (this.Armors.Specific != null)
                {
                    obj.Armors.Specific = this.Armors.Specific.Translate(eval);
                }
            }
            if (this.Books != null)
            {
                obj.Books = new MaskItem<R, Group_Mask<R>>();
                obj.Books.Overall = eval(this.Books.Overall);
                if (this.Books.Specific != null)
                {
                    obj.Books.Specific = this.Books.Specific.Translate(eval);
                }
            }
            if (this.Clothes != null)
            {
                obj.Clothes = new MaskItem<R, Group_Mask<R>>();
                obj.Clothes.Overall = eval(this.Clothes.Overall);
                if (this.Clothes.Specific != null)
                {
                    obj.Clothes.Specific = this.Clothes.Specific.Translate(eval);
                }
            }
            if (this.Containers != null)
            {
                obj.Containers = new MaskItem<R, Group_Mask<R>>();
                obj.Containers.Overall = eval(this.Containers.Overall);
                if (this.Containers.Specific != null)
                {
                    obj.Containers.Specific = this.Containers.Specific.Translate(eval);
                }
            }
            if (this.Doors != null)
            {
                obj.Doors = new MaskItem<R, Group_Mask<R>>();
                obj.Doors.Overall = eval(this.Doors.Overall);
                if (this.Doors.Specific != null)
                {
                    obj.Doors.Specific = this.Doors.Specific.Translate(eval);
                }
            }
            if (this.Ingredients != null)
            {
                obj.Ingredients = new MaskItem<R, Group_Mask<R>>();
                obj.Ingredients.Overall = eval(this.Ingredients.Overall);
                if (this.Ingredients.Specific != null)
                {
                    obj.Ingredients.Specific = this.Ingredients.Specific.Translate(eval);
                }
            }
            if (this.Lights != null)
            {
                obj.Lights = new MaskItem<R, Group_Mask<R>>();
                obj.Lights.Overall = eval(this.Lights.Overall);
                if (this.Lights.Specific != null)
                {
                    obj.Lights.Specific = this.Lights.Specific.Translate(eval);
                }
            }
            if (this.Miscellaneous != null)
            {
                obj.Miscellaneous = new MaskItem<R, Group_Mask<R>>();
                obj.Miscellaneous.Overall = eval(this.Miscellaneous.Overall);
                if (this.Miscellaneous.Specific != null)
                {
                    obj.Miscellaneous.Specific = this.Miscellaneous.Specific.Translate(eval);
                }
            }
            if (this.Statics != null)
            {
                obj.Statics = new MaskItem<R, Group_Mask<R>>();
                obj.Statics.Overall = eval(this.Statics.Overall);
                if (this.Statics.Specific != null)
                {
                    obj.Statics.Specific = this.Statics.Specific.Translate(eval);
                }
            }
            if (this.Grasses != null)
            {
                obj.Grasses = new MaskItem<R, Group_Mask<R>>();
                obj.Grasses.Overall = eval(this.Grasses.Overall);
                if (this.Grasses.Specific != null)
                {
                    obj.Grasses.Specific = this.Grasses.Specific.Translate(eval);
                }
            }
            if (this.Trees != null)
            {
                obj.Trees = new MaskItem<R, Group_Mask<R>>();
                obj.Trees.Overall = eval(this.Trees.Overall);
                if (this.Trees.Specific != null)
                {
                    obj.Trees.Specific = this.Trees.Specific.Translate(eval);
                }
            }
            if (this.Flora != null)
            {
                obj.Flora = new MaskItem<R, Group_Mask<R>>();
                obj.Flora.Overall = eval(this.Flora.Overall);
                if (this.Flora.Specific != null)
                {
                    obj.Flora.Specific = this.Flora.Specific.Translate(eval);
                }
            }
            if (this.Furnature != null)
            {
                obj.Furnature = new MaskItem<R, Group_Mask<R>>();
                obj.Furnature.Overall = eval(this.Furnature.Overall);
                if (this.Furnature.Specific != null)
                {
                    obj.Furnature.Specific = this.Furnature.Specific.Translate(eval);
                }
            }
            if (this.Weapons != null)
            {
                obj.Weapons = new MaskItem<R, Group_Mask<R>>();
                obj.Weapons.Overall = eval(this.Weapons.Overall);
                if (this.Weapons.Specific != null)
                {
                    obj.Weapons.Specific = this.Weapons.Specific.Translate(eval);
                }
            }
            if (this.Ammo != null)
            {
                obj.Ammo = new MaskItem<R, Group_Mask<R>>();
                obj.Ammo.Overall = eval(this.Ammo.Overall);
                if (this.Ammo.Specific != null)
                {
                    obj.Ammo.Specific = this.Ammo.Specific.Translate(eval);
                }
            }
            if (this.NPCs != null)
            {
                obj.NPCs = new MaskItem<R, Group_Mask<R>>();
                obj.NPCs.Overall = eval(this.NPCs.Overall);
                if (this.NPCs.Specific != null)
                {
                    obj.NPCs.Specific = this.NPCs.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(OblivionMod_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, OblivionMod_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(OblivionMod_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TES4?.Overall ?? true)
                {
                    TES4?.ToString(fg);
                }
                if (printMask?.GameSettings?.Overall ?? true)
                {
                    GameSettings?.ToString(fg);
                }
                if (printMask?.Globals?.Overall ?? true)
                {
                    Globals?.ToString(fg);
                }
                if (printMask?.Classes?.Overall ?? true)
                {
                    Classes?.ToString(fg);
                }
                if (printMask?.Factions?.Overall ?? true)
                {
                    Factions?.ToString(fg);
                }
                if (printMask?.Hairs?.Overall ?? true)
                {
                    Hairs?.ToString(fg);
                }
                if (printMask?.Eyes?.Overall ?? true)
                {
                    Eyes?.ToString(fg);
                }
                if (printMask?.Races?.Overall ?? true)
                {
                    Races?.ToString(fg);
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    Sounds?.ToString(fg);
                }
                if (printMask?.Skills?.Overall ?? true)
                {
                    Skills?.ToString(fg);
                }
                if (printMask?.MagicEffects?.Overall ?? true)
                {
                    MagicEffects?.ToString(fg);
                }
                if (printMask?.Scripts?.Overall ?? true)
                {
                    Scripts?.ToString(fg);
                }
                if (printMask?.LandTextures?.Overall ?? true)
                {
                    LandTextures?.ToString(fg);
                }
                if (printMask?.Enchantments?.Overall ?? true)
                {
                    Enchantments?.ToString(fg);
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    Spells?.ToString(fg);
                }
                if (printMask?.Birthsigns?.Overall ?? true)
                {
                    Birthsigns?.ToString(fg);
                }
                if (printMask?.Activators?.Overall ?? true)
                {
                    Activators?.ToString(fg);
                }
                if (printMask?.AlchemicalApparatus?.Overall ?? true)
                {
                    AlchemicalApparatus?.ToString(fg);
                }
                if (printMask?.Armors?.Overall ?? true)
                {
                    Armors?.ToString(fg);
                }
                if (printMask?.Books?.Overall ?? true)
                {
                    Books?.ToString(fg);
                }
                if (printMask?.Clothes?.Overall ?? true)
                {
                    Clothes?.ToString(fg);
                }
                if (printMask?.Containers?.Overall ?? true)
                {
                    Containers?.ToString(fg);
                }
                if (printMask?.Doors?.Overall ?? true)
                {
                    Doors?.ToString(fg);
                }
                if (printMask?.Ingredients?.Overall ?? true)
                {
                    Ingredients?.ToString(fg);
                }
                if (printMask?.Lights?.Overall ?? true)
                {
                    Lights?.ToString(fg);
                }
                if (printMask?.Miscellaneous?.Overall ?? true)
                {
                    Miscellaneous?.ToString(fg);
                }
                if (printMask?.Statics?.Overall ?? true)
                {
                    Statics?.ToString(fg);
                }
                if (printMask?.Grasses?.Overall ?? true)
                {
                    Grasses?.ToString(fg);
                }
                if (printMask?.Trees?.Overall ?? true)
                {
                    Trees?.ToString(fg);
                }
                if (printMask?.Flora?.Overall ?? true)
                {
                    Flora?.ToString(fg);
                }
                if (printMask?.Furnature?.Overall ?? true)
                {
                    Furnature?.ToString(fg);
                }
                if (printMask?.Weapons?.Overall ?? true)
                {
                    Weapons?.ToString(fg);
                }
                if (printMask?.Ammo?.Overall ?? true)
                {
                    Ammo?.ToString(fg);
                }
                if (printMask?.NPCs?.Overall ?? true)
                {
                    NPCs?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class OblivionMod_ErrorMask : IErrorMask, IErrorMask<OblivionMod_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, TES4_ErrorMask> TES4;
        public MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>> GameSettings;
        public MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>> Globals;
        public MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>> Classes;
        public MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>> Factions;
        public MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>> Hairs;
        public MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>> Eyes;
        public MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>> Races;
        public MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>> Sounds;
        public MaskItem<Exception, Group_ErrorMask<SkillRecord_ErrorMask>> Skills;
        public MaskItem<Exception, Group_ErrorMask<MagicEffect_ErrorMask>> MagicEffects;
        public MaskItem<Exception, Group_ErrorMask<Script_ErrorMask>> Scripts;
        public MaskItem<Exception, Group_ErrorMask<LandTexture_ErrorMask>> LandTextures;
        public MaskItem<Exception, Group_ErrorMask<Enchantment_ErrorMask>> Enchantments;
        public MaskItem<Exception, Group_ErrorMask<SpellUnleveled_ErrorMask>> Spells;
        public MaskItem<Exception, Group_ErrorMask<Birthsign_ErrorMask>> Birthsigns;
        public MaskItem<Exception, Group_ErrorMask<Activator_ErrorMask>> Activators;
        public MaskItem<Exception, Group_ErrorMask<AlchemicalApparatus_ErrorMask>> AlchemicalApparatus;
        public MaskItem<Exception, Group_ErrorMask<Armor_ErrorMask>> Armors;
        public MaskItem<Exception, Group_ErrorMask<Book_ErrorMask>> Books;
        public MaskItem<Exception, Group_ErrorMask<Clothing_ErrorMask>> Clothes;
        public MaskItem<Exception, Group_ErrorMask<Container_ErrorMask>> Containers;
        public MaskItem<Exception, Group_ErrorMask<Door_ErrorMask>> Doors;
        public MaskItem<Exception, Group_ErrorMask<Ingredient_ErrorMask>> Ingredients;
        public MaskItem<Exception, Group_ErrorMask<Light_ErrorMask>> Lights;
        public MaskItem<Exception, Group_ErrorMask<Miscellaneous_ErrorMask>> Miscellaneous;
        public MaskItem<Exception, Group_ErrorMask<Static_ErrorMask>> Statics;
        public MaskItem<Exception, Group_ErrorMask<Grass_ErrorMask>> Grasses;
        public MaskItem<Exception, Group_ErrorMask<Tree_ErrorMask>> Trees;
        public MaskItem<Exception, Group_ErrorMask<Flora_ErrorMask>> Flora;
        public MaskItem<Exception, Group_ErrorMask<Furnature_ErrorMask>> Furnature;
        public MaskItem<Exception, Group_ErrorMask<Weapon_ErrorMask>> Weapons;
        public MaskItem<Exception, Group_ErrorMask<Ammo_ErrorMask>> Ammo;
        public MaskItem<Exception, Group_ErrorMask<NPC_ErrorMask>> NPCs;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    this.TES4 = new MaskItem<Exception, TES4_ErrorMask>(ex, null);
                    break;
                case OblivionMod_FieldIndex.GameSettings:
                    this.GameSettings = new MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Globals:
                    this.Globals = new MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Classes:
                    this.Classes = new MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Factions:
                    this.Factions = new MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    this.Hairs = new MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    this.Eyes = new MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Races:
                    this.Races = new MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    this.Sounds = new MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Skills:
                    this.Skills = new MaskItem<Exception, Group_ErrorMask<SkillRecord_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.MagicEffects:
                    this.MagicEffects = new MaskItem<Exception, Group_ErrorMask<MagicEffect_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Scripts:
                    this.Scripts = new MaskItem<Exception, Group_ErrorMask<Script_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.LandTextures:
                    this.LandTextures = new MaskItem<Exception, Group_ErrorMask<LandTexture_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Enchantments:
                    this.Enchantments = new MaskItem<Exception, Group_ErrorMask<Enchantment_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Spells:
                    this.Spells = new MaskItem<Exception, Group_ErrorMask<SpellUnleveled_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Birthsigns:
                    this.Birthsigns = new MaskItem<Exception, Group_ErrorMask<Birthsign_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Activators:
                    this.Activators = new MaskItem<Exception, Group_ErrorMask<Activator_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    this.AlchemicalApparatus = new MaskItem<Exception, Group_ErrorMask<AlchemicalApparatus_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Armors:
                    this.Armors = new MaskItem<Exception, Group_ErrorMask<Armor_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Books:
                    this.Books = new MaskItem<Exception, Group_ErrorMask<Book_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Clothes:
                    this.Clothes = new MaskItem<Exception, Group_ErrorMask<Clothing_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Containers:
                    this.Containers = new MaskItem<Exception, Group_ErrorMask<Container_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Doors:
                    this.Doors = new MaskItem<Exception, Group_ErrorMask<Door_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Ingredients:
                    this.Ingredients = new MaskItem<Exception, Group_ErrorMask<Ingredient_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Lights:
                    this.Lights = new MaskItem<Exception, Group_ErrorMask<Light_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Miscellaneous:
                    this.Miscellaneous = new MaskItem<Exception, Group_ErrorMask<Miscellaneous_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Statics:
                    this.Statics = new MaskItem<Exception, Group_ErrorMask<Static_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Grasses:
                    this.Grasses = new MaskItem<Exception, Group_ErrorMask<Grass_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Trees:
                    this.Trees = new MaskItem<Exception, Group_ErrorMask<Tree_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Flora:
                    this.Flora = new MaskItem<Exception, Group_ErrorMask<Flora_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Furnature:
                    this.Furnature = new MaskItem<Exception, Group_ErrorMask<Furnature_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Weapons:
                    this.Weapons = new MaskItem<Exception, Group_ErrorMask<Weapon_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Ammo:
                    this.Ammo = new MaskItem<Exception, Group_ErrorMask<Ammo_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.NPCs:
                    this.NPCs = new MaskItem<Exception, Group_ErrorMask<NPC_ErrorMask>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    this.TES4 = (MaskItem<Exception, TES4_ErrorMask>)obj;
                    break;
                case OblivionMod_FieldIndex.GameSettings:
                    this.GameSettings = (MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Globals:
                    this.Globals = (MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Classes:
                    this.Classes = (MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Factions:
                    this.Factions = (MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    this.Hairs = (MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    this.Eyes = (MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Races:
                    this.Races = (MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    this.Sounds = (MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Skills:
                    this.Skills = (MaskItem<Exception, Group_ErrorMask<SkillRecord_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.MagicEffects:
                    this.MagicEffects = (MaskItem<Exception, Group_ErrorMask<MagicEffect_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Scripts:
                    this.Scripts = (MaskItem<Exception, Group_ErrorMask<Script_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.LandTextures:
                    this.LandTextures = (MaskItem<Exception, Group_ErrorMask<LandTexture_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Enchantments:
                    this.Enchantments = (MaskItem<Exception, Group_ErrorMask<Enchantment_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Spells:
                    this.Spells = (MaskItem<Exception, Group_ErrorMask<SpellUnleveled_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Birthsigns:
                    this.Birthsigns = (MaskItem<Exception, Group_ErrorMask<Birthsign_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Activators:
                    this.Activators = (MaskItem<Exception, Group_ErrorMask<Activator_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    this.AlchemicalApparatus = (MaskItem<Exception, Group_ErrorMask<AlchemicalApparatus_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Armors:
                    this.Armors = (MaskItem<Exception, Group_ErrorMask<Armor_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Books:
                    this.Books = (MaskItem<Exception, Group_ErrorMask<Book_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Clothes:
                    this.Clothes = (MaskItem<Exception, Group_ErrorMask<Clothing_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Containers:
                    this.Containers = (MaskItem<Exception, Group_ErrorMask<Container_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Doors:
                    this.Doors = (MaskItem<Exception, Group_ErrorMask<Door_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Ingredients:
                    this.Ingredients = (MaskItem<Exception, Group_ErrorMask<Ingredient_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Lights:
                    this.Lights = (MaskItem<Exception, Group_ErrorMask<Light_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Miscellaneous:
                    this.Miscellaneous = (MaskItem<Exception, Group_ErrorMask<Miscellaneous_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Statics:
                    this.Statics = (MaskItem<Exception, Group_ErrorMask<Static_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Grasses:
                    this.Grasses = (MaskItem<Exception, Group_ErrorMask<Grass_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Trees:
                    this.Trees = (MaskItem<Exception, Group_ErrorMask<Tree_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Flora:
                    this.Flora = (MaskItem<Exception, Group_ErrorMask<Flora_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Furnature:
                    this.Furnature = (MaskItem<Exception, Group_ErrorMask<Furnature_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Weapons:
                    this.Weapons = (MaskItem<Exception, Group_ErrorMask<Weapon_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Ammo:
                    this.Ammo = (MaskItem<Exception, Group_ErrorMask<Ammo_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.NPCs:
                    this.NPCs = (MaskItem<Exception, Group_ErrorMask<NPC_ErrorMask>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (TES4 != null) return true;
            if (GameSettings != null) return true;
            if (Globals != null) return true;
            if (Classes != null) return true;
            if (Factions != null) return true;
            if (Hairs != null) return true;
            if (Eyes != null) return true;
            if (Races != null) return true;
            if (Sounds != null) return true;
            if (Skills != null) return true;
            if (MagicEffects != null) return true;
            if (Scripts != null) return true;
            if (LandTextures != null) return true;
            if (Enchantments != null) return true;
            if (Spells != null) return true;
            if (Birthsigns != null) return true;
            if (Activators != null) return true;
            if (AlchemicalApparatus != null) return true;
            if (Armors != null) return true;
            if (Books != null) return true;
            if (Clothes != null) return true;
            if (Containers != null) return true;
            if (Doors != null) return true;
            if (Ingredients != null) return true;
            if (Lights != null) return true;
            if (Miscellaneous != null) return true;
            if (Statics != null) return true;
            if (Grasses != null) return true;
            if (Trees != null) return true;
            if (Flora != null) return true;
            if (Furnature != null) return true;
            if (Weapons != null) return true;
            if (Ammo != null) return true;
            if (NPCs != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("OblivionMod_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            TES4?.ToString(fg);
            GameSettings?.ToString(fg);
            Globals?.ToString(fg);
            Classes?.ToString(fg);
            Factions?.ToString(fg);
            Hairs?.ToString(fg);
            Eyes?.ToString(fg);
            Races?.ToString(fg);
            Sounds?.ToString(fg);
            Skills?.ToString(fg);
            MagicEffects?.ToString(fg);
            Scripts?.ToString(fg);
            LandTextures?.ToString(fg);
            Enchantments?.ToString(fg);
            Spells?.ToString(fg);
            Birthsigns?.ToString(fg);
            Activators?.ToString(fg);
            AlchemicalApparatus?.ToString(fg);
            Armors?.ToString(fg);
            Books?.ToString(fg);
            Clothes?.ToString(fg);
            Containers?.ToString(fg);
            Doors?.ToString(fg);
            Ingredients?.ToString(fg);
            Lights?.ToString(fg);
            Miscellaneous?.ToString(fg);
            Statics?.ToString(fg);
            Grasses?.ToString(fg);
            Trees?.ToString(fg);
            Flora?.ToString(fg);
            Furnature?.ToString(fg);
            Weapons?.ToString(fg);
            Ammo?.ToString(fg);
            NPCs?.ToString(fg);
        }
        #endregion

        #region Combine
        public OblivionMod_ErrorMask Combine(OblivionMod_ErrorMask rhs)
        {
            var ret = new OblivionMod_ErrorMask();
            ret.TES4 = new MaskItem<Exception, TES4_ErrorMask>(this.TES4.Overall.Combine(rhs.TES4.Overall), ((IErrorMask<TES4_ErrorMask>)this.TES4.Specific).Combine(rhs.TES4.Specific));
            ret.GameSettings = new MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>(this.GameSettings.Overall.Combine(rhs.GameSettings.Overall), ((IErrorMask<Group_ErrorMask<GameSetting_ErrorMask>>)this.GameSettings.Specific).Combine(rhs.GameSettings.Specific));
            ret.Globals = new MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>(this.Globals.Overall.Combine(rhs.Globals.Overall), ((IErrorMask<Group_ErrorMask<Global_ErrorMask>>)this.Globals.Specific).Combine(rhs.Globals.Specific));
            ret.Classes = new MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>(this.Classes.Overall.Combine(rhs.Classes.Overall), ((IErrorMask<Group_ErrorMask<Class_ErrorMask>>)this.Classes.Specific).Combine(rhs.Classes.Specific));
            ret.Factions = new MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>(this.Factions.Overall.Combine(rhs.Factions.Overall), ((IErrorMask<Group_ErrorMask<Faction_ErrorMask>>)this.Factions.Specific).Combine(rhs.Factions.Specific));
            ret.Hairs = new MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>(this.Hairs.Overall.Combine(rhs.Hairs.Overall), ((IErrorMask<Group_ErrorMask<Hair_ErrorMask>>)this.Hairs.Specific).Combine(rhs.Hairs.Specific));
            ret.Eyes = new MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>(this.Eyes.Overall.Combine(rhs.Eyes.Overall), ((IErrorMask<Group_ErrorMask<Eye_ErrorMask>>)this.Eyes.Specific).Combine(rhs.Eyes.Specific));
            ret.Races = new MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>(this.Races.Overall.Combine(rhs.Races.Overall), ((IErrorMask<Group_ErrorMask<Race_ErrorMask>>)this.Races.Specific).Combine(rhs.Races.Specific));
            ret.Sounds = new MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>(this.Sounds.Overall.Combine(rhs.Sounds.Overall), ((IErrorMask<Group_ErrorMask<Sound_ErrorMask>>)this.Sounds.Specific).Combine(rhs.Sounds.Specific));
            ret.Skills = new MaskItem<Exception, Group_ErrorMask<SkillRecord_ErrorMask>>(this.Skills.Overall.Combine(rhs.Skills.Overall), ((IErrorMask<Group_ErrorMask<SkillRecord_ErrorMask>>)this.Skills.Specific).Combine(rhs.Skills.Specific));
            ret.MagicEffects = new MaskItem<Exception, Group_ErrorMask<MagicEffect_ErrorMask>>(this.MagicEffects.Overall.Combine(rhs.MagicEffects.Overall), ((IErrorMask<Group_ErrorMask<MagicEffect_ErrorMask>>)this.MagicEffects.Specific).Combine(rhs.MagicEffects.Specific));
            ret.Scripts = new MaskItem<Exception, Group_ErrorMask<Script_ErrorMask>>(this.Scripts.Overall.Combine(rhs.Scripts.Overall), ((IErrorMask<Group_ErrorMask<Script_ErrorMask>>)this.Scripts.Specific).Combine(rhs.Scripts.Specific));
            ret.LandTextures = new MaskItem<Exception, Group_ErrorMask<LandTexture_ErrorMask>>(this.LandTextures.Overall.Combine(rhs.LandTextures.Overall), ((IErrorMask<Group_ErrorMask<LandTexture_ErrorMask>>)this.LandTextures.Specific).Combine(rhs.LandTextures.Specific));
            ret.Enchantments = new MaskItem<Exception, Group_ErrorMask<Enchantment_ErrorMask>>(this.Enchantments.Overall.Combine(rhs.Enchantments.Overall), ((IErrorMask<Group_ErrorMask<Enchantment_ErrorMask>>)this.Enchantments.Specific).Combine(rhs.Enchantments.Specific));
            ret.Spells = new MaskItem<Exception, Group_ErrorMask<SpellUnleveled_ErrorMask>>(this.Spells.Overall.Combine(rhs.Spells.Overall), ((IErrorMask<Group_ErrorMask<SpellUnleveled_ErrorMask>>)this.Spells.Specific).Combine(rhs.Spells.Specific));
            ret.Birthsigns = new MaskItem<Exception, Group_ErrorMask<Birthsign_ErrorMask>>(this.Birthsigns.Overall.Combine(rhs.Birthsigns.Overall), ((IErrorMask<Group_ErrorMask<Birthsign_ErrorMask>>)this.Birthsigns.Specific).Combine(rhs.Birthsigns.Specific));
            ret.Activators = new MaskItem<Exception, Group_ErrorMask<Activator_ErrorMask>>(this.Activators.Overall.Combine(rhs.Activators.Overall), ((IErrorMask<Group_ErrorMask<Activator_ErrorMask>>)this.Activators.Specific).Combine(rhs.Activators.Specific));
            ret.AlchemicalApparatus = new MaskItem<Exception, Group_ErrorMask<AlchemicalApparatus_ErrorMask>>(this.AlchemicalApparatus.Overall.Combine(rhs.AlchemicalApparatus.Overall), ((IErrorMask<Group_ErrorMask<AlchemicalApparatus_ErrorMask>>)this.AlchemicalApparatus.Specific).Combine(rhs.AlchemicalApparatus.Specific));
            ret.Armors = new MaskItem<Exception, Group_ErrorMask<Armor_ErrorMask>>(this.Armors.Overall.Combine(rhs.Armors.Overall), ((IErrorMask<Group_ErrorMask<Armor_ErrorMask>>)this.Armors.Specific).Combine(rhs.Armors.Specific));
            ret.Books = new MaskItem<Exception, Group_ErrorMask<Book_ErrorMask>>(this.Books.Overall.Combine(rhs.Books.Overall), ((IErrorMask<Group_ErrorMask<Book_ErrorMask>>)this.Books.Specific).Combine(rhs.Books.Specific));
            ret.Clothes = new MaskItem<Exception, Group_ErrorMask<Clothing_ErrorMask>>(this.Clothes.Overall.Combine(rhs.Clothes.Overall), ((IErrorMask<Group_ErrorMask<Clothing_ErrorMask>>)this.Clothes.Specific).Combine(rhs.Clothes.Specific));
            ret.Containers = new MaskItem<Exception, Group_ErrorMask<Container_ErrorMask>>(this.Containers.Overall.Combine(rhs.Containers.Overall), ((IErrorMask<Group_ErrorMask<Container_ErrorMask>>)this.Containers.Specific).Combine(rhs.Containers.Specific));
            ret.Doors = new MaskItem<Exception, Group_ErrorMask<Door_ErrorMask>>(this.Doors.Overall.Combine(rhs.Doors.Overall), ((IErrorMask<Group_ErrorMask<Door_ErrorMask>>)this.Doors.Specific).Combine(rhs.Doors.Specific));
            ret.Ingredients = new MaskItem<Exception, Group_ErrorMask<Ingredient_ErrorMask>>(this.Ingredients.Overall.Combine(rhs.Ingredients.Overall), ((IErrorMask<Group_ErrorMask<Ingredient_ErrorMask>>)this.Ingredients.Specific).Combine(rhs.Ingredients.Specific));
            ret.Lights = new MaskItem<Exception, Group_ErrorMask<Light_ErrorMask>>(this.Lights.Overall.Combine(rhs.Lights.Overall), ((IErrorMask<Group_ErrorMask<Light_ErrorMask>>)this.Lights.Specific).Combine(rhs.Lights.Specific));
            ret.Miscellaneous = new MaskItem<Exception, Group_ErrorMask<Miscellaneous_ErrorMask>>(this.Miscellaneous.Overall.Combine(rhs.Miscellaneous.Overall), ((IErrorMask<Group_ErrorMask<Miscellaneous_ErrorMask>>)this.Miscellaneous.Specific).Combine(rhs.Miscellaneous.Specific));
            ret.Statics = new MaskItem<Exception, Group_ErrorMask<Static_ErrorMask>>(this.Statics.Overall.Combine(rhs.Statics.Overall), ((IErrorMask<Group_ErrorMask<Static_ErrorMask>>)this.Statics.Specific).Combine(rhs.Statics.Specific));
            ret.Grasses = new MaskItem<Exception, Group_ErrorMask<Grass_ErrorMask>>(this.Grasses.Overall.Combine(rhs.Grasses.Overall), ((IErrorMask<Group_ErrorMask<Grass_ErrorMask>>)this.Grasses.Specific).Combine(rhs.Grasses.Specific));
            ret.Trees = new MaskItem<Exception, Group_ErrorMask<Tree_ErrorMask>>(this.Trees.Overall.Combine(rhs.Trees.Overall), ((IErrorMask<Group_ErrorMask<Tree_ErrorMask>>)this.Trees.Specific).Combine(rhs.Trees.Specific));
            ret.Flora = new MaskItem<Exception, Group_ErrorMask<Flora_ErrorMask>>(this.Flora.Overall.Combine(rhs.Flora.Overall), ((IErrorMask<Group_ErrorMask<Flora_ErrorMask>>)this.Flora.Specific).Combine(rhs.Flora.Specific));
            ret.Furnature = new MaskItem<Exception, Group_ErrorMask<Furnature_ErrorMask>>(this.Furnature.Overall.Combine(rhs.Furnature.Overall), ((IErrorMask<Group_ErrorMask<Furnature_ErrorMask>>)this.Furnature.Specific).Combine(rhs.Furnature.Specific));
            ret.Weapons = new MaskItem<Exception, Group_ErrorMask<Weapon_ErrorMask>>(this.Weapons.Overall.Combine(rhs.Weapons.Overall), ((IErrorMask<Group_ErrorMask<Weapon_ErrorMask>>)this.Weapons.Specific).Combine(rhs.Weapons.Specific));
            ret.Ammo = new MaskItem<Exception, Group_ErrorMask<Ammo_ErrorMask>>(this.Ammo.Overall.Combine(rhs.Ammo.Overall), ((IErrorMask<Group_ErrorMask<Ammo_ErrorMask>>)this.Ammo.Specific).Combine(rhs.Ammo.Specific));
            ret.NPCs = new MaskItem<Exception, Group_ErrorMask<NPC_ErrorMask>>(this.NPCs.Overall.Combine(rhs.NPCs.Overall), ((IErrorMask<Group_ErrorMask<NPC_ErrorMask>>)this.NPCs.Specific).Combine(rhs.NPCs.Specific));
            return ret;
        }
        public static OblivionMod_ErrorMask Combine(OblivionMod_ErrorMask lhs, OblivionMod_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class OblivionMod_CopyMask
    {
        #region Members
        public MaskItem<bool, TES4_CopyMask> TES4;
        public MaskItem<bool, Group_CopyMask<GameSetting_CopyMask>> GameSettings;
        public MaskItem<bool, Group_CopyMask<Global_CopyMask>> Globals;
        public MaskItem<bool, Group_CopyMask<Class_CopyMask>> Classes;
        public MaskItem<bool, Group_CopyMask<Faction_CopyMask>> Factions;
        public MaskItem<bool, Group_CopyMask<Hair_CopyMask>> Hairs;
        public MaskItem<bool, Group_CopyMask<Eye_CopyMask>> Eyes;
        public MaskItem<bool, Group_CopyMask<Race_CopyMask>> Races;
        public MaskItem<bool, Group_CopyMask<Sound_CopyMask>> Sounds;
        public MaskItem<bool, Group_CopyMask<SkillRecord_CopyMask>> Skills;
        public MaskItem<bool, Group_CopyMask<MagicEffect_CopyMask>> MagicEffects;
        public MaskItem<bool, Group_CopyMask<Script_CopyMask>> Scripts;
        public MaskItem<bool, Group_CopyMask<LandTexture_CopyMask>> LandTextures;
        public MaskItem<bool, Group_CopyMask<Enchantment_CopyMask>> Enchantments;
        public MaskItem<bool, Group_CopyMask<SpellUnleveled_CopyMask>> Spells;
        public MaskItem<bool, Group_CopyMask<Birthsign_CopyMask>> Birthsigns;
        public MaskItem<bool, Group_CopyMask<Activator_CopyMask>> Activators;
        public MaskItem<bool, Group_CopyMask<AlchemicalApparatus_CopyMask>> AlchemicalApparatus;
        public MaskItem<bool, Group_CopyMask<Armor_CopyMask>> Armors;
        public MaskItem<bool, Group_CopyMask<Book_CopyMask>> Books;
        public MaskItem<bool, Group_CopyMask<Clothing_CopyMask>> Clothes;
        public MaskItem<bool, Group_CopyMask<Container_CopyMask>> Containers;
        public MaskItem<bool, Group_CopyMask<Door_CopyMask>> Doors;
        public MaskItem<bool, Group_CopyMask<Ingredient_CopyMask>> Ingredients;
        public MaskItem<bool, Group_CopyMask<Light_CopyMask>> Lights;
        public MaskItem<bool, Group_CopyMask<Miscellaneous_CopyMask>> Miscellaneous;
        public MaskItem<bool, Group_CopyMask<Static_CopyMask>> Statics;
        public MaskItem<bool, Group_CopyMask<Grass_CopyMask>> Grasses;
        public MaskItem<bool, Group_CopyMask<Tree_CopyMask>> Trees;
        public MaskItem<bool, Group_CopyMask<Flora_CopyMask>> Flora;
        public MaskItem<bool, Group_CopyMask<Furnature_CopyMask>> Furnature;
        public MaskItem<bool, Group_CopyMask<Weapon_CopyMask>> Weapons;
        public MaskItem<bool, Group_CopyMask<Ammo_CopyMask>> Ammo;
        public MaskItem<bool, Group_CopyMask<NPC_CopyMask>> NPCs;
        #endregion

    }
    #endregion




    #endregion

}
