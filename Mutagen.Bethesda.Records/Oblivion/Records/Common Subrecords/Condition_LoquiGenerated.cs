/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Condition :
        ICondition,
        ILoquiObjectSetter<Condition>,
        IEquatable<Condition>,
        IEqualsMask
    {
        #region Ctor
        public Condition()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region CompareOperator
        public CompareOperator CompareOperator { get; set; } = default;
        #endregion
        #region Flags
        public Condition.Flag Flags { get; set; } = default;
        #endregion
        #region Fluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _Fluff = new byte[3];
        public Byte[] Fluff
        {
            get => _Fluff;
            set => this._Fluff = value ?? new byte[3];
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IConditionGetter.Fluff => this.Fluff;
        #endregion
        #region ComparisonValue
        public Single ComparisonValue { get; set; } = default;
        #endregion
        #region Function
        public Function Function { get; set; } = default;
        #endregion
        #region FirstParameter
        public Int32 FirstParameter { get; set; } = default;
        #endregion
        #region SecondParameter
        public Int32 SecondParameter { get; set; } = default;
        #endregion
        #region ThirdParameter
        public Int32 ThirdParameter { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ConditionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IConditionGetter rhs)) return false;
            return ((ConditionCommon)((IConditionGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Condition obj)
        {
            return ((ConditionCommon)((IConditionGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ConditionCommon)((IConditionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ConditionXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ConditionXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Condition CreateFromXml(
            XElement node,
            Condition.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Condition CreateFromXml(
            XElement node,
            out Condition.ErrorMask errorMask,
            Condition.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Condition.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Condition CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Condition();
            ((ConditionSetterCommon)((IConditionGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Condition CreateFromXml(
            string path,
            Condition.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Condition CreateFromXml(
            string path,
            out Condition.ErrorMask errorMask,
            Condition.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Condition CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Condition.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Condition CreateFromXml(
            Stream stream,
            Condition.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Condition CreateFromXml(
            Stream stream,
            out Condition.ErrorMask errorMask,
            Condition.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Condition CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Condition.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<T> :
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            {
                this.CompareOperator = initialValue;
                this.Flags = initialValue;
                this.Fluff = initialValue;
                this.ComparisonValue = initialValue;
                this.Function = initialValue;
                this.FirstParameter = initialValue;
                this.SecondParameter = initialValue;
                this.ThirdParameter = initialValue;
            }

            public Mask(
                T CompareOperator,
                T Flags,
                T Fluff,
                T ComparisonValue,
                T Function,
                T FirstParameter,
                T SecondParameter,
                T ThirdParameter)
            {
                this.CompareOperator = CompareOperator;
                this.Flags = Flags;
                this.Fluff = Fluff;
                this.ComparisonValue = ComparisonValue;
                this.Function = Function;
                this.FirstParameter = FirstParameter;
                this.SecondParameter = SecondParameter;
                this.ThirdParameter = ThirdParameter;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T CompareOperator;
            public T Flags;
            public T Fluff;
            public T ComparisonValue;
            public T Function;
            public T FirstParameter;
            public T SecondParameter;
            public T ThirdParameter;
            #endregion

            #region Equals
            public override bool Equals(object obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.CompareOperator, rhs.CompareOperator)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
                if (!object.Equals(this.ComparisonValue, rhs.ComparisonValue)) return false;
                if (!object.Equals(this.Function, rhs.Function)) return false;
                if (!object.Equals(this.FirstParameter, rhs.FirstParameter)) return false;
                if (!object.Equals(this.SecondParameter, rhs.SecondParameter)) return false;
                if (!object.Equals(this.ThirdParameter, rhs.ThirdParameter)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.CompareOperator?.GetHashCode());
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
                ret = ret.CombineHashCode(this.ComparisonValue?.GetHashCode());
                ret = ret.CombineHashCode(this.Function?.GetHashCode());
                ret = ret.CombineHashCode(this.FirstParameter?.GetHashCode());
                ret = ret.CombineHashCode(this.SecondParameter?.GetHashCode());
                ret = ret.CombineHashCode(this.ThirdParameter?.GetHashCode());
                return ret;
            }

            #endregion

            #region All Equal
            public bool AllEqual(Func<T, bool> eval)
            {
                if (!eval(this.CompareOperator)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Fluff)) return false;
                if (!eval(this.ComparisonValue)) return false;
                if (!eval(this.Function)) return false;
                if (!eval(this.FirstParameter)) return false;
                if (!eval(this.SecondParameter)) return false;
                if (!eval(this.ThirdParameter)) return false;
                return true;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new Condition.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                obj.CompareOperator = eval(this.CompareOperator);
                obj.Flags = eval(this.Flags);
                obj.Fluff = eval(this.Fluff);
                obj.ComparisonValue = eval(this.ComparisonValue);
                obj.Function = eval(this.Function);
                obj.FirstParameter = eval(this.FirstParameter);
                obj.SecondParameter = eval(this.SecondParameter);
                obj.ThirdParameter = eval(this.ThirdParameter);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Condition.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Condition.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Condition.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.CompareOperator ?? true)
                    {
                        fg.AppendLine($"CompareOperator => {CompareOperator}");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendLine($"Flags => {Flags}");
                    }
                    if (printMask?.Fluff ?? true)
                    {
                        fg.AppendLine($"Fluff => {Fluff}");
                    }
                    if (printMask?.ComparisonValue ?? true)
                    {
                        fg.AppendLine($"ComparisonValue => {ComparisonValue}");
                    }
                    if (printMask?.Function ?? true)
                    {
                        fg.AppendLine($"Function => {Function}");
                    }
                    if (printMask?.FirstParameter ?? true)
                    {
                        fg.AppendLine($"FirstParameter => {FirstParameter}");
                    }
                    if (printMask?.SecondParameter ?? true)
                    {
                        fg.AppendLine($"SecondParameter => {SecondParameter}");
                    }
                    if (printMask?.ThirdParameter ?? true)
                    {
                        fg.AppendLine($"ThirdParameter => {ThirdParameter}");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? CompareOperator;
            public Exception? Flags;
            public Exception? Fluff;
            public Exception? ComparisonValue;
            public Exception? Function;
            public Exception? FirstParameter;
            public Exception? SecondParameter;
            public Exception? ThirdParameter;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Condition_FieldIndex enu = (Condition_FieldIndex)index;
                switch (enu)
                {
                    case Condition_FieldIndex.CompareOperator:
                        return CompareOperator;
                    case Condition_FieldIndex.Flags:
                        return Flags;
                    case Condition_FieldIndex.Fluff:
                        return Fluff;
                    case Condition_FieldIndex.ComparisonValue:
                        return ComparisonValue;
                    case Condition_FieldIndex.Function:
                        return Function;
                    case Condition_FieldIndex.FirstParameter:
                        return FirstParameter;
                    case Condition_FieldIndex.SecondParameter:
                        return SecondParameter;
                    case Condition_FieldIndex.ThirdParameter:
                        return ThirdParameter;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Condition_FieldIndex enu = (Condition_FieldIndex)index;
                switch (enu)
                {
                    case Condition_FieldIndex.CompareOperator:
                        this.CompareOperator = ex;
                        break;
                    case Condition_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Condition_FieldIndex.Fluff:
                        this.Fluff = ex;
                        break;
                    case Condition_FieldIndex.ComparisonValue:
                        this.ComparisonValue = ex;
                        break;
                    case Condition_FieldIndex.Function:
                        this.Function = ex;
                        break;
                    case Condition_FieldIndex.FirstParameter:
                        this.FirstParameter = ex;
                        break;
                    case Condition_FieldIndex.SecondParameter:
                        this.SecondParameter = ex;
                        break;
                    case Condition_FieldIndex.ThirdParameter:
                        this.ThirdParameter = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Condition_FieldIndex enu = (Condition_FieldIndex)index;
                switch (enu)
                {
                    case Condition_FieldIndex.CompareOperator:
                        this.CompareOperator = (Exception?)obj;
                        break;
                    case Condition_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Condition_FieldIndex.Fluff:
                        this.Fluff = (Exception?)obj;
                        break;
                    case Condition_FieldIndex.ComparisonValue:
                        this.ComparisonValue = (Exception?)obj;
                        break;
                    case Condition_FieldIndex.Function:
                        this.Function = (Exception?)obj;
                        break;
                    case Condition_FieldIndex.FirstParameter:
                        this.FirstParameter = (Exception?)obj;
                        break;
                    case Condition_FieldIndex.SecondParameter:
                        this.SecondParameter = (Exception?)obj;
                        break;
                    case Condition_FieldIndex.ThirdParameter:
                        this.ThirdParameter = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (CompareOperator != null) return true;
                if (Flags != null) return true;
                if (Fluff != null) return true;
                if (ComparisonValue != null) return true;
                if (Function != null) return true;
                if (FirstParameter != null) return true;
                if (SecondParameter != null) return true;
                if (ThirdParameter != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendLine($"CompareOperator => {CompareOperator}");
                fg.AppendLine($"Flags => {Flags}");
                fg.AppendLine($"Fluff => {Fluff}");
                fg.AppendLine($"ComparisonValue => {ComparisonValue}");
                fg.AppendLine($"Function => {Function}");
                fg.AppendLine($"FirstParameter => {FirstParameter}");
                fg.AppendLine($"SecondParameter => {SecondParameter}");
                fg.AppendLine($"ThirdParameter => {ThirdParameter}");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.CompareOperator = this.CompareOperator.Combine(rhs.CompareOperator);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Fluff = this.Fluff.Combine(rhs.Fluff);
                ret.ComparisonValue = this.ComparisonValue.Combine(rhs.ComparisonValue);
                ret.Function = this.Function.Combine(rhs.Function);
                ret.FirstParameter = this.FirstParameter.Combine(rhs.FirstParameter);
                ret.SecondParameter = this.SecondParameter.Combine(rhs.SecondParameter);
                ret.ThirdParameter = this.ThirdParameter.Combine(rhs.ThirdParameter);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool CompareOperator;
            public bool Flags;
            public bool Fluff;
            public bool ComparisonValue;
            public bool Function;
            public bool FirstParameter;
            public bool SecondParameter;
            public bool ThirdParameter;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.CompareOperator = defaultOn;
                this.Flags = defaultOn;
                this.Fluff = defaultOn;
                this.ComparisonValue = defaultOn;
                this.Function = defaultOn;
                this.FirstParameter = defaultOn;
                this.SecondParameter = defaultOn;
                this.ThirdParameter = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((CompareOperator, null));
                ret.Add((Flags, null));
                ret.Add((Fluff, null));
                ret.Add((ComparisonValue, null));
                ret.Add((Function, null));
                ret.Add((FirstParameter, null));
                ret.Add((SecondParameter, null));
                ret.Add((ThirdParameter, null));
            }
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ConditionBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ConditionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Condition CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static Condition CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var nextRecord = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var customLen);
            nextRecord = recordTypeConverter.ConvertToCustom(nextRecord);
            switch (nextRecord.TypeInt)
            {
                case 1413764163: // CTDT
                    return CustomRecordTypeTrigger(
                        frame: frame.SpawnWithLength(customLen + frame.MetaData.SubConstants.HeaderLength),
                        recordType: nextRecord,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
                default:
                    break;
            }
            var ret = new Condition();
            ((ConditionSetterCommon)((IConditionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IConditionGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ConditionSetterCommon)((IConditionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Condition GetNew()
        {
            return new Condition();
        }

    }
    #endregion

    #region Interface
    public partial interface ICondition :
        IConditionGetter,
        ILoquiObjectSetter<ICondition>
    {
        new CompareOperator CompareOperator { get; set; }
        new Condition.Flag Flags { get; set; }
        new Byte[] Fluff { get; set; }
        new Single ComparisonValue { get; set; }
        new Function Function { get; set; }
        new Int32 FirstParameter { get; set; }
        new Int32 SecondParameter { get; set; }
        new Int32 ThirdParameter { get; set; }
    }

    public partial interface IConditionGetter :
        ILoquiObject,
        ILoquiObject<IConditionGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        CompareOperator CompareOperator { get; }
        Condition.Flag Flags { get; }
        ReadOnlySpan<Byte> Fluff { get; }
        Single ComparisonValue { get; }
        Function Function { get; }
        Int32 FirstParameter { get; }
        Int32 SecondParameter { get; }
        Int32 ThirdParameter { get; }

    }

    #endregion

    #region Common MixIn
    public static class ConditionMixIn
    {
        public static void Clear(this ICondition item)
        {
            ((ConditionSetterCommon)((IConditionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Condition.Mask<bool> GetEqualsMask(
            this IConditionGetter item,
            IConditionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ConditionCommon)((IConditionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IConditionGetter item,
            string? name = null,
            Condition.Mask<bool>? printMask = null)
        {
            return ((ConditionCommon)((IConditionGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IConditionGetter item,
            FileGeneration fg,
            string? name = null,
            Condition.Mask<bool>? printMask = null)
        {
            ((ConditionCommon)((IConditionGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IConditionGetter item,
            Condition.Mask<bool?> checkMask)
        {
            return ((ConditionCommon)((IConditionGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Condition.Mask<bool> GetHasBeenSetMask(this IConditionGetter item)
        {
            var ret = new Condition.Mask<bool>(false);
            ((ConditionCommon)((IConditionGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IConditionGetter item,
            IConditionGetter rhs)
        {
            return ((ConditionCommon)((IConditionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICondition lhs,
            IConditionGetter rhs,
            Condition.TranslationMask? copyMask = null)
        {
            ((ConditionSetterTranslationCommon)((IConditionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ICondition lhs,
            IConditionGetter rhs,
            out Condition.ErrorMask errorMask,
            Condition.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ConditionSetterTranslationCommon)((IConditionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Condition.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICondition lhs,
            IConditionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ConditionSetterTranslationCommon)((IConditionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Condition DeepCopy(
            this IConditionGetter item,
            Condition.TranslationMask? copyMask = null)
        {
            return ((ConditionSetterTranslationCommon)((IConditionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Condition DeepCopy(
            this IConditionGetter item,
            out Condition.ErrorMask errorMask,
            Condition.TranslationMask? copyMask = null)
        {
            return ((ConditionSetterTranslationCommon)((IConditionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Condition DeepCopy(
            this IConditionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ConditionSetterTranslationCommon)((IConditionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICondition item,
            XElement node,
            Condition.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICondition item,
            XElement node,
            out Condition.ErrorMask errorMask,
            Condition.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Condition.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ICondition item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ConditionSetterCommon)((IConditionGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICondition item,
            string path,
            Condition.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICondition item,
            string path,
            out Condition.ErrorMask errorMask,
            Condition.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICondition item,
            string path,
            ErrorMaskBuilder? errorMask,
            Condition.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ICondition item,
            Stream stream,
            Condition.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICondition item,
            Stream stream,
            out Condition.ErrorMask errorMask,
            Condition.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICondition item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Condition.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ICondition item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ICondition item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ConditionSetterCommon)((IConditionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Condition_FieldIndex
    {
        CompareOperator = 0,
        Flags = 1,
        Fluff = 2,
        ComparisonValue = 3,
        Function = 4,
        FirstParameter = 5,
        SecondParameter = 6,
        ThirdParameter = 7,
    }
    #endregion

    #region Registration
    public partial class Condition_Registration : ILoquiRegistration
    {
        public static readonly Condition_Registration Instance = new Condition_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 151,
            version: 0);

        public const string GUID = "b992280d-2cc5-46ce-b935-e1cfd5bdd34f";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(Condition.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Condition.ErrorMask);

        public static readonly Type ClassType = typeof(Condition);

        public static readonly Type GetterType = typeof(IConditionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICondition);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.Condition";

        public const string Name = "Condition";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "COMPAREOPERATOR":
                    return (ushort)Condition_FieldIndex.CompareOperator;
                case "FLAGS":
                    return (ushort)Condition_FieldIndex.Flags;
                case "FLUFF":
                    return (ushort)Condition_FieldIndex.Fluff;
                case "COMPARISONVALUE":
                    return (ushort)Condition_FieldIndex.ComparisonValue;
                case "FUNCTION":
                    return (ushort)Condition_FieldIndex.Function;
                case "FIRSTPARAMETER":
                    return (ushort)Condition_FieldIndex.FirstParameter;
                case "SECONDPARAMETER":
                    return (ushort)Condition_FieldIndex.SecondParameter;
                case "THIRDPARAMETER":
                    return (ushort)Condition_FieldIndex.ThirdParameter;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                case Condition_FieldIndex.Flags:
                case Condition_FieldIndex.Fluff:
                case Condition_FieldIndex.ComparisonValue:
                case Condition_FieldIndex.Function:
                case Condition_FieldIndex.FirstParameter:
                case Condition_FieldIndex.SecondParameter:
                case Condition_FieldIndex.ThirdParameter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                case Condition_FieldIndex.Flags:
                case Condition_FieldIndex.Fluff:
                case Condition_FieldIndex.ComparisonValue:
                case Condition_FieldIndex.Function:
                case Condition_FieldIndex.FirstParameter:
                case Condition_FieldIndex.SecondParameter:
                case Condition_FieldIndex.ThirdParameter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                case Condition_FieldIndex.Flags:
                case Condition_FieldIndex.Fluff:
                case Condition_FieldIndex.ComparisonValue:
                case Condition_FieldIndex.Function:
                case Condition_FieldIndex.FirstParameter:
                case Condition_FieldIndex.SecondParameter:
                case Condition_FieldIndex.ThirdParameter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                    return "CompareOperator";
                case Condition_FieldIndex.Flags:
                    return "Flags";
                case Condition_FieldIndex.Fluff:
                    return "Fluff";
                case Condition_FieldIndex.ComparisonValue:
                    return "ComparisonValue";
                case Condition_FieldIndex.Function:
                    return "Function";
                case Condition_FieldIndex.FirstParameter:
                    return "FirstParameter";
                case Condition_FieldIndex.SecondParameter:
                    return "SecondParameter";
                case Condition_FieldIndex.ThirdParameter:
                    return "ThirdParameter";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                case Condition_FieldIndex.Flags:
                case Condition_FieldIndex.Fluff:
                case Condition_FieldIndex.ComparisonValue:
                case Condition_FieldIndex.Function:
                case Condition_FieldIndex.FirstParameter:
                case Condition_FieldIndex.SecondParameter:
                case Condition_FieldIndex.ThirdParameter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                case Condition_FieldIndex.Flags:
                case Condition_FieldIndex.Fluff:
                case Condition_FieldIndex.ComparisonValue:
                case Condition_FieldIndex.Function:
                case Condition_FieldIndex.FirstParameter:
                case Condition_FieldIndex.SecondParameter:
                case Condition_FieldIndex.ThirdParameter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                    return typeof(CompareOperator);
                case Condition_FieldIndex.Flags:
                    return typeof(Condition.Flag);
                case Condition_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case Condition_FieldIndex.ComparisonValue:
                    return typeof(Single);
                case Condition_FieldIndex.Function:
                    return typeof(Function);
                case Condition_FieldIndex.FirstParameter:
                    return typeof(Int32);
                case Condition_FieldIndex.SecondParameter:
                    return typeof(Int32);
                case Condition_FieldIndex.ThirdParameter:
                    return typeof(Int32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ConditionXmlWriteTranslation);
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        CTDA_HEADER,
                        CTDT_HEADER
                    })
            );
        });
        public const int NumStructFields = 8;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(ConditionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ConditionSetterCommon
    {
        public static readonly ConditionSetterCommon Instance = new ConditionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICondition item)
        {
            ClearPartial();
            item.CompareOperator = default;
            item.Flags = default;
            item.Fluff = new byte[3];
            item.ComparisonValue = default;
            item.Function = default;
            item.FirstParameter = default;
            item.SecondParameter = default;
            item.ThirdParameter = default;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            ICondition item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ConditionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ICondition item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            ConditionBinaryCreateTranslation.FillBinaryInitialParserCustomPublic(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
            item.Fluff = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(3));
            item.ComparisonValue = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Function = EnumBinaryTranslation<Function>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.FirstParameter = frame.ReadInt32();
            item.SecondParameter = frame.ReadInt32();
            item.ThirdParameter = frame.ReadInt32();
        }
        
        public void CopyInFromBinary(
            ICondition item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(Condition_Registration.CTDA_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class ConditionCommon
    {
        public static readonly ConditionCommon Instance = new ConditionCommon();

        public Condition.Mask<bool> GetEqualsMask(
            IConditionGetter item,
            IConditionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Condition.Mask<bool>(false);
            ((ConditionCommon)((IConditionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IConditionGetter item,
            IConditionGetter rhs,
            Condition.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.CompareOperator = item.CompareOperator == rhs.CompareOperator;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Fluff = MemoryExtensions.SequenceEqual(item.Fluff, rhs.Fluff);
            ret.ComparisonValue = item.ComparisonValue.EqualsWithin(rhs.ComparisonValue);
            ret.Function = item.Function == rhs.Function;
            ret.FirstParameter = item.FirstParameter == rhs.FirstParameter;
            ret.SecondParameter = item.SecondParameter == rhs.SecondParameter;
            ret.ThirdParameter = item.ThirdParameter == rhs.ThirdParameter;
        }
        
        public string ToString(
            IConditionGetter item,
            string? name = null,
            Condition.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IConditionGetter item,
            FileGeneration fg,
            string? name = null,
            Condition.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Condition =>");
            }
            else
            {
                fg.AppendLine($"{name} (Condition) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IConditionGetter item,
            FileGeneration fg,
            Condition.Mask<bool>? printMask = null)
        {
            if (printMask?.CompareOperator ?? true)
            {
                fg.AppendLine($"CompareOperator => {item.CompareOperator}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Fluff ?? true)
            {
                fg.AppendLine($"Fluff => {SpanExt.ToHexString(item.Fluff)}");
            }
            if (printMask?.ComparisonValue ?? true)
            {
                fg.AppendLine($"ComparisonValue => {item.ComparisonValue}");
            }
            if (printMask?.Function ?? true)
            {
                fg.AppendLine($"Function => {item.Function}");
            }
            if (printMask?.FirstParameter ?? true)
            {
                fg.AppendLine($"FirstParameter => {item.FirstParameter}");
            }
            if (printMask?.SecondParameter ?? true)
            {
                fg.AppendLine($"SecondParameter => {item.SecondParameter}");
            }
            if (printMask?.ThirdParameter ?? true)
            {
                fg.AppendLine($"ThirdParameter => {item.ThirdParameter}");
            }
        }
        
        public bool HasBeenSet(
            IConditionGetter item,
            Condition.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IConditionGetter item,
            Condition.Mask<bool> mask)
        {
            mask.CompareOperator = true;
            mask.Flags = true;
            mask.Fluff = true;
            mask.ComparisonValue = true;
            mask.Function = true;
            mask.FirstParameter = true;
            mask.SecondParameter = true;
            mask.ThirdParameter = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IConditionGetter? lhs,
            IConditionGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.CompareOperator != rhs.CompareOperator) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Fluff, rhs.Fluff)) return false;
            if (!lhs.ComparisonValue.EqualsWithin(rhs.ComparisonValue)) return false;
            if (lhs.Function != rhs.Function) return false;
            if (lhs.FirstParameter != rhs.FirstParameter) return false;
            if (lhs.SecondParameter != rhs.SecondParameter) return false;
            if (lhs.ThirdParameter != rhs.ThirdParameter) return false;
            return true;
        }
        
        public virtual int GetHashCode(IConditionGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.CompareOperator).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ComparisonValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Function).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FirstParameter).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SecondParameter).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ThirdParameter).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Condition.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IConditionGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class ConditionSetterTranslationCommon
    {
        public static readonly ConditionSetterTranslationCommon Instance = new ConditionSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ICondition item,
            IConditionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)Condition_FieldIndex.CompareOperator) ?? true))
            {
                item.CompareOperator = rhs.CompareOperator;
            }
            if ((copyMask?.GetShouldTranslate((int)Condition_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Condition_FieldIndex.Fluff) ?? true))
            {
                item.Fluff = rhs.Fluff.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Condition_FieldIndex.ComparisonValue) ?? true))
            {
                item.ComparisonValue = rhs.ComparisonValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Condition_FieldIndex.Function) ?? true))
            {
                item.Function = rhs.Function;
            }
            if ((copyMask?.GetShouldTranslate((int)Condition_FieldIndex.FirstParameter) ?? true))
            {
                item.FirstParameter = rhs.FirstParameter;
            }
            if ((copyMask?.GetShouldTranslate((int)Condition_FieldIndex.SecondParameter) ?? true))
            {
                item.SecondParameter = rhs.SecondParameter;
            }
            if ((copyMask?.GetShouldTranslate((int)Condition_FieldIndex.ThirdParameter) ?? true))
            {
                item.ThirdParameter = rhs.ThirdParameter;
            }
        }
        
        #endregion
        
        public Condition DeepCopy(
            IConditionGetter item,
            Condition.TranslationMask? copyMask = null)
        {
            Condition ret = (Condition)((ConditionCommon)((IConditionGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Condition DeepCopy(
            IConditionGetter item,
            out Condition.ErrorMask errorMask,
            Condition.TranslationMask? copyMask = null)
        {
            Condition ret = (Condition)((ConditionCommon)((IConditionGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Condition DeepCopy(
            IConditionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Condition ret = (Condition)((ConditionCommon)((IConditionGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Condition
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Condition_Registration.Instance;
        public static Condition_Registration Registration => Condition_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ConditionCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ConditionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ConditionSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IConditionGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IConditionGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IConditionGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ConditionXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ConditionXmlWriteTranslation Instance = new ConditionXmlWriteTranslation();

        public static void WriteToNodeXml(
            IConditionGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)Condition_FieldIndex.CompareOperator) ?? true))
            {
                EnumXmlTranslation<CompareOperator>.Instance.Write(
                    node: node,
                    name: nameof(item.CompareOperator),
                    item: item.CompareOperator,
                    fieldIndex: (int)Condition_FieldIndex.CompareOperator,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Condition_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Condition.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Condition_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Condition_FieldIndex.Fluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Fluff),
                    item: item.Fluff,
                    fieldIndex: (int)Condition_FieldIndex.Fluff,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Condition_FieldIndex.ComparisonValue) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ComparisonValue),
                    item: item.ComparisonValue,
                    fieldIndex: (int)Condition_FieldIndex.ComparisonValue,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Condition_FieldIndex.Function) ?? true))
            {
                EnumXmlTranslation<Function>.Instance.Write(
                    node: node,
                    name: nameof(item.Function),
                    item: item.Function,
                    fieldIndex: (int)Condition_FieldIndex.Function,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Condition_FieldIndex.FirstParameter) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FirstParameter),
                    item: item.FirstParameter,
                    fieldIndex: (int)Condition_FieldIndex.FirstParameter,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Condition_FieldIndex.SecondParameter) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SecondParameter),
                    item: item.SecondParameter,
                    fieldIndex: (int)Condition_FieldIndex.SecondParameter,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Condition_FieldIndex.ThirdParameter) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ThirdParameter),
                    item: item.ThirdParameter,
                    fieldIndex: (int)Condition_FieldIndex.ThirdParameter,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IConditionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Condition");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Condition");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IConditionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IConditionGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IConditionGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ConditionXmlCreateTranslation
    {
        public readonly static ConditionXmlCreateTranslation Instance = new ConditionXmlCreateTranslation();

        public static void FillPublicXml(
            ICondition item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ConditionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICondition item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "CompareOperator":
                    errorMask?.PushIndex((int)Condition_FieldIndex.CompareOperator);
                    try
                    {
                        item.CompareOperator = EnumXmlTranslation<CompareOperator>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Condition_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Condition.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff":
                    errorMask?.PushIndex((int)Condition_FieldIndex.Fluff);
                    try
                    {
                        item.Fluff = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 3,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ComparisonValue":
                    errorMask?.PushIndex((int)Condition_FieldIndex.ComparisonValue);
                    try
                    {
                        item.ComparisonValue = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Function":
                    errorMask?.PushIndex((int)Condition_FieldIndex.Function);
                    try
                    {
                        item.Function = EnumXmlTranslation<Function>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FirstParameter":
                    errorMask?.PushIndex((int)Condition_FieldIndex.FirstParameter);
                    try
                    {
                        item.FirstParameter = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SecondParameter":
                    errorMask?.PushIndex((int)Condition_FieldIndex.SecondParameter);
                    try
                    {
                        item.SecondParameter = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ThirdParameter":
                    errorMask?.PushIndex((int)Condition_FieldIndex.ThirdParameter);
                    try
                    {
                        item.ThirdParameter = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ConditionXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IConditionGetter item,
            XElement node,
            out Condition.ErrorMask errorMask,
            Condition.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ConditionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Condition.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IConditionGetter item,
            string path,
            out Condition.ErrorMask errorMask,
            Condition.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IConditionGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IConditionGetter item,
            Stream stream,
            out Condition.ErrorMask errorMask,
            Condition.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IConditionGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IConditionGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((ConditionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IConditionGetter item,
            XElement node,
            string? name = null,
            Condition.TranslationMask? translationMask = null)
        {
            ((ConditionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IConditionGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ConditionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IConditionGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ConditionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ConditionBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ConditionBinaryWriteTranslation Instance = new ConditionBinaryWriteTranslation();

        static partial void WriteBinaryInitialParserCustom(
            MutagenWriter writer,
            IConditionGetter item,
            MasterReferences masterReferences);

        public static void WriteBinaryInitialParser(
            MutagenWriter writer,
            IConditionGetter item,
            MasterReferences masterReferences)
        {
            WriteBinaryInitialParserCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        public static void Write_Embedded(
            IConditionGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ConditionBinaryWriteTranslation.WriteBinaryInitialParser(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ComparisonValue);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Function>.Instance.Write(
                writer,
                item.Function,
                length: 4);
            writer.Write(item.FirstParameter);
            writer.Write(item.SecondParameter);
            writer.Write(item.ThirdParameter);
        }

        public void Write(
            MutagenWriter writer,
            IConditionGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Condition_Registration.CTDA_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IConditionGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ConditionBinaryCreateTranslation
    {
        public readonly static ConditionBinaryCreateTranslation Instance = new ConditionBinaryCreateTranslation();

        static partial void FillBinaryInitialParserCustom(
            MutagenFrame frame,
            ICondition item,
            MasterReferences masterReferences);

        public static void FillBinaryInitialParserCustomPublic(
            MutagenFrame frame,
            ICondition item,
            MasterReferences masterReferences)
        {
            FillBinaryInitialParserCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ConditionBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IConditionGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((ConditionBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ConditionBinaryOverlay :
        BinaryOverlay,
        IConditionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Condition_Registration.Instance;
        public static Condition_Registration Registration => Condition_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ConditionCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ConditionSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IConditionGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IConditionGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IConditionGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IConditionGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ConditionXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ConditionXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ConditionBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ConditionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region InitialParser
        partial void InitialParserCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        public ReadOnlySpan<Byte> Fluff => _data.Span.Slice(1, 3).ToArray();
        public Single ComparisonValue => SpanExt.GetFloat(_data.Span.Slice(4, 4));
        public Function Function => (Function)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(8, 4));
        public Int32 FirstParameter => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(12, 4));
        public Int32 SecondParameter => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(16, 4));
        public Int32 ThirdParameter => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(20, 4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ConditionBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ConditionBinaryOverlay ConditionFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var nextRecord = recordTypeConverter.ConvertToCustom(package.Meta.GetSubRecord(stream).RecordType);
            switch (nextRecord.TypeInt)
            {
                case 1413764163: // CTDT
                    return CustomRecordTypeTrigger(
                        stream: stream,
                        recordType: nextRecord,
                        package: package,
                        recordTypeConverter: recordTypeConverter);
                default:
                    break;
            }
            var ret = new ConditionBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x18 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

