/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LeveledEntry<T> :
        ILeveledEntry<T>,
        ILoquiObjectSetter<LeveledEntry<T>>,
        IEquatable<LeveledEntry<T>>,
        IEqualsMask
        where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
    {
        #region Ctor
        public LeveledEntry()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Level
        public Int16 Level { get; set; }
        #endregion
        #region Fluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _Fluff = new byte[2];
        public Byte[] Fluff
        {
            get => _Fluff;
            set => this._Fluff = value ?? new byte[2];
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> ILeveledEntryGetter<T>.Fluff => this.Fluff;
        #endregion
        #region Reference
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDLink<T> _Reference = new FormIDLink<T>();
        public IFormIDLink<T> Reference => this._Reference;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLinkGetter<T> ILeveledEntryGetter<T>.Reference => this.Reference;
        #endregion
        #region Count
        public bool Count_IsSet
        {
            get => _hasBeenSetTracker[(int)LeveledEntry_FieldIndex.Count];
            set => _hasBeenSetTracker[(int)LeveledEntry_FieldIndex.Count] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool ILeveledEntryGetter<T>.Count_IsSet => Count_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int16 _Count;
        public Int16 Count
        {
            get => this._Count;
            set => Count_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int16 ILeveledEntryGetter<T>.Count => this.Count;
        public void Count_Set(
            Int16 value,
            bool markSet = true)
        {
            _Count = value;
            _hasBeenSetTracker[(int)LeveledEntry_FieldIndex.Count] = markSet;
        }
        public void Count_Unset()
        {
            this.Count_Set(default(Int16), false);
        }
        #endregion
        #region Fluff2
        public bool Fluff2_IsSet
        {
            get => _hasBeenSetTracker[(int)LeveledEntry_FieldIndex.Fluff2];
            set => _hasBeenSetTracker[(int)LeveledEntry_FieldIndex.Fluff2] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool ILeveledEntryGetter<T>.Fluff2_IsSet => Fluff2_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[] _Fluff2;
        public Byte[] Fluff2
        {
            get => this._Fluff2;
            set => Fluff2_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> ILeveledEntryGetter<T>.Fluff2 => this.Fluff2;
        public void Fluff2_Set(
            Byte[] value,
            bool markSet = true)
        {
            _Fluff2 = value;
            _hasBeenSetTracker[(int)LeveledEntry_FieldIndex.Fluff2] = markSet;
        }
        public void Fluff2_Unset()
        {
            this.Fluff2_Set(default(Byte[]), false);
        }
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            LeveledEntryMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ILeveledEntryGetter<T> rhs)) return false;
            return ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(LeveledEntry<T> obj)
        {
            return ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => LeveledEntryXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((LeveledEntryXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static LeveledEntry<T> CreateFromXml<T_TranslMask>(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null)
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LeveledEntry<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            XElement node,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            bool doMasks = true,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = LeveledEntry_ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
            return ret;
        }

        public static LeveledEntry<T> CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new LeveledEntry<T>() : null;
                    break;
                default:
                    break;
            }
            var ret = new LeveledEntry<T>();
            ((LeveledEntrySetterCommon<T>)((ILeveledEntryGetter<T>)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static LeveledEntry<T> CreateFromXml<T_TranslMask>(
            string path,
            MissingCreate missing = MissingCreate.New,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null)
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static LeveledEntry<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            string path,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LeveledEntry<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            string path,
            ErrorMaskBuilder errorMask,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LeveledEntry<T> CreateFromXml<T_TranslMask>(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null)
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static LeveledEntry<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            Stream stream,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LeveledEntry<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            Stream stream,
            ErrorMaskBuilder errorMask,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((LeveledEntry_FieldIndex)index)
            {
                case LeveledEntry_FieldIndex.Count:
                case LeveledEntry_FieldIndex.Fluff2:
                    return _hasBeenSetTracker[index];
                case LeveledEntry_FieldIndex.Level:
                case LeveledEntry_FieldIndex.Fluff:
                case LeveledEntry_FieldIndex.Reference:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LeveledEntry_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => LeveledEntryCommon<T>.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LeveledEntryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((LeveledEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static LeveledEntry<T> CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static LeveledEntry<T> CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new LeveledEntry<T>();
            ((LeveledEntrySetterCommon<T>)((ILeveledEntryGetter<T>)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILeveledEntryGetter<T>)rhs, include);

        void IClearable.Clear()
        {
            ((LeveledEntrySetterCommon<T>)((ILeveledEntryGetter<T>)this).CommonSetterInstance()).Clear(this);
        }

        internal static LeveledEntry<T> GetNew()
        {
            return new LeveledEntry<T>();
        }

    }
    #endregion

    #region Interface
    public partial interface ILeveledEntry<T> :
        ILeveledEntryGetter<T>,
        ILoquiObjectSetter<ILeveledEntry<T>>
        where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
    {
        new Int16 Level { get; set; }

        new Byte[] Fluff { get; set; }

        new IFormIDLink<T> Reference { get; }
        new Int16 Count { get; set; }
        new bool Count_IsSet { get; set; }
        void Count_Set(Int16 value, bool hasBeenSet = true);
        void Count_Unset();

        new Byte[] Fluff2 { get; set; }
        new bool Fluff2_IsSet { get; set; }
        void Fluff2_Set(Byte[] value, bool hasBeenSet = true);
        void Fluff2_Unset();

    }

    public partial interface ILeveledEntryGetter<out T> :
        ILoquiObject,
        ILoquiObject<ILeveledEntryGetter<T>>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
        where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region Level
        Int16 Level { get; }

        #endregion
        #region Fluff
        ReadOnlySpan<Byte> Fluff { get; }

        #endregion
        #region Reference
        IFormIDLinkGetter<T> Reference { get; }
        #endregion
        #region Count
        Int16 Count { get; }
        bool Count_IsSet { get; }

        #endregion
        #region Fluff2
        ReadOnlySpan<Byte> Fluff2 { get; }
        bool Fluff2_IsSet { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class LeveledEntryMixIn
    {
        public static void Clear<T>(this ILeveledEntry<T> item)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
        {
            ((LeveledEntrySetterCommon<T>)((ILeveledEntryGetter<T>)item).CommonSetterInstance()).Clear(item: item);
        }

        public static LeveledEntry_Mask<bool> GetEqualsMask<T>(
            this ILeveledEntryGetter<T> item,
            ILeveledEntryGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            return ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString<T>(
            this ILeveledEntryGetter<T> item,
            string name = null,
            LeveledEntry_Mask<bool> printMask = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            return ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString<T>(
            this ILeveledEntryGetter<T> item,
            FileGeneration fg,
            string name = null,
            LeveledEntry_Mask<bool> printMask = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet<T>(
            this ILeveledEntryGetter<T> item,
            LeveledEntry_Mask<bool?> checkMask)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            return ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static LeveledEntry_Mask<bool> GetHasBeenSetMask<T>(this ILeveledEntryGetter<T> item)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            var ret = new LeveledEntry_Mask<bool>();
            ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals<T>(
            this ILeveledEntryGetter<T> item,
            ILeveledEntryGetter<T> rhs)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            return ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom<T, TGetter, T_TranslMask>(
            this ILeveledEntry<T> lhs,
            ILeveledEntryGetter<TGetter> rhs)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            DeepCopyFieldsFrom<T, TGetter, OblivionMajorRecord_ErrorMask, T_TranslMask>(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom<T, TGetter, T_TranslMask>(
            this ILeveledEntry<T> lhs,
            ILeveledEntryGetter<TGetter> rhs,
            LeveledEntry_TranslationMask<T_TranslMask> copyMask)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            DeepCopyFieldsFrom<T, TGetter, OblivionMajorRecord_ErrorMask, T_TranslMask>(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom<T, TGetter, T_ErrMask, T_TranslMask>(
            this ILeveledEntry<T> lhs,
            ILeveledEntryGetter<TGetter> rhs,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            LeveledEntry_TranslationMask<T_TranslMask> copyMask = null,
            bool doMasks = true)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LeveledEntrySetterTranslationCommon)((ILeveledEntryGetter<T>)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = LeveledEntry_ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom<T, TGetter>(
            this ILeveledEntry<T> lhs,
            ILeveledEntryGetter<TGetter> rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            ((LeveledEntrySetterTranslationCommon)((ILeveledEntryGetter<T>)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static LeveledEntry<T> DeepCopy<T, TGetter, T_TranslMask>(
            this ILeveledEntryGetter<TGetter> item,
            LeveledEntry_TranslationMask<T_TranslMask> copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            return ((LeveledEntrySetterTranslationCommon)((ILeveledEntryGetter<TGetter>)item).CommonSetterTranslationInstance()).DeepCopy<T, TGetter, T_TranslMask>(
                item: item,
                copyMask: copyMask);
        }

        public static LeveledEntry<T> DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
            this ILeveledEntryGetter<TGetter> item,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            LeveledEntry_TranslationMask<T_TranslMask> copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            return ((LeveledEntrySetterTranslationCommon)((ILeveledEntryGetter<TGetter>)item).CommonSetterTranslationInstance()).DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LeveledEntry<T> DeepCopy<T, TGetter, T_TranslMask>(
            this ILeveledEntryGetter<TGetter> item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            return ((LeveledEntrySetterTranslationCommon)((ILeveledEntryGetter<TGetter>)item).CommonSetterTranslationInstance()).DeepCopy<T, TGetter>(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml<T, T_TranslMask>(
            this ILeveledEntry<T> item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this ILeveledEntry<T> item,
            XElement node,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            bool doMasks = true,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = LeveledEntry_ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml<T>(
            this ILeveledEntry<T> item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
        {
            ((LeveledEntrySetterCommon<T>)((ILeveledEntryGetter<T>)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_TranslMask>(
            this ILeveledEntry<T> item,
            string path,
            MissingCreate missing = MissingCreate.New,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this ILeveledEntry<T> item,
            string path,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this ILeveledEntry<T> item,
            string path,
            ErrorMaskBuilder errorMask,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml<T, T_TranslMask>(
            this ILeveledEntry<T> item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this ILeveledEntry<T> item,
            Stream stream,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this ILeveledEntry<T> item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary<T>(
            this ILeveledEntry<T> item,
            MutagenFrame frame,
            MasterReferences masterReferences)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary<T>(
            this ILeveledEntry<T> item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
        {
            ((LeveledEntrySetterCommon<T>)((ILeveledEntryGetter<T>)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LeveledEntry_FieldIndex
    {
        Level = 0,
        Fluff = 1,
        Reference = 2,
        Count = 3,
        Fluff2 = 4,
    }
    #endregion

    #region Registration
    public partial class LeveledEntry_Registration : ILoquiRegistration
    {
        public static readonly LeveledEntry_Registration Instance = new LeveledEntry_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 92,
            version: 0);

        public const string GUID = "d73c0730-8b50-4574-9144-4738f8a8f73d";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(LeveledEntry_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LeveledEntry_ErrorMask<>);

        public static readonly Type ClassType = typeof(LeveledEntry<>);

        public static readonly Type GetterType = typeof(ILeveledEntryGetter<>);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILeveledEntry<>);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.LeveledEntry";

        public const string Name = "LeveledEntry";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 1;

        public static readonly Type GenericRegistrationType = typeof(LeveledEntry_Registration<>);

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "LEVEL":
                    return (ushort)LeveledEntry_FieldIndex.Level;
                case "FLUFF":
                    return (ushort)LeveledEntry_FieldIndex.Fluff;
                case "REFERENCE":
                    return (ushort)LeveledEntry_FieldIndex.Reference;
                case "COUNT":
                    return (ushort)LeveledEntry_FieldIndex.Count;
                case "FLUFF2":
                    return (ushort)LeveledEntry_FieldIndex.Fluff2;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                case LeveledEntry_FieldIndex.Fluff:
                case LeveledEntry_FieldIndex.Reference:
                case LeveledEntry_FieldIndex.Count:
                case LeveledEntry_FieldIndex.Fluff2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                case LeveledEntry_FieldIndex.Fluff:
                case LeveledEntry_FieldIndex.Reference:
                case LeveledEntry_FieldIndex.Count:
                case LeveledEntry_FieldIndex.Fluff2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                case LeveledEntry_FieldIndex.Fluff:
                case LeveledEntry_FieldIndex.Reference:
                case LeveledEntry_FieldIndex.Count:
                case LeveledEntry_FieldIndex.Fluff2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                    return "Level";
                case LeveledEntry_FieldIndex.Fluff:
                    return "Fluff";
                case LeveledEntry_FieldIndex.Reference:
                    return "Reference";
                case LeveledEntry_FieldIndex.Count:
                    return "Count";
                case LeveledEntry_FieldIndex.Fluff2:
                    return "Fluff2";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                case LeveledEntry_FieldIndex.Fluff:
                case LeveledEntry_FieldIndex.Reference:
                case LeveledEntry_FieldIndex.Count:
                case LeveledEntry_FieldIndex.Fluff2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                case LeveledEntry_FieldIndex.Fluff:
                case LeveledEntry_FieldIndex.Reference:
                case LeveledEntry_FieldIndex.Count:
                case LeveledEntry_FieldIndex.Fluff2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index) => throw new ArgumentException("Cannot get nth type for a generic object here.  Use generic registration instead.");

        public static readonly Type XmlWriteTranslation = typeof(LeveledEntryXmlWriteTranslation);
        public static readonly RecordType LVLO_HEADER = new RecordType("LVLO");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LVLO_HEADER;
        public const int NumStructFields = 5;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(LeveledEntryBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }

    public class LeveledEntry_Registration<T> : LeveledEntry_Registration
        where T : OblivionMajorRecord, IXmlItem, IBinaryItem
    {
        public static readonly LeveledEntry_Registration<T> GenericInstance = new LeveledEntry_Registration<T>();

        public new static Type GetNthType(ushort index)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                    return typeof(Int16);
                case LeveledEntry_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case LeveledEntry_FieldIndex.Reference:
                    return typeof(IFormIDLink<T>);
                case LeveledEntry_FieldIndex.Count:
                    return typeof(Int16);
                case LeveledEntry_FieldIndex.Fluff2:
                    return typeof(Byte[]);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    #endregion

    #region Common
    public partial class LeveledEntrySetterCommon<T>
        where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
    {
        public static readonly LeveledEntrySetterCommon<T> Instance = new LeveledEntrySetterCommon<T>();

        partial void ClearPartial();
        
        public void Clear(ILeveledEntry<T> item)
        {
            ClearPartial();
            item.Level = default(Int16);
            item.Fluff = default(Byte[]);
            item.Reference.Unset();
            item.Count_Unset();
            item.Fluff2_Unset();
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            ILeveledEntry<T> item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LeveledEntryXmlCreateTranslation<T>.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ILeveledEntry<T> item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            item.Level = frame.ReadInt16();
            item.Fluff = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(2));
            item.Reference.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.NULL);
            if (frame.Complete) return;
            item.Count = frame.ReadInt16();
            if (frame.Complete) return;
            item.Fluff2 = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(2));
        }
        
        public void CopyInFromBinary(
            ILeveledEntry<T> item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(LeveledEntry_Registration.LVLO_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class LeveledEntryCommon<T>
        where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
    {
        public static readonly LeveledEntryCommon<T> Instance = new LeveledEntryCommon<T>();

        public LeveledEntry_Mask<bool> GetEqualsMask(
            ILeveledEntryGetter<T> item,
            ILeveledEntryGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LeveledEntry_Mask<bool>();
            ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILeveledEntryGetter<T> item,
            ILeveledEntryGetter<T> rhs,
            LeveledEntry_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Level = item.Level == rhs.Level;
            ret.Fluff = MemoryExtensions.SequenceEqual(item.Fluff, rhs.Fluff);
            ret.Reference = object.Equals(item.Reference, rhs.Reference);
            ret.Count = item.Count_IsSet == rhs.Count_IsSet && item.Count == rhs.Count;
            ret.Fluff2 = item.Fluff2_IsSet == rhs.Fluff2_IsSet && MemoryExtensions.SequenceEqual(item.Fluff2, rhs.Fluff2);
        }
        
        public string ToString(
            ILeveledEntryGetter<T> item,
            string name = null,
            LeveledEntry_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILeveledEntryGetter<T> item,
            FileGeneration fg,
            string name = null,
            LeveledEntry_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LeveledEntry<{typeof(T).Name}> =>");
            }
            else
            {
                fg.AppendLine($"{name} (LeveledEntry<{typeof(T).Name}>) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILeveledEntryGetter<T> item,
            FileGeneration fg,
            LeveledEntry_Mask<bool> printMask = null)
        {
            if (printMask?.Level ?? true)
            {
                fg.AppendLine($"Level => {item.Level}");
            }
            if (printMask?.Fluff ?? true)
            {
                fg.AppendLine($"Fluff => {SpanExt.ToHexString(item.Fluff)}");
            }
            if (printMask?.Reference ?? true)
            {
                fg.AppendLine($"Reference => {item.Reference}");
            }
            if (printMask?.Count ?? true)
            {
                fg.AppendLine($"Count => {item.Count}");
            }
            if (printMask?.Fluff2 ?? true)
            {
                fg.AppendLine($"Fluff2 => {SpanExt.ToHexString(item.Fluff2)}");
            }
        }
        
        public bool HasBeenSet(
            ILeveledEntryGetter<T> item,
            LeveledEntry_Mask<bool?> checkMask)
        {
            if (checkMask.Count.HasValue && checkMask.Count.Value != item.Count_IsSet) return false;
            if (checkMask.Fluff2.HasValue && checkMask.Fluff2.Value != item.Fluff2_IsSet) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            ILeveledEntryGetter<T> item,
            LeveledEntry_Mask<bool> mask)
        {
            mask.Level = true;
            mask.Fluff = true;
            mask.Reference = true;
            mask.Count = item.Count_IsSet;
            mask.Fluff2 = item.Fluff2_IsSet;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILeveledEntryGetter<T> lhs,
            ILeveledEntryGetter<T> rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Level != rhs.Level) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Fluff, rhs.Fluff)) return false;
            if (!lhs.Reference.Equals(rhs.Reference)) return false;
            if (lhs.Count_IsSet != rhs.Count_IsSet) return false;
            if (lhs.Count_IsSet)
            {
                if (lhs.Count != rhs.Count) return false;
            }
            if (lhs.Fluff2_IsSet != rhs.Fluff2_IsSet) return false;
            if (lhs.Fluff2_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Fluff2, rhs.Fluff2)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ILeveledEntryGetter<T> item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Level).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Reference).CombineHashCode(ret);
            if (item.Count_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Count).CombineHashCode(ret);
            }
            if (item.Fluff2_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Fluff2).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
        public object GetNew<T_Setter>()
            where T_Setter : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
        {
            return LeveledEntry<T_Setter>.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ILeveledEntryGetter<T> obj)
        {
            yield return obj.Reference;
            yield break;
        }
        
        #endregion
        
    }
    public partial class LeveledEntrySetterTranslationCommon
    {
        public static readonly LeveledEntrySetterTranslationCommon Instance = new LeveledEntrySetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom<T, TGetter>(
            ILeveledEntry<T> item,
            ILeveledEntryGetter<TGetter> rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            if ((copyMask?.GetShouldTranslate((int)LeveledEntry_FieldIndex.Level) ?? true))
            {
                item.Level = rhs.Level;
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledEntry_FieldIndex.Fluff) ?? true))
            {
                item.Fluff = rhs.Fluff.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledEntry_FieldIndex.Reference) ?? true))
            {
                item.Reference.FormKey = rhs.Reference.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledEntry_FieldIndex.Count) ?? true))
            {
                errorMask?.PushIndex((int)LeveledEntry_FieldIndex.Count);
                try
                {
                    if (rhs.Count_IsSet)
                    {
                        item.Count = rhs.Count;
                    }
                    else
                    {
                        item.Count_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledEntry_FieldIndex.Fluff2) ?? true))
            {
                errorMask?.PushIndex((int)LeveledEntry_FieldIndex.Fluff2);
                try
                {
                    if(rhs.Fluff2_IsSet)
                    {
                        item.Fluff2 = rhs.Fluff2.ToArray();
                    }
                    else
                    {
                        item.Fluff2_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public LeveledEntry<T> DeepCopy<T, TGetter, T_TranslMask>(
            ILeveledEntryGetter<TGetter> item,
            LeveledEntry_TranslationMask<T_TranslMask> copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            LeveledEntry<T> ret = (LeveledEntry<T>)((LeveledEntryCommon<TGetter>)((ILeveledEntryGetter<TGetter>)item).CommonInstance()).GetNew<T>();
            ret.DeepCopyFieldsFrom<T, TGetter, T_TranslMask>(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public LeveledEntry<T> DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
            ILeveledEntryGetter<TGetter> item,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            LeveledEntry_TranslationMask<T_TranslMask> copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            LeveledEntry<T> ret = (LeveledEntry<T>)((LeveledEntryCommon<TGetter>)((ILeveledEntryGetter<TGetter>)item).CommonInstance()).GetNew<T>();
            ret.DeepCopyFieldsFrom<T, TGetter, T_ErrMask, T_TranslMask>(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public LeveledEntry<T> DeepCopy<T, TGetter>(
            ILeveledEntryGetter<TGetter> item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            LeveledEntry<T> ret = (LeveledEntry<T>)((LeveledEntryCommon<TGetter>)((ILeveledEntryGetter<TGetter>)item).CommonInstance()).GetNew<T>();
            ret.DeepCopyFieldsFrom<T, TGetter>(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LeveledEntry<T>
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledEntry_Registration.Instance;
        public static LeveledEntry_Registration Registration => LeveledEntry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LeveledEntryCommon<T>.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LeveledEntrySetterCommon<T>.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LeveledEntrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILeveledEntryGetter<T>.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILeveledEntryGetter<T>.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILeveledEntryGetter<T>.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LeveledEntryXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static LeveledEntryXmlWriteTranslation Instance = new LeveledEntryXmlWriteTranslation();

        public static void WriteToNodeXml<T>(
            ILeveledEntryGetter<T> item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            if ((translationMask?.GetShouldTranslate((int)LeveledEntry_FieldIndex.Level) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Level),
                    item: item.Level,
                    fieldIndex: (int)LeveledEntry_FieldIndex.Level,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LeveledEntry_FieldIndex.Fluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Fluff),
                    item: item.Fluff,
                    fieldIndex: (int)LeveledEntry_FieldIndex.Fluff,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LeveledEntry_FieldIndex.Reference) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Reference),
                    item: item.Reference?.FormKey,
                    fieldIndex: (int)LeveledEntry_FieldIndex.Reference,
                    errorMask: errorMask);
            }
            if (item.Count_IsSet
                && (translationMask?.GetShouldTranslate((int)LeveledEntry_FieldIndex.Count) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Count),
                    item: item.Count,
                    fieldIndex: (int)LeveledEntry_FieldIndex.Count,
                    errorMask: errorMask);
            }
            if (item.Fluff2_IsSet
                && (translationMask?.GetShouldTranslate((int)LeveledEntry_FieldIndex.Fluff2) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Fluff2),
                    item: item.Fluff2,
                    fieldIndex: (int)LeveledEntry_FieldIndex.Fluff2,
                    errorMask: errorMask);
            }
        }

        public void Write<T>(
            XElement node,
            ILeveledEntryGetter<T> item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LeveledEntry");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LeveledEntry");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            throw new NotImplementedException();
        }

        public void Write<T>(
            XElement node,
            ILeveledEntryGetter<T> item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ILeveledEntryGetter<T>)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class LeveledEntryXmlCreateTranslation<T>
        where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
    {
        public readonly static LeveledEntryXmlCreateTranslation<T> Instance = new LeveledEntryXmlCreateTranslation<T>();

        public static void FillPublicXml(
            ILeveledEntry<T> item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LeveledEntryXmlCreateTranslation<T>.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILeveledEntry<T> item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Level":
                    try
                    {
                        errorMask?.PushIndex((int)LeveledEntry_FieldIndex.Level);
                        item.Level = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff":
                    try
                    {
                        errorMask?.PushIndex((int)LeveledEntry_FieldIndex.Fluff);
                        item.Fluff = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Reference":
                    try
                    {
                        errorMask?.PushIndex((int)LeveledEntry_FieldIndex.Reference);
                        item.Reference.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            defaultVal: FormKey.NULL);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Count":
                    try
                    {
                        errorMask?.PushIndex((int)LeveledEntry_FieldIndex.Count);
                        item.Count = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff2":
                    try
                    {
                        errorMask?.PushIndex((int)LeveledEntry_FieldIndex.Fluff2);
                        item.Fluff2 = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class LeveledEntryXmlTranslationMixIn
    {
        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this ILeveledEntryGetter<T> item,
            XElement node,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            bool doMasks = true,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null,
            string name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LeveledEntryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LeveledEntry_ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this ILeveledEntryGetter<T> item,
            string path,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null,
            bool doMasks = true,
            string name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml<T>(
            this ILeveledEntryGetter<T> item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            var node = new XElement("topnode");
            WriteToXml<T>(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this ILeveledEntryGetter<T> item,
            Stream stream,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null,
            bool doMasks = true,
            string name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml<T>(
            this ILeveledEntryGetter<T> item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            var node = new XElement("topnode");
            WriteToXml<T>(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml<T>(
            this ILeveledEntryGetter<T> item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            ((LeveledEntryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this ILeveledEntryGetter<T> item,
            XElement node,
            string name = null,
            LeveledEntry_TranslationMask<T_TranslMask> translationMask = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            ((LeveledEntryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml<T, T_TranslMask>(
            this ILeveledEntryGetter<T> item,
            string path,
            string name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var node = new XElement("topnode");
            ((LeveledEntryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml<T, T_TranslMask>(
            this ILeveledEntryGetter<T> item,
            Stream stream,
            string name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
        {
            var node = new XElement("topnode");
            ((LeveledEntryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class LeveledEntry_Mask<T> : IMask<T>, IEquatable<LeveledEntry_Mask<T>>
    {
        #region Ctors
        public LeveledEntry_Mask()
        {
        }

        public LeveledEntry_Mask(T initialValue)
        {
            this.Level = initialValue;
            this.Fluff = initialValue;
            this.Reference = initialValue;
            this.Count = initialValue;
            this.Fluff2 = initialValue;
        }
        #endregion

        #region Members
        public T Level;
        public T Fluff;
        public T Reference;
        public T Count;
        public T Fluff2;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LeveledEntry_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LeveledEntry_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Level, rhs.Level)) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.Reference, rhs.Reference)) return false;
            if (!object.Equals(this.Count, rhs.Count)) return false;
            if (!object.Equals(this.Fluff2, rhs.Fluff2)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Level?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.Reference?.GetHashCode());
            ret = ret.CombineHashCode(this.Count?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff2?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Level)) return false;
            if (!eval(this.Fluff)) return false;
            if (!eval(this.Reference)) return false;
            if (!eval(this.Count)) return false;
            if (!eval(this.Fluff2)) return false;
            return true;
        }
        #endregion

        #region Translate
        public LeveledEntry_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LeveledEntry_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LeveledEntry_Mask<R> obj, Func<T, R> eval)
        {
            obj.Level = eval(this.Level);
            obj.Fluff = eval(this.Fluff);
            obj.Reference = eval(this.Reference);
            obj.Count = eval(this.Count);
            obj.Fluff2 = eval(this.Fluff2);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LeveledEntry_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LeveledEntry_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LeveledEntry_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Level ?? true)
                {
                    fg.AppendLine($"Level => {Level}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
                if (printMask?.Reference ?? true)
                {
                    fg.AppendLine($"Reference => {Reference}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {Count}");
                }
                if (printMask?.Fluff2 ?? true)
                {
                    fg.AppendLine($"Fluff2 => {Fluff2}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LeveledEntry_ErrorMask<T_ErrMask> : IErrorMask, IErrorMask<LeveledEntry_ErrorMask<T_ErrMask>>
        where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Level;
        public Exception Fluff;
        public Exception Reference;
        public Exception Count;
        public Exception Fluff2;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                    return Level;
                case LeveledEntry_FieldIndex.Fluff:
                    return Fluff;
                case LeveledEntry_FieldIndex.Reference:
                    return Reference;
                case LeveledEntry_FieldIndex.Count:
                    return Count;
                case LeveledEntry_FieldIndex.Fluff2:
                    return Fluff2;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                    this.Level = ex;
                    break;
                case LeveledEntry_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case LeveledEntry_FieldIndex.Reference:
                    this.Reference = ex;
                    break;
                case LeveledEntry_FieldIndex.Count:
                    this.Count = ex;
                    break;
                case LeveledEntry_FieldIndex.Fluff2:
                    this.Fluff2 = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                    this.Level = (Exception)obj;
                    break;
                case LeveledEntry_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case LeveledEntry_FieldIndex.Reference:
                    this.Reference = (Exception)obj;
                    break;
                case LeveledEntry_FieldIndex.Count:
                    this.Count = (Exception)obj;
                    break;
                case LeveledEntry_FieldIndex.Fluff2:
                    this.Fluff2 = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Level != null) return true;
            if (Fluff != null) return true;
            if (Reference != null) return true;
            if (Count != null) return true;
            if (Fluff2 != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("LeveledEntry_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Level => {Level}");
            fg.AppendLine($"Fluff => {Fluff}");
            fg.AppendLine($"Reference => {Reference}");
            fg.AppendLine($"Count => {Count}");
            fg.AppendLine($"Fluff2 => {Fluff2}");
        }
        #endregion

        #region Combine
        public LeveledEntry_ErrorMask<T_ErrMask> Combine(LeveledEntry_ErrorMask<T_ErrMask> rhs)
        {
            var ret = new LeveledEntry_ErrorMask<T_ErrMask>();
            ret.Level = this.Level.Combine(rhs.Level);
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.Reference = this.Reference.Combine(rhs.Reference);
            ret.Count = this.Count.Combine(rhs.Count);
            ret.Fluff2 = this.Fluff2.Combine(rhs.Fluff2);
            return ret;
        }
        public static LeveledEntry_ErrorMask<T_ErrMask> Combine(LeveledEntry_ErrorMask<T_ErrMask> lhs, LeveledEntry_ErrorMask<T_ErrMask> rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static LeveledEntry_ErrorMask<T_ErrMask> Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new LeveledEntry_ErrorMask<T_ErrMask>();
        }
        #endregion

    }
    public class LeveledEntry_TranslationMask<T_TranslMask> : ITranslationMask
        where T_TranslMask : OblivionMajorRecord_TranslationMask, ITranslationMask, new()
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Level;
        public bool Fluff;
        public bool Reference;
        public bool Count;
        public bool Fluff2;
        #endregion

        #region Ctors
        public LeveledEntry_TranslationMask()
        {
        }

        public LeveledEntry_TranslationMask(bool defaultOn)
        {
            this.Level = defaultOn;
            this.Fluff = defaultOn;
            this.Reference = defaultOn;
            this.Count = defaultOn;
            this.Fluff2 = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Level, null));
            ret.Add((Fluff, null));
            ret.Add((Reference, null));
            ret.Add((Count, null));
            ret.Add((Fluff2, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LeveledEntryBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static LeveledEntryBinaryWriteTranslation Instance = new LeveledEntryBinaryWriteTranslation();

        public static void Write_Embedded<T>(
            ILeveledEntryGetter<T> item,
            MutagenWriter writer,
            MasterReferences masterReferences)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            writer.Write(item.Level);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Reference,
                masterReferences: masterReferences);
            if (item.Count_IsSet)
            {
                writer.Write(item.Count);
            }
            if (item.Fluff2_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Fluff2);
            }
        }

        public void Write<T>(
            MutagenWriter writer,
            ILeveledEntryGetter<T> item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: LeveledEntry_Registration.LVLO_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            throw new NotImplementedException();
        }

    }

    public partial class LeveledEntryBinaryCreateTranslation<T>
        where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
    {
        public readonly static LeveledEntryBinaryCreateTranslation<T> Instance = new LeveledEntryBinaryCreateTranslation<T>();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LeveledEntryBinaryTranslationMixIn
    {
        public static void WriteToBinary<T, T_ErrMask>(
            this ILeveledEntryGetter<T> item,
            MutagenWriter writer,
            MasterReferences masterReferences)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            ((LeveledEntryBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LeveledEntryBinaryOverlay<T> :
        BinaryOverlay,
        ILeveledEntryGetter<T>
        where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledEntry_Registration.Instance;
        public static LeveledEntry_Registration Registration => LeveledEntry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LeveledEntryCommon<T>.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LeveledEntrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILeveledEntryGetter<T>.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILeveledEntryGetter<T>.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILeveledEntryGetter<T>.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILeveledEntryGetter<T>)rhs, include);

        public IEnumerable<ILinkGetter> Links => LeveledEntryCommon<T>.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => LeveledEntryXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((LeveledEntryXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LeveledEntryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((LeveledEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        public Int16 Level => BinaryPrimitives.ReadInt16LittleEndian(_data.Span.Slice(0, 2));
        public ReadOnlySpan<Byte> Fluff => _data.Span.Slice(2, 2).ToArray();
        public IFormIDLinkGetter<T> Reference => new FormIDLink<T>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(4, 4))));
        #region Count
        public bool Count_IsSet => _data.Length >= 10;
        public Int16 Count => BinaryPrimitives.ReadInt16LittleEndian(_data.Span.Slice(8, 2));
        #endregion
        #region Fluff2
        public bool Fluff2_IsSet => _data.Length >= 12;
        public ReadOnlySpan<Byte> Fluff2 => _data.Span.Slice(10, 2).ToArray();
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected LeveledEntryBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static LeveledEntryBinaryOverlay<T> LeveledEntryFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new LeveledEntryBinaryOverlay<T>(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

