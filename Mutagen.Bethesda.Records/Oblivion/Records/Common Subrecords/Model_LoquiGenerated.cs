/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Model :
        IModel,
        ILoquiObjectSetter<Model>,
        IEquatable<Model>,
        IEqualsMask
    {
        #region Ctor
        public Model()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region File
        public String File { get; set; } = string.Empty;
        #endregion
        #region BoundRadius
        public Single BoundRadius { get; set; } = default;
        #endregion
        #region Hashes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _Hashes;
        public Byte[]? Hashes
        {
            get => this._Hashes;
            set => this._Hashes = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IModelGetter.Hashes => this.Hashes;
        bool IModelGetter.Hashes_IsSet => this.Hashes != null;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ModelMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IModelGetter rhs)) return false;
            return ((ModelCommon)((IModelGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Model obj)
        {
            return ((ModelCommon)((IModelGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ModelCommon)((IModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ModelXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ModelXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Model CreateFromXml(
            XElement node,
            Model_TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Model CreateFromXml(
            XElement node,
            out Model_ErrorMask errorMask,
            Model_TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Model_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Model CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Model();
            ((ModelSetterCommon)((IModelGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Model CreateFromXml(
            string path,
            Model_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Model CreateFromXml(
            string path,
            out Model_ErrorMask errorMask,
            Model_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Model CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Model_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Model CreateFromXml(
            Stream stream,
            Model_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Model CreateFromXml(
            Stream stream,
            out Model_ErrorMask errorMask,
            Model_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Model CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Model_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Model_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ModelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Model CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static Model CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new Model();
            ((ModelSetterCommon)((IModelGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IModelGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ModelSetterCommon)((IModelGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Model GetNew()
        {
            return new Model();
        }

    }
    #endregion

    #region Interface
    public partial interface IModel :
        IModelGetter,
        ILoquiObjectSetter<IModel>
    {
        new String File { get; set; }
        new Single BoundRadius { get; set; }
        new Byte[]? Hashes { get; set; }
    }

    public partial interface IModelGetter :
        ILoquiObject,
        ILoquiObject<IModelGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        String File { get; }
        Single BoundRadius { get; }
        #region Hashes
        ReadOnlySpan<Byte> Hashes { get; }
        bool Hashes_IsSet { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class ModelMixIn
    {
        public static void Clear(this IModel item)
        {
            ((ModelSetterCommon)((IModelGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Model_Mask<bool> GetEqualsMask(
            this IModelGetter item,
            IModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ModelCommon)((IModelGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IModelGetter item,
            string? name = null,
            Model_Mask<bool>? printMask = null)
        {
            return ((ModelCommon)((IModelGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IModelGetter item,
            FileGeneration fg,
            string? name = null,
            Model_Mask<bool>? printMask = null)
        {
            ((ModelCommon)((IModelGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IModelGetter item,
            Model_Mask<bool?> checkMask)
        {
            return ((ModelCommon)((IModelGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Model_Mask<bool> GetHasBeenSetMask(this IModelGetter item)
        {
            var ret = new Model_Mask<bool>(false);
            ((ModelCommon)((IModelGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IModelGetter item,
            IModelGetter rhs)
        {
            return ((ModelCommon)((IModelGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IModel lhs,
            IModelGetter rhs,
            Model_TranslationMask? copyMask = null)
        {
            ((ModelSetterTranslationCommon)((IModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IModel lhs,
            IModelGetter rhs,
            out Model_ErrorMask errorMask,
            Model_TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ModelSetterTranslationCommon)((IModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Model_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IModel lhs,
            IModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ModelSetterTranslationCommon)((IModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Model DeepCopy(
            this IModelGetter item,
            Model_TranslationMask? copyMask = null)
        {
            return ((ModelSetterTranslationCommon)((IModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Model DeepCopy(
            this IModelGetter item,
            out Model_ErrorMask errorMask,
            Model_TranslationMask? copyMask = null)
        {
            return ((ModelSetterTranslationCommon)((IModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Model DeepCopy(
            this IModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ModelSetterTranslationCommon)((IModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IModel item,
            XElement node,
            Model_TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IModel item,
            XElement node,
            out Model_ErrorMask errorMask,
            Model_TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Model_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IModel item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ModelSetterCommon)((IModelGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModel item,
            string path,
            Model_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModel item,
            string path,
            out Model_ErrorMask errorMask,
            Model_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModel item,
            string path,
            ErrorMaskBuilder? errorMask,
            Model_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IModel item,
            Stream stream,
            Model_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModel item,
            Stream stream,
            out Model_ErrorMask errorMask,
            Model_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModel item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Model_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IModel item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IModel item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ModelSetterCommon)((IModelGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Model_FieldIndex
    {
        File = 0,
        BoundRadius = 1,
        Hashes = 2,
    }
    #endregion

    #region Registration
    public partial class Model_Registration : ILoquiRegistration
    {
        public static readonly Model_Registration Instance = new Model_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 20,
            version: 0);

        public const string GUID = "b989dfe1-feb4-4492-9a94-897f6be0c20a";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Model_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Model_ErrorMask);

        public static readonly Type ClassType = typeof(Model);

        public static readonly Type GetterType = typeof(IModelGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IModel);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.Model";

        public const string Name = "Model";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FILE":
                    return (ushort)Model_FieldIndex.File;
                case "BOUNDRADIUS":
                    return (ushort)Model_FieldIndex.BoundRadius;
                case "HASHES":
                    return (ushort)Model_FieldIndex.Hashes;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                case Model_FieldIndex.Hashes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                case Model_FieldIndex.Hashes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                case Model_FieldIndex.Hashes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    return "File";
                case Model_FieldIndex.BoundRadius:
                    return "BoundRadius";
                case Model_FieldIndex.Hashes:
                    return "Hashes";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                case Model_FieldIndex.Hashes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                case Model_FieldIndex.Hashes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    return typeof(String);
                case Model_FieldIndex.BoundRadius:
                    return typeof(Single);
                case Model_FieldIndex.Hashes:
                    return typeof(Byte[]);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ModelXmlWriteTranslation);
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType MODB_HEADER = new RecordType("MODB");
        public static readonly RecordType MODT_HEADER = new RecordType("MODT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = MODL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryWriteTranslation = typeof(ModelBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ModelSetterCommon
    {
        public static readonly ModelSetterCommon Instance = new ModelSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IModel item)
        {
            ClearPartial();
            item.File = string.Empty;
            item.BoundRadius = default;
            item.Hashes = default;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IModel item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ModelXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IModel item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IModel item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Model_FieldIndex.File) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.File = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Model_FieldIndex.File);
                }
                case 0x42444F4D: // MODB
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.BoundRadius = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Model_FieldIndex.BoundRadius);
                }
                case 0x54444F4D: // MODT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Hashes = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Model_FieldIndex.Hashes);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IModel item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ModelCommon
    {
        public static readonly ModelCommon Instance = new ModelCommon();

        public Model_Mask<bool> GetEqualsMask(
            IModelGetter item,
            IModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Model_Mask<bool>(false);
            ((ModelCommon)((IModelGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IModelGetter item,
            IModelGetter rhs,
            Model_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.File = string.Equals(item.File, rhs.File);
            ret.BoundRadius = item.BoundRadius.EqualsWithin(rhs.BoundRadius);
            ret.Hashes = MemoryExtensions.SequenceEqual(item.Hashes, rhs.Hashes);
        }
        
        public string ToString(
            IModelGetter item,
            string? name = null,
            Model_Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IModelGetter item,
            FileGeneration fg,
            string? name = null,
            Model_Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Model =>");
            }
            else
            {
                fg.AppendLine($"{name} (Model) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IModelGetter item,
            FileGeneration fg,
            Model_Mask<bool>? printMask = null)
        {
            if (printMask?.File ?? true)
            {
                fg.AppendLine($"File => {item.File}");
            }
            if (printMask?.BoundRadius ?? true)
            {
                fg.AppendLine($"BoundRadius => {item.BoundRadius}");
            }
            if (printMask?.Hashes ?? true)
            {
                fg.AppendLine($"Hashes => {SpanExt.ToHexString(item.Hashes)}");
            }
        }
        
        public bool HasBeenSet(
            IModelGetter item,
            Model_Mask<bool?> checkMask)
        {
            if (checkMask.Hashes.HasValue && checkMask.Hashes.Value != item.Hashes_IsSet) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IModelGetter item,
            Model_Mask<bool> mask)
        {
            mask.File = true;
            mask.BoundRadius = true;
            mask.Hashes = item.Hashes_IsSet;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IModelGetter? lhs,
            IModelGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!string.Equals(lhs.File, rhs.File)) return false;
            if (!lhs.BoundRadius.EqualsWithin(rhs.BoundRadius)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Hashes, rhs.Hashes)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IModelGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.File).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BoundRadius).CombineHashCode(ret);
            if (item.Hashes_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Hashes).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Model.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IModelGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class ModelSetterTranslationCommon
    {
        public static readonly ModelSetterTranslationCommon Instance = new ModelSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IModel item,
            IModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)Model_FieldIndex.File) ?? true))
            {
                item.File = rhs.File;
            }
            if ((copyMask?.GetShouldTranslate((int)Model_FieldIndex.BoundRadius) ?? true))
            {
                item.BoundRadius = rhs.BoundRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Model_FieldIndex.Hashes) ?? true))
            {
                if(rhs.Hashes_IsSet)
                {
                    item.Hashes = rhs.Hashes.ToArray();
                }
                else
                {
                    item.Hashes = default;
                }
            }
        }
        
        #endregion
        
        public Model DeepCopy(
            IModelGetter item,
            Model_TranslationMask? copyMask = null)
        {
            Model ret = (Model)((ModelCommon)((IModelGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Model DeepCopy(
            IModelGetter item,
            out Model_ErrorMask errorMask,
            Model_TranslationMask? copyMask = null)
        {
            Model ret = (Model)((ModelCommon)((IModelGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Model DeepCopy(
            IModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Model ret = (Model)((ModelCommon)((IModelGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Model
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Model_Registration.Instance;
        public static Model_Registration Registration => Model_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ModelCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ModelSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ModelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IModelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IModelGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IModelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ModelXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ModelXmlWriteTranslation Instance = new ModelXmlWriteTranslation();

        public static void WriteToNodeXml(
            IModelGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)Model_FieldIndex.File) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.File),
                    item: item.File,
                    fieldIndex: (int)Model_FieldIndex.File,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Model_FieldIndex.BoundRadius) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BoundRadius),
                    item: item.BoundRadius,
                    fieldIndex: (int)Model_FieldIndex.BoundRadius,
                    errorMask: errorMask);
            }
            if (item.Hashes_IsSet
                && (translationMask?.GetShouldTranslate((int)Model_FieldIndex.Hashes) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Hashes),
                    item: item.Hashes,
                    fieldIndex: (int)Model_FieldIndex.Hashes,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Model");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Model");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IModelGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IModelGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IModelGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ModelXmlCreateTranslation
    {
        public readonly static ModelXmlCreateTranslation Instance = new ModelXmlCreateTranslation();

        public static void FillPublicXml(
            IModel item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ModelXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IModel item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "File":
                    try
                    {
                        errorMask?.PushIndex((int)Model_FieldIndex.File);
                        item.File = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BoundRadius":
                    try
                    {
                        errorMask?.PushIndex((int)Model_FieldIndex.BoundRadius);
                        item.BoundRadius = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hashes":
                    try
                    {
                        errorMask?.PushIndex((int)Model_FieldIndex.Hashes);
                        item.Hashes = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ModelXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IModelGetter item,
            XElement node,
            out Model_ErrorMask errorMask,
            Model_TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ModelXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Model_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IModelGetter item,
            string path,
            out Model_ErrorMask errorMask,
            Model_TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModelGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModelGetter item,
            Stream stream,
            out Model_ErrorMask errorMask,
            Model_TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IModelGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IModelGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((ModelXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IModelGetter item,
            XElement node,
            string? name = null,
            Model_TranslationMask? translationMask = null)
        {
            ((ModelXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IModelGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ModelXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModelGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ModelXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class Model_Mask<T> :
        IMask<T>,
        IEquatable<Model_Mask<T>>
        where T : notnull
    {
        #region Ctors
        public Model_Mask(T initialValue)
        {
            this.File = initialValue;
            this.BoundRadius = initialValue;
            this.Hashes = initialValue;
        }

        public Model_Mask(
            T File,
            T BoundRadius,
            T Hashes)
        {
            this.File = File;
            this.BoundRadius = BoundRadius;
            this.Hashes = Hashes;
        }

        #pragma warning disable CS8618
        protected Model_Mask()
        {
        }
        #pragma warning restore CS8618

        #endregion

        #region Members
        public T File;
        public T BoundRadius;
        public T Hashes;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Model_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Model_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.File, rhs.File)) return false;
            if (!object.Equals(this.BoundRadius, rhs.BoundRadius)) return false;
            if (!object.Equals(this.Hashes, rhs.Hashes)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.File?.GetHashCode());
            ret = ret.CombineHashCode(this.BoundRadius?.GetHashCode());
            ret = ret.CombineHashCode(this.Hashes?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.File)) return false;
            if (!eval(this.BoundRadius)) return false;
            if (!eval(this.Hashes)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Model_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Model_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Model_Mask<R> obj, Func<T, R> eval)
        {
            obj.File = eval(this.File);
            obj.BoundRadius = eval(this.BoundRadius);
            obj.Hashes = eval(this.Hashes);
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Model_Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Model_Mask<bool>? printMask = null)
        {
            fg.AppendLine($"{nameof(Model_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.File ?? true)
                {
                    fg.AppendLine($"File => {File}");
                }
                if (printMask?.BoundRadius ?? true)
                {
                    fg.AppendLine($"BoundRadius => {BoundRadius}");
                }
                if (printMask?.Hashes ?? true)
                {
                    fg.AppendLine($"Hashes => {Hashes}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Model_ErrorMask : IErrorMask, IErrorMask<Model_ErrorMask>
    {
        #region Members
        public Exception? Overall { get; set; }
        private List<string>? _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception? File;
        public Exception? BoundRadius;
        public Exception? Hashes;
        #endregion

        #region IErrorMask
        public object? GetNthMask(int index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    return File;
                case Model_FieldIndex.BoundRadius:
                    return BoundRadius;
                case Model_FieldIndex.Hashes:
                    return Hashes;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    this.File = ex;
                    break;
                case Model_FieldIndex.BoundRadius:
                    this.BoundRadius = ex;
                    break;
                case Model_FieldIndex.Hashes:
                    this.Hashes = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    this.File = (Exception)obj;
                    break;
                case Model_FieldIndex.BoundRadius:
                    this.BoundRadius = (Exception)obj;
                    break;
                case Model_FieldIndex.Hashes:
                    this.Hashes = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (File != null) return true;
            if (BoundRadius != null) return true;
            if (Hashes != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Model_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"File => {File}");
            fg.AppendLine($"BoundRadius => {BoundRadius}");
            fg.AppendLine($"Hashes => {Hashes}");
        }
        #endregion

        #region Combine
        public Model_ErrorMask Combine(Model_ErrorMask? rhs)
        {
            if (rhs == null) return this;
            var ret = new Model_ErrorMask();
            ret.File = this.File.Combine(rhs.File);
            ret.BoundRadius = this.BoundRadius.Combine(rhs.BoundRadius);
            ret.Hashes = this.Hashes.Combine(rhs.Hashes);
            return ret;
        }
        public static Model_ErrorMask? Combine(Model_ErrorMask? lhs, Model_ErrorMask? rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Model_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            return new Model_ErrorMask();
        }
        #endregion

    }
    public class Model_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal? _crystal;
        public bool File;
        public bool BoundRadius;
        public bool Hashes;
        #endregion

        #region Ctors
        public Model_TranslationMask(bool defaultOn)
        {
            this.File = defaultOn;
            this.BoundRadius = defaultOn;
            this.Hashes = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal(ret.ToArray());
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
        {
            ret.Add((File, null));
            ret.Add((BoundRadius, null));
            ret.Add((Hashes, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ModelBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ModelBinaryWriteTranslation Instance = new ModelBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IModelGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.File,
                header: recordTypeConverter.ConvertToCustom(Model_Registration.MODL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BoundRadius,
                header: recordTypeConverter.ConvertToCustom(Model_Registration.MODB_HEADER));
            if (item.Hashes_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Hashes,
                    header: recordTypeConverter.ConvertToCustom(Model_Registration.MODT_HEADER));
            }
        }

        public void Write(
            MutagenWriter writer,
            IModelGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IModelGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ModelBinaryCreateTranslation
    {
        public readonly static ModelBinaryCreateTranslation Instance = new ModelBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ModelBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IModelGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((ModelBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ModelBinaryOverlay :
        BinaryOverlay,
        IModelGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Model_Registration.Instance;
        public static Model_Registration Registration => Model_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ModelCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ModelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IModelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IModelGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IModelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IModelGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ModelXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ModelXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ModelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region File
        private int? _FileLocation;
        public String File => _FileLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _FileLocation.Value, _package.Meta)) : string.Empty;
        #endregion
        #region BoundRadius
        private int? _BoundRadiusLocation;
        public Single BoundRadius => _BoundRadiusLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordSpan(_data, _BoundRadiusLocation.Value, _package.Meta)) : default;
        #endregion
        #region Hashes
        private int? _HashesLocation;
        public bool Hashes_IsSet => _HashesLocation.HasValue;
        public ReadOnlySpan<Byte> Hashes => _HashesLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _HashesLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ModelBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ModelBinaryOverlay ModelFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ModelBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Model_FieldIndex.File) return TryGet<int?>.Failure;
                    _FileLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Model_FieldIndex.File);
                }
                case 0x42444F4D: // MODB
                {
                    _BoundRadiusLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Model_FieldIndex.BoundRadius);
                }
                case 0x54444F4D: // MODT
                {
                    _HashesLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Model_FieldIndex.Hashes);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

