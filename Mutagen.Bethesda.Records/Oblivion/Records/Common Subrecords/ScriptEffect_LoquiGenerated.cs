/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ScriptEffect :
        IScriptEffect,
        ILoquiObjectSetter<ScriptEffect>,
        INamed,
        ILinkSubContainer,
        IEquatable<ScriptEffect>,
        IEqualsMask
    {
        #region Ctor
        public ScriptEffect()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Script
        public IFormIDLink<Script> Script_Property { get; } = new FormIDLink<Script>();
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLink<Script> IScriptEffect.Script_Property => this.Script_Property;
        IScriptGetter IScriptEffectGetter.Script => this.Script_Property.Item;
        IFormIDLinkGetter<IScriptGetter> IScriptEffectGetter.Script_Property => this.Script_Property;
        #endregion
        #region MagicSchool
        private MagicSchool _MagicSchool;
        public MagicSchool MagicSchool
        {
            get => this._MagicSchool;
            set
            {
                this.SCITDataTypeState |= SCITDataType.Has;
                this.SCITDataTypeState &= ~SCITDataType.Break0;
                this._MagicSchool = value;
            }
        }
        #endregion
        #region VisualEffect
        public IEDIDLink<MagicEffect> VisualEffect_Property { get; } = new EDIDLink<MagicEffect>();
        public MagicEffect VisualEffect { get => VisualEffect_Property.Item; set => VisualEffect_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEDIDLink<MagicEffect> IScriptEffect.VisualEffect_Property => this.VisualEffect_Property;
        IMagicEffectGetter IScriptEffectGetter.VisualEffect => this.VisualEffect_Property.Item;
        IEDIDLinkGetter<IMagicEffectGetter> IScriptEffectGetter.VisualEffect_Property => this.VisualEffect_Property;
        #endregion
        #region Flags
        private ScriptEffect.Flag _Flags;
        public ScriptEffect.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.SCITDataTypeState |= SCITDataType.Has;
                this.SCITDataTypeState &= ~SCITDataType.Break0;
                this.SCITDataTypeState &= ~SCITDataType.Break1;
                this._Flags = value;
            }
        }
        #endregion
        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)ScriptEffect_FieldIndex.Name];
            set => _hasBeenSetTracker[(int)ScriptEffect_FieldIndex.Name] = value;
        }
        bool IScriptEffectGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IScriptEffectGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            _Name = value;
            _hasBeenSetTracker[(int)ScriptEffect_FieldIndex.Name] = markSet;
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region SCITDataTypeState
        public ScriptEffect.SCITDataType SCITDataTypeState { get; set; }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScriptEffectGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ScriptEffectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IScriptEffectGetter rhs)) return false;
            return ((ScriptEffectCommon)((IScriptEffectGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(ScriptEffect obj)
        {
            return ((ScriptEffectCommon)((IScriptEffectGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScriptEffectCommon)((IScriptEffectGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => ScriptEffectXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ScriptEffectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ScriptEffect CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ScriptEffect_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ScriptEffect CreateFromXml(
            XElement node,
            out ScriptEffect_ErrorMask errorMask,
            bool doMasks = true,
            ScriptEffect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ScriptEffect_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptEffect CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new ScriptEffect() : null;
                    break;
                default:
                    break;
            }
            var ret = new ScriptEffect();
            try
            {
                ret.SCITDataTypeState |= ScriptEffect.SCITDataType.Break0;
                ret.SCITDataTypeState |= ScriptEffect.SCITDataType.Break1;
                foreach (var elem in node.Elements())
                {
                    ScriptEffectXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ScriptEffect CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            ScriptEffect_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ScriptEffect CreateFromXml(
            string path,
            out ScriptEffect_ErrorMask errorMask,
            ScriptEffect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptEffect CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            ScriptEffect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ScriptEffect CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ScriptEffect_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ScriptEffect CreateFromXml(
            Stream stream,
            out ScriptEffect_ErrorMask errorMask,
            ScriptEffect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptEffect CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ScriptEffect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ScriptEffect_FieldIndex)index)
            {
                case ScriptEffect_FieldIndex.Name:
                    return _hasBeenSetTracker[index];
                case ScriptEffect_FieldIndex.Script:
                case ScriptEffect_FieldIndex.MagicSchool:
                case ScriptEffect_FieldIndex.VisualEffect:
                case ScriptEffect_FieldIndex.Flags:
                case ScriptEffect_FieldIndex.SCITDataTypeState:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = ScriptEffect_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum SCITDataType
        {
            Has = 1,
            Break0 = 2,
            Break1 = 4
        }
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Script_Property;
            yield return VisualEffect_Property;
            yield break;
        }

        public void Link<M>(LinkingPackage<M> package)
            where M : IMod
        {
            Script_Property.Link(package);
            VisualEffect_Property.Link(package);
        }

        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => ScriptEffectBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ScriptEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static ScriptEffect CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ScriptEffect CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out ScriptEffect_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptEffect_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptEffect CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ScriptEffect();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            IScriptEffect item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            IScriptEffect item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54494353: // SCIT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptEffect_FieldIndex.Flags) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.SCITDataTypeState = SCITDataType.Has;
                    }
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: dataFrame,
                        masterReferences: masterReferences,
                        item: item.Script_Property);
                    if (dataFrame.Complete)
                    {
                        item.SCITDataTypeState |= SCITDataType.Break0;
                        return TryGet<int?>.Succeed((int)ScriptEffect_FieldIndex.Script);
                    }
                    if (EnumBinaryTranslation<MagicSchool>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out MagicSchool MagicSchoolParse))
                    {
                        item.MagicSchool = MagicSchoolParse;
                    }
                    else
                    {
                        item.MagicSchool = default(MagicSchool);
                    }
                    Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.ParseInto(
                        frame: dataFrame,
                        item: item.VisualEffect_Property);
                    if (dataFrame.Complete)
                    {
                        item.SCITDataTypeState |= SCITDataType.Break1;
                        return TryGet<int?>.Succeed((int)ScriptEffect_FieldIndex.VisualEffect);
                    }
                    if (EnumBinaryTranslation<ScriptEffect.Flag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out ScriptEffect.Flag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(ScriptEffect.Flag);
                    }
                    return TryGet<int?>.Succeed((int)ScriptEffect_FieldIndex.Flags);
                }
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)ScriptEffect_FieldIndex.Name);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        void IClearable.Clear()
        {
            ((ScriptEffectSetterCommon)((IScriptEffectGetter)this).CommonSetterInstance()).Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptEffect :
        IScriptEffectGetter,
        ILoquiObjectSetter<IScriptEffect>
    {
        new Script Script { get; set; }
        new IFormIDLink<Script> Script_Property { get; }
        new MagicSchool MagicSchool { get; set; }

        new MagicEffect VisualEffect { get; set; }
        new IEDIDLink<MagicEffect> VisualEffect_Property { get; }
        new ScriptEffect.Flag Flags { get; set; }

        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new ScriptEffect.SCITDataType SCITDataTypeState { get; set; }

    }

    public partial interface IScriptEffectGetter :
        ILoquiObject,
        ILoquiObject<IScriptEffectGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterCopyInstance();
        #region Script
        IScriptGetter Script { get; }
        IFormIDLinkGetter<IScriptGetter> Script_Property { get; }

        #endregion
        #region MagicSchool
        MagicSchool MagicSchool { get; }

        #endregion
        #region VisualEffect
        IMagicEffectGetter VisualEffect { get; }
        IEDIDLinkGetter<IMagicEffectGetter> VisualEffect_Property { get; }

        #endregion
        #region Flags
        ScriptEffect.Flag Flags { get; }

        #endregion
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region SCITDataTypeState
        ScriptEffect.SCITDataType SCITDataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class ScriptEffectMixIn
    {
        public static void Clear(this IScriptEffect item)
        {
            ((ScriptEffectSetterCommon)((IScriptEffectGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static ScriptEffect_Mask<bool> GetEqualsMask(
            this IScriptEffectGetter item,
            IScriptEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScriptEffectCommon)((IScriptEffectGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IScriptEffectGetter item,
            string name = null,
            ScriptEffect_Mask<bool> printMask = null)
        {
            return ((ScriptEffectCommon)((IScriptEffectGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IScriptEffectGetter item,
            FileGeneration fg,
            string name = null,
            ScriptEffect_Mask<bool> printMask = null)
        {
            ((ScriptEffectCommon)((IScriptEffectGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IScriptEffectGetter item,
            ScriptEffect_Mask<bool?> checkMask)
        {
            return ((ScriptEffectCommon)((IScriptEffectGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ScriptEffect_Mask<bool> GetHasBeenSetMask(this IScriptEffectGetter item)
        {
            var ret = new ScriptEffect_Mask<bool>();
            ((ScriptEffectCommon)((IScriptEffectGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IScriptEffectGetter item,
            IScriptEffectGetter rhs)
        {
            return ((ScriptEffectCommon)((IScriptEffectGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void CopyFieldsFrom(
            this ScriptEffect lhs,
            ScriptEffect rhs)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void CopyFieldsFrom(
            this ScriptEffect lhs,
            ScriptEffect rhs,
            ScriptEffect_CopyMask copyMask,
            ScriptEffect def = null)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void CopyFieldsFrom(
            this ScriptEffect lhs,
            ScriptEffect rhs,
            out ScriptEffect_ErrorMask errorMask,
            ScriptEffect_CopyMask copyMask = null,
            ScriptEffect def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScriptEffectSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = ScriptEffect_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyFieldsFrom(
            this ScriptEffect lhs,
            ScriptEffect rhs,
            ErrorMaskBuilder errorMask,
            ScriptEffect_CopyMask copyMask = null,
            ScriptEffect def = null)
        {
            ScriptEffectSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ScriptEffect Copy(
            this ScriptEffect item,
            ScriptEffect_CopyMask copyMask = null,
            ScriptEffect def = null)
        {
            return ((ScriptEffectSetterCommon)((IScriptEffectGetter)item).CommonSetterInstance()).Copy(
                item: item,
                copyMask: copyMask,
                def: def);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ScriptEffect_FieldIndex
    {
        Script = 0,
        MagicSchool = 1,
        VisualEffect = 2,
        Flags = 3,
        Name = 4,
        SCITDataTypeState = 5,
    }
    #endregion

    #region Registration
    public class ScriptEffect_Registration : ILoquiRegistration
    {
        public static readonly ScriptEffect_Registration Instance = new ScriptEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 54,
            version: 0);

        public const string GUID = "52a9e0c6-6771-4b3d-a4e7-a082ff8384a9";

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(ScriptEffect_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptEffect_ErrorMask);

        public static readonly Type ClassType = typeof(ScriptEffect);

        public static readonly Type GetterType = typeof(IScriptEffectGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScriptEffect);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptEffect";

        public const string Name = "ScriptEffect";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SCRIPT":
                    return (ushort)ScriptEffect_FieldIndex.Script;
                case "MAGICSCHOOL":
                    return (ushort)ScriptEffect_FieldIndex.MagicSchool;
                case "VISUALEFFECT":
                    return (ushort)ScriptEffect_FieldIndex.VisualEffect;
                case "FLAGS":
                    return (ushort)ScriptEffect_FieldIndex.Flags;
                case "NAME":
                    return (ushort)ScriptEffect_FieldIndex.Name;
                case "SCITDATATYPESTATE":
                    return (ushort)ScriptEffect_FieldIndex.SCITDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                case ScriptEffect_FieldIndex.MagicSchool:
                case ScriptEffect_FieldIndex.VisualEffect:
                case ScriptEffect_FieldIndex.Flags:
                case ScriptEffect_FieldIndex.Name:
                case ScriptEffect_FieldIndex.SCITDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                case ScriptEffect_FieldIndex.MagicSchool:
                case ScriptEffect_FieldIndex.VisualEffect:
                case ScriptEffect_FieldIndex.Flags:
                case ScriptEffect_FieldIndex.Name:
                case ScriptEffect_FieldIndex.SCITDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                case ScriptEffect_FieldIndex.MagicSchool:
                case ScriptEffect_FieldIndex.VisualEffect:
                case ScriptEffect_FieldIndex.Flags:
                case ScriptEffect_FieldIndex.Name:
                case ScriptEffect_FieldIndex.SCITDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                    return "Script";
                case ScriptEffect_FieldIndex.MagicSchool:
                    return "MagicSchool";
                case ScriptEffect_FieldIndex.VisualEffect:
                    return "VisualEffect";
                case ScriptEffect_FieldIndex.Flags:
                    return "Flags";
                case ScriptEffect_FieldIndex.Name:
                    return "Name";
                case ScriptEffect_FieldIndex.SCITDataTypeState:
                    return "SCITDataTypeState";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                case ScriptEffect_FieldIndex.MagicSchool:
                case ScriptEffect_FieldIndex.VisualEffect:
                case ScriptEffect_FieldIndex.Flags:
                case ScriptEffect_FieldIndex.Name:
                case ScriptEffect_FieldIndex.SCITDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                case ScriptEffect_FieldIndex.MagicSchool:
                case ScriptEffect_FieldIndex.VisualEffect:
                case ScriptEffect_FieldIndex.Flags:
                case ScriptEffect_FieldIndex.Name:
                case ScriptEffect_FieldIndex.SCITDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                    return typeof(IFormIDLink<Script>);
                case ScriptEffect_FieldIndex.MagicSchool:
                    return typeof(MagicSchool);
                case ScriptEffect_FieldIndex.VisualEffect:
                    return typeof(IEDIDLink<MagicEffect>);
                case ScriptEffect_FieldIndex.Flags:
                    return typeof(ScriptEffect.Flag);
                case ScriptEffect_FieldIndex.Name:
                    return typeof(String);
                case ScriptEffect_FieldIndex.SCITDataTypeState:
                    return typeof(ScriptEffect.SCITDataType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ScriptEffectXmlWriteTranslation);
        public static readonly RecordType SCIT_HEADER = new RecordType("SCIT");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SCIT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(ScriptEffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ScriptEffectSetterCommon
    {
        public static readonly ScriptEffectSetterCommon Instance = new ScriptEffectSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IScriptEffect item)
        {
            ClearPartial();
            item.Script = default(Script);
            item.MagicSchool = default(MagicSchool);
            item.VisualEffect = default(MagicEffect);
            item.Flags = default(ScriptEffect.Flag);
            item.Name_Unset();
            item.SCITDataTypeState = default(ScriptEffect.SCITDataType);
        }
        
        public ScriptEffect GetNew()
        {
            return new ScriptEffect();
        }
        
        public ScriptEffect Copy(
            ScriptEffect item,
            ScriptEffect_CopyMask copyMask = null,
            ScriptEffect def = null)
        {
            ScriptEffect ret = GetNew();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }
        
    }
    public partial class ScriptEffectCommon
    {
        public static readonly ScriptEffectCommon Instance = new ScriptEffectCommon();

        public ScriptEffect_Mask<bool> GetEqualsMask(
            IScriptEffectGetter item,
            IScriptEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScriptEffect_Mask<bool>();
            ((ScriptEffectCommon)((IScriptEffectGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScriptEffectGetter item,
            IScriptEffectGetter rhs,
            ScriptEffect_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Script = item.Script_Property.FormKey == rhs.Script_Property.FormKey;
            ret.MagicSchool = item.MagicSchool == rhs.MagicSchool;
            ret.VisualEffect = item.VisualEffect_Property.FormKey == rhs.VisualEffect_Property.FormKey;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.SCITDataTypeState = item.SCITDataTypeState == rhs.SCITDataTypeState;
        }
        
        public string ToString(
            IScriptEffectGetter item,
            string name = null,
            ScriptEffect_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IScriptEffectGetter item,
            FileGeneration fg,
            string name = null,
            ScriptEffect_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ScriptEffect =>");
            }
            else
            {
                fg.AppendLine($"{name} (ScriptEffect) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IScriptEffectGetter item,
            FileGeneration fg,
            ScriptEffect_Mask<bool> printMask = null)
        {
            if (printMask?.Script ?? true)
            {
                fg.AppendLine($"Script => {item.Script_Property}");
            }
            if (printMask?.MagicSchool ?? true)
            {
                fg.AppendLine($"MagicSchool => {item.MagicSchool}");
            }
            if (printMask?.VisualEffect ?? true)
            {
                fg.AppendLine($"VisualEffect => {item.VisualEffect_Property}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.SCITDataTypeState ?? true)
            {
                fg.AppendLine($"SCITDataTypeState => {item.SCITDataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            IScriptEffectGetter item,
            ScriptEffect_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IScriptEffectGetter item,
            ScriptEffect_Mask<bool> mask)
        {
            mask.Script = true;
            mask.MagicSchool = true;
            mask.VisualEffect = true;
            mask.Flags = true;
            mask.Name = item.Name_IsSet;
            mask.SCITDataTypeState = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScriptEffectGetter lhs,
            IScriptEffectGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Script_Property.Equals(rhs.Script_Property)) return false;
            if (lhs.MagicSchool != rhs.MagicSchool) return false;
            if (!lhs.VisualEffect_Property.Equals(rhs.VisualEffect_Property)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Name_IsSet != rhs.Name_IsSet) return false;
            if (lhs.Name_IsSet)
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if (lhs.SCITDataTypeState != rhs.SCITDataTypeState) return false;
            return true;
        }
        
        public virtual int GetHashCode(IScriptEffectGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Script).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MagicSchool).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.VisualEffect).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            if (item.Name_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.SCITDataTypeState).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class ScriptEffectSetterCopyCommon
    {
        public static readonly ScriptEffectSetterCopyCommon Instance = new ScriptEffectSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            ScriptEffect item,
            ScriptEffect rhs,
            ScriptEffect def,
            ErrorMaskBuilder errorMask,
            ScriptEffect_CopyMask copyMask)
        {
            if (copyMask?.Script ?? true)
            {
                errorMask?.PushIndex((int)ScriptEffect_FieldIndex.Script);
                item.Script_Property.SetLink(value: rhs.Script_Property);
                errorMask?.PopIndex();
            }
            if (copyMask?.MagicSchool ?? true)
            {
                errorMask?.PushIndex((int)ScriptEffect_FieldIndex.MagicSchool);
                item.MagicSchool = rhs.MagicSchool;
                errorMask?.PopIndex();
            }
            if (copyMask?.VisualEffect ?? true)
            {
                errorMask?.PushIndex((int)ScriptEffect_FieldIndex.VisualEffect);
                item.VisualEffect_Property.SetLink(value: rhs.VisualEffect_Property);
                errorMask?.PopIndex();
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)ScriptEffect_FieldIndex.Flags);
                item.Flags = rhs.Flags;
                errorMask?.PopIndex();
            }
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)ScriptEffect_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SCITDataTypeState ?? true)
            {
                errorMask?.PushIndex((int)ScriptEffect_FieldIndex.SCITDataTypeState);
                item.SCITDataTypeState = rhs.SCITDataTypeState;
                errorMask?.PopIndex();
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ScriptEffect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptEffect_Registration.Instance;
        public static ScriptEffect_Registration Registration => ScriptEffect_Registration.Instance;
        protected object CommonInstance()
        {
            return ScriptEffectCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return ScriptEffectSetterCommon.Instance;
        }
        protected object CommonSetterCopyInstance()
        {
            return ScriptEffectSetterCopyCommon.Instance;
        }
        object IScriptEffectGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IScriptEffectGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IScriptEffectGetter.CommonSetterCopyInstance()
        {
            return this.CommonSetterCopyInstance();
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptEffectXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ScriptEffectXmlWriteTranslation Instance = new ScriptEffectXmlWriteTranslation();

        public static void WriteToNodeXml(
            IScriptEffectGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.SCITDataTypeState.HasFlag(ScriptEffect.SCITDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)ScriptEffect_FieldIndex.Script) ?? true))
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Script),
                        item: item.Script_Property?.FormKey,
                        fieldIndex: (int)ScriptEffect_FieldIndex.Script,
                        errorMask: errorMask);
                }
                if (!item.SCITDataTypeState.HasFlag(ScriptEffect.SCITDataType.Break0))
                {
                    if ((translationMask?.GetShouldTranslate((int)ScriptEffect_FieldIndex.MagicSchool) ?? true))
                    {
                        EnumXmlTranslation<MagicSchool>.Instance.Write(
                            node: node,
                            name: nameof(item.MagicSchool),
                            item: item.MagicSchool,
                            fieldIndex: (int)ScriptEffect_FieldIndex.MagicSchool,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)ScriptEffect_FieldIndex.VisualEffect) ?? true))
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.VisualEffect),
                            item: item.VisualEffect_Property?.FormKey,
                            fieldIndex: (int)ScriptEffect_FieldIndex.VisualEffect,
                            errorMask: errorMask);
                    }
                    if (!item.SCITDataTypeState.HasFlag(ScriptEffect.SCITDataType.Break1))
                    {
                        if ((translationMask?.GetShouldTranslate((int)ScriptEffect_FieldIndex.Flags) ?? true))
                        {
                            EnumXmlTranslation<ScriptEffect.Flag>.Instance.Write(
                                node: node,
                                name: nameof(item.Flags),
                                item: item.Flags,
                                fieldIndex: (int)ScriptEffect_FieldIndex.Flags,
                                errorMask: errorMask);
                        }
                    }
                }
                else
                {
                    node.Add(new XElement("HasSCITDataType"));
                }
            }
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)ScriptEffect_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)ScriptEffect_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ScriptEffect_FieldIndex.SCITDataTypeState) ?? true))
            {
                EnumXmlTranslation<ScriptEffect.SCITDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.SCITDataTypeState),
                    item: item.SCITDataTypeState,
                    fieldIndex: (int)ScriptEffect_FieldIndex.SCITDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IScriptEffectGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ScriptEffect");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ScriptEffect");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IScriptEffectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IScriptEffectGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IScriptEffectGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ScriptEffectXmlCreateTranslation
    {
        public readonly static ScriptEffectXmlCreateTranslation Instance = new ScriptEffectXmlCreateTranslation();

        public static void FillPublicXml(
            IScriptEffect item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ScriptEffectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IScriptEffect item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Script":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Script_Property,
                        fieldIndex: (int)ScriptEffect_FieldIndex.Script,
                        errorMask: errorMask);
                    item.SCITDataTypeState |= ScriptEffect.SCITDataType.Has;
                    break;
                case "MagicSchool":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptEffect_FieldIndex.MagicSchool);
                        if (EnumXmlTranslation<MagicSchool>.Instance.Parse(
                            node: node,
                            item: out MagicSchool MagicSchoolParse,
                            errorMask: errorMask))
                        {
                            item.MagicSchool = MagicSchoolParse;
                        }
                        else
                        {
                            item.MagicSchool = default(MagicSchool);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.SCITDataTypeState &= ~ScriptEffect.SCITDataType.Break0;
                    break;
                case "VisualEffect":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.VisualEffect_Property,
                        fieldIndex: (int)ScriptEffect_FieldIndex.VisualEffect,
                        errorMask: errorMask);
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptEffect_FieldIndex.Flags);
                        if (EnumXmlTranslation<ScriptEffect.Flag>.Instance.Parse(
                            node: node,
                            item: out ScriptEffect.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(ScriptEffect.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.SCITDataTypeState &= ~ScriptEffect.SCITDataType.Break1;
                    break;
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptEffect_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SCITDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptEffect_FieldIndex.SCITDataTypeState);
                        if (EnumXmlTranslation<ScriptEffect.SCITDataType>.Instance.Parse(
                            node: node,
                            item: out ScriptEffect.SCITDataType SCITDataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.SCITDataTypeState = SCITDataTypeStateParse;
                        }
                        else
                        {
                            item.SCITDataTypeState = default(ScriptEffect.SCITDataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ScriptEffectXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IScriptEffectGetter item,
            XElement node,
            out ScriptEffect_ErrorMask errorMask,
            bool doMasks = true,
            ScriptEffect_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ScriptEffectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptEffect_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IScriptEffectGetter item,
            string path,
            out ScriptEffect_ErrorMask errorMask,
            ScriptEffect_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptEffectGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptEffectGetter item,
            Stream stream,
            out ScriptEffect_ErrorMask errorMask,
            ScriptEffect_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IScriptEffectGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IScriptEffectGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((ScriptEffectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IScriptEffectGetter item,
            XElement node,
            string name = null,
            ScriptEffect_TranslationMask translationMask = null)
        {
            ((ScriptEffectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IScriptEffectGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ScriptEffectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptEffectGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ScriptEffectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class ScriptEffect_Mask<T> : IMask<T>, IEquatable<ScriptEffect_Mask<T>>
    {
        #region Ctors
        public ScriptEffect_Mask()
        {
        }

        public ScriptEffect_Mask(T initialValue)
        {
            this.Script = initialValue;
            this.MagicSchool = initialValue;
            this.VisualEffect = initialValue;
            this.Flags = initialValue;
            this.Name = initialValue;
            this.SCITDataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Script;
        public T MagicSchool;
        public T VisualEffect;
        public T Flags;
        public T Name;
        public T SCITDataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptEffect_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptEffect_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.MagicSchool, rhs.MagicSchool)) return false;
            if (!object.Equals(this.VisualEffect, rhs.VisualEffect)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.SCITDataTypeState, rhs.SCITDataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.MagicSchool?.GetHashCode());
            ret = ret.CombineHashCode(this.VisualEffect?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.SCITDataTypeState?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Script)) return false;
            if (!eval(this.MagicSchool)) return false;
            if (!eval(this.VisualEffect)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Name)) return false;
            if (!eval(this.SCITDataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public ScriptEffect_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ScriptEffect_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ScriptEffect_Mask<R> obj, Func<T, R> eval)
        {
            obj.Script = eval(this.Script);
            obj.MagicSchool = eval(this.MagicSchool);
            obj.VisualEffect = eval(this.VisualEffect);
            obj.Flags = eval(this.Flags);
            obj.Name = eval(this.Name);
            obj.SCITDataTypeState = eval(this.SCITDataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ScriptEffect_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ScriptEffect_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ScriptEffect_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.MagicSchool ?? true)
                {
                    fg.AppendLine($"MagicSchool => {MagicSchool}");
                }
                if (printMask?.VisualEffect ?? true)
                {
                    fg.AppendLine($"VisualEffect => {VisualEffect}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.SCITDataTypeState ?? true)
                {
                    fg.AppendLine($"SCITDataTypeState => {SCITDataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ScriptEffect_ErrorMask : IErrorMask, IErrorMask<ScriptEffect_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Script;
        public Exception MagicSchool;
        public Exception VisualEffect;
        public Exception Flags;
        public Exception Name;
        public Exception SCITDataTypeState;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                    return Script;
                case ScriptEffect_FieldIndex.MagicSchool:
                    return MagicSchool;
                case ScriptEffect_FieldIndex.VisualEffect:
                    return VisualEffect;
                case ScriptEffect_FieldIndex.Flags:
                    return Flags;
                case ScriptEffect_FieldIndex.Name:
                    return Name;
                case ScriptEffect_FieldIndex.SCITDataTypeState:
                    return SCITDataTypeState;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case ScriptEffect_FieldIndex.MagicSchool:
                    this.MagicSchool = ex;
                    break;
                case ScriptEffect_FieldIndex.VisualEffect:
                    this.VisualEffect = ex;
                    break;
                case ScriptEffect_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case ScriptEffect_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case ScriptEffect_FieldIndex.SCITDataTypeState:
                    this.SCITDataTypeState = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case ScriptEffect_FieldIndex.MagicSchool:
                    this.MagicSchool = (Exception)obj;
                    break;
                case ScriptEffect_FieldIndex.VisualEffect:
                    this.VisualEffect = (Exception)obj;
                    break;
                case ScriptEffect_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case ScriptEffect_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case ScriptEffect_FieldIndex.SCITDataTypeState:
                    this.SCITDataTypeState = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Script != null) return true;
            if (MagicSchool != null) return true;
            if (VisualEffect != null) return true;
            if (Flags != null) return true;
            if (Name != null) return true;
            if (SCITDataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ScriptEffect_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"MagicSchool => {MagicSchool}");
            fg.AppendLine($"VisualEffect => {VisualEffect}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"SCITDataTypeState => {SCITDataTypeState}");
        }
        #endregion

        #region Combine
        public ScriptEffect_ErrorMask Combine(ScriptEffect_ErrorMask rhs)
        {
            var ret = new ScriptEffect_ErrorMask();
            ret.Script = this.Script.Combine(rhs.Script);
            ret.MagicSchool = this.MagicSchool.Combine(rhs.MagicSchool);
            ret.VisualEffect = this.VisualEffect.Combine(rhs.VisualEffect);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Name = this.Name.Combine(rhs.Name);
            ret.SCITDataTypeState = this.SCITDataTypeState.Combine(rhs.SCITDataTypeState);
            return ret;
        }
        public static ScriptEffect_ErrorMask Combine(ScriptEffect_ErrorMask lhs, ScriptEffect_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ScriptEffect_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ScriptEffect_ErrorMask();
        }
        #endregion

    }
    public class ScriptEffect_CopyMask
    {
        public ScriptEffect_CopyMask()
        {
        }

        public ScriptEffect_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Script = defaultOn;
            this.MagicSchool = defaultOn;
            this.VisualEffect = defaultOn;
            this.Flags = defaultOn;
            this.Name = defaultOn;
            this.SCITDataTypeState = defaultOn;
        }

        #region Members
        public bool Script;
        public bool MagicSchool;
        public bool VisualEffect;
        public bool Flags;
        public bool Name;
        public bool SCITDataTypeState;
        #endregion

    }

    public class ScriptEffect_DeepCopyMask
    {
        public ScriptEffect_DeepCopyMask()
        {
        }

        public ScriptEffect_DeepCopyMask(bool defaultOn)
        {
            this.Script = defaultOn;
            this.MagicSchool = defaultOn;
            this.VisualEffect = defaultOn;
            this.Flags = defaultOn;
            this.Name = defaultOn;
            this.SCITDataTypeState = defaultOn;
        }

        #region Members
        public bool Script;
        public bool MagicSchool;
        public bool VisualEffect;
        public bool Flags;
        public bool Name;
        public bool SCITDataTypeState;
        #endregion

    }

    public class ScriptEffect_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Script;
        public bool MagicSchool;
        public bool VisualEffect;
        public bool Flags;
        public bool Name;
        public bool SCITDataTypeState;
        #endregion

        #region Ctors
        public ScriptEffect_TranslationMask()
        {
        }

        public ScriptEffect_TranslationMask(bool defaultOn)
        {
            this.Script = defaultOn;
            this.MagicSchool = defaultOn;
            this.VisualEffect = defaultOn;
            this.Flags = defaultOn;
            this.Name = defaultOn;
            this.SCITDataTypeState = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Script, null));
            ret.Add((MagicSchool, null));
            ret.Add((VisualEffect, null));
            ret.Add((Flags, null));
            ret.Add((Name, null));
            ret.Add((SCITDataTypeState, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptEffectBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ScriptEffectBinaryWriteTranslation Instance = new ScriptEffectBinaryWriteTranslation();

        public static void Write_Embedded(
            IScriptEffectGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
        }

        public static void Write_RecordTypes(
            IScriptEffectGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.SCITDataTypeState.HasFlag(ScriptEffect.SCITDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(ScriptEffect_Registration.SCIT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Script_Property,
                        masterReferences: masterReferences);
                    if (!item.SCITDataTypeState.HasFlag(ScriptEffect.SCITDataType.Break0))
                    {
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<MagicSchool>.Instance.Write(
                            writer,
                            item.MagicSchool,
                            length: 4);
                        Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.VisualEffect_Property);
                        if (!item.SCITDataTypeState.HasFlag(ScriptEffect.SCITDataType.Break1))
                        {
                            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ScriptEffect.Flag>.Instance.Write(
                                writer,
                                item.Flags,
                                length: 4);
                        }
                    }
                }
            }
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(ScriptEffect_Registration.FULL_HEADER),
                    nullable: false);
            }
        }

        public void Write(
            MutagenWriter writer,
            IScriptEffectGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IScriptEffectGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class ScriptEffectBinaryCreateTranslation
    {
        public readonly static ScriptEffectBinaryCreateTranslation Instance = new ScriptEffectBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ScriptEffectBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IScriptEffectGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out ScriptEffect_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ScriptEffectBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptEffect_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IScriptEffectGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((ScriptEffectBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IScriptEffectGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((ScriptEffectBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptEffectBinaryWrapper :
        BinaryWrapper,
        IScriptEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptEffect_Registration.Instance;
        public static ScriptEffect_Registration Registration => ScriptEffect_Registration.Instance;
        protected object CommonInstance()
        {
            return ScriptEffectCommon.Instance;
        }
        object IScriptEffectGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IScriptEffectGetter.CommonSetterInstance()
        {
            return null;
        }
        object IScriptEffectGetter.CommonSetterCopyInstance()
        {
            return null;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScriptEffectGetter)rhs, include);

        protected object XmlWriteTranslator => ScriptEffectXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ScriptEffectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => ScriptEffectBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ScriptEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        private int? _SCITLocation;
        public ScriptEffect.SCITDataType SCITDataTypeState { get; private set; }
        #region Script
        private int _ScriptLocation => _SCITLocation.Value + 0x0;
        private bool _Script_IsSet => _SCITLocation.HasValue;
        public IFormIDLinkGetter<IScriptGetter> Script_Property => _Script_IsSet ? new FormIDLink<IScriptGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ScriptLocation, 4)))) : FormIDLink<IScriptGetter>.Empty;
        public IScriptGetter Script => default;
        #endregion
        #region MagicSchool
        private int _MagicSchoolLocation => _SCITLocation.Value + 0x4;
        private bool _MagicSchool_IsSet => _SCITLocation.HasValue && !SCITDataTypeState.HasFlag(ScriptEffect.SCITDataType.Break0);
        public MagicSchool MagicSchool => _MagicSchool_IsSet ? (MagicSchool)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_MagicSchoolLocation, 4)) : default;
        #endregion
        #region VisualEffect
        private int _VisualEffectLocation => _SCITLocation.Value + 0x8;
        private bool _VisualEffect_IsSet => _SCITLocation.HasValue && !SCITDataTypeState.HasFlag(ScriptEffect.SCITDataType.Break0);
        public IEDIDLinkGetter<IMagicEffectGetter> VisualEffect_Property => _VisualEffect_IsSet ? EDIDLink<IMagicEffectGetter>.FactoryFromCache(edidRecordType: new RecordType(BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_VisualEffectLocation, 4))), targetRecordType: MagicEffect_Registration.MGEF_HEADER, package: _package) : EDIDLink<IMagicEffectGetter>.Empty;
        public IMagicEffectGetter VisualEffect => default;
        #endregion
        #region Flags
        private int _FlagsLocation => _SCITLocation.Value + 0xC;
        private bool _Flags_IsSet => _SCITLocation.HasValue && !SCITDataTypeState.HasFlag(ScriptEffect.SCITDataType.Break1);
        public ScriptEffect.Flag Flags => _Flags_IsSet ? (ScriptEffect.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 4)) : default;
        #endregion
        #region Name
        private int? _NameLocation;
        public bool Name_IsSet => _NameLocation.HasValue;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default;
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected ScriptEffectBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this._data = bytes;
        }

        public static ScriptEffectBinaryWrapper ScriptEffectFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new ScriptEffectBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x54494353: // SCIT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptEffect_FieldIndex.Flags) return TryGet<int?>.Failure;
                    _SCITLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.SCITDataTypeState = ScriptEffect.SCITDataType.Has;
                    var subLen = _package.Meta.SubRecord(_data.Slice((stream.Position - offset))).RecordLength;
                    if (subLen <= 0x4)
                    {
                        this.SCITDataTypeState |= ScriptEffect.SCITDataType.Break0;
                    }
                    if (subLen <= 0xC)
                    {
                        this.SCITDataTypeState |= ScriptEffect.SCITDataType.Break1;
                    }
                    return TryGet<int?>.Succeed((int)ScriptEffect_FieldIndex.Flags);
                }
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ScriptEffect_FieldIndex.Name);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

