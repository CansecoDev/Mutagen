/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ListGroup<T> :
        LoquiNotifyingObject,
        IListGroupInternal<T>,
        ILoquiObjectSetter<ListGroup<T>>,
        ILinkSubContainer,
        IEquatable<ListGroup<T>>,
        IEqualsMask
        where T : IXmlItem, IBinaryItem, ILoquiObjectSetter<T>
    {
        #region Ctor
        public ListGroup()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        static ListGroup()
        {
            T_RecordType = (RecordType)LoquiRegistration.GetRegister(typeof(T)).GetType().GetField(Mutagen.Bethesda.Constants.TRIGGERING_RECORDTYPE_MEMBER).GetValue(null);
        }

        #region GroupType
        public GroupTypeEnum GroupType { get; set; }
        #endregion
        #region LastModified
        public Int32 LastModified { get; set; }
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ExtendedList<T> _Items = new ExtendedList<T>();
        public IExtendedList<T> Items => _Items;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IExtendedList<T> IListGroup<T>.Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<T> IListGroupGetter<T>.Items => _Items;
        #endregion

        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IListGroupInternalGetter<T>)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ListGroupMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IListGroupInternalGetter<T> rhs)) return false;
            return ((ListGroupCommon<T>)((IListGroupInternalGetter<T>)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(ListGroup<T> obj)
        {
            return ((ListGroupCommon<T>)((IListGroupInternalGetter<T>)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((ListGroupCommon<T>)((IListGroupInternalGetter<T>)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => ListGroupXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ListGroupXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ListGroup<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            XElement node,
            out ListGroup_ErrorMask<T_ErrMask> errorMask,
            bool doMasks = true,
            ListGroup_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ListGroup_ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
            return ret;
        }

        public static ListGroup<T> CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new ListGroup<T>() : null;
                    break;
                default:
                    break;
            }
            var ret = new ListGroup<T>();
            try
            {
                foreach (var elem in node.Elements())
                {
                    ListGroupXmlCreateTranslation<T>.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ListGroup<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            string path,
            out ListGroup_ErrorMask<T_ErrMask> errorMask,
            ListGroup_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ListGroup<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            string path,
            ErrorMaskBuilder errorMask,
            ListGroup_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ListGroup<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            Stream stream,
            out ListGroup_ErrorMask<T_ErrMask> errorMask,
            ListGroup_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ListGroup<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ListGroup_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ListGroup_FieldIndex)index)
            {
                case ListGroup_FieldIndex.GroupType:
                case ListGroup_FieldIndex.LastModified:
                case ListGroup_FieldIndex.Items:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public static readonly RecordType T_RecordType;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in Items.WhereCastable<T, ILinkContainer>()
                .SelectMany((f) => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public void Link<M>(LinkingPackage<M> package)
            where M : IMod
        {
            foreach (var item in Items.WhereCastable<T, ILinkSubContainer>())
            {
                item.Link(package: package);
            }
        }

        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => ListGroupBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ListGroupBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static async Task<(ListGroup<T> Object, ListGroup_ErrorMask<T_ErrMask> ErrorMask)> CreateFromBinaryWithErrorMask<T_ErrMask>(
            MutagenFrame frame,
            MasterReferences masterReferences,
            bool doMasks = true)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = await CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder).ConfigureAwait(false);
            return (ret, ListGroup_ErrorMask<T_ErrMask>.Factory(errorMaskBuilder));
        }

        public static async Task<ListGroup<T>> CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ListGroup<T>();
            await UtilityAsyncTranslation.GroupParse(
                record: ret,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes).ConfigureAwait(false);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            ListGroup<T> item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ListGroupBinaryCreateTranslation<T>.FillBinaryContainedRecordTypeCustomPublic(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            if (EnumBinaryTranslation<GroupTypeEnum>.Instance.Parse(
                frame: frame.SpawnWithLength(4),
                item: out GroupTypeEnum GroupTypeParse))
            {
                item.GroupType = GroupTypeParse;
            }
            else
            {
                item.GroupType = default(GroupTypeEnum);
            }
            item.LastModified = frame.ReadInt32();
        }

        protected static async Task<TryGet<int?>> FillBinaryRecordTypes(
            ListGroup<T> item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                default:
                    if (nextRecordType.Equals(T_RecordType))
                    {
                        await Mutagen.Bethesda.Binary.ListAsyncBinaryTranslation<T>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: T_RecordType,
                            thread: true,
                            item: item.Items,
                            fieldIndex: (int)ListGroup_FieldIndex.Items,
                            lengthLength: 4,
                            errorMask: errorMask,
                            transl: async (MutagenFrame r, ErrorMaskBuilder listErrMask) =>
                            {
                                return await LoquiBinaryAsyncTranslation<T>.Instance.Parse(
                                    frame: r,
                                    errorMask: listErrMask,
                                    masterReferences: masterReferences).ConfigureAwait(false);
                            }).ConfigureAwait(false);
                        return TryGet<int?>.Failure;
                    }
                    errorMask?.ReportWarning($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
                    frame.Position += contentLength + frame.MetaData.MajorConstants.HeaderLength;
                    return TryGet<int?>.Succeed(null);
            }
        }

        #endregion

        public ListGroup<T> Copy<T_CopyMask>(
            ListGroup_CopyMask<T_CopyMask> copyMask = null,
            ListGroup<T> def = null)
            where T_CopyMask : class, new()
        {
            return ListGroup<T>.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ListGroup<T> Copy<T_CopyMask>(
            ListGroup<T> item,
            ListGroup_CopyMask<T_CopyMask> copyMask = null,
            ListGroup<T> def = null)
            where T_CopyMask : class, new()
        {
            ListGroup<T> ret;
            if (item.GetType().Equals(typeof(ListGroup<T>)))
            {
                ret = new ListGroup<T>();
            }
            else
            {
                ret = (ListGroup<T>)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom<T_CopyMask>(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static ListGroup<T> Copy_ToLoqui<T_CopyMask>(
            ListGroup<T> item,
            ListGroup_CopyMask<T_CopyMask> copyMask = null,
            ListGroup<T> def = null)
            where T_CopyMask : class, new()
        {
            ListGroup<T> ret;
            if (item.GetType().Equals(typeof(ListGroup<T>)))
            {
                ret = new ListGroup<T>() as ListGroup<T>;
            }
            else
            {
                ret = (ListGroup<T>)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom<T_CopyMask>(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom<T_CopyMask>(ListGroup<T> rhs)
            where T_CopyMask : class, new()
        {
            this.CopyFieldsFrom<ErrorMaskPlaceholder, T_CopyMask>(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom<T_CopyMask>(
            ListGroup<T> rhs,
            ListGroup_CopyMask<T_CopyMask> copyMask,
            ListGroup<T> def = null)
            where T_CopyMask : class, new()
        {
            this.CopyFieldsFrom<ErrorMaskPlaceholder, T_CopyMask>(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom<T_ErrMask, T_CopyMask>(
            ListGroup<T> rhs,
            out ListGroup_ErrorMask<T_ErrMask> errorMask,
            ListGroup_CopyMask<T_CopyMask> copyMask = null,
            ListGroup<T> def = null,
            bool doMasks = true)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_CopyMask : class, new()
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ListGroupSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = ListGroup_ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom<T_CopyMask>(
            ListGroup<T> rhs,
            ErrorMaskBuilder errorMask,
            ListGroup_CopyMask<T_CopyMask> copyMask = null,
            ListGroup<T> def = null)
            where T_CopyMask : class, new()
        {
            ListGroupSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.GroupType:
                    this.GroupType = (GroupTypeEnum)obj;
                    break;
                case ListGroup_FieldIndex.LastModified:
                    this.LastModified = (Int32)obj;
                    break;
                case ListGroup_FieldIndex.Items:
                    this._Items.SetTo((IExtendedList<T>)obj);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            ListGroupSetterCommon<T>.Instance.Clear(this);
        }

        public static ListGroup<T> Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new ListGroup<T>();
            foreach (var pair in fields)
            {
                CopyInInternal_ListGroup(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_ListGroup(ListGroup<T> obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ListGroup_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case ListGroup_FieldIndex.GroupType:
                    obj.GroupType = (GroupTypeEnum)pair.Value;
                    break;
                case ListGroup_FieldIndex.LastModified:
                    obj.LastModified = (Int32)pair.Value;
                    break;
                case ListGroup_FieldIndex.Items:
                    obj._Items.SetTo((IExtendedList<T>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IListGroup<T> :
        IListGroupInternalGetter<T>,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<IListGroupInternal<T>>
        where T : IXmlItem, IBinaryItem, ILoquiObjectSetter<T>
    {
        new GroupTypeEnum GroupType { get; set; }

        new Int32 LastModified { get; set; }

        new IExtendedList<T> Items { get; }
        void CopyFieldsFrom<T_CopyMask>(
            ListGroup<T> rhs,
            ErrorMaskBuilder errorMask = null,
            ListGroup_CopyMask<T_CopyMask> copyMask = null,
            ListGroup<T> def = null)
            where T_CopyMask : class, new();
    }

    public partial interface IListGroupInternal<T> :
        IListGroup<T>,
        IListGroupInternalGetter<T>
        where T : IXmlItem, IBinaryItem, ILoquiObjectSetter<T>
    {
    }

    public partial interface IListGroupGetter<out T> :
        ILoquiObject,
        IMajorRecordGetterEnumerable,
        ILoquiObject<IListGroupInternalGetter<T>>,
        IXmlItem,
        IBinaryItem
        where T : IXmlItem, IBinaryItem, ILoquiObject<T>
    {
        #region GroupType
        GroupTypeEnum GroupType { get; }

        #endregion
        #region LastModified
        Int32 LastModified { get; }

        #endregion
        #region Items
        IReadOnlyList<T> Items { get; }
        #endregion

    }

    public partial interface IListGroupInternalGetter<out T> : IListGroupGetter<T>
        where T : IXmlItem, IBinaryItem, ILoquiObject<T>
    {
        object CommonInstance();
        object CommonSetterInstance();
        object CommonSetterCopyInstance<T_CopyMask>()
            where T_CopyMask : class, new();

    }

    #endregion

    #region Common MixIn
    public static class ListGroupMixIn
    {
        public static void Clear<T>(this IListGroupInternal<T> item)
            where T : IXmlItem, IBinaryItem, ILoquiObjectSetter<T>
        {
            ((ListGroupSetterCommon<T>)((IListGroupInternalGetter<T>)item).CommonSetterInstance()).Clear(item: item);
        }

        public static ListGroup_Mask<bool> GetEqualsMask<T>(
            this IListGroupInternalGetter<T> item,
            IListGroupInternalGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            return ((ListGroupCommon<T>)((IListGroupInternalGetter<T>)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString<T>(
            this IListGroupInternalGetter<T> item,
            string name = null,
            ListGroup_Mask<bool> printMask = null)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            return ((ListGroupCommon<T>)((IListGroupInternalGetter<T>)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString<T>(
            this IListGroupInternalGetter<T> item,
            FileGeneration fg,
            string name = null,
            ListGroup_Mask<bool> printMask = null)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            ((ListGroupCommon<T>)((IListGroupInternalGetter<T>)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet<T>(
            this IListGroupInternalGetter<T> item,
            ListGroup_Mask<bool?> checkMask)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            return ((ListGroupCommon<T>)((IListGroupInternalGetter<T>)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ListGroup_Mask<bool> GetHasBeenSetMask<T>(this IListGroupInternalGetter<T> item)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            var ret = new ListGroup_Mask<bool>();
            ((ListGroupCommon<T>)((IListGroupInternalGetter<T>)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals<T>(
            this IListGroupInternalGetter<T> item,
            IListGroupInternalGetter<T> rhs)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            return ((ListGroupCommon<T>)((IListGroupInternalGetter<T>)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        #region Mutagen
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords<T>(this IListGroupInternalGetter<T> obj)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            return ((ListGroupCommon<T>)((IListGroupInternalGetter<T>)obj).CommonInstance()).EnumerateMajorRecords(obj: obj);
        }

        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords<T>(this IListGroupInternal<T> obj)
            where T : IXmlItem, IBinaryItem, ILoquiObjectSetter<T>
        {
            return ((ListGroupSetterCommon<T>)((IListGroupInternalGetter<T>)obj).CommonSetterInstance()).EnumerateMajorRecords(obj: obj);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ListGroup_FieldIndex
    {
        GroupType = 0,
        LastModified = 1,
        Items = 2,
    }
    #endregion

    #region Registration
    public class ListGroup_Registration : ILoquiRegistration
    {
        public static readonly ListGroup_Registration Instance = new ListGroup_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 171,
            version: 0);

        public const string GUID = "d6349d4b-0de2-4c44-bd06-d005ee62aa00";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(ListGroup_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ListGroup_ErrorMask<>);

        public static readonly Type ClassType = typeof(ListGroup<>);

        public static readonly Type GetterType = typeof(IListGroupGetter<>);

        public static readonly Type InternalGetterType = typeof(IListGroupInternalGetter<>);

        public static readonly Type SetterType = typeof(IListGroup<>);

        public static readonly Type InternalSetterType = typeof(IListGroupInternal<>);

        public const string FullName = "Mutagen.Bethesda.Oblivion.ListGroup";

        public const string Name = "ListGroup";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 1;

        public static readonly Type GenericRegistrationType = typeof(ListGroup_Registration<>);

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "GROUPTYPE":
                    return (ushort)ListGroup_FieldIndex.GroupType;
                case "LASTMODIFIED":
                    return (ushort)ListGroup_FieldIndex.LastModified;
                case "ITEMS":
                    return (ushort)ListGroup_FieldIndex.Items;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.Items:
                    return true;
                case ListGroup_FieldIndex.GroupType:
                case ListGroup_FieldIndex.LastModified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.Items:
                    return true;
                case ListGroup_FieldIndex.GroupType:
                case ListGroup_FieldIndex.LastModified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.GroupType:
                case ListGroup_FieldIndex.LastModified:
                case ListGroup_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.GroupType:
                    return "GroupType";
                case ListGroup_FieldIndex.LastModified:
                    return "LastModified";
                case ListGroup_FieldIndex.Items:
                    return "Items";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.GroupType:
                case ListGroup_FieldIndex.LastModified:
                case ListGroup_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.GroupType:
                case ListGroup_FieldIndex.LastModified:
                case ListGroup_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index) => throw new ArgumentException("Cannot get nth type for a generic object here.  Use generic registration instead.");

        public static readonly Type XmlWriteTranslation = typeof(ListGroupXmlWriteTranslation);
        public static readonly RecordType GRUP_HEADER = new RecordType("GRUP");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = GRUP_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(ListGroupBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }

    public class ListGroup_Registration<T> : ListGroup_Registration
        where T : IXmlItem, IBinaryItem, ILoquiObjectSetter<T>
    {
        public static readonly ListGroup_Registration<T> GenericInstance = new ListGroup_Registration<T>();

        public new static Type GetNthType(ushort index)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.GroupType:
                    return typeof(GroupTypeEnum);
                case ListGroup_FieldIndex.LastModified:
                    return typeof(Int32);
                case ListGroup_FieldIndex.Items:
                    return typeof(IExtendedList<T>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    #endregion

    #region Common
    public partial class ListGroupSetterCommon<T>
        where T : IXmlItem, IBinaryItem, ILoquiObjectSetter<T>
    {
        public static readonly ListGroupSetterCommon<T> Instance = new ListGroupSetterCommon<T>();

        partial void ClearPartial();
        
        public virtual void Clear(IListGroupInternal<T> item)
        {
            ClearPartial();
            item.GroupType = default(GroupTypeEnum);
            item.LastModified = default(Int32);
            item.Items.Clear();
        }
        
        #region Mutagen
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(IListGroupInternal<T> obj)
        {
            foreach (var subItem in obj.Items.WhereCastable<T, IMajorRecordEnumerable>())
            {
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
        }
        #endregion
        
    }
    public partial class ListGroupCommon<T>
        where T : IXmlItem, IBinaryItem, ILoquiObject<T>
    {
        public static readonly ListGroupCommon<T> Instance = new ListGroupCommon<T>();

        public ListGroup_Mask<bool> GetEqualsMask(
            IListGroupInternalGetter<T> item,
            IListGroupInternalGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ListGroup_Mask<bool>();
            ((ListGroupCommon<T>)((IListGroupInternalGetter<T>)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IListGroupInternalGetter<T> item,
            IListGroupInternalGetter<T> rhs,
            ListGroup_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.GroupType = item.GroupType == rhs.GroupType;
            ret.LastModified = item.LastModified == rhs.LastModified;
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsIMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            IListGroupInternalGetter<T> item,
            string name = null,
            ListGroup_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IListGroupInternalGetter<T> item,
            FileGeneration fg,
            string name = null,
            ListGroup_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ListGroup<{typeof(T).Name}> =>");
            }
            else
            {
                fg.AppendLine($"{name} (ListGroup<{typeof(T).Name}>) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IListGroupInternalGetter<T> item,
            FileGeneration fg,
            ListGroup_Mask<bool> printMask = null)
        {
            if (printMask?.GroupType ?? true)
            {
                fg.AppendLine($"GroupType => {item.GroupType}");
            }
            if (printMask?.LastModified ?? true)
            {
                fg.AppendLine($"LastModified => {item.LastModified}");
            }
            if (printMask?.Items?.Overall ?? true)
            {
                fg.AppendLine("Items =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Items)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IListGroupInternalGetter<T> item,
            ListGroup_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IListGroupInternalGetter<T> item,
            ListGroup_Mask<bool> mask)
        {
            mask.GroupType = true;
            mask.LastModified = true;
            mask.Items = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, IMask<bool>>>>(true, item.Items.WithIndex().Select((i) => new MaskItemIndexed<bool, IMask<bool>>(i.Index, true, i.Item.GetHasBeenSetIMask())));
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IListGroupInternalGetter<T> lhs,
            IListGroupInternalGetter<T> rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.GroupType != rhs.GroupType) return false;
            if (lhs.LastModified != rhs.LastModified) return false;
            if (!lhs.Items.SequenceEqual(rhs.Items)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IListGroupInternalGetter<T> item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.GroupType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LastModified).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Items).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        #region Mutagen
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(IListGroupInternalGetter<T> obj)
        {
            foreach (var subItem in obj.Items.WhereCastable<T, IMajorRecordGetterEnumerable>())
            {
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
        }
        #endregion
        
    }
    public partial class ListGroupSetterCopyCommon
    {
        public static readonly ListGroupSetterCopyCommon Instance = new ListGroupSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom<T, T_CopyMask>(
            ListGroup<T> item,
            ListGroup<T> rhs,
            ListGroup<T> def,
            ErrorMaskBuilder errorMask,
            ListGroup_CopyMask<T_CopyMask> copyMask)
            where T : IXmlItem, IBinaryItem, ILoquiObjectSetter<T>
            where T_CopyMask : class, new()
        {
            if (copyMask?.GroupType ?? true)
            {
                errorMask?.PushIndex((int)ListGroup_FieldIndex.GroupType);
                item.GroupType = rhs.GroupType;
                errorMask?.PopIndex();
            }
            if (copyMask?.LastModified ?? true)
            {
                errorMask?.PushIndex((int)ListGroup_FieldIndex.LastModified);
                item.LastModified = rhs.LastModified;
                errorMask?.PopIndex();
            }
            if (copyMask?.Items.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)ListGroup_FieldIndex.Items);
                try
                {
                    item.Items.SetToWithDefault<T, T>(
                        rhs: rhs.Items,
                        def: def?.Items,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Items.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (T)r;
                                case CopyOption.MakeCopy:
                                    return LoquiRegistration.GetCopyFunc<T>()(r, null, d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Items.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ListGroup<T>
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ListGroup_Registration.Instance;
        public static ListGroup_Registration Registration => ListGroup_Registration.Instance;
        protected object CommonInstance()
        {
            return ListGroupCommon<T>.Instance;
        }
        protected object CommonSetterInstance()
        {
            return ListGroupSetterCommon<T>.Instance;
        }
        protected object CommonSetterCopyInstance<T_CopyMask>()
            where T_CopyMask : class, new()
        {
            return ListGroupSetterCopyCommon.Instance;
        }
        object IListGroupInternalGetter<T>.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IListGroupInternalGetter<T>.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IListGroupInternalGetter<T>.CommonSetterCopyInstance<T_CopyMask>()
        {
            return this.CommonSetterCopyInstance<T_CopyMask>();
        }

        #endregion

    }
}
#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ListGroupXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ListGroupXmlWriteTranslation Instance = new ListGroupXmlWriteTranslation();

        public static void WriteToNodeXml<T>(
            IListGroupInternalGetter<T> item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            if ((translationMask?.GetShouldTranslate((int)ListGroup_FieldIndex.GroupType) ?? true))
            {
                EnumXmlTranslation<GroupTypeEnum>.Instance.Write(
                    node: node,
                    name: nameof(item.GroupType),
                    item: item.GroupType,
                    fieldIndex: (int)ListGroup_FieldIndex.GroupType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ListGroup_FieldIndex.LastModified) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LastModified),
                    item: item.LastModified,
                    fieldIndex: (int)ListGroup_FieldIndex.LastModified,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ListGroup_FieldIndex.Items) ?? true))
            {
                ListXmlTranslation<T>.Instance.Write(
                    node: node,
                    name: nameof(item.Items),
                    item: item.Items,
                    fieldIndex: (int)ListGroup_FieldIndex.Items,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ListGroup_FieldIndex.Items),
                    transl: (XElement subNode, T subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((IXmlWriteTranslator)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write<T>(
            XElement node,
            IListGroupInternalGetter<T> item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ListGroup");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ListGroup");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            throw new NotImplementedException();
        }

        public void Write<T>(
            XElement node,
            IListGroupInternalGetter<T> item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IListGroupInternalGetter<T>)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ListGroupXmlCreateTranslation<T>
        where T : IXmlItem, IBinaryItem, ILoquiObjectSetter<T>
    {
        public readonly static ListGroupXmlCreateTranslation<T> Instance = new ListGroupXmlCreateTranslation<T>();

        public static void FillPublicXml(
            IListGroupInternal<T> item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ListGroupXmlCreateTranslation<T>.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IListGroupInternal<T> item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "GroupType":
                    try
                    {
                        errorMask?.PushIndex((int)ListGroup_FieldIndex.GroupType);
                        if (EnumXmlTranslation<GroupTypeEnum>.Instance.Parse(
                            node: node,
                            item: out GroupTypeEnum GroupTypeParse,
                            errorMask: errorMask))
                        {
                            item.GroupType = GroupTypeParse;
                        }
                        else
                        {
                            item.GroupType = default(GroupTypeEnum);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LastModified":
                    try
                    {
                        errorMask?.PushIndex((int)ListGroup_FieldIndex.LastModified);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 LastModifiedParse,
                            errorMask: errorMask))
                        {
                            item.LastModified = LastModifiedParse;
                        }
                        else
                        {
                            item.LastModified = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Items":
                    try
                    {
                        errorMask?.PushIndex((int)ListGroup_FieldIndex.Items);
                        if (ListXmlTranslation<T>.Instance.Parse(
                            node: node,
                            enumer: out var ItemsItem,
                            transl: LoquiXmlTranslation<T>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Items.SetTo(ItemsItem);
                        }
                        else
                        {
                            item.Items.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ListGroupXmlTranslationMixIn
    {
        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this IListGroupInternalGetter<T> item,
            XElement node,
            out ListGroup_ErrorMask<T_ErrMask> errorMask,
            bool doMasks = true,
            ListGroup_TranslationMask<T_TranslMask> translationMask = null,
            string name = null)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ListGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ListGroup_ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this IListGroupInternalGetter<T> item,
            string path,
            out ListGroup_ErrorMask<T_ErrMask> errorMask,
            ListGroup_TranslationMask<T_TranslMask> translationMask = null,
            bool doMasks = true,
            string name = null)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml<T>(
            this IListGroupInternalGetter<T> item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            var node = new XElement("topnode");
            WriteToXml<T>(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this IListGroupInternalGetter<T> item,
            Stream stream,
            out ListGroup_ErrorMask<T_ErrMask> errorMask,
            ListGroup_TranslationMask<T_TranslMask> translationMask = null,
            bool doMasks = true,
            string name = null)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml<T>(
            this IListGroupInternalGetter<T> item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            var node = new XElement("topnode");
            WriteToXml<T>(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml<T>(
            this IListGroupInternalGetter<T> item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            ((ListGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this IListGroupInternalGetter<T> item,
            XElement node,
            string name = null,
            ListGroup_TranslationMask<T_TranslMask> translationMask = null)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            ((ListGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml<T, T_TranslMask>(
            this IListGroupInternalGetter<T> item,
            string path,
            string name = null)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
            where T_TranslMask : class, ITranslationMask, new()
        {
            var node = new XElement("topnode");
            ((ListGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml<T, T_TranslMask>(
            this IListGroupInternalGetter<T> item,
            Stream stream,
            string name = null)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
            where T_TranslMask : class, ITranslationMask, new()
        {
            var node = new XElement("topnode");
            ((ListGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class ListGroup_Mask<T> : IMask<T>, IEquatable<ListGroup_Mask<T>>
    {
        #region Ctors
        public ListGroup_Mask()
        {
        }

        public ListGroup_Mask(T initialValue)
        {
            this.GroupType = initialValue;
            this.LastModified = initialValue;
            this.Items = new MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T GroupType;
        public T LastModified;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>>>> Items;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ListGroup_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ListGroup_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.GroupType, rhs.GroupType)) return false;
            if (!object.Equals(this.LastModified, rhs.LastModified)) return false;
            if (!object.Equals(this.Items, rhs.Items)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.GroupType?.GetHashCode());
            ret = ret.CombineHashCode(this.LastModified?.GetHashCode());
            ret = ret.CombineHashCode(this.Items?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.GroupType)) return false;
            if (!eval(this.LastModified)) return false;
            if (this.Items != null)
            {
                if (!eval(this.Items.Overall)) return false;
                if (this.Items.Specific != null)
                {
                    foreach (var item in this.Items.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public ListGroup_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ListGroup_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ListGroup_Mask<R> obj, Func<T, R> eval)
        {
            obj.GroupType = eval(this.GroupType);
            obj.LastModified = eval(this.LastModified);
            if (Items != null)
            {
                obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>>>>();
                obj.Items.Overall = eval(this.Items.Overall);
                if (Items.Specific != null)
                {
                    List<MaskItemIndexed<R, IMask<R>>> l = new List<MaskItemIndexed<R, IMask<R>>>();
                    obj.Items.Specific = l;
                    foreach (var item in Items.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, IMask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, IMask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            throw new NotImplementedException();
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Items.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ListGroup_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ListGroup_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ListGroup_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.GroupType ?? true)
                {
                    fg.AppendLine($"GroupType => {GroupType}");
                }
                if (printMask?.LastModified ?? true)
                {
                    fg.AppendLine($"LastModified => {LastModified}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Items.Overall != null)
                        {
                            fg.AppendLine(Items.Overall.ToString());
                        }
                        if (Items.Specific != null)
                        {
                            foreach (var subItem in Items.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ListGroup_ErrorMask<T_ErrMask> : IErrorMask, IErrorMask<ListGroup_ErrorMask<T_ErrMask>>
        where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception GroupType;
        public Exception LastModified;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, T_ErrMask>>> Items;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.GroupType:
                    return GroupType;
                case ListGroup_FieldIndex.LastModified:
                    return LastModified;
                case ListGroup_FieldIndex.Items:
                    return Items;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.GroupType:
                    this.GroupType = ex;
                    break;
                case ListGroup_FieldIndex.LastModified:
                    this.LastModified = ex;
                    break;
                case ListGroup_FieldIndex.Items:
                    this.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, T_ErrMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.GroupType:
                    this.GroupType = (Exception)obj;
                    break;
                case ListGroup_FieldIndex.LastModified:
                    this.LastModified = (Exception)obj;
                    break;
                case ListGroup_FieldIndex.Items:
                    this.Items = (MaskItem<Exception, IEnumerable<MaskItem<Exception, T_ErrMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (GroupType != null) return true;
            if (LastModified != null) return true;
            if (Items != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ListGroup_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"GroupType => {GroupType}");
            fg.AppendLine($"LastModified => {LastModified}");
            fg.AppendLine("Items =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Items.Overall != null)
                {
                    fg.AppendLine(Items.Overall.ToString());
                }
                if (Items.Specific != null)
                {
                    foreach (var subItem in Items.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public ListGroup_ErrorMask<T_ErrMask> Combine(ListGroup_ErrorMask<T_ErrMask> rhs)
        {
            var ret = new ListGroup_ErrorMask<T_ErrMask>();
            ret.GroupType = this.GroupType.Combine(rhs.GroupType);
            ret.LastModified = this.LastModified.Combine(rhs.LastModified);
            ret.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, T_ErrMask>>>(this.Items.Overall.Combine(rhs.Items.Overall), new List<MaskItem<Exception, T_ErrMask>>(this.Items.Specific.And(rhs.Items.Specific)));
            return ret;
        }
        public static ListGroup_ErrorMask<T_ErrMask> Combine(ListGroup_ErrorMask<T_ErrMask> lhs, ListGroup_ErrorMask<T_ErrMask> rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ListGroup_ErrorMask<T_ErrMask> Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ListGroup_ErrorMask<T_ErrMask>();
        }
        #endregion

    }
    public class ListGroup_CopyMask<T_CopyMask>
        where T_CopyMask : class, new()
    {
        public ListGroup_CopyMask()
        {
        }

        public ListGroup_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.GroupType = defaultOn;
            this.LastModified = defaultOn;
            this.Items = new MaskItem<CopyOption, T_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool GroupType;
        public bool LastModified;
        public MaskItem<CopyOption, T_CopyMask> Items;
        #endregion

    }

    public class ListGroup_TranslationMask<T_TranslMask> : ITranslationMask
        where T_TranslMask : class, ITranslationMask, new()
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool GroupType;
        public bool LastModified;
        public MaskItem<bool, T_TranslMask> Items;
        #endregion

        #region Ctors
        public ListGroup_TranslationMask()
        {
        }

        public ListGroup_TranslationMask(bool defaultOn)
        {
            this.GroupType = defaultOn;
            this.LastModified = defaultOn;
            this.Items = new MaskItem<bool, T_TranslMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((GroupType, null));
            ret.Add((LastModified, null));
            ret.Add((Items?.Overall ?? true, Items?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ListGroupBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ListGroupBinaryWriteTranslation Instance = new ListGroupBinaryWriteTranslation();

        static partial void WriteBinaryContainedRecordTypeCustom<T>(
            MutagenWriter writer,
            IListGroupInternalGetter<T> item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>;

        public static void WriteBinaryContainedRecordType<T>(
            MutagenWriter writer,
            IListGroupInternalGetter<T> item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            WriteBinaryContainedRecordTypeCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_Embedded<T>(
            IListGroupInternalGetter<T> item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            ListGroupBinaryWriteTranslation.WriteBinaryContainedRecordType(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<GroupTypeEnum>.Instance.Write(
                writer,
                item.GroupType,
                length: 4);
            writer.Write(item.LastModified);
        }

        public static void Write_RecordTypes<T>(
            IListGroupInternalGetter<T> item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            Mutagen.Bethesda.Binary.ListBinaryTranslation<T>.Instance.Write(
                writer: writer,
                items: item.Items,
                fieldIndex: (int)ListGroup_FieldIndex.Items,
                errorMask: errorMask,
                transl: (MutagenWriter subWriter, T subItem, ErrorMaskBuilder listErrorMask) =>
                {
                    var loquiItem = subItem;
                    ((IBinaryWriteTranslator)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                        item: loquiItem,
                        writer: subWriter,
                        errorMask: listErrorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                });
        }

        public void Write<T>(
            MutagenWriter writer,
            IListGroupInternalGetter<T> item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: ListGroup_Registration.GRUP_HEADER,
                type: ObjectType.Group))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            throw new NotImplementedException();
        }

    }

    public partial class ListGroupBinaryCreateTranslation<T>
        where T : IXmlItem, IBinaryItem, ILoquiObjectSetter<T>
    {
        public readonly static ListGroupBinaryCreateTranslation<T> Instance = new ListGroupBinaryCreateTranslation<T>();

        static partial void FillBinaryContainedRecordTypeCustom(
            MutagenFrame frame,
            ListGroup<T> item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryContainedRecordTypeCustomPublic(
            MutagenFrame frame,
            ListGroup<T> item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryContainedRecordTypeCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ListGroupBinaryTranslationMixIn
    {
        public static void WriteToBinary<T, T_ErrMask>(
            this IListGroupInternalGetter<T> item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out ListGroup_ErrorMask<T_ErrMask> errorMask,
            bool doMasks = true)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ListGroupBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ListGroup_ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary<T>(
            this IListGroupInternalGetter<T> item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
        {
            ((ListGroupBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary<T, T_ErrMask>(
            this IListGroupInternalGetter<T> item,
            MutagenWriter writer,
            MasterReferences masterReferences)
            where T : IXmlItem, IBinaryItem, ILoquiObject<T>
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
        {
            ((ListGroupBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ListGroupBinaryWrapper<T> :
        BinaryWrapper,
        IListGroupInternalGetter<T>
        where T : IXmlItem, IBinaryItem, ILoquiObject<T>
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ListGroup_Registration.Instance;
        public static ListGroup_Registration Registration => ListGroup_Registration.Instance;
        protected object CommonInstance()
        {
            return ListGroupCommon<T>.Instance;
        }
        object IListGroupInternalGetter<T>.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IListGroupInternalGetter<T>.CommonSetterInstance()
        {
            return null;
        }
        object IListGroupInternalGetter<T>.CommonSetterCopyInstance<T_CopyMask>()
        {
            return null;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IListGroupInternalGetter<T>)rhs, include);

        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        protected object XmlWriteTranslator => ListGroupXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ListGroupXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => ListGroupBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ListGroupBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region ContainedRecordType
        partial void ContainedRecordTypeCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        public GroupTypeEnum GroupType => (GroupTypeEnum)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(4, 4));
        public Int32 LastModified => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(8, 4));
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected ListGroupBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this._data = bytes;
        }

        public static ListGroupBinaryWrapper<T> ListGroupFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new ListGroupBinaryWrapper<T>(
                bytes: HeaderTranslation.ExtractGroupWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.Group(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.GroupConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.GroupConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillGroupRecordsForWrapper(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                default:
                    return TryGet<int?>.Succeed(null);
            }
        }
    }

}
#endregion

#endregion

