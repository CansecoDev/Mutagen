/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AIPackageTarget :
        IAIPackageTarget,
        ILoquiObjectSetter<AIPackageTarget>,
        IEquatable<AIPackageTarget>,
        IEqualsMask
    {
        #region Ctor
        public AIPackageTarget()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectType
        public AIPackageTarget.ObjectTypeEnum ObjectType { get; set; }
        #endregion
        #region Object
        public Int32 Object { get; set; }
        #endregion
        #region Count
        public Int32 Count { get; set; }
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            AIPackageTargetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IAIPackageTargetGetter rhs)) return false;
            return ((AIPackageTargetCommon)((IAIPackageTargetGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(AIPackageTarget obj)
        {
            return ((AIPackageTargetCommon)((IAIPackageTargetGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((AIPackageTargetCommon)((IAIPackageTargetGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => AIPackageTargetXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((AIPackageTargetXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static AIPackageTarget CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            AIPackageTarget_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static AIPackageTarget CreateFromXml(
            XElement node,
            out AIPackageTarget_ErrorMask errorMask,
            bool doMasks = true,
            AIPackageTarget_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = AIPackageTarget_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static AIPackageTarget CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new AIPackageTarget() : null;
                    break;
                default:
                    break;
            }
            var ret = new AIPackageTarget();
            ((AIPackageTargetSetterCommon)((IAIPackageTargetGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static AIPackageTarget CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            AIPackageTarget_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static AIPackageTarget CreateFromXml(
            string path,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AIPackageTarget CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            AIPackageTarget_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static AIPackageTarget CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            AIPackageTarget_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static AIPackageTarget CreateFromXml(
            Stream stream,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AIPackageTarget CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            AIPackageTarget_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((AIPackageTarget_FieldIndex)index)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                case AIPackageTarget_FieldIndex.Object:
                case AIPackageTarget_FieldIndex.Count:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = AIPackageTarget_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AIPackageTargetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((AIPackageTargetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static AIPackageTarget CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static AIPackageTarget CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out AIPackageTarget_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AIPackageTarget_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static AIPackageTarget CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new AIPackageTarget();
            ((AIPackageTargetSetterCommon)((IAIPackageTargetGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAIPackageTargetGetter)rhs, include);

        void IClearable.Clear()
        {
            ((AIPackageTargetSetterCommon)((IAIPackageTargetGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static AIPackageTarget GetNew()
        {
            return new AIPackageTarget();
        }

    }
    #endregion

    #region Interface
    public partial interface IAIPackageTarget :
        IAIPackageTargetGetter,
        ILoquiObjectSetter<IAIPackageTarget>
    {
        new AIPackageTarget.ObjectTypeEnum ObjectType { get; set; }

        new Int32 Object { get; set; }

        new Int32 Count { get; set; }

    }

    public partial interface IAIPackageTargetGetter :
        ILoquiObject,
        ILoquiObject<IAIPackageTargetGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region ObjectType
        AIPackageTarget.ObjectTypeEnum ObjectType { get; }

        #endregion
        #region Object
        Int32 Object { get; }

        #endregion
        #region Count
        Int32 Count { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class AIPackageTargetMixIn
    {
        public static void Clear(this IAIPackageTarget item)
        {
            ((AIPackageTargetSetterCommon)((IAIPackageTargetGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static AIPackageTarget_Mask<bool> GetEqualsMask(
            this IAIPackageTargetGetter item,
            IAIPackageTargetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAIPackageTargetGetter item,
            string name = null,
            AIPackageTarget_Mask<bool> printMask = null)
        {
            return ((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAIPackageTargetGetter item,
            FileGeneration fg,
            string name = null,
            AIPackageTarget_Mask<bool> printMask = null)
        {
            ((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IAIPackageTargetGetter item,
            AIPackageTarget_Mask<bool?> checkMask)
        {
            return ((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static AIPackageTarget_Mask<bool> GetHasBeenSetMask(this IAIPackageTargetGetter item)
        {
            var ret = new AIPackageTarget_Mask<bool>();
            ((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IAIPackageTargetGetter item,
            IAIPackageTargetGetter rhs)
        {
            return ((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IAIPackageTarget lhs,
            IAIPackageTargetGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this IAIPackageTarget lhs,
            IAIPackageTargetGetter rhs,
            AIPackageTarget_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IAIPackageTarget lhs,
            IAIPackageTargetGetter rhs,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((AIPackageTargetSetterTranslationCommon)((IAIPackageTargetGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = AIPackageTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IAIPackageTarget lhs,
            IAIPackageTargetGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((AIPackageTargetSetterTranslationCommon)((IAIPackageTargetGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static AIPackageTarget DeepCopy(
            this IAIPackageTargetGetter item,
            AIPackageTarget_TranslationMask copyMask = null)
        {
            return ((AIPackageTargetSetterTranslationCommon)((IAIPackageTargetGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AIPackageTarget DeepCopy(
            this IAIPackageTargetGetter item,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask copyMask = null)
        {
            return ((AIPackageTargetSetterTranslationCommon)((IAIPackageTargetGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AIPackageTarget DeepCopy(
            this IAIPackageTargetGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((AIPackageTargetSetterTranslationCommon)((IAIPackageTargetGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAIPackageTarget item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            AIPackageTarget_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAIPackageTarget item,
            XElement node,
            out AIPackageTarget_ErrorMask errorMask,
            bool doMasks = true,
            AIPackageTarget_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = AIPackageTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IAIPackageTarget item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((AIPackageTargetSetterCommon)((IAIPackageTargetGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAIPackageTarget item,
            string path,
            MissingCreate missing = MissingCreate.New,
            AIPackageTarget_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAIPackageTarget item,
            string path,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAIPackageTarget item,
            string path,
            ErrorMaskBuilder errorMask,
            AIPackageTarget_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IAIPackageTarget item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            AIPackageTarget_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAIPackageTarget item,
            Stream stream,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAIPackageTarget item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            AIPackageTarget_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IAIPackageTarget item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IAIPackageTarget item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out AIPackageTarget_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AIPackageTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this IAIPackageTarget item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((AIPackageTargetSetterCommon)((IAIPackageTargetGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AIPackageTarget_FieldIndex
    {
        ObjectType = 0,
        Object = 1,
        Count = 2,
    }
    #endregion

    #region Registration
    public partial class AIPackageTarget_Registration : ILoquiRegistration
    {
        public static readonly AIPackageTarget_Registration Instance = new AIPackageTarget_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 159,
            version: 0);

        public const string GUID = "52649554-81f8-4583-82cd-dbff72bc7bd5";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(AIPackageTarget_Mask<>);

        public static readonly Type ErrorMaskType = typeof(AIPackageTarget_ErrorMask);

        public static readonly Type ClassType = typeof(AIPackageTarget);

        public static readonly Type GetterType = typeof(IAIPackageTargetGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAIPackageTarget);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.AIPackageTarget";

        public const string Name = "AIPackageTarget";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBJECTTYPE":
                    return (ushort)AIPackageTarget_FieldIndex.ObjectType;
                case "OBJECT":
                    return (ushort)AIPackageTarget_FieldIndex.Object;
                case "COUNT":
                    return (ushort)AIPackageTarget_FieldIndex.Count;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                case AIPackageTarget_FieldIndex.Object:
                case AIPackageTarget_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                case AIPackageTarget_FieldIndex.Object:
                case AIPackageTarget_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                case AIPackageTarget_FieldIndex.Object:
                case AIPackageTarget_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                    return "ObjectType";
                case AIPackageTarget_FieldIndex.Object:
                    return "Object";
                case AIPackageTarget_FieldIndex.Count:
                    return "Count";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                case AIPackageTarget_FieldIndex.Object:
                case AIPackageTarget_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                case AIPackageTarget_FieldIndex.Object:
                case AIPackageTarget_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                    return typeof(AIPackageTarget.ObjectTypeEnum);
                case AIPackageTarget_FieldIndex.Object:
                    return typeof(Int32);
                case AIPackageTarget_FieldIndex.Count:
                    return typeof(Int32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(AIPackageTargetXmlWriteTranslation);
        public static readonly RecordType PTDT_HEADER = new RecordType("PTDT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = PTDT_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(AIPackageTargetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class AIPackageTargetSetterCommon
    {
        public static readonly AIPackageTargetSetterCommon Instance = new AIPackageTargetSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAIPackageTarget item)
        {
            ClearPartial();
            item.ObjectType = default(AIPackageTarget.ObjectTypeEnum);
            item.Object = default(Int32);
            item.Count = default(Int32);
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IAIPackageTarget item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    AIPackageTargetXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IAIPackageTarget item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            item.ObjectType = EnumBinaryTranslation<AIPackageTarget.ObjectTypeEnum>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.Object = frame.ReadInt32();
            item.Count = frame.ReadInt32();
        }
        
        public void CopyInFromBinary(
            IAIPackageTarget item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(AIPackageTarget_Registration.PTDT_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class AIPackageTargetCommon
    {
        public static readonly AIPackageTargetCommon Instance = new AIPackageTargetCommon();

        public AIPackageTarget_Mask<bool> GetEqualsMask(
            IAIPackageTargetGetter item,
            IAIPackageTargetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AIPackageTarget_Mask<bool>();
            ((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAIPackageTargetGetter item,
            IAIPackageTargetGetter rhs,
            AIPackageTarget_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectType = item.ObjectType == rhs.ObjectType;
            ret.Object = item.Object == rhs.Object;
            ret.Count = item.Count == rhs.Count;
        }
        
        public string ToString(
            IAIPackageTargetGetter item,
            string name = null,
            AIPackageTarget_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAIPackageTargetGetter item,
            FileGeneration fg,
            string name = null,
            AIPackageTarget_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AIPackageTarget =>");
            }
            else
            {
                fg.AppendLine($"{name} (AIPackageTarget) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAIPackageTargetGetter item,
            FileGeneration fg,
            AIPackageTarget_Mask<bool> printMask = null)
        {
            if (printMask?.ObjectType ?? true)
            {
                fg.AppendLine($"ObjectType => {item.ObjectType}");
            }
            if (printMask?.Object ?? true)
            {
                fg.AppendLine($"Object => {item.Object}");
            }
            if (printMask?.Count ?? true)
            {
                fg.AppendLine($"Count => {item.Count}");
            }
        }
        
        public bool HasBeenSet(
            IAIPackageTargetGetter item,
            AIPackageTarget_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IAIPackageTargetGetter item,
            AIPackageTarget_Mask<bool> mask)
        {
            mask.ObjectType = true;
            mask.Object = true;
            mask.Count = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAIPackageTargetGetter lhs,
            IAIPackageTargetGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.ObjectType != rhs.ObjectType) return false;
            if (lhs.Object != rhs.Object) return false;
            if (lhs.Count != rhs.Count) return false;
            return true;
        }
        
        public virtual int GetHashCode(IAIPackageTargetGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.ObjectType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Object).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Count).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return AIPackageTarget.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IAIPackageTargetGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class AIPackageTargetSetterTranslationCommon
    {
        public static readonly AIPackageTargetSetterTranslationCommon Instance = new AIPackageTargetSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IAIPackageTarget item,
            IAIPackageTargetGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)AIPackageTarget_FieldIndex.ObjectType) ?? true))
            {
                item.ObjectType = rhs.ObjectType;
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackageTarget_FieldIndex.Object) ?? true))
            {
                item.Object = rhs.Object;
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackageTarget_FieldIndex.Count) ?? true))
            {
                item.Count = rhs.Count;
            }
        }
        
        #endregion
        
        public AIPackageTarget DeepCopy(
            IAIPackageTargetGetter item,
            AIPackageTarget_TranslationMask copyMask = null)
        {
            AIPackageTarget ret = (AIPackageTarget)((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public AIPackageTarget DeepCopy(
            IAIPackageTargetGetter item,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask copyMask = null)
        {
            AIPackageTarget ret = (AIPackageTarget)((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public AIPackageTarget DeepCopy(
            IAIPackageTargetGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            AIPackageTarget ret = (AIPackageTarget)((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class AIPackageTarget
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackageTarget_Registration.Instance;
        public static AIPackageTarget_Registration Registration => AIPackageTarget_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AIPackageTargetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return AIPackageTargetSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AIPackageTargetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAIPackageTargetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IAIPackageTargetGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IAIPackageTargetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AIPackageTargetXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static AIPackageTargetXmlWriteTranslation Instance = new AIPackageTargetXmlWriteTranslation();

        public static void WriteToNodeXml(
            IAIPackageTargetGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)AIPackageTarget_FieldIndex.ObjectType) ?? true))
            {
                EnumXmlTranslation<AIPackageTarget.ObjectTypeEnum>.Instance.Write(
                    node: node,
                    name: nameof(item.ObjectType),
                    item: item.ObjectType,
                    fieldIndex: (int)AIPackageTarget_FieldIndex.ObjectType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackageTarget_FieldIndex.Object) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Object),
                    item: item.Object,
                    fieldIndex: (int)AIPackageTarget_FieldIndex.Object,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackageTarget_FieldIndex.Count) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Count),
                    item: item.Count,
                    fieldIndex: (int)AIPackageTarget_FieldIndex.Count,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IAIPackageTargetGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.AIPackageTarget");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.AIPackageTarget");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IAIPackageTargetGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IAIPackageTargetGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IAIPackageTargetGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class AIPackageTargetXmlCreateTranslation
    {
        public readonly static AIPackageTargetXmlCreateTranslation Instance = new AIPackageTargetXmlCreateTranslation();

        public static void FillPublicXml(
            IAIPackageTarget item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    AIPackageTargetXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IAIPackageTarget item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "ObjectType":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackageTarget_FieldIndex.ObjectType);
                        item.ObjectType = EnumXmlTranslation<AIPackageTarget.ObjectTypeEnum>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Object":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackageTarget_FieldIndex.Object);
                        item.Object = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Count":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackageTarget_FieldIndex.Count);
                        item.Count = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class AIPackageTargetXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IAIPackageTargetGetter item,
            XElement node,
            out AIPackageTarget_ErrorMask errorMask,
            bool doMasks = true,
            AIPackageTarget_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((AIPackageTargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AIPackageTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IAIPackageTargetGetter item,
            string path,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAIPackageTargetGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAIPackageTargetGetter item,
            Stream stream,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IAIPackageTargetGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IAIPackageTargetGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((AIPackageTargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IAIPackageTargetGetter item,
            XElement node,
            string name = null,
            AIPackageTarget_TranslationMask translationMask = null)
        {
            ((AIPackageTargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IAIPackageTargetGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((AIPackageTargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAIPackageTargetGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((AIPackageTargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class AIPackageTarget_Mask<T> : IMask<T>, IEquatable<AIPackageTarget_Mask<T>>
    {
        #region Ctors
        public AIPackageTarget_Mask()
        {
        }

        public AIPackageTarget_Mask(T initialValue)
        {
            this.ObjectType = initialValue;
            this.Object = initialValue;
            this.Count = initialValue;
        }
        #endregion

        #region Members
        public T ObjectType;
        public T Object;
        public T Count;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is AIPackageTarget_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AIPackageTarget_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.ObjectType, rhs.ObjectType)) return false;
            if (!object.Equals(this.Object, rhs.Object)) return false;
            if (!object.Equals(this.Count, rhs.Count)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ObjectType?.GetHashCode());
            ret = ret.CombineHashCode(this.Object?.GetHashCode());
            ret = ret.CombineHashCode(this.Count?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.ObjectType)) return false;
            if (!eval(this.Object)) return false;
            if (!eval(this.Count)) return false;
            return true;
        }
        #endregion

        #region Translate
        public AIPackageTarget_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new AIPackageTarget_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(AIPackageTarget_Mask<R> obj, Func<T, R> eval)
        {
            obj.ObjectType = eval(this.ObjectType);
            obj.Object = eval(this.Object);
            obj.Count = eval(this.Count);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(AIPackageTarget_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, AIPackageTarget_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(AIPackageTarget_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ObjectType ?? true)
                {
                    fg.AppendLine($"ObjectType => {ObjectType}");
                }
                if (printMask?.Object ?? true)
                {
                    fg.AppendLine($"Object => {Object}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {Count}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class AIPackageTarget_ErrorMask : IErrorMask, IErrorMask<AIPackageTarget_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception ObjectType;
        public Exception Object;
        public Exception Count;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                    return ObjectType;
                case AIPackageTarget_FieldIndex.Object:
                    return Object;
                case AIPackageTarget_FieldIndex.Count:
                    return Count;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                    this.ObjectType = ex;
                    break;
                case AIPackageTarget_FieldIndex.Object:
                    this.Object = ex;
                    break;
                case AIPackageTarget_FieldIndex.Count:
                    this.Count = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                    this.ObjectType = (Exception)obj;
                    break;
                case AIPackageTarget_FieldIndex.Object:
                    this.Object = (Exception)obj;
                    break;
                case AIPackageTarget_FieldIndex.Count:
                    this.Count = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (ObjectType != null) return true;
            if (Object != null) return true;
            if (Count != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("AIPackageTarget_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"ObjectType => {ObjectType}");
            fg.AppendLine($"Object => {Object}");
            fg.AppendLine($"Count => {Count}");
        }
        #endregion

        #region Combine
        public AIPackageTarget_ErrorMask Combine(AIPackageTarget_ErrorMask rhs)
        {
            var ret = new AIPackageTarget_ErrorMask();
            ret.ObjectType = this.ObjectType.Combine(rhs.ObjectType);
            ret.Object = this.Object.Combine(rhs.Object);
            ret.Count = this.Count.Combine(rhs.Count);
            return ret;
        }
        public static AIPackageTarget_ErrorMask Combine(AIPackageTarget_ErrorMask lhs, AIPackageTarget_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static AIPackageTarget_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new AIPackageTarget_ErrorMask();
        }
        #endregion

    }
    public class AIPackageTarget_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool ObjectType;
        public bool Object;
        public bool Count;
        #endregion

        #region Ctors
        public AIPackageTarget_TranslationMask()
        {
        }

        public AIPackageTarget_TranslationMask(bool defaultOn)
        {
            this.ObjectType = defaultOn;
            this.Object = defaultOn;
            this.Count = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((ObjectType, null));
            ret.Add((Object, null));
            ret.Add((Count, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AIPackageTargetBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static AIPackageTargetBinaryWriteTranslation Instance = new AIPackageTargetBinaryWriteTranslation();

        public static void Write_Embedded(
            IAIPackageTargetGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<AIPackageTarget.ObjectTypeEnum>.Instance.Write(
                writer,
                item.ObjectType,
                length: 4);
            writer.Write(item.Object);
            writer.Write(item.Count);
        }

        public void Write(
            MutagenWriter writer,
            IAIPackageTargetGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: AIPackageTarget_Registration.PTDT_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IAIPackageTargetGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class AIPackageTargetBinaryCreateTranslation
    {
        public readonly static AIPackageTargetBinaryCreateTranslation Instance = new AIPackageTargetBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class AIPackageTargetBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAIPackageTargetGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out AIPackageTarget_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((AIPackageTargetBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AIPackageTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IAIPackageTargetGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((AIPackageTargetBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IAIPackageTargetGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((AIPackageTargetBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AIPackageTargetBinaryOverlay :
        BinaryOverlay,
        IAIPackageTargetGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackageTarget_Registration.Instance;
        public static AIPackageTarget_Registration Registration => AIPackageTarget_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AIPackageTargetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AIPackageTargetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAIPackageTargetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IAIPackageTargetGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IAIPackageTargetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAIPackageTargetGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => AIPackageTargetXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((AIPackageTargetXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AIPackageTargetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((AIPackageTargetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public AIPackageTarget.ObjectTypeEnum ObjectType => (AIPackageTarget.ObjectTypeEnum)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0, 4));
        public Int32 Object => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(4, 4));
        public Int32 Count => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(8, 4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected AIPackageTargetBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static AIPackageTargetBinaryOverlay AIPackageTargetFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new AIPackageTargetBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

