/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AIPackage :
        OblivionMajorRecord,
        IAIPackageInternal,
        ILoquiObjectSetter<AIPackage>,
        ILinkSubContainer,
        IEquatable<AIPackage>,
        IEqualsMask
    {
        #region Ctor
        protected AIPackage()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        private AIPackage.Flag _Flags;
        public AIPackage.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.PKDTDataTypeState |= PKDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region GeneralType
        private AIPackage.GeneralTypeEnum _GeneralType;
        public AIPackage.GeneralTypeEnum GeneralType
        {
            get => this._GeneralType;
            set
            {
                this.PKDTDataTypeState |= PKDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._GeneralType, value, nameof(GeneralType));
            }
        }
        #endregion
        #region Location
        public bool Location_IsSet
        {
            get => _hasBeenSetTracker[(int)AIPackage_FieldIndex.Location];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)AIPackage_FieldIndex.Location, nameof(Location_IsSet));
        }
        bool IAIPackageGetter.Location_IsSet => Location_IsSet;
        private AIPackageLocation _Location;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public AIPackageLocation Location
        {
            get => _Location;
            set => Location_Set(value);
        }
        public void Location_Set(
            AIPackageLocation value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Location, value, _hasBeenSetTracker, hasBeenSet, (int)AIPackage_FieldIndex.Location, nameof(Location), nameof(Location_IsSet));
        }
        public void Location_Unset()
        {
            this.Location_Set(default(AIPackageLocation), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAIPackageLocationInternalGetter IAIPackageGetter.Location => this.Location;
        #endregion
        #region Schedule
        public bool Schedule_IsSet
        {
            get => _hasBeenSetTracker[(int)AIPackage_FieldIndex.Schedule];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)AIPackage_FieldIndex.Schedule, nameof(Schedule_IsSet));
        }
        bool IAIPackageGetter.Schedule_IsSet => Schedule_IsSet;
        private AIPackageSchedule _Schedule;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public AIPackageSchedule Schedule
        {
            get => _Schedule;
            set => Schedule_Set(value);
        }
        public void Schedule_Set(
            AIPackageSchedule value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Schedule, value, _hasBeenSetTracker, hasBeenSet, (int)AIPackage_FieldIndex.Schedule, nameof(Schedule), nameof(Schedule_IsSet));
        }
        public void Schedule_Unset()
        {
            this.Schedule_Set(default(AIPackageSchedule), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAIPackageScheduleInternalGetter IAIPackageGetter.Schedule => this.Schedule;
        #endregion
        #region Target
        public bool Target_IsSet
        {
            get => _hasBeenSetTracker[(int)AIPackage_FieldIndex.Target];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)AIPackage_FieldIndex.Target, nameof(Target_IsSet));
        }
        bool IAIPackageGetter.Target_IsSet => Target_IsSet;
        private AIPackageTarget _Target;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public AIPackageTarget Target
        {
            get => _Target;
            set => Target_Set(value);
        }
        public void Target_Set(
            AIPackageTarget value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Target, value, _hasBeenSetTracker, hasBeenSet, (int)AIPackage_FieldIndex.Target, nameof(Target), nameof(Target_IsSet));
        }
        public void Target_Unset()
        {
            this.Target_Set(default(AIPackageTarget), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAIPackageTargetInternalGetter IAIPackageGetter.Target => this.Target;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<Condition> _Conditions = new SourceSetList<Condition>();
        public ISourceSetList<Condition> Conditions => _Conditions;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<Condition> IAIPackage.Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IConditionInternalGetter> IAIPackageGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region PKDTDataTypeState
        private AIPackage.PKDTDataType _PKDTDataTypeState;
        public AIPackage.PKDTDataType PKDTDataTypeState
        {
            get => this._PKDTDataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._PKDTDataTypeState, value, nameof(PKDTDataTypeState));
        }
        AIPackage.PKDTDataType IAIPackageInternal.PKDTDataTypeState
        {
            get => this.PKDTDataTypeState;
            set => this.PKDTDataTypeState = value;
        }
        AIPackage.PKDTDataType IAIPackageInternalGetter.PKDTDataTypeState
        {
            get => this.PKDTDataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAIPackageInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            AIPackageMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IAIPackageInternalGetter rhs)) return false;
            return ((AIPackageCommon)((IAIPackageInternalGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(AIPackage obj)
        {
            return ((AIPackageCommon)((IAIPackageInternalGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((AIPackageCommon)((IAIPackageInternalGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => AIPackageXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((AIPackageXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static AIPackage CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            AIPackage_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static AIPackage CreateFromXml(
            XElement node,
            out AIPackage_ErrorMask errorMask,
            bool doMasks = true,
            AIPackage_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = AIPackage_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static AIPackage CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new AIPackage() : null;
                    break;
                default:
                    break;
            }
            var ret = new AIPackage();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    AIPackageXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static AIPackage CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            AIPackage_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static AIPackage CreateFromXml(
            string path,
            out AIPackage_ErrorMask errorMask,
            AIPackage_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AIPackage CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            AIPackage_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static AIPackage CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            AIPackage_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static AIPackage CreateFromXml(
            Stream stream,
            out AIPackage_ErrorMask errorMask,
            AIPackage_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AIPackage CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            AIPackage_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            AIPackage item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasPKDTDataType":
                    item.PKDTDataTypeState |= AIPackage.PKDTDataType.Has;
                    break;
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                    return _hasBeenSetTracker[index];
                case AIPackage_FieldIndex.Conditions:
                    return Conditions.HasBeenSet;
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = AIPackage_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum PKDTDataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            if (Location != null)
            {
                foreach (var item in Location.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            if (Location != null)
            {
                Location?.Link(
                    modList,
                    sourceMod);
            }
        }

        public AIPackage(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public AIPackage(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => AIPackageBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((AIPackageBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static AIPackage CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static AIPackage CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out AIPackage_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AIPackage_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static AIPackage CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<AIPackage>(
                record: new AIPackage(),
                frame: frame,
                errorMask: errorMask,
                recType: AIPackage_Registration.PACK_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            AIPackage item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            AIPackage item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54444B50: // PKDT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.PKDTDataTypeState = PKDTDataType.Has;
                    }
                    AIPackageBinaryCreateTranslation.FillBinaryFlagsCustomPublic(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    AIPackageBinaryCreateTranslation.FillBinaryGeneralTypeCustomPublic(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.GeneralType);
                }
                case 0x54444C50: // PLDT
                {
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.Location);
                        item.Location = Mutagen.Bethesda.Oblivion.AIPackageLocation.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Location);
                }
                case 0x54445350: // PSDT
                {
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.Schedule);
                        item.Schedule = Mutagen.Bethesda.Oblivion.AIPackageSchedule.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Schedule);
                }
                case 0x54445450: // PTDT
                {
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.Target);
                        item.Target = Mutagen.Bethesda.Oblivion.AIPackageTarget.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Target);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                        item: item.Conditions,
                        fieldIndex: (int)AIPackage_FieldIndex.Conditions,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out Condition listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<Condition>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Conditions);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public AIPackage Copy(
            AIPackage_CopyMask copyMask = null,
            AIPackage def = null)
        {
            return AIPackage.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static AIPackage Copy(
            AIPackage item,
            AIPackage_CopyMask copyMask = null,
            AIPackage def = null)
        {
            AIPackage ret;
            if (item.GetType().Equals(typeof(AIPackage)))
            {
                ret = new AIPackage();
            }
            else
            {
                ret = (AIPackage)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static AIPackage Copy_ToLoqui(
            AIPackage item,
            AIPackage_CopyMask copyMask = null,
            AIPackage def = null)
        {
            AIPackage ret;
            if (item.GetType().Equals(typeof(AIPackage)))
            {
                ret = new AIPackage() as AIPackage;
            }
            else
            {
                ret = (AIPackage)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            AIPackage rhs,
            AIPackage_CopyMask copyMask,
            AIPackage def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            AIPackage rhs,
            out AIPackage_ErrorMask errorMask,
            AIPackage_CopyMask copyMask = null,
            AIPackage def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AIPackageSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = AIPackage_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            AIPackage rhs,
            ErrorMaskBuilder errorMask,
            AIPackage_CopyMask copyMask = null,
            AIPackage def = null)
        {
            AIPackageSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    this.Flags = (AIPackage.Flag)obj;
                    break;
                case AIPackage_FieldIndex.GeneralType:
                    this.GeneralType = (AIPackage.GeneralTypeEnum)obj;
                    break;
                case AIPackage_FieldIndex.Location:
                    this.Location = (AIPackageLocation)obj;
                    break;
                case AIPackage_FieldIndex.Schedule:
                    this.Schedule = (AIPackageSchedule)obj;
                    break;
                case AIPackage_FieldIndex.Target:
                    this.Target = (AIPackageTarget)obj;
                    break;
                case AIPackage_FieldIndex.Conditions:
                    this._Conditions.SetTo((ISetList<Condition>)obj);
                    break;
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    this.PKDTDataTypeState = (AIPackage.PKDTDataType)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            AIPackageSetterCommon.Instance.Clear(this);
        }

        public new static AIPackage Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new AIPackage();
            foreach (var pair in fields)
            {
                CopyInInternal_AIPackage(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_AIPackage(AIPackage obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out AIPackage_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    obj.Flags = (AIPackage.Flag)pair.Value;
                    break;
                case AIPackage_FieldIndex.GeneralType:
                    obj.GeneralType = (AIPackage.GeneralTypeEnum)pair.Value;
                    break;
                case AIPackage_FieldIndex.Location:
                    obj.Location = (AIPackageLocation)pair.Value;
                    break;
                case AIPackage_FieldIndex.Schedule:
                    obj.Schedule = (AIPackageSchedule)pair.Value;
                    break;
                case AIPackage_FieldIndex.Target:
                    obj.Target = (AIPackageTarget)pair.Value;
                    break;
                case AIPackage_FieldIndex.Conditions:
                    obj._Conditions.SetTo((ISetList<Condition>)pair.Value);
                    break;
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    obj.PKDTDataTypeState = (AIPackage.PKDTDataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IAIPackage :
        IAIPackageInternalGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IAIPackageInternal>
    {
        new AIPackage.Flag Flags { get; set; }

        new AIPackage.GeneralTypeEnum GeneralType { get; set; }

        new AIPackageLocation Location { get; set; }
        new bool Location_IsSet { get; set; }
        void Location_Set(AIPackageLocation value, bool hasBeenSet = true);
        void Location_Unset();

        new AIPackageSchedule Schedule { get; set; }
        new bool Schedule_IsSet { get; set; }
        void Schedule_Set(AIPackageSchedule value, bool hasBeenSet = true);
        void Schedule_Unset();

        new AIPackageTarget Target { get; set; }
        new bool Target_IsSet { get; set; }
        void Target_Set(AIPackageTarget value, bool hasBeenSet = true);
        void Target_Unset();

        new ISetList<Condition> Conditions { get; }
        void CopyFieldsFrom(
            AIPackage rhs,
            ErrorMaskBuilder errorMask = null,
            AIPackage_CopyMask copyMask = null,
            AIPackage def = null);
    }

    public partial interface IAIPackageInternal :
        IOblivionMajorRecordInternal,
        IAIPackage,
        IAIPackageInternalGetter
    {
        new AIPackage.PKDTDataType PKDTDataTypeState { get; set; }

    }

    public partial interface IAIPackageGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IAIPackageInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Flags
        AIPackage.Flag Flags { get; }

        #endregion
        #region GeneralType
        AIPackage.GeneralTypeEnum GeneralType { get; }

        #endregion
        #region Location
        IAIPackageLocationInternalGetter Location { get; }
        bool Location_IsSet { get; }

        #endregion
        #region Schedule
        IAIPackageScheduleInternalGetter Schedule { get; }
        bool Schedule_IsSet { get; }

        #endregion
        #region Target
        IAIPackageTargetInternalGetter Target { get; }
        bool Target_IsSet { get; }

        #endregion
        #region Conditions
        IReadOnlySetList<IConditionInternalGetter> Conditions { get; }
        #endregion

    }

    public partial interface IAIPackageInternalGetter :
        IOblivionMajorRecordInternalGetter,
        IAIPackageGetter
    {
        #region PKDTDataTypeState
        AIPackage.PKDTDataType PKDTDataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class AIPackageMixIn
    {
        public static void Clear(this IAIPackageInternal item)
        {
            ((AIPackageSetterCommon)((IAIPackageInternalGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static AIPackage_Mask<bool> GetEqualsMask(
            this IAIPackageInternalGetter item,
            IAIPackageInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AIPackageCommon)((IAIPackageInternalGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAIPackageInternalGetter item,
            string name = null,
            AIPackage_Mask<bool> printMask = null)
        {
            return ((AIPackageCommon)((IAIPackageInternalGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAIPackageInternalGetter item,
            FileGeneration fg,
            string name = null,
            AIPackage_Mask<bool> printMask = null)
        {
            ((AIPackageCommon)((IAIPackageInternalGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IAIPackageInternalGetter item,
            AIPackage_Mask<bool?> checkMask)
        {
            return ((AIPackageCommon)((IAIPackageInternalGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static AIPackage_Mask<bool> GetHasBeenSetMask(this IAIPackageInternalGetter item)
        {
            var ret = new AIPackage_Mask<bool>();
            ((AIPackageCommon)((IAIPackageInternalGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IAIPackageInternalGetter item,
            IAIPackageInternalGetter rhs)
        {
            return ((AIPackageCommon)((IAIPackageInternalGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AIPackage_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Flags = 5,
        GeneralType = 6,
        Location = 7,
        Schedule = 8,
        Target = 9,
        Conditions = 10,
        PKDTDataTypeState = 11,
    }
    #endregion

    #region Registration
    public class AIPackage_Registration : ILoquiRegistration
    {
        public static readonly AIPackage_Registration Instance = new AIPackage_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 87,
            version: 0);

        public const string GUID = "e9210f75-0cfe-4e96-8c3a-415255e0d359";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(AIPackage_Mask<>);

        public static readonly Type ErrorMaskType = typeof(AIPackage_ErrorMask);

        public static readonly Type ClassType = typeof(AIPackage);

        public static readonly Type GetterType = typeof(IAIPackageGetter);

        public static readonly Type InternalGetterType = typeof(IAIPackageInternalGetter);

        public static readonly Type SetterType = typeof(IAIPackage);

        public static readonly Type InternalSetterType = typeof(IAIPackageInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.AIPackage";

        public const string Name = "AIPackage";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLAGS":
                    return (ushort)AIPackage_FieldIndex.Flags;
                case "GENERALTYPE":
                    return (ushort)AIPackage_FieldIndex.GeneralType;
                case "LOCATION":
                    return (ushort)AIPackage_FieldIndex.Location;
                case "SCHEDULE":
                    return (ushort)AIPackage_FieldIndex.Schedule;
                case "TARGET":
                    return (ushort)AIPackage_FieldIndex.Target;
                case "CONDITIONS":
                    return (ushort)AIPackage_FieldIndex.Conditions;
                case "PKDTDATATYPESTATE":
                    return (ushort)AIPackage_FieldIndex.PKDTDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Conditions:
                    return true;
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                case AIPackage_FieldIndex.Conditions:
                    return true;
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                case AIPackage_FieldIndex.Conditions:
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    return "Flags";
                case AIPackage_FieldIndex.GeneralType:
                    return "GeneralType";
                case AIPackage_FieldIndex.Location:
                    return "Location";
                case AIPackage_FieldIndex.Schedule:
                    return "Schedule";
                case AIPackage_FieldIndex.Target:
                    return "Target";
                case AIPackage_FieldIndex.Conditions:
                    return "Conditions";
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    return "PKDTDataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                case AIPackage_FieldIndex.Conditions:
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                case AIPackage_FieldIndex.Conditions:
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    return typeof(AIPackage.Flag);
                case AIPackage_FieldIndex.GeneralType:
                    return typeof(AIPackage.GeneralTypeEnum);
                case AIPackage_FieldIndex.Location:
                    return typeof(AIPackageLocation);
                case AIPackage_FieldIndex.Schedule:
                    return typeof(AIPackageSchedule);
                case AIPackage_FieldIndex.Target:
                    return typeof(AIPackageTarget);
                case AIPackage_FieldIndex.Conditions:
                    return typeof(ISetList<Condition>);
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    return typeof(AIPackage.PKDTDataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(AIPackageXmlWriteTranslation);
        public static readonly RecordType PACK_HEADER = new RecordType("PACK");
        public static readonly RecordType PKDT_HEADER = new RecordType("PKDT");
        public static readonly RecordType PLDT_HEADER = new RecordType("PLDT");
        public static readonly RecordType PSDT_HEADER = new RecordType("PSDT");
        public static readonly RecordType PTDT_HEADER = new RecordType("PTDT");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = PACK_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(AIPackageBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class AIPackageSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly AIPackageSetterCommon Instance = new AIPackageSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IAIPackageInternal item)
        {
            ClearPartial();
            item.Flags = default(AIPackage.Flag);
            item.GeneralType = default(AIPackage.GeneralTypeEnum);
            item.Location_Unset();
            item.Schedule_Unset();
            item.Target_Unset();
            item.Conditions.Unset();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IAIPackageInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAIPackageInternal)item);
        }
        
        
    }
    public partial class AIPackageCommon : OblivionMajorRecordCommon
    {
        public new static readonly AIPackageCommon Instance = new AIPackageCommon();

        public AIPackage_Mask<bool> GetEqualsMask(
            IAIPackageInternalGetter item,
            IAIPackageInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AIPackage_Mask<bool>();
            ((AIPackageCommon)((IAIPackageInternalGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAIPackageInternalGetter item,
            IAIPackageInternalGetter rhs,
            AIPackage_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags == rhs.Flags;
            ret.GeneralType = item.GeneralType == rhs.GeneralType;
            ret.Location = EqualsMaskHelper.EqualsHelper(
                item.Location_IsSet,
                rhs.Location_IsSet,
                item.Location,
                rhs.Location,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Schedule = EqualsMaskHelper.EqualsHelper(
                item.Schedule_IsSet,
                rhs.Schedule_IsSet,
                item.Schedule,
                rhs.Schedule,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Target = EqualsMaskHelper.EqualsHelper(
                item.Target_IsSet,
                rhs.Target_IsSet,
                item.Target,
                rhs.Target,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IAIPackageInternalGetter item,
            string name = null,
            AIPackage_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAIPackageInternalGetter item,
            FileGeneration fg,
            string name = null,
            AIPackage_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AIPackage =>");
            }
            else
            {
                fg.AppendLine($"{name} (AIPackage) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAIPackageInternalGetter item,
            FileGeneration fg,
            AIPackage_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.GeneralType ?? true)
            {
                fg.AppendLine($"GeneralType => {item.GeneralType}");
            }
            if (printMask?.Location?.Overall ?? true)
            {
                item.Location?.ToString(fg, "Location");
            }
            if (printMask?.Schedule?.Overall ?? true)
            {
                item.Schedule?.ToString(fg, "Schedule");
            }
            if (printMask?.Target?.Overall ?? true)
            {
                item.Target?.ToString(fg, "Target");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.PKDTDataTypeState ?? true)
            {
            }
        }
        
        public bool HasBeenSet(
            IAIPackageInternalGetter item,
            AIPackage_Mask<bool?> checkMask)
        {
            if (checkMask.Location.Overall.HasValue && checkMask.Location.Overall.Value != item.Location_IsSet) return false;
            if (checkMask.Location.Specific != null && (item.Location == null || !item.Location.HasBeenSet(checkMask.Location.Specific))) return false;
            if (checkMask.Schedule.Overall.HasValue && checkMask.Schedule.Overall.Value != item.Schedule_IsSet) return false;
            if (checkMask.Schedule.Specific != null && (item.Schedule == null || !item.Schedule.HasBeenSet(checkMask.Schedule.Specific))) return false;
            if (checkMask.Target.Overall.HasValue && checkMask.Target.Overall.Value != item.Target_IsSet) return false;
            if (checkMask.Target.Specific != null && (item.Target == null || !item.Target.HasBeenSet(checkMask.Target.Specific))) return false;
            if (checkMask.Conditions.Overall.HasValue && checkMask.Conditions.Overall.Value != item.Conditions.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IAIPackageInternalGetter item,
            AIPackage_Mask<bool> mask)
        {
            mask.Flags = true;
            mask.GeneralType = true;
            mask.Location = new MaskItem<bool, AIPackageLocation_Mask<bool>>(item.Location_IsSet, item.Location.GetHasBeenSetMask());
            mask.Schedule = new MaskItem<bool, AIPackageSchedule_Mask<bool>>(item.Schedule_IsSet, item.Schedule.GetHasBeenSetMask());
            mask.Target = new MaskItem<bool, AIPackageTarget_Mask<bool>>(item.Target_IsSet, item.Target.GetHasBeenSetMask());
            mask.Conditions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Condition_Mask<bool>>>>(item.Conditions.HasBeenSet, item.Conditions.WithIndex().Select((i) => new MaskItemIndexed<bool, Condition_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.PKDTDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static AIPackage_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AIPackage_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (AIPackage_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (AIPackage_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (AIPackage_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (AIPackage_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static AIPackage_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AIPackage_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AIPackage_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (AIPackage_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AIPackage_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAIPackageInternalGetter lhs,
            IAIPackageInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.GeneralType != rhs.GeneralType) return false;
            if (lhs.Location_IsSet != rhs.Location_IsSet) return false;
            if (lhs.Location_IsSet)
            {
                if (!object.Equals(lhs.Location, rhs.Location)) return false;
            }
            if (lhs.Schedule_IsSet != rhs.Schedule_IsSet) return false;
            if (lhs.Schedule_IsSet)
            {
                if (!object.Equals(lhs.Schedule, rhs.Schedule)) return false;
            }
            if (lhs.Target_IsSet != rhs.Target_IsSet) return false;
            if (lhs.Target_IsSet)
            {
                if (!object.Equals(lhs.Target, rhs.Target)) return false;
            }
            if (lhs.Conditions.HasBeenSet != rhs.Conditions.HasBeenSet) return false;
            if (lhs.Conditions.HasBeenSet)
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions)) return false;
            }
            if (lhs.PKDTDataTypeState != rhs.PKDTDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordInternalGetter lhs,
            IOblivionMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IAIPackageInternalGetter)lhs,
                rhs: rhs as IAIPackageInternalGetter);
        }
        
        public override bool Equals(
            IMajorRecordInternalGetter lhs,
            IMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IAIPackageInternalGetter)lhs,
                rhs: rhs as IAIPackageInternalGetter);
        }
        
        public virtual int GetHashCode(IAIPackageInternalGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.GeneralType).CombineHashCode(ret);
            if (item.Location_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Location).CombineHashCode(ret);
            }
            if (item.Schedule_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Schedule).CombineHashCode(ret);
            }
            if (item.Target_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Target).CombineHashCode(ret);
            }
            if (item.Conditions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Conditions).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.PKDTDataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IAIPackageInternalGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IAIPackageInternalGetter)item);
        }
        
        #endregion
        
        
        #region Mutagen
        partial void PostDuplicate(AIPackage obj, AIPackage rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new AIPackage(getNextFormKey());
            ret.CopyFieldsFrom((AIPackage)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (AIPackage)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class AIPackageSetterCopyCommon : OblivionMajorRecordSetterCopyCommon
    {
        public new static readonly AIPackageSetterCopyCommon Instance = new AIPackageSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            AIPackage item,
            AIPackage rhs,
            AIPackage def,
            ErrorMaskBuilder errorMask,
            AIPackage_CopyMask copyMask)
        {
            OblivionMajorRecordSetterCopyCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)AIPackage_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.GeneralType ?? true)
            {
                errorMask?.PushIndex((int)AIPackage_FieldIndex.GeneralType);
                try
                {
                    item.GeneralType = rhs.GeneralType;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Location.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)AIPackage_FieldIndex.Location);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Location,
                        rhsHasBeenSet: rhs.Location_IsSet,
                        defItem: def?.Location,
                        defHasBeenSet: def?.Location_IsSet ?? false,
                        outRhsItem: out var rhsLocationItem,
                        outDefItem: out var defLocationItem))
                    {
                        switch (copyMask?.Location.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                AIPackageLocationSetterCopyCommon.CopyFieldsFrom(
                                    item: item.Location,
                                    rhs: rhs.Location,
                                    def: def?.Location,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Location.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Location = AIPackageLocation.Copy(
                                    rhsLocationItem,
                                    copyMask?.Location?.Specific,
                                    def: defLocationItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Location?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Location_Set(
                            value: default(AIPackageLocation),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Schedule.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)AIPackage_FieldIndex.Schedule);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Schedule,
                        rhsHasBeenSet: rhs.Schedule_IsSet,
                        defItem: def?.Schedule,
                        defHasBeenSet: def?.Schedule_IsSet ?? false,
                        outRhsItem: out var rhsScheduleItem,
                        outDefItem: out var defScheduleItem))
                    {
                        switch (copyMask?.Schedule.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                AIPackageScheduleSetterCopyCommon.CopyFieldsFrom(
                                    item: item.Schedule,
                                    rhs: rhs.Schedule,
                                    def: def?.Schedule,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Schedule.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Schedule = AIPackageSchedule.Copy(
                                    rhsScheduleItem,
                                    copyMask?.Schedule?.Specific,
                                    def: defScheduleItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Schedule?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Schedule_Set(
                            value: default(AIPackageSchedule),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Target.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)AIPackage_FieldIndex.Target);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Target,
                        rhsHasBeenSet: rhs.Target_IsSet,
                        defItem: def?.Target,
                        defHasBeenSet: def?.Target_IsSet ?? false,
                        outRhsItem: out var rhsTargetItem,
                        outDefItem: out var defTargetItem))
                    {
                        switch (copyMask?.Target.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                AIPackageTargetSetterCopyCommon.CopyFieldsFrom(
                                    item: item.Target,
                                    rhs: rhs.Target,
                                    def: def?.Target,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Target.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Target = AIPackageTarget.Copy(
                                    rhsTargetItem,
                                    copyMask?.Target?.Specific,
                                    def: defTargetItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Target?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Target_Set(
                            value: default(AIPackageTarget),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Conditions.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)AIPackage_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetToWithDefault<Condition, Condition>(
                        rhs: rhs.Conditions,
                        def: def?.Conditions,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Conditions.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (Condition)r;
                                case CopyOption.MakeCopy:
                                    return Condition.Copy(
                                        r,
                                        copyMask?.Conditions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Conditions.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class AIPackage
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackage_Registration.Instance;
        public new static AIPackage_Registration Registration => AIPackage_Registration.Instance;
        protected override object CommonInstance()
        {
            return AIPackageCommon.Instance;
        }
        protected override object CommonSetterInstance()
        {
            return AIPackageSetterCommon.Instance;
        }
        protected override object CommonSetterCopyInstance()
        {
            return AIPackageSetterCopyCommon.Instance;
        }

        #endregion

    }
}
#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AIPackageXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static AIPackageXmlWriteTranslation Instance = new AIPackageXmlWriteTranslation();

        public static void WriteToNodeXml(
            IAIPackageInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.PKDTDataTypeState.HasFlag(AIPackage.PKDTDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<AIPackage.Flag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)AIPackage_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.GeneralType) ?? true))
                {
                    EnumXmlTranslation<AIPackage.GeneralTypeEnum>.Instance.Write(
                        node: node,
                        name: nameof(item.GeneralType),
                        item: item.GeneralType,
                        fieldIndex: (int)AIPackage_FieldIndex.GeneralType,
                        errorMask: errorMask);
                }
            }
            if (item.Location_IsSet
                && (translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Location) ?? true))
            {
                var loquiItem = item.Location;
                ((AIPackageLocationXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Location),
                    fieldIndex: (int)AIPackage_FieldIndex.Location,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Location));
            }
            if (item.Schedule_IsSet
                && (translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Schedule) ?? true))
            {
                var loquiItem = item.Schedule;
                ((AIPackageScheduleXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Schedule),
                    fieldIndex: (int)AIPackage_FieldIndex.Schedule,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Schedule));
            }
            if (item.Target_IsSet
                && (translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Target) ?? true))
            {
                var loquiItem = item.Target;
                ((AIPackageTargetXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Target),
                    fieldIndex: (int)AIPackage_FieldIndex.Target,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Target));
            }
            if (item.Conditions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<IConditionInternalGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)AIPackage_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Conditions),
                    transl: (XElement subNode, IConditionInternalGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((ConditionXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.PKDTDataTypeState) ?? true))
            {
                EnumXmlTranslation<AIPackage.PKDTDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.PKDTDataTypeState),
                    item: item.PKDTDataTypeState,
                    fieldIndex: (int)AIPackage_FieldIndex.PKDTDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IAIPackageInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.AIPackage");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.AIPackage");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IAIPackageInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IAIPackageInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IAIPackageInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class AIPackageXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static AIPackageXmlCreateTranslation Instance = new AIPackageXmlCreateTranslation();

        public static void FillPublicXml(
            IAIPackageInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    AIPackageXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IAIPackageInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.Flags);
                        if (EnumXmlTranslation<AIPackage.Flag>.Instance.Parse(
                            node: node,
                            item: out AIPackage.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(AIPackage.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.PKDTDataTypeState |= AIPackage.PKDTDataType.Has;
                    break;
                case "GeneralType":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.GeneralType);
                        if (EnumXmlTranslation<AIPackage.GeneralTypeEnum>.Instance.Parse(
                            node: node,
                            item: out AIPackage.GeneralTypeEnum GeneralTypeParse,
                            errorMask: errorMask))
                        {
                            item.GeneralType = GeneralTypeParse;
                        }
                        else
                        {
                            item.GeneralType = default(AIPackage.GeneralTypeEnum);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Location":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.Location);
                        if (LoquiXmlTranslation<AIPackageLocation>.Instance.Parse(
                            node: node,
                            item: out AIPackageLocation LocationParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Location)))
                        {
                            item.Location = LocationParse;
                        }
                        else
                        {
                            item.Location = default(AIPackageLocation);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Schedule":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.Schedule);
                        if (LoquiXmlTranslation<AIPackageSchedule>.Instance.Parse(
                            node: node,
                            item: out AIPackageSchedule ScheduleParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Schedule)))
                        {
                            item.Schedule = ScheduleParse;
                        }
                        else
                        {
                            item.Schedule = default(AIPackageSchedule);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Target":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.Target);
                        if (LoquiXmlTranslation<AIPackageTarget>.Instance.Parse(
                            node: node,
                            item: out AIPackageTarget TargetParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Target)))
                        {
                            item.Target = TargetParse;
                        }
                        else
                        {
                            item.Target = default(AIPackageTarget);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.Conditions);
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            node: node,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PKDTDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.PKDTDataTypeState);
                        if (EnumXmlTranslation<AIPackage.PKDTDataType>.Instance.Parse(
                            node: node,
                            item: out AIPackage.PKDTDataType PKDTDataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.PKDTDataTypeState = PKDTDataTypeStateParse;
                        }
                        else
                        {
                            item.PKDTDataTypeState = default(AIPackage.PKDTDataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class AIPackageXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IAIPackageInternalGetter item,
            XElement node,
            out AIPackage_ErrorMask errorMask,
            bool doMasks = true,
            AIPackage_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((AIPackageXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AIPackage_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IAIPackageInternalGetter item,
            string path,
            out AIPackage_ErrorMask errorMask,
            AIPackage_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAIPackageInternalGetter item,
            Stream stream,
            out AIPackage_ErrorMask errorMask,
            AIPackage_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class AIPackage_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<AIPackage_Mask<T>>
    {
        #region Ctors
        public AIPackage_Mask()
        {
        }

        public AIPackage_Mask(T initialValue)
        {
            this.Flags = initialValue;
            this.GeneralType = initialValue;
            this.Location = new MaskItem<T, AIPackageLocation_Mask<T>>(initialValue, new AIPackageLocation_Mask<T>(initialValue));
            this.Schedule = new MaskItem<T, AIPackageSchedule_Mask<T>>(initialValue, new AIPackageSchedule_Mask<T>(initialValue));
            this.Target = new MaskItem<T, AIPackageTarget_Mask<T>>(initialValue, new AIPackageTarget_Mask<T>(initialValue));
            this.Conditions = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Condition_Mask<T>>>>(initialValue, null);
            this.PKDTDataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Flags;
        public T GeneralType;
        public MaskItem<T, AIPackageLocation_Mask<T>> Location { get; set; }
        public MaskItem<T, AIPackageSchedule_Mask<T>> Schedule { get; set; }
        public MaskItem<T, AIPackageTarget_Mask<T>> Target { get; set; }
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Condition_Mask<T>>>> Conditions;
        public T PKDTDataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is AIPackage_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AIPackage_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.GeneralType, rhs.GeneralType)) return false;
            if (!object.Equals(this.Location, rhs.Location)) return false;
            if (!object.Equals(this.Schedule, rhs.Schedule)) return false;
            if (!object.Equals(this.Target, rhs.Target)) return false;
            if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
            if (!object.Equals(this.PKDTDataTypeState, rhs.PKDTDataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.GeneralType?.GetHashCode());
            ret = ret.CombineHashCode(this.Location?.GetHashCode());
            ret = ret.CombineHashCode(this.Schedule?.GetHashCode());
            ret = ret.CombineHashCode(this.Target?.GetHashCode());
            ret = ret.CombineHashCode(this.Conditions?.GetHashCode());
            ret = ret.CombineHashCode(this.PKDTDataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.GeneralType)) return false;
            if (Location != null)
            {
                if (!eval(this.Location.Overall)) return false;
                if (this.Location.Specific != null && !this.Location.Specific.AllEqual(eval)) return false;
            }
            if (Schedule != null)
            {
                if (!eval(this.Schedule.Overall)) return false;
                if (this.Schedule.Specific != null && !this.Schedule.Specific.AllEqual(eval)) return false;
            }
            if (Target != null)
            {
                if (!eval(this.Target.Overall)) return false;
                if (this.Target.Specific != null && !this.Target.Specific.AllEqual(eval)) return false;
            }
            if (this.Conditions != null)
            {
                if (!eval(this.Conditions.Overall)) return false;
                if (this.Conditions.Specific != null)
                {
                    foreach (var item in this.Conditions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.PKDTDataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new AIPackage_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new AIPackage_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(AIPackage_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Flags = eval(this.Flags);
            obj.GeneralType = eval(this.GeneralType);
            if (this.Location != null)
            {
                obj.Location = new MaskItem<R, AIPackageLocation_Mask<R>>();
                obj.Location.Overall = eval(this.Location.Overall);
                if (this.Location.Specific != null)
                {
                    obj.Location.Specific = this.Location.Specific.Translate(eval);
                }
            }
            if (this.Schedule != null)
            {
                obj.Schedule = new MaskItem<R, AIPackageSchedule_Mask<R>>();
                obj.Schedule.Overall = eval(this.Schedule.Overall);
                if (this.Schedule.Specific != null)
                {
                    obj.Schedule.Specific = this.Schedule.Specific.Translate(eval);
                }
            }
            if (this.Target != null)
            {
                obj.Target = new MaskItem<R, AIPackageTarget_Mask<R>>();
                obj.Target.Overall = eval(this.Target.Overall);
                if (this.Target.Specific != null)
                {
                    obj.Target.Specific = this.Target.Specific.Translate(eval);
                }
            }
            if (Conditions != null)
            {
                obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition_Mask<R>>>>();
                obj.Conditions.Overall = eval(this.Conditions.Overall);
                if (Conditions.Specific != null)
                {
                    List<MaskItemIndexed<R, Condition_Mask<R>>> l = new List<MaskItemIndexed<R, Condition_Mask<R>>>();
                    obj.Conditions.Specific = l;
                    foreach (var item in Conditions.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Condition_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Condition_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.PKDTDataTypeState = eval(this.PKDTDataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Conditions.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(AIPackage_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, AIPackage_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(AIPackage_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.GeneralType ?? true)
                {
                    fg.AppendLine($"GeneralType => {GeneralType}");
                }
                if (printMask?.Location?.Overall ?? true)
                {
                    Location?.ToString(fg);
                }
                if (printMask?.Schedule?.Overall ?? true)
                {
                    Schedule?.ToString(fg);
                }
                if (printMask?.Target?.Overall ?? true)
                {
                    Target?.ToString(fg);
                }
                if (printMask?.Conditions?.Overall ?? true)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Conditions.Overall != null)
                        {
                            fg.AppendLine(Conditions.Overall.ToString());
                        }
                        if (Conditions.Specific != null)
                        {
                            foreach (var subItem in Conditions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.PKDTDataTypeState ?? true)
                {
                    fg.AppendLine($"PKDTDataTypeState => {PKDTDataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class AIPackage_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<AIPackage_ErrorMask>
    {
        #region Members
        public Exception Flags;
        public Exception GeneralType;
        public MaskItem<Exception, AIPackageLocation_ErrorMask> Location;
        public MaskItem<Exception, AIPackageSchedule_ErrorMask> Schedule;
        public MaskItem<Exception, AIPackageTarget_ErrorMask> Target;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>> Conditions;
        public Exception PKDTDataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    return Flags;
                case AIPackage_FieldIndex.GeneralType:
                    return GeneralType;
                case AIPackage_FieldIndex.Location:
                    return Location;
                case AIPackage_FieldIndex.Schedule:
                    return Schedule;
                case AIPackage_FieldIndex.Target:
                    return Target;
                case AIPackage_FieldIndex.Conditions:
                    return Conditions;
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    return PKDTDataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case AIPackage_FieldIndex.GeneralType:
                    this.GeneralType = ex;
                    break;
                case AIPackage_FieldIndex.Location:
                    this.Location = new MaskItem<Exception, AIPackageLocation_ErrorMask>(ex, null);
                    break;
                case AIPackage_FieldIndex.Schedule:
                    this.Schedule = new MaskItem<Exception, AIPackageSchedule_ErrorMask>(ex, null);
                    break;
                case AIPackage_FieldIndex.Target:
                    this.Target = new MaskItem<Exception, AIPackageTarget_ErrorMask>(ex, null);
                    break;
                case AIPackage_FieldIndex.Conditions:
                    this.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(ex, null);
                    break;
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    this.PKDTDataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case AIPackage_FieldIndex.GeneralType:
                    this.GeneralType = (Exception)obj;
                    break;
                case AIPackage_FieldIndex.Location:
                    this.Location = (MaskItem<Exception, AIPackageLocation_ErrorMask>)obj;
                    break;
                case AIPackage_FieldIndex.Schedule:
                    this.Schedule = (MaskItem<Exception, AIPackageSchedule_ErrorMask>)obj;
                    break;
                case AIPackage_FieldIndex.Target:
                    this.Target = (MaskItem<Exception, AIPackageTarget_ErrorMask>)obj;
                    break;
                case AIPackage_FieldIndex.Conditions:
                    this.Conditions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>)obj;
                    break;
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    this.PKDTDataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Flags != null) return true;
            if (GeneralType != null) return true;
            if (Location != null) return true;
            if (Schedule != null) return true;
            if (Target != null) return true;
            if (Conditions != null) return true;
            if (PKDTDataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("AIPackage_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"GeneralType => {GeneralType}");
            Location?.ToString(fg);
            Schedule?.ToString(fg);
            Target?.ToString(fg);
            fg.AppendLine("Conditions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Conditions.Overall != null)
                {
                    fg.AppendLine(Conditions.Overall.ToString());
                }
                if (Conditions.Specific != null)
                {
                    foreach (var subItem in Conditions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"PKDTDataTypeState => {PKDTDataTypeState}");
        }
        #endregion

        #region Combine
        public AIPackage_ErrorMask Combine(AIPackage_ErrorMask rhs)
        {
            var ret = new AIPackage_ErrorMask();
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.GeneralType = this.GeneralType.Combine(rhs.GeneralType);
            ret.Location = new MaskItem<Exception, AIPackageLocation_ErrorMask>(this.Location.Overall.Combine(rhs.Location.Overall), ((IErrorMask<AIPackageLocation_ErrorMask>)this.Location.Specific).Combine(rhs.Location.Specific));
            ret.Schedule = new MaskItem<Exception, AIPackageSchedule_ErrorMask>(this.Schedule.Overall.Combine(rhs.Schedule.Overall), ((IErrorMask<AIPackageSchedule_ErrorMask>)this.Schedule.Specific).Combine(rhs.Schedule.Specific));
            ret.Target = new MaskItem<Exception, AIPackageTarget_ErrorMask>(this.Target.Overall.Combine(rhs.Target.Overall), ((IErrorMask<AIPackageTarget_ErrorMask>)this.Target.Specific).Combine(rhs.Target.Specific));
            ret.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(this.Conditions.Overall.Combine(rhs.Conditions.Overall), new List<MaskItem<Exception, Condition_ErrorMask>>(this.Conditions.Specific.And(rhs.Conditions.Specific)));
            ret.PKDTDataTypeState = this.PKDTDataTypeState.Combine(rhs.PKDTDataTypeState);
            return ret;
        }
        public static AIPackage_ErrorMask Combine(AIPackage_ErrorMask lhs, AIPackage_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static AIPackage_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new AIPackage_ErrorMask();
        }
        #endregion

    }
    public class AIPackage_CopyMask : OblivionMajorRecord_CopyMask
    {
        public AIPackage_CopyMask()
        {
        }

        public AIPackage_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Flags = defaultOn;
            this.GeneralType = defaultOn;
            this.Location = new MaskItem<CopyOption, AIPackageLocation_CopyMask>(deepCopyOption, default);
            this.Schedule = new MaskItem<CopyOption, AIPackageSchedule_CopyMask>(deepCopyOption, default);
            this.Target = new MaskItem<CopyOption, AIPackageTarget_CopyMask>(deepCopyOption, default);
            this.Conditions = new MaskItem<CopyOption, Condition_CopyMask>(deepCopyOption, default);
            this.PKDTDataTypeState = defaultOn;
        }

        #region Members
        public bool Flags;
        public bool GeneralType;
        public MaskItem<CopyOption, AIPackageLocation_CopyMask> Location;
        public MaskItem<CopyOption, AIPackageSchedule_CopyMask> Schedule;
        public MaskItem<CopyOption, AIPackageTarget_CopyMask> Target;
        public MaskItem<CopyOption, Condition_CopyMask> Conditions;
        public bool PKDTDataTypeState;
        #endregion

    }

    public class AIPackage_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Flags;
        public bool GeneralType;
        public MaskItem<bool, AIPackageLocation_TranslationMask> Location;
        public MaskItem<bool, AIPackageSchedule_TranslationMask> Schedule;
        public MaskItem<bool, AIPackageTarget_TranslationMask> Target;
        public MaskItem<bool, Condition_TranslationMask> Conditions;
        public bool PKDTDataTypeState;
        #endregion

        #region Ctors
        public AIPackage_TranslationMask()
            : base()
        {
        }

        public AIPackage_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Flags = defaultOn;
            this.GeneralType = defaultOn;
            this.Location = new MaskItem<bool, AIPackageLocation_TranslationMask>(defaultOn, null);
            this.Schedule = new MaskItem<bool, AIPackageSchedule_TranslationMask>(defaultOn, null);
            this.Target = new MaskItem<bool, AIPackageTarget_TranslationMask>(defaultOn, null);
            this.Conditions = new MaskItem<bool, Condition_TranslationMask>(defaultOn, null);
            this.PKDTDataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Flags, null));
            ret.Add((GeneralType, null));
            ret.Add((Location?.Overall ?? true, Location?.Specific?.GetCrystal()));
            ret.Add((Schedule?.Overall ?? true, Schedule?.Specific?.GetCrystal()));
            ret.Add((Target?.Overall ?? true, Target?.Specific?.GetCrystal()));
            ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
            ret.Add((PKDTDataTypeState, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AIPackageBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static AIPackageBinaryWriteTranslation Instance = new AIPackageBinaryWriteTranslation();

        static partial void WriteBinaryFlagsCustom(
            MutagenWriter writer,
            IAIPackageInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryFlags(
            MutagenWriter writer,
            IAIPackageInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryFlagsCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinaryGeneralTypeCustom(
            MutagenWriter writer,
            IAIPackageInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryGeneralType(
            MutagenWriter writer,
            IAIPackageInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryGeneralTypeCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_Embedded(
            IAIPackageInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IAIPackageInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.PKDTDataTypeState.HasFlag(AIPackage.PKDTDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(AIPackage_Registration.PKDT_HEADER)))
                {
                    AIPackageBinaryWriteTranslation.WriteBinaryFlags(
                        writer: writer,
                        item: item,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                    AIPackageBinaryWriteTranslation.WriteBinaryGeneralType(
                        writer: writer,
                        item: item,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
            if (item.Location_IsSet)
            {
                var loquiItem = item.Location;
                ((AIPackageLocationBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Schedule_IsSet)
            {
                var loquiItem = item.Schedule;
                ((AIPackageScheduleBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Target_IsSet)
            {
                var loquiItem = item.Target;
                ((AIPackageTargetBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Conditions.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IConditionInternalGetter>.Instance.Write(
                    writer: writer,
                    items: item.Conditions,
                    fieldIndex: (int)AIPackage_FieldIndex.Conditions,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IConditionInternalGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((ConditionBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IAIPackageInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: AIPackage_Registration.PACK_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IAIPackageInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IAIPackageInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IAIPackageInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class AIPackageBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static AIPackageBinaryCreateTranslation Instance = new AIPackageBinaryCreateTranslation();

        static partial void FillBinaryFlagsCustom(
            MutagenFrame frame,
            AIPackage item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryFlagsCustomPublic(
            MutagenFrame frame,
            AIPackage item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryFlagsCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinaryGeneralTypeCustom(
            MutagenFrame frame,
            AIPackage item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryGeneralTypeCustomPublic(
            MutagenFrame frame,
            AIPackage item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryGeneralTypeCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class AIPackageBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAIPackageInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out AIPackage_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((AIPackageBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AIPackage_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AIPackageBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        IAIPackageInternalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackage_Registration.Instance;
        public new static AIPackage_Registration Registration => AIPackage_Registration.Instance;
        protected override object CommonInstance()
        {
            return AIPackageCommon.Instance;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAIPackageInternalGetter)rhs, include);

        protected override object XmlWriteTranslator => AIPackageXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((AIPackageXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => AIPackageBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((AIPackageBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        private int? _PKDTLocation;
        public AIPackage.PKDTDataType PKDTDataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _PKDTLocation.Value + 0x0;
        private bool _Flags_IsSet => GetFlagsIsSetCustom();
        public AIPackage.Flag Flags => GetFlagsCustom();
        #endregion
        #region GeneralType
        private int _GeneralTypeLocation => _PKDTLocation.Value + 0x4;
        private bool _GeneralType_IsSet => GetGeneralTypeIsSetCustom();
        public AIPackage.GeneralTypeEnum GeneralType => GetGeneralTypeCustom();
        #endregion
        #region Location
        public IAIPackageLocationInternalGetter Location { get; private set; }
        public bool Location_IsSet => Location != null;
        #endregion
        #region Schedule
        public IAIPackageScheduleInternalGetter Schedule { get; private set; }
        public bool Schedule_IsSet => Schedule != null;
        #endregion
        #region Target
        public IAIPackageTargetInternalGetter Target { get; private set; }
        public bool Target_IsSet => Target != null;
        #endregion
        public IReadOnlySetList<IConditionInternalGetter> Conditions { get; private set; } = EmptySetList<ConditionBinaryWrapper>.Instance;
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected AIPackageBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static AIPackageBinaryWrapper AIPackageFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new AIPackageBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x54444B50: // PKDT
                {
                    _PKDTLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.PKDTDataTypeState = AIPackage.PKDTDataType.Has;
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.GeneralType);
                }
                case 0x54444C50: // PLDT
                {
                    this.Location = AIPackageLocationBinaryWrapper.AIPackageLocationFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Location);
                }
                case 0x54445350: // PSDT
                {
                    this.Schedule = AIPackageScheduleBinaryWrapper.AIPackageScheduleFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Schedule);
                }
                case 0x54445450: // PTDT
                {
                    this.Target = AIPackageTargetBinaryWrapper.AIPackageTargetFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Target);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    this.Conditions = BinaryWrapperSetList<ConditionBinaryWrapper>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => ConditionBinaryWrapper.ConditionFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Conditions);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

