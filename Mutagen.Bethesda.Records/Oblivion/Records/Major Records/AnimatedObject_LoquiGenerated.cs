/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AnimatedObject :
        OblivionMajorRecord,
        IAnimatedObjectInternal,
        ILoquiObjectSetter<AnimatedObject>,
        ILinkSubContainer,
        IEquatable<AnimatedObject>,
        IEqualsMask
    {
        #region Ctor
        protected AnimatedObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)AnimatedObject_FieldIndex.Model];
            set => _hasBeenSetTracker[(int)AnimatedObject_FieldIndex.Model] = value;
        }
        bool IAnimatedObjectGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool hasBeenSet = true)
        {
            _Model = value;
            _hasBeenSetTracker[(int)AnimatedObject_FieldIndex.Model] = hasBeenSet;
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter IAnimatedObjectGetter.Model => this.Model;
        #endregion
        #region IdleAnimation
        public IFormIDSetLink<IdleAnimation> IdleAnimation_Property { get; } = new FormIDSetLink<IdleAnimation>();
        public IdleAnimation IdleAnimation { get => IdleAnimation_Property.Item; set => IdleAnimation_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<IdleAnimation> IAnimatedObject.IdleAnimation_Property => this.IdleAnimation_Property;
        IIdleAnimationGetter IAnimatedObjectGetter.IdleAnimation => this.IdleAnimation_Property.Item;
        IFormIDSetLinkGetter<IIdleAnimationGetter> IAnimatedObjectGetter.IdleAnimation_Property => this.IdleAnimation_Property;
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAnimatedObjectGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            AnimatedObjectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IAnimatedObjectGetter rhs)) return false;
            return ((AnimatedObjectCommon)((IAnimatedObjectGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(AnimatedObject obj)
        {
            return ((AnimatedObjectCommon)((IAnimatedObjectGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((AnimatedObjectCommon)((IAnimatedObjectGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => AnimatedObjectXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((AnimatedObjectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static AnimatedObject CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            AnimatedObject_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static AnimatedObject CreateFromXml(
            XElement node,
            out AnimatedObject_ErrorMask errorMask,
            bool doMasks = true,
            AnimatedObject_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = AnimatedObject_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static AnimatedObject CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new AnimatedObject() : null;
                    break;
                default:
                    break;
            }
            var ret = new AnimatedObject();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    AnimatedObjectXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static AnimatedObject CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            AnimatedObject_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static AnimatedObject CreateFromXml(
            string path,
            out AnimatedObject_ErrorMask errorMask,
            AnimatedObject_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AnimatedObject CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            AnimatedObject_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static AnimatedObject CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            AnimatedObject_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static AnimatedObject CreateFromXml(
            Stream stream,
            out AnimatedObject_ErrorMask errorMask,
            AnimatedObject_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AnimatedObject CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            AnimatedObject_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            AnimatedObject item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((AnimatedObject_FieldIndex)index)
            {
                case AnimatedObject_FieldIndex.Model:
                    return _hasBeenSetTracker[index];
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return IdleAnimation_Property.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = AnimatedObject_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return IdleAnimation_Property;
            yield break;
        }

        public override void Link<M>(LinkingPackage<M> package)
            
        {
            base.Link(package: package);
            IdleAnimation_Property.Link(package);
        }

        public AnimatedObject(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public AnimatedObject(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => AnimatedObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((AnimatedObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static AnimatedObject CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static AnimatedObject CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out AnimatedObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AnimatedObject_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static AnimatedObject CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<AnimatedObject>(
                record: new AnimatedObject(),
                frame: frame,
                errorMask: errorMask,
                recType: AnimatedObject_Registration.ANIO_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            AnimatedObject item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            AnimatedObject item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    try
                    {
                        errorMask?.PushIndex((int)AnimatedObject_FieldIndex.Model);
                        item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)AnimatedObject_FieldIndex.Model);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.IdleAnimation_Property);
                    return TryGet<int?>.Succeed((int)AnimatedObject_FieldIndex.IdleAnimation);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        void IClearable.Clear()
        {
            ((AnimatedObjectSetterCommon)((IAnimatedObjectGetter)this).CommonSetterInstance()).Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface IAnimatedObject :
        IAnimatedObjectGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IAnimatedObjectInternal>
    {
        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model value, bool hasBeenSet = true);
        void Model_Unset();

        new IdleAnimation IdleAnimation { get; set; }
        new IFormIDSetLink<IdleAnimation> IdleAnimation_Property { get; }
    }

    public partial interface IAnimatedObjectInternal :
        IOblivionMajorRecordInternal,
        IAnimatedObject,
        IAnimatedObjectGetter
    {
    }

    public partial interface IAnimatedObjectGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IAnimatedObjectGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Model
        IModelGetter Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region IdleAnimation
        IIdleAnimationGetter IdleAnimation { get; }
        IFormIDSetLinkGetter<IIdleAnimationGetter> IdleAnimation_Property { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class AnimatedObjectMixIn
    {
        public static void Clear(this IAnimatedObjectInternal item)
        {
            ((AnimatedObjectSetterCommon)((IAnimatedObjectGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static AnimatedObject_Mask<bool> GetEqualsMask(
            this IAnimatedObjectGetter item,
            IAnimatedObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AnimatedObjectCommon)((IAnimatedObjectGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAnimatedObjectGetter item,
            string name = null,
            AnimatedObject_Mask<bool> printMask = null)
        {
            return ((AnimatedObjectCommon)((IAnimatedObjectGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAnimatedObjectGetter item,
            FileGeneration fg,
            string name = null,
            AnimatedObject_Mask<bool> printMask = null)
        {
            ((AnimatedObjectCommon)((IAnimatedObjectGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IAnimatedObjectGetter item,
            AnimatedObject_Mask<bool?> checkMask)
        {
            return ((AnimatedObjectCommon)((IAnimatedObjectGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static AnimatedObject_Mask<bool> GetHasBeenSetMask(this IAnimatedObjectGetter item)
        {
            var ret = new AnimatedObject_Mask<bool>();
            ((AnimatedObjectCommon)((IAnimatedObjectGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IAnimatedObjectGetter item,
            IAnimatedObjectGetter rhs)
        {
            return ((AnimatedObjectCommon)((IAnimatedObjectGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void CopyFieldsFrom(
            this AnimatedObject lhs,
            AnimatedObject rhs,
            AnimatedObject_CopyMask copyMask,
            AnimatedObject def = null)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void CopyFieldsFrom(
            this AnimatedObject lhs,
            AnimatedObject rhs,
            out AnimatedObject_ErrorMask errorMask,
            AnimatedObject_CopyMask copyMask = null,
            AnimatedObject def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AnimatedObjectSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = AnimatedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyFieldsFrom(
            this AnimatedObject lhs,
            AnimatedObject rhs,
            ErrorMaskBuilder errorMask,
            AnimatedObject_CopyMask copyMask = null,
            AnimatedObject def = null)
        {
            AnimatedObjectSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AnimatedObject_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Model = 5,
        IdleAnimation = 6,
    }
    #endregion

    #region Registration
    public class AnimatedObject_Registration : ILoquiRegistration
    {
        public static readonly AnimatedObject_Registration Instance = new AnimatedObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 165,
            version: 0);

        public const string GUID = "08eca501-d197-4c2f-aa92-e326a4a9de2d";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(AnimatedObject_Mask<>);

        public static readonly Type ErrorMaskType = typeof(AnimatedObject_ErrorMask);

        public static readonly Type ClassType = typeof(AnimatedObject);

        public static readonly Type GetterType = typeof(IAnimatedObjectGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAnimatedObject);

        public static readonly Type InternalSetterType = typeof(IAnimatedObjectInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.AnimatedObject";

        public const string Name = "AnimatedObject";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)AnimatedObject_FieldIndex.Model;
                case "IDLEANIMATION":
                    return (ushort)AnimatedObject_FieldIndex.IdleAnimation;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    return true;
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    return "Model";
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return "IdleAnimation";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    return typeof(Model);
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return typeof(IFormIDSetLink<IdleAnimation>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(AnimatedObjectXmlWriteTranslation);
        public static readonly RecordType ANIO_HEADER = new RecordType("ANIO");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ANIO_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryWriteTranslation = typeof(AnimatedObjectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class AnimatedObjectSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly AnimatedObjectSetterCommon Instance = new AnimatedObjectSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IAnimatedObjectInternal item)
        {
            ClearPartial();
            item.Model_Unset();
            item.IdleAnimation_Property.Unset();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IAnimatedObjectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAnimatedObjectInternal)item);
        }
        
    }
    public partial class AnimatedObjectCommon : OblivionMajorRecordCommon
    {
        public new static readonly AnimatedObjectCommon Instance = new AnimatedObjectCommon();

        public AnimatedObject_Mask<bool> GetEqualsMask(
            IAnimatedObjectGetter item,
            IAnimatedObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AnimatedObject_Mask<bool>();
            ((AnimatedObjectCommon)((IAnimatedObjectGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAnimatedObjectGetter item,
            IAnimatedObjectGetter rhs,
            AnimatedObject_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.IdleAnimation = item.IdleAnimation_Property.FormKey == rhs.IdleAnimation_Property.FormKey;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IAnimatedObjectGetter item,
            string name = null,
            AnimatedObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAnimatedObjectGetter item,
            FileGeneration fg,
            string name = null,
            AnimatedObject_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AnimatedObject =>");
            }
            else
            {
                fg.AppendLine($"{name} (AnimatedObject) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAnimatedObjectGetter item,
            FileGeneration fg,
            AnimatedObject_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.IdleAnimation ?? true)
            {
                fg.AppendLine($"IdleAnimation => {item.IdleAnimation_Property}");
            }
        }
        
        public bool HasBeenSet(
            IAnimatedObjectGetter item,
            AnimatedObject_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.IdleAnimation.HasValue && checkMask.IdleAnimation.Value != item.IdleAnimation_Property.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IAnimatedObjectGetter item,
            AnimatedObject_Mask<bool> mask)
        {
            mask.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, item.Model.GetHasBeenSetMask());
            mask.IdleAnimation = item.IdleAnimation_Property.HasBeenSet;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static AnimatedObject_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AnimatedObject_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (AnimatedObject_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (AnimatedObject_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (AnimatedObject_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (AnimatedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static AnimatedObject_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AnimatedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AnimatedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (AnimatedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AnimatedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAnimatedObjectGetter lhs,
            IAnimatedObjectGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Model_IsSet != rhs.Model_IsSet) return false;
            if (lhs.Model_IsSet)
            {
                if (!object.Equals(lhs.Model, rhs.Model)) return false;
            }
            if (lhs.IdleAnimation_Property.HasBeenSet != rhs.IdleAnimation_Property.HasBeenSet) return false;
            if (lhs.IdleAnimation_Property.HasBeenSet)
            {
                if (!lhs.IdleAnimation_Property.Equals(rhs.IdleAnimation_Property)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter lhs,
            IOblivionMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IAnimatedObjectGetter)lhs,
                rhs: rhs as IAnimatedObjectGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IAnimatedObjectGetter)lhs,
                rhs: rhs as IAnimatedObjectGetter);
        }
        
        public virtual int GetHashCode(IAnimatedObjectGetter item)
        {
            int ret = 0;
            if (item.Model_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Model).CombineHashCode(ret);
            }
            if (item.IdleAnimation_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.IdleAnimation).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IAnimatedObjectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAnimatedObjectGetter)item);
        }
        
        #endregion
        
        
        #region Mutagen
        partial void PostDuplicate(AnimatedObject obj, AnimatedObject rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new AnimatedObject(getNextFormKey());
            ret.CopyFieldsFrom((AnimatedObject)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (AnimatedObject)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class AnimatedObjectSetterCopyCommon : OblivionMajorRecordSetterCopyCommon
    {
        public new static readonly AnimatedObjectSetterCopyCommon Instance = new AnimatedObjectSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            AnimatedObject item,
            AnimatedObject rhs,
            AnimatedObject def,
            ErrorMaskBuilder errorMask,
            AnimatedObject_CopyMask copyMask)
        {
            OblivionMajorRecordSetterCopyCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)AnimatedObject_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                ModelSetterCopyCommon.CopyFieldsFrom(
                                    item: item.Model,
                                    rhs: rhs.Model,
                                    def: def?.Model,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Model.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Model = rhsModelItem.Copy(
                                    copyMask?.Model?.Specific,
                                    def: defModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Model_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.IdleAnimation ?? true)
            {
                errorMask?.PushIndex((int)AnimatedObject_FieldIndex.IdleAnimation);
                try
                {
                    item.IdleAnimation_Property.SetLink(
                        rhs: rhs.IdleAnimation_Property,
                        def: def?.IdleAnimation_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class AnimatedObject
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AnimatedObject_Registration.Instance;
        public new static AnimatedObject_Registration Registration => AnimatedObject_Registration.Instance;
        protected override object CommonInstance()
        {
            return AnimatedObjectCommon.Instance;
        }
        protected override object CommonSetterInstance()
        {
            return AnimatedObjectSetterCommon.Instance;
        }
        protected override object CommonSetterCopyInstance()
        {
            return AnimatedObjectSetterCopyCommon.Instance;
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AnimatedObjectXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static AnimatedObjectXmlWriteTranslation Instance = new AnimatedObjectXmlWriteTranslation();

        public static void WriteToNodeXml(
            IAnimatedObjectGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)AnimatedObject_FieldIndex.Model) ?? true))
            {
                var loquiItem = item.Model;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)AnimatedObject_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)AnimatedObject_FieldIndex.Model));
            }
            if (item.IdleAnimation_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)AnimatedObject_FieldIndex.IdleAnimation) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.IdleAnimation),
                    item: item.IdleAnimation_Property?.FormKey,
                    fieldIndex: (int)AnimatedObject_FieldIndex.IdleAnimation,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IAnimatedObjectGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.AnimatedObject");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.AnimatedObject");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IAnimatedObjectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IAnimatedObjectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IAnimatedObjectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class AnimatedObjectXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static AnimatedObjectXmlCreateTranslation Instance = new AnimatedObjectXmlCreateTranslation();

        public static void FillPublicXml(
            IAnimatedObjectInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    AnimatedObjectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IAnimatedObjectInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)AnimatedObject_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AnimatedObject_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IdleAnimation":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.IdleAnimation_Property,
                        fieldIndex: (int)AnimatedObject_FieldIndex.IdleAnimation,
                        errorMask: errorMask);
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class AnimatedObjectXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IAnimatedObjectGetter item,
            XElement node,
            out AnimatedObject_ErrorMask errorMask,
            bool doMasks = true,
            AnimatedObject_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((AnimatedObjectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AnimatedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IAnimatedObjectGetter item,
            string path,
            out AnimatedObject_ErrorMask errorMask,
            AnimatedObject_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAnimatedObjectGetter item,
            Stream stream,
            out AnimatedObject_ErrorMask errorMask,
            AnimatedObject_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class AnimatedObject_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<AnimatedObject_Mask<T>>
    {
        #region Ctors
        public AnimatedObject_Mask()
        {
        }

        public AnimatedObject_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.IdleAnimation = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T IdleAnimation;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is AnimatedObject_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AnimatedObject_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.IdleAnimation, rhs.IdleAnimation)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.IdleAnimation?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.IdleAnimation)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new AnimatedObject_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new AnimatedObject_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(AnimatedObject_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.IdleAnimation = eval(this.IdleAnimation);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(AnimatedObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, AnimatedObject_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(AnimatedObject_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.IdleAnimation ?? true)
                {
                    fg.AppendLine($"IdleAnimation => {IdleAnimation}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class AnimatedObject_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<AnimatedObject_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception IdleAnimation;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    return Model;
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return IdleAnimation;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case AnimatedObject_FieldIndex.IdleAnimation:
                    this.IdleAnimation = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case AnimatedObject_FieldIndex.IdleAnimation:
                    this.IdleAnimation = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (IdleAnimation != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("AnimatedObject_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            Model?.ToString(fg);
            fg.AppendLine($"IdleAnimation => {IdleAnimation}");
        }
        #endregion

        #region Combine
        public AnimatedObject_ErrorMask Combine(AnimatedObject_ErrorMask rhs)
        {
            var ret = new AnimatedObject_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.IdleAnimation = this.IdleAnimation.Combine(rhs.IdleAnimation);
            return ret;
        }
        public static AnimatedObject_ErrorMask Combine(AnimatedObject_ErrorMask lhs, AnimatedObject_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static AnimatedObject_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new AnimatedObject_ErrorMask();
        }
        #endregion

    }
    public class AnimatedObject_CopyMask : OblivionMajorRecord_CopyMask
    {
        public AnimatedObject_CopyMask()
        {
        }

        public AnimatedObject_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Model = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.IdleAnimation = defaultOn;
        }

        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool IdleAnimation;
        #endregion

    }

    public class AnimatedObject_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool IdleAnimation;
        #endregion

        #region Ctors
        public AnimatedObject_TranslationMask()
            : base()
        {
        }

        public AnimatedObject_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.IdleAnimation = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((IdleAnimation, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AnimatedObjectBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static AnimatedObjectBinaryWriteTranslation Instance = new AnimatedObjectBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IAnimatedObjectGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Model_IsSet)
            {
                var loquiItem = item.Model;
                ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.IdleAnimation_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.IdleAnimation_Property,
                    header: recordTypeConverter.ConvertToCustom(AnimatedObject_Registration.DATA_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            IAnimatedObjectGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: AnimatedObject_Registration.ANIO_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IAnimatedObjectGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IAnimatedObjectGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IAnimatedObjectGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class AnimatedObjectBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static AnimatedObjectBinaryCreateTranslation Instance = new AnimatedObjectBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class AnimatedObjectBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAnimatedObjectGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out AnimatedObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((AnimatedObjectBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AnimatedObject_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AnimatedObjectBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        IAnimatedObjectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AnimatedObject_Registration.Instance;
        public new static AnimatedObject_Registration Registration => AnimatedObject_Registration.Instance;
        protected override object CommonInstance()
        {
            return AnimatedObjectCommon.Instance;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAnimatedObjectGetter)rhs, include);

        protected override object XmlWriteTranslator => AnimatedObjectXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((AnimatedObjectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => AnimatedObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((AnimatedObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Model
        public IModelGetter Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        #region IdleAnimation
        private int? _IdleAnimationLocation;
        public bool IdleAnimation_IsSet => _IdleAnimationLocation.HasValue;
        public IFormIDSetLinkGetter<IIdleAnimationGetter> IdleAnimation_Property => _IdleAnimationLocation.HasValue ? new FormIDSetLink<IIdleAnimationGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _IdleAnimationLocation.Value, _package.Meta)))) : FormIDSetLink<IIdleAnimationGetter>.Empty;
        public IIdleAnimationGetter IdleAnimation => default;
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected AnimatedObjectBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static AnimatedObjectBinaryWrapper AnimatedObjectFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new AnimatedObjectBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryWrapper.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)AnimatedObject_FieldIndex.Model);
                }
                case 0x41544144: // DATA
                {
                    _IdleAnimationLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)AnimatedObject_FieldIndex.IdleAnimation);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

