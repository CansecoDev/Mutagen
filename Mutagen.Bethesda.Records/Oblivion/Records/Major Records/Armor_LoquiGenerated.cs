/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Armor :
        ClothingAbstract,
        IArmorInternal,
        ILoquiObjectSetter<Armor>,
        IEquatable<Armor>,
        IEqualsMask
    {
        #region Ctor
        protected Armor()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ArmorValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ArmorValue;
        public Single ArmorValue
        {
            get => this._ArmorValue;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._ArmorValue = value;
            }
        }
        #endregion
        #region Value
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _Value;
        public UInt32 Value
        {
            get => this._Value;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Value = value;
            }
        }
        #endregion
        #region Health
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _Health;
        public UInt32 Health
        {
            get => this._Health;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Health = value;
            }
        }
        #endregion
        #region Weight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _Weight;
        public Single Weight
        {
            get => this._Weight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Weight = value;
            }
        }
        #endregion
        #region DATADataTypeState
        public Armor.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ArmorMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IArmorGetter rhs)) return false;
            return ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Armor obj)
        {
            return ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ArmorXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ArmorXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Armor CreateFromXml(
            XElement node,
            Armor_TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Armor CreateFromXml(
            XElement node,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Armor CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Armor();
            ((ArmorSetterCommon)((IArmorGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Armor CreateFromXml(
            string path,
            Armor_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Armor CreateFromXml(
            string path,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Armor CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Armor_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Armor CreateFromXml(
            Stream stream,
            Armor_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Armor CreateFromXml(
            Stream stream,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Armor CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Armor_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Armor_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public Armor(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Armor(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ArmorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ArmorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Armor CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Armor CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new Armor();
            ((ArmorSetterCommon)((IArmorGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IArmorGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ArmorSetterCommon)((IArmorGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Armor GetNew()
        {
            return new Armor();
        }

    }
    #endregion

    #region Interface
    public partial interface IArmor :
        IArmorGetter,
        IClothingAbstract,
        ILoquiObjectSetter<IArmorInternal>
    {
        new Single ArmorValue { get; set; }
        new UInt32 Value { get; set; }
        new UInt32 Health { get; set; }
        new Single Weight { get; set; }
        new Armor.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IArmorInternal :
        IClothingAbstractInternal,
        IArmor,
        IArmorGetter
    {
    }

    public partial interface IArmorGetter :
        IClothingAbstractGetter,
        ILoquiObject<IArmorGetter>,
        IXmlItem,
        IBinaryItem
    {
        Single ArmorValue { get; }
        UInt32 Value { get; }
        UInt32 Health { get; }
        Single Weight { get; }
        Armor.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class ArmorMixIn
    {
        public static void Clear(this IArmorInternal item)
        {
            ((ArmorSetterCommon)((IArmorGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Armor_Mask<bool> GetEqualsMask(
            this IArmorGetter item,
            IArmorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IArmorGetter item,
            string? name = null,
            Armor_Mask<bool>? printMask = null)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IArmorGetter item,
            FileGeneration fg,
            string? name = null,
            Armor_Mask<bool>? printMask = null)
        {
            ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IArmorGetter item,
            Armor_Mask<bool?> checkMask)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Armor_Mask<bool> GetHasBeenSetMask(this IArmorGetter item)
        {
            var ret = new Armor_Mask<bool>(false);
            ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IArmorGetter item,
            IArmorGetter rhs)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IArmorInternal lhs,
            IArmorGetter rhs,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ArmorSetterTranslationCommon)((IArmorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IArmorInternal lhs,
            IArmorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ArmorSetterTranslationCommon)((IArmorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Armor DeepCopy(
            this IArmorGetter item,
            Armor_TranslationMask? copyMask = null)
        {
            return ((ArmorSetterTranslationCommon)((IArmorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Armor DeepCopy(
            this IArmorGetter item,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask? copyMask = null)
        {
            return ((ArmorSetterTranslationCommon)((IArmorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Armor DeepCopy(
            this IArmorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ArmorSetterTranslationCommon)((IArmorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IArmorInternal item,
            XElement node,
            Armor_TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IArmorInternal item,
            XElement node,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IArmorInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ArmorSetterCommon)((IArmorGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IArmorInternal item,
            string path,
            Armor_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IArmorInternal item,
            string path,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IArmorInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Armor_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IArmorInternal item,
            Stream stream,
            Armor_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IArmorInternal item,
            Stream stream,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IArmorInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Armor_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IArmorInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IArmorInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ArmorSetterCommon)((IArmorGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Armor_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Script = 6,
        Enchantment = 7,
        EnchantmentPoints = 8,
        BipedFlags = 9,
        Flags = 10,
        MaleBipedModel = 11,
        MaleWorldModel = 12,
        MaleIcon = 13,
        FemaleBipedModel = 14,
        FemaleWorldModel = 15,
        FemaleIcon = 16,
        BMDTDataTypeState = 17,
        ArmorValue = 18,
        Value = 19,
        Health = 20,
        Weight = 21,
        DATADataTypeState = 22,
    }
    #endregion

    #region Registration
    public partial class Armor_Registration : ILoquiRegistration
    {
        public static readonly Armor_Registration Instance = new Armor_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 67,
            version: 0);

        public const string GUID = "484e38f3-afde-4661-9c39-a8bc1e92eb99";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 23;

        public static readonly Type MaskType = typeof(Armor_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Armor_ErrorMask);

        public static readonly Type ClassType = typeof(Armor);

        public static readonly Type GetterType = typeof(IArmorGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IArmor);

        public static readonly Type? InternalSetterType = typeof(IArmorInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Armor";

        public const string Name = "Armor";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ARMORVALUE":
                    return (ushort)Armor_FieldIndex.ArmorValue;
                case "VALUE":
                    return (ushort)Armor_FieldIndex.Value;
                case "HEALTH":
                    return (ushort)Armor_FieldIndex.Health;
                case "WEIGHT":
                    return (ushort)Armor_FieldIndex.Weight;
                case "DATADATATYPESTATE":
                    return (ushort)Armor_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                case Armor_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ClothingAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                case Armor_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ClothingAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                case Armor_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ClothingAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    return "ArmorValue";
                case Armor_FieldIndex.Value:
                    return "Value";
                case Armor_FieldIndex.Health:
                    return "Health";
                case Armor_FieldIndex.Weight:
                    return "Weight";
                case Armor_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return ClothingAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                case Armor_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ClothingAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                case Armor_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ClothingAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    return typeof(Single);
                case Armor_FieldIndex.Value:
                    return typeof(UInt32);
                case Armor_FieldIndex.Health:
                    return typeof(UInt32);
                case Armor_FieldIndex.Weight:
                    return typeof(Single);
                case Armor_FieldIndex.DATADataTypeState:
                    return typeof(Armor.DATADataType);
                default:
                    return ClothingAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ArmorXmlWriteTranslation);
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ARMO_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(ArmorBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ArmorSetterCommon : ClothingAbstractSetterCommon
    {
        public new static readonly ArmorSetterCommon Instance = new ArmorSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IArmorInternal item)
        {
            ClearPartial();
            item.ArmorValue = default;
            item.Value = default;
            item.Health = default;
            item.Weight = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IClothingAbstractInternal item)
        {
            Clear(item: (IArmorInternal)item);
        }
        
        public override void Clear(IItemAbstractInternal item)
        {
            Clear(item: (IArmorInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IArmorInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IArmorInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IArmorInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= Armor.DATADataType.Has;
                    break;
                default:
                    ClothingAbstractSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IArmorInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ArmorXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Armor_Registration.ARMO_HEADER;
        protected static void FillBinaryStructs(
            IArmorInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            ClothingAbstractSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IArmorInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = Armor.DATADataType.Has;
                    }
                    ArmorBinaryCreateTranslation.FillBinaryArmorValueCustomPublic(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences);
                    item.Value = dataFrame.ReadUInt32();
                    item.Health = dataFrame.ReadUInt32();
                    item.Weight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)Armor_FieldIndex.Weight);
                }
                default:
                    return ClothingAbstractSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IArmorInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IArmorInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ArmorCommon : ClothingAbstractCommon
    {
        public new static readonly ArmorCommon Instance = new ArmorCommon();

        public Armor_Mask<bool> GetEqualsMask(
            IArmorGetter item,
            IArmorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Armor_Mask<bool>(false);
            ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IArmorGetter item,
            IArmorGetter rhs,
            Armor_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ArmorValue = item.ArmorValue.EqualsWithin(rhs.ArmorValue);
            ret.Value = item.Value == rhs.Value;
            ret.Health = item.Health == rhs.Health;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IArmorGetter item,
            string? name = null,
            Armor_Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IArmorGetter item,
            FileGeneration fg,
            string? name = null,
            Armor_Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Armor =>");
            }
            else
            {
                fg.AppendLine($"{name} (Armor) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IArmorGetter item,
            FileGeneration fg,
            Armor_Mask<bool>? printMask = null)
        {
            ClothingAbstractCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ArmorValue ?? true)
            {
                fg.AppendLine($"ArmorValue => {item.ArmorValue}");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendLine($"Value => {item.Value}");
            }
            if (printMask?.Health ?? true)
            {
                fg.AppendLine($"Health => {item.Health}");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendLine($"Weight => {item.Weight}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendLine($"DATADataTypeState => {item.DATADataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            IArmorGetter item,
            Armor_Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IArmorGetter item,
            Armor_Mask<bool> mask)
        {
            mask.ArmorValue = true;
            mask.Value = true;
            mask.Health = true;
            mask.Weight = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Armor_FieldIndex ConvertFieldIndex(ClothingAbstract_FieldIndex index)
        {
            switch (index)
            {
                case ClothingAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FormKey:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Version:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Name:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Script:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Enchantment:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.BipedFlags:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Flags:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.MaleIcon:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Armor_FieldIndex ConvertFieldIndex(ItemAbstract_FieldIndex index)
        {
            switch (index)
            {
                case ItemAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (Armor_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.FormKey:
                    return (Armor_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.Version:
                    return (Armor_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Armor_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Armor_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Armor_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Armor_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Armor_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IArmorGetter? lhs,
            IArmorGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.ArmorValue.EqualsWithin(rhs.ArmorValue)) return false;
            if (lhs.Value != rhs.Value) return false;
            if (lhs.Health != rhs.Health) return false;
            if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IClothingAbstractGetter? lhs,
            IClothingAbstractGetter? rhs)
        {
            return Equals(
                lhs: (IArmorGetter?)lhs,
                rhs: rhs as IArmorGetter);
        }
        
        public override bool Equals(
            IItemAbstractGetter? lhs,
            IItemAbstractGetter? rhs)
        {
            return Equals(
                lhs: (IArmorGetter?)lhs,
                rhs: rhs as IArmorGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IArmorGetter?)lhs,
                rhs: rhs as IArmorGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IArmorGetter?)lhs,
                rhs: rhs as IArmorGetter);
        }
        
        public virtual int GetHashCode(IArmorGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.ArmorValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Value).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Health).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Weight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IClothingAbstractGetter item)
        {
            return GetHashCode(item: (IArmorGetter)item);
        }
        
        public override int GetHashCode(IItemAbstractGetter item)
        {
            return GetHashCode(item: (IArmorGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IArmorGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IArmorGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Armor.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IArmorGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(Armor obj, Armor rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Armor(getNextFormKey());
            ret.DeepCopyIn((Armor)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Armor)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class ArmorSetterTranslationCommon : ClothingAbstractSetterTranslationCommon
    {
        public new static readonly ArmorSetterTranslationCommon Instance = new ArmorSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IArmorInternal item,
            IArmorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IArmor item,
            IArmorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.ArmorValue) ?? true))
            {
                item.ArmorValue = rhs.ArmorValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Health) ?? true))
            {
                item.Health = rhs.Health;
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IClothingAbstractInternal item,
            IClothingAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IArmorInternal)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IClothingAbstract item,
            IClothingAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IArmor)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IItemAbstractInternal item,
            IItemAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IArmorInternal)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IItemAbstract item,
            IItemAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IArmor)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IArmorInternal)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IArmor)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IArmorInternal)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IArmor)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Armor DeepCopy(
            IArmorGetter item,
            Armor_TranslationMask? copyMask = null)
        {
            Armor ret = (Armor)((ArmorCommon)((IArmorGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Armor DeepCopy(
            IArmorGetter item,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask? copyMask = null)
        {
            Armor ret = (Armor)((ArmorCommon)((IArmorGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Armor DeepCopy(
            IArmorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Armor ret = (Armor)((ArmorCommon)((IArmorGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Armor
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Armor_Registration.Instance;
        public new static Armor_Registration Registration => Armor_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ArmorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ArmorSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ArmorSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ArmorXmlWriteTranslation :
        ClothingAbstractXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ArmorXmlWriteTranslation Instance = new ArmorXmlWriteTranslation();

        public static void WriteToNodeXml(
            IArmorGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ClothingAbstractXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.DATADataTypeState.HasFlag(Armor.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Armor_FieldIndex.ArmorValue) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ArmorValue),
                        item: item.ArmorValue,
                        fieldIndex: (int)Armor_FieldIndex.ArmorValue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Armor_FieldIndex.Value) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Value),
                        item: item.Value,
                        fieldIndex: (int)Armor_FieldIndex.Value,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Armor_FieldIndex.Health) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Health),
                        item: item.Health,
                        fieldIndex: (int)Armor_FieldIndex.Health,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Armor_FieldIndex.Weight) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Weight),
                        item: item.Weight,
                        fieldIndex: (int)Armor_FieldIndex.Weight,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Armor_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Armor.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Armor_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IArmorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Armor");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Armor");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IArmorGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IClothingAbstractGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IArmorGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IItemAbstractGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IArmorGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IArmorGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IArmorGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ArmorXmlCreateTranslation : ClothingAbstractXmlCreateTranslation
    {
        public new readonly static ArmorXmlCreateTranslation Instance = new ArmorXmlCreateTranslation();

        public static void FillPublicXml(
            IArmorInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ArmorXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IArmorInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ArmorValue":
                    try
                    {
                        errorMask?.PushIndex((int)Armor_FieldIndex.ArmorValue);
                        item.ArmorValue = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Armor.DATADataType.Has;
                    break;
                case "Value":
                    try
                    {
                        errorMask?.PushIndex((int)Armor_FieldIndex.Value);
                        item.Value = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Health":
                    try
                    {
                        errorMask?.PushIndex((int)Armor_FieldIndex.Health);
                        item.Health = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weight":
                    try
                    {
                        errorMask?.PushIndex((int)Armor_FieldIndex.Weight);
                        item.Weight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Armor_FieldIndex.DATADataTypeState);
                        item.DATADataTypeState = EnumXmlTranslation<Armor.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ClothingAbstractXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ArmorXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IArmorGetter item,
            XElement node,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ArmorXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IArmorGetter item,
            string path,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IArmorGetter item,
            Stream stream,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class Armor_Mask<T> :
        ClothingAbstract_Mask<T>,
        IMask<T>,
        IEquatable<Armor_Mask<T>>
        where T : notnull
    {
        #region Ctors
        public Armor_Mask(T initialValue)
        : base(initialValue)
        {
            this.ArmorValue = initialValue;
            this.Value = initialValue;
            this.Health = initialValue;
            this.Weight = initialValue;
            this.DATADataTypeState = initialValue;
        }

        public Armor_Mask(
            T MajorRecordFlagsRaw,
            T FormKey,
            T Version,
            T EditorID,
            T OblivionMajorRecordFlags,
            T Name,
            T Script,
            T Enchantment,
            T EnchantmentPoints,
            T BipedFlags,
            T Flags,
            T MaleBipedModel,
            T MaleWorldModel,
            T MaleIcon,
            T FemaleBipedModel,
            T FemaleWorldModel,
            T FemaleIcon,
            T BMDTDataTypeState,
            T ArmorValue,
            T Value,
            T Health,
            T Weight,
            T DATADataTypeState)
        : base(
            MajorRecordFlagsRaw: MajorRecordFlagsRaw,
            FormKey: FormKey,
            Version: Version,
            EditorID: EditorID,
            OblivionMajorRecordFlags: OblivionMajorRecordFlags,
            Name: Name,
            Script: Script,
            Enchantment: Enchantment,
            EnchantmentPoints: EnchantmentPoints,
            BipedFlags: BipedFlags,
            Flags: Flags,
            MaleBipedModel: MaleBipedModel,
            MaleWorldModel: MaleWorldModel,
            MaleIcon: MaleIcon,
            FemaleBipedModel: FemaleBipedModel,
            FemaleWorldModel: FemaleWorldModel,
            FemaleIcon: FemaleIcon,
            BMDTDataTypeState: BMDTDataTypeState)
        {
            this.ArmorValue = ArmorValue;
            this.Value = Value;
            this.Health = Health;
            this.Weight = Weight;
            this.DATADataTypeState = DATADataTypeState;
        }

        #pragma warning disable CS8618
        protected Armor_Mask()
        {
        }
        #pragma warning restore CS8618

        #endregion

        #region Members
        public T ArmorValue;
        public T Value;
        public T Health;
        public T Weight;
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Armor_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Armor_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.ArmorValue, rhs.ArmorValue)) return false;
            if (!object.Equals(this.Value, rhs.Value)) return false;
            if (!object.Equals(this.Health, rhs.Health)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ArmorValue?.GetHashCode());
            ret = ret.CombineHashCode(this.Value?.GetHashCode());
            ret = ret.CombineHashCode(this.Health?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.ArmorValue)) return false;
            if (!eval(this.Value)) return false;
            if (!eval(this.Health)) return false;
            if (!eval(this.Weight)) return false;
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Armor_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Armor_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Armor_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.ArmorValue = eval(this.ArmorValue);
            obj.Value = eval(this.Value);
            obj.Health = eval(this.Health);
            obj.Weight = eval(this.Weight);
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Armor_Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Armor_Mask<bool>? printMask = null)
        {
            fg.AppendLine($"{nameof(Armor_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ArmorValue ?? true)
                {
                    fg.AppendLine($"ArmorValue => {ArmorValue}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {Value}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {Health}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Armor_ErrorMask : ClothingAbstract_ErrorMask, IErrorMask<Armor_ErrorMask>
    {
        #region Members
        public Exception? ArmorValue;
        public Exception? Value;
        public Exception? Health;
        public Exception? Weight;
        public Exception? DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object? GetNthMask(int index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    return ArmorValue;
                case Armor_FieldIndex.Value:
                    return Value;
                case Armor_FieldIndex.Health:
                    return Health;
                case Armor_FieldIndex.Weight:
                    return Weight;
                case Armor_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    this.ArmorValue = ex;
                    break;
                case Armor_FieldIndex.Value:
                    this.Value = ex;
                    break;
                case Armor_FieldIndex.Health:
                    this.Health = ex;
                    break;
                case Armor_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                case Armor_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    this.ArmorValue = (Exception)obj;
                    break;
                case Armor_FieldIndex.Value:
                    this.Value = (Exception)obj;
                    break;
                case Armor_FieldIndex.Health:
                    this.Health = (Exception)obj;
                    break;
                case Armor_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                case Armor_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (ArmorValue != null) return true;
            if (Value != null) return true;
            if (Health != null) return true;
            if (Weight != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Armor_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"ArmorValue => {ArmorValue}");
            fg.AppendLine($"Value => {Value}");
            fg.AppendLine($"Health => {Health}");
            fg.AppendLine($"Weight => {Weight}");
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public Armor_ErrorMask Combine(Armor_ErrorMask? rhs)
        {
            if (rhs == null) return this;
            var ret = new Armor_ErrorMask();
            ret.ArmorValue = this.ArmorValue.Combine(rhs.ArmorValue);
            ret.Value = this.Value.Combine(rhs.Value);
            ret.Health = this.Health.Combine(rhs.Health);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static Armor_ErrorMask? Combine(Armor_ErrorMask? lhs, Armor_ErrorMask? rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static new Armor_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            return new Armor_ErrorMask();
        }
        #endregion

    }
    public class Armor_TranslationMask : ClothingAbstract_TranslationMask
    {
        #region Members
        public bool ArmorValue;
        public bool Value;
        public bool Health;
        public bool Weight;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public Armor_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.ArmorValue = defaultOn;
            this.Value = defaultOn;
            this.Health = defaultOn;
            this.Weight = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((ArmorValue, null));
            ret.Add((Value, null));
            ret.Add((Health, null));
            ret.Add((Weight, null));
            ret.Add((DATADataTypeState, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ArmorBinaryWriteTranslation :
        ClothingAbstractBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ArmorBinaryWriteTranslation Instance = new ArmorBinaryWriteTranslation();

        static partial void WriteBinaryArmorValueCustom(
            MutagenWriter writer,
            IArmorGetter item,
            MasterReferences masterReferences);

        public static void WriteBinaryArmorValue(
            MutagenWriter writer,
            IArmorGetter item,
            MasterReferences masterReferences)
        {
            WriteBinaryArmorValueCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        public static void Write_Embedded(
            IArmorGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ClothingAbstractBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IArmorGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            ClothingAbstractBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            if (item.DATADataTypeState.HasFlag(Armor.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Armor_Registration.DATA_HEADER)))
                {
                    ArmorBinaryWriteTranslation.WriteBinaryArmorValue(
                        writer: writer,
                        item: item,
                        masterReferences: masterReferences);
                    writer.Write(item.Value);
                    writer.Write(item.Health);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Weight);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IArmorGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Armor_Registration.ARMO_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IArmorGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IClothingAbstractGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IArmorGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IItemAbstractGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IArmorGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IArmorGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IArmorGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ArmorBinaryCreateTranslation : ClothingAbstractBinaryCreateTranslation
    {
        public new readonly static ArmorBinaryCreateTranslation Instance = new ArmorBinaryCreateTranslation();

        static partial void FillBinaryArmorValueCustom(
            MutagenFrame frame,
            IArmorInternal item,
            MasterReferences masterReferences);

        public static void FillBinaryArmorValueCustomPublic(
            MutagenFrame frame,
            IArmorInternal item,
            MasterReferences masterReferences)
        {
            FillBinaryArmorValueCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ArmorBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ArmorBinaryOverlay :
        ClothingAbstractBinaryOverlay,
        IArmorGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Armor_Registration.Instance;
        public new static Armor_Registration Registration => Armor_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ArmorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ArmorSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IArmorGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ArmorXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ArmorXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ArmorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ArmorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        private int? _DATALocation;
        public Armor.DATADataType DATADataTypeState { get; private set; }
        #region ArmorValue
        private int _ArmorValueLocation => _DATALocation!.Value + 0x0;
        private bool _ArmorValue_IsSet => GetArmorValueIsSetCustom();
        public Single ArmorValue => GetArmorValueCustom();
        #endregion
        #region Value
        private int _ValueLocation => _DATALocation!.Value + 0x2;
        private bool _Value_IsSet => _DATALocation.HasValue;
        public UInt32 Value => _Value_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ValueLocation, 4)) : default;
        #endregion
        #region Health
        private int _HealthLocation => _DATALocation!.Value + 0x6;
        private bool _Health_IsSet => _DATALocation.HasValue;
        public UInt32 Health => _Health_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_HealthLocation, 4)) : default;
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation!.Value + 0xA;
        private bool _Weight_IsSet => _DATALocation.HasValue;
        public Single Weight => _Weight_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_WeightLocation, 4)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ArmorBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ArmorBinaryOverlay ArmorFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new ArmorBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = Armor.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)Armor_FieldIndex.Weight);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

