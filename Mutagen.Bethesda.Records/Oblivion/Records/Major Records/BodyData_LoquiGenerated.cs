/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class BodyData :
        IBodyData,
        ILoquiObjectSetter<BodyData>,
        IEquatable<BodyData>,
        IEqualsMask
    {
        #region Ctor
        public BodyData()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)BodyData_FieldIndex.Model];
            set => _hasBeenSetTracker[(int)BodyData_FieldIndex.Model] = value;
        }
        bool IBodyDataGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool hasBeenSet = true)
        {
            _Model = value;
            _hasBeenSetTracker[(int)BodyData_FieldIndex.Model] = hasBeenSet;
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter IBodyDataGetter.Model => this.Model;
        #endregion
        #region BodyParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<BodyPart> _BodyParts = new SetList<BodyPart>();
        public ISetList<BodyPart> BodyParts => _BodyParts;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<BodyPart> IBodyData.BodyParts => _BodyParts;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IBodyPartGetter> IBodyDataGetter.BodyParts => _BodyParts;
        #endregion

        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IBodyDataGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            BodyDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IBodyDataGetter rhs)) return false;
            return ((BodyDataCommon)((IBodyDataGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(BodyData obj)
        {
            return ((BodyDataCommon)((IBodyDataGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((BodyDataCommon)((IBodyDataGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => BodyDataXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((BodyDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static BodyData CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            BodyData_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static BodyData CreateFromXml(
            XElement node,
            out BodyData_ErrorMask errorMask,
            bool doMasks = true,
            BodyData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = BodyData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static BodyData CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new BodyData() : null;
                    break;
                default:
                    break;
            }
            var ret = new BodyData();
            try
            {
                foreach (var elem in node.Elements())
                {
                    BodyDataXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static BodyData CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            BodyData_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static BodyData CreateFromXml(
            string path,
            out BodyData_ErrorMask errorMask,
            BodyData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static BodyData CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            BodyData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static BodyData CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            BodyData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static BodyData CreateFromXml(
            Stream stream,
            out BodyData_ErrorMask errorMask,
            BodyData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static BodyData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            BodyData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((BodyData_FieldIndex)index)
            {
                case BodyData_FieldIndex.Model:
                    return _hasBeenSetTracker[index];
                case BodyData_FieldIndex.BodyParts:
                    return BodyParts.HasBeenSet;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        protected object BinaryWriteTranslator => BodyDataBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((BodyDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static BodyData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static BodyData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out BodyData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = BodyData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static BodyData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new BodyData();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            BodyData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            BodyData item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)BodyData_FieldIndex.Model) return TryGet<int?>.Failure;
                    try
                    {
                        errorMask?.PushIndex((int)BodyData_FieldIndex.Model);
                        item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)BodyData_FieldIndex.Model);
                }
                case 0x58444E49: // INDX
                case 0x4E4F4349: // ICON
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)BodyData_FieldIndex.BodyParts) return TryGet<int?>.Failure;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<BodyPart>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: BodyPart_Registration.TriggeringRecordTypes,
                        item: item.BodyParts,
                        fieldIndex: (int)BodyData_FieldIndex.BodyParts,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out BodyPart listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<BodyPart>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)BodyData_FieldIndex.BodyParts);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        void IClearable.Clear()
        {
            ((BodyDataSetterCommon)((IBodyDataGetter)this).CommonSetterInstance()).Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface IBodyData :
        IBodyDataGetter,
        ILoquiObjectSetter<IBodyData>
    {
        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model value, bool hasBeenSet = true);
        void Model_Unset();

        new ISetList<BodyPart> BodyParts { get; }
    }

    public partial interface IBodyDataGetter :
        ILoquiObject,
        ILoquiObject<IBodyDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterCopyInstance();
        #region Model
        IModelGetter Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region BodyParts
        IReadOnlySetList<IBodyPartGetter> BodyParts { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class BodyDataMixIn
    {
        public static void Clear(this IBodyData item)
        {
            ((BodyDataSetterCommon)((IBodyDataGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static BodyData_Mask<bool> GetEqualsMask(
            this IBodyDataGetter item,
            IBodyDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IBodyDataGetter item,
            string name = null,
            BodyData_Mask<bool> printMask = null)
        {
            return ((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IBodyDataGetter item,
            FileGeneration fg,
            string name = null,
            BodyData_Mask<bool> printMask = null)
        {
            ((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IBodyDataGetter item,
            BodyData_Mask<bool?> checkMask)
        {
            return ((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static BodyData_Mask<bool> GetHasBeenSetMask(this IBodyDataGetter item)
        {
            var ret = new BodyData_Mask<bool>();
            ((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IBodyDataGetter item,
            IBodyDataGetter rhs)
        {
            return ((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void CopyFieldsFrom(
            this BodyData lhs,
            BodyData rhs)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void CopyFieldsFrom(
            this BodyData lhs,
            BodyData rhs,
            BodyData_CopyMask copyMask,
            BodyData def = null)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void CopyFieldsFrom(
            this BodyData lhs,
            BodyData rhs,
            out BodyData_ErrorMask errorMask,
            BodyData_CopyMask copyMask = null,
            BodyData def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BodyDataSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = BodyData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyFieldsFrom(
            this BodyData lhs,
            BodyData rhs,
            ErrorMaskBuilder errorMask,
            BodyData_CopyMask copyMask = null,
            BodyData def = null)
        {
            BodyDataSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static BodyData Copy(
            this BodyData item,
            BodyData_CopyMask copyMask = null,
            BodyData def = null)
        {
            return ((BodyDataSetterCommon)((IBodyDataGetter)item).CommonSetterInstance()).Copy(
                item: item,
                copyMask: copyMask,
                def: def);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum BodyData_FieldIndex
    {
        Model = 0,
        BodyParts = 1,
    }
    #endregion

    #region Registration
    public class BodyData_Registration : ILoquiRegistration
    {
        public static readonly BodyData_Registration Instance = new BodyData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 36,
            version: 0);

        public const string GUID = "c54b8db9-9671-471b-8f85-8ee30c93b2ed";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(BodyData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(BodyData_ErrorMask);

        public static readonly Type ClassType = typeof(BodyData);

        public static readonly Type GetterType = typeof(IBodyDataGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBodyData);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.BodyData";

        public const string Name = "BodyData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)BodyData_FieldIndex.Model;
                case "BODYPARTS":
                    return (ushort)BodyData_FieldIndex.BodyParts;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.BodyParts:
                    return true;
                case BodyData_FieldIndex.Model:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                case BodyData_FieldIndex.BodyParts:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                case BodyData_FieldIndex.BodyParts:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                    return "Model";
                case BodyData_FieldIndex.BodyParts:
                    return "BodyParts";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                case BodyData_FieldIndex.BodyParts:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                case BodyData_FieldIndex.BodyParts:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                    return typeof(Model);
                case BodyData_FieldIndex.BodyParts:
                    return typeof(ISetList<BodyPart>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(BodyDataXmlWriteTranslation);
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        MODL_HEADER,
                        INDX_HEADER,
                        ICON_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryWriteTranslation = typeof(BodyDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class BodyDataSetterCommon
    {
        public static readonly BodyDataSetterCommon Instance = new BodyDataSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IBodyData item)
        {
            ClearPartial();
            item.Model_Unset();
            item.BodyParts.Unset();
        }
        
        public BodyData GetNew()
        {
            return new BodyData();
        }
        
        public BodyData Copy(
            BodyData item,
            BodyData_CopyMask copyMask = null,
            BodyData def = null)
        {
            BodyData ret = GetNew();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }
        
    }
    public partial class BodyDataCommon
    {
        public static readonly BodyDataCommon Instance = new BodyDataCommon();

        public BodyData_Mask<bool> GetEqualsMask(
            IBodyDataGetter item,
            IBodyDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BodyData_Mask<bool>();
            ((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBodyDataGetter item,
            IBodyDataGetter rhs,
            BodyData_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.BodyParts = item.BodyParts.CollectionEqualsHelper(
                rhs.BodyParts,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            IBodyDataGetter item,
            string name = null,
            BodyData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IBodyDataGetter item,
            FileGeneration fg,
            string name = null,
            BodyData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"BodyData =>");
            }
            else
            {
                fg.AppendLine($"{name} (BodyData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IBodyDataGetter item,
            FileGeneration fg,
            BodyData_Mask<bool> printMask = null)
        {
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.BodyParts?.Overall ?? true)
            {
                fg.AppendLine("BodyParts =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.BodyParts)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IBodyDataGetter item,
            BodyData_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.BodyParts.Overall.HasValue && checkMask.BodyParts.Overall.Value != item.BodyParts.HasBeenSet) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IBodyDataGetter item,
            BodyData_Mask<bool> mask)
        {
            mask.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, item.Model.GetHasBeenSetMask());
            mask.BodyParts = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, BodyPart_Mask<bool>>>>(item.BodyParts.HasBeenSet, item.BodyParts.WithIndex().Select((i) => new MaskItemIndexed<bool, BodyPart_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBodyDataGetter lhs,
            IBodyDataGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Model_IsSet != rhs.Model_IsSet) return false;
            if (lhs.Model_IsSet)
            {
                if (!object.Equals(lhs.Model, rhs.Model)) return false;
            }
            if (lhs.BodyParts.HasBeenSet != rhs.BodyParts.HasBeenSet) return false;
            if (lhs.BodyParts.HasBeenSet)
            {
                if (!lhs.BodyParts.SequenceEqual(rhs.BodyParts)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IBodyDataGetter item)
        {
            int ret = 0;
            if (item.Model_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Model).CombineHashCode(ret);
            }
            if (item.BodyParts.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.BodyParts).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class BodyDataSetterCopyCommon
    {
        public static readonly BodyDataSetterCopyCommon Instance = new BodyDataSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            BodyData item,
            BodyData rhs,
            BodyData def,
            ErrorMaskBuilder errorMask,
            BodyData_CopyMask copyMask)
        {
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)BodyData_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                ModelSetterCopyCommon.CopyFieldsFrom(
                                    item: item.Model,
                                    rhs: rhs.Model,
                                    def: def?.Model,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Model.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Model = rhsModelItem.Copy(
                                    copyMask?.Model?.Specific,
                                    def: defModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Model_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BodyParts.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)BodyData_FieldIndex.BodyParts);
                try
                {
                    item.BodyParts.SetToWithDefault<BodyPart, BodyPart>(
                        rhs: rhs.BodyParts,
                        def: def?.BodyParts,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.BodyParts.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (BodyPart)r;
                                case CopyOption.MakeCopy:
                                    return r.Copy(
                                        copyMask?.BodyParts?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.BodyParts.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class BodyData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BodyData_Registration.Instance;
        public static BodyData_Registration Registration => BodyData_Registration.Instance;
        protected object CommonInstance()
        {
            return BodyDataCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return BodyDataSetterCommon.Instance;
        }
        protected object CommonSetterCopyInstance()
        {
            return BodyDataSetterCopyCommon.Instance;
        }
        object IBodyDataGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IBodyDataGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IBodyDataGetter.CommonSetterCopyInstance()
        {
            return this.CommonSetterCopyInstance();
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class BodyDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static BodyDataXmlWriteTranslation Instance = new BodyDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IBodyDataGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)BodyData_FieldIndex.Model) ?? true))
            {
                var loquiItem = item.Model;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)BodyData_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)BodyData_FieldIndex.Model));
            }
            if (item.BodyParts.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)BodyData_FieldIndex.BodyParts) ?? true))
            {
                ListXmlTranslation<IBodyPartGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.BodyParts),
                    item: item.BodyParts,
                    fieldIndex: (int)BodyData_FieldIndex.BodyParts,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)BodyData_FieldIndex.BodyParts),
                    transl: (XElement subNode, IBodyPartGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((BodyPartXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IBodyDataGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.BodyData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.BodyData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IBodyDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IBodyDataGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IBodyDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class BodyDataXmlCreateTranslation
    {
        public readonly static BodyDataXmlCreateTranslation Instance = new BodyDataXmlCreateTranslation();

        public static void FillPublicXml(
            IBodyData item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    BodyDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IBodyData item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)BodyData_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)BodyData_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BodyParts":
                    try
                    {
                        errorMask?.PushIndex((int)BodyData_FieldIndex.BodyParts);
                        if (ListXmlTranslation<BodyPart>.Instance.Parse(
                            node: node,
                            enumer: out var BodyPartsItem,
                            transl: LoquiXmlTranslation<BodyPart>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.BodyParts.SetTo(BodyPartsItem);
                        }
                        else
                        {
                            item.BodyParts.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class BodyDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IBodyDataGetter item,
            XElement node,
            out BodyData_ErrorMask errorMask,
            bool doMasks = true,
            BodyData_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((BodyDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = BodyData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IBodyDataGetter item,
            string path,
            out BodyData_ErrorMask errorMask,
            BodyData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBodyDataGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBodyDataGetter item,
            Stream stream,
            out BodyData_ErrorMask errorMask,
            BodyData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IBodyDataGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IBodyDataGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((BodyDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IBodyDataGetter item,
            XElement node,
            string name = null,
            BodyData_TranslationMask translationMask = null)
        {
            ((BodyDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IBodyDataGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((BodyDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBodyDataGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((BodyDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class BodyData_Mask<T> : IMask<T>, IEquatable<BodyData_Mask<T>>
    {
        #region Ctors
        public BodyData_Mask()
        {
        }

        public BodyData_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.BodyParts = new MaskItem<T, IEnumerable<MaskItemIndexed<T, BodyPart_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, BodyPart_Mask<T>>>> BodyParts;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is BodyData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(BodyData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.BodyParts, rhs.BodyParts)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.BodyParts?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (this.BodyParts != null)
            {
                if (!eval(this.BodyParts.Overall)) return false;
                if (this.BodyParts.Specific != null)
                {
                    foreach (var item in this.BodyParts.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public BodyData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new BodyData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(BodyData_Mask<R> obj, Func<T, R> eval)
        {
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            if (BodyParts != null)
            {
                obj.BodyParts = new MaskItem<R, IEnumerable<MaskItemIndexed<R, BodyPart_Mask<R>>>>();
                obj.BodyParts.Overall = eval(this.BodyParts.Overall);
                if (BodyParts.Specific != null)
                {
                    List<MaskItemIndexed<R, BodyPart_Mask<R>>> l = new List<MaskItemIndexed<R, BodyPart_Mask<R>>>();
                    obj.BodyParts.Specific = l;
                    foreach (var item in BodyParts.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, BodyPart_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, BodyPart_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.BodyParts.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(BodyData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, BodyData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(BodyData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.BodyParts?.Overall ?? true)
                {
                    fg.AppendLine("BodyParts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (BodyParts.Overall != null)
                        {
                            fg.AppendLine(BodyParts.Overall.ToString());
                        }
                        if (BodyParts.Specific != null)
                        {
                            foreach (var subItem in BodyParts.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class BodyData_ErrorMask : IErrorMask, IErrorMask<BodyData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, Model_ErrorMask> Model;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, BodyPart_ErrorMask>>> BodyParts;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                    return Model;
                case BodyData_FieldIndex.BodyParts:
                    return BodyParts;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case BodyData_FieldIndex.BodyParts:
                    this.BodyParts = new MaskItem<Exception, IEnumerable<MaskItem<Exception, BodyPart_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case BodyData_FieldIndex.BodyParts:
                    this.BodyParts = (MaskItem<Exception, IEnumerable<MaskItem<Exception, BodyPart_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (BodyParts != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("BodyData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            Model?.ToString(fg);
            fg.AppendLine("BodyParts =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (BodyParts.Overall != null)
                {
                    fg.AppendLine(BodyParts.Overall.ToString());
                }
                if (BodyParts.Specific != null)
                {
                    foreach (var subItem in BodyParts.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public BodyData_ErrorMask Combine(BodyData_ErrorMask rhs)
        {
            var ret = new BodyData_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.BodyParts = new MaskItem<Exception, IEnumerable<MaskItem<Exception, BodyPart_ErrorMask>>>(this.BodyParts.Overall.Combine(rhs.BodyParts.Overall), new List<MaskItem<Exception, BodyPart_ErrorMask>>(this.BodyParts.Specific.And(rhs.BodyParts.Specific)));
            return ret;
        }
        public static BodyData_ErrorMask Combine(BodyData_ErrorMask lhs, BodyData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static BodyData_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new BodyData_ErrorMask();
        }
        #endregion

    }
    public class BodyData_CopyMask
    {
        public BodyData_CopyMask()
        {
        }

        public BodyData_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Model = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.BodyParts = new MaskItem<CopyOption, BodyPart_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public MaskItem<CopyOption, BodyPart_CopyMask> BodyParts;
        #endregion

    }

    public class BodyData_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public MaskItem<bool, Model_TranslationMask> Model;
        public MaskItem<bool, BodyPart_TranslationMask> BodyParts;
        #endregion

        #region Ctors
        public BodyData_TranslationMask()
        {
        }

        public BodyData_TranslationMask(bool defaultOn)
        {
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.BodyParts = new MaskItem<bool, BodyPart_TranslationMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((BodyParts?.Overall ?? true, BodyParts?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class BodyDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static BodyDataBinaryWriteTranslation Instance = new BodyDataBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IBodyDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.Model_IsSet)
            {
                var loquiItem = item.Model;
                ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.BodyParts.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IBodyPartGetter>.Instance.Write(
                    writer: writer,
                    items: item.BodyParts,
                    fieldIndex: (int)BodyData_FieldIndex.BodyParts,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IBodyPartGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((BodyPartBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IBodyDataGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IBodyDataGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class BodyDataBinaryCreateTranslation
    {
        public readonly static BodyDataBinaryCreateTranslation Instance = new BodyDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class BodyDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBodyDataGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out BodyData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((BodyDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = BodyData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IBodyDataGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((BodyDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IBodyDataGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((BodyDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class BodyDataBinaryWrapper :
        BinaryWrapper,
        IBodyDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BodyData_Registration.Instance;
        public static BodyData_Registration Registration => BodyData_Registration.Instance;
        protected object CommonInstance()
        {
            return BodyDataCommon.Instance;
        }
        object IBodyDataGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IBodyDataGetter.CommonSetterInstance()
        {
            return null;
        }
        object IBodyDataGetter.CommonSetterCopyInstance()
        {
            return null;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IBodyDataGetter)rhs, include);

        protected object XmlWriteTranslator => BodyDataXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((BodyDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => BodyDataBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((BodyDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Model
        public IModelGetter Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        public IReadOnlySetList<IBodyPartGetter> BodyParts { get; private set; } = EmptySetList<BodyPartBinaryWrapper>.Instance;
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected BodyDataBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this._data = bytes;
        }

        public static BodyDataBinaryWrapper BodyDataFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new BodyDataBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)BodyData_FieldIndex.Model) return TryGet<int?>.Failure;
                    this.Model = ModelBinaryWrapper.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)BodyData_FieldIndex.Model);
                }
                case 0x58444E49: // INDX
                case 0x4E4F4349: // ICON
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)BodyData_FieldIndex.BodyParts) return TryGet<int?>.Failure;
                    this.BodyParts = this.ParseRepeatedTypelessSubrecord<BodyPartBinaryWrapper>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: BodyPart_Registration.TriggeringRecordTypes,
                        factory:  BodyPartBinaryWrapper.BodyPartFactory);
                    return TryGet<int?>.Succeed((int)BodyData_FieldIndex.BodyParts);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

