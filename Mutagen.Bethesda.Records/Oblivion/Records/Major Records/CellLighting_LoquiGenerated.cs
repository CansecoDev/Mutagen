/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Drawing;
using Loqui.Presentation;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class CellLighting :
        ICellLighting,
        ILoquiObjectSetter<CellLighting>,
        IEquatable<CellLighting>,
        IEqualsMask
    {
        #region Ctor
        public CellLighting()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region AmbientColor
        public Color AmbientColor { get; set; }
        #endregion
        #region DirectionalColor
        public Color DirectionalColor { get; set; }
        #endregion
        #region FogColor
        public Color FogColor { get; set; }
        #endregion
        #region FogNear
        public Single FogNear { get; set; }
        #endregion
        #region FogFar
        public Single FogFar { get; set; }
        #endregion
        #region DirectionalRotationXY
        public Int32 DirectionalRotationXY { get; set; }
        #endregion
        #region DirectionalRotationZ
        public Int32 DirectionalRotationZ { get; set; }
        #endregion
        #region DirectionalFade
        public Single DirectionalFade { get; set; }
        #endregion
        #region FogClipDistance
        public Single FogClipDistance { get; set; }
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            CellLightingMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ICellLightingGetter rhs)) return false;
            return ((CellLightingCommon)((ICellLightingGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(CellLighting obj)
        {
            return ((CellLightingCommon)((ICellLightingGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((CellLightingCommon)((ICellLightingGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => CellLightingXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((CellLightingXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static CellLighting CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            CellLighting_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static CellLighting CreateFromXml(
            XElement node,
            out CellLighting_ErrorMask errorMask,
            bool doMasks = true,
            CellLighting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = CellLighting_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static CellLighting CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new CellLighting() : null;
                    break;
                default:
                    break;
            }
            var ret = new CellLighting();
            ((CellLightingSetterCommon)((ICellLightingGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static CellLighting CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            CellLighting_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static CellLighting CreateFromXml(
            string path,
            out CellLighting_ErrorMask errorMask,
            CellLighting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CellLighting CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            CellLighting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static CellLighting CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            CellLighting_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static CellLighting CreateFromXml(
            Stream stream,
            out CellLighting_ErrorMask errorMask,
            CellLighting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CellLighting CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            CellLighting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((CellLighting_FieldIndex)index)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = CellLighting_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CellLightingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((CellLightingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static CellLighting CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static CellLighting CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new CellLighting();
            ((CellLightingSetterCommon)((ICellLightingGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICellLightingGetter)rhs, include);

        void IClearable.Clear()
        {
            ((CellLightingSetterCommon)((ICellLightingGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static CellLighting GetNew()
        {
            return new CellLighting();
        }

    }
    #endregion

    #region Interface
    public partial interface ICellLighting :
        ICellLightingGetter,
        ILoquiObjectSetter<ICellLighting>
    {
        new Color AmbientColor { get; set; }

        new Color DirectionalColor { get; set; }

        new Color FogColor { get; set; }

        new Single FogNear { get; set; }

        new Single FogFar { get; set; }

        new Int32 DirectionalRotationXY { get; set; }

        new Int32 DirectionalRotationZ { get; set; }

        new Single DirectionalFade { get; set; }

        new Single FogClipDistance { get; set; }

    }

    public partial interface ICellLightingGetter :
        ILoquiObject,
        ILoquiObject<ICellLightingGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region AmbientColor
        Color AmbientColor { get; }

        #endregion
        #region DirectionalColor
        Color DirectionalColor { get; }

        #endregion
        #region FogColor
        Color FogColor { get; }

        #endregion
        #region FogNear
        Single FogNear { get; }

        #endregion
        #region FogFar
        Single FogFar { get; }

        #endregion
        #region DirectionalRotationXY
        Int32 DirectionalRotationXY { get; }

        #endregion
        #region DirectionalRotationZ
        Int32 DirectionalRotationZ { get; }

        #endregion
        #region DirectionalFade
        Single DirectionalFade { get; }

        #endregion
        #region FogClipDistance
        Single FogClipDistance { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class CellLightingMixIn
    {
        public static void Clear(this ICellLighting item)
        {
            ((CellLightingSetterCommon)((ICellLightingGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static CellLighting_Mask<bool> GetEqualsMask(
            this ICellLightingGetter item,
            ICellLightingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICellLightingGetter item,
            string name = null,
            CellLighting_Mask<bool> printMask = null)
        {
            return ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICellLightingGetter item,
            FileGeneration fg,
            string name = null,
            CellLighting_Mask<bool> printMask = null)
        {
            ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ICellLightingGetter item,
            CellLighting_Mask<bool?> checkMask)
        {
            return ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static CellLighting_Mask<bool> GetHasBeenSetMask(this ICellLightingGetter item)
        {
            var ret = new CellLighting_Mask<bool>();
            ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ICellLightingGetter item,
            ICellLightingGetter rhs)
        {
            return ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this ICellLighting lhs,
            ICellLightingGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this ICellLighting lhs,
            ICellLightingGetter rhs,
            CellLighting_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this ICellLighting lhs,
            ICellLightingGetter rhs,
            out CellLighting_ErrorMask errorMask,
            CellLighting_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((CellLightingSetterTranslationCommon)((ICellLightingGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = CellLighting_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this ICellLighting lhs,
            ICellLightingGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((CellLightingSetterTranslationCommon)((ICellLightingGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static CellLighting DeepCopy(
            this ICellLightingGetter item,
            CellLighting_TranslationMask copyMask = null)
        {
            return ((CellLightingSetterTranslationCommon)((ICellLightingGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CellLighting DeepCopy(
            this ICellLightingGetter item,
            out CellLighting_ErrorMask errorMask,
            CellLighting_TranslationMask copyMask = null)
        {
            return ((CellLightingSetterTranslationCommon)((ICellLightingGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CellLighting DeepCopy(
            this ICellLightingGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((CellLightingSetterTranslationCommon)((ICellLightingGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICellLighting item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            CellLighting_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICellLighting item,
            XElement node,
            out CellLighting_ErrorMask errorMask,
            bool doMasks = true,
            CellLighting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = CellLighting_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ICellLighting item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((CellLightingSetterCommon)((ICellLightingGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellLighting item,
            string path,
            MissingCreate missing = MissingCreate.New,
            CellLighting_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellLighting item,
            string path,
            out CellLighting_ErrorMask errorMask,
            CellLighting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellLighting item,
            string path,
            ErrorMaskBuilder errorMask,
            CellLighting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ICellLighting item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            CellLighting_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellLighting item,
            Stream stream,
            out CellLighting_ErrorMask errorMask,
            CellLighting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellLighting item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            CellLighting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ICellLighting item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ICellLighting item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((CellLightingSetterCommon)((ICellLightingGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum CellLighting_FieldIndex
    {
        AmbientColor = 0,
        DirectionalColor = 1,
        FogColor = 2,
        FogNear = 3,
        FogFar = 4,
        DirectionalRotationXY = 5,
        DirectionalRotationZ = 6,
        DirectionalFade = 7,
        FogClipDistance = 8,
    }
    #endregion

    #region Registration
    public partial class CellLighting_Registration : ILoquiRegistration
    {
        public static readonly CellLighting_Registration Instance = new CellLighting_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 138,
            version: 0);

        public const string GUID = "31acbf65-e6be-4373-9fb4-d0f1ab97c089";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(CellLighting_Mask<>);

        public static readonly Type ErrorMaskType = typeof(CellLighting_ErrorMask);

        public static readonly Type ClassType = typeof(CellLighting);

        public static readonly Type GetterType = typeof(ICellLightingGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICellLighting);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.CellLighting";

        public const string Name = "CellLighting";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "AMBIENTCOLOR":
                    return (ushort)CellLighting_FieldIndex.AmbientColor;
                case "DIRECTIONALCOLOR":
                    return (ushort)CellLighting_FieldIndex.DirectionalColor;
                case "FOGCOLOR":
                    return (ushort)CellLighting_FieldIndex.FogColor;
                case "FOGNEAR":
                    return (ushort)CellLighting_FieldIndex.FogNear;
                case "FOGFAR":
                    return (ushort)CellLighting_FieldIndex.FogFar;
                case "DIRECTIONALROTATIONXY":
                    return (ushort)CellLighting_FieldIndex.DirectionalRotationXY;
                case "DIRECTIONALROTATIONZ":
                    return (ushort)CellLighting_FieldIndex.DirectionalRotationZ;
                case "DIRECTIONALFADE":
                    return (ushort)CellLighting_FieldIndex.DirectionalFade;
                case "FOGCLIPDISTANCE":
                    return (ushort)CellLighting_FieldIndex.FogClipDistance;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    return "AmbientColor";
                case CellLighting_FieldIndex.DirectionalColor:
                    return "DirectionalColor";
                case CellLighting_FieldIndex.FogColor:
                    return "FogColor";
                case CellLighting_FieldIndex.FogNear:
                    return "FogNear";
                case CellLighting_FieldIndex.FogFar:
                    return "FogFar";
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    return "DirectionalRotationXY";
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    return "DirectionalRotationZ";
                case CellLighting_FieldIndex.DirectionalFade:
                    return "DirectionalFade";
                case CellLighting_FieldIndex.FogClipDistance:
                    return "FogClipDistance";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    return typeof(Color);
                case CellLighting_FieldIndex.DirectionalColor:
                    return typeof(Color);
                case CellLighting_FieldIndex.FogColor:
                    return typeof(Color);
                case CellLighting_FieldIndex.FogNear:
                    return typeof(Single);
                case CellLighting_FieldIndex.FogFar:
                    return typeof(Single);
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    return typeof(Int32);
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    return typeof(Int32);
                case CellLighting_FieldIndex.DirectionalFade:
                    return typeof(Single);
                case CellLighting_FieldIndex.FogClipDistance:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(CellLightingXmlWriteTranslation);
        public static readonly RecordType XCLL_HEADER = new RecordType("XCLL");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = XCLL_HEADER;
        public const int NumStructFields = 9;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(CellLightingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class CellLightingSetterCommon
    {
        public static readonly CellLightingSetterCommon Instance = new CellLightingSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICellLighting item)
        {
            ClearPartial();
            item.AmbientColor = default(Color);
            item.DirectionalColor = default(Color);
            item.FogColor = default(Color);
            item.FogNear = default(Single);
            item.FogFar = default(Single);
            item.DirectionalRotationXY = default(Int32);
            item.DirectionalRotationZ = default(Int32);
            item.DirectionalFade = default(Single);
            item.FogClipDistance = default(Single);
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            ICellLighting item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CellLightingXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ICellLighting item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            item.AmbientColor = Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                frame: frame,
                extraByte: true);
            item.DirectionalColor = Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                frame: frame,
                extraByte: true);
            item.FogColor = Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                frame: frame,
                extraByte: true);
            item.FogNear = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FogFar = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.DirectionalRotationXY = frame.ReadInt32();
            item.DirectionalRotationZ = frame.ReadInt32();
            item.DirectionalFade = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FogClipDistance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
        }
        
        public void CopyInFromBinary(
            ICellLighting item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(CellLighting_Registration.XCLL_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class CellLightingCommon
    {
        public static readonly CellLightingCommon Instance = new CellLightingCommon();

        public CellLighting_Mask<bool> GetEqualsMask(
            ICellLightingGetter item,
            ICellLightingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CellLighting_Mask<bool>();
            ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICellLightingGetter item,
            ICellLightingGetter rhs,
            CellLighting_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.AmbientColor = item.AmbientColor.ColorOnlyEquals(rhs.AmbientColor);
            ret.DirectionalColor = item.DirectionalColor.ColorOnlyEquals(rhs.DirectionalColor);
            ret.FogColor = item.FogColor.ColorOnlyEquals(rhs.FogColor);
            ret.FogNear = item.FogNear.EqualsWithin(rhs.FogNear);
            ret.FogFar = item.FogFar.EqualsWithin(rhs.FogFar);
            ret.DirectionalRotationXY = item.DirectionalRotationXY == rhs.DirectionalRotationXY;
            ret.DirectionalRotationZ = item.DirectionalRotationZ == rhs.DirectionalRotationZ;
            ret.DirectionalFade = item.DirectionalFade.EqualsWithin(rhs.DirectionalFade);
            ret.FogClipDistance = item.FogClipDistance.EqualsWithin(rhs.FogClipDistance);
        }
        
        public string ToString(
            ICellLightingGetter item,
            string name = null,
            CellLighting_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICellLightingGetter item,
            FileGeneration fg,
            string name = null,
            CellLighting_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CellLighting =>");
            }
            else
            {
                fg.AppendLine($"{name} (CellLighting) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICellLightingGetter item,
            FileGeneration fg,
            CellLighting_Mask<bool> printMask = null)
        {
            if (printMask?.AmbientColor ?? true)
            {
                fg.AppendLine($"AmbientColor => {item.AmbientColor}");
            }
            if (printMask?.DirectionalColor ?? true)
            {
                fg.AppendLine($"DirectionalColor => {item.DirectionalColor}");
            }
            if (printMask?.FogColor ?? true)
            {
                fg.AppendLine($"FogColor => {item.FogColor}");
            }
            if (printMask?.FogNear ?? true)
            {
                fg.AppendLine($"FogNear => {item.FogNear}");
            }
            if (printMask?.FogFar ?? true)
            {
                fg.AppendLine($"FogFar => {item.FogFar}");
            }
            if (printMask?.DirectionalRotationXY ?? true)
            {
                fg.AppendLine($"DirectionalRotationXY => {item.DirectionalRotationXY}");
            }
            if (printMask?.DirectionalRotationZ ?? true)
            {
                fg.AppendLine($"DirectionalRotationZ => {item.DirectionalRotationZ}");
            }
            if (printMask?.DirectionalFade ?? true)
            {
                fg.AppendLine($"DirectionalFade => {item.DirectionalFade}");
            }
            if (printMask?.FogClipDistance ?? true)
            {
                fg.AppendLine($"FogClipDistance => {item.FogClipDistance}");
            }
        }
        
        public bool HasBeenSet(
            ICellLightingGetter item,
            CellLighting_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ICellLightingGetter item,
            CellLighting_Mask<bool> mask)
        {
            mask.AmbientColor = true;
            mask.DirectionalColor = true;
            mask.FogColor = true;
            mask.FogNear = true;
            mask.FogFar = true;
            mask.DirectionalRotationXY = true;
            mask.DirectionalRotationZ = true;
            mask.DirectionalFade = true;
            mask.FogClipDistance = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICellLightingGetter lhs,
            ICellLightingGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.AmbientColor.ColorOnlyEquals(rhs.AmbientColor)) return false;
            if (!lhs.DirectionalColor.ColorOnlyEquals(rhs.DirectionalColor)) return false;
            if (!lhs.FogColor.ColorOnlyEquals(rhs.FogColor)) return false;
            if (!lhs.FogNear.EqualsWithin(rhs.FogNear)) return false;
            if (!lhs.FogFar.EqualsWithin(rhs.FogFar)) return false;
            if (lhs.DirectionalRotationXY != rhs.DirectionalRotationXY) return false;
            if (lhs.DirectionalRotationZ != rhs.DirectionalRotationZ) return false;
            if (!lhs.DirectionalFade.EqualsWithin(rhs.DirectionalFade)) return false;
            if (!lhs.FogClipDistance.EqualsWithin(rhs.FogClipDistance)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ICellLightingGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.AmbientColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DirectionalColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FogColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FogNear).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FogFar).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DirectionalRotationXY).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DirectionalRotationZ).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DirectionalFade).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FogClipDistance).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CellLighting.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ICellLightingGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class CellLightingSetterTranslationCommon
    {
        public static readonly CellLightingSetterTranslationCommon Instance = new CellLightingSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            ICellLighting item,
            ICellLightingGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientColor) ?? true))
            {
                item.AmbientColor = rhs.AmbientColor;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalColor) ?? true))
            {
                item.DirectionalColor = rhs.DirectionalColor;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogColor) ?? true))
            {
                item.FogColor = rhs.FogColor;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogNear) ?? true))
            {
                item.FogNear = rhs.FogNear;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogFar) ?? true))
            {
                item.FogFar = rhs.FogFar;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalRotationXY) ?? true))
            {
                item.DirectionalRotationXY = rhs.DirectionalRotationXY;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalRotationZ) ?? true))
            {
                item.DirectionalRotationZ = rhs.DirectionalRotationZ;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalFade) ?? true))
            {
                item.DirectionalFade = rhs.DirectionalFade;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogClipDistance) ?? true))
            {
                item.FogClipDistance = rhs.FogClipDistance;
            }
        }
        
        #endregion
        
        public CellLighting DeepCopy(
            ICellLightingGetter item,
            CellLighting_TranslationMask copyMask = null)
        {
            CellLighting ret = (CellLighting)((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public CellLighting DeepCopy(
            ICellLightingGetter item,
            out CellLighting_ErrorMask errorMask,
            CellLighting_TranslationMask copyMask = null)
        {
            CellLighting ret = (CellLighting)((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public CellLighting DeepCopy(
            ICellLightingGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            CellLighting ret = (CellLighting)((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class CellLighting
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CellLighting_Registration.Instance;
        public static CellLighting_Registration Registration => CellLighting_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CellLightingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CellLightingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CellLightingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICellLightingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICellLightingGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICellLightingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CellLightingXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static CellLightingXmlWriteTranslation Instance = new CellLightingXmlWriteTranslation();

        public static void WriteToNodeXml(
            ICellLightingGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AmbientColor),
                    item: item.AmbientColor,
                    fieldIndex: (int)CellLighting_FieldIndex.AmbientColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DirectionalColor),
                    item: item.DirectionalColor,
                    fieldIndex: (int)CellLighting_FieldIndex.DirectionalColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogColor),
                    item: item.FogColor,
                    fieldIndex: (int)CellLighting_FieldIndex.FogColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogNear) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogNear),
                    item: item.FogNear,
                    fieldIndex: (int)CellLighting_FieldIndex.FogNear,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogFar) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogFar),
                    item: item.FogFar,
                    fieldIndex: (int)CellLighting_FieldIndex.FogFar,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalRotationXY) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DirectionalRotationXY),
                    item: item.DirectionalRotationXY,
                    fieldIndex: (int)CellLighting_FieldIndex.DirectionalRotationXY,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalRotationZ) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DirectionalRotationZ),
                    item: item.DirectionalRotationZ,
                    fieldIndex: (int)CellLighting_FieldIndex.DirectionalRotationZ,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalFade) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DirectionalFade),
                    item: item.DirectionalFade,
                    fieldIndex: (int)CellLighting_FieldIndex.DirectionalFade,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogClipDistance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogClipDistance),
                    item: item.FogClipDistance,
                    fieldIndex: (int)CellLighting_FieldIndex.FogClipDistance,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ICellLightingGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.CellLighting");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.CellLighting");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ICellLightingGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ICellLightingGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ICellLightingGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class CellLightingXmlCreateTranslation
    {
        public readonly static CellLightingXmlCreateTranslation Instance = new CellLightingXmlCreateTranslation();

        public static void FillPublicXml(
            ICellLighting item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CellLightingXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICellLighting item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "AmbientColor":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.AmbientColor);
                        item.AmbientColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DirectionalColor":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.DirectionalColor);
                        item.DirectionalColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogColor":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.FogColor);
                        item.FogColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogNear":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.FogNear);
                        item.FogNear = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogFar":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.FogFar);
                        item.FogFar = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DirectionalRotationXY":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.DirectionalRotationXY);
                        item.DirectionalRotationXY = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DirectionalRotationZ":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.DirectionalRotationZ);
                        item.DirectionalRotationZ = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DirectionalFade":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.DirectionalFade);
                        item.DirectionalFade = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogClipDistance":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.FogClipDistance);
                        item.FogClipDistance = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class CellLightingXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ICellLightingGetter item,
            XElement node,
            out CellLighting_ErrorMask errorMask,
            bool doMasks = true,
            CellLighting_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((CellLightingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CellLighting_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ICellLightingGetter item,
            string path,
            out CellLighting_ErrorMask errorMask,
            CellLighting_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICellLightingGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICellLightingGetter item,
            Stream stream,
            out CellLighting_ErrorMask errorMask,
            CellLighting_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ICellLightingGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ICellLightingGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((CellLightingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ICellLightingGetter item,
            XElement node,
            string name = null,
            CellLighting_TranslationMask translationMask = null)
        {
            ((CellLightingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this ICellLightingGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((CellLightingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICellLightingGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((CellLightingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class CellLighting_Mask<T> : IMask<T>, IEquatable<CellLighting_Mask<T>>
    {
        #region Ctors
        public CellLighting_Mask()
        {
        }

        public CellLighting_Mask(T initialValue)
        {
            this.AmbientColor = initialValue;
            this.DirectionalColor = initialValue;
            this.FogColor = initialValue;
            this.FogNear = initialValue;
            this.FogFar = initialValue;
            this.DirectionalRotationXY = initialValue;
            this.DirectionalRotationZ = initialValue;
            this.DirectionalFade = initialValue;
            this.FogClipDistance = initialValue;
        }
        #endregion

        #region Members
        public T AmbientColor;
        public T DirectionalColor;
        public T FogColor;
        public T FogNear;
        public T FogFar;
        public T DirectionalRotationXY;
        public T DirectionalRotationZ;
        public T DirectionalFade;
        public T FogClipDistance;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is CellLighting_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CellLighting_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.AmbientColor, rhs.AmbientColor)) return false;
            if (!object.Equals(this.DirectionalColor, rhs.DirectionalColor)) return false;
            if (!object.Equals(this.FogColor, rhs.FogColor)) return false;
            if (!object.Equals(this.FogNear, rhs.FogNear)) return false;
            if (!object.Equals(this.FogFar, rhs.FogFar)) return false;
            if (!object.Equals(this.DirectionalRotationXY, rhs.DirectionalRotationXY)) return false;
            if (!object.Equals(this.DirectionalRotationZ, rhs.DirectionalRotationZ)) return false;
            if (!object.Equals(this.DirectionalFade, rhs.DirectionalFade)) return false;
            if (!object.Equals(this.FogClipDistance, rhs.FogClipDistance)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.AmbientColor?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectionalColor?.GetHashCode());
            ret = ret.CombineHashCode(this.FogColor?.GetHashCode());
            ret = ret.CombineHashCode(this.FogNear?.GetHashCode());
            ret = ret.CombineHashCode(this.FogFar?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectionalRotationXY?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectionalRotationZ?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectionalFade?.GetHashCode());
            ret = ret.CombineHashCode(this.FogClipDistance?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.AmbientColor)) return false;
            if (!eval(this.DirectionalColor)) return false;
            if (!eval(this.FogColor)) return false;
            if (!eval(this.FogNear)) return false;
            if (!eval(this.FogFar)) return false;
            if (!eval(this.DirectionalRotationXY)) return false;
            if (!eval(this.DirectionalRotationZ)) return false;
            if (!eval(this.DirectionalFade)) return false;
            if (!eval(this.FogClipDistance)) return false;
            return true;
        }
        #endregion

        #region Translate
        public CellLighting_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new CellLighting_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(CellLighting_Mask<R> obj, Func<T, R> eval)
        {
            obj.AmbientColor = eval(this.AmbientColor);
            obj.DirectionalColor = eval(this.DirectionalColor);
            obj.FogColor = eval(this.FogColor);
            obj.FogNear = eval(this.FogNear);
            obj.FogFar = eval(this.FogFar);
            obj.DirectionalRotationXY = eval(this.DirectionalRotationXY);
            obj.DirectionalRotationZ = eval(this.DirectionalRotationZ);
            obj.DirectionalFade = eval(this.DirectionalFade);
            obj.FogClipDistance = eval(this.FogClipDistance);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(CellLighting_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, CellLighting_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(CellLighting_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.AmbientColor ?? true)
                {
                    fg.AppendLine($"AmbientColor => {AmbientColor}");
                }
                if (printMask?.DirectionalColor ?? true)
                {
                    fg.AppendLine($"DirectionalColor => {DirectionalColor}");
                }
                if (printMask?.FogColor ?? true)
                {
                    fg.AppendLine($"FogColor => {FogColor}");
                }
                if (printMask?.FogNear ?? true)
                {
                    fg.AppendLine($"FogNear => {FogNear}");
                }
                if (printMask?.FogFar ?? true)
                {
                    fg.AppendLine($"FogFar => {FogFar}");
                }
                if (printMask?.DirectionalRotationXY ?? true)
                {
                    fg.AppendLine($"DirectionalRotationXY => {DirectionalRotationXY}");
                }
                if (printMask?.DirectionalRotationZ ?? true)
                {
                    fg.AppendLine($"DirectionalRotationZ => {DirectionalRotationZ}");
                }
                if (printMask?.DirectionalFade ?? true)
                {
                    fg.AppendLine($"DirectionalFade => {DirectionalFade}");
                }
                if (printMask?.FogClipDistance ?? true)
                {
                    fg.AppendLine($"FogClipDistance => {FogClipDistance}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class CellLighting_ErrorMask : IErrorMask, IErrorMask<CellLighting_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception AmbientColor;
        public Exception DirectionalColor;
        public Exception FogColor;
        public Exception FogNear;
        public Exception FogFar;
        public Exception DirectionalRotationXY;
        public Exception DirectionalRotationZ;
        public Exception DirectionalFade;
        public Exception FogClipDistance;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    return AmbientColor;
                case CellLighting_FieldIndex.DirectionalColor:
                    return DirectionalColor;
                case CellLighting_FieldIndex.FogColor:
                    return FogColor;
                case CellLighting_FieldIndex.FogNear:
                    return FogNear;
                case CellLighting_FieldIndex.FogFar:
                    return FogFar;
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    return DirectionalRotationXY;
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    return DirectionalRotationZ;
                case CellLighting_FieldIndex.DirectionalFade:
                    return DirectionalFade;
                case CellLighting_FieldIndex.FogClipDistance:
                    return FogClipDistance;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    this.AmbientColor = ex;
                    break;
                case CellLighting_FieldIndex.DirectionalColor:
                    this.DirectionalColor = ex;
                    break;
                case CellLighting_FieldIndex.FogColor:
                    this.FogColor = ex;
                    break;
                case CellLighting_FieldIndex.FogNear:
                    this.FogNear = ex;
                    break;
                case CellLighting_FieldIndex.FogFar:
                    this.FogFar = ex;
                    break;
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    this.DirectionalRotationXY = ex;
                    break;
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    this.DirectionalRotationZ = ex;
                    break;
                case CellLighting_FieldIndex.DirectionalFade:
                    this.DirectionalFade = ex;
                    break;
                case CellLighting_FieldIndex.FogClipDistance:
                    this.FogClipDistance = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    this.AmbientColor = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.DirectionalColor:
                    this.DirectionalColor = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.FogColor:
                    this.FogColor = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.FogNear:
                    this.FogNear = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.FogFar:
                    this.FogFar = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    this.DirectionalRotationXY = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    this.DirectionalRotationZ = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.DirectionalFade:
                    this.DirectionalFade = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.FogClipDistance:
                    this.FogClipDistance = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (AmbientColor != null) return true;
            if (DirectionalColor != null) return true;
            if (FogColor != null) return true;
            if (FogNear != null) return true;
            if (FogFar != null) return true;
            if (DirectionalRotationXY != null) return true;
            if (DirectionalRotationZ != null) return true;
            if (DirectionalFade != null) return true;
            if (FogClipDistance != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("CellLighting_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"AmbientColor => {AmbientColor}");
            fg.AppendLine($"DirectionalColor => {DirectionalColor}");
            fg.AppendLine($"FogColor => {FogColor}");
            fg.AppendLine($"FogNear => {FogNear}");
            fg.AppendLine($"FogFar => {FogFar}");
            fg.AppendLine($"DirectionalRotationXY => {DirectionalRotationXY}");
            fg.AppendLine($"DirectionalRotationZ => {DirectionalRotationZ}");
            fg.AppendLine($"DirectionalFade => {DirectionalFade}");
            fg.AppendLine($"FogClipDistance => {FogClipDistance}");
        }
        #endregion

        #region Combine
        public CellLighting_ErrorMask Combine(CellLighting_ErrorMask rhs)
        {
            var ret = new CellLighting_ErrorMask();
            ret.AmbientColor = this.AmbientColor.Combine(rhs.AmbientColor);
            ret.DirectionalColor = this.DirectionalColor.Combine(rhs.DirectionalColor);
            ret.FogColor = this.FogColor.Combine(rhs.FogColor);
            ret.FogNear = this.FogNear.Combine(rhs.FogNear);
            ret.FogFar = this.FogFar.Combine(rhs.FogFar);
            ret.DirectionalRotationXY = this.DirectionalRotationXY.Combine(rhs.DirectionalRotationXY);
            ret.DirectionalRotationZ = this.DirectionalRotationZ.Combine(rhs.DirectionalRotationZ);
            ret.DirectionalFade = this.DirectionalFade.Combine(rhs.DirectionalFade);
            ret.FogClipDistance = this.FogClipDistance.Combine(rhs.FogClipDistance);
            return ret;
        }
        public static CellLighting_ErrorMask Combine(CellLighting_ErrorMask lhs, CellLighting_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static CellLighting_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new CellLighting_ErrorMask();
        }
        #endregion

    }
    public class CellLighting_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool AmbientColor;
        public bool DirectionalColor;
        public bool FogColor;
        public bool FogNear;
        public bool FogFar;
        public bool DirectionalRotationXY;
        public bool DirectionalRotationZ;
        public bool DirectionalFade;
        public bool FogClipDistance;
        #endregion

        #region Ctors
        public CellLighting_TranslationMask()
        {
        }

        public CellLighting_TranslationMask(bool defaultOn)
        {
            this.AmbientColor = defaultOn;
            this.DirectionalColor = defaultOn;
            this.FogColor = defaultOn;
            this.FogNear = defaultOn;
            this.FogFar = defaultOn;
            this.DirectionalRotationXY = defaultOn;
            this.DirectionalRotationZ = defaultOn;
            this.DirectionalFade = defaultOn;
            this.FogClipDistance = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((AmbientColor, null));
            ret.Add((DirectionalColor, null));
            ret.Add((FogColor, null));
            ret.Add((FogNear, null));
            ret.Add((FogFar, null));
            ret.Add((DirectionalRotationXY, null));
            ret.Add((DirectionalRotationZ, null));
            ret.Add((DirectionalFade, null));
            ret.Add((FogClipDistance, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CellLightingBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static CellLightingBinaryWriteTranslation Instance = new CellLightingBinaryWriteTranslation();

        public static void Write_Embedded(
            ICellLightingGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AmbientColor,
                extraByte: true);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalColor,
                extraByte: true);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogColor,
                extraByte: true);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogNear);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogFar);
            writer.Write(item.DirectionalRotationXY);
            writer.Write(item.DirectionalRotationZ);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalFade);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogClipDistance);
        }

        public void Write(
            MutagenWriter writer,
            ICellLightingGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: CellLighting_Registration.XCLL_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (ICellLightingGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CellLightingBinaryCreateTranslation
    {
        public readonly static CellLightingBinaryCreateTranslation Instance = new CellLightingBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class CellLightingBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICellLightingGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((CellLightingBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CellLightingBinaryOverlay :
        BinaryOverlay,
        ICellLightingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CellLighting_Registration.Instance;
        public static CellLighting_Registration Registration => CellLighting_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CellLightingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CellLightingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICellLightingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICellLightingGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICellLightingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICellLightingGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => CellLightingXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((CellLightingXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CellLightingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((CellLightingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        public Color AmbientColor => _data.Span.Slice(0, 4).ReadColor();
        public Color DirectionalColor => _data.Span.Slice(4, 4).ReadColor();
        public Color FogColor => _data.Span.Slice(8, 4).ReadColor();
        public Single FogNear => SpanExt.GetFloat(_data.Span.Slice(12, 4));
        public Single FogFar => SpanExt.GetFloat(_data.Span.Slice(16, 4));
        public Int32 DirectionalRotationXY => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(20, 4));
        public Int32 DirectionalRotationZ => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(24, 4));
        public Single DirectionalFade => SpanExt.GetFloat(_data.Span.Slice(28, 4));
        public Single FogClipDistance => SpanExt.GetFloat(_data.Span.Slice(32, 4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected CellLightingBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static CellLightingBinaryOverlay CellLightingFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new CellLightingBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x24 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

