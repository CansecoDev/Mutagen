/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Cell :
        Place,
        ICellInternal,
        ILoquiObjectSetter<Cell>,
        INamed,
        IPlace,
        IEquatable<Cell>,
        IEqualsMask
    {
        #region Ctor
        protected Cell()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.Name];
            set => _hasBeenSetTracker[(int)Cell_FieldIndex.Name] = value;
        }
        bool ICellGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String ICellGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            _Name = value;
            _hasBeenSetTracker[(int)Cell_FieldIndex.Name] = markSet;
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Flags
        public bool Flags_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.Flags];
            set => _hasBeenSetTracker[(int)Cell_FieldIndex.Flags] = value;
        }
        bool ICellGetter.Flags_IsSet => Flags_IsSet;
        private Cell.Flag _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Cell.Flag Flags
        {
            get => this._Flags;
            set => Flags_Set(value);
        }
        Cell.Flag ICellGetter.Flags => this.Flags;
        public void Flags_Set(
            Cell.Flag value,
            bool markSet = true)
        {
            _Flags = value;
            _hasBeenSetTracker[(int)Cell_FieldIndex.Flags] = markSet;
        }
        public void Flags_Unset()
        {
            this.Flags_Set(default(Cell.Flag), false);
        }
        #endregion
        #region Grid
        public bool Grid_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.Grid];
            set => _hasBeenSetTracker[(int)Cell_FieldIndex.Grid] = value;
        }
        bool ICellGetter.Grid_IsSet => Grid_IsSet;
        private P2Int _Grid;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P2Int Grid
        {
            get => this._Grid;
            set => Grid_Set(value);
        }
        P2Int ICellGetter.Grid => this.Grid;
        public void Grid_Set(
            P2Int value,
            bool markSet = true)
        {
            _Grid = value;
            _hasBeenSetTracker[(int)Cell_FieldIndex.Grid] = markSet;
        }
        public void Grid_Unset()
        {
            this.Grid_Set(default(P2Int), false);
        }
        #endregion
        #region Lighting
        public bool Lighting_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.Lighting];
            set => _hasBeenSetTracker[(int)Cell_FieldIndex.Lighting] = value;
        }
        bool ICellGetter.Lighting_IsSet => Lighting_IsSet;
        private CellLighting _Lighting;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public CellLighting Lighting
        {
            get => _Lighting;
            set => Lighting_Set(value);
        }
        public void Lighting_Set(
            CellLighting value,
            bool hasBeenSet = true)
        {
            _Lighting = value;
            _hasBeenSetTracker[(int)Cell_FieldIndex.Lighting] = hasBeenSet;
        }
        public void Lighting_Unset()
        {
            this.Lighting_Set(default(CellLighting), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICellLightingGetter ICellGetter.Lighting => this.Lighting;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IFormIDLink<Region>> _Regions = new SetList<IFormIDLink<Region>>();
        public ISetList<IFormIDLink<Region>> Regions => _Regions;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormIDLink<Region>> ICell.Regions => _Regions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormIDLinkGetter<IRegionGetter>> ICellGetter.Regions => _Regions;
        #endregion

        #endregion
        #region MusicType
        public bool MusicType_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.MusicType];
            set => _hasBeenSetTracker[(int)Cell_FieldIndex.MusicType] = value;
        }
        bool ICellGetter.MusicType_IsSet => MusicType_IsSet;
        private MusicType _MusicType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MusicType MusicType
        {
            get => this._MusicType;
            set => MusicType_Set(value);
        }
        MusicType ICellGetter.MusicType => this.MusicType;
        public void MusicType_Set(
            MusicType value,
            bool markSet = true)
        {
            _MusicType = value;
            _hasBeenSetTracker[(int)Cell_FieldIndex.MusicType] = markSet;
        }
        public void MusicType_Unset()
        {
            this.MusicType_Set(default(MusicType), false);
        }
        #endregion
        #region WaterHeight
        public bool WaterHeight_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.WaterHeight];
            set => _hasBeenSetTracker[(int)Cell_FieldIndex.WaterHeight] = value;
        }
        bool ICellGetter.WaterHeight_IsSet => WaterHeight_IsSet;
        private Single _WaterHeight;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single WaterHeight
        {
            get => this._WaterHeight;
            set => WaterHeight_Set(value);
        }
        Single ICellGetter.WaterHeight => this.WaterHeight;
        public void WaterHeight_Set(
            Single value,
            bool markSet = true)
        {
            _WaterHeight = value;
            _hasBeenSetTracker[(int)Cell_FieldIndex.WaterHeight] = markSet;
        }
        public void WaterHeight_Unset()
        {
            this.WaterHeight_Set(default(Single), false);
        }
        #endregion
        #region Climate
        public IFormIDSetLink<Climate> Climate_Property { get; } = new FormIDSetLink<Climate>();
        public Climate Climate { get => Climate_Property.Item; set => Climate_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Climate> ICell.Climate_Property => this.Climate_Property;
        IClimateGetter ICellGetter.Climate => this.Climate_Property.Item;
        IFormIDSetLinkGetter<IClimateGetter> ICellGetter.Climate_Property => this.Climate_Property;
        #endregion
        #region Water
        public IFormIDSetLink<Water> Water_Property { get; } = new FormIDSetLink<Water>();
        public Water Water { get => Water_Property.Item; set => Water_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Water> ICell.Water_Property => this.Water_Property;
        IWaterGetter ICellGetter.Water => this.Water_Property.Item;
        IFormIDSetLinkGetter<IWaterGetter> ICellGetter.Water_Property => this.Water_Property;
        #endregion
        #region Owner
        public IFormIDSetLink<Faction> Owner_Property { get; } = new FormIDSetLink<Faction>();
        public Faction Owner { get => Owner_Property.Item; set => Owner_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Faction> ICell.Owner_Property => this.Owner_Property;
        IFactionGetter ICellGetter.Owner => this.Owner_Property.Item;
        IFormIDSetLinkGetter<IFactionGetter> ICellGetter.Owner_Property => this.Owner_Property;
        #endregion
        #region FactionRank
        public bool FactionRank_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.FactionRank];
            set => _hasBeenSetTracker[(int)Cell_FieldIndex.FactionRank] = value;
        }
        bool ICellGetter.FactionRank_IsSet => FactionRank_IsSet;
        private Int32 _FactionRank;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 FactionRank
        {
            get => this._FactionRank;
            set => FactionRank_Set(value);
        }
        Int32 ICellGetter.FactionRank => this.FactionRank;
        public void FactionRank_Set(
            Int32 value,
            bool markSet = true)
        {
            _FactionRank = value;
            _hasBeenSetTracker[(int)Cell_FieldIndex.FactionRank] = markSet;
        }
        public void FactionRank_Unset()
        {
            this.FactionRank_Set(default(Int32), false);
        }
        #endregion
        #region GlobalVariable
        public IFormIDSetLink<Global> GlobalVariable_Property { get; } = new FormIDSetLink<Global>();
        public Global GlobalVariable { get => GlobalVariable_Property.Item; set => GlobalVariable_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Global> ICell.GlobalVariable_Property => this.GlobalVariable_Property;
        IGlobalGetter ICellGetter.GlobalVariable => this.GlobalVariable_Property.Item;
        IFormIDSetLinkGetter<IGlobalGetter> ICellGetter.GlobalVariable_Property => this.GlobalVariable_Property;
        #endregion
        #region PathGrid
        public bool PathGrid_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.PathGrid];
            set => _hasBeenSetTracker[(int)Cell_FieldIndex.PathGrid] = value;
        }
        bool ICellGetter.PathGrid_IsSet => PathGrid_IsSet;
        private PathGrid _PathGrid;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public PathGrid PathGrid
        {
            get => _PathGrid;
            set => PathGrid_Set(value);
        }
        public void PathGrid_Set(
            PathGrid value,
            bool hasBeenSet = true)
        {
            _PathGrid = value;
            _hasBeenSetTracker[(int)Cell_FieldIndex.PathGrid] = hasBeenSet;
        }
        public void PathGrid_Unset()
        {
            this.PathGrid_Set(default(PathGrid), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPathGridGetter ICellGetter.PathGrid => this.PathGrid;
        #endregion
        #region Landscape
        public bool Landscape_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.Landscape];
            set => _hasBeenSetTracker[(int)Cell_FieldIndex.Landscape] = value;
        }
        bool ICellGetter.Landscape_IsSet => Landscape_IsSet;
        private Landscape _Landscape;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Landscape Landscape
        {
            get => _Landscape;
            set => Landscape_Set(value);
        }
        public void Landscape_Set(
            Landscape value,
            bool hasBeenSet = true)
        {
            _Landscape = value;
            _hasBeenSetTracker[(int)Cell_FieldIndex.Landscape] = hasBeenSet;
        }
        public void Landscape_Unset()
        {
            this.Landscape_Set(default(Landscape), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILandscapeGetter ICellGetter.Landscape => this.Landscape;
        #endregion
        #region Timestamp
        private Byte[] _Timestamp = new byte[4];
        public Byte[] Timestamp
        {
            get => _Timestamp;
            set => this._Timestamp = value ?? new byte[4];
        }
        ReadOnlySpan<Byte> ICellGetter.Timestamp => this.Timestamp;
        #endregion
        #region PersistentTimestamp
        private Byte[] _PersistentTimestamp = new byte[4];
        public Byte[] PersistentTimestamp
        {
            get => _PersistentTimestamp;
            set => this._PersistentTimestamp = value ?? new byte[4];
        }
        ReadOnlySpan<Byte> ICellGetter.PersistentTimestamp => this.PersistentTimestamp;
        #endregion
        #region Persistent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IPlaced> _Persistent = new SetList<IPlaced>();
        public ISetList<IPlaced> Persistent => _Persistent;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IPlaced> ICell.Persistent => _Persistent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IPlacedGetter> ICellGetter.Persistent => _Persistent;
        #endregion

        #endregion
        #region TemporaryTimestamp
        private Byte[] _TemporaryTimestamp = new byte[4];
        public Byte[] TemporaryTimestamp
        {
            get => _TemporaryTimestamp;
            set => this._TemporaryTimestamp = value ?? new byte[4];
        }
        ReadOnlySpan<Byte> ICellGetter.TemporaryTimestamp => this.TemporaryTimestamp;
        #endregion
        #region Temporary
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IPlaced> _Temporary = new SetList<IPlaced>();
        public ISetList<IPlaced> Temporary => _Temporary;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IPlaced> ICell.Temporary => _Temporary;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IPlacedGetter> ICellGetter.Temporary => _Temporary;
        #endregion

        #endregion
        #region VisibleWhenDistantTimestamp
        private Byte[] _VisibleWhenDistantTimestamp = new byte[4];
        public Byte[] VisibleWhenDistantTimestamp
        {
            get => _VisibleWhenDistantTimestamp;
            set => this._VisibleWhenDistantTimestamp = value ?? new byte[4];
        }
        ReadOnlySpan<Byte> ICellGetter.VisibleWhenDistantTimestamp => this.VisibleWhenDistantTimestamp;
        #endregion
        #region VisibleWhenDistant
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IPlaced> _VisibleWhenDistant = new SetList<IPlaced>();
        public ISetList<IPlaced> VisibleWhenDistant => _VisibleWhenDistant;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IPlaced> ICell.VisibleWhenDistant => _VisibleWhenDistant;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IPlacedGetter> ICellGetter.VisibleWhenDistant => _VisibleWhenDistant;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            CellMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ICellGetter rhs)) return false;
            return ((CellCommon)((ICellGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Cell obj)
        {
            return ((CellCommon)((ICellGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((CellCommon)((ICellGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => CellXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((CellXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Cell CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Cell_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Cell CreateFromXml(
            XElement node,
            out Cell_ErrorMask errorMask,
            bool doMasks = true,
            Cell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Cell CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Cell() : null;
                    break;
                default:
                    break;
            }
            var ret = new Cell();
            ((CellSetterCommon)((ICellGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Cell CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Cell_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Cell CreateFromXml(
            string path,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Cell CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Cell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Cell CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Cell_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Cell CreateFromXml(
            Stream stream,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Cell CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Cell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                    return _hasBeenSetTracker[index];
                case Cell_FieldIndex.Regions:
                    return Regions.HasBeenSet;
                case Cell_FieldIndex.Climate:
                    return Climate_Property.HasBeenSet;
                case Cell_FieldIndex.Water:
                    return Water_Property.HasBeenSet;
                case Cell_FieldIndex.Owner:
                    return Owner_Property.HasBeenSet;
                case Cell_FieldIndex.GlobalVariable:
                    return GlobalVariable_Property.HasBeenSet;
                case Cell_FieldIndex.Persistent:
                    return Persistent.HasBeenSet;
                case Cell_FieldIndex.Temporary:
                    return Temporary.HasBeenSet;
                case Cell_FieldIndex.VisibleWhenDistant:
                    return VisibleWhenDistant.HasBeenSet;
                case Cell_FieldIndex.Timestamp:
                case Cell_FieldIndex.PersistentTimestamp:
                case Cell_FieldIndex.TemporaryTimestamp:
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Cell_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Regions)
            {
                yield return item;
            }
            yield return Climate_Property;
            yield return Water_Property;
            yield return Owner_Property;
            yield return GlobalVariable_Property;
            if (PathGrid != null)
            {
                foreach (var item in PathGrid.Links)
                {
                    yield return item;
                }
            }
            if (Landscape != null)
            {
                foreach (var item in Landscape.Links)
                {
                    yield return item;
                }
            }
            foreach (var item in Persistent.WhereCastable<IPlaced, ILinkContainer>()
                .SelectMany((f) => f.Links))
            {
                yield return item;
            }
            foreach (var item in Temporary.WhereCastable<IPlaced, ILinkContainer>()
                .SelectMany((f) => f.Links))
            {
                yield return item;
            }
            foreach (var item in VisibleWhenDistant.WhereCastable<IPlaced, ILinkContainer>()
                .SelectMany((f) => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(LinkingPackage<M> package)
            
        {
            base.Link(package: package);
            foreach (var item in Regions)
            {
                item.Link(package: package);
            }
            Climate_Property.Link(package);
            Water_Property.Link(package);
            Owner_Property.Link(package);
            GlobalVariable_Property.Link(package);
            if (PathGrid != null)
            {
                PathGrid?.Link(package: package);
            }
            if (Landscape != null)
            {
                Landscape?.Link(package: package);
            }
            foreach (var item in Persistent.WhereCastable<IPlaced, ILinkSubContainer>())
            {
                item.Link(package: package);
            }
            foreach (var item in Temporary.WhereCastable<IPlaced, ILinkSubContainer>())
            {
                item.Link(package: package);
            }
            foreach (var item in VisibleWhenDistant.WhereCastable<IPlaced, ILinkSubContainer>())
            {
                item.Link(package: package);
            }
        }

        public Cell(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Cell(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => CellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((CellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static async Task<Cell> CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return await CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null).ConfigureAwait(false);
        }

        [DebuggerStepThrough]
        public static async Task<(Cell Object, Cell_ErrorMask ErrorMask)> CreateFromBinaryWithErrorMask(
            MutagenFrame frame,
            MasterReferences masterReferences,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = await CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder).ConfigureAwait(false);
            return (ret, Cell_ErrorMask.Factory(errorMaskBuilder));
        }

        public new static async Task<Cell> CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Cell();
            await ((CellSetterCommon)((ICellGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICellGetter)rhs, include);

        void IClearable.Clear()
        {
            ((CellSetterCommon)((ICellGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static Cell GetNew()
        {
            return new Cell();
        }

    }
    #endregion

    #region Interface
    public partial interface ICell :
        ICellGetter,
        IPlace,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<ICellInternal>,
        ILinkSubContainer
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new Cell.Flag Flags { get; set; }
        new bool Flags_IsSet { get; set; }
        void Flags_Set(Cell.Flag value, bool hasBeenSet = true);
        void Flags_Unset();

        new P2Int Grid { get; set; }
        new bool Grid_IsSet { get; set; }
        void Grid_Set(P2Int value, bool hasBeenSet = true);
        void Grid_Unset();

        new CellLighting Lighting { get; set; }
        new bool Lighting_IsSet { get; set; }
        void Lighting_Set(CellLighting value, bool hasBeenSet = true);
        void Lighting_Unset();

        new ISetList<IFormIDLink<Region>> Regions { get; }
        new MusicType MusicType { get; set; }
        new bool MusicType_IsSet { get; set; }
        void MusicType_Set(MusicType value, bool hasBeenSet = true);
        void MusicType_Unset();

        new Single WaterHeight { get; set; }
        new bool WaterHeight_IsSet { get; set; }
        void WaterHeight_Set(Single value, bool hasBeenSet = true);
        void WaterHeight_Unset();

        new Climate Climate { get; set; }
        new IFormIDSetLink<Climate> Climate_Property { get; }
        new Water Water { get; set; }
        new IFormIDSetLink<Water> Water_Property { get; }
        new Faction Owner { get; set; }
        new IFormIDSetLink<Faction> Owner_Property { get; }
        new Int32 FactionRank { get; set; }
        new bool FactionRank_IsSet { get; set; }
        void FactionRank_Set(Int32 value, bool hasBeenSet = true);
        void FactionRank_Unset();

        new Global GlobalVariable { get; set; }
        new IFormIDSetLink<Global> GlobalVariable_Property { get; }
        new PathGrid PathGrid { get; set; }
        new bool PathGrid_IsSet { get; set; }
        void PathGrid_Set(PathGrid value, bool hasBeenSet = true);
        void PathGrid_Unset();

        new Landscape Landscape { get; set; }
        new bool Landscape_IsSet { get; set; }
        void Landscape_Set(Landscape value, bool hasBeenSet = true);
        void Landscape_Unset();

        new Byte[] Timestamp { get; set; }

        new Byte[] PersistentTimestamp { get; set; }

        new ISetList<IPlaced> Persistent { get; }
        new Byte[] TemporaryTimestamp { get; set; }

        new ISetList<IPlaced> Temporary { get; }
        new Byte[] VisibleWhenDistantTimestamp { get; set; }

        new ISetList<IPlaced> VisibleWhenDistant { get; }
    }

    public partial interface ICellInternal :
        IPlaceInternal,
        ICell,
        ICellGetter
    {
    }

    public partial interface ICellGetter :
        IPlaceGetter,
        IMajorRecordGetterEnumerable,
        ILoquiObject<ICellGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Flags
        Cell.Flag Flags { get; }
        bool Flags_IsSet { get; }

        #endregion
        #region Grid
        P2Int Grid { get; }
        bool Grid_IsSet { get; }

        #endregion
        #region Lighting
        ICellLightingGetter Lighting { get; }
        bool Lighting_IsSet { get; }

        #endregion
        #region Regions
        IReadOnlySetList<IFormIDLinkGetter<IRegionGetter>> Regions { get; }
        #endregion
        #region MusicType
        MusicType MusicType { get; }
        bool MusicType_IsSet { get; }

        #endregion
        #region WaterHeight
        Single WaterHeight { get; }
        bool WaterHeight_IsSet { get; }

        #endregion
        #region Climate
        IClimateGetter Climate { get; }
        IFormIDSetLinkGetter<IClimateGetter> Climate_Property { get; }

        #endregion
        #region Water
        IWaterGetter Water { get; }
        IFormIDSetLinkGetter<IWaterGetter> Water_Property { get; }

        #endregion
        #region Owner
        IFactionGetter Owner { get; }
        IFormIDSetLinkGetter<IFactionGetter> Owner_Property { get; }

        #endregion
        #region FactionRank
        Int32 FactionRank { get; }
        bool FactionRank_IsSet { get; }

        #endregion
        #region GlobalVariable
        IGlobalGetter GlobalVariable { get; }
        IFormIDSetLinkGetter<IGlobalGetter> GlobalVariable_Property { get; }

        #endregion
        #region PathGrid
        IPathGridGetter PathGrid { get; }
        bool PathGrid_IsSet { get; }

        #endregion
        #region Landscape
        ILandscapeGetter Landscape { get; }
        bool Landscape_IsSet { get; }

        #endregion
        #region Timestamp
        ReadOnlySpan<Byte> Timestamp { get; }

        #endregion
        #region PersistentTimestamp
        ReadOnlySpan<Byte> PersistentTimestamp { get; }

        #endregion
        #region Persistent
        IReadOnlySetList<IPlacedGetter> Persistent { get; }
        #endregion
        #region TemporaryTimestamp
        ReadOnlySpan<Byte> TemporaryTimestamp { get; }

        #endregion
        #region Temporary
        IReadOnlySetList<IPlacedGetter> Temporary { get; }
        #endregion
        #region VisibleWhenDistantTimestamp
        ReadOnlySpan<Byte> VisibleWhenDistantTimestamp { get; }

        #endregion
        #region VisibleWhenDistant
        IReadOnlySetList<IPlacedGetter> VisibleWhenDistant { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class CellMixIn
    {
        public static void Clear(this ICellInternal item)
        {
            ((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Cell_Mask<bool> GetEqualsMask(
            this ICellGetter item,
            ICellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICellGetter item,
            string name = null,
            Cell_Mask<bool> printMask = null)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICellGetter item,
            FileGeneration fg,
            string name = null,
            Cell_Mask<bool> printMask = null)
        {
            ((CellCommon)((ICellGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ICellGetter item,
            Cell_Mask<bool?> checkMask)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Cell_Mask<bool> GetHasBeenSetMask(this ICellGetter item)
        {
            var ret = new Cell_Mask<bool>();
            ((CellCommon)((ICellGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ICellGetter item,
            ICellGetter rhs)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this ICellInternal lhs,
            ICellGetter rhs,
            Cell_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this ICellInternal lhs,
            ICellGetter rhs,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((CellSetterTranslationCommon)((ICellGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this ICellInternal lhs,
            ICellGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((CellSetterTranslationCommon)((ICellGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            Cell_TranslationMask copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICellInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Cell_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICellInternal item,
            XElement node,
            out Cell_ErrorMask errorMask,
            bool doMasks = true,
            Cell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromXml(
            this ICellInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            Cell_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            string path,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            Cell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Cell_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            Stream stream,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            Cell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Mutagen
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this ICellGetter obj)
        {
            return ((CellCommon)((ICellGetter)obj).CommonInstance()).EnumerateMajorRecords(obj: obj);
        }

        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this ICellInternal obj)
        {
            return ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()).EnumerateMajorRecords(obj: obj);
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static async Task CopyInFromBinary(
            this ICellInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            await CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null).ConfigureAwait(false);
        }

        [DebuggerStepThrough]
        public static async Task<Cell_ErrorMask> CopyInFromBinaryWithErrorMask(
            this ICellInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            await CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder).ConfigureAwait(false);
            return Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static async Task CopyInFromBinary(
            this ICellInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            await ((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Cell_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Flags = 6,
        Grid = 7,
        Lighting = 8,
        Regions = 9,
        MusicType = 10,
        WaterHeight = 11,
        Climate = 12,
        Water = 13,
        Owner = 14,
        FactionRank = 15,
        GlobalVariable = 16,
        PathGrid = 17,
        Landscape = 18,
        Timestamp = 19,
        PersistentTimestamp = 20,
        Persistent = 21,
        TemporaryTimestamp = 22,
        Temporary = 23,
        VisibleWhenDistantTimestamp = 24,
        VisibleWhenDistant = 25,
    }
    #endregion

    #region Registration
    public class Cell_Registration : ILoquiRegistration
    {
        public static readonly Cell_Registration Instance = new Cell_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 120,
            version: 0);

        public const string GUID = "d54abb07-d896-4ddb-b857-9b9df945dd1e";

        public const ushort AdditionalFieldCount = 21;

        public const ushort FieldCount = 26;

        public static readonly Type MaskType = typeof(Cell_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Cell_ErrorMask);

        public static readonly Type ClassType = typeof(Cell);

        public static readonly Type GetterType = typeof(ICellGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICell);

        public static readonly Type InternalSetterType = typeof(ICellInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Cell";

        public const string Name = "Cell";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Cell_FieldIndex.Name;
                case "FLAGS":
                    return (ushort)Cell_FieldIndex.Flags;
                case "GRID":
                    return (ushort)Cell_FieldIndex.Grid;
                case "LIGHTING":
                    return (ushort)Cell_FieldIndex.Lighting;
                case "REGIONS":
                    return (ushort)Cell_FieldIndex.Regions;
                case "MUSICTYPE":
                    return (ushort)Cell_FieldIndex.MusicType;
                case "WATERHEIGHT":
                    return (ushort)Cell_FieldIndex.WaterHeight;
                case "CLIMATE":
                    return (ushort)Cell_FieldIndex.Climate;
                case "WATER":
                    return (ushort)Cell_FieldIndex.Water;
                case "OWNER":
                    return (ushort)Cell_FieldIndex.Owner;
                case "FACTIONRANK":
                    return (ushort)Cell_FieldIndex.FactionRank;
                case "GLOBALVARIABLE":
                    return (ushort)Cell_FieldIndex.GlobalVariable;
                case "PATHGRID":
                    return (ushort)Cell_FieldIndex.PathGrid;
                case "LANDSCAPE":
                    return (ushort)Cell_FieldIndex.Landscape;
                case "TIMESTAMP":
                    return (ushort)Cell_FieldIndex.Timestamp;
                case "PERSISTENTTIMESTAMP":
                    return (ushort)Cell_FieldIndex.PersistentTimestamp;
                case "PERSISTENT":
                    return (ushort)Cell_FieldIndex.Persistent;
                case "TEMPORARYTIMESTAMP":
                    return (ushort)Cell_FieldIndex.TemporaryTimestamp;
                case "TEMPORARY":
                    return (ushort)Cell_FieldIndex.Temporary;
                case "VISIBLEWHENDISTANTTIMESTAMP":
                    return (ushort)Cell_FieldIndex.VisibleWhenDistantTimestamp;
                case "VISIBLEWHENDISTANT":
                    return (ushort)Cell_FieldIndex.VisibleWhenDistant;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return true;
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Timestamp:
                case Cell_FieldIndex.PersistentTimestamp:
                case Cell_FieldIndex.TemporaryTimestamp:
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                    return false;
                default:
                    return Place_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return true;
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.Timestamp:
                case Cell_FieldIndex.PersistentTimestamp:
                case Cell_FieldIndex.TemporaryTimestamp:
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                    return false;
                default:
                    return Place_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Timestamp:
                case Cell_FieldIndex.PersistentTimestamp:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.TemporaryTimestamp:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return Place_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    return "Name";
                case Cell_FieldIndex.Flags:
                    return "Flags";
                case Cell_FieldIndex.Grid:
                    return "Grid";
                case Cell_FieldIndex.Lighting:
                    return "Lighting";
                case Cell_FieldIndex.Regions:
                    return "Regions";
                case Cell_FieldIndex.MusicType:
                    return "MusicType";
                case Cell_FieldIndex.WaterHeight:
                    return "WaterHeight";
                case Cell_FieldIndex.Climate:
                    return "Climate";
                case Cell_FieldIndex.Water:
                    return "Water";
                case Cell_FieldIndex.Owner:
                    return "Owner";
                case Cell_FieldIndex.FactionRank:
                    return "FactionRank";
                case Cell_FieldIndex.GlobalVariable:
                    return "GlobalVariable";
                case Cell_FieldIndex.PathGrid:
                    return "PathGrid";
                case Cell_FieldIndex.Landscape:
                    return "Landscape";
                case Cell_FieldIndex.Timestamp:
                    return "Timestamp";
                case Cell_FieldIndex.PersistentTimestamp:
                    return "PersistentTimestamp";
                case Cell_FieldIndex.Persistent:
                    return "Persistent";
                case Cell_FieldIndex.TemporaryTimestamp:
                    return "TemporaryTimestamp";
                case Cell_FieldIndex.Temporary:
                    return "Temporary";
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                    return "VisibleWhenDistantTimestamp";
                case Cell_FieldIndex.VisibleWhenDistant:
                    return "VisibleWhenDistant";
                default:
                    return Place_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Timestamp:
                case Cell_FieldIndex.PersistentTimestamp:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.TemporaryTimestamp:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return Place_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Timestamp:
                case Cell_FieldIndex.PersistentTimestamp:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.TemporaryTimestamp:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return Place_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    return typeof(String);
                case Cell_FieldIndex.Flags:
                    return typeof(Cell.Flag);
                case Cell_FieldIndex.Grid:
                    return typeof(P2Int);
                case Cell_FieldIndex.Lighting:
                    return typeof(CellLighting);
                case Cell_FieldIndex.Regions:
                    return typeof(ISetList<IFormIDLink<Region>>);
                case Cell_FieldIndex.MusicType:
                    return typeof(MusicType);
                case Cell_FieldIndex.WaterHeight:
                    return typeof(Single);
                case Cell_FieldIndex.Climate:
                    return typeof(IFormIDSetLink<Climate>);
                case Cell_FieldIndex.Water:
                    return typeof(IFormIDSetLink<Water>);
                case Cell_FieldIndex.Owner:
                    return typeof(IFormIDSetLink<Faction>);
                case Cell_FieldIndex.FactionRank:
                    return typeof(Int32);
                case Cell_FieldIndex.GlobalVariable:
                    return typeof(IFormIDSetLink<Global>);
                case Cell_FieldIndex.PathGrid:
                    return typeof(PathGrid);
                case Cell_FieldIndex.Landscape:
                    return typeof(Landscape);
                case Cell_FieldIndex.Timestamp:
                    return typeof(Byte[]);
                case Cell_FieldIndex.PersistentTimestamp:
                    return typeof(Byte[]);
                case Cell_FieldIndex.Persistent:
                    return typeof(ISetList<IPlaced>);
                case Cell_FieldIndex.TemporaryTimestamp:
                    return typeof(Byte[]);
                case Cell_FieldIndex.Temporary:
                    return typeof(ISetList<IPlaced>);
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                    return typeof(Byte[]);
                case Cell_FieldIndex.VisibleWhenDistant:
                    return typeof(ISetList<IPlaced>);
                default:
                    return Place_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(CellXmlWriteTranslation);
        public static readonly RecordType CELL_HEADER = new RecordType("CELL");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType XCLC_HEADER = new RecordType("XCLC");
        public static readonly RecordType XCLL_HEADER = new RecordType("XCLL");
        public static readonly RecordType XCLR_HEADER = new RecordType("XCLR");
        public static readonly RecordType XCMT_HEADER = new RecordType("XCMT");
        public static readonly RecordType XCLW_HEADER = new RecordType("XCLW");
        public static readonly RecordType XCCM_HEADER = new RecordType("XCCM");
        public static readonly RecordType XCWT_HEADER = new RecordType("XCWT");
        public static readonly RecordType XOWN_HEADER = new RecordType("XOWN");
        public static readonly RecordType XRNK_HEADER = new RecordType("XRNK");
        public static readonly RecordType XGLB_HEADER = new RecordType("XGLB");
        public static readonly RecordType PGRD_HEADER = new RecordType("PGRD");
        public static readonly RecordType LAND_HEADER = new RecordType("LAND");
        public static readonly RecordType ACRE_HEADER = new RecordType("ACRE");
        public static readonly RecordType ACHR_HEADER = new RecordType("ACHR");
        public static readonly RecordType REFR_HEADER = new RecordType("REFR");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CELL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 17;
        public static readonly Type BinaryWriteTranslation = typeof(CellBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class CellSetterCommon : PlaceSetterCommon
    {
        public new static readonly CellSetterCommon Instance = new CellSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(ICellInternal item)
        {
            ClearPartial();
            item.Name_Unset();
            item.Flags_Unset();
            item.Grid_Unset();
            item.Lighting_Unset();
            item.Regions.Unset();
            item.MusicType_Unset();
            item.WaterHeight_Unset();
            item.Climate_Property.Unset();
            item.Water_Property.Unset();
            item.Owner_Property.Unset();
            item.FactionRank_Unset();
            item.GlobalVariable_Property.Unset();
            item.PathGrid_Unset();
            item.Landscape_Unset();
            item.Timestamp = default(Byte[]);
            item.PersistentTimestamp = default(Byte[]);
            item.Persistent.Unset();
            item.TemporaryTimestamp = default(Byte[]);
            item.Temporary.Unset();
            item.VisibleWhenDistantTimestamp = default(Byte[]);
            item.VisibleWhenDistant.Unset();
            base.Clear(item);
        }
        
        public override void Clear(IPlaceInternal item)
        {
            Clear(item: (ICellInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ICellInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICellInternal)item);
        }
        
        public override object GetNew() => Cell.GetNew();
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ICellInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    PlaceSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public new void CopyInFromXml(
            ICellInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    CellXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Mutagen
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(ICellInternal obj)
        {
            if (obj.PathGrid != null)
            {
                yield return obj.PathGrid;
                foreach (var item in obj.PathGrid.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
            if (obj.Landscape != null)
            {
                yield return obj.Landscape;
                foreach (var item in obj.Landscape.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
            foreach (var subItem in obj.Persistent)
            {
                yield return subItem;
            }
            foreach (var subItem in obj.Temporary)
            {
                yield return subItem;
            }
            foreach (var subItem in obj.VisibleWhenDistant)
            {
                yield return subItem;
            }
        }
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Cell_Registration.CELL_HEADER;
        protected static void FillBinaryStructs(
            ICellInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            PlaceSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ICellInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Name);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (EnumBinaryTranslation<Cell.Flag>.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Cell.Flag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(Cell.Flag);
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Flags);
                }
                case 0x434C4358: // XCLC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out P2Int GridParse))
                    {
                        item.Grid = GridParse;
                    }
                    else
                    {
                        item.Grid = default(P2Int);
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Grid);
                }
                case 0x4C4C4358: // XCLL
                {
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Lighting);
                        item.Lighting = Mutagen.Bethesda.Oblivion.CellLighting.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Lighting);
                }
                case 0x524C4358: // XCLR
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLink<Region>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Regions,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Regions);
                }
                case 0x544D4358: // XCMT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (EnumBinaryTranslation<MusicType>.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out MusicType MusicTypeParse))
                    {
                        item.MusicType = MusicTypeParse;
                    }
                    else
                    {
                        item.MusicType = default(MusicType);
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.MusicType);
                }
                case 0x574C4358: // XCLW
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Single WaterHeightParse))
                    {
                        item.WaterHeight = WaterHeightParse;
                    }
                    else
                    {
                        item.WaterHeight = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.WaterHeight);
                }
                case 0x4D434358: // XCCM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Climate_Property);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Climate);
                }
                case 0x54574358: // XCWT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Water_Property);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Water);
                }
                case 0x4E574F58: // XOWN
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Owner_Property);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Owner);
                }
                case 0x4B4E5258: // XRNK
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FactionRank = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.FactionRank);
                }
                case 0x424C4758: // XGLB
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.GlobalVariable_Property);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.GlobalVariable);
                }
                default:
                    return PlaceSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }
        
        public new async Task CopyInFromBinary(
            ICellInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.MajorRecordParse<ICellInternal>(
                record: item,
                frame: frame,
                errorMask: errorMask,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
            try
            {
                await CellBinaryCreateTranslation.CustomBinaryEndImport(
                    frame: frame,
                    obj: item,
                    masterReferences: masterReferences,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
    }
    public partial class CellCommon : PlaceCommon
    {
        public new static readonly CellCommon Instance = new CellCommon();

        public Cell_Mask<bool> GetEqualsMask(
            ICellGetter item,
            ICellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Cell_Mask<bool>();
            ((CellCommon)((ICellGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICellGetter item,
            ICellGetter rhs,
            Cell_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Flags = item.Flags_IsSet == rhs.Flags_IsSet && item.Flags == rhs.Flags;
            ret.Grid = item.Grid_IsSet == rhs.Grid_IsSet && item.Grid.Equals(rhs.Grid);
            ret.Lighting = EqualsMaskHelper.EqualsHelper(
                item.Lighting_IsSet,
                rhs.Lighting_IsSet,
                item.Lighting,
                rhs.Lighting,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Regions = item.Regions.CollectionEqualsHelper(
                rhs.Regions,
                (l, r) => object.Equals(l, r),
                include);
            ret.MusicType = item.MusicType_IsSet == rhs.MusicType_IsSet && item.MusicType == rhs.MusicType;
            ret.WaterHeight = item.WaterHeight_IsSet == rhs.WaterHeight_IsSet && item.WaterHeight.EqualsWithin(rhs.WaterHeight);
            ret.Climate = item.Climate_Property.FormKey == rhs.Climate_Property.FormKey;
            ret.Water = item.Water_Property.FormKey == rhs.Water_Property.FormKey;
            ret.Owner = item.Owner_Property.FormKey == rhs.Owner_Property.FormKey;
            ret.FactionRank = item.FactionRank_IsSet == rhs.FactionRank_IsSet && item.FactionRank == rhs.FactionRank;
            ret.GlobalVariable = item.GlobalVariable_Property.FormKey == rhs.GlobalVariable_Property.FormKey;
            ret.PathGrid = EqualsMaskHelper.EqualsHelper(
                item.PathGrid_IsSet,
                rhs.PathGrid_IsSet,
                item.PathGrid,
                rhs.PathGrid,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Landscape = EqualsMaskHelper.EqualsHelper(
                item.Landscape_IsSet,
                rhs.Landscape_IsSet,
                item.Landscape,
                rhs.Landscape,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Timestamp = MemoryExtensions.SequenceEqual(item.Timestamp, rhs.Timestamp);
            ret.PersistentTimestamp = MemoryExtensions.SequenceEqual(item.PersistentTimestamp, rhs.PersistentTimestamp);
            ret.Persistent = item.Persistent.CollectionEqualsHelper(
                rhs.Persistent,
                (loqLhs, loqRhs) => loqLhs.GetEqualsIMask(loqRhs, include),
                include);
            ret.TemporaryTimestamp = MemoryExtensions.SequenceEqual(item.TemporaryTimestamp, rhs.TemporaryTimestamp);
            ret.Temporary = item.Temporary.CollectionEqualsHelper(
                rhs.Temporary,
                (loqLhs, loqRhs) => loqLhs.GetEqualsIMask(loqRhs, include),
                include);
            ret.VisibleWhenDistantTimestamp = MemoryExtensions.SequenceEqual(item.VisibleWhenDistantTimestamp, rhs.VisibleWhenDistantTimestamp);
            ret.VisibleWhenDistant = item.VisibleWhenDistant.CollectionEqualsHelper(
                rhs.VisibleWhenDistant,
                (loqLhs, loqRhs) => loqLhs.GetEqualsIMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ICellGetter item,
            string name = null,
            Cell_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICellGetter item,
            FileGeneration fg,
            string name = null,
            Cell_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Cell =>");
            }
            else
            {
                fg.AppendLine($"{name} (Cell) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICellGetter item,
            FileGeneration fg,
            Cell_Mask<bool> printMask = null)
        {
            PlaceCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Grid ?? true)
            {
                fg.AppendLine($"Grid => {item.Grid}");
            }
            if (printMask?.Lighting?.Overall ?? true)
            {
                item.Lighting?.ToString(fg, "Lighting");
            }
            if (printMask?.Regions?.Overall ?? true)
            {
                fg.AppendLine("Regions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Regions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.MusicType ?? true)
            {
                fg.AppendLine($"MusicType => {item.MusicType}");
            }
            if (printMask?.WaterHeight ?? true)
            {
                fg.AppendLine($"WaterHeight => {item.WaterHeight}");
            }
            if (printMask?.Climate ?? true)
            {
                fg.AppendLine($"Climate => {item.Climate_Property}");
            }
            if (printMask?.Water ?? true)
            {
                fg.AppendLine($"Water => {item.Water_Property}");
            }
            if (printMask?.Owner ?? true)
            {
                fg.AppendLine($"Owner => {item.Owner_Property}");
            }
            if (printMask?.FactionRank ?? true)
            {
                fg.AppendLine($"FactionRank => {item.FactionRank}");
            }
            if (printMask?.GlobalVariable ?? true)
            {
                fg.AppendLine($"GlobalVariable => {item.GlobalVariable_Property}");
            }
            if (printMask?.PathGrid?.Overall ?? true)
            {
                item.PathGrid?.ToString(fg, "PathGrid");
            }
            if (printMask?.Landscape?.Overall ?? true)
            {
                item.Landscape?.ToString(fg, "Landscape");
            }
            if (printMask?.Timestamp ?? true)
            {
                fg.AppendLine($"Timestamp => {SpanExt.ToHexString(item.Timestamp)}");
            }
            if (printMask?.PersistentTimestamp ?? true)
            {
                fg.AppendLine($"PersistentTimestamp => {SpanExt.ToHexString(item.PersistentTimestamp)}");
            }
            if (printMask?.Persistent?.Overall ?? true)
            {
                fg.AppendLine("Persistent =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Persistent)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.TemporaryTimestamp ?? true)
            {
                fg.AppendLine($"TemporaryTimestamp => {SpanExt.ToHexString(item.TemporaryTimestamp)}");
            }
            if (printMask?.Temporary?.Overall ?? true)
            {
                fg.AppendLine("Temporary =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Temporary)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.VisibleWhenDistantTimestamp ?? true)
            {
                fg.AppendLine($"VisibleWhenDistantTimestamp => {SpanExt.ToHexString(item.VisibleWhenDistantTimestamp)}");
            }
            if (printMask?.VisibleWhenDistant?.Overall ?? true)
            {
                fg.AppendLine("VisibleWhenDistant =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.VisibleWhenDistant)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ICellGetter item,
            Cell_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_IsSet) return false;
            if (checkMask.Grid.HasValue && checkMask.Grid.Value != item.Grid_IsSet) return false;
            if (checkMask.Lighting.Overall.HasValue && checkMask.Lighting.Overall.Value != item.Lighting_IsSet) return false;
            if (checkMask.Lighting.Specific != null && (item.Lighting == null || !item.Lighting.HasBeenSet(checkMask.Lighting.Specific))) return false;
            if (checkMask.Regions.Overall.HasValue && checkMask.Regions.Overall.Value != item.Regions.HasBeenSet) return false;
            if (checkMask.MusicType.HasValue && checkMask.MusicType.Value != item.MusicType_IsSet) return false;
            if (checkMask.WaterHeight.HasValue && checkMask.WaterHeight.Value != item.WaterHeight_IsSet) return false;
            if (checkMask.Climate.HasValue && checkMask.Climate.Value != item.Climate_Property.HasBeenSet) return false;
            if (checkMask.Water.HasValue && checkMask.Water.Value != item.Water_Property.HasBeenSet) return false;
            if (checkMask.Owner.HasValue && checkMask.Owner.Value != item.Owner_Property.HasBeenSet) return false;
            if (checkMask.FactionRank.HasValue && checkMask.FactionRank.Value != item.FactionRank_IsSet) return false;
            if (checkMask.GlobalVariable.HasValue && checkMask.GlobalVariable.Value != item.GlobalVariable_Property.HasBeenSet) return false;
            if (checkMask.PathGrid.Overall.HasValue && checkMask.PathGrid.Overall.Value != item.PathGrid_IsSet) return false;
            if (checkMask.PathGrid.Specific != null && (item.PathGrid == null || !item.PathGrid.HasBeenSet(checkMask.PathGrid.Specific))) return false;
            if (checkMask.Landscape.Overall.HasValue && checkMask.Landscape.Overall.Value != item.Landscape_IsSet) return false;
            if (checkMask.Landscape.Specific != null && (item.Landscape == null || !item.Landscape.HasBeenSet(checkMask.Landscape.Specific))) return false;
            if (checkMask.Persistent.Overall.HasValue && checkMask.Persistent.Overall.Value != item.Persistent.HasBeenSet) return false;
            if (checkMask.Temporary.Overall.HasValue && checkMask.Temporary.Overall.Value != item.Temporary.HasBeenSet) return false;
            if (checkMask.VisibleWhenDistant.Overall.HasValue && checkMask.VisibleWhenDistant.Overall.Value != item.VisibleWhenDistant.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ICellGetter item,
            Cell_Mask<bool> mask)
        {
            mask.Name = item.Name_IsSet;
            mask.Flags = item.Flags_IsSet;
            mask.Grid = item.Grid_IsSet;
            mask.Lighting = new MaskItem<bool, CellLighting_Mask<bool>>(item.Lighting_IsSet, item.Lighting.GetHasBeenSetMask());
            mask.Regions = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Regions.HasBeenSet, null);
            mask.MusicType = item.MusicType_IsSet;
            mask.WaterHeight = item.WaterHeight_IsSet;
            mask.Climate = item.Climate_Property.HasBeenSet;
            mask.Water = item.Water_Property.HasBeenSet;
            mask.Owner = item.Owner_Property.HasBeenSet;
            mask.FactionRank = item.FactionRank_IsSet;
            mask.GlobalVariable = item.GlobalVariable_Property.HasBeenSet;
            mask.PathGrid = new MaskItem<bool, PathGrid_Mask<bool>>(item.PathGrid_IsSet, item.PathGrid.GetHasBeenSetMask());
            mask.Landscape = new MaskItem<bool, Landscape_Mask<bool>>(item.Landscape_IsSet, item.Landscape.GetHasBeenSetMask());
            mask.Timestamp = true;
            mask.PersistentTimestamp = true;
            mask.Persistent = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, IMask<bool>>>>(item.Persistent.HasBeenSet, item.Persistent.WithIndex().Select((i) => new MaskItemIndexed<bool, IMask<bool>>(i.Index, true, i.Item.GetHasBeenSetIMask())));
            mask.TemporaryTimestamp = true;
            mask.Temporary = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, IMask<bool>>>>(item.Temporary.HasBeenSet, item.Temporary.WithIndex().Select((i) => new MaskItemIndexed<bool, IMask<bool>>(i.Index, true, i.Item.GetHasBeenSetIMask())));
            mask.VisibleWhenDistantTimestamp = true;
            mask.VisibleWhenDistant = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, IMask<bool>>>>(item.VisibleWhenDistant.HasBeenSet, item.VisibleWhenDistant.WithIndex().Select((i) => new MaskItemIndexed<bool, IMask<bool>>(i.Index, true, i.Item.GetHasBeenSetIMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Cell_FieldIndex ConvertFieldIndex(Place_FieldIndex index)
        {
            switch (index)
            {
                case Place_FieldIndex.MajorRecordFlagsRaw:
                    return (Cell_FieldIndex)((int)index);
                case Place_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case Place_FieldIndex.Version:
                    return (Cell_FieldIndex)((int)index);
                case Place_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                case Place_FieldIndex.OblivionMajorRecordFlags:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static Cell_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Cell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Cell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static Cell_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICellGetter lhs,
            ICellGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Name_IsSet != rhs.Name_IsSet) return false;
            if (lhs.Name_IsSet)
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if (lhs.Flags_IsSet != rhs.Flags_IsSet) return false;
            if (lhs.Flags_IsSet)
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if (lhs.Grid_IsSet != rhs.Grid_IsSet) return false;
            if (lhs.Grid_IsSet)
            {
                if (!lhs.Grid.Equals(rhs.Grid)) return false;
            }
            if (lhs.Lighting_IsSet != rhs.Lighting_IsSet) return false;
            if (lhs.Lighting_IsSet)
            {
                if (!object.Equals(lhs.Lighting, rhs.Lighting)) return false;
            }
            if (lhs.Regions.HasBeenSet != rhs.Regions.HasBeenSet) return false;
            if (lhs.Regions.HasBeenSet)
            {
                if (!lhs.Regions.SequenceEqual(rhs.Regions)) return false;
            }
            if (lhs.MusicType_IsSet != rhs.MusicType_IsSet) return false;
            if (lhs.MusicType_IsSet)
            {
                if (lhs.MusicType != rhs.MusicType) return false;
            }
            if (lhs.WaterHeight_IsSet != rhs.WaterHeight_IsSet) return false;
            if (lhs.WaterHeight_IsSet)
            {
                if (!lhs.WaterHeight.EqualsWithin(rhs.WaterHeight)) return false;
            }
            if (lhs.Climate_Property.HasBeenSet != rhs.Climate_Property.HasBeenSet) return false;
            if (lhs.Climate_Property.HasBeenSet)
            {
                if (!lhs.Climate_Property.Equals(rhs.Climate_Property)) return false;
            }
            if (lhs.Water_Property.HasBeenSet != rhs.Water_Property.HasBeenSet) return false;
            if (lhs.Water_Property.HasBeenSet)
            {
                if (!lhs.Water_Property.Equals(rhs.Water_Property)) return false;
            }
            if (lhs.Owner_Property.HasBeenSet != rhs.Owner_Property.HasBeenSet) return false;
            if (lhs.Owner_Property.HasBeenSet)
            {
                if (!lhs.Owner_Property.Equals(rhs.Owner_Property)) return false;
            }
            if (lhs.FactionRank_IsSet != rhs.FactionRank_IsSet) return false;
            if (lhs.FactionRank_IsSet)
            {
                if (lhs.FactionRank != rhs.FactionRank) return false;
            }
            if (lhs.GlobalVariable_Property.HasBeenSet != rhs.GlobalVariable_Property.HasBeenSet) return false;
            if (lhs.GlobalVariable_Property.HasBeenSet)
            {
                if (!lhs.GlobalVariable_Property.Equals(rhs.GlobalVariable_Property)) return false;
            }
            if (lhs.PathGrid_IsSet != rhs.PathGrid_IsSet) return false;
            if (lhs.PathGrid_IsSet)
            {
                if (!object.Equals(lhs.PathGrid, rhs.PathGrid)) return false;
            }
            if (lhs.Landscape_IsSet != rhs.Landscape_IsSet) return false;
            if (lhs.Landscape_IsSet)
            {
                if (!object.Equals(lhs.Landscape, rhs.Landscape)) return false;
            }
            if (!MemoryExtensions.SequenceEqual(lhs.Timestamp, rhs.Timestamp)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.PersistentTimestamp, rhs.PersistentTimestamp)) return false;
            if (lhs.Persistent.HasBeenSet != rhs.Persistent.HasBeenSet) return false;
            if (lhs.Persistent.HasBeenSet)
            {
                if (!lhs.Persistent.SequenceEqual(rhs.Persistent)) return false;
            }
            if (!MemoryExtensions.SequenceEqual(lhs.TemporaryTimestamp, rhs.TemporaryTimestamp)) return false;
            if (lhs.Temporary.HasBeenSet != rhs.Temporary.HasBeenSet) return false;
            if (lhs.Temporary.HasBeenSet)
            {
                if (!lhs.Temporary.SequenceEqual(rhs.Temporary)) return false;
            }
            if (!MemoryExtensions.SequenceEqual(lhs.VisibleWhenDistantTimestamp, rhs.VisibleWhenDistantTimestamp)) return false;
            if (lhs.VisibleWhenDistant.HasBeenSet != rhs.VisibleWhenDistant.HasBeenSet) return false;
            if (lhs.VisibleWhenDistant.HasBeenSet)
            {
                if (!lhs.VisibleWhenDistant.SequenceEqual(rhs.VisibleWhenDistant)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IPlaceGetter lhs,
            IPlaceGetter rhs)
        {
            return Equals(
                lhs: (ICellGetter)lhs,
                rhs: rhs as ICellGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter lhs,
            IOblivionMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (ICellGetter)lhs,
                rhs: rhs as ICellGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (ICellGetter)lhs,
                rhs: rhs as ICellGetter);
        }
        
        public virtual int GetHashCode(ICellGetter item)
        {
            int ret = 0;
            if (item.Name_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            }
            if (item.Flags_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            }
            if (item.Grid_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Grid).CombineHashCode(ret);
            }
            if (item.Lighting_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Lighting).CombineHashCode(ret);
            }
            if (item.Regions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Regions).CombineHashCode(ret);
            }
            if (item.MusicType_IsSet)
            {
                ret = HashHelper.GetHashCode(item.MusicType).CombineHashCode(ret);
            }
            if (item.WaterHeight_IsSet)
            {
                ret = HashHelper.GetHashCode(item.WaterHeight).CombineHashCode(ret);
            }
            if (item.Climate_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Climate).CombineHashCode(ret);
            }
            if (item.Water_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Water).CombineHashCode(ret);
            }
            if (item.Owner_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Owner).CombineHashCode(ret);
            }
            if (item.FactionRank_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FactionRank).CombineHashCode(ret);
            }
            if (item.GlobalVariable_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.GlobalVariable).CombineHashCode(ret);
            }
            if (item.PathGrid_IsSet)
            {
                ret = HashHelper.GetHashCode(item.PathGrid).CombineHashCode(ret);
            }
            if (item.Landscape_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Landscape).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Timestamp).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PersistentTimestamp).CombineHashCode(ret);
            if (item.Persistent.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Persistent).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.TemporaryTimestamp).CombineHashCode(ret);
            if (item.Temporary.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Temporary).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.VisibleWhenDistantTimestamp).CombineHashCode(ret);
            if (item.VisibleWhenDistant.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.VisibleWhenDistant).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IPlaceGetter item)
        {
            return GetHashCode(item: (ICellGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ICellGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICellGetter)item);
        }
        
        #endregion
        
        
        #region Mutagen
        partial void PostDuplicate(Cell obj, Cell rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Cell(getNextFormKey());
            ret.DeepCopyFieldsFrom((Cell)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Cell)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(ICellGetter obj)
        {
            if (obj.PathGrid != null)
            {
                yield return obj.PathGrid;
                foreach (var item in obj.PathGrid.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
            if (obj.Landscape != null)
            {
                yield return obj.Landscape;
                foreach (var item in obj.Landscape.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
            foreach (var subItem in obj.Persistent)
            {
                yield return subItem;
            }
            foreach (var subItem in obj.Temporary)
            {
                yield return subItem;
            }
            foreach (var subItem in obj.VisibleWhenDistant)
            {
                yield return subItem;
            }
        }
        #endregion
        
    }
    public partial class CellSetterTranslationCommon : PlaceSetterTranslationCommon
    {
        public new static readonly CellSetterTranslationCommon Instance = new CellSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            ICell item,
            ICellGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((PlaceSetterTranslationCommon)((IPlaceGetter)item).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Name) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Name);
                try
                {
                    if (rhs.Name_IsSet)
                    {
                        item.Name = rhs.Name;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Flags) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Flags);
                try
                {
                    if (rhs.Flags_IsSet)
                    {
                        item.Flags = rhs.Flags;
                    }
                    else
                    {
                        item.Flags_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Grid) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Grid);
                try
                {
                    if (rhs.Grid_IsSet)
                    {
                        item.Grid = rhs.Grid;
                    }
                    else
                    {
                        item.Grid_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Lighting) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Lighting);
                try
                {
                    if(rhs.Lighting_IsSet)
                    {
                        item.Lighting = rhs.Lighting.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Cell_FieldIndex.Lighting));
                    }
                    else
                    {
                        item.Lighting_Set(
                            value: default(CellLighting),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Regions) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Regions);
                try
                {
                    item.Regions.SetTo(
                        rhs.Regions,
                        (r) => new FormIDLink<Region>(r.FormKey));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.MusicType) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.MusicType);
                try
                {
                    if (rhs.MusicType_IsSet)
                    {
                        item.MusicType = rhs.MusicType;
                    }
                    else
                    {
                        item.MusicType_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterHeight) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.WaterHeight);
                try
                {
                    if (rhs.WaterHeight_IsSet)
                    {
                        item.WaterHeight = rhs.WaterHeight;
                    }
                    else
                    {
                        item.WaterHeight_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Climate) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Climate);
                try
                {
                    item.Climate_Property.SetToFormKey(rhs: rhs.Climate_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Water) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Water);
                try
                {
                    item.Water_Property.SetToFormKey(rhs: rhs.Water_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Owner) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Owner);
                try
                {
                    item.Owner_Property.SetToFormKey(rhs: rhs.Owner_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.FactionRank) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.FactionRank);
                try
                {
                    if (rhs.FactionRank_IsSet)
                    {
                        item.FactionRank = rhs.FactionRank;
                    }
                    else
                    {
                        item.FactionRank_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.GlobalVariable) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.GlobalVariable);
                try
                {
                    item.GlobalVariable_Property.SetToFormKey(rhs: rhs.GlobalVariable_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.PathGrid) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.PathGrid);
                try
                {
                    if(rhs.PathGrid_IsSet)
                    {
                        var copyRet = new PathGrid(rhs.PathGrid.FormKey);
                        copyRet.DeepCopyFieldsFrom(
                            rhs: rhs.PathGrid,
                            copyMask: copyMask?.GetSubCrystal((int)Cell_FieldIndex.PathGrid),
                            errorMask: errorMask);
                        item.PathGrid = copyRet;
                    }
                    else
                    {
                        item.PathGrid_Set(
                            value: default(PathGrid),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Landscape) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Landscape);
                try
                {
                    if(rhs.Landscape_IsSet)
                    {
                        var copyRet = new Landscape(rhs.Landscape.FormKey);
                        copyRet.DeepCopyFieldsFrom(
                            rhs: rhs.Landscape,
                            copyMask: copyMask?.GetSubCrystal((int)Cell_FieldIndex.Landscape),
                            errorMask: errorMask);
                        item.Landscape = copyRet;
                    }
                    else
                    {
                        item.Landscape_Set(
                            value: default(Landscape),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Timestamp) ?? true))
            {
                item.Timestamp = rhs.Timestamp.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.PersistentTimestamp) ?? true))
            {
                item.PersistentTimestamp = rhs.PersistentTimestamp.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Persistent) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Persistent);
                try
                {
                    item.Persistent.SetTo(
                        items: rhs.Persistent,
                        converter: (r) =>
                        {
                            return LoquiRegistration.GetCopyFunc<IPlaced, IPlacedGetter>(r.GetType(), typeof(IPlacedGetter))(r, null);
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.TemporaryTimestamp) ?? true))
            {
                item.TemporaryTimestamp = rhs.TemporaryTimestamp.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Temporary) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Temporary);
                try
                {
                    item.Temporary.SetTo(
                        items: rhs.Temporary,
                        converter: (r) =>
                        {
                            return LoquiRegistration.GetCopyFunc<IPlaced, IPlacedGetter>(r.GetType(), typeof(IPlacedGetter))(r, null);
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistantTimestamp) ?? true))
            {
                item.VisibleWhenDistantTimestamp = rhs.VisibleWhenDistantTimestamp.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistant) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.VisibleWhenDistant);
                try
                {
                    item.VisibleWhenDistant.SetTo(
                        items: rhs.VisibleWhenDistant,
                        converter: (r) =>
                        {
                            return LoquiRegistration.GetCopyFunc<IPlaced, IPlacedGetter>(r.GetType(), typeof(IPlacedGetter))(r, null);
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public Cell DeepCopy(
            ICellGetter item,
            Cell_TranslationMask copyMask = null)
        {
            Cell ret = (Cell)((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Cell DeepCopy(
            ICellGetter item,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask copyMask = null)
        {
            Cell ret = (Cell)((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Cell DeepCopy(
            ICellGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            Cell ret = (Cell)((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Cell
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Cell_Registration.Instance;
        public new static Cell_Registration Registration => Cell_Registration.Instance;
        protected override object CommonInstance() => CellCommon.Instance;
        protected override object CommonSetterInstance()
        {
            return CellSetterCommon.Instance;
        }
        protected override object CommonSetterTranslationInstance() => CellSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CellXmlWriteTranslation :
        PlaceXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static CellXmlWriteTranslation Instance = new CellXmlWriteTranslation();

        public static void WriteToNodeXml(
            ICellGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            PlaceXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Cell_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Flags_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Cell.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Cell_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.Grid_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Grid) ?? true))
            {
                P2IntXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Grid),
                    item: item.Grid,
                    fieldIndex: (int)Cell_FieldIndex.Grid,
                    errorMask: errorMask);
            }
            if (item.Lighting_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Lighting) ?? true))
            {
                var loquiItem = item.Lighting;
                ((CellLightingXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Lighting),
                    fieldIndex: (int)Cell_FieldIndex.Lighting,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Lighting));
            }
            if (item.Regions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Regions) ?? true))
            {
                ListXmlTranslation<IFormIDLinkGetter<IRegionGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Regions),
                    item: item.Regions,
                    fieldIndex: (int)Cell_FieldIndex.Regions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Regions),
                    transl: (XElement subNode, IFormIDLinkGetter<IRegionGetter> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if (item.MusicType_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.MusicType) ?? true))
            {
                EnumXmlTranslation<MusicType>.Instance.Write(
                    node: node,
                    name: nameof(item.MusicType),
                    item: item.MusicType,
                    fieldIndex: (int)Cell_FieldIndex.MusicType,
                    errorMask: errorMask);
            }
            if (item.WaterHeight_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterHeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.WaterHeight),
                    item: item.WaterHeight,
                    fieldIndex: (int)Cell_FieldIndex.WaterHeight,
                    errorMask: errorMask);
            }
            if (item.Climate_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Climate) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Climate),
                    item: item.Climate_Property?.FormKey,
                    fieldIndex: (int)Cell_FieldIndex.Climate,
                    errorMask: errorMask);
            }
            if (item.Water_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Water) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Water),
                    item: item.Water_Property?.FormKey,
                    fieldIndex: (int)Cell_FieldIndex.Water,
                    errorMask: errorMask);
            }
            if (item.Owner_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Owner) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Owner),
                    item: item.Owner_Property?.FormKey,
                    fieldIndex: (int)Cell_FieldIndex.Owner,
                    errorMask: errorMask);
            }
            if (item.FactionRank_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.FactionRank) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FactionRank),
                    item: item.FactionRank,
                    fieldIndex: (int)Cell_FieldIndex.FactionRank,
                    errorMask: errorMask);
            }
            if (item.GlobalVariable_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.GlobalVariable) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.GlobalVariable),
                    item: item.GlobalVariable_Property?.FormKey,
                    fieldIndex: (int)Cell_FieldIndex.GlobalVariable,
                    errorMask: errorMask);
            }
            if (item.PathGrid_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.PathGrid) ?? true))
            {
                var loquiItem = item.PathGrid;
                ((PathGridXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.PathGrid),
                    fieldIndex: (int)Cell_FieldIndex.PathGrid,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.PathGrid));
            }
            if (item.Landscape_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Landscape) ?? true))
            {
                var loquiItem = item.Landscape;
                ((LandscapeXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Landscape),
                    fieldIndex: (int)Cell_FieldIndex.Landscape,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Landscape));
            }
            if ((translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Timestamp) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Timestamp),
                    item: item.Timestamp,
                    fieldIndex: (int)Cell_FieldIndex.Timestamp,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Cell_FieldIndex.PersistentTimestamp) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PersistentTimestamp),
                    item: item.PersistentTimestamp,
                    fieldIndex: (int)Cell_FieldIndex.PersistentTimestamp,
                    errorMask: errorMask);
            }
            if (item.Persistent.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Persistent) ?? true))
            {
                ListXmlTranslation<IPlacedGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Persistent),
                    item: item.Persistent,
                    fieldIndex: (int)Cell_FieldIndex.Persistent,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Persistent),
                    transl: (XElement subNode, IPlacedGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((IXmlWriteTranslator)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Cell_FieldIndex.TemporaryTimestamp) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TemporaryTimestamp),
                    item: item.TemporaryTimestamp,
                    fieldIndex: (int)Cell_FieldIndex.TemporaryTimestamp,
                    errorMask: errorMask);
            }
            if (item.Temporary.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Temporary) ?? true))
            {
                ListXmlTranslation<IPlacedGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Temporary),
                    item: item.Temporary,
                    fieldIndex: (int)Cell_FieldIndex.Temporary,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Temporary),
                    transl: (XElement subNode, IPlacedGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((IXmlWriteTranslator)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistantTimestamp) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VisibleWhenDistantTimestamp),
                    item: item.VisibleWhenDistantTimestamp,
                    fieldIndex: (int)Cell_FieldIndex.VisibleWhenDistantTimestamp,
                    errorMask: errorMask);
            }
            if (item.VisibleWhenDistant.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistant) ?? true))
            {
                ListXmlTranslation<IPlacedGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.VisibleWhenDistant),
                    item: item.VisibleWhenDistant,
                    fieldIndex: (int)Cell_FieldIndex.VisibleWhenDistant,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.VisibleWhenDistant),
                    transl: (XElement subNode, IPlacedGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((IXmlWriteTranslator)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            ICellGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Cell");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Cell");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ICellGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IPlaceGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ICellGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ICellGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ICellGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class CellXmlCreateTranslation : PlaceXmlCreateTranslation
    {
        public new readonly static CellXmlCreateTranslation Instance = new CellXmlCreateTranslation();

        public static void FillPublicXml(
            ICellInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CellXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICellInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Flags);
                        if (EnumXmlTranslation<Cell.Flag>.Instance.Parse(
                            node: node,
                            item: out Cell.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Cell.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Grid":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Grid);
                        if (P2IntXmlTranslation.Instance.Parse(
                            node: node,
                            item: out P2Int GridParse,
                            errorMask: errorMask))
                        {
                            item.Grid = GridParse;
                        }
                        else
                        {
                            item.Grid = default(P2Int);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Lighting":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Lighting);
                        if (LoquiXmlTranslation<CellLighting>.Instance.Parse(
                            node: node,
                            item: out CellLighting LightingParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Lighting)))
                        {
                            item.Lighting = LightingParse;
                        }
                        else
                        {
                            item.Lighting = default(CellLighting);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Regions":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Regions);
                        if (ListXmlTranslation<IFormIDLink<Region>>.Instance.Parse(
                            node: node,
                            enumer: out var RegionsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Regions.SetTo(RegionsItem);
                        }
                        else
                        {
                            item.Regions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MusicType":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.MusicType);
                        if (EnumXmlTranslation<MusicType>.Instance.Parse(
                            node: node,
                            item: out MusicType MusicTypeParse,
                            errorMask: errorMask))
                        {
                            item.MusicType = MusicTypeParse;
                        }
                        else
                        {
                            item.MusicType = default(MusicType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WaterHeight":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.WaterHeight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single WaterHeightParse,
                            errorMask: errorMask))
                        {
                            item.WaterHeight = WaterHeightParse;
                        }
                        else
                        {
                            item.WaterHeight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Climate":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Climate_Property,
                        fieldIndex: (int)Cell_FieldIndex.Climate,
                        errorMask: errorMask);
                    break;
                case "Water":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Water_Property,
                        fieldIndex: (int)Cell_FieldIndex.Water,
                        errorMask: errorMask);
                    break;
                case "Owner":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Owner_Property,
                        fieldIndex: (int)Cell_FieldIndex.Owner,
                        errorMask: errorMask);
                    break;
                case "FactionRank":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.FactionRank);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 FactionRankParse,
                            errorMask: errorMask))
                        {
                            item.FactionRank = FactionRankParse;
                        }
                        else
                        {
                            item.FactionRank = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GlobalVariable":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.GlobalVariable_Property,
                        fieldIndex: (int)Cell_FieldIndex.GlobalVariable,
                        errorMask: errorMask);
                    break;
                case "PathGrid":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.PathGrid);
                        if (LoquiXmlTranslation<PathGrid>.Instance.Parse(
                            node: node,
                            item: out PathGrid PathGridParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.PathGrid)))
                        {
                            item.PathGrid = PathGridParse;
                        }
                        else
                        {
                            item.PathGrid = default(PathGrid);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Landscape":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Landscape);
                        if (LoquiXmlTranslation<Landscape>.Instance.Parse(
                            node: node,
                            item: out Landscape LandscapeParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Landscape)))
                        {
                            item.Landscape = LandscapeParse;
                        }
                        else
                        {
                            item.Landscape = default(Landscape);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Timestamp":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Timestamp);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] TimestampParse,
                            errorMask: errorMask))
                        {
                            item.Timestamp = TimestampParse;
                        }
                        else
                        {
                            item.Timestamp = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PersistentTimestamp":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.PersistentTimestamp);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] PersistentTimestampParse,
                            errorMask: errorMask))
                        {
                            item.PersistentTimestamp = PersistentTimestampParse;
                        }
                        else
                        {
                            item.PersistentTimestamp = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Persistent":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Persistent);
                        if (ListXmlTranslation<IPlaced>.Instance.Parse(
                            node: node,
                            enumer: out var PersistentItem,
                            transl: LoquiXmlTranslation<IPlaced>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Persistent.SetTo(PersistentItem);
                        }
                        else
                        {
                            item.Persistent.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TemporaryTimestamp":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.TemporaryTimestamp);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] TemporaryTimestampParse,
                            errorMask: errorMask))
                        {
                            item.TemporaryTimestamp = TemporaryTimestampParse;
                        }
                        else
                        {
                            item.TemporaryTimestamp = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Temporary":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Temporary);
                        if (ListXmlTranslation<IPlaced>.Instance.Parse(
                            node: node,
                            enumer: out var TemporaryItem,
                            transl: LoquiXmlTranslation<IPlaced>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Temporary.SetTo(TemporaryItem);
                        }
                        else
                        {
                            item.Temporary.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VisibleWhenDistantTimestamp":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.VisibleWhenDistantTimestamp);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] VisibleWhenDistantTimestampParse,
                            errorMask: errorMask))
                        {
                            item.VisibleWhenDistantTimestamp = VisibleWhenDistantTimestampParse;
                        }
                        else
                        {
                            item.VisibleWhenDistantTimestamp = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VisibleWhenDistant":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.VisibleWhenDistant);
                        if (ListXmlTranslation<IPlaced>.Instance.Parse(
                            node: node,
                            enumer: out var VisibleWhenDistantItem,
                            transl: LoquiXmlTranslation<IPlaced>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.VisibleWhenDistant.SetTo(VisibleWhenDistantItem);
                        }
                        else
                        {
                            item.VisibleWhenDistant.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    PlaceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class CellXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ICellGetter item,
            XElement node,
            out Cell_ErrorMask errorMask,
            bool doMasks = true,
            Cell_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((CellXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ICellGetter item,
            string path,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICellGetter item,
            Stream stream,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class Cell_Mask<T> : Place_Mask<T>, IMask<T>, IEquatable<Cell_Mask<T>>
    {
        #region Ctors
        public Cell_Mask()
        {
        }

        public Cell_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Flags = initialValue;
            this.Grid = initialValue;
            this.Lighting = new MaskItem<T, CellLighting_Mask<T>>(initialValue, new CellLighting_Mask<T>(initialValue));
            this.Regions = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.MusicType = initialValue;
            this.WaterHeight = initialValue;
            this.Climate = initialValue;
            this.Water = initialValue;
            this.Owner = initialValue;
            this.FactionRank = initialValue;
            this.GlobalVariable = initialValue;
            this.PathGrid = new MaskItem<T, PathGrid_Mask<T>>(initialValue, new PathGrid_Mask<T>(initialValue));
            this.Landscape = new MaskItem<T, Landscape_Mask<T>>(initialValue, new Landscape_Mask<T>(initialValue));
            this.Timestamp = initialValue;
            this.PersistentTimestamp = initialValue;
            this.Persistent = new MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>>>>(initialValue, null);
            this.TemporaryTimestamp = initialValue;
            this.Temporary = new MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>>>>(initialValue, null);
            this.VisibleWhenDistantTimestamp = initialValue;
            this.VisibleWhenDistant = new MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Name;
        public T Flags;
        public T Grid;
        public MaskItem<T, CellLighting_Mask<T>> Lighting { get; set; }
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Regions;
        public T MusicType;
        public T WaterHeight;
        public T Climate;
        public T Water;
        public T Owner;
        public T FactionRank;
        public T GlobalVariable;
        public MaskItem<T, PathGrid_Mask<T>> PathGrid { get; set; }
        public MaskItem<T, Landscape_Mask<T>> Landscape { get; set; }
        public T Timestamp;
        public T PersistentTimestamp;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>>>> Persistent;
        public T TemporaryTimestamp;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>>>> Temporary;
        public T VisibleWhenDistantTimestamp;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>>>> VisibleWhenDistant;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Cell_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Cell_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Grid, rhs.Grid)) return false;
            if (!object.Equals(this.Lighting, rhs.Lighting)) return false;
            if (!object.Equals(this.Regions, rhs.Regions)) return false;
            if (!object.Equals(this.MusicType, rhs.MusicType)) return false;
            if (!object.Equals(this.WaterHeight, rhs.WaterHeight)) return false;
            if (!object.Equals(this.Climate, rhs.Climate)) return false;
            if (!object.Equals(this.Water, rhs.Water)) return false;
            if (!object.Equals(this.Owner, rhs.Owner)) return false;
            if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
            if (!object.Equals(this.GlobalVariable, rhs.GlobalVariable)) return false;
            if (!object.Equals(this.PathGrid, rhs.PathGrid)) return false;
            if (!object.Equals(this.Landscape, rhs.Landscape)) return false;
            if (!object.Equals(this.Timestamp, rhs.Timestamp)) return false;
            if (!object.Equals(this.PersistentTimestamp, rhs.PersistentTimestamp)) return false;
            if (!object.Equals(this.Persistent, rhs.Persistent)) return false;
            if (!object.Equals(this.TemporaryTimestamp, rhs.TemporaryTimestamp)) return false;
            if (!object.Equals(this.Temporary, rhs.Temporary)) return false;
            if (!object.Equals(this.VisibleWhenDistantTimestamp, rhs.VisibleWhenDistantTimestamp)) return false;
            if (!object.Equals(this.VisibleWhenDistant, rhs.VisibleWhenDistant)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Grid?.GetHashCode());
            ret = ret.CombineHashCode(this.Lighting?.GetHashCode());
            ret = ret.CombineHashCode(this.Regions?.GetHashCode());
            ret = ret.CombineHashCode(this.MusicType?.GetHashCode());
            ret = ret.CombineHashCode(this.WaterHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.Climate?.GetHashCode());
            ret = ret.CombineHashCode(this.Water?.GetHashCode());
            ret = ret.CombineHashCode(this.Owner?.GetHashCode());
            ret = ret.CombineHashCode(this.FactionRank?.GetHashCode());
            ret = ret.CombineHashCode(this.GlobalVariable?.GetHashCode());
            ret = ret.CombineHashCode(this.PathGrid?.GetHashCode());
            ret = ret.CombineHashCode(this.Landscape?.GetHashCode());
            ret = ret.CombineHashCode(this.Timestamp?.GetHashCode());
            ret = ret.CombineHashCode(this.PersistentTimestamp?.GetHashCode());
            ret = ret.CombineHashCode(this.Persistent?.GetHashCode());
            ret = ret.CombineHashCode(this.TemporaryTimestamp?.GetHashCode());
            ret = ret.CombineHashCode(this.Temporary?.GetHashCode());
            ret = ret.CombineHashCode(this.VisibleWhenDistantTimestamp?.GetHashCode());
            ret = ret.CombineHashCode(this.VisibleWhenDistant?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Grid)) return false;
            if (Lighting != null)
            {
                if (!eval(this.Lighting.Overall)) return false;
                if (this.Lighting.Specific != null && !this.Lighting.Specific.AllEqual(eval)) return false;
            }
            if (this.Regions != null)
            {
                if (!eval(this.Regions.Overall)) return false;
                if (this.Regions.Specific != null)
                {
                    foreach (var item in this.Regions.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (!eval(this.MusicType)) return false;
            if (!eval(this.WaterHeight)) return false;
            if (!eval(this.Climate)) return false;
            if (!eval(this.Water)) return false;
            if (!eval(this.Owner)) return false;
            if (!eval(this.FactionRank)) return false;
            if (!eval(this.GlobalVariable)) return false;
            if (PathGrid != null)
            {
                if (!eval(this.PathGrid.Overall)) return false;
                if (this.PathGrid.Specific != null && !this.PathGrid.Specific.AllEqual(eval)) return false;
            }
            if (Landscape != null)
            {
                if (!eval(this.Landscape.Overall)) return false;
                if (this.Landscape.Specific != null && !this.Landscape.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Timestamp)) return false;
            if (!eval(this.PersistentTimestamp)) return false;
            if (this.Persistent != null)
            {
                if (!eval(this.Persistent.Overall)) return false;
                if (this.Persistent.Specific != null)
                {
                    foreach (var item in this.Persistent.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.TemporaryTimestamp)) return false;
            if (this.Temporary != null)
            {
                if (!eval(this.Temporary.Overall)) return false;
                if (this.Temporary.Specific != null)
                {
                    foreach (var item in this.Temporary.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.VisibleWhenDistantTimestamp)) return false;
            if (this.VisibleWhenDistant != null)
            {
                if (!eval(this.VisibleWhenDistant.Overall)) return false;
                if (this.VisibleWhenDistant.Specific != null)
                {
                    foreach (var item in this.VisibleWhenDistant.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Cell_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Cell_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Cell_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            obj.Flags = eval(this.Flags);
            obj.Grid = eval(this.Grid);
            if (this.Lighting != null)
            {
                obj.Lighting = new MaskItem<R, CellLighting_Mask<R>>();
                obj.Lighting.Overall = eval(this.Lighting.Overall);
                if (this.Lighting.Specific != null)
                {
                    obj.Lighting.Specific = this.Lighting.Specific.Translate(eval);
                }
            }
            if (Regions != null)
            {
                obj.Regions = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Regions.Overall = eval(this.Regions.Overall);
                if (Regions.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Regions.Specific = l;
                    foreach (var item in Regions.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            obj.MusicType = eval(this.MusicType);
            obj.WaterHeight = eval(this.WaterHeight);
            obj.Climate = eval(this.Climate);
            obj.Water = eval(this.Water);
            obj.Owner = eval(this.Owner);
            obj.FactionRank = eval(this.FactionRank);
            obj.GlobalVariable = eval(this.GlobalVariable);
            if (this.PathGrid != null)
            {
                obj.PathGrid = new MaskItem<R, PathGrid_Mask<R>>();
                obj.PathGrid.Overall = eval(this.PathGrid.Overall);
                if (this.PathGrid.Specific != null)
                {
                    obj.PathGrid.Specific = this.PathGrid.Specific.Translate(eval);
                }
            }
            if (this.Landscape != null)
            {
                obj.Landscape = new MaskItem<R, Landscape_Mask<R>>();
                obj.Landscape.Overall = eval(this.Landscape.Overall);
                if (this.Landscape.Specific != null)
                {
                    obj.Landscape.Specific = this.Landscape.Specific.Translate(eval);
                }
            }
            obj.Timestamp = eval(this.Timestamp);
            obj.PersistentTimestamp = eval(this.PersistentTimestamp);
            if (Persistent != null)
            {
                obj.Persistent = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>>>>();
                obj.Persistent.Overall = eval(this.Persistent.Overall);
                if (Persistent.Specific != null)
                {
                    List<MaskItemIndexed<R, IMask<R>>> l = new List<MaskItemIndexed<R, IMask<R>>>();
                    obj.Persistent.Specific = l;
                    foreach (var item in Persistent.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, IMask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, IMask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            throw new NotImplementedException();
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.TemporaryTimestamp = eval(this.TemporaryTimestamp);
            if (Temporary != null)
            {
                obj.Temporary = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>>>>();
                obj.Temporary.Overall = eval(this.Temporary.Overall);
                if (Temporary.Specific != null)
                {
                    List<MaskItemIndexed<R, IMask<R>>> l = new List<MaskItemIndexed<R, IMask<R>>>();
                    obj.Temporary.Specific = l;
                    foreach (var item in Temporary.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, IMask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, IMask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            throw new NotImplementedException();
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.VisibleWhenDistantTimestamp = eval(this.VisibleWhenDistantTimestamp);
            if (VisibleWhenDistant != null)
            {
                obj.VisibleWhenDistant = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>>>>();
                obj.VisibleWhenDistant.Overall = eval(this.VisibleWhenDistant.Overall);
                if (VisibleWhenDistant.Specific != null)
                {
                    List<MaskItemIndexed<R, IMask<R>>> l = new List<MaskItemIndexed<R, IMask<R>>>();
                    obj.VisibleWhenDistant.Specific = l;
                    foreach (var item in VisibleWhenDistant.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, IMask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, IMask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            throw new NotImplementedException();
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Regions.Specific = null;
            this.Persistent.Specific = null;
            this.Temporary.Specific = null;
            this.VisibleWhenDistant.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Cell_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Cell_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Cell_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Grid ?? true)
                {
                    fg.AppendLine($"Grid => {Grid}");
                }
                if (printMask?.Lighting?.Overall ?? true)
                {
                    Lighting?.ToString(fg);
                }
                if (printMask?.Regions?.Overall ?? true)
                {
                    fg.AppendLine("Regions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Regions.Overall != null)
                        {
                            fg.AppendLine(Regions.Overall.ToString());
                        }
                        if (Regions.Specific != null)
                        {
                            foreach (var subItem in Regions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.MusicType ?? true)
                {
                    fg.AppendLine($"MusicType => {MusicType}");
                }
                if (printMask?.WaterHeight ?? true)
                {
                    fg.AppendLine($"WaterHeight => {WaterHeight}");
                }
                if (printMask?.Climate ?? true)
                {
                    fg.AppendLine($"Climate => {Climate}");
                }
                if (printMask?.Water ?? true)
                {
                    fg.AppendLine($"Water => {Water}");
                }
                if (printMask?.Owner ?? true)
                {
                    fg.AppendLine($"Owner => {Owner}");
                }
                if (printMask?.FactionRank ?? true)
                {
                    fg.AppendLine($"FactionRank => {FactionRank}");
                }
                if (printMask?.GlobalVariable ?? true)
                {
                    fg.AppendLine($"GlobalVariable => {GlobalVariable}");
                }
                if (printMask?.PathGrid?.Overall ?? true)
                {
                    PathGrid?.ToString(fg);
                }
                if (printMask?.Landscape?.Overall ?? true)
                {
                    Landscape?.ToString(fg);
                }
                if (printMask?.Timestamp ?? true)
                {
                    fg.AppendLine($"Timestamp => {Timestamp}");
                }
                if (printMask?.PersistentTimestamp ?? true)
                {
                    fg.AppendLine($"PersistentTimestamp => {PersistentTimestamp}");
                }
                if (printMask?.Persistent?.Overall ?? true)
                {
                    fg.AppendLine("Persistent =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Persistent.Overall != null)
                        {
                            fg.AppendLine(Persistent.Overall.ToString());
                        }
                        if (Persistent.Specific != null)
                        {
                            foreach (var subItem in Persistent.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.TemporaryTimestamp ?? true)
                {
                    fg.AppendLine($"TemporaryTimestamp => {TemporaryTimestamp}");
                }
                if (printMask?.Temporary?.Overall ?? true)
                {
                    fg.AppendLine("Temporary =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Temporary.Overall != null)
                        {
                            fg.AppendLine(Temporary.Overall.ToString());
                        }
                        if (Temporary.Specific != null)
                        {
                            foreach (var subItem in Temporary.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.VisibleWhenDistantTimestamp ?? true)
                {
                    fg.AppendLine($"VisibleWhenDistantTimestamp => {VisibleWhenDistantTimestamp}");
                }
                if (printMask?.VisibleWhenDistant?.Overall ?? true)
                {
                    fg.AppendLine("VisibleWhenDistant =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (VisibleWhenDistant.Overall != null)
                        {
                            fg.AppendLine(VisibleWhenDistant.Overall.ToString());
                        }
                        if (VisibleWhenDistant.Specific != null)
                        {
                            foreach (var subItem in VisibleWhenDistant.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Cell_ErrorMask : Place_ErrorMask, IErrorMask<Cell_ErrorMask>
    {
        #region Members
        public Exception Name;
        public Exception Flags;
        public Exception Grid;
        public MaskItem<Exception, CellLighting_ErrorMask> Lighting;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Regions;
        public Exception MusicType;
        public Exception WaterHeight;
        public Exception Climate;
        public Exception Water;
        public Exception Owner;
        public Exception FactionRank;
        public Exception GlobalVariable;
        public MaskItem<Exception, PathGrid_ErrorMask> PathGrid;
        public MaskItem<Exception, Landscape_ErrorMask> Landscape;
        public Exception Timestamp;
        public Exception PersistentTimestamp;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>> Persistent;
        public Exception TemporaryTimestamp;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>> Temporary;
        public Exception VisibleWhenDistantTimestamp;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>> VisibleWhenDistant;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    return Name;
                case Cell_FieldIndex.Flags:
                    return Flags;
                case Cell_FieldIndex.Grid:
                    return Grid;
                case Cell_FieldIndex.Lighting:
                    return Lighting;
                case Cell_FieldIndex.Regions:
                    return Regions;
                case Cell_FieldIndex.MusicType:
                    return MusicType;
                case Cell_FieldIndex.WaterHeight:
                    return WaterHeight;
                case Cell_FieldIndex.Climate:
                    return Climate;
                case Cell_FieldIndex.Water:
                    return Water;
                case Cell_FieldIndex.Owner:
                    return Owner;
                case Cell_FieldIndex.FactionRank:
                    return FactionRank;
                case Cell_FieldIndex.GlobalVariable:
                    return GlobalVariable;
                case Cell_FieldIndex.PathGrid:
                    return PathGrid;
                case Cell_FieldIndex.Landscape:
                    return Landscape;
                case Cell_FieldIndex.Timestamp:
                    return Timestamp;
                case Cell_FieldIndex.PersistentTimestamp:
                    return PersistentTimestamp;
                case Cell_FieldIndex.Persistent:
                    return Persistent;
                case Cell_FieldIndex.TemporaryTimestamp:
                    return TemporaryTimestamp;
                case Cell_FieldIndex.Temporary:
                    return Temporary;
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                    return VisibleWhenDistantTimestamp;
                case Cell_FieldIndex.VisibleWhenDistant:
                    return VisibleWhenDistant;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Cell_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Cell_FieldIndex.Grid:
                    this.Grid = ex;
                    break;
                case Cell_FieldIndex.Lighting:
                    this.Lighting = new MaskItem<Exception, CellLighting_ErrorMask>(ex, null);
                    break;
                case Cell_FieldIndex.Regions:
                    this.Regions = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case Cell_FieldIndex.MusicType:
                    this.MusicType = ex;
                    break;
                case Cell_FieldIndex.WaterHeight:
                    this.WaterHeight = ex;
                    break;
                case Cell_FieldIndex.Climate:
                    this.Climate = ex;
                    break;
                case Cell_FieldIndex.Water:
                    this.Water = ex;
                    break;
                case Cell_FieldIndex.Owner:
                    this.Owner = ex;
                    break;
                case Cell_FieldIndex.FactionRank:
                    this.FactionRank = ex;
                    break;
                case Cell_FieldIndex.GlobalVariable:
                    this.GlobalVariable = ex;
                    break;
                case Cell_FieldIndex.PathGrid:
                    this.PathGrid = new MaskItem<Exception, PathGrid_ErrorMask>(ex, null);
                    break;
                case Cell_FieldIndex.Landscape:
                    this.Landscape = new MaskItem<Exception, Landscape_ErrorMask>(ex, null);
                    break;
                case Cell_FieldIndex.Timestamp:
                    this.Timestamp = ex;
                    break;
                case Cell_FieldIndex.PersistentTimestamp:
                    this.PersistentTimestamp = ex;
                    break;
                case Cell_FieldIndex.Persistent:
                    this.Persistent = new MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>(ex, null);
                    break;
                case Cell_FieldIndex.TemporaryTimestamp:
                    this.TemporaryTimestamp = ex;
                    break;
                case Cell_FieldIndex.Temporary:
                    this.Temporary = new MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>(ex, null);
                    break;
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                    this.VisibleWhenDistantTimestamp = ex;
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    this.VisibleWhenDistant = new MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Cell_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Cell_FieldIndex.Grid:
                    this.Grid = (Exception)obj;
                    break;
                case Cell_FieldIndex.Lighting:
                    this.Lighting = (MaskItem<Exception, CellLighting_ErrorMask>)obj;
                    break;
                case Cell_FieldIndex.Regions:
                    this.Regions = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case Cell_FieldIndex.MusicType:
                    this.MusicType = (Exception)obj;
                    break;
                case Cell_FieldIndex.WaterHeight:
                    this.WaterHeight = (Exception)obj;
                    break;
                case Cell_FieldIndex.Climate:
                    this.Climate = (Exception)obj;
                    break;
                case Cell_FieldIndex.Water:
                    this.Water = (Exception)obj;
                    break;
                case Cell_FieldIndex.Owner:
                    this.Owner = (Exception)obj;
                    break;
                case Cell_FieldIndex.FactionRank:
                    this.FactionRank = (Exception)obj;
                    break;
                case Cell_FieldIndex.GlobalVariable:
                    this.GlobalVariable = (Exception)obj;
                    break;
                case Cell_FieldIndex.PathGrid:
                    this.PathGrid = (MaskItem<Exception, PathGrid_ErrorMask>)obj;
                    break;
                case Cell_FieldIndex.Landscape:
                    this.Landscape = (MaskItem<Exception, Landscape_ErrorMask>)obj;
                    break;
                case Cell_FieldIndex.Timestamp:
                    this.Timestamp = (Exception)obj;
                    break;
                case Cell_FieldIndex.PersistentTimestamp:
                    this.PersistentTimestamp = (Exception)obj;
                    break;
                case Cell_FieldIndex.Persistent:
                    this.Persistent = (MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>)obj;
                    break;
                case Cell_FieldIndex.TemporaryTimestamp:
                    this.TemporaryTimestamp = (Exception)obj;
                    break;
                case Cell_FieldIndex.Temporary:
                    this.Temporary = (MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>)obj;
                    break;
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                    this.VisibleWhenDistantTimestamp = (Exception)obj;
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    this.VisibleWhenDistant = (MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Flags != null) return true;
            if (Grid != null) return true;
            if (Lighting != null) return true;
            if (Regions != null) return true;
            if (MusicType != null) return true;
            if (WaterHeight != null) return true;
            if (Climate != null) return true;
            if (Water != null) return true;
            if (Owner != null) return true;
            if (FactionRank != null) return true;
            if (GlobalVariable != null) return true;
            if (PathGrid != null) return true;
            if (Landscape != null) return true;
            if (Timestamp != null) return true;
            if (PersistentTimestamp != null) return true;
            if (Persistent != null) return true;
            if (TemporaryTimestamp != null) return true;
            if (Temporary != null) return true;
            if (VisibleWhenDistantTimestamp != null) return true;
            if (VisibleWhenDistant != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Cell_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Grid => {Grid}");
            Lighting?.ToString(fg);
            fg.AppendLine("Regions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Regions.Overall != null)
                {
                    fg.AppendLine(Regions.Overall.ToString());
                }
                if (Regions.Specific != null)
                {
                    foreach (var subItem in Regions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"MusicType => {MusicType}");
            fg.AppendLine($"WaterHeight => {WaterHeight}");
            fg.AppendLine($"Climate => {Climate}");
            fg.AppendLine($"Water => {Water}");
            fg.AppendLine($"Owner => {Owner}");
            fg.AppendLine($"FactionRank => {FactionRank}");
            fg.AppendLine($"GlobalVariable => {GlobalVariable}");
            PathGrid?.ToString(fg);
            Landscape?.ToString(fg);
            fg.AppendLine($"Timestamp => {Timestamp}");
            fg.AppendLine($"PersistentTimestamp => {PersistentTimestamp}");
            fg.AppendLine("Persistent =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Persistent.Overall != null)
                {
                    fg.AppendLine(Persistent.Overall.ToString());
                }
                if (Persistent.Specific != null)
                {
                    foreach (var subItem in Persistent.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"TemporaryTimestamp => {TemporaryTimestamp}");
            fg.AppendLine("Temporary =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Temporary.Overall != null)
                {
                    fg.AppendLine(Temporary.Overall.ToString());
                }
                if (Temporary.Specific != null)
                {
                    foreach (var subItem in Temporary.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"VisibleWhenDistantTimestamp => {VisibleWhenDistantTimestamp}");
            fg.AppendLine("VisibleWhenDistant =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (VisibleWhenDistant.Overall != null)
                {
                    fg.AppendLine(VisibleWhenDistant.Overall.ToString());
                }
                if (VisibleWhenDistant.Specific != null)
                {
                    foreach (var subItem in VisibleWhenDistant.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Cell_ErrorMask Combine(Cell_ErrorMask rhs)
        {
            var ret = new Cell_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Grid = this.Grid.Combine(rhs.Grid);
            ret.Lighting = new MaskItem<Exception, CellLighting_ErrorMask>(this.Lighting.Overall.Combine(rhs.Lighting.Overall), ((IErrorMask<CellLighting_ErrorMask>)this.Lighting.Specific).Combine(rhs.Lighting.Specific));
            ret.Regions = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Regions.Overall.Combine(rhs.Regions.Overall), new List<(int Index, Exception Value)>(this.Regions.Specific.And(rhs.Regions.Specific)));
            ret.MusicType = this.MusicType.Combine(rhs.MusicType);
            ret.WaterHeight = this.WaterHeight.Combine(rhs.WaterHeight);
            ret.Climate = this.Climate.Combine(rhs.Climate);
            ret.Water = this.Water.Combine(rhs.Water);
            ret.Owner = this.Owner.Combine(rhs.Owner);
            ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
            ret.GlobalVariable = this.GlobalVariable.Combine(rhs.GlobalVariable);
            ret.PathGrid = new MaskItem<Exception, PathGrid_ErrorMask>(this.PathGrid.Overall.Combine(rhs.PathGrid.Overall), ((IErrorMask<PathGrid_ErrorMask>)this.PathGrid.Specific).Combine(rhs.PathGrid.Specific));
            ret.Landscape = new MaskItem<Exception, Landscape_ErrorMask>(this.Landscape.Overall.Combine(rhs.Landscape.Overall), ((IErrorMask<Landscape_ErrorMask>)this.Landscape.Specific).Combine(rhs.Landscape.Specific));
            ret.Timestamp = this.Timestamp.Combine(rhs.Timestamp);
            ret.PersistentTimestamp = this.PersistentTimestamp.Combine(rhs.PersistentTimestamp);
            ret.Persistent = new MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>(this.Persistent.Overall.Combine(rhs.Persistent.Overall), new List<MaskItem<Exception, IErrorMask>>(this.Persistent.Specific.And(rhs.Persistent.Specific)));
            ret.TemporaryTimestamp = this.TemporaryTimestamp.Combine(rhs.TemporaryTimestamp);
            ret.Temporary = new MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>(this.Temporary.Overall.Combine(rhs.Temporary.Overall), new List<MaskItem<Exception, IErrorMask>>(this.Temporary.Specific.And(rhs.Temporary.Specific)));
            ret.VisibleWhenDistantTimestamp = this.VisibleWhenDistantTimestamp.Combine(rhs.VisibleWhenDistantTimestamp);
            ret.VisibleWhenDistant = new MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>(this.VisibleWhenDistant.Overall.Combine(rhs.VisibleWhenDistant.Overall), new List<MaskItem<Exception, IErrorMask>>(this.VisibleWhenDistant.Specific.And(rhs.VisibleWhenDistant.Specific)));
            return ret;
        }
        public static Cell_ErrorMask Combine(Cell_ErrorMask lhs, Cell_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Cell_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Cell_ErrorMask();
        }
        #endregion

    }
    public class Cell_TranslationMask : Place_TranslationMask
    {
        #region Members
        public bool Name;
        public bool Flags;
        public bool Grid;
        public MaskItem<bool, CellLighting_TranslationMask> Lighting;
        public bool Regions;
        public bool MusicType;
        public bool WaterHeight;
        public bool Climate;
        public bool Water;
        public bool Owner;
        public bool FactionRank;
        public bool GlobalVariable;
        public MaskItem<bool, PathGrid_TranslationMask> PathGrid;
        public MaskItem<bool, Landscape_TranslationMask> Landscape;
        public bool Timestamp;
        public bool PersistentTimestamp;
        public bool Persistent;
        public bool TemporaryTimestamp;
        public bool Temporary;
        public bool VisibleWhenDistantTimestamp;
        public bool VisibleWhenDistant;
        #endregion

        #region Ctors
        public Cell_TranslationMask()
            : base()
        {
        }

        public Cell_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Flags = defaultOn;
            this.Grid = defaultOn;
            this.Lighting = new MaskItem<bool, CellLighting_TranslationMask>(defaultOn, null);
            this.Regions = defaultOn;
            this.MusicType = defaultOn;
            this.WaterHeight = defaultOn;
            this.Climate = defaultOn;
            this.Water = defaultOn;
            this.Owner = defaultOn;
            this.FactionRank = defaultOn;
            this.GlobalVariable = defaultOn;
            this.PathGrid = new MaskItem<bool, PathGrid_TranslationMask>(defaultOn, null);
            this.Landscape = new MaskItem<bool, Landscape_TranslationMask>(defaultOn, null);
            this.Timestamp = defaultOn;
            this.PersistentTimestamp = defaultOn;
            this.Persistent = defaultOn;
            this.TemporaryTimestamp = defaultOn;
            this.Temporary = defaultOn;
            this.VisibleWhenDistantTimestamp = defaultOn;
            this.VisibleWhenDistant = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Flags, null));
            ret.Add((Grid, null));
            ret.Add((Lighting?.Overall ?? true, Lighting?.Specific?.GetCrystal()));
            ret.Add((Regions, null));
            ret.Add((MusicType, null));
            ret.Add((WaterHeight, null));
            ret.Add((Climate, null));
            ret.Add((Water, null));
            ret.Add((Owner, null));
            ret.Add((FactionRank, null));
            ret.Add((GlobalVariable, null));
            ret.Add((PathGrid?.Overall ?? true, PathGrid?.Specific?.GetCrystal()));
            ret.Add((Landscape?.Overall ?? true, Landscape?.Specific?.GetCrystal()));
            ret.Add((Timestamp, null));
            ret.Add((PersistentTimestamp, null));
            ret.Add((Persistent, null));
            ret.Add((TemporaryTimestamp, null));
            ret.Add((Temporary, null));
            ret.Add((VisibleWhenDistantTimestamp, null));
            ret.Add((VisibleWhenDistant, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CellBinaryWriteTranslation :
        PlaceBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static CellBinaryWriteTranslation Instance = new CellBinaryWriteTranslation();

        static partial void CustomBinaryEndExport(
            MutagenWriter writer,
            ICellGetter obj,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);
        public static void CustomBinaryEndExportInternal(
            MutagenWriter writer,
            ICellGetter obj,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            CustomBinaryEndExport(
                writer: writer,
                obj: obj,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        public static void Write_Embedded(
            ICellGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            ICellGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Flags_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Cell.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.DATA_HEADER),
                    nullable: false);
            }
            if (item.Grid_IsSet)
            {
                Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Grid,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCLC_HEADER),
                    nullable: false);
            }
            if (item.Lighting_IsSet)
            {
                var loquiItem = item.Lighting;
                ((CellLightingBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Regions.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLinkGetter<IRegionGetter>>.Instance.Write(
                    writer: writer,
                    items: item.Regions,
                    recordType: Cell_Registration.XCLR_HEADER,
                    transl: (MutagenWriter subWriter, IFormIDLinkGetter<IRegionGetter> subItem) =>
                    {
                        Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            masterReferences: masterReferences);
                    });
            }
            if (item.MusicType_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<MusicType>.Instance.Write(
                    writer,
                    item.MusicType,
                    length: 1,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCMT_HEADER),
                    nullable: false);
            }
            if (item.WaterHeight_IsSet)
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.WaterHeight,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCLW_HEADER),
                    nullable: false);
            }
            if (item.Climate_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Climate_Property,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCCM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Water_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Water_Property,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCWT_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Owner_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Owner_Property,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.XOWN_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.FactionRank_IsSet)
            {
                Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FactionRank,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.XRNK_HEADER),
                    nullable: false);
            }
            if (item.GlobalVariable_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.GlobalVariable_Property,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.XGLB_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            ICellGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Cell_Registration.CELL_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
            CustomBinaryEndExportInternal(
                writer: writer,
                obj: item,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ICellGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IPlaceGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ICellGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ICellGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ICellGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class CellBinaryCreateTranslation : PlaceBinaryCreateTranslation
    {
        public new readonly static CellBinaryCreateTranslation Instance = new CellBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class CellBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICellGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Cell_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((CellBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CellBinaryWrapper :
        PlaceBinaryWrapper,
        ICellGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Cell_Registration.Instance;
        public new static Cell_Registration Registration => Cell_Registration.Instance;
        protected override object CommonInstance() => CellCommon.Instance;
        protected override object CommonSetterTranslationInstance() => CellSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICellGetter)rhs, include);

        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        protected override object XmlWriteTranslator => CellXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((CellXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => CellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((CellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Name
        private int? _NameLocation;
        public bool Name_IsSet => _NameLocation.HasValue;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public bool Flags_IsSet => _FlagsLocation.HasValue;
        public Cell.Flag Flags => (Cell.Flag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation.Value, _package.Meta)[0];
        #endregion
        #region Grid
        private int? _GridLocation;
        public bool Grid_IsSet => _GridLocation.HasValue;
        public P2Int Grid => _GridLocation.HasValue ? P2IntBinaryTranslation.Read(HeaderTranslation.ExtractSubrecordSpan(_data, _GridLocation.Value, _package.Meta)) : default;
        #endregion
        #region Lighting
        private RangeInt32? _LightingLocation;
        private bool _Lighting_IsSet => _LightingLocation.HasValue;
        public ICellLightingGetter Lighting => _Lighting_IsSet ? CellLightingBinaryWrapper.CellLightingFactory(new BinaryMemoryReadStream(_data.Slice(_LightingLocation.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool Lighting_IsSet => _LightingLocation.HasValue;
        #endregion
        public IReadOnlySetList<IFormIDLinkGetter<IRegionGetter>> Regions { get; private set; } = EmptySetList<IFormIDLinkGetter<IRegionGetter>>.Instance;
        #region MusicType
        private int? _MusicTypeLocation;
        public bool MusicType_IsSet => _MusicTypeLocation.HasValue;
        public MusicType MusicType => (MusicType)HeaderTranslation.ExtractSubrecordSpan(_data, _MusicTypeLocation.Value, _package.Meta)[0];
        #endregion
        #region WaterHeight
        private int? _WaterHeightLocation;
        public bool WaterHeight_IsSet => _WaterHeightLocation.HasValue;
        public Single WaterHeight => _WaterHeightLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordSpan(_data, _WaterHeightLocation.Value, _package.Meta)) : default;
        #endregion
        #region Climate
        private int? _ClimateLocation;
        public bool Climate_IsSet => _ClimateLocation.HasValue;
        public IFormIDSetLinkGetter<IClimateGetter> Climate_Property => _ClimateLocation.HasValue ? new FormIDSetLink<IClimateGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ClimateLocation.Value, _package.Meta)))) : FormIDSetLink<IClimateGetter>.Empty;
        public IClimateGetter Climate => default;
        #endregion
        #region Water
        private int? _WaterLocation;
        public bool Water_IsSet => _WaterLocation.HasValue;
        public IFormIDSetLinkGetter<IWaterGetter> Water_Property => _WaterLocation.HasValue ? new FormIDSetLink<IWaterGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _WaterLocation.Value, _package.Meta)))) : FormIDSetLink<IWaterGetter>.Empty;
        public IWaterGetter Water => default;
        #endregion
        #region Owner
        private int? _OwnerLocation;
        public bool Owner_IsSet => _OwnerLocation.HasValue;
        public IFormIDSetLinkGetter<IFactionGetter> Owner_Property => _OwnerLocation.HasValue ? new FormIDSetLink<IFactionGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _OwnerLocation.Value, _package.Meta)))) : FormIDSetLink<IFactionGetter>.Empty;
        public IFactionGetter Owner => default;
        #endregion
        #region FactionRank
        private int? _FactionRankLocation;
        public bool FactionRank_IsSet => _FactionRankLocation.HasValue;
        public Int32 FactionRank => _FactionRankLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _FactionRankLocation.Value, _package.Meta)) : default;
        #endregion
        #region GlobalVariable
        private int? _GlobalVariableLocation;
        public bool GlobalVariable_IsSet => _GlobalVariableLocation.HasValue;
        public IFormIDSetLinkGetter<IGlobalGetter> GlobalVariable_Property => _GlobalVariableLocation.HasValue ? new FormIDSetLink<IGlobalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _GlobalVariableLocation.Value, _package.Meta)))) : FormIDSetLink<IGlobalGetter>.Empty;
        public IGlobalGetter GlobalVariable => default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);
        partial void CustomEnd(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected CellBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static CellBinaryWrapper CellFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new CellBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            ret.CustomEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Name);
                }
                case 0x41544144: // DATA
                {
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Flags);
                }
                case 0x434C4358: // XCLC
                {
                    _GridLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Grid);
                }
                case 0x4C4C4358: // XCLL
                {
                    _LightingLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Lighting);
                }
                case 0x524C4358: // XCLR
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Regions = BinaryWrapperSetList<IFormIDLinkGetter<IRegionGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormIDLink<IRegionGetter>(FormKey.Factory(p.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Regions);
                }
                case 0x544D4358: // XCMT
                {
                    _MusicTypeLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.MusicType);
                }
                case 0x574C4358: // XCLW
                {
                    _WaterHeightLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.WaterHeight);
                }
                case 0x4D434358: // XCCM
                {
                    _ClimateLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Climate);
                }
                case 0x54574358: // XCWT
                {
                    _WaterLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Water);
                }
                case 0x4E574F58: // XOWN
                {
                    _OwnerLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Owner);
                }
                case 0x4B4E5258: // XRNK
                {
                    _FactionRankLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.FactionRank);
                }
                case 0x424C4758: // XGLB
                {
                    _GlobalVariableLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.GlobalVariable);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

