/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Cell :
        Place,
        ICellInternal,
        ILoquiObjectSetter<Cell>,
        INamed,
        IPlace,
        IEquatable<Cell>,
        IEqualsMask
    {
        #region Ctor
        protected Cell()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICellGetter.Name => this.Name;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Cell.Flag? _Flags;
        public Cell.Flag? Flags
        {
            get => this._Flags;
            set => this._Flags = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Cell.Flag? ICellGetter.Flags => this.Flags;
        #endregion
        #region Grid
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private P2Int? _Grid;
        public P2Int? Grid
        {
            get => this._Grid;
            set => this._Grid = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P2Int? ICellGetter.Grid => this.Grid;
        #endregion
        #region Lighting
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CellLighting? _Lighting;
        public CellLighting? Lighting
        {
            get => _Lighting;
            set => _Lighting = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICellLightingGetter? ICellGetter.Lighting => this.Lighting;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IFormIDLink<Region>> _Regions = new SetList<IFormIDLink<Region>>();
        public ISetList<IFormIDLink<Region>> Regions => _Regions;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormIDLink<Region>> ICell.Regions => _Regions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormIDLinkGetter<IRegionGetter>> ICellGetter.Regions => _Regions;
        #endregion

        #endregion
        #region MusicType
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MusicType? _MusicType;
        public MusicType? MusicType
        {
            get => this._MusicType;
            set => this._MusicType = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        MusicType? ICellGetter.MusicType => this.MusicType;
        #endregion
        #region WaterHeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single? _WaterHeight;
        public Single? WaterHeight
        {
            get => this._WaterHeight;
            set => this._WaterHeight = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICellGetter.WaterHeight => this.WaterHeight;
        #endregion
        #region Climate
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDSetLink<Climate> _Climate = new FormIDSetLink<Climate>();
        public IFormIDSetLink<Climate> Climate => this._Climate;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLinkGetter<IClimateGetter> ICellGetter.Climate => this.Climate;
        #endregion
        #region Water
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDSetLink<Water> _Water = new FormIDSetLink<Water>();
        public IFormIDSetLink<Water> Water => this._Water;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLinkGetter<IWaterGetter> ICellGetter.Water => this.Water;
        #endregion
        #region Owner
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDSetLink<Faction> _Owner = new FormIDSetLink<Faction>();
        public IFormIDSetLink<Faction> Owner => this._Owner;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLinkGetter<IFactionGetter> ICellGetter.Owner => this.Owner;
        #endregion
        #region FactionRank
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int32? _FactionRank;
        public Int32? FactionRank
        {
            get => this._FactionRank;
            set => this._FactionRank = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ICellGetter.FactionRank => this.FactionRank;
        #endregion
        #region GlobalVariable
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDSetLink<Global> _GlobalVariable = new FormIDSetLink<Global>();
        public IFormIDSetLink<Global> GlobalVariable => this._GlobalVariable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLinkGetter<IGlobalGetter> ICellGetter.GlobalVariable => this.GlobalVariable;
        #endregion
        #region PathGrid
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PathGrid? _PathGrid;
        public PathGrid? PathGrid
        {
            get => _PathGrid;
            set => _PathGrid = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPathGridGetter? ICellGetter.PathGrid => this.PathGrid;
        #endregion
        #region Landscape
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Landscape? _Landscape;
        public Landscape? Landscape
        {
            get => _Landscape;
            set => _Landscape = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILandscapeGetter? ICellGetter.Landscape => this.Landscape;
        #endregion
        #region Timestamp
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _Timestamp = new byte[4];
        public Byte[] Timestamp
        {
            get => _Timestamp;
            set => this._Timestamp = value ?? new byte[4];
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> ICellGetter.Timestamp => this.Timestamp;
        #endregion
        #region PersistentTimestamp
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _PersistentTimestamp = new byte[4];
        public Byte[] PersistentTimestamp
        {
            get => _PersistentTimestamp;
            set => this._PersistentTimestamp = value ?? new byte[4];
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> ICellGetter.PersistentTimestamp => this.PersistentTimestamp;
        #endregion
        #region Persistent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IPlaced> _Persistent = new SetList<IPlaced>();
        public ISetList<IPlaced> Persistent => _Persistent;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IPlaced> ICell.Persistent => _Persistent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IPlacedGetter> ICellGetter.Persistent => _Persistent;
        #endregion

        #endregion
        #region TemporaryTimestamp
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _TemporaryTimestamp = new byte[4];
        public Byte[] TemporaryTimestamp
        {
            get => _TemporaryTimestamp;
            set => this._TemporaryTimestamp = value ?? new byte[4];
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> ICellGetter.TemporaryTimestamp => this.TemporaryTimestamp;
        #endregion
        #region Temporary
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IPlaced> _Temporary = new SetList<IPlaced>();
        public ISetList<IPlaced> Temporary => _Temporary;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IPlaced> ICell.Temporary => _Temporary;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IPlacedGetter> ICellGetter.Temporary => _Temporary;
        #endregion

        #endregion
        #region VisibleWhenDistantTimestamp
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _VisibleWhenDistantTimestamp = new byte[4];
        public Byte[] VisibleWhenDistantTimestamp
        {
            get => _VisibleWhenDistantTimestamp;
            set => this._VisibleWhenDistantTimestamp = value ?? new byte[4];
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> ICellGetter.VisibleWhenDistantTimestamp => this.VisibleWhenDistantTimestamp;
        #endregion
        #region VisibleWhenDistant
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IPlaced> _VisibleWhenDistant = new SetList<IPlaced>();
        public ISetList<IPlaced> VisibleWhenDistant => _VisibleWhenDistant;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IPlaced> ICell.VisibleWhenDistant => _VisibleWhenDistant;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IPlacedGetter> ICellGetter.VisibleWhenDistant => _VisibleWhenDistant;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CellMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ICellGetter rhs)) return false;
            return ((CellCommon)((ICellGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Cell obj)
        {
            return ((CellCommon)((ICellGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CellCommon)((ICellGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => CellXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CellXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Cell CreateFromXml(
            XElement node,
            Cell.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Cell CreateFromXml(
            XElement node,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Cell.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Cell CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Cell();
            ((CellSetterCommon)((ICellGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Cell CreateFromXml(
            string path,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Cell CreateFromXml(
            string path,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Cell CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Cell CreateFromXml(
            Stream stream,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Cell CreateFromXml(
            Stream stream,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Cell CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            Place.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Flags = initialValue;
                this.Grid = initialValue;
                this.Lighting = new MaskItem<T, CellLighting.Mask<T>?>(initialValue, new CellLighting.Mask<T>(initialValue));
                this.Regions = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, Enumerable.Empty<(int Index, T Value)>());
                this.MusicType = initialValue;
                this.WaterHeight = initialValue;
                this.Climate = initialValue;
                this.Water = initialValue;
                this.Owner = initialValue;
                this.FactionRank = initialValue;
                this.GlobalVariable = initialValue;
                this.PathGrid = new MaskItem<T, PathGrid.Mask<T>?>(initialValue, new PathGrid.Mask<T>(initialValue));
                this.Landscape = new MaskItem<T, Landscape.Mask<T>?>(initialValue, new Landscape.Mask<T>(initialValue));
                this.Timestamp = initialValue;
                this.PersistentTimestamp = initialValue;
                this.Persistent = new MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>?>>>(initialValue, Enumerable.Empty<MaskItemIndexed<T, IMask<T>?>>());
                this.TemporaryTimestamp = initialValue;
                this.Temporary = new MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>?>>>(initialValue, Enumerable.Empty<MaskItemIndexed<T, IMask<T>?>>());
                this.VisibleWhenDistantTimestamp = initialValue;
                this.VisibleWhenDistant = new MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>?>>>(initialValue, Enumerable.Empty<MaskItemIndexed<T, IMask<T>?>>());
            }

            public Mask(
                T MajorRecordFlagsRaw,
                T FormKey,
                T Version,
                T EditorID,
                T OblivionMajorRecordFlags,
                T Name,
                T Flags,
                T Grid,
                T Lighting,
                T Regions,
                T MusicType,
                T WaterHeight,
                T Climate,
                T Water,
                T Owner,
                T FactionRank,
                T GlobalVariable,
                T PathGrid,
                T Landscape,
                T Timestamp,
                T PersistentTimestamp,
                T Persistent,
                T TemporaryTimestamp,
                T Temporary,
                T VisibleWhenDistantTimestamp,
                T VisibleWhenDistant)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Flags = Flags;
                this.Grid = Grid;
                this.Lighting = new MaskItem<T, CellLighting.Mask<T>?>(Lighting, new CellLighting.Mask<T>(Lighting));
                this.Regions = new MaskItem<T, IEnumerable<(int Index, T Value)>>(Regions, Enumerable.Empty<(int Index, T Value)>());
                this.MusicType = MusicType;
                this.WaterHeight = WaterHeight;
                this.Climate = Climate;
                this.Water = Water;
                this.Owner = Owner;
                this.FactionRank = FactionRank;
                this.GlobalVariable = GlobalVariable;
                this.PathGrid = new MaskItem<T, PathGrid.Mask<T>?>(PathGrid, new PathGrid.Mask<T>(PathGrid));
                this.Landscape = new MaskItem<T, Landscape.Mask<T>?>(Landscape, new Landscape.Mask<T>(Landscape));
                this.Timestamp = Timestamp;
                this.PersistentTimestamp = PersistentTimestamp;
                this.Persistent = new MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>?>>>(Persistent, Enumerable.Empty<MaskItemIndexed<T, IMask<T>?>>());
                this.TemporaryTimestamp = TemporaryTimestamp;
                this.Temporary = new MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>?>>>(Temporary, Enumerable.Empty<MaskItemIndexed<T, IMask<T>?>>());
                this.VisibleWhenDistantTimestamp = VisibleWhenDistantTimestamp;
                this.VisibleWhenDistant = new MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>?>>>(VisibleWhenDistant, Enumerable.Empty<MaskItemIndexed<T, IMask<T>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T Name;
            public T Flags;
            public T Grid;
            public MaskItem<T, CellLighting.Mask<T>?>? Lighting { get; set; }
            public MaskItem<T, IEnumerable<(int Index, T Value)>>? Regions;
            public T MusicType;
            public T WaterHeight;
            public T Climate;
            public T Water;
            public T Owner;
            public T FactionRank;
            public T GlobalVariable;
            public MaskItem<T, PathGrid.Mask<T>?>? PathGrid { get; set; }
            public MaskItem<T, Landscape.Mask<T>?>? Landscape { get; set; }
            public T Timestamp;
            public T PersistentTimestamp;
            public MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>?>>>? Persistent;
            public T TemporaryTimestamp;
            public MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>?>>>? Temporary;
            public T VisibleWhenDistantTimestamp;
            public MaskItem<T, IEnumerable<MaskItemIndexed<T, IMask<T>?>>>? VisibleWhenDistant;
            #endregion

            #region Equals
            public override bool Equals(object obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Grid, rhs.Grid)) return false;
                if (!object.Equals(this.Lighting, rhs.Lighting)) return false;
                if (!object.Equals(this.Regions, rhs.Regions)) return false;
                if (!object.Equals(this.MusicType, rhs.MusicType)) return false;
                if (!object.Equals(this.WaterHeight, rhs.WaterHeight)) return false;
                if (!object.Equals(this.Climate, rhs.Climate)) return false;
                if (!object.Equals(this.Water, rhs.Water)) return false;
                if (!object.Equals(this.Owner, rhs.Owner)) return false;
                if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
                if (!object.Equals(this.GlobalVariable, rhs.GlobalVariable)) return false;
                if (!object.Equals(this.PathGrid, rhs.PathGrid)) return false;
                if (!object.Equals(this.Landscape, rhs.Landscape)) return false;
                if (!object.Equals(this.Timestamp, rhs.Timestamp)) return false;
                if (!object.Equals(this.PersistentTimestamp, rhs.PersistentTimestamp)) return false;
                if (!object.Equals(this.Persistent, rhs.Persistent)) return false;
                if (!object.Equals(this.TemporaryTimestamp, rhs.TemporaryTimestamp)) return false;
                if (!object.Equals(this.Temporary, rhs.Temporary)) return false;
                if (!object.Equals(this.VisibleWhenDistantTimestamp, rhs.VisibleWhenDistantTimestamp)) return false;
                if (!object.Equals(this.VisibleWhenDistant, rhs.VisibleWhenDistant)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Name?.GetHashCode());
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.Grid?.GetHashCode());
                ret = ret.CombineHashCode(this.Lighting?.GetHashCode());
                ret = ret.CombineHashCode(this.Regions?.GetHashCode());
                ret = ret.CombineHashCode(this.MusicType?.GetHashCode());
                ret = ret.CombineHashCode(this.WaterHeight?.GetHashCode());
                ret = ret.CombineHashCode(this.Climate?.GetHashCode());
                ret = ret.CombineHashCode(this.Water?.GetHashCode());
                ret = ret.CombineHashCode(this.Owner?.GetHashCode());
                ret = ret.CombineHashCode(this.FactionRank?.GetHashCode());
                ret = ret.CombineHashCode(this.GlobalVariable?.GetHashCode());
                ret = ret.CombineHashCode(this.PathGrid?.GetHashCode());
                ret = ret.CombineHashCode(this.Landscape?.GetHashCode());
                ret = ret.CombineHashCode(this.Timestamp?.GetHashCode());
                ret = ret.CombineHashCode(this.PersistentTimestamp?.GetHashCode());
                ret = ret.CombineHashCode(this.Persistent?.GetHashCode());
                ret = ret.CombineHashCode(this.TemporaryTimestamp?.GetHashCode());
                ret = ret.CombineHashCode(this.Temporary?.GetHashCode());
                ret = ret.CombineHashCode(this.VisibleWhenDistantTimestamp?.GetHashCode());
                ret = ret.CombineHashCode(this.VisibleWhenDistant?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All Equal
            public override bool AllEqual(Func<T, bool> eval)
            {
                if (!base.AllEqual(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Grid)) return false;
                if (Lighting != null)
                {
                    if (!eval(this.Lighting.Overall)) return false;
                    if (this.Lighting.Specific != null && !this.Lighting.Specific.AllEqual(eval)) return false;
                }
                if (this.Regions != null)
                {
                    if (!eval(this.Regions.Overall)) return false;
                    if (this.Regions.Specific != null)
                    {
                        foreach (var item in this.Regions.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.MusicType)) return false;
                if (!eval(this.WaterHeight)) return false;
                if (!eval(this.Climate)) return false;
                if (!eval(this.Water)) return false;
                if (!eval(this.Owner)) return false;
                if (!eval(this.FactionRank)) return false;
                if (!eval(this.GlobalVariable)) return false;
                if (PathGrid != null)
                {
                    if (!eval(this.PathGrid.Overall)) return false;
                    if (this.PathGrid.Specific != null && !this.PathGrid.Specific.AllEqual(eval)) return false;
                }
                if (Landscape != null)
                {
                    if (!eval(this.Landscape.Overall)) return false;
                    if (this.Landscape.Specific != null && !this.Landscape.Specific.AllEqual(eval)) return false;
                }
                if (!eval(this.Timestamp)) return false;
                if (!eval(this.PersistentTimestamp)) return false;
                if (this.Persistent != null)
                {
                    if (!eval(this.Persistent.Overall)) return false;
                    if (this.Persistent.Specific != null)
                    {
                        foreach (var item in this.Persistent.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.AllEqual(eval) ?? true)) return false;
                        }
                    }
                }
                if (!eval(this.TemporaryTimestamp)) return false;
                if (this.Temporary != null)
                {
                    if (!eval(this.Temporary.Overall)) return false;
                    if (this.Temporary.Specific != null)
                    {
                        foreach (var item in this.Temporary.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.AllEqual(eval) ?? true)) return false;
                        }
                    }
                }
                if (!eval(this.VisibleWhenDistantTimestamp)) return false;
                if (this.VisibleWhenDistant != null)
                {
                    if (!eval(this.VisibleWhenDistant.Overall)) return false;
                    if (this.VisibleWhenDistant.Specific != null)
                    {
                        foreach (var item in this.VisibleWhenDistant.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.AllEqual(eval) ?? true)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new Cell.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Flags = eval(this.Flags);
                obj.Grid = eval(this.Grid);
                obj.Lighting = this.Lighting == null ? null : new MaskItem<R, CellLighting.Mask<R>?>(eval(this.Lighting.Overall), this.Lighting.Specific?.Translate(eval));
                if (Regions != null)
                {
                    obj.Regions = new MaskItem<R, IEnumerable<(int Index, R Value)>>(eval(this.Regions.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Regions.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Regions.Specific = l;
                        foreach (var item in Regions.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.MusicType = eval(this.MusicType);
                obj.WaterHeight = eval(this.WaterHeight);
                obj.Climate = eval(this.Climate);
                obj.Water = eval(this.Water);
                obj.Owner = eval(this.Owner);
                obj.FactionRank = eval(this.FactionRank);
                obj.GlobalVariable = eval(this.GlobalVariable);
                obj.PathGrid = this.PathGrid == null ? null : new MaskItem<R, PathGrid.Mask<R>?>(eval(this.PathGrid.Overall), this.PathGrid.Specific?.Translate(eval));
                obj.Landscape = this.Landscape == null ? null : new MaskItem<R, Landscape.Mask<R>?>(eval(this.Landscape.Overall), this.Landscape.Specific?.Translate(eval));
                obj.Timestamp = eval(this.Timestamp);
                obj.PersistentTimestamp = eval(this.PersistentTimestamp);
                if (Persistent != null)
                {
                    obj.Persistent = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>?>>>(eval(this.Persistent.Overall), Enumerable.Empty<MaskItemIndexed<R, IMask<R>?>>());
                    if (Persistent.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, IMask<R>?>>();
                        obj.Persistent.Specific = l;
                        foreach (var item in Persistent.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, IMask<R>?>? mask;
                            throw new NotImplementedException();
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.TemporaryTimestamp = eval(this.TemporaryTimestamp);
                if (Temporary != null)
                {
                    obj.Temporary = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>?>>>(eval(this.Temporary.Overall), Enumerable.Empty<MaskItemIndexed<R, IMask<R>?>>());
                    if (Temporary.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, IMask<R>?>>();
                        obj.Temporary.Specific = l;
                        foreach (var item in Temporary.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, IMask<R>?>? mask;
                            throw new NotImplementedException();
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.VisibleWhenDistantTimestamp = eval(this.VisibleWhenDistantTimestamp);
                if (VisibleWhenDistant != null)
                {
                    obj.VisibleWhenDistant = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>?>>>(eval(this.VisibleWhenDistant.Overall), Enumerable.Empty<MaskItemIndexed<R, IMask<R>?>>());
                    if (VisibleWhenDistant.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, IMask<R>?>>();
                        obj.VisibleWhenDistant.Specific = l;
                        foreach (var item in VisibleWhenDistant.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, IMask<R>?>? mask;
                            throw new NotImplementedException();
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Cell.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Cell.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Cell.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendLine($"Name => {Name}");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendLine($"Flags => {Flags}");
                    }
                    if (printMask?.Grid ?? true)
                    {
                        fg.AppendLine($"Grid => {Grid}");
                    }
                    if (printMask?.Lighting?.Overall ?? true)
                    {
                        Lighting?.ToString(fg);
                    }
                    if (printMask?.Regions?.Overall ?? true)
                    {
                        fg.AppendLine("Regions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Regions != null)
                            {
                                if (Regions.Overall != null)
                                {
                                    fg.AppendLine(Regions.Overall.ToString());
                                }
                                if (Regions.Specific != null)
                                {
                                    foreach (var subItem in Regions.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem}");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.MusicType ?? true)
                    {
                        fg.AppendLine($"MusicType => {MusicType}");
                    }
                    if (printMask?.WaterHeight ?? true)
                    {
                        fg.AppendLine($"WaterHeight => {WaterHeight}");
                    }
                    if (printMask?.Climate ?? true)
                    {
                        fg.AppendLine($"Climate => {Climate}");
                    }
                    if (printMask?.Water ?? true)
                    {
                        fg.AppendLine($"Water => {Water}");
                    }
                    if (printMask?.Owner ?? true)
                    {
                        fg.AppendLine($"Owner => {Owner}");
                    }
                    if (printMask?.FactionRank ?? true)
                    {
                        fg.AppendLine($"FactionRank => {FactionRank}");
                    }
                    if (printMask?.GlobalVariable ?? true)
                    {
                        fg.AppendLine($"GlobalVariable => {GlobalVariable}");
                    }
                    if (printMask?.PathGrid?.Overall ?? true)
                    {
                        PathGrid?.ToString(fg);
                    }
                    if (printMask?.Landscape?.Overall ?? true)
                    {
                        Landscape?.ToString(fg);
                    }
                    if (printMask?.Timestamp ?? true)
                    {
                        fg.AppendLine($"Timestamp => {Timestamp}");
                    }
                    if (printMask?.PersistentTimestamp ?? true)
                    {
                        fg.AppendLine($"PersistentTimestamp => {PersistentTimestamp}");
                    }
                    if (printMask?.Persistent?.Overall ?? true)
                    {
                        fg.AppendLine("Persistent =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Persistent != null)
                            {
                                if (Persistent.Overall != null)
                                {
                                    fg.AppendLine(Persistent.Overall.ToString());
                                }
                                if (Persistent.Specific != null)
                                {
                                    foreach (var subItem in Persistent.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            subItem?.ToString(fg);
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.TemporaryTimestamp ?? true)
                    {
                        fg.AppendLine($"TemporaryTimestamp => {TemporaryTimestamp}");
                    }
                    if (printMask?.Temporary?.Overall ?? true)
                    {
                        fg.AppendLine("Temporary =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Temporary != null)
                            {
                                if (Temporary.Overall != null)
                                {
                                    fg.AppendLine(Temporary.Overall.ToString());
                                }
                                if (Temporary.Specific != null)
                                {
                                    foreach (var subItem in Temporary.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            subItem?.ToString(fg);
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.VisibleWhenDistantTimestamp ?? true)
                    {
                        fg.AppendLine($"VisibleWhenDistantTimestamp => {VisibleWhenDistantTimestamp}");
                    }
                    if (printMask?.VisibleWhenDistant?.Overall ?? true)
                    {
                        fg.AppendLine("VisibleWhenDistant =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (VisibleWhenDistant != null)
                            {
                                if (VisibleWhenDistant.Overall != null)
                                {
                                    fg.AppendLine(VisibleWhenDistant.Overall.ToString());
                                }
                                if (VisibleWhenDistant.Specific != null)
                                {
                                    foreach (var subItem in VisibleWhenDistant.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            subItem?.ToString(fg);
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Place.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Flags;
            public Exception? Grid;
            public MaskItem<Exception?, CellLighting.ErrorMask?>? Lighting;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Regions;
            public Exception? MusicType;
            public Exception? WaterHeight;
            public Exception? Climate;
            public Exception? Water;
            public Exception? Owner;
            public Exception? FactionRank;
            public Exception? GlobalVariable;
            public MaskItem<Exception?, PathGrid.ErrorMask?>? PathGrid;
            public MaskItem<Exception?, Landscape.ErrorMask?>? Landscape;
            public Exception? Timestamp;
            public Exception? PersistentTimestamp;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>? Persistent;
            public Exception? TemporaryTimestamp;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>? Temporary;
            public Exception? VisibleWhenDistantTimestamp;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>? VisibleWhenDistant;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Cell_FieldIndex enu = (Cell_FieldIndex)index;
                switch (enu)
                {
                    case Cell_FieldIndex.Name:
                        return Name;
                    case Cell_FieldIndex.Flags:
                        return Flags;
                    case Cell_FieldIndex.Grid:
                        return Grid;
                    case Cell_FieldIndex.Lighting:
                        return Lighting;
                    case Cell_FieldIndex.Regions:
                        return Regions;
                    case Cell_FieldIndex.MusicType:
                        return MusicType;
                    case Cell_FieldIndex.WaterHeight:
                        return WaterHeight;
                    case Cell_FieldIndex.Climate:
                        return Climate;
                    case Cell_FieldIndex.Water:
                        return Water;
                    case Cell_FieldIndex.Owner:
                        return Owner;
                    case Cell_FieldIndex.FactionRank:
                        return FactionRank;
                    case Cell_FieldIndex.GlobalVariable:
                        return GlobalVariable;
                    case Cell_FieldIndex.PathGrid:
                        return PathGrid;
                    case Cell_FieldIndex.Landscape:
                        return Landscape;
                    case Cell_FieldIndex.Timestamp:
                        return Timestamp;
                    case Cell_FieldIndex.PersistentTimestamp:
                        return PersistentTimestamp;
                    case Cell_FieldIndex.Persistent:
                        return Persistent;
                    case Cell_FieldIndex.TemporaryTimestamp:
                        return TemporaryTimestamp;
                    case Cell_FieldIndex.Temporary:
                        return Temporary;
                    case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                        return VisibleWhenDistantTimestamp;
                    case Cell_FieldIndex.VisibleWhenDistant:
                        return VisibleWhenDistant;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Cell_FieldIndex enu = (Cell_FieldIndex)index;
                switch (enu)
                {
                    case Cell_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Cell_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Cell_FieldIndex.Grid:
                        this.Grid = ex;
                        break;
                    case Cell_FieldIndex.Lighting:
                        this.Lighting = new MaskItem<Exception?, CellLighting.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.Regions:
                        this.Regions = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Cell_FieldIndex.MusicType:
                        this.MusicType = ex;
                        break;
                    case Cell_FieldIndex.WaterHeight:
                        this.WaterHeight = ex;
                        break;
                    case Cell_FieldIndex.Climate:
                        this.Climate = ex;
                        break;
                    case Cell_FieldIndex.Water:
                        this.Water = ex;
                        break;
                    case Cell_FieldIndex.Owner:
                        this.Owner = ex;
                        break;
                    case Cell_FieldIndex.FactionRank:
                        this.FactionRank = ex;
                        break;
                    case Cell_FieldIndex.GlobalVariable:
                        this.GlobalVariable = ex;
                        break;
                    case Cell_FieldIndex.PathGrid:
                        this.PathGrid = new MaskItem<Exception?, PathGrid.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.Landscape:
                        this.Landscape = new MaskItem<Exception?, Landscape.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.Timestamp:
                        this.Timestamp = ex;
                        break;
                    case Cell_FieldIndex.PersistentTimestamp:
                        this.PersistentTimestamp = ex;
                        break;
                    case Cell_FieldIndex.Persistent:
                        this.Persistent = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ex, null);
                        break;
                    case Cell_FieldIndex.TemporaryTimestamp:
                        this.TemporaryTimestamp = ex;
                        break;
                    case Cell_FieldIndex.Temporary:
                        this.Temporary = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ex, null);
                        break;
                    case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                        this.VisibleWhenDistantTimestamp = ex;
                        break;
                    case Cell_FieldIndex.VisibleWhenDistant:
                        this.VisibleWhenDistant = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Cell_FieldIndex enu = (Cell_FieldIndex)index;
                switch (enu)
                {
                    case Cell_FieldIndex.Name:
                        this.Name = (Exception)obj;
                        break;
                    case Cell_FieldIndex.Flags:
                        this.Flags = (Exception)obj;
                        break;
                    case Cell_FieldIndex.Grid:
                        this.Grid = (Exception)obj;
                        break;
                    case Cell_FieldIndex.Lighting:
                        this.Lighting = (MaskItem<Exception?, CellLighting.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.Regions:
                        this.Regions = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Cell_FieldIndex.MusicType:
                        this.MusicType = (Exception)obj;
                        break;
                    case Cell_FieldIndex.WaterHeight:
                        this.WaterHeight = (Exception)obj;
                        break;
                    case Cell_FieldIndex.Climate:
                        this.Climate = (Exception)obj;
                        break;
                    case Cell_FieldIndex.Water:
                        this.Water = (Exception)obj;
                        break;
                    case Cell_FieldIndex.Owner:
                        this.Owner = (Exception)obj;
                        break;
                    case Cell_FieldIndex.FactionRank:
                        this.FactionRank = (Exception)obj;
                        break;
                    case Cell_FieldIndex.GlobalVariable:
                        this.GlobalVariable = (Exception)obj;
                        break;
                    case Cell_FieldIndex.PathGrid:
                        this.PathGrid = (MaskItem<Exception?, PathGrid.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.Landscape:
                        this.Landscape = (MaskItem<Exception?, Landscape.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.Timestamp:
                        this.Timestamp = (Exception)obj;
                        break;
                    case Cell_FieldIndex.PersistentTimestamp:
                        this.PersistentTimestamp = (Exception)obj;
                        break;
                    case Cell_FieldIndex.Persistent:
                        this.Persistent = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>)obj;
                        break;
                    case Cell_FieldIndex.TemporaryTimestamp:
                        this.TemporaryTimestamp = (Exception)obj;
                        break;
                    case Cell_FieldIndex.Temporary:
                        this.Temporary = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>)obj;
                        break;
                    case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                        this.VisibleWhenDistantTimestamp = (Exception)obj;
                        break;
                    case Cell_FieldIndex.VisibleWhenDistant:
                        this.VisibleWhenDistant = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Flags != null) return true;
                if (Grid != null) return true;
                if (Lighting != null) return true;
                if (Regions != null) return true;
                if (MusicType != null) return true;
                if (WaterHeight != null) return true;
                if (Climate != null) return true;
                if (Water != null) return true;
                if (Owner != null) return true;
                if (FactionRank != null) return true;
                if (GlobalVariable != null) return true;
                if (PathGrid != null) return true;
                if (Landscape != null) return true;
                if (Timestamp != null) return true;
                if (PersistentTimestamp != null) return true;
                if (Persistent != null) return true;
                if (TemporaryTimestamp != null) return true;
                if (Temporary != null) return true;
                if (VisibleWhenDistantTimestamp != null) return true;
                if (VisibleWhenDistant != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg)
            {
                fg.AppendLine("ErrorMask =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendLine($"Name => {Name}");
                fg.AppendLine($"Flags => {Flags}");
                fg.AppendLine($"Grid => {Grid}");
                Lighting?.ToString(fg);
                fg.AppendLine("Regions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Regions != null)
                    {
                        if (Regions.Overall != null)
                        {
                            fg.AppendLine(Regions.Overall.ToString());
                        }
                        if (Regions.Specific != null)
                        {
                            foreach (var subItem in Regions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine($"MusicType => {MusicType}");
                fg.AppendLine($"WaterHeight => {WaterHeight}");
                fg.AppendLine($"Climate => {Climate}");
                fg.AppendLine($"Water => {Water}");
                fg.AppendLine($"Owner => {Owner}");
                fg.AppendLine($"FactionRank => {FactionRank}");
                fg.AppendLine($"GlobalVariable => {GlobalVariable}");
                PathGrid?.ToString(fg);
                Landscape?.ToString(fg);
                fg.AppendLine($"Timestamp => {Timestamp}");
                fg.AppendLine($"PersistentTimestamp => {PersistentTimestamp}");
                fg.AppendLine("Persistent =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Persistent != null)
                    {
                        if (Persistent.Overall != null)
                        {
                            fg.AppendLine(Persistent.Overall.ToString());
                        }
                        if (Persistent.Specific != null)
                        {
                            foreach (var subItem in Persistent.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine($"TemporaryTimestamp => {TemporaryTimestamp}");
                fg.AppendLine("Temporary =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Temporary != null)
                    {
                        if (Temporary.Overall != null)
                        {
                            fg.AppendLine(Temporary.Overall.ToString());
                        }
                        if (Temporary.Specific != null)
                        {
                            foreach (var subItem in Temporary.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine($"VisibleWhenDistantTimestamp => {VisibleWhenDistantTimestamp}");
                fg.AppendLine("VisibleWhenDistant =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (VisibleWhenDistant != null)
                    {
                        if (VisibleWhenDistant.Overall != null)
                        {
                            fg.AppendLine(VisibleWhenDistant.Overall.ToString());
                        }
                        if (VisibleWhenDistant.Specific != null)
                        {
                            foreach (var subItem in VisibleWhenDistant.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Grid = this.Grid.Combine(rhs.Grid);
                ret.Lighting = new MaskItem<Exception?, CellLighting.ErrorMask?>(ExceptionExt.Combine(this.Lighting?.Overall, rhs.Lighting?.Overall), (this.Lighting?.Specific as IErrorMask<CellLighting.ErrorMask>)?.Combine(rhs.Lighting?.Specific));
                ret.Regions = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Regions?.Overall, rhs.Regions?.Overall), ExceptionExt.Combine(this.Regions?.Specific, rhs.Regions?.Specific));
                ret.MusicType = this.MusicType.Combine(rhs.MusicType);
                ret.WaterHeight = this.WaterHeight.Combine(rhs.WaterHeight);
                ret.Climate = this.Climate.Combine(rhs.Climate);
                ret.Water = this.Water.Combine(rhs.Water);
                ret.Owner = this.Owner.Combine(rhs.Owner);
                ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
                ret.GlobalVariable = this.GlobalVariable.Combine(rhs.GlobalVariable);
                ret.PathGrid = new MaskItem<Exception?, PathGrid.ErrorMask?>(ExceptionExt.Combine(this.PathGrid?.Overall, rhs.PathGrid?.Overall), (this.PathGrid?.Specific as IErrorMask<PathGrid.ErrorMask>)?.Combine(rhs.PathGrid?.Specific));
                ret.Landscape = new MaskItem<Exception?, Landscape.ErrorMask?>(ExceptionExt.Combine(this.Landscape?.Overall, rhs.Landscape?.Overall), (this.Landscape?.Specific as IErrorMask<Landscape.ErrorMask>)?.Combine(rhs.Landscape?.Specific));
                ret.Timestamp = this.Timestamp.Combine(rhs.Timestamp);
                ret.PersistentTimestamp = this.PersistentTimestamp.Combine(rhs.PersistentTimestamp);
                ret.Persistent = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ExceptionExt.Combine(this.Persistent?.Overall, rhs.Persistent?.Overall), ExceptionExt.Combine(this.Persistent?.Specific, rhs.Persistent?.Specific));
                ret.TemporaryTimestamp = this.TemporaryTimestamp.Combine(rhs.TemporaryTimestamp);
                ret.Temporary = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ExceptionExt.Combine(this.Temporary?.Overall, rhs.Temporary?.Overall), ExceptionExt.Combine(this.Temporary?.Specific, rhs.Temporary?.Specific));
                ret.VisibleWhenDistantTimestamp = this.VisibleWhenDistantTimestamp.Combine(rhs.VisibleWhenDistantTimestamp);
                ret.VisibleWhenDistant = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ExceptionExt.Combine(this.VisibleWhenDistant?.Overall, rhs.VisibleWhenDistant?.Overall), ExceptionExt.Combine(this.VisibleWhenDistant?.Specific, rhs.VisibleWhenDistant?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Place.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Flags;
            public bool Grid;
            public MaskItem<bool, CellLighting.TranslationMask?> Lighting;
            public bool Regions;
            public bool MusicType;
            public bool WaterHeight;
            public bool Climate;
            public bool Water;
            public bool Owner;
            public bool FactionRank;
            public bool GlobalVariable;
            public MaskItem<bool, PathGrid.TranslationMask?> PathGrid;
            public MaskItem<bool, Landscape.TranslationMask?> Landscape;
            public bool Timestamp;
            public bool PersistentTimestamp;
            public bool Persistent;
            public bool TemporaryTimestamp;
            public bool Temporary;
            public bool VisibleWhenDistantTimestamp;
            public bool VisibleWhenDistant;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.Grid = defaultOn;
                this.Lighting = new MaskItem<bool, CellLighting.TranslationMask?>(defaultOn, null);
                this.Regions = defaultOn;
                this.MusicType = defaultOn;
                this.WaterHeight = defaultOn;
                this.Climate = defaultOn;
                this.Water = defaultOn;
                this.Owner = defaultOn;
                this.FactionRank = defaultOn;
                this.GlobalVariable = defaultOn;
                this.PathGrid = new MaskItem<bool, PathGrid.TranslationMask?>(defaultOn, null);
                this.Landscape = new MaskItem<bool, Landscape.TranslationMask?>(defaultOn, null);
                this.Timestamp = defaultOn;
                this.PersistentTimestamp = defaultOn;
                this.Persistent = defaultOn;
                this.TemporaryTimestamp = defaultOn;
                this.Temporary = defaultOn;
                this.VisibleWhenDistantTimestamp = defaultOn;
                this.VisibleWhenDistant = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Flags, null));
                ret.Add((Grid, null));
                ret.Add((Lighting?.Overall ?? true, Lighting?.Specific?.GetCrystal()));
                ret.Add((Regions, null));
                ret.Add((MusicType, null));
                ret.Add((WaterHeight, null));
                ret.Add((Climate, null));
                ret.Add((Water, null));
                ret.Add((Owner, null));
                ret.Add((FactionRank, null));
                ret.Add((GlobalVariable, null));
                ret.Add((PathGrid?.Overall ?? true, PathGrid?.Specific?.GetCrystal()));
                ret.Add((Landscape?.Overall ?? true, Landscape?.Specific?.GetCrystal()));
                ret.Add((Timestamp, null));
                ret.Add((PersistentTimestamp, null));
                ret.Add((Persistent, null));
                ret.Add((TemporaryTimestamp, null));
                ret.Add((Temporary, null));
                ret.Add((VisibleWhenDistantTimestamp, null));
                ret.Add((VisibleWhenDistant, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Cell_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => CellCommon.Instance.GetLinks(this);
        public Cell(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Cell(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((CellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new async Task<Cell> CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return await CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null).ConfigureAwait(false);
        }

        public new static async Task<Cell> CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new Cell();
            await ((CellSetterCommon)((ICellGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICellGetter)rhs, include);

        void IClearable.Clear()
        {
            ((CellSetterCommon)((ICellGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Cell GetNew()
        {
            return new Cell();
        }

    }
    #endregion

    #region Interface
    public partial interface ICell :
        ICellGetter,
        IPlace,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<ICellInternal>
    {
        new String? Name { get; set; }
        new Cell.Flag? Flags { get; set; }
        new P2Int? Grid { get; set; }
        new CellLighting? Lighting { get; set; }
        new ISetList<IFormIDLink<Region>> Regions { get; }
        new MusicType? MusicType { get; set; }
        new Single? WaterHeight { get; set; }
        new IFormIDSetLink<Climate> Climate { get; }
        new IFormIDSetLink<Water> Water { get; }
        new IFormIDSetLink<Faction> Owner { get; }
        new Int32? FactionRank { get; set; }
        new IFormIDSetLink<Global> GlobalVariable { get; }
        new PathGrid? PathGrid { get; set; }
        new Landscape? Landscape { get; set; }
        new Byte[] Timestamp { get; set; }
        new Byte[] PersistentTimestamp { get; set; }
        new ISetList<IPlaced> Persistent { get; }
        new Byte[] TemporaryTimestamp { get; set; }
        new ISetList<IPlaced> Temporary { get; }
        new Byte[] VisibleWhenDistantTimestamp { get; set; }
        new ISetList<IPlaced> VisibleWhenDistant { get; }
    }

    public partial interface ICellInternal :
        IPlaceInternal,
        ICell,
        ICellGetter
    {
    }

    public partial interface ICellGetter :
        IPlaceGetter,
        IMajorRecordGetterEnumerable,
        ILoquiObject<ICellGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Name { get; }
        Cell.Flag? Flags { get; }
        P2Int? Grid { get; }
        ICellLightingGetter? Lighting { get; }
        IReadOnlySetList<IFormIDLinkGetter<IRegionGetter>> Regions { get; }
        MusicType? MusicType { get; }
        Single? WaterHeight { get; }
        IFormIDSetLinkGetter<IClimateGetter> Climate { get; }
        IFormIDSetLinkGetter<IWaterGetter> Water { get; }
        IFormIDSetLinkGetter<IFactionGetter> Owner { get; }
        Int32? FactionRank { get; }
        IFormIDSetLinkGetter<IGlobalGetter> GlobalVariable { get; }
        IPathGridGetter? PathGrid { get; }
        ILandscapeGetter? Landscape { get; }
        ReadOnlySpan<Byte> Timestamp { get; }
        ReadOnlySpan<Byte> PersistentTimestamp { get; }
        IReadOnlySetList<IPlacedGetter> Persistent { get; }
        ReadOnlySpan<Byte> TemporaryTimestamp { get; }
        IReadOnlySetList<IPlacedGetter> Temporary { get; }
        ReadOnlySpan<Byte> VisibleWhenDistantTimestamp { get; }
        IReadOnlySetList<IPlacedGetter> VisibleWhenDistant { get; }

    }

    #endregion

    #region Common MixIn
    public static class CellMixIn
    {
        public static void Clear(this ICellInternal item)
        {
            ((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Cell.Mask<bool> GetEqualsMask(
            this ICellGetter item,
            ICellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICellGetter item,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICellGetter item,
            FileGeneration fg,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            ((CellCommon)((ICellGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ICellGetter item,
            Cell.Mask<bool?> checkMask)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Cell.Mask<bool> GetHasBeenSetMask(this ICellGetter item)
        {
            var ret = new Cell.Mask<bool>(false);
            ((CellCommon)((ICellGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ICellGetter item,
            ICellGetter rhs)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICellInternal lhs,
            ICellGetter rhs,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CellSetterTranslationCommon)((ICellGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Cell.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICellInternal lhs,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CellSetterTranslationCommon)((ICellGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            Cell.TranslationMask? copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICellInternal item,
            XElement node,
            Cell.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICellInternal item,
            XElement node,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Cell.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            string path,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            string path,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            Stream stream,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            Stream stream,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this ICellGetter obj)
        {
            return ((CellCommon)((ICellGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this ICellGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((CellCommon)((ICellGetter)obj).CommonInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this ICellInternal obj)
        {
            return ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this ICellInternal obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static async Task CopyInFromBinary(
            this ICellInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            await CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null).ConfigureAwait(false);
        }

        public static async Task CopyInFromBinary(
            this ICellInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            await ((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Cell_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Flags = 6,
        Grid = 7,
        Lighting = 8,
        Regions = 9,
        MusicType = 10,
        WaterHeight = 11,
        Climate = 12,
        Water = 13,
        Owner = 14,
        FactionRank = 15,
        GlobalVariable = 16,
        PathGrid = 17,
        Landscape = 18,
        Timestamp = 19,
        PersistentTimestamp = 20,
        Persistent = 21,
        TemporaryTimestamp = 22,
        Temporary = 23,
        VisibleWhenDistantTimestamp = 24,
        VisibleWhenDistant = 25,
    }
    #endregion

    #region Registration
    public partial class Cell_Registration : ILoquiRegistration
    {
        public static readonly Cell_Registration Instance = new Cell_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 120,
            version: 0);

        public const string GUID = "d54abb07-d896-4ddb-b857-9b9df945dd1e";

        public const ushort AdditionalFieldCount = 21;

        public const ushort FieldCount = 26;

        public static readonly Type MaskType = typeof(Cell.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Cell.ErrorMask);

        public static readonly Type ClassType = typeof(Cell);

        public static readonly Type GetterType = typeof(ICellGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICell);

        public static readonly Type? InternalSetterType = typeof(ICellInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Cell";

        public const string Name = "Cell";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Cell_FieldIndex.Name;
                case "FLAGS":
                    return (ushort)Cell_FieldIndex.Flags;
                case "GRID":
                    return (ushort)Cell_FieldIndex.Grid;
                case "LIGHTING":
                    return (ushort)Cell_FieldIndex.Lighting;
                case "REGIONS":
                    return (ushort)Cell_FieldIndex.Regions;
                case "MUSICTYPE":
                    return (ushort)Cell_FieldIndex.MusicType;
                case "WATERHEIGHT":
                    return (ushort)Cell_FieldIndex.WaterHeight;
                case "CLIMATE":
                    return (ushort)Cell_FieldIndex.Climate;
                case "WATER":
                    return (ushort)Cell_FieldIndex.Water;
                case "OWNER":
                    return (ushort)Cell_FieldIndex.Owner;
                case "FACTIONRANK":
                    return (ushort)Cell_FieldIndex.FactionRank;
                case "GLOBALVARIABLE":
                    return (ushort)Cell_FieldIndex.GlobalVariable;
                case "PATHGRID":
                    return (ushort)Cell_FieldIndex.PathGrid;
                case "LANDSCAPE":
                    return (ushort)Cell_FieldIndex.Landscape;
                case "TIMESTAMP":
                    return (ushort)Cell_FieldIndex.Timestamp;
                case "PERSISTENTTIMESTAMP":
                    return (ushort)Cell_FieldIndex.PersistentTimestamp;
                case "PERSISTENT":
                    return (ushort)Cell_FieldIndex.Persistent;
                case "TEMPORARYTIMESTAMP":
                    return (ushort)Cell_FieldIndex.TemporaryTimestamp;
                case "TEMPORARY":
                    return (ushort)Cell_FieldIndex.Temporary;
                case "VISIBLEWHENDISTANTTIMESTAMP":
                    return (ushort)Cell_FieldIndex.VisibleWhenDistantTimestamp;
                case "VISIBLEWHENDISTANT":
                    return (ushort)Cell_FieldIndex.VisibleWhenDistant;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return true;
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Timestamp:
                case Cell_FieldIndex.PersistentTimestamp:
                case Cell_FieldIndex.TemporaryTimestamp:
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                    return false;
                default:
                    return Place_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return true;
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.Timestamp:
                case Cell_FieldIndex.PersistentTimestamp:
                case Cell_FieldIndex.TemporaryTimestamp:
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                    return false;
                default:
                    return Place_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Timestamp:
                case Cell_FieldIndex.PersistentTimestamp:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.TemporaryTimestamp:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return Place_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    return "Name";
                case Cell_FieldIndex.Flags:
                    return "Flags";
                case Cell_FieldIndex.Grid:
                    return "Grid";
                case Cell_FieldIndex.Lighting:
                    return "Lighting";
                case Cell_FieldIndex.Regions:
                    return "Regions";
                case Cell_FieldIndex.MusicType:
                    return "MusicType";
                case Cell_FieldIndex.WaterHeight:
                    return "WaterHeight";
                case Cell_FieldIndex.Climate:
                    return "Climate";
                case Cell_FieldIndex.Water:
                    return "Water";
                case Cell_FieldIndex.Owner:
                    return "Owner";
                case Cell_FieldIndex.FactionRank:
                    return "FactionRank";
                case Cell_FieldIndex.GlobalVariable:
                    return "GlobalVariable";
                case Cell_FieldIndex.PathGrid:
                    return "PathGrid";
                case Cell_FieldIndex.Landscape:
                    return "Landscape";
                case Cell_FieldIndex.Timestamp:
                    return "Timestamp";
                case Cell_FieldIndex.PersistentTimestamp:
                    return "PersistentTimestamp";
                case Cell_FieldIndex.Persistent:
                    return "Persistent";
                case Cell_FieldIndex.TemporaryTimestamp:
                    return "TemporaryTimestamp";
                case Cell_FieldIndex.Temporary:
                    return "Temporary";
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                    return "VisibleWhenDistantTimestamp";
                case Cell_FieldIndex.VisibleWhenDistant:
                    return "VisibleWhenDistant";
                default:
                    return Place_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Timestamp:
                case Cell_FieldIndex.PersistentTimestamp:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.TemporaryTimestamp:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return Place_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Timestamp:
                case Cell_FieldIndex.PersistentTimestamp:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.TemporaryTimestamp:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return Place_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    return typeof(String);
                case Cell_FieldIndex.Flags:
                    return typeof(Cell.Flag);
                case Cell_FieldIndex.Grid:
                    return typeof(P2Int);
                case Cell_FieldIndex.Lighting:
                    return typeof(CellLighting);
                case Cell_FieldIndex.Regions:
                    return typeof(ISetList<IFormIDLink<Region>>);
                case Cell_FieldIndex.MusicType:
                    return typeof(MusicType);
                case Cell_FieldIndex.WaterHeight:
                    return typeof(Single);
                case Cell_FieldIndex.Climate:
                    return typeof(IFormIDSetLink<Climate>);
                case Cell_FieldIndex.Water:
                    return typeof(IFormIDSetLink<Water>);
                case Cell_FieldIndex.Owner:
                    return typeof(IFormIDSetLink<Faction>);
                case Cell_FieldIndex.FactionRank:
                    return typeof(Int32);
                case Cell_FieldIndex.GlobalVariable:
                    return typeof(IFormIDSetLink<Global>);
                case Cell_FieldIndex.PathGrid:
                    return typeof(PathGrid);
                case Cell_FieldIndex.Landscape:
                    return typeof(Landscape);
                case Cell_FieldIndex.Timestamp:
                    return typeof(Byte[]);
                case Cell_FieldIndex.PersistentTimestamp:
                    return typeof(Byte[]);
                case Cell_FieldIndex.Persistent:
                    return typeof(ISetList<IPlaced>);
                case Cell_FieldIndex.TemporaryTimestamp:
                    return typeof(Byte[]);
                case Cell_FieldIndex.Temporary:
                    return typeof(ISetList<IPlaced>);
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                    return typeof(Byte[]);
                case Cell_FieldIndex.VisibleWhenDistant:
                    return typeof(ISetList<IPlaced>);
                default:
                    return Place_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(CellXmlWriteTranslation);
        public static readonly RecordType CELL_HEADER = new RecordType("CELL");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType XCLC_HEADER = new RecordType("XCLC");
        public static readonly RecordType XCLL_HEADER = new RecordType("XCLL");
        public static readonly RecordType XCLR_HEADER = new RecordType("XCLR");
        public static readonly RecordType XCMT_HEADER = new RecordType("XCMT");
        public static readonly RecordType XCLW_HEADER = new RecordType("XCLW");
        public static readonly RecordType XCCM_HEADER = new RecordType("XCCM");
        public static readonly RecordType XCWT_HEADER = new RecordType("XCWT");
        public static readonly RecordType XOWN_HEADER = new RecordType("XOWN");
        public static readonly RecordType XRNK_HEADER = new RecordType("XRNK");
        public static readonly RecordType XGLB_HEADER = new RecordType("XGLB");
        public static readonly RecordType PGRD_HEADER = new RecordType("PGRD");
        public static readonly RecordType LAND_HEADER = new RecordType("LAND");
        public static readonly RecordType ACRE_HEADER = new RecordType("ACRE");
        public static readonly RecordType ACHR_HEADER = new RecordType("ACHR");
        public static readonly RecordType REFR_HEADER = new RecordType("REFR");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CELL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 17;
        public static readonly Type BinaryWriteTranslation = typeof(CellBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class CellSetterCommon : PlaceSetterCommon
    {
        public new static readonly CellSetterCommon Instance = new CellSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICellInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Flags = default;
            item.Grid = default;
            item.Lighting = null;
            item.Regions.Unset();
            item.MusicType = default;
            item.WaterHeight = default;
            item.Climate.Unset();
            item.Water.Unset();
            item.Owner.Unset();
            item.FactionRank = default;
            item.GlobalVariable.Unset();
            item.PathGrid = null;
            item.Landscape = null;
            item.Timestamp = new byte[4];
            item.PersistentTimestamp = new byte[4];
            item.Persistent.Unset();
            item.TemporaryTimestamp = new byte[4];
            item.Temporary.Unset();
            item.VisibleWhenDistantTimestamp = new byte[4];
            item.VisibleWhenDistant.Unset();
            base.Clear(item);
        }
        
        public override void Clear(IPlaceInternal item)
        {
            Clear(item: (ICellInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ICellInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICellInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ICellInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    PlaceSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            ICellInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    CellXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Mutagen
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(ICellInternal obj)
        {
            foreach (var item in CellCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(ICellInternal obj)
            where TMajor : class, IMajorRecordCommon
        {
            foreach (var item in CellCommon.Instance.EnumerateMajorRecords<TMajor>(obj))
            {
                yield return (item as TMajor)!;
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Cell_Registration.CELL_HEADER;
        protected static void FillBinaryStructs(
            ICellInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            PlaceSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ICellInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Name);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Cell.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Flags);
                }
                case 0x434C4358: // XCLC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Grid = Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Grid);
                }
                case 0x4C4C4358: // XCLL
                {
                    item.Lighting = Mutagen.Bethesda.Oblivion.CellLighting.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Lighting);
                }
                case 0x524C4358: // XCLR
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLink<Region>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Regions,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Regions);
                }
                case 0x544D4358: // XCMT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MusicType = EnumBinaryTranslation<MusicType>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.MusicType);
                }
                case 0x574C4358: // XCLW
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.WaterHeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.WaterHeight);
                }
                case 0x4D434358: // XCCM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Climate.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Climate);
                }
                case 0x54574358: // XCWT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Water.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Water);
                }
                case 0x4E574F58: // XOWN
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Owner.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Owner);
                }
                case 0x4B4E5258: // XRNK
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FactionRank = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.FactionRank);
                }
                case 0x424C4758: // XGLB
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.GlobalVariable.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.GlobalVariable);
                }
                default:
                    return PlaceSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public async Task CopyInFromBinary(
            ICellInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<ICellInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
            await CellBinaryCreateTranslation.CustomBinaryEndImport(
                frame: frame,
                obj: item,
                masterReferences: masterReferences);
        }
        
        #endregion
        
    }
    public partial class CellCommon : PlaceCommon
    {
        public new static readonly CellCommon Instance = new CellCommon();

        public Cell.Mask<bool> GetEqualsMask(
            ICellGetter item,
            ICellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Cell.Mask<bool>(false);
            ((CellCommon)((ICellGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICellGetter item,
            ICellGetter rhs,
            Cell.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Grid = item.Grid.Equals(rhs.Grid);
            ret.Lighting = EqualsMaskHelper.EqualsHelper(
                item.Lighting,
                rhs.Lighting,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Regions = item.Regions.CollectionEqualsHelper(
                rhs.Regions,
                (l, r) => object.Equals(l, r),
                include);
            ret.MusicType = item.MusicType == rhs.MusicType;
            ret.WaterHeight = item.WaterHeight.EqualsWithin(rhs.WaterHeight);
            ret.Climate = object.Equals(item.Climate, rhs.Climate);
            ret.Water = object.Equals(item.Water, rhs.Water);
            ret.Owner = object.Equals(item.Owner, rhs.Owner);
            ret.FactionRank = item.FactionRank == rhs.FactionRank;
            ret.GlobalVariable = object.Equals(item.GlobalVariable, rhs.GlobalVariable);
            ret.PathGrid = EqualsMaskHelper.EqualsHelper(
                item.PathGrid,
                rhs.PathGrid,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Landscape = EqualsMaskHelper.EqualsHelper(
                item.Landscape,
                rhs.Landscape,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Timestamp = MemoryExtensions.SequenceEqual(item.Timestamp, rhs.Timestamp);
            ret.PersistentTimestamp = MemoryExtensions.SequenceEqual(item.PersistentTimestamp, rhs.PersistentTimestamp);
            ret.Persistent = item.Persistent.CollectionEqualsHelper(
                rhs.Persistent,
                (loqLhs, loqRhs) => loqLhs.GetEqualsIMask(loqRhs, include),
                include);
            ret.TemporaryTimestamp = MemoryExtensions.SequenceEqual(item.TemporaryTimestamp, rhs.TemporaryTimestamp);
            ret.Temporary = item.Temporary.CollectionEqualsHelper(
                rhs.Temporary,
                (loqLhs, loqRhs) => loqLhs.GetEqualsIMask(loqRhs, include),
                include);
            ret.VisibleWhenDistantTimestamp = MemoryExtensions.SequenceEqual(item.VisibleWhenDistantTimestamp, rhs.VisibleWhenDistantTimestamp);
            ret.VisibleWhenDistant = item.VisibleWhenDistant.CollectionEqualsHelper(
                rhs.VisibleWhenDistant,
                (loqLhs, loqRhs) => loqLhs.GetEqualsIMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ICellGetter item,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICellGetter item,
            FileGeneration fg,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Cell =>");
            }
            else
            {
                fg.AppendLine($"{name} (Cell) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICellGetter item,
            FileGeneration fg,
            Cell.Mask<bool>? printMask = null)
        {
            PlaceCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Grid ?? true)
            {
                fg.AppendLine($"Grid => {item.Grid}");
            }
            if (printMask?.Lighting?.Overall ?? true)
            {
                item.Lighting?.ToString(fg, "Lighting");
            }
            if (printMask?.Regions?.Overall ?? true)
            {
                fg.AppendLine("Regions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Regions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.MusicType ?? true)
            {
                fg.AppendLine($"MusicType => {item.MusicType}");
            }
            if (printMask?.WaterHeight ?? true)
            {
                fg.AppendLine($"WaterHeight => {item.WaterHeight}");
            }
            if (printMask?.Climate ?? true)
            {
                fg.AppendLine($"Climate => {item.Climate}");
            }
            if (printMask?.Water ?? true)
            {
                fg.AppendLine($"Water => {item.Water}");
            }
            if (printMask?.Owner ?? true)
            {
                fg.AppendLine($"Owner => {item.Owner}");
            }
            if (printMask?.FactionRank ?? true)
            {
                fg.AppendLine($"FactionRank => {item.FactionRank}");
            }
            if (printMask?.GlobalVariable ?? true)
            {
                fg.AppendLine($"GlobalVariable => {item.GlobalVariable}");
            }
            if (printMask?.PathGrid?.Overall ?? true)
            {
                item.PathGrid?.ToString(fg, "PathGrid");
            }
            if (printMask?.Landscape?.Overall ?? true)
            {
                item.Landscape?.ToString(fg, "Landscape");
            }
            if (printMask?.Timestamp ?? true)
            {
                fg.AppendLine($"Timestamp => {SpanExt.ToHexString(item.Timestamp)}");
            }
            if (printMask?.PersistentTimestamp ?? true)
            {
                fg.AppendLine($"PersistentTimestamp => {SpanExt.ToHexString(item.PersistentTimestamp)}");
            }
            if (printMask?.Persistent?.Overall ?? true)
            {
                fg.AppendLine("Persistent =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Persistent)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.TemporaryTimestamp ?? true)
            {
                fg.AppendLine($"TemporaryTimestamp => {SpanExt.ToHexString(item.TemporaryTimestamp)}");
            }
            if (printMask?.Temporary?.Overall ?? true)
            {
                fg.AppendLine("Temporary =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Temporary)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.VisibleWhenDistantTimestamp ?? true)
            {
                fg.AppendLine($"VisibleWhenDistantTimestamp => {SpanExt.ToHexString(item.VisibleWhenDistantTimestamp)}");
            }
            if (printMask?.VisibleWhenDistant?.Overall ?? true)
            {
                fg.AppendLine("VisibleWhenDistant =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.VisibleWhenDistant)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ICellGetter item,
            Cell.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != (item.Flags != null)) return false;
            if (checkMask.Grid.HasValue && checkMask.Grid.Value != (item.Grid != null)) return false;
            if (checkMask.Lighting?.Overall.HasValue ?? false && checkMask.Lighting.Overall.Value != (item.Lighting != null)) return false;
            if (checkMask.Lighting?.Specific != null && (item.Lighting == null || !item.Lighting.HasBeenSet(checkMask.Lighting.Specific))) return false;
            if (checkMask.Regions?.Overall.HasValue ?? false && checkMask.Regions!.Overall.Value != item.Regions.HasBeenSet) return false;
            if (checkMask.MusicType.HasValue && checkMask.MusicType.Value != (item.MusicType != null)) return false;
            if (checkMask.WaterHeight.HasValue && checkMask.WaterHeight.Value != (item.WaterHeight != null)) return false;
            if (checkMask.Climate.HasValue && checkMask.Climate.Value != item.Climate.HasBeenSet) return false;
            if (checkMask.Water.HasValue && checkMask.Water.Value != item.Water.HasBeenSet) return false;
            if (checkMask.Owner.HasValue && checkMask.Owner.Value != item.Owner.HasBeenSet) return false;
            if (checkMask.FactionRank.HasValue && checkMask.FactionRank.Value != (item.FactionRank != null)) return false;
            if (checkMask.GlobalVariable.HasValue && checkMask.GlobalVariable.Value != item.GlobalVariable.HasBeenSet) return false;
            if (checkMask.PathGrid?.Overall.HasValue ?? false && checkMask.PathGrid.Overall.Value != (item.PathGrid != null)) return false;
            if (checkMask.PathGrid?.Specific != null && (item.PathGrid == null || !item.PathGrid.HasBeenSet(checkMask.PathGrid.Specific))) return false;
            if (checkMask.Landscape?.Overall.HasValue ?? false && checkMask.Landscape.Overall.Value != (item.Landscape != null)) return false;
            if (checkMask.Landscape?.Specific != null && (item.Landscape == null || !item.Landscape.HasBeenSet(checkMask.Landscape.Specific))) return false;
            if (checkMask.Persistent?.Overall.HasValue ?? false && checkMask.Persistent!.Overall.Value != item.Persistent.HasBeenSet) return false;
            if (checkMask.Temporary?.Overall.HasValue ?? false && checkMask.Temporary!.Overall.Value != item.Temporary.HasBeenSet) return false;
            if (checkMask.VisibleWhenDistant?.Overall.HasValue ?? false && checkMask.VisibleWhenDistant!.Overall.Value != item.VisibleWhenDistant.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ICellGetter item,
            Cell.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            mask.Flags = (item.Flags != null);
            mask.Grid = (item.Grid != null);
            var itemLighting = item.Lighting;
            mask.Lighting = new MaskItem<bool, CellLighting.Mask<bool>?>(itemLighting != null, itemLighting?.GetHasBeenSetMask());
            mask.Regions = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Regions.HasBeenSet, Enumerable.Empty<(int, bool)>());
            mask.MusicType = (item.MusicType != null);
            mask.WaterHeight = (item.WaterHeight != null);
            mask.Climate = item.Climate.HasBeenSet;
            mask.Water = item.Water.HasBeenSet;
            mask.Owner = item.Owner.HasBeenSet;
            mask.FactionRank = (item.FactionRank != null);
            mask.GlobalVariable = item.GlobalVariable.HasBeenSet;
            var itemPathGrid = item.PathGrid;
            mask.PathGrid = new MaskItem<bool, PathGrid.Mask<bool>?>(itemPathGrid != null, itemPathGrid?.GetHasBeenSetMask());
            var itemLandscape = item.Landscape;
            mask.Landscape = new MaskItem<bool, Landscape.Mask<bool>?>(itemLandscape != null, itemLandscape?.GetHasBeenSetMask());
            mask.Timestamp = true;
            mask.PersistentTimestamp = true;
            mask.Persistent = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, IMask<bool>?>>>(item.Persistent.HasBeenSet, item.Persistent.WithIndex().Select((i) => new MaskItemIndexed<bool, IMask<bool>?>(i.Index, true, i.Item.GetHasBeenSetIMask())));
            mask.TemporaryTimestamp = true;
            mask.Temporary = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, IMask<bool>?>>>(item.Temporary.HasBeenSet, item.Temporary.WithIndex().Select((i) => new MaskItemIndexed<bool, IMask<bool>?>(i.Index, true, i.Item.GetHasBeenSetIMask())));
            mask.VisibleWhenDistantTimestamp = true;
            mask.VisibleWhenDistant = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, IMask<bool>?>>>(item.VisibleWhenDistant.HasBeenSet, item.VisibleWhenDistant.WithIndex().Select((i) => new MaskItemIndexed<bool, IMask<bool>?>(i.Index, true, i.Item.GetHasBeenSetIMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Cell_FieldIndex ConvertFieldIndex(Place_FieldIndex index)
        {
            switch (index)
            {
                case Place_FieldIndex.MajorRecordFlagsRaw:
                    return (Cell_FieldIndex)((int)index);
                case Place_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case Place_FieldIndex.Version:
                    return (Cell_FieldIndex)((int)index);
                case Place_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                case Place_FieldIndex.OblivionMajorRecordFlags:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Cell_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Cell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Cell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Cell_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICellGetter? lhs,
            ICellGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.Grid.Equals(rhs.Grid)) return false;
            if (!object.Equals(lhs.Lighting, rhs.Lighting)) return false;
            if (!lhs.Regions.SequenceEqual(rhs.Regions)) return false;
            if (lhs.MusicType != rhs.MusicType) return false;
            if (!lhs.WaterHeight.EqualsWithin(rhs.WaterHeight)) return false;
            if (!lhs.Climate.Equals(rhs.Climate)) return false;
            if (!lhs.Water.Equals(rhs.Water)) return false;
            if (!lhs.Owner.Equals(rhs.Owner)) return false;
            if (lhs.FactionRank != rhs.FactionRank) return false;
            if (!lhs.GlobalVariable.Equals(rhs.GlobalVariable)) return false;
            if (!object.Equals(lhs.PathGrid, rhs.PathGrid)) return false;
            if (!object.Equals(lhs.Landscape, rhs.Landscape)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Timestamp, rhs.Timestamp)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.PersistentTimestamp, rhs.PersistentTimestamp)) return false;
            if (!lhs.Persistent.SequenceEqual(rhs.Persistent)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.TemporaryTimestamp, rhs.TemporaryTimestamp)) return false;
            if (!lhs.Temporary.SequenceEqual(rhs.Temporary)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.VisibleWhenDistantTimestamp, rhs.VisibleWhenDistantTimestamp)) return false;
            if (!lhs.VisibleWhenDistant.SequenceEqual(rhs.VisibleWhenDistant)) return false;
            return true;
        }
        
        public override bool Equals(
            IPlaceGetter? lhs,
            IPlaceGetter? rhs)
        {
            return Equals(
                lhs: (ICellGetter?)lhs,
                rhs: rhs as ICellGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICellGetter?)lhs,
                rhs: rhs as ICellGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICellGetter?)lhs,
                rhs: rhs as ICellGetter);
        }
        
        public virtual int GetHashCode(ICellGetter item)
        {
            int ret = 0;
            if (item.Name.TryGet(out var Nameitem))
            {
                ret = HashHelper.GetHashCode(Nameitem).CombineHashCode(ret);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                ret = HashHelper.GetHashCode(Flagsitem).CombineHashCode(ret);
            }
            if (item.Grid.TryGet(out var Griditem))
            {
                ret = HashHelper.GetHashCode(Griditem).CombineHashCode(ret);
            }
            if (item.Lighting.TryGet(out var Lightingitem))
            {
                ret = HashHelper.GetHashCode(Lightingitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Regions).CombineHashCode(ret);
            if (item.MusicType.TryGet(out var MusicTypeitem))
            {
                ret = HashHelper.GetHashCode(MusicTypeitem).CombineHashCode(ret);
            }
            if (item.WaterHeight.TryGet(out var WaterHeightitem))
            {
                ret = HashHelper.GetHashCode(WaterHeightitem).CombineHashCode(ret);
            }
            if (item.Climate.TryGet(out var Climateitem))
            {
                ret = HashHelper.GetHashCode(Climateitem).CombineHashCode(ret);
            }
            if (item.Water.TryGet(out var Wateritem))
            {
                ret = HashHelper.GetHashCode(Wateritem).CombineHashCode(ret);
            }
            if (item.Owner.TryGet(out var Owneritem))
            {
                ret = HashHelper.GetHashCode(Owneritem).CombineHashCode(ret);
            }
            if (item.FactionRank.TryGet(out var FactionRankitem))
            {
                ret = HashHelper.GetHashCode(FactionRankitem).CombineHashCode(ret);
            }
            if (item.GlobalVariable.TryGet(out var GlobalVariableitem))
            {
                ret = HashHelper.GetHashCode(GlobalVariableitem).CombineHashCode(ret);
            }
            if (item.PathGrid.TryGet(out var PathGriditem))
            {
                ret = HashHelper.GetHashCode(PathGriditem).CombineHashCode(ret);
            }
            if (item.Landscape.TryGet(out var Landscapeitem))
            {
                ret = HashHelper.GetHashCode(Landscapeitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Timestamp).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PersistentTimestamp).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Persistent).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TemporaryTimestamp).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Temporary).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.VisibleWhenDistantTimestamp).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.VisibleWhenDistant).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IPlaceGetter item)
        {
            return GetHashCode(item: (ICellGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ICellGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICellGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Cell.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ICellGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Regions)
            {
                yield return item;
            }
            yield return obj.Climate;
            yield return obj.Water;
            yield return obj.Owner;
            yield return obj.GlobalVariable;
            if (obj.PathGrid != null)
            {
                foreach (var item in obj.PathGrid.Links)
                {
                    yield return item;
                }
            }
            if (obj.Landscape != null)
            {
                foreach (var item in obj.Landscape.Links)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Persistent.WhereCastable<IPlacedGetter, ILinkContainer>()
                .SelectMany((f) => f.Links))
            {
                yield return item;
            }
            foreach (var item in obj.Temporary.WhereCastable<IPlacedGetter, ILinkContainer>()
                .SelectMany((f) => f.Links))
            {
                yield return item;
            }
            foreach (var item in obj.VisibleWhenDistant.WhereCastable<IPlacedGetter, ILinkContainer>()
                .SelectMany((f) => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(Cell obj, Cell rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Cell(getNextFormKey());
            ret.DeepCopyIn((Cell)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Cell)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(ICellGetter obj)
        {
            if (obj.PathGrid.TryGet(out var PathGriditem))
            {
                yield return PathGriditem;
                foreach (var item in PathGriditem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
            if (obj.Landscape.TryGet(out var Landscapeitem))
            {
                yield return Landscapeitem;
                foreach (var item in Landscapeitem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
            foreach (var subItem in obj.Persistent)
            {
                yield return subItem;
            }
            foreach (var subItem in obj.Temporary)
            {
                yield return subItem;
            }
            foreach (var subItem in obj.VisibleWhenDistant)
            {
                yield return subItem;
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(ICellGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            switch (typeof(TMajor).Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecordCommonGetter":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "IOblivionMajorRecordGetter":
                case "OblivionMajorRecord":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return (item as TMajor)!;
                    }
                    yield break;
                case "PathGrid":
                case "IPathGridGetter":
                case "IPathGrid":
                case "IPathGridInternal":
                    if (obj.PathGrid.TryGet(out var PathGriditem))
                    {
                        yield return (PathGriditem as TMajor)!;
                        foreach (var item in PathGriditem.EnumerateMajorRecords<TMajor>())
                        {
                            yield return (item as TMajor)!;
                        }
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    if (obj.Landscape.TryGet(out var Landscapeitem))
                    {
                        yield return (Landscapeitem as TMajor)!;
                        foreach (var item in Landscapeitem.EnumerateMajorRecords<TMajor>())
                        {
                            yield return (item as TMajor)!;
                        }
                    }
                    yield break;
                case "IPlacedGetter":
                case "IPlaced":
                    foreach (var subItem in obj.Persistent)
                    {
                        yield return (subItem as TMajor)!;
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        yield return (subItem as TMajor)!;
                    }
                    foreach (var subItem in obj.VisibleWhenDistant)
                    {
                        yield return (subItem as TMajor)!;
                    }
                    yield break;
                default:
                    throw new ArgumentException();
            }
        }
        
        #endregion
        
    }
    public partial class CellSetterTranslationCommon : PlaceSetterTranslationCommon
    {
        public new static readonly CellSetterTranslationCommon Instance = new CellSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ICellInternal item,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ICell item,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Grid) ?? true))
            {
                item.Grid = rhs.Grid;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Lighting) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Lighting);
                try
                {
                    if(rhs.Lighting.TryGet(out var rhsLighting))
                    {
                        item.Lighting = rhsLighting.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Cell_FieldIndex.Lighting));
                    }
                    else
                    {
                        item.Lighting = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Regions) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Regions);
                try
                {
                    if (rhs.Regions.HasBeenSet)
                    {
                        item.Regions.SetTo(
                            rhs.Regions,
                            (r) => new FormIDLink<Region>(r.FormKey));
                    }
                    else
                    {
                        item.Regions.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.MusicType) ?? true))
            {
                item.MusicType = rhs.MusicType;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterHeight) ?? true))
            {
                item.WaterHeight = rhs.WaterHeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Climate) ?? true))
            {
                item.Climate.SetToFormKey(rhs: rhs.Climate);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Water) ?? true))
            {
                item.Water.SetToFormKey(rhs: rhs.Water);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Owner) ?? true))
            {
                item.Owner.SetToFormKey(rhs: rhs.Owner);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.FactionRank) ?? true))
            {
                item.FactionRank = rhs.FactionRank;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.GlobalVariable) ?? true))
            {
                item.GlobalVariable.SetToFormKey(rhs: rhs.GlobalVariable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.PathGrid) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.PathGrid);
                try
                {
                    if(rhs.PathGrid.TryGet(out var rhsPathGrid))
                    {
                        var copyRet = new PathGrid(rhsPathGrid.FormKey);
                        copyRet.DeepCopyIn(
                            rhs: rhsPathGrid,
                            copyMask: copyMask?.GetSubCrystal((int)Cell_FieldIndex.PathGrid),
                            errorMask: errorMask);
                        item.PathGrid = copyRet;
                    }
                    else
                    {
                        item.PathGrid = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Landscape) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Landscape);
                try
                {
                    if(rhs.Landscape.TryGet(out var rhsLandscape))
                    {
                        var copyRet = new Landscape(rhsLandscape.FormKey);
                        copyRet.DeepCopyIn(
                            rhs: rhsLandscape,
                            copyMask: copyMask?.GetSubCrystal((int)Cell_FieldIndex.Landscape),
                            errorMask: errorMask);
                        item.Landscape = copyRet;
                    }
                    else
                    {
                        item.Landscape = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Timestamp) ?? true))
            {
                item.Timestamp = rhs.Timestamp.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.PersistentTimestamp) ?? true))
            {
                item.PersistentTimestamp = rhs.PersistentTimestamp.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Persistent) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Persistent);
                try
                {
                    if (rhs.Persistent.HasBeenSet)
                    {
                        item.Persistent.SetTo(
                            items: rhs.Persistent,
                            converter: (r) =>
                            {
                                return (r.DeepCopy() as IPlaced)!;
                            });
                    }
                    else
                    {
                        item.Persistent.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.TemporaryTimestamp) ?? true))
            {
                item.TemporaryTimestamp = rhs.TemporaryTimestamp.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Temporary) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Temporary);
                try
                {
                    if (rhs.Temporary.HasBeenSet)
                    {
                        item.Temporary.SetTo(
                            items: rhs.Temporary,
                            converter: (r) =>
                            {
                                return (r.DeepCopy() as IPlaced)!;
                            });
                    }
                    else
                    {
                        item.Temporary.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistantTimestamp) ?? true))
            {
                item.VisibleWhenDistantTimestamp = rhs.VisibleWhenDistantTimestamp.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistant) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.VisibleWhenDistant);
                try
                {
                    if (rhs.VisibleWhenDistant.HasBeenSet)
                    {
                        item.VisibleWhenDistant.SetTo(
                            items: rhs.VisibleWhenDistant,
                            converter: (r) =>
                            {
                                return (r.DeepCopy() as IPlaced)!;
                            });
                    }
                    else
                    {
                        item.VisibleWhenDistant.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IPlaceInternal item,
            IPlaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICellInternal)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IPlace item,
            IPlaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICell)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICellInternal)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICell)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICellInternal)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICell)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Cell DeepCopy(
            ICellGetter item,
            Cell.TranslationMask? copyMask = null)
        {
            Cell ret = (Cell)((CellCommon)((ICellGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Cell DeepCopy(
            ICellGetter item,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? copyMask = null)
        {
            Cell ret = (Cell)((CellCommon)((ICellGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Cell DeepCopy(
            ICellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Cell ret = (Cell)((CellCommon)((ICellGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Cell
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Cell_Registration.Instance;
        public new static Cell_Registration Registration => Cell_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CellCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CellSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CellSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CellXmlWriteTranslation :
        PlaceXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static CellXmlWriteTranslation Instance = new CellXmlWriteTranslation();

        public static void WriteToNodeXml(
            ICellGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            PlaceXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Cell_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Flags != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Cell.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Cell_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((item.Grid != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Grid) ?? true))
            {
                P2IntXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Grid),
                    item: item.Grid.Value,
                    fieldIndex: (int)Cell_FieldIndex.Grid,
                    errorMask: errorMask);
            }
            if ((item.Lighting != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Lighting) ?? true))
            {
                var loquiItem = item.Lighting;
                ((CellLightingXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Lighting),
                    fieldIndex: (int)Cell_FieldIndex.Lighting,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Lighting));
            }
            if (item.Regions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Regions) ?? true))
            {
                ListXmlTranslation<IFormIDLinkGetter<IRegionGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Regions),
                    item: item.Regions,
                    fieldIndex: (int)Cell_FieldIndex.Regions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Regions),
                    transl: (XElement subNode, IFormIDLinkGetter<IRegionGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.MusicType != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.MusicType) ?? true))
            {
                EnumXmlTranslation<MusicType>.Instance.Write(
                    node: node,
                    name: nameof(item.MusicType),
                    item: item.MusicType,
                    fieldIndex: (int)Cell_FieldIndex.MusicType,
                    errorMask: errorMask);
            }
            if ((item.WaterHeight != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterHeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.WaterHeight),
                    item: item.WaterHeight.Value,
                    fieldIndex: (int)Cell_FieldIndex.WaterHeight,
                    errorMask: errorMask);
            }
            if (item.Climate.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Climate) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Climate),
                    item: item.Climate?.FormKey,
                    fieldIndex: (int)Cell_FieldIndex.Climate,
                    errorMask: errorMask);
            }
            if (item.Water.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Water) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Water),
                    item: item.Water?.FormKey,
                    fieldIndex: (int)Cell_FieldIndex.Water,
                    errorMask: errorMask);
            }
            if (item.Owner.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Owner) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Owner),
                    item: item.Owner?.FormKey,
                    fieldIndex: (int)Cell_FieldIndex.Owner,
                    errorMask: errorMask);
            }
            if ((item.FactionRank != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.FactionRank) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FactionRank),
                    item: item.FactionRank.Value,
                    fieldIndex: (int)Cell_FieldIndex.FactionRank,
                    errorMask: errorMask);
            }
            if (item.GlobalVariable.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.GlobalVariable) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.GlobalVariable),
                    item: item.GlobalVariable?.FormKey,
                    fieldIndex: (int)Cell_FieldIndex.GlobalVariable,
                    errorMask: errorMask);
            }
            if ((item.PathGrid != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.PathGrid) ?? true))
            {
                var loquiItem = item.PathGrid;
                ((PathGridXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.PathGrid),
                    fieldIndex: (int)Cell_FieldIndex.PathGrid,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.PathGrid));
            }
            if ((item.Landscape != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Landscape) ?? true))
            {
                var loquiItem = item.Landscape;
                ((LandscapeXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Landscape),
                    fieldIndex: (int)Cell_FieldIndex.Landscape,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Landscape));
            }
            if ((translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Timestamp) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Timestamp),
                    item: item.Timestamp,
                    fieldIndex: (int)Cell_FieldIndex.Timestamp,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Cell_FieldIndex.PersistentTimestamp) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PersistentTimestamp),
                    item: item.PersistentTimestamp,
                    fieldIndex: (int)Cell_FieldIndex.PersistentTimestamp,
                    errorMask: errorMask);
            }
            if (item.Persistent.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Persistent) ?? true))
            {
                ListXmlTranslation<IPlacedGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Persistent),
                    item: item.Persistent,
                    fieldIndex: (int)Cell_FieldIndex.Persistent,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Persistent),
                    transl: (XElement subNode, IPlacedGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((IXmlWriteTranslator)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Cell_FieldIndex.TemporaryTimestamp) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TemporaryTimestamp),
                    item: item.TemporaryTimestamp,
                    fieldIndex: (int)Cell_FieldIndex.TemporaryTimestamp,
                    errorMask: errorMask);
            }
            if (item.Temporary.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Temporary) ?? true))
            {
                ListXmlTranslation<IPlacedGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Temporary),
                    item: item.Temporary,
                    fieldIndex: (int)Cell_FieldIndex.Temporary,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Temporary),
                    transl: (XElement subNode, IPlacedGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((IXmlWriteTranslator)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistantTimestamp) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VisibleWhenDistantTimestamp),
                    item: item.VisibleWhenDistantTimestamp,
                    fieldIndex: (int)Cell_FieldIndex.VisibleWhenDistantTimestamp,
                    errorMask: errorMask);
            }
            if (item.VisibleWhenDistant.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistant) ?? true))
            {
                ListXmlTranslation<IPlacedGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.VisibleWhenDistant),
                    item: item.VisibleWhenDistant,
                    fieldIndex: (int)Cell_FieldIndex.VisibleWhenDistant,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.VisibleWhenDistant),
                    transl: (XElement subNode, IPlacedGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((IXmlWriteTranslator)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            ICellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Cell");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Cell");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICellGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IPlaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICellGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICellGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICellGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class CellXmlCreateTranslation : PlaceXmlCreateTranslation
    {
        public new readonly static CellXmlCreateTranslation Instance = new CellXmlCreateTranslation();

        public static void FillPublicXml(
            ICellInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CellXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICellInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Name);
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Flags);
                        item.Flags = EnumXmlTranslation<Cell.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Grid":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Grid);
                        item.Grid = P2IntXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Lighting":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Lighting);
                        item.Lighting = LoquiXmlTranslation<CellLighting>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Lighting));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Regions":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Regions);
                        if (ListXmlTranslation<IFormIDLink<Region>>.Instance.Parse(
                            node: node,
                            enumer: out var RegionsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Regions.SetTo(RegionsItem);
                        }
                        else
                        {
                            item.Regions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MusicType":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.MusicType);
                        item.MusicType = EnumXmlTranslation<MusicType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WaterHeight":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.WaterHeight);
                        item.WaterHeight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Climate":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Climate);
                        item.Climate.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            defaultVal: FormKey.Null);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Water":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Water);
                        item.Water.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            defaultVal: FormKey.Null);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Owner":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Owner);
                        item.Owner.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            defaultVal: FormKey.Null);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FactionRank":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.FactionRank);
                        item.FactionRank = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GlobalVariable":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.GlobalVariable);
                        item.GlobalVariable.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            defaultVal: FormKey.Null);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PathGrid":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.PathGrid);
                        item.PathGrid = LoquiXmlTranslation<PathGrid>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.PathGrid));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Landscape":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Landscape);
                        item.Landscape = LoquiXmlTranslation<Landscape>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Landscape));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Timestamp":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Timestamp);
                        item.Timestamp = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 4,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PersistentTimestamp":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.PersistentTimestamp);
                        item.PersistentTimestamp = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 4,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Persistent":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Persistent);
                        if (ListXmlTranslation<IPlaced>.Instance.Parse(
                            node: node,
                            enumer: out var PersistentItem,
                            transl: LoquiXmlTranslation<IPlaced>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Persistent.SetTo(PersistentItem);
                        }
                        else
                        {
                            item.Persistent.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TemporaryTimestamp":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.TemporaryTimestamp);
                        item.TemporaryTimestamp = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 4,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Temporary":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Temporary);
                        if (ListXmlTranslation<IPlaced>.Instance.Parse(
                            node: node,
                            enumer: out var TemporaryItem,
                            transl: LoquiXmlTranslation<IPlaced>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Temporary.SetTo(TemporaryItem);
                        }
                        else
                        {
                            item.Temporary.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VisibleWhenDistantTimestamp":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.VisibleWhenDistantTimestamp);
                        item.VisibleWhenDistantTimestamp = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 4,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VisibleWhenDistant":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.VisibleWhenDistant);
                        if (ListXmlTranslation<IPlaced>.Instance.Parse(
                            node: node,
                            enumer: out var VisibleWhenDistantItem,
                            transl: LoquiXmlTranslation<IPlaced>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.VisibleWhenDistant.SetTo(VisibleWhenDistantItem);
                        }
                        else
                        {
                            item.VisibleWhenDistant.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    PlaceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class CellXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ICellGetter item,
            XElement node,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((CellXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Cell.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ICellGetter item,
            string path,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICellGetter item,
            Stream stream,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CellBinaryWriteTranslation :
        PlaceBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static CellBinaryWriteTranslation Instance = new CellBinaryWriteTranslation();

        static partial void CustomBinaryEndExport(
            MutagenWriter writer,
            ICellGetter obj,
            MasterReferences masterReferences);
        public static void CustomBinaryEndExportInternal(
            MutagenWriter writer,
            ICellGetter obj,
            MasterReferences masterReferences)
        {
            CustomBinaryEndExport(
                writer: writer,
                obj: obj,
                masterReferences: masterReferences);
        }
        public static void Write_Embedded(
            ICellGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            ICellGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Cell.Flag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.DATA_HEADER));
            Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Grid,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCLC_HEADER));
            {
                var loquiItem = item.Lighting;
                if (loquiItem != null)
                {
                    ((CellLightingBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLinkGetter<IRegionGetter>>.Instance.Write(
                writer: writer,
                items: item.Regions,
                recordType: Cell_Registration.XCLR_HEADER,
                transl: (MutagenWriter subWriter, IFormIDLinkGetter<IRegionGetter> subItem) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        masterReferences: masterReferences);
                });
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<MusicType>.Instance.WriteNullable(
                writer,
                item.MusicType,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCMT_HEADER));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WaterHeight,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCLW_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Climate,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCCM_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Water,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCWT_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Owner,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XOWN_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FactionRank,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XRNK_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GlobalVariable,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XGLB_HEADER),
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            ICellGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Cell_Registration.CELL_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
            CustomBinaryEndExportInternal(
                writer: writer,
                obj: item,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ICellGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IPlaceGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ICellGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ICellGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ICellGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CellBinaryCreateTranslation : PlaceBinaryCreateTranslation
    {
        public new readonly static CellBinaryCreateTranslation Instance = new CellBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class CellBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CellBinaryOverlay :
        PlaceBinaryOverlay,
        ICellGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Cell_Registration.Instance;
        public new static Cell_Registration Registration => Cell_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CellCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CellSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICellGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => CellCommon.Instance.GetLinks(this);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => CellXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CellXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((CellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        private bool Flags_IsSet => _FlagsLocation.HasValue;
        public Cell.Flag? Flags => Flags_IsSet ? (Cell.Flag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation!.Value, _package.Meta)[0] : default(Cell.Flag?);
        #endregion
        #region Grid
        private int? _GridLocation;
        public P2Int? Grid => _GridLocation.HasValue ? P2IntBinaryTranslation.Read(HeaderTranslation.ExtractSubrecordSpan(_data, _GridLocation.Value, _package.Meta)) : default(P2Int?);
        #endregion
        #region Lighting
        private RangeInt32? _LightingLocation;
        private bool _Lighting_IsSet => _LightingLocation.HasValue;
        public ICellLightingGetter? Lighting => _Lighting_IsSet ? CellLightingBinaryOverlay.CellLightingFactory(new BinaryMemoryReadStream(_data.Slice(_LightingLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool Lighting_IsSet => _LightingLocation.HasValue;
        #endregion
        public IReadOnlySetList<IFormIDLinkGetter<IRegionGetter>> Regions { get; private set; } = EmptySetList<IFormIDLinkGetter<IRegionGetter>>.Instance;
        #region MusicType
        private int? _MusicTypeLocation;
        private bool MusicType_IsSet => _MusicTypeLocation.HasValue;
        public MusicType? MusicType => MusicType_IsSet ? (MusicType)HeaderTranslation.ExtractSubrecordSpan(_data, _MusicTypeLocation!.Value, _package.Meta)[0] : default(MusicType?);
        #endregion
        #region WaterHeight
        private int? _WaterHeightLocation;
        public Single? WaterHeight => _WaterHeightLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordSpan(_data, _WaterHeightLocation.Value, _package.Meta)) : default(Single?);
        #endregion
        #region Climate
        private int? _ClimateLocation;
        public bool Climate_IsSet => _ClimateLocation.HasValue;
        public IFormIDSetLinkGetter<IClimateGetter> Climate => _ClimateLocation.HasValue ? new FormIDSetLink<IClimateGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ClimateLocation.Value, _package.Meta)))) : FormIDSetLink<IClimateGetter>.Empty;
        #endregion
        #region Water
        private int? _WaterLocation;
        public bool Water_IsSet => _WaterLocation.HasValue;
        public IFormIDSetLinkGetter<IWaterGetter> Water => _WaterLocation.HasValue ? new FormIDSetLink<IWaterGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _WaterLocation.Value, _package.Meta)))) : FormIDSetLink<IWaterGetter>.Empty;
        #endregion
        #region Owner
        private int? _OwnerLocation;
        public bool Owner_IsSet => _OwnerLocation.HasValue;
        public IFormIDSetLinkGetter<IFactionGetter> Owner => _OwnerLocation.HasValue ? new FormIDSetLink<IFactionGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _OwnerLocation.Value, _package.Meta)))) : FormIDSetLink<IFactionGetter>.Empty;
        #endregion
        #region FactionRank
        private int? _FactionRankLocation;
        public Int32? FactionRank => _FactionRankLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _FactionRankLocation.Value, _package.Meta)) : default(Int32?);
        #endregion
        #region GlobalVariable
        private int? _GlobalVariableLocation;
        public bool GlobalVariable_IsSet => _GlobalVariableLocation.HasValue;
        public IFormIDSetLinkGetter<IGlobalGetter> GlobalVariable => _GlobalVariableLocation.HasValue ? new FormIDSetLink<IGlobalGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _GlobalVariableLocation.Value, _package.Meta)))) : FormIDSetLink<IGlobalGetter>.Empty;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);
        partial void CustomEnd(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected CellBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static CellBinaryOverlay CellFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new CellBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            ret.CustomEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Name);
                }
                case 0x41544144: // DATA
                {
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Flags);
                }
                case 0x434C4358: // XCLC
                {
                    _GridLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Grid);
                }
                case 0x4C4C4358: // XCLL
                {
                    _LightingLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Lighting);
                }
                case 0x524C4358: // XCLR
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Regions = BinaryOverlaySetList<IFormIDLinkGetter<IRegionGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormIDLink<IRegionGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Regions);
                }
                case 0x544D4358: // XCMT
                {
                    _MusicTypeLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.MusicType);
                }
                case 0x574C4358: // XCLW
                {
                    _WaterHeightLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.WaterHeight);
                }
                case 0x4D434358: // XCCM
                {
                    _ClimateLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Climate);
                }
                case 0x54574358: // XCWT
                {
                    _WaterLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Water);
                }
                case 0x4E574F58: // XOWN
                {
                    _OwnerLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Owner);
                }
                case 0x4B4E5258: // XRNK
                {
                    _FactionRankLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.FactionRank);
                }
                case 0x424C4758: // XGLB
                {
                    _GlobalVariableLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.GlobalVariable);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

