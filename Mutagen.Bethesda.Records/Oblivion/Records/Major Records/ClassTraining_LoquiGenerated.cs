/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ClassTraining :
        IClassTraining,
        ILoquiObjectSetter<ClassTraining>,
        IEquatable<ClassTraining>,
        IEqualsMask
    {
        #region Ctor
        public ClassTraining()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TrainedSkill
        public Skill TrainedSkill { get; set; }
        #endregion
        #region MaximumTrainingLevel
        public Byte MaximumTrainingLevel { get; set; }
        public static RangeUInt8 MaximumTrainingLevel_Range = new RangeUInt8(0, 100);
        #endregion
        #region Fluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _Fluff = new byte[2];
        public Byte[] Fluff
        {
            get => _Fluff;
            set => this._Fluff = value ?? new byte[2];
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IClassTrainingGetter.Fluff => this.Fluff;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ClassTrainingMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IClassTrainingGetter rhs)) return false;
            return ((ClassTrainingCommon)((IClassTrainingGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(ClassTraining obj)
        {
            return ((ClassTrainingCommon)((IClassTrainingGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((ClassTrainingCommon)((IClassTrainingGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ClassTrainingXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ClassTrainingXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ClassTraining CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ClassTraining_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ClassTraining CreateFromXml(
            XElement node,
            out ClassTraining_ErrorMask errorMask,
            bool doMasks = true,
            ClassTraining_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ClassTraining_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ClassTraining CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new ClassTraining() : null;
                    break;
                default:
                    break;
            }
            var ret = new ClassTraining();
            ((ClassTrainingSetterCommon)((IClassTrainingGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ClassTraining CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            ClassTraining_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ClassTraining CreateFromXml(
            string path,
            out ClassTraining_ErrorMask errorMask,
            ClassTraining_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ClassTraining CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            ClassTraining_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ClassTraining CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ClassTraining_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ClassTraining CreateFromXml(
            Stream stream,
            out ClassTraining_ErrorMask errorMask,
            ClassTraining_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ClassTraining CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ClassTraining_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ClassTraining_FieldIndex)index)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                case ClassTraining_FieldIndex.Fluff:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ClassTrainingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ClassTrainingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static ClassTraining CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ClassTraining CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out ClassTraining_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ClassTraining_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ClassTraining CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ClassTraining();
            ((ClassTrainingSetterCommon)((IClassTrainingGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClassTrainingGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ClassTrainingSetterCommon)((IClassTrainingGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static ClassTraining GetNew()
        {
            return new ClassTraining();
        }

    }
    #endregion

    #region Interface
    public partial interface IClassTraining :
        IClassTrainingGetter,
        ILoquiObjectSetter<IClassTraining>
    {
        new Skill TrainedSkill { get; set; }

        new Byte MaximumTrainingLevel { get; set; }

        new Byte[] Fluff { get; set; }

    }

    public partial interface IClassTrainingGetter :
        ILoquiObject,
        ILoquiObject<IClassTrainingGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region TrainedSkill
        Skill TrainedSkill { get; }

        #endregion
        #region MaximumTrainingLevel
        Byte MaximumTrainingLevel { get; }

        #endregion
        #region Fluff
        ReadOnlySpan<Byte> Fluff { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class ClassTrainingMixIn
    {
        public static void Clear(this IClassTraining item)
        {
            ((ClassTrainingSetterCommon)((IClassTrainingGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static ClassTraining_Mask<bool> GetEqualsMask(
            this IClassTrainingGetter item,
            IClassTrainingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClassTrainingCommon)((IClassTrainingGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IClassTrainingGetter item,
            string name = null,
            ClassTraining_Mask<bool> printMask = null)
        {
            return ((ClassTrainingCommon)((IClassTrainingGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IClassTrainingGetter item,
            FileGeneration fg,
            string name = null,
            ClassTraining_Mask<bool> printMask = null)
        {
            ((ClassTrainingCommon)((IClassTrainingGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IClassTrainingGetter item,
            ClassTraining_Mask<bool?> checkMask)
        {
            return ((ClassTrainingCommon)((IClassTrainingGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ClassTraining_Mask<bool> GetHasBeenSetMask(this IClassTrainingGetter item)
        {
            var ret = new ClassTraining_Mask<bool>();
            ((ClassTrainingCommon)((IClassTrainingGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IClassTrainingGetter item,
            IClassTrainingGetter rhs)
        {
            return ((ClassTrainingCommon)((IClassTrainingGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IClassTraining lhs,
            IClassTrainingGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this IClassTraining lhs,
            IClassTrainingGetter rhs,
            ClassTraining_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IClassTraining lhs,
            IClassTrainingGetter rhs,
            out ClassTraining_ErrorMask errorMask,
            ClassTraining_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ClassTrainingSetterTranslationCommon)((IClassTrainingGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ClassTraining_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IClassTraining lhs,
            IClassTrainingGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((ClassTrainingSetterTranslationCommon)((IClassTrainingGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ClassTraining DeepCopy(
            this IClassTrainingGetter item,
            ClassTraining_TranslationMask copyMask = null)
        {
            return ((ClassTrainingSetterTranslationCommon)((IClassTrainingGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ClassTraining DeepCopy(
            this IClassTrainingGetter item,
            out ClassTraining_ErrorMask errorMask,
            ClassTraining_TranslationMask copyMask = null)
        {
            return ((ClassTrainingSetterTranslationCommon)((IClassTrainingGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ClassTraining DeepCopy(
            this IClassTrainingGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((ClassTrainingSetterTranslationCommon)((IClassTrainingGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClassTraining item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ClassTraining_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClassTraining item,
            XElement node,
            out ClassTraining_ErrorMask errorMask,
            bool doMasks = true,
            ClassTraining_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ClassTraining_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IClassTraining item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((ClassTrainingSetterCommon)((IClassTrainingGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassTraining item,
            string path,
            MissingCreate missing = MissingCreate.New,
            ClassTraining_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassTraining item,
            string path,
            out ClassTraining_ErrorMask errorMask,
            ClassTraining_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassTraining item,
            string path,
            ErrorMaskBuilder errorMask,
            ClassTraining_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IClassTraining item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ClassTraining_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassTraining item,
            Stream stream,
            out ClassTraining_ErrorMask errorMask,
            ClassTraining_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassTraining item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            ClassTraining_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IClassTraining item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IClassTraining item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out ClassTraining_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ClassTraining_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this IClassTraining item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ClassTrainingSetterCommon)((IClassTrainingGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ClassTraining_FieldIndex
    {
        TrainedSkill = 0,
        MaximumTrainingLevel = 1,
        Fluff = 2,
    }
    #endregion

    #region Registration
    public partial class ClassTraining_Registration : ILoquiRegistration
    {
        public static readonly ClassTraining_Registration Instance = new ClassTraining_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 19,
            version: 0);

        public const string GUID = "db3e6d59-8545-4d81-8531-4eb0b56c4a47";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(ClassTraining_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ClassTraining_ErrorMask);

        public static readonly Type ClassType = typeof(ClassTraining);

        public static readonly Type GetterType = typeof(IClassTrainingGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClassTraining);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.ClassTraining";

        public const string Name = "ClassTraining";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TRAINEDSKILL":
                    return (ushort)ClassTraining_FieldIndex.TrainedSkill;
                case "MAXIMUMTRAININGLEVEL":
                    return (ushort)ClassTraining_FieldIndex.MaximumTrainingLevel;
                case "FLUFF":
                    return (ushort)ClassTraining_FieldIndex.Fluff;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                case ClassTraining_FieldIndex.Fluff:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                case ClassTraining_FieldIndex.Fluff:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                case ClassTraining_FieldIndex.Fluff:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                    return "TrainedSkill";
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                    return "MaximumTrainingLevel";
                case ClassTraining_FieldIndex.Fluff:
                    return "Fluff";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                case ClassTraining_FieldIndex.Fluff:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                case ClassTraining_FieldIndex.Fluff:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                    return typeof(Skill);
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                    return typeof(Byte);
                case ClassTraining_FieldIndex.Fluff:
                    return typeof(Byte[]);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ClassTrainingXmlWriteTranslation);
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(ClassTrainingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ClassTrainingSetterCommon
    {
        public static readonly ClassTrainingSetterCommon Instance = new ClassTrainingSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IClassTraining item)
        {
            ClearPartial();
            item.TrainedSkill = default(Skill);
            item.MaximumTrainingLevel = default(Byte);
            item.Fluff = default(Byte[]);
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IClassTraining item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClassTrainingXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IClassTraining item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (EnumBinaryTranslation<Skill>.Instance.Parse(
                frame: frame.SpawnWithLength(1),
                item: out Skill TrainedSkillParse))
            {
                item.TrainedSkill = TrainedSkillParse;
            }
            else
            {
                item.TrainedSkill = default(Skill);
            }
            item.MaximumTrainingLevel = frame.ReadUInt8();
            if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.SpawnWithLength(2),
                item: out Byte[] FluffParse))
            {
                item.Fluff = FluffParse;
            }
            else
            {
                item.Fluff = default(Byte[]);
            }
        }
        
        public void CopyInFromBinary(
            IClassTraining item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class ClassTrainingCommon
    {
        public static readonly ClassTrainingCommon Instance = new ClassTrainingCommon();

        public ClassTraining_Mask<bool> GetEqualsMask(
            IClassTrainingGetter item,
            IClassTrainingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ClassTraining_Mask<bool>();
            ((ClassTrainingCommon)((IClassTrainingGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClassTrainingGetter item,
            IClassTrainingGetter rhs,
            ClassTraining_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.TrainedSkill = item.TrainedSkill == rhs.TrainedSkill;
            ret.MaximumTrainingLevel = item.MaximumTrainingLevel == rhs.MaximumTrainingLevel;
            ret.Fluff = MemoryExtensions.SequenceEqual(item.Fluff, rhs.Fluff);
        }
        
        public string ToString(
            IClassTrainingGetter item,
            string name = null,
            ClassTraining_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IClassTrainingGetter item,
            FileGeneration fg,
            string name = null,
            ClassTraining_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ClassTraining =>");
            }
            else
            {
                fg.AppendLine($"{name} (ClassTraining) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IClassTrainingGetter item,
            FileGeneration fg,
            ClassTraining_Mask<bool> printMask = null)
        {
            if (printMask?.TrainedSkill ?? true)
            {
                fg.AppendLine($"TrainedSkill => {item.TrainedSkill}");
            }
            if (printMask?.MaximumTrainingLevel ?? true)
            {
                fg.AppendLine($"MaximumTrainingLevel => {item.MaximumTrainingLevel}");
            }
            if (printMask?.Fluff ?? true)
            {
                fg.AppendLine($"Fluff => {SpanExt.ToHexString(item.Fluff)}");
            }
        }
        
        public bool HasBeenSet(
            IClassTrainingGetter item,
            ClassTraining_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IClassTrainingGetter item,
            ClassTraining_Mask<bool> mask)
        {
            mask.TrainedSkill = true;
            mask.MaximumTrainingLevel = true;
            mask.Fluff = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClassTrainingGetter lhs,
            IClassTrainingGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.TrainedSkill != rhs.TrainedSkill) return false;
            if (lhs.MaximumTrainingLevel != rhs.MaximumTrainingLevel) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Fluff, rhs.Fluff)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IClassTrainingGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.TrainedSkill).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MaximumTrainingLevel).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Fluff).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ClassTraining.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IClassTrainingGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class ClassTrainingSetterTranslationCommon
    {
        public static readonly ClassTrainingSetterTranslationCommon Instance = new ClassTrainingSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IClassTraining item,
            IClassTrainingGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)ClassTraining_FieldIndex.TrainedSkill) ?? true))
            {
                item.TrainedSkill = rhs.TrainedSkill;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassTraining_FieldIndex.MaximumTrainingLevel) ?? true))
            {
                item.MaximumTrainingLevel = rhs.MaximumTrainingLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassTraining_FieldIndex.Fluff) ?? true))
            {
                item.Fluff = rhs.Fluff.ToArray();
            }
        }
        
        #endregion
        
        public ClassTraining DeepCopy(
            IClassTrainingGetter item,
            ClassTraining_TranslationMask copyMask = null)
        {
            ClassTraining ret = (ClassTraining)((ClassTrainingCommon)((IClassTrainingGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ClassTraining DeepCopy(
            IClassTrainingGetter item,
            out ClassTraining_ErrorMask errorMask,
            ClassTraining_TranslationMask copyMask = null)
        {
            ClassTraining ret = (ClassTraining)((ClassTrainingCommon)((IClassTrainingGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ClassTraining DeepCopy(
            IClassTrainingGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            ClassTraining ret = (ClassTraining)((ClassTrainingCommon)((IClassTrainingGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ClassTraining
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClassTraining_Registration.Instance;
        public static ClassTraining_Registration Registration => ClassTraining_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ClassTrainingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ClassTrainingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ClassTrainingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IClassTrainingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IClassTrainingGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IClassTrainingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClassTrainingXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ClassTrainingXmlWriteTranslation Instance = new ClassTrainingXmlWriteTranslation();

        public static void WriteToNodeXml(
            IClassTrainingGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ClassTraining_FieldIndex.TrainedSkill) ?? true))
            {
                EnumXmlTranslation<Skill>.Instance.Write(
                    node: node,
                    name: nameof(item.TrainedSkill),
                    item: item.TrainedSkill,
                    fieldIndex: (int)ClassTraining_FieldIndex.TrainedSkill,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassTraining_FieldIndex.MaximumTrainingLevel) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaximumTrainingLevel),
                    item: item.MaximumTrainingLevel,
                    fieldIndex: (int)ClassTraining_FieldIndex.MaximumTrainingLevel,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassTraining_FieldIndex.Fluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Fluff),
                    item: item.Fluff,
                    fieldIndex: (int)ClassTraining_FieldIndex.Fluff,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IClassTrainingGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ClassTraining");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ClassTraining");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IClassTrainingGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IClassTrainingGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IClassTrainingGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ClassTrainingXmlCreateTranslation
    {
        public readonly static ClassTrainingXmlCreateTranslation Instance = new ClassTrainingXmlCreateTranslation();

        public static void FillPublicXml(
            IClassTraining item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClassTrainingXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IClassTraining item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "TrainedSkill":
                    try
                    {
                        errorMask?.PushIndex((int)ClassTraining_FieldIndex.TrainedSkill);
                        if (EnumXmlTranslation<Skill>.Instance.Parse(
                            node: node,
                            item: out Skill TrainedSkillParse,
                            errorMask: errorMask))
                        {
                            item.TrainedSkill = TrainedSkillParse;
                        }
                        else
                        {
                            item.TrainedSkill = default(Skill);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaximumTrainingLevel":
                    try
                    {
                        errorMask?.PushIndex((int)ClassTraining_FieldIndex.MaximumTrainingLevel);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte MaximumTrainingLevelParse,
                            errorMask: errorMask))
                        {
                            item.MaximumTrainingLevel = MaximumTrainingLevelParse;
                        }
                        else
                        {
                            item.MaximumTrainingLevel = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff":
                    try
                    {
                        errorMask?.PushIndex((int)ClassTraining_FieldIndex.Fluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] FluffParse,
                            errorMask: errorMask))
                        {
                            item.Fluff = FluffParse;
                        }
                        else
                        {
                            item.Fluff = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ClassTrainingXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IClassTrainingGetter item,
            XElement node,
            out ClassTraining_ErrorMask errorMask,
            bool doMasks = true,
            ClassTraining_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ClassTrainingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ClassTraining_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IClassTrainingGetter item,
            string path,
            out ClassTraining_ErrorMask errorMask,
            ClassTraining_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClassTrainingGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClassTrainingGetter item,
            Stream stream,
            out ClassTraining_ErrorMask errorMask,
            ClassTraining_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IClassTrainingGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IClassTrainingGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((ClassTrainingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IClassTrainingGetter item,
            XElement node,
            string name = null,
            ClassTraining_TranslationMask translationMask = null)
        {
            ((ClassTrainingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IClassTrainingGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ClassTrainingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClassTrainingGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ClassTrainingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class ClassTraining_Mask<T> : IMask<T>, IEquatable<ClassTraining_Mask<T>>
    {
        #region Ctors
        public ClassTraining_Mask()
        {
        }

        public ClassTraining_Mask(T initialValue)
        {
            this.TrainedSkill = initialValue;
            this.MaximumTrainingLevel = initialValue;
            this.Fluff = initialValue;
        }
        #endregion

        #region Members
        public T TrainedSkill;
        public T MaximumTrainingLevel;
        public T Fluff;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ClassTraining_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ClassTraining_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.TrainedSkill, rhs.TrainedSkill)) return false;
            if (!object.Equals(this.MaximumTrainingLevel, rhs.MaximumTrainingLevel)) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.TrainedSkill?.GetHashCode());
            ret = ret.CombineHashCode(this.MaximumTrainingLevel?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.TrainedSkill)) return false;
            if (!eval(this.MaximumTrainingLevel)) return false;
            if (!eval(this.Fluff)) return false;
            return true;
        }
        #endregion

        #region Translate
        public ClassTraining_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ClassTraining_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ClassTraining_Mask<R> obj, Func<T, R> eval)
        {
            obj.TrainedSkill = eval(this.TrainedSkill);
            obj.MaximumTrainingLevel = eval(this.MaximumTrainingLevel);
            obj.Fluff = eval(this.Fluff);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ClassTraining_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ClassTraining_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ClassTraining_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TrainedSkill ?? true)
                {
                    fg.AppendLine($"TrainedSkill => {TrainedSkill}");
                }
                if (printMask?.MaximumTrainingLevel ?? true)
                {
                    fg.AppendLine($"MaximumTrainingLevel => {MaximumTrainingLevel}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ClassTraining_ErrorMask : IErrorMask, IErrorMask<ClassTraining_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception TrainedSkill;
        public Exception MaximumTrainingLevel;
        public Exception Fluff;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                    return TrainedSkill;
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                    return MaximumTrainingLevel;
                case ClassTraining_FieldIndex.Fluff:
                    return Fluff;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                    this.TrainedSkill = ex;
                    break;
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                    this.MaximumTrainingLevel = ex;
                    break;
                case ClassTraining_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                    this.TrainedSkill = (Exception)obj;
                    break;
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                    this.MaximumTrainingLevel = (Exception)obj;
                    break;
                case ClassTraining_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (TrainedSkill != null) return true;
            if (MaximumTrainingLevel != null) return true;
            if (Fluff != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ClassTraining_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"TrainedSkill => {TrainedSkill}");
            fg.AppendLine($"MaximumTrainingLevel => {MaximumTrainingLevel}");
            fg.AppendLine($"Fluff => {Fluff}");
        }
        #endregion

        #region Combine
        public ClassTraining_ErrorMask Combine(ClassTraining_ErrorMask rhs)
        {
            var ret = new ClassTraining_ErrorMask();
            ret.TrainedSkill = this.TrainedSkill.Combine(rhs.TrainedSkill);
            ret.MaximumTrainingLevel = this.MaximumTrainingLevel.Combine(rhs.MaximumTrainingLevel);
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            return ret;
        }
        public static ClassTraining_ErrorMask Combine(ClassTraining_ErrorMask lhs, ClassTraining_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ClassTraining_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ClassTraining_ErrorMask();
        }
        #endregion

    }
    public class ClassTraining_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool TrainedSkill;
        public bool MaximumTrainingLevel;
        public bool Fluff;
        #endregion

        #region Ctors
        public ClassTraining_TranslationMask()
        {
        }

        public ClassTraining_TranslationMask(bool defaultOn)
        {
            this.TrainedSkill = defaultOn;
            this.MaximumTrainingLevel = defaultOn;
            this.Fluff = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((TrainedSkill, null));
            ret.Add((MaximumTrainingLevel, null));
            ret.Add((Fluff, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClassTrainingBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ClassTrainingBinaryWriteTranslation Instance = new ClassTrainingBinaryWriteTranslation();

        public static void Write_Embedded(
            IClassTrainingGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.Write(
                writer,
                item.TrainedSkill,
                length: 1);
            writer.Write(item.MaximumTrainingLevel);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff);
        }

        public void Write(
            MutagenWriter writer,
            IClassTrainingGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IClassTrainingGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class ClassTrainingBinaryCreateTranslation
    {
        public readonly static ClassTrainingBinaryCreateTranslation Instance = new ClassTrainingBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ClassTrainingBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IClassTrainingGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out ClassTraining_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ClassTrainingBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ClassTraining_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IClassTrainingGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((ClassTrainingBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IClassTrainingGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((ClassTrainingBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClassTrainingBinaryOverlay :
        BinaryOverlay,
        IClassTrainingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClassTraining_Registration.Instance;
        public static ClassTraining_Registration Registration => ClassTraining_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ClassTrainingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ClassTrainingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IClassTrainingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IClassTrainingGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IClassTrainingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClassTrainingGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ClassTrainingXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ClassTrainingXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ClassTrainingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ClassTrainingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public Skill TrainedSkill => (Skill)_data.Span.Slice(0, 1)[0];
        public Byte MaximumTrainingLevel => _data.Span[1];
        public ReadOnlySpan<Byte> Fluff => _data.Span.Slice(2, 2).ToArray();
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ClassTrainingBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ClassTrainingBinaryOverlay ClassTrainingFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new ClassTrainingBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 4),
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

