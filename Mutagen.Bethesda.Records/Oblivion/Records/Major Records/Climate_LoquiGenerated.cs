/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Climate :
        OblivionMajorRecord,
        IClimateInternal,
        ILoquiObjectSetter<Climate>,
        IEquatable<Climate>,
        IEqualsMask
    {
        #region Ctor
        protected Climate()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Weathers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WeatherChance>? _Weathers;
        public ExtendedList<WeatherChance>? Weathers
        {
            get => this._Weathers;
            set => this._Weathers = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWeatherChanceGetter>? IClimateGetter.Weathers => _Weathers;
        #endregion

        #endregion
        #region SunTexture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _SunTexture;
        public String? SunTexture
        {
            get => this._SunTexture;
            set => this._SunTexture = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClimateGetter.SunTexture => this.SunTexture;
        #endregion
        #region SunGlareTexture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _SunGlareTexture;
        public String? SunGlareTexture
        {
            get => this._SunGlareTexture;
            set => this._SunGlareTexture = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClimateGetter.SunGlareTexture => this.SunGlareTexture;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IClimateGetter.Model => this.Model;
        #endregion
        #region SunriseBegin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DateTime _SunriseBegin;
        public DateTime SunriseBegin
        {
            get => this._SunriseBegin;
            set
            {
                this.TNAMDataTypeState |= TNAMDataType.Has;
                this._SunriseBegin = value;
            }
        }
        #endregion
        #region SunriseEnd
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DateTime _SunriseEnd;
        public DateTime SunriseEnd
        {
            get => this._SunriseEnd;
            set
            {
                this.TNAMDataTypeState |= TNAMDataType.Has;
                this._SunriseEnd = value;
            }
        }
        #endregion
        #region SunsetBegin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DateTime _SunsetBegin;
        public DateTime SunsetBegin
        {
            get => this._SunsetBegin;
            set
            {
                this.TNAMDataTypeState |= TNAMDataType.Has;
                this._SunsetBegin = value;
            }
        }
        #endregion
        #region SunsetEnd
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DateTime _SunsetEnd;
        public DateTime SunsetEnd
        {
            get => this._SunsetEnd;
            set
            {
                this.TNAMDataTypeState |= TNAMDataType.Has;
                this._SunsetEnd = value;
            }
        }
        #endregion
        #region Volatility
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Volatility;
        public Byte Volatility
        {
            get => this._Volatility;
            set
            {
                this.TNAMDataTypeState |= TNAMDataType.Has;
                this._Volatility = value;
            }
        }
        #endregion
        #region Phase
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Climate.MoonPhase _Phase;
        public Climate.MoonPhase Phase
        {
            get => this._Phase;
            set
            {
                this.TNAMDataTypeState |= TNAMDataType.Has;
                this._Phase = value;
            }
        }
        #endregion
        #region PhaseLength
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _PhaseLength;
        public Byte PhaseLength
        {
            get => this._PhaseLength;
            set
            {
                this.TNAMDataTypeState |= TNAMDataType.Has;
                this._PhaseLength = value;
            }
        }
        public static RangeUInt8 PhaseLength_Range = new RangeUInt8(0, 63);
        #endregion
        #region TNAMDataTypeState
        public Climate.TNAMDataType TNAMDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClimateMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IClimateGetter rhs)) return false;
            return ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Climate obj)
        {
            return ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ClimateXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ClimateXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Climate CreateFromXml(
            XElement node,
            Climate.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Climate CreateFromXml(
            XElement node,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Climate.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Climate CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Climate();
            ((ClimateSetterCommon)((IClimateGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Climate CreateFromXml(
            string path,
            Climate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Climate CreateFromXml(
            string path,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Climate CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Climate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Climate CreateFromXml(
            Stream stream,
            Climate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Climate CreateFromXml(
            Stream stream,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Climate CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Climate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Weathers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherChance.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WeatherChance.Mask<TItem>?>>());
                this.SunTexture = initialValue;
                this.SunGlareTexture = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.SunriseBegin = initialValue;
                this.SunriseEnd = initialValue;
                this.SunsetBegin = initialValue;
                this.SunsetEnd = initialValue;
                this.Volatility = initialValue;
                this.Phase = initialValue;
                this.PhaseLength = initialValue;
                this.TNAMDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Weathers,
                TItem SunTexture,
                TItem SunGlareTexture,
                TItem Model,
                TItem SunriseBegin,
                TItem SunriseEnd,
                TItem SunsetBegin,
                TItem SunsetEnd,
                TItem Volatility,
                TItem Phase,
                TItem PhaseLength,
                TItem TNAMDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Weathers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherChance.Mask<TItem>?>>?>(Weathers, Enumerable.Empty<MaskItemIndexed<TItem, WeatherChance.Mask<TItem>?>>());
                this.SunTexture = SunTexture;
                this.SunGlareTexture = SunGlareTexture;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.SunriseBegin = SunriseBegin;
                this.SunriseEnd = SunriseEnd;
                this.SunsetBegin = SunsetBegin;
                this.SunsetEnd = SunsetEnd;
                this.Volatility = Volatility;
                this.Phase = Phase;
                this.PhaseLength = PhaseLength;
                this.TNAMDataTypeState = TNAMDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherChance.Mask<TItem>?>>?>? Weathers;
            public TItem SunTexture;
            public TItem SunGlareTexture;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem SunriseBegin;
            public TItem SunriseEnd;
            public TItem SunsetBegin;
            public TItem SunsetEnd;
            public TItem Volatility;
            public TItem Phase;
            public TItem PhaseLength;
            public TItem TNAMDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Weathers, rhs.Weathers)) return false;
                if (!object.Equals(this.SunTexture, rhs.SunTexture)) return false;
                if (!object.Equals(this.SunGlareTexture, rhs.SunGlareTexture)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.SunriseBegin, rhs.SunriseBegin)) return false;
                if (!object.Equals(this.SunriseEnd, rhs.SunriseEnd)) return false;
                if (!object.Equals(this.SunsetBegin, rhs.SunsetBegin)) return false;
                if (!object.Equals(this.SunsetEnd, rhs.SunsetEnd)) return false;
                if (!object.Equals(this.Volatility, rhs.Volatility)) return false;
                if (!object.Equals(this.Phase, rhs.Phase)) return false;
                if (!object.Equals(this.PhaseLength, rhs.PhaseLength)) return false;
                if (!object.Equals(this.TNAMDataTypeState, rhs.TNAMDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Weathers?.GetHashCode());
                ret = ret.CombineHashCode(this.SunTexture?.GetHashCode());
                ret = ret.CombineHashCode(this.SunGlareTexture?.GetHashCode());
                ret = ret.CombineHashCode(this.Model?.GetHashCode());
                ret = ret.CombineHashCode(this.SunriseBegin?.GetHashCode());
                ret = ret.CombineHashCode(this.SunriseEnd?.GetHashCode());
                ret = ret.CombineHashCode(this.SunsetBegin?.GetHashCode());
                ret = ret.CombineHashCode(this.SunsetEnd?.GetHashCode());
                ret = ret.CombineHashCode(this.Volatility?.GetHashCode());
                ret = ret.CombineHashCode(this.Phase?.GetHashCode());
                ret = ret.CombineHashCode(this.PhaseLength?.GetHashCode());
                ret = ret.CombineHashCode(this.TNAMDataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Weathers != null)
                {
                    if (!eval(this.Weathers.Overall)) return false;
                    if (this.Weathers.Specific != null)
                    {
                        foreach (var item in this.Weathers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.SunTexture)) return false;
                if (!eval(this.SunGlareTexture)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.SunriseBegin)) return false;
                if (!eval(this.SunriseEnd)) return false;
                if (!eval(this.SunsetBegin)) return false;
                if (!eval(this.SunsetEnd)) return false;
                if (!eval(this.Volatility)) return false;
                if (!eval(this.Phase)) return false;
                if (!eval(this.PhaseLength)) return false;
                if (!eval(this.TNAMDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Weathers != null)
                {
                    if (eval(this.Weathers.Overall)) return true;
                    if (this.Weathers.Specific != null)
                    {
                        foreach (var item in this.Weathers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.SunTexture)) return true;
                if (eval(this.SunGlareTexture)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.SunriseBegin)) return true;
                if (eval(this.SunriseEnd)) return true;
                if (eval(this.SunsetBegin)) return true;
                if (eval(this.SunsetEnd)) return true;
                if (eval(this.Volatility)) return true;
                if (eval(this.Phase)) return true;
                if (eval(this.PhaseLength)) return true;
                if (eval(this.TNAMDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Climate.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Weathers != null)
                {
                    obj.Weathers = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WeatherChance.Mask<R>?>>?>(eval(this.Weathers.Overall), Enumerable.Empty<MaskItemIndexed<R, WeatherChance.Mask<R>?>>());
                    if (Weathers.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WeatherChance.Mask<R>?>>();
                        obj.Weathers.Specific = l;
                        foreach (var item in Weathers.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, WeatherChance.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, WeatherChance.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SunTexture = eval(this.SunTexture);
                obj.SunGlareTexture = eval(this.SunGlareTexture);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.SunriseBegin = eval(this.SunriseBegin);
                obj.SunriseEnd = eval(this.SunriseEnd);
                obj.SunsetBegin = eval(this.SunsetBegin);
                obj.SunsetEnd = eval(this.SunsetEnd);
                obj.Volatility = eval(this.Volatility);
                obj.Phase = eval(this.Phase);
                obj.PhaseLength = eval(this.PhaseLength);
                obj.TNAMDataTypeState = eval(this.TNAMDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Climate.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Climate.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Climate.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.Weathers?.Overall ?? true)
                        && Weathers.TryGet(out var WeathersItem))
                    {
                        fg.AppendLine("Weathers =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(WeathersItem.Overall);
                            if (WeathersItem.Specific != null)
                            {
                                foreach (var subItem in WeathersItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.SunTexture ?? true)
                    {
                        fg.AppendItem(SunTexture, "SunTexture");
                    }
                    if (printMask?.SunGlareTexture ?? true)
                    {
                        fg.AppendItem(SunGlareTexture, "SunGlareTexture");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.SunriseBegin ?? true)
                    {
                        fg.AppendItem(SunriseBegin, "SunriseBegin");
                    }
                    if (printMask?.SunriseEnd ?? true)
                    {
                        fg.AppendItem(SunriseEnd, "SunriseEnd");
                    }
                    if (printMask?.SunsetBegin ?? true)
                    {
                        fg.AppendItem(SunsetBegin, "SunsetBegin");
                    }
                    if (printMask?.SunsetEnd ?? true)
                    {
                        fg.AppendItem(SunsetEnd, "SunsetEnd");
                    }
                    if (printMask?.Volatility ?? true)
                    {
                        fg.AppendItem(Volatility, "Volatility");
                    }
                    if (printMask?.Phase ?? true)
                    {
                        fg.AppendItem(Phase, "Phase");
                    }
                    if (printMask?.PhaseLength ?? true)
                    {
                        fg.AppendItem(PhaseLength, "PhaseLength");
                    }
                    if (printMask?.TNAMDataTypeState ?? true)
                    {
                        fg.AppendItem(TNAMDataTypeState, "TNAMDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherChance.ErrorMask?>>?>? Weathers;
            public Exception? SunTexture;
            public Exception? SunGlareTexture;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? SunriseBegin;
            public Exception? SunriseEnd;
            public Exception? SunsetBegin;
            public Exception? SunsetEnd;
            public Exception? Volatility;
            public Exception? Phase;
            public Exception? PhaseLength;
            public Exception? TNAMDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Climate_FieldIndex enu = (Climate_FieldIndex)index;
                switch (enu)
                {
                    case Climate_FieldIndex.Weathers:
                        return Weathers;
                    case Climate_FieldIndex.SunTexture:
                        return SunTexture;
                    case Climate_FieldIndex.SunGlareTexture:
                        return SunGlareTexture;
                    case Climate_FieldIndex.Model:
                        return Model;
                    case Climate_FieldIndex.SunriseBegin:
                        return SunriseBegin;
                    case Climate_FieldIndex.SunriseEnd:
                        return SunriseEnd;
                    case Climate_FieldIndex.SunsetBegin:
                        return SunsetBegin;
                    case Climate_FieldIndex.SunsetEnd:
                        return SunsetEnd;
                    case Climate_FieldIndex.Volatility:
                        return Volatility;
                    case Climate_FieldIndex.Phase:
                        return Phase;
                    case Climate_FieldIndex.PhaseLength:
                        return PhaseLength;
                    case Climate_FieldIndex.TNAMDataTypeState:
                        return TNAMDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Climate_FieldIndex enu = (Climate_FieldIndex)index;
                switch (enu)
                {
                    case Climate_FieldIndex.Weathers:
                        this.Weathers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherChance.ErrorMask?>>?>(ex, null);
                        break;
                    case Climate_FieldIndex.SunTexture:
                        this.SunTexture = ex;
                        break;
                    case Climate_FieldIndex.SunGlareTexture:
                        this.SunGlareTexture = ex;
                        break;
                    case Climate_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Climate_FieldIndex.SunriseBegin:
                        this.SunriseBegin = ex;
                        break;
                    case Climate_FieldIndex.SunriseEnd:
                        this.SunriseEnd = ex;
                        break;
                    case Climate_FieldIndex.SunsetBegin:
                        this.SunsetBegin = ex;
                        break;
                    case Climate_FieldIndex.SunsetEnd:
                        this.SunsetEnd = ex;
                        break;
                    case Climate_FieldIndex.Volatility:
                        this.Volatility = ex;
                        break;
                    case Climate_FieldIndex.Phase:
                        this.Phase = ex;
                        break;
                    case Climate_FieldIndex.PhaseLength:
                        this.PhaseLength = ex;
                        break;
                    case Climate_FieldIndex.TNAMDataTypeState:
                        this.TNAMDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Climate_FieldIndex enu = (Climate_FieldIndex)index;
                switch (enu)
                {
                    case Climate_FieldIndex.Weathers:
                        this.Weathers = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherChance.ErrorMask?>>?>)obj;
                        break;
                    case Climate_FieldIndex.SunTexture:
                        this.SunTexture = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.SunGlareTexture:
                        this.SunGlareTexture = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Climate_FieldIndex.SunriseBegin:
                        this.SunriseBegin = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.SunriseEnd:
                        this.SunriseEnd = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.SunsetBegin:
                        this.SunsetBegin = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.SunsetEnd:
                        this.SunsetEnd = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.Volatility:
                        this.Volatility = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.Phase:
                        this.Phase = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.PhaseLength:
                        this.PhaseLength = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.TNAMDataTypeState:
                        this.TNAMDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Weathers != null) return true;
                if (SunTexture != null) return true;
                if (SunGlareTexture != null) return true;
                if (Model != null) return true;
                if (SunriseBegin != null) return true;
                if (SunriseEnd != null) return true;
                if (SunsetBegin != null) return true;
                if (SunsetEnd != null) return true;
                if (Volatility != null) return true;
                if (Phase != null) return true;
                if (PhaseLength != null) return true;
                if (TNAMDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                if (Weathers.TryGet(out var WeathersItem))
                {
                    fg.AppendLine("Weathers =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(WeathersItem.Overall);
                        if (WeathersItem.Specific != null)
                        {
                            foreach (var subItem in WeathersItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(SunTexture, "SunTexture");
                fg.AppendItem(SunGlareTexture, "SunGlareTexture");
                Model?.ToString(fg);
                fg.AppendItem(SunriseBegin, "SunriseBegin");
                fg.AppendItem(SunriseEnd, "SunriseEnd");
                fg.AppendItem(SunsetBegin, "SunsetBegin");
                fg.AppendItem(SunsetEnd, "SunsetEnd");
                fg.AppendItem(Volatility, "Volatility");
                fg.AppendItem(Phase, "Phase");
                fg.AppendItem(PhaseLength, "PhaseLength");
                fg.AppendItem(TNAMDataTypeState, "TNAMDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Weathers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherChance.ErrorMask?>>?>(ExceptionExt.Combine(this.Weathers?.Overall, rhs.Weathers?.Overall), ExceptionExt.Combine(this.Weathers?.Specific, rhs.Weathers?.Specific));
                ret.SunTexture = this.SunTexture.Combine(rhs.SunTexture);
                ret.SunGlareTexture = this.SunGlareTexture.Combine(rhs.SunGlareTexture);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.SunriseBegin = this.SunriseBegin.Combine(rhs.SunriseBegin);
                ret.SunriseEnd = this.SunriseEnd.Combine(rhs.SunriseEnd);
                ret.SunsetBegin = this.SunsetBegin.Combine(rhs.SunsetBegin);
                ret.SunsetEnd = this.SunsetEnd.Combine(rhs.SunsetEnd);
                ret.Volatility = this.Volatility.Combine(rhs.Volatility);
                ret.Phase = this.Phase.Combine(rhs.Phase);
                ret.PhaseLength = this.PhaseLength.Combine(rhs.PhaseLength);
                ret.TNAMDataTypeState = this.TNAMDataTypeState.Combine(rhs.TNAMDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, WeatherChance.TranslationMask?> Weathers;
            public bool SunTexture;
            public bool SunGlareTexture;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public bool SunriseBegin;
            public bool SunriseEnd;
            public bool SunsetBegin;
            public bool SunsetEnd;
            public bool Volatility;
            public bool Phase;
            public bool PhaseLength;
            public bool TNAMDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Weathers = new MaskItem<bool, WeatherChance.TranslationMask?>(defaultOn, null);
                this.SunTexture = defaultOn;
                this.SunGlareTexture = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.SunriseBegin = defaultOn;
                this.SunriseEnd = defaultOn;
                this.SunsetBegin = defaultOn;
                this.SunsetEnd = defaultOn;
                this.Volatility = defaultOn;
                this.Phase = defaultOn;
                this.PhaseLength = defaultOn;
                this.TNAMDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Weathers?.Overall ?? true, Weathers?.Specific?.GetCrystal()));
                ret.Add((SunTexture, null));
                ret.Add((SunGlareTexture, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((SunriseBegin, null));
                ret.Add((SunriseEnd, null));
                ret.Add((SunsetBegin, null));
                ret.Add((SunsetEnd, null));
                ret.Add((Volatility, null));
                ret.Add((Phase, null));
                ret.Add((PhaseLength, null));
                ret.Add((TNAMDataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Climate_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum TNAMDataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => ClimateCommon.Instance.GetLinks(this);
        public Climate(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Climate(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClimateBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ClimateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Climate CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Climate CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new Climate();
            ((ClimateSetterCommon)((IClimateGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClimateGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ClimateSetterCommon)((IClimateGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Climate GetNew()
        {
            return new Climate();
        }

    }
    #endregion

    #region Interface
    public partial interface IClimate :
        IClimateGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IClimateInternal>
    {
        new ExtendedList<WeatherChance>? Weathers { get; set; }
        new String? SunTexture { get; set; }
        new String? SunGlareTexture { get; set; }
        new Model? Model { get; set; }
        new DateTime SunriseBegin { get; set; }
        new DateTime SunriseEnd { get; set; }
        new DateTime SunsetBegin { get; set; }
        new DateTime SunsetEnd { get; set; }
        new Byte Volatility { get; set; }
        new Climate.MoonPhase Phase { get; set; }
        new Byte PhaseLength { get; set; }
        new Climate.TNAMDataType TNAMDataTypeState { get; set; }
    }

    public partial interface IClimateInternal :
        IOblivionMajorRecordInternal,
        IClimate,
        IClimateGetter
    {
    }

    public partial interface IClimateGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IClimateGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        IReadOnlyList<IWeatherChanceGetter>? Weathers { get; }
        String? SunTexture { get; }
        String? SunGlareTexture { get; }
        IModelGetter? Model { get; }
        DateTime SunriseBegin { get; }
        DateTime SunriseEnd { get; }
        DateTime SunsetBegin { get; }
        DateTime SunsetEnd { get; }
        Byte Volatility { get; }
        Climate.MoonPhase Phase { get; }
        Byte PhaseLength { get; }
        Climate.TNAMDataType TNAMDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class ClimateMixIn
    {
        public static void Clear(this IClimateInternal item)
        {
            ((ClimateSetterCommon)((IClimateGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Climate.Mask<bool> GetEqualsMask(
            this IClimateGetter item,
            IClimateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IClimateGetter item,
            string? name = null,
            Climate.Mask<bool>? printMask = null)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IClimateGetter item,
            FileGeneration fg,
            string? name = null,
            Climate.Mask<bool>? printMask = null)
        {
            ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IClimateGetter item,
            Climate.Mask<bool?> checkMask)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Climate.Mask<bool> GetHasBeenSetMask(this IClimateGetter item)
        {
            var ret = new Climate.Mask<bool>(false);
            ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IClimateGetter item,
            IClimateGetter rhs)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IClimateInternal lhs,
            IClimateGetter rhs,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ClimateSetterTranslationCommon)((IClimateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Climate.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IClimateInternal lhs,
            IClimateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ClimateSetterTranslationCommon)((IClimateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Climate DeepCopy(
            this IClimateGetter item,
            Climate.TranslationMask? copyMask = null)
        {
            return ((ClimateSetterTranslationCommon)((IClimateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Climate DeepCopy(
            this IClimateGetter item,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? copyMask = null)
        {
            return ((ClimateSetterTranslationCommon)((IClimateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Climate DeepCopy(
            this IClimateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ClimateSetterTranslationCommon)((IClimateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClimateInternal item,
            XElement node,
            Climate.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClimateInternal item,
            XElement node,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Climate.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IClimateInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ClimateSetterCommon)((IClimateGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClimateInternal item,
            string path,
            Climate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClimateInternal item,
            string path,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClimateInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Climate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IClimateInternal item,
            Stream stream,
            Climate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClimateInternal item,
            Stream stream,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClimateInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Climate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IClimateInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IClimateInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ClimateSetterCommon)((IClimateGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Climate_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Weathers = 5,
        SunTexture = 6,
        SunGlareTexture = 7,
        Model = 8,
        SunriseBegin = 9,
        SunriseEnd = 10,
        SunsetBegin = 11,
        SunsetEnd = 12,
        Volatility = 13,
        Phase = 14,
        PhaseLength = 15,
        TNAMDataTypeState = 16,
    }
    #endregion

    #region Registration
    public partial class Climate_Registration : ILoquiRegistration
    {
        public static readonly Climate_Registration Instance = new Climate_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 105,
            version: 0);

        public const string GUID = "25ca8fab-7f62-4f8b-9c32-d65a3261ac05";

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 17;

        public static readonly Type MaskType = typeof(Climate.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Climate.ErrorMask);

        public static readonly Type ClassType = typeof(Climate);

        public static readonly Type GetterType = typeof(IClimateGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClimate);

        public static readonly Type? InternalSetterType = typeof(IClimateInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Climate";

        public const string Name = "Climate";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "WEATHERS":
                    return (ushort)Climate_FieldIndex.Weathers;
                case "SUNTEXTURE":
                    return (ushort)Climate_FieldIndex.SunTexture;
                case "SUNGLARETEXTURE":
                    return (ushort)Climate_FieldIndex.SunGlareTexture;
                case "MODEL":
                    return (ushort)Climate_FieldIndex.Model;
                case "SUNRISEBEGIN":
                    return (ushort)Climate_FieldIndex.SunriseBegin;
                case "SUNRISEEND":
                    return (ushort)Climate_FieldIndex.SunriseEnd;
                case "SUNSETBEGIN":
                    return (ushort)Climate_FieldIndex.SunsetBegin;
                case "SUNSETEND":
                    return (ushort)Climate_FieldIndex.SunsetEnd;
                case "VOLATILITY":
                    return (ushort)Climate_FieldIndex.Volatility;
                case "PHASE":
                    return (ushort)Climate_FieldIndex.Phase;
                case "PHASELENGTH":
                    return (ushort)Climate_FieldIndex.PhaseLength;
                case "TNAMDATATYPESTATE":
                    return (ushort)Climate_FieldIndex.TNAMDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    return true;
                case Climate_FieldIndex.SunTexture:
                case Climate_FieldIndex.SunGlareTexture:
                case Climate_FieldIndex.Model:
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                case Climate_FieldIndex.TNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                case Climate_FieldIndex.Model:
                    return true;
                case Climate_FieldIndex.SunTexture:
                case Climate_FieldIndex.SunGlareTexture:
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                case Climate_FieldIndex.TNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                case Climate_FieldIndex.SunTexture:
                case Climate_FieldIndex.SunGlareTexture:
                case Climate_FieldIndex.Model:
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                case Climate_FieldIndex.TNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    return "Weathers";
                case Climate_FieldIndex.SunTexture:
                    return "SunTexture";
                case Climate_FieldIndex.SunGlareTexture:
                    return "SunGlareTexture";
                case Climate_FieldIndex.Model:
                    return "Model";
                case Climate_FieldIndex.SunriseBegin:
                    return "SunriseBegin";
                case Climate_FieldIndex.SunriseEnd:
                    return "SunriseEnd";
                case Climate_FieldIndex.SunsetBegin:
                    return "SunsetBegin";
                case Climate_FieldIndex.SunsetEnd:
                    return "SunsetEnd";
                case Climate_FieldIndex.Volatility:
                    return "Volatility";
                case Climate_FieldIndex.Phase:
                    return "Phase";
                case Climate_FieldIndex.PhaseLength:
                    return "PhaseLength";
                case Climate_FieldIndex.TNAMDataTypeState:
                    return "TNAMDataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                case Climate_FieldIndex.SunTexture:
                case Climate_FieldIndex.SunGlareTexture:
                case Climate_FieldIndex.Model:
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                case Climate_FieldIndex.TNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                case Climate_FieldIndex.SunTexture:
                case Climate_FieldIndex.SunGlareTexture:
                case Climate_FieldIndex.Model:
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                case Climate_FieldIndex.TNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    return typeof(ExtendedList<WeatherChance>);
                case Climate_FieldIndex.SunTexture:
                    return typeof(String);
                case Climate_FieldIndex.SunGlareTexture:
                    return typeof(String);
                case Climate_FieldIndex.Model:
                    return typeof(Model);
                case Climate_FieldIndex.SunriseBegin:
                    return typeof(DateTime);
                case Climate_FieldIndex.SunriseEnd:
                    return typeof(DateTime);
                case Climate_FieldIndex.SunsetBegin:
                    return typeof(DateTime);
                case Climate_FieldIndex.SunsetEnd:
                    return typeof(DateTime);
                case Climate_FieldIndex.Volatility:
                    return typeof(Byte);
                case Climate_FieldIndex.Phase:
                    return typeof(Climate.MoonPhase);
                case Climate_FieldIndex.PhaseLength:
                    return typeof(Byte);
                case Climate_FieldIndex.TNAMDataTypeState:
                    return typeof(Climate.TNAMDataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ClimateXmlWriteTranslation);
        public static readonly RecordType CLMT_HEADER = new RecordType("CLMT");
        public static readonly RecordType WLST_HEADER = new RecordType("WLST");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType GNAM_HEADER = new RecordType("GNAM");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CLMT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(ClimateBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ClimateSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly ClimateSetterCommon Instance = new ClimateSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IClimateInternal item)
        {
            ClearPartial();
            item.Weathers = null;
            item.SunTexture = default;
            item.SunGlareTexture = default;
            item.Model = null;
            item.SunriseBegin = default;
            item.SunriseEnd = default;
            item.SunsetBegin = default;
            item.SunsetEnd = default;
            item.Volatility = default;
            item.Phase = default;
            item.PhaseLength = default;
            item.TNAMDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IClimateInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IClimateInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IClimateInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasTNAMDataType":
                    item.TNAMDataTypeState |= Climate.TNAMDataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IClimateInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ClimateXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Climate_Registration.CLMT_HEADER;
        protected static void FillBinaryStructs(
            IClimateInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IClimateInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54534C57: // WLST
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Weathers = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherChance>.Instance.ParseRepeatedItem(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: (MutagenFrame r, out WeatherChance listSubItem) =>
                            {
                                return LoquiBinaryTranslation<WeatherChance>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem,
                                    masterReferences: masterReferences);
                            })
                        .ToExtendedList<WeatherChance>();
                    return TryGet<int?>.Succeed((int)Climate_FieldIndex.Weathers);
                }
                case 0x4D414E46: // FNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.SunTexture = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Climate_FieldIndex.SunTexture);
                }
                case 0x4D414E47: // GNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.SunGlareTexture = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Climate_FieldIndex.SunGlareTexture);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Climate_FieldIndex.Model);
                }
                case 0x4D414E54: // TNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.TNAMDataTypeState = Climate.TNAMDataType.Has;
                    }
                    ClimateBinaryCreateTranslation.FillBinarySunriseBeginCustomPublic(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences);
                    ClimateBinaryCreateTranslation.FillBinarySunriseEndCustomPublic(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences);
                    ClimateBinaryCreateTranslation.FillBinarySunsetBeginCustomPublic(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences);
                    ClimateBinaryCreateTranslation.FillBinarySunsetEndCustomPublic(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences);
                    item.Volatility = dataFrame.ReadUInt8();
                    ClimateBinaryCreateTranslation.FillBinaryPhaseCustomPublic(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences);
                    ClimateBinaryCreateTranslation.FillBinaryPhaseLengthCustomPublic(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Climate_FieldIndex.PhaseLength);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IClimateInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IClimateInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ClimateCommon : OblivionMajorRecordCommon
    {
        public new static readonly ClimateCommon Instance = new ClimateCommon();

        public Climate.Mask<bool> GetEqualsMask(
            IClimateGetter item,
            IClimateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Climate.Mask<bool>(false);
            ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClimateGetter item,
            IClimateGetter rhs,
            Climate.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Weathers = item.Weathers.CollectionEqualsHelper(
                rhs.Weathers,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SunTexture = string.Equals(item.SunTexture, rhs.SunTexture);
            ret.SunGlareTexture = string.Equals(item.SunGlareTexture, rhs.SunGlareTexture);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.SunriseBegin = item.SunriseBegin == rhs.SunriseBegin;
            ret.SunriseEnd = item.SunriseEnd == rhs.SunriseEnd;
            ret.SunsetBegin = item.SunsetBegin == rhs.SunsetBegin;
            ret.SunsetEnd = item.SunsetEnd == rhs.SunsetEnd;
            ret.Volatility = item.Volatility == rhs.Volatility;
            ret.Phase = item.Phase == rhs.Phase;
            ret.PhaseLength = item.PhaseLength == rhs.PhaseLength;
            ret.TNAMDataTypeState = item.TNAMDataTypeState == rhs.TNAMDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IClimateGetter item,
            string? name = null,
            Climate.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IClimateGetter item,
            FileGeneration fg,
            string? name = null,
            Climate.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Climate =>");
            }
            else
            {
                fg.AppendLine($"{name} (Climate) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IClimateGetter item,
            FileGeneration fg,
            Climate.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Weathers?.Overall ?? true)
                && item.Weathers.TryGet(out var WeathersItem))
            {
                fg.AppendLine("Weathers =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in WeathersItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.SunTexture ?? true)
                && item.SunTexture.TryGet(out var SunTextureItem))
            {
                fg.AppendItem(SunTextureItem, "SunTexture");
            }
            if ((printMask?.SunGlareTexture ?? true)
                && item.SunGlareTexture.TryGet(out var SunGlareTextureItem))
            {
                fg.AppendItem(SunGlareTextureItem, "SunGlareTexture");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if (printMask?.SunriseBegin ?? true)
            {
                fg.AppendItem(item.SunriseBegin, "SunriseBegin");
            }
            if (printMask?.SunriseEnd ?? true)
            {
                fg.AppendItem(item.SunriseEnd, "SunriseEnd");
            }
            if (printMask?.SunsetBegin ?? true)
            {
                fg.AppendItem(item.SunsetBegin, "SunsetBegin");
            }
            if (printMask?.SunsetEnd ?? true)
            {
                fg.AppendItem(item.SunsetEnd, "SunsetEnd");
            }
            if (printMask?.Volatility ?? true)
            {
                fg.AppendItem(item.Volatility, "Volatility");
            }
            if (printMask?.Phase ?? true)
            {
                fg.AppendItem(item.Phase, "Phase");
            }
            if (printMask?.PhaseLength ?? true)
            {
                fg.AppendItem(item.PhaseLength, "PhaseLength");
            }
            if (printMask?.TNAMDataTypeState ?? true)
            {
                fg.AppendItem(item.TNAMDataTypeState, "TNAMDataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IClimateGetter item,
            Climate.Mask<bool?> checkMask)
        {
            if (checkMask.Weathers?.Overall.HasValue ?? false && checkMask.Weathers!.Overall.Value != (item.Weathers != null)) return false;
            if (checkMask.SunTexture.HasValue && checkMask.SunTexture.Value != (item.SunTexture != null)) return false;
            if (checkMask.SunGlareTexture.HasValue && checkMask.SunGlareTexture.Value != (item.SunGlareTexture != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IClimateGetter item,
            Climate.Mask<bool> mask)
        {
            if (item.Weathers.TryGet(out var WeathersItem))
            {
                mask.Weathers = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, WeatherChance.Mask<bool>?>>?>(true, WeathersItem.WithIndex().Select((i) => new MaskItemIndexed<bool, WeatherChance.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            mask.SunTexture = (item.SunTexture != null);
            mask.SunGlareTexture = (item.SunGlareTexture != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.SunriseBegin = true;
            mask.SunriseEnd = true;
            mask.SunsetBegin = true;
            mask.SunsetEnd = true;
            mask.Volatility = true;
            mask.Phase = true;
            mask.PhaseLength = true;
            mask.TNAMDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Climate_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Climate_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Climate_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Climate_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Climate_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Climate_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Climate_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Climate_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClimateGetter? lhs,
            IClimateGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.Weathers.SequenceEqual(rhs.Weathers)) return false;
            if (!string.Equals(lhs.SunTexture, rhs.SunTexture)) return false;
            if (!string.Equals(lhs.SunGlareTexture, rhs.SunGlareTexture)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (lhs.SunriseBegin != rhs.SunriseBegin) return false;
            if (lhs.SunriseEnd != rhs.SunriseEnd) return false;
            if (lhs.SunsetBegin != rhs.SunsetBegin) return false;
            if (lhs.SunsetEnd != rhs.SunsetEnd) return false;
            if (lhs.Volatility != rhs.Volatility) return false;
            if (lhs.Phase != rhs.Phase) return false;
            if (lhs.PhaseLength != rhs.PhaseLength) return false;
            if (lhs.TNAMDataTypeState != rhs.TNAMDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IClimateGetter?)lhs,
                rhs: rhs as IClimateGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IClimateGetter?)lhs,
                rhs: rhs as IClimateGetter);
        }
        
        public virtual int GetHashCode(IClimateGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Weathers).CombineHashCode(ret);
            if (item.SunTexture.TryGet(out var SunTextureitem))
            {
                ret = HashHelper.GetHashCode(SunTextureitem).CombineHashCode(ret);
            }
            if (item.SunGlareTexture.TryGet(out var SunGlareTextureitem))
            {
                ret = HashHelper.GetHashCode(SunGlareTextureitem).CombineHashCode(ret);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                ret = HashHelper.GetHashCode(Modelitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.SunriseBegin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SunriseEnd).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SunsetBegin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SunsetEnd).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Volatility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Phase).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PhaseLength).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TNAMDataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IClimateGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IClimateGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Climate.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IClimateGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            if (obj.Weathers != null)
            {
                foreach (var item in obj.Weathers.SelectMany(f => f.Links))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        partial void PostDuplicate(Climate obj, Climate rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Climate(getNextFormKey());
            ret.DeepCopyIn((Climate)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Climate)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class ClimateSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly ClimateSetterTranslationCommon Instance = new ClimateSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IClimateInternal item,
            IClimateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IClimate item,
            IClimateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.Weathers) ?? true))
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.Weathers);
                try
                {
                    if ((rhs.Weathers != null))
                    {
                        item.Weathers = 
                            rhs.Weathers
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<WeatherChance>();
                    }
                    else
                    {
                        item.Weathers = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunTexture) ?? true))
            {
                item.SunTexture = rhs.SunTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunGlareTexture) ?? true))
            {
                item.SunGlareTexture = rhs.SunGlareTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Climate_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunriseBegin) ?? true))
            {
                item.SunriseBegin = rhs.SunriseBegin;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunriseEnd) ?? true))
            {
                item.SunriseEnd = rhs.SunriseEnd;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunsetBegin) ?? true))
            {
                item.SunsetBegin = rhs.SunsetBegin;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunsetEnd) ?? true))
            {
                item.SunsetEnd = rhs.SunsetEnd;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.Volatility) ?? true))
            {
                item.Volatility = rhs.Volatility;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.Phase) ?? true))
            {
                item.Phase = rhs.Phase;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.PhaseLength) ?? true))
            {
                item.PhaseLength = rhs.PhaseLength;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.TNAMDataTypeState) ?? true))
            {
                item.TNAMDataTypeState = rhs.TNAMDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClimateInternal)item,
                rhs: (IClimateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClimate)item,
                rhs: (IClimateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClimateInternal)item,
                rhs: (IClimateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClimate)item,
                rhs: (IClimateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Climate DeepCopy(
            IClimateGetter item,
            Climate.TranslationMask? copyMask = null)
        {
            Climate ret = (Climate)((ClimateCommon)((IClimateGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Climate DeepCopy(
            IClimateGetter item,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? copyMask = null)
        {
            Climate ret = (Climate)((ClimateCommon)((IClimateGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Climate DeepCopy(
            IClimateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Climate ret = (Climate)((ClimateCommon)((IClimateGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Climate
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Climate_Registration.Instance;
        public new static Climate_Registration Registration => Climate_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClimateCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ClimateSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClimateSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClimateXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ClimateXmlWriteTranslation Instance = new ClimateXmlWriteTranslation();

        public static void WriteToNodeXml(
            IClimateGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Weathers != null)
                && (translationMask?.GetShouldTranslate((int)Climate_FieldIndex.Weathers) ?? true))
            {
                ListXmlTranslation<IWeatherChanceGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Weathers),
                    item: item.Weathers,
                    fieldIndex: (int)Climate_FieldIndex.Weathers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Climate_FieldIndex.Weathers),
                    transl: (XElement subNode, IWeatherChanceGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((WeatherChanceXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.SunTexture != null)
                && (translationMask?.GetShouldTranslate((int)Climate_FieldIndex.SunTexture) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SunTexture),
                    item: item.SunTexture,
                    fieldIndex: (int)Climate_FieldIndex.SunTexture,
                    errorMask: errorMask);
            }
            if ((item.SunGlareTexture != null)
                && (translationMask?.GetShouldTranslate((int)Climate_FieldIndex.SunGlareTexture) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SunGlareTexture),
                    item: item.SunGlareTexture,
                    fieldIndex: (int)Climate_FieldIndex.SunGlareTexture,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Climate_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Climate_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Climate_FieldIndex.Model));
                }
            }
            if (item.TNAMDataTypeState.HasFlag(Climate.TNAMDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Climate_FieldIndex.SunriseBegin) ?? true))
                {
                    DateTimeXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.SunriseBegin),
                        item: item.SunriseBegin,
                        fieldIndex: (int)Climate_FieldIndex.SunriseBegin,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Climate_FieldIndex.SunriseEnd) ?? true))
                {
                    DateTimeXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.SunriseEnd),
                        item: item.SunriseEnd,
                        fieldIndex: (int)Climate_FieldIndex.SunriseEnd,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Climate_FieldIndex.SunsetBegin) ?? true))
                {
                    DateTimeXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.SunsetBegin),
                        item: item.SunsetBegin,
                        fieldIndex: (int)Climate_FieldIndex.SunsetBegin,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Climate_FieldIndex.SunsetEnd) ?? true))
                {
                    DateTimeXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.SunsetEnd),
                        item: item.SunsetEnd,
                        fieldIndex: (int)Climate_FieldIndex.SunsetEnd,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Climate_FieldIndex.Volatility) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Volatility),
                        item: item.Volatility,
                        fieldIndex: (int)Climate_FieldIndex.Volatility,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Climate_FieldIndex.Phase) ?? true))
                {
                    EnumXmlTranslation<Climate.MoonPhase>.Instance.Write(
                        node: node,
                        name: nameof(item.Phase),
                        item: item.Phase,
                        fieldIndex: (int)Climate_FieldIndex.Phase,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Climate_FieldIndex.PhaseLength) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.PhaseLength),
                        item: item.PhaseLength,
                        fieldIndex: (int)Climate_FieldIndex.PhaseLength,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Climate_FieldIndex.TNAMDataTypeState) ?? true))
            {
                EnumXmlTranslation<Climate.TNAMDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.TNAMDataTypeState),
                    item: item.TNAMDataTypeState,
                    fieldIndex: (int)Climate_FieldIndex.TNAMDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IClimateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Climate");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Climate");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClimateGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClimateGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClimateGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ClimateXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static ClimateXmlCreateTranslation Instance = new ClimateXmlCreateTranslation();

        public static void FillPublicXml(
            IClimateInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClimateXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IClimateInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Weathers":
                    errorMask?.PushIndex((int)Climate_FieldIndex.Weathers);
                    try
                    {
                        if (ListXmlTranslation<WeatherChance>.Instance.Parse(
                            node: node,
                            enumer: out var WeathersItem,
                            transl: LoquiXmlTranslation<WeatherChance>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Weathers = WeathersItem.ToExtendedList();
                        }
                        else
                        {
                            item.Weathers = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunTexture":
                    errorMask?.PushIndex((int)Climate_FieldIndex.SunTexture);
                    try
                    {
                        item.SunTexture = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunGlareTexture":
                    errorMask?.PushIndex((int)Climate_FieldIndex.SunGlareTexture);
                    try
                    {
                        item.SunGlareTexture = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)Climate_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Climate_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunriseBegin":
                    errorMask?.PushIndex((int)Climate_FieldIndex.SunriseBegin);
                    try
                    {
                        item.SunriseBegin = DateTimeXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.TNAMDataTypeState |= Climate.TNAMDataType.Has;
                    break;
                case "SunriseEnd":
                    errorMask?.PushIndex((int)Climate_FieldIndex.SunriseEnd);
                    try
                    {
                        item.SunriseEnd = DateTimeXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunsetBegin":
                    errorMask?.PushIndex((int)Climate_FieldIndex.SunsetBegin);
                    try
                    {
                        item.SunsetBegin = DateTimeXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunsetEnd":
                    errorMask?.PushIndex((int)Climate_FieldIndex.SunsetEnd);
                    try
                    {
                        item.SunsetEnd = DateTimeXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Volatility":
                    errorMask?.PushIndex((int)Climate_FieldIndex.Volatility);
                    try
                    {
                        item.Volatility = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Phase":
                    errorMask?.PushIndex((int)Climate_FieldIndex.Phase);
                    try
                    {
                        item.Phase = EnumXmlTranslation<Climate.MoonPhase>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PhaseLength":
                    errorMask?.PushIndex((int)Climate_FieldIndex.PhaseLength);
                    try
                    {
                        item.PhaseLength = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TNAMDataTypeState":
                    errorMask?.PushIndex((int)Climate_FieldIndex.TNAMDataTypeState);
                    try
                    {
                        item.TNAMDataTypeState = EnumXmlTranslation<Climate.TNAMDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ClimateXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IClimateGetter item,
            XElement node,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ClimateXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Climate.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IClimateGetter item,
            string path,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClimateGetter item,
            Stream stream,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClimateBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ClimateBinaryWriteTranslation Instance = new ClimateBinaryWriteTranslation();

        static partial void WriteBinarySunriseBeginCustom(
            MutagenWriter writer,
            IClimateGetter item,
            MasterReferences masterReferences);

        public static void WriteBinarySunriseBegin(
            MutagenWriter writer,
            IClimateGetter item,
            MasterReferences masterReferences)
        {
            WriteBinarySunriseBeginCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        static partial void WriteBinarySunriseEndCustom(
            MutagenWriter writer,
            IClimateGetter item,
            MasterReferences masterReferences);

        public static void WriteBinarySunriseEnd(
            MutagenWriter writer,
            IClimateGetter item,
            MasterReferences masterReferences)
        {
            WriteBinarySunriseEndCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        static partial void WriteBinarySunsetBeginCustom(
            MutagenWriter writer,
            IClimateGetter item,
            MasterReferences masterReferences);

        public static void WriteBinarySunsetBegin(
            MutagenWriter writer,
            IClimateGetter item,
            MasterReferences masterReferences)
        {
            WriteBinarySunsetBeginCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        static partial void WriteBinarySunsetEndCustom(
            MutagenWriter writer,
            IClimateGetter item,
            MasterReferences masterReferences);

        public static void WriteBinarySunsetEnd(
            MutagenWriter writer,
            IClimateGetter item,
            MasterReferences masterReferences)
        {
            WriteBinarySunsetEndCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        static partial void WriteBinaryPhaseCustom(
            MutagenWriter writer,
            IClimateGetter item,
            MasterReferences masterReferences);

        public static void WriteBinaryPhase(
            MutagenWriter writer,
            IClimateGetter item,
            MasterReferences masterReferences)
        {
            WriteBinaryPhaseCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        static partial void WriteBinaryPhaseLengthCustom(
            MutagenWriter writer,
            IClimateGetter item,
            MasterReferences masterReferences);

        public static void WriteBinaryPhaseLength(
            MutagenWriter writer,
            IClimateGetter item,
            MasterReferences masterReferences)
        {
            WriteBinaryPhaseLengthCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        public static void Write_Embedded(
            IClimateGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IClimateGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IWeatherChanceGetter>.Instance.Write(
                writer: writer,
                items: item.Weathers,
                recordType: Climate_Registration.WLST_HEADER,
                transl: (MutagenWriter subWriter, IWeatherChanceGetter subItem) =>
                {
                    var Item = subItem;
                    ((WeatherChanceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                });
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SunTexture,
                header: recordTypeConverter.ConvertToCustom(Climate_Registration.FNAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SunGlareTexture,
                header: recordTypeConverter.ConvertToCustom(Climate_Registration.GNAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.TNAMDataTypeState.HasFlag(Climate.TNAMDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Climate_Registration.TNAM_HEADER)))
                {
                    ClimateBinaryWriteTranslation.WriteBinarySunriseBegin(
                        writer: writer,
                        item: item,
                        masterReferences: masterReferences);
                    ClimateBinaryWriteTranslation.WriteBinarySunriseEnd(
                        writer: writer,
                        item: item,
                        masterReferences: masterReferences);
                    ClimateBinaryWriteTranslation.WriteBinarySunsetBegin(
                        writer: writer,
                        item: item,
                        masterReferences: masterReferences);
                    ClimateBinaryWriteTranslation.WriteBinarySunsetEnd(
                        writer: writer,
                        item: item,
                        masterReferences: masterReferences);
                    writer.Write(item.Volatility);
                    ClimateBinaryWriteTranslation.WriteBinaryPhase(
                        writer: writer,
                        item: item,
                        masterReferences: masterReferences);
                    ClimateBinaryWriteTranslation.WriteBinaryPhaseLength(
                        writer: writer,
                        item: item,
                        masterReferences: masterReferences);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IClimateGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Climate_Registration.CLMT_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IClimateGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IClimateGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IClimateGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ClimateBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static ClimateBinaryCreateTranslation Instance = new ClimateBinaryCreateTranslation();

        static partial void FillBinarySunriseBeginCustom(
            MutagenFrame frame,
            IClimateInternal item,
            MasterReferences masterReferences);

        public static void FillBinarySunriseBeginCustomPublic(
            MutagenFrame frame,
            IClimateInternal item,
            MasterReferences masterReferences)
        {
            FillBinarySunriseBeginCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }

        static partial void FillBinarySunriseEndCustom(
            MutagenFrame frame,
            IClimateInternal item,
            MasterReferences masterReferences);

        public static void FillBinarySunriseEndCustomPublic(
            MutagenFrame frame,
            IClimateInternal item,
            MasterReferences masterReferences)
        {
            FillBinarySunriseEndCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }

        static partial void FillBinarySunsetBeginCustom(
            MutagenFrame frame,
            IClimateInternal item,
            MasterReferences masterReferences);

        public static void FillBinarySunsetBeginCustomPublic(
            MutagenFrame frame,
            IClimateInternal item,
            MasterReferences masterReferences)
        {
            FillBinarySunsetBeginCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }

        static partial void FillBinarySunsetEndCustom(
            MutagenFrame frame,
            IClimateInternal item,
            MasterReferences masterReferences);

        public static void FillBinarySunsetEndCustomPublic(
            MutagenFrame frame,
            IClimateInternal item,
            MasterReferences masterReferences)
        {
            FillBinarySunsetEndCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }

        static partial void FillBinaryPhaseCustom(
            MutagenFrame frame,
            IClimateInternal item,
            MasterReferences masterReferences);

        public static void FillBinaryPhaseCustomPublic(
            MutagenFrame frame,
            IClimateInternal item,
            MasterReferences masterReferences)
        {
            FillBinaryPhaseCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }

        static partial void FillBinaryPhaseLengthCustom(
            MutagenFrame frame,
            IClimateInternal item,
            MasterReferences masterReferences);

        public static void FillBinaryPhaseLengthCustomPublic(
            MutagenFrame frame,
            IClimateInternal item,
            MasterReferences masterReferences)
        {
            FillBinaryPhaseLengthCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ClimateBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClimateBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IClimateGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Climate_Registration.Instance;
        public new static Climate_Registration Registration => Climate_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClimateCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClimateSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClimateGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => ClimateCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ClimateXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ClimateXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClimateBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ClimateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        public IReadOnlyList<IWeatherChanceGetter>? Weathers { get; private set; }
        #region SunTexture
        private int? _SunTextureLocation;
        public String? SunTexture => _SunTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _SunTextureLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region SunGlareTexture
        private int? _SunGlareTextureLocation;
        public String? SunGlareTexture => _SunGlareTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _SunGlareTextureLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Model
        public IModelGetter? Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        private int? _TNAMLocation;
        public Climate.TNAMDataType TNAMDataTypeState { get; private set; }
        #region SunriseBegin
        private int _SunriseBeginLocation => _TNAMLocation!.Value + 0x0;
        private bool _SunriseBegin_IsSet => GetSunriseBeginIsSetCustom();
        public DateTime SunriseBegin => GetSunriseBeginCustom();
        #endregion
        #region SunriseEnd
        private int _SunriseEndLocation => _TNAMLocation!.Value + 0x1;
        private bool _SunriseEnd_IsSet => GetSunriseEndIsSetCustom();
        public DateTime SunriseEnd => GetSunriseEndCustom();
        #endregion
        #region SunsetBegin
        private int _SunsetBeginLocation => _TNAMLocation!.Value + 0x2;
        private bool _SunsetBegin_IsSet => GetSunsetBeginIsSetCustom();
        public DateTime SunsetBegin => GetSunsetBeginCustom();
        #endregion
        #region SunsetEnd
        private int _SunsetEndLocation => _TNAMLocation!.Value + 0x3;
        private bool _SunsetEnd_IsSet => GetSunsetEndIsSetCustom();
        public DateTime SunsetEnd => GetSunsetEndCustom();
        #endregion
        #region Volatility
        private int _VolatilityLocation => _TNAMLocation!.Value + 0x4;
        private bool _Volatility_IsSet => _TNAMLocation.HasValue;
        public Byte Volatility => _Volatility_IsSet ? _data.Span[_VolatilityLocation] : default;
        #endregion
        #region Phase
        private int _PhaseLocation => _TNAMLocation!.Value + 0x5;
        private bool _Phase_IsSet => GetPhaseIsSetCustom();
        public Climate.MoonPhase Phase => GetPhaseCustom();
        #endregion
        #region PhaseLength
        private int _PhaseLengthLocation => _TNAMLocation!.Value + 0x6;
        private bool _PhaseLength_IsSet => GetPhaseLengthIsSetCustom();
        public Byte PhaseLength => GetPhaseLengthCustom();
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ClimateBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ClimateBinaryOverlay ClimateFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new ClimateBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x54534C57: // WLST
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Weathers = BinaryOverlaySetList<WeatherChanceBinaryOverlay>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 8,
                        getter: (s, p) => WeatherChanceBinaryOverlay.WeatherChanceFactory(new BinaryMemoryReadStream(s), p));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Climate_FieldIndex.Weathers);
                }
                case 0x4D414E46: // FNAM
                {
                    _SunTextureLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Climate_FieldIndex.SunTexture);
                }
                case 0x4D414E47: // GNAM
                {
                    _SunGlareTextureLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Climate_FieldIndex.SunGlareTexture);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Climate_FieldIndex.Model);
                }
                case 0x4D414E54: // TNAM
                {
                    _TNAMLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.TNAMDataTypeState = Climate.TNAMDataType.Has;
                    return TryGet<int?>.Succeed((int)Climate_FieldIndex.PhaseLength);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

