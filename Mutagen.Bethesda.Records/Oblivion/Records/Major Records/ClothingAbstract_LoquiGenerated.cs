/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public abstract partial class ClothingAbstract :
        ItemAbstract,
        IClothingAbstractInternal,
        ILoquiObjectSetter<ClothingAbstract>,
        INamed,
        IEquatable<ClothingAbstract>,
        IEqualsMask
    {
        #region Ctor
        protected ClothingAbstract()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClothingAbstractGetter.Name => this.Name;
        #endregion
        #region Script
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDSetLink<Script> _Script = new FormIDSetLink<Script>();
        public IFormIDSetLink<Script> Script => this._Script;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLinkGetter<IScriptGetter> IClothingAbstractGetter.Script => this.Script;
        #endregion
        #region Enchantment
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDSetLink<Enchantment> _Enchantment = new FormIDSetLink<Enchantment>();
        public IFormIDSetLink<Enchantment> Enchantment => this._Enchantment;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLinkGetter<IEnchantmentGetter> IClothingAbstractGetter.Enchantment => this.Enchantment;
        #endregion
        #region EnchantmentPoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16? _EnchantmentPoints;
        public UInt16? EnchantmentPoints
        {
            get => this._EnchantmentPoints;
            set => this._EnchantmentPoints = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IClothingAbstractGetter.EnchantmentPoints => this.EnchantmentPoints;
        #endregion
        #region BipedFlags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BipedFlag _BipedFlags;
        public BipedFlag BipedFlags
        {
            get => this._BipedFlags;
            set
            {
                this.BMDTDataTypeState |= BMDTDataType.Has;
                this._BipedFlags = value;
            }
        }
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EquipmentFlag _Flags;
        public EquipmentFlag Flags
        {
            get => this._Flags;
            set
            {
                this.BMDTDataTypeState |= BMDTDataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region MaleBipedModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _MaleBipedModel;
        public Model? MaleBipedModel
        {
            get => _MaleBipedModel;
            set => _MaleBipedModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IClothingAbstractGetter.MaleBipedModel => this.MaleBipedModel;
        #endregion
        #region MaleWorldModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _MaleWorldModel;
        public Model? MaleWorldModel
        {
            get => _MaleWorldModel;
            set => _MaleWorldModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IClothingAbstractGetter.MaleWorldModel => this.MaleWorldModel;
        #endregion
        #region MaleIcon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _MaleIcon;
        public String? MaleIcon
        {
            get => this._MaleIcon;
            set => this._MaleIcon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClothingAbstractGetter.MaleIcon => this.MaleIcon;
        #endregion
        #region FemaleBipedModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _FemaleBipedModel;
        public Model? FemaleBipedModel
        {
            get => _FemaleBipedModel;
            set => _FemaleBipedModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IClothingAbstractGetter.FemaleBipedModel => this.FemaleBipedModel;
        #endregion
        #region FemaleWorldModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _FemaleWorldModel;
        public Model? FemaleWorldModel
        {
            get => _FemaleWorldModel;
            set => _FemaleWorldModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IClothingAbstractGetter.FemaleWorldModel => this.FemaleWorldModel;
        #endregion
        #region FemaleIcon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _FemaleIcon;
        public String? FemaleIcon
        {
            get => this._FemaleIcon;
            set => this._FemaleIcon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClothingAbstractGetter.FemaleIcon => this.FemaleIcon;
        #endregion
        #region BMDTDataTypeState
        public ClothingAbstract.BMDTDataType BMDTDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClothingAbstractMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IClothingAbstractGetter rhs)) return false;
            return ((ClothingAbstractCommon)((IClothingAbstractGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ClothingAbstract obj)
        {
            return ((ClothingAbstractCommon)((IClothingAbstractGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ClothingAbstractCommon)((IClothingAbstractGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ClothingAbstractXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ClothingAbstractXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new ClothingAbstract CreateFromXml(
            XElement node,
            ClothingAbstract.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ClothingAbstract CreateFromXml(
            XElement node,
            out ClothingAbstract.ErrorMask errorMask,
            ClothingAbstract.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ClothingAbstract.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static ClothingAbstract CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if (!LoquiXmlTranslation.Instance.TryCreate(node, out ClothingAbstract ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown ClothingAbstract subclass: {node.Name.LocalName}");
            }
            ((ClothingAbstractSetterCommon)((IClothingAbstractGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ClothingAbstract CreateFromXml(
            string path,
            ClothingAbstract.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ClothingAbstract CreateFromXml(
            string path,
            out ClothingAbstract.ErrorMask errorMask,
            ClothingAbstract.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ClothingAbstract CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            ClothingAbstract.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ClothingAbstract CreateFromXml(
            Stream stream,
            ClothingAbstract.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ClothingAbstract CreateFromXml(
            Stream stream,
            out ClothingAbstract.ErrorMask errorMask,
            ClothingAbstract.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ClothingAbstract CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ClothingAbstract.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            ItemAbstract.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Script = initialValue;
                this.Enchantment = initialValue;
                this.EnchantmentPoints = initialValue;
                this.BipedFlags = initialValue;
                this.Flags = initialValue;
                this.MaleBipedModel = new MaskItem<T, Model.Mask<T>?>(initialValue, new Model.Mask<T>(initialValue));
                this.MaleWorldModel = new MaskItem<T, Model.Mask<T>?>(initialValue, new Model.Mask<T>(initialValue));
                this.MaleIcon = initialValue;
                this.FemaleBipedModel = new MaskItem<T, Model.Mask<T>?>(initialValue, new Model.Mask<T>(initialValue));
                this.FemaleWorldModel = new MaskItem<T, Model.Mask<T>?>(initialValue, new Model.Mask<T>(initialValue));
                this.FemaleIcon = initialValue;
                this.BMDTDataTypeState = initialValue;
            }

            public Mask(
                T MajorRecordFlagsRaw,
                T FormKey,
                T Version,
                T EditorID,
                T OblivionMajorRecordFlags,
                T Name,
                T Script,
                T Enchantment,
                T EnchantmentPoints,
                T BipedFlags,
                T Flags,
                T MaleBipedModel,
                T MaleWorldModel,
                T MaleIcon,
                T FemaleBipedModel,
                T FemaleWorldModel,
                T FemaleIcon,
                T BMDTDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Script = Script;
                this.Enchantment = Enchantment;
                this.EnchantmentPoints = EnchantmentPoints;
                this.BipedFlags = BipedFlags;
                this.Flags = Flags;
                this.MaleBipedModel = new MaskItem<T, Model.Mask<T>?>(MaleBipedModel, new Model.Mask<T>(MaleBipedModel));
                this.MaleWorldModel = new MaskItem<T, Model.Mask<T>?>(MaleWorldModel, new Model.Mask<T>(MaleWorldModel));
                this.MaleIcon = MaleIcon;
                this.FemaleBipedModel = new MaskItem<T, Model.Mask<T>?>(FemaleBipedModel, new Model.Mask<T>(FemaleBipedModel));
                this.FemaleWorldModel = new MaskItem<T, Model.Mask<T>?>(FemaleWorldModel, new Model.Mask<T>(FemaleWorldModel));
                this.FemaleIcon = FemaleIcon;
                this.BMDTDataTypeState = BMDTDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T Name;
            public T Script;
            public T Enchantment;
            public T EnchantmentPoints;
            public T BipedFlags;
            public T Flags;
            public MaskItem<T, Model.Mask<T>?>? MaleBipedModel { get; set; }
            public MaskItem<T, Model.Mask<T>?>? MaleWorldModel { get; set; }
            public T MaleIcon;
            public MaskItem<T, Model.Mask<T>?>? FemaleBipedModel { get; set; }
            public MaskItem<T, Model.Mask<T>?>? FemaleWorldModel { get; set; }
            public T FemaleIcon;
            public T BMDTDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.Enchantment, rhs.Enchantment)) return false;
                if (!object.Equals(this.EnchantmentPoints, rhs.EnchantmentPoints)) return false;
                if (!object.Equals(this.BipedFlags, rhs.BipedFlags)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.MaleBipedModel, rhs.MaleBipedModel)) return false;
                if (!object.Equals(this.MaleWorldModel, rhs.MaleWorldModel)) return false;
                if (!object.Equals(this.MaleIcon, rhs.MaleIcon)) return false;
                if (!object.Equals(this.FemaleBipedModel, rhs.FemaleBipedModel)) return false;
                if (!object.Equals(this.FemaleWorldModel, rhs.FemaleWorldModel)) return false;
                if (!object.Equals(this.FemaleIcon, rhs.FemaleIcon)) return false;
                if (!object.Equals(this.BMDTDataTypeState, rhs.BMDTDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Name?.GetHashCode());
                ret = ret.CombineHashCode(this.Script?.GetHashCode());
                ret = ret.CombineHashCode(this.Enchantment?.GetHashCode());
                ret = ret.CombineHashCode(this.EnchantmentPoints?.GetHashCode());
                ret = ret.CombineHashCode(this.BipedFlags?.GetHashCode());
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.MaleBipedModel?.GetHashCode());
                ret = ret.CombineHashCode(this.MaleWorldModel?.GetHashCode());
                ret = ret.CombineHashCode(this.MaleIcon?.GetHashCode());
                ret = ret.CombineHashCode(this.FemaleBipedModel?.GetHashCode());
                ret = ret.CombineHashCode(this.FemaleWorldModel?.GetHashCode());
                ret = ret.CombineHashCode(this.FemaleIcon?.GetHashCode());
                ret = ret.CombineHashCode(this.BMDTDataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All Equal
            public override bool AllEqual(Func<T, bool> eval)
            {
                if (!base.AllEqual(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Script)) return false;
                if (!eval(this.Enchantment)) return false;
                if (!eval(this.EnchantmentPoints)) return false;
                if (!eval(this.BipedFlags)) return false;
                if (!eval(this.Flags)) return false;
                if (MaleBipedModel != null)
                {
                    if (!eval(this.MaleBipedModel.Overall)) return false;
                    if (this.MaleBipedModel.Specific != null && !this.MaleBipedModel.Specific.AllEqual(eval)) return false;
                }
                if (MaleWorldModel != null)
                {
                    if (!eval(this.MaleWorldModel.Overall)) return false;
                    if (this.MaleWorldModel.Specific != null && !this.MaleWorldModel.Specific.AllEqual(eval)) return false;
                }
                if (!eval(this.MaleIcon)) return false;
                if (FemaleBipedModel != null)
                {
                    if (!eval(this.FemaleBipedModel.Overall)) return false;
                    if (this.FemaleBipedModel.Specific != null && !this.FemaleBipedModel.Specific.AllEqual(eval)) return false;
                }
                if (FemaleWorldModel != null)
                {
                    if (!eval(this.FemaleWorldModel.Overall)) return false;
                    if (this.FemaleWorldModel.Specific != null && !this.FemaleWorldModel.Specific.AllEqual(eval)) return false;
                }
                if (!eval(this.FemaleIcon)) return false;
                if (!eval(this.BMDTDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new ClothingAbstract.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Script = eval(this.Script);
                obj.Enchantment = eval(this.Enchantment);
                obj.EnchantmentPoints = eval(this.EnchantmentPoints);
                obj.BipedFlags = eval(this.BipedFlags);
                obj.Flags = eval(this.Flags);
                obj.MaleBipedModel = this.MaleBipedModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.MaleBipedModel.Overall), this.MaleBipedModel.Specific?.Translate(eval));
                obj.MaleWorldModel = this.MaleWorldModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.MaleWorldModel.Overall), this.MaleWorldModel.Specific?.Translate(eval));
                obj.MaleIcon = eval(this.MaleIcon);
                obj.FemaleBipedModel = this.FemaleBipedModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.FemaleBipedModel.Overall), this.FemaleBipedModel.Specific?.Translate(eval));
                obj.FemaleWorldModel = this.FemaleWorldModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.FemaleWorldModel.Overall), this.FemaleWorldModel.Specific?.Translate(eval));
                obj.FemaleIcon = eval(this.FemaleIcon);
                obj.BMDTDataTypeState = eval(this.BMDTDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ClothingAbstract.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ClothingAbstract.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ClothingAbstract.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendLine($"Name => {Name}");
                    }
                    if (printMask?.Script ?? true)
                    {
                        fg.AppendLine($"Script => {Script}");
                    }
                    if (printMask?.Enchantment ?? true)
                    {
                        fg.AppendLine($"Enchantment => {Enchantment}");
                    }
                    if (printMask?.EnchantmentPoints ?? true)
                    {
                        fg.AppendLine($"EnchantmentPoints => {EnchantmentPoints}");
                    }
                    if (printMask?.BipedFlags ?? true)
                    {
                        fg.AppendLine($"BipedFlags => {BipedFlags}");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendLine($"Flags => {Flags}");
                    }
                    if (printMask?.MaleBipedModel?.Overall ?? true)
                    {
                        MaleBipedModel?.ToString(fg);
                    }
                    if (printMask?.MaleWorldModel?.Overall ?? true)
                    {
                        MaleWorldModel?.ToString(fg);
                    }
                    if (printMask?.MaleIcon ?? true)
                    {
                        fg.AppendLine($"MaleIcon => {MaleIcon}");
                    }
                    if (printMask?.FemaleBipedModel?.Overall ?? true)
                    {
                        FemaleBipedModel?.ToString(fg);
                    }
                    if (printMask?.FemaleWorldModel?.Overall ?? true)
                    {
                        FemaleWorldModel?.ToString(fg);
                    }
                    if (printMask?.FemaleIcon ?? true)
                    {
                        fg.AppendLine($"FemaleIcon => {FemaleIcon}");
                    }
                    if (printMask?.BMDTDataTypeState ?? true)
                    {
                        fg.AppendLine($"BMDTDataTypeState => {BMDTDataTypeState}");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ItemAbstract.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Script;
            public Exception? Enchantment;
            public Exception? EnchantmentPoints;
            public Exception? BipedFlags;
            public Exception? Flags;
            public MaskItem<Exception?, Model.ErrorMask?>? MaleBipedModel;
            public MaskItem<Exception?, Model.ErrorMask?>? MaleWorldModel;
            public Exception? MaleIcon;
            public MaskItem<Exception?, Model.ErrorMask?>? FemaleBipedModel;
            public MaskItem<Exception?, Model.ErrorMask?>? FemaleWorldModel;
            public Exception? FemaleIcon;
            public Exception? BMDTDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
                switch (enu)
                {
                    case ClothingAbstract_FieldIndex.Name:
                        return Name;
                    case ClothingAbstract_FieldIndex.Script:
                        return Script;
                    case ClothingAbstract_FieldIndex.Enchantment:
                        return Enchantment;
                    case ClothingAbstract_FieldIndex.EnchantmentPoints:
                        return EnchantmentPoints;
                    case ClothingAbstract_FieldIndex.BipedFlags:
                        return BipedFlags;
                    case ClothingAbstract_FieldIndex.Flags:
                        return Flags;
                    case ClothingAbstract_FieldIndex.MaleBipedModel:
                        return MaleBipedModel;
                    case ClothingAbstract_FieldIndex.MaleWorldModel:
                        return MaleWorldModel;
                    case ClothingAbstract_FieldIndex.MaleIcon:
                        return MaleIcon;
                    case ClothingAbstract_FieldIndex.FemaleBipedModel:
                        return FemaleBipedModel;
                    case ClothingAbstract_FieldIndex.FemaleWorldModel:
                        return FemaleWorldModel;
                    case ClothingAbstract_FieldIndex.FemaleIcon:
                        return FemaleIcon;
                    case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                        return BMDTDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
                switch (enu)
                {
                    case ClothingAbstract_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case ClothingAbstract_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case ClothingAbstract_FieldIndex.Enchantment:
                        this.Enchantment = ex;
                        break;
                    case ClothingAbstract_FieldIndex.EnchantmentPoints:
                        this.EnchantmentPoints = ex;
                        break;
                    case ClothingAbstract_FieldIndex.BipedFlags:
                        this.BipedFlags = ex;
                        break;
                    case ClothingAbstract_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case ClothingAbstract_FieldIndex.MaleBipedModel:
                        this.MaleBipedModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case ClothingAbstract_FieldIndex.MaleWorldModel:
                        this.MaleWorldModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case ClothingAbstract_FieldIndex.MaleIcon:
                        this.MaleIcon = ex;
                        break;
                    case ClothingAbstract_FieldIndex.FemaleBipedModel:
                        this.FemaleBipedModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case ClothingAbstract_FieldIndex.FemaleWorldModel:
                        this.FemaleWorldModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case ClothingAbstract_FieldIndex.FemaleIcon:
                        this.FemaleIcon = ex;
                        break;
                    case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                        this.BMDTDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
                switch (enu)
                {
                    case ClothingAbstract_FieldIndex.Name:
                        this.Name = (Exception)obj;
                        break;
                    case ClothingAbstract_FieldIndex.Script:
                        this.Script = (Exception)obj;
                        break;
                    case ClothingAbstract_FieldIndex.Enchantment:
                        this.Enchantment = (Exception)obj;
                        break;
                    case ClothingAbstract_FieldIndex.EnchantmentPoints:
                        this.EnchantmentPoints = (Exception)obj;
                        break;
                    case ClothingAbstract_FieldIndex.BipedFlags:
                        this.BipedFlags = (Exception)obj;
                        break;
                    case ClothingAbstract_FieldIndex.Flags:
                        this.Flags = (Exception)obj;
                        break;
                    case ClothingAbstract_FieldIndex.MaleBipedModel:
                        this.MaleBipedModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case ClothingAbstract_FieldIndex.MaleWorldModel:
                        this.MaleWorldModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case ClothingAbstract_FieldIndex.MaleIcon:
                        this.MaleIcon = (Exception)obj;
                        break;
                    case ClothingAbstract_FieldIndex.FemaleBipedModel:
                        this.FemaleBipedModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case ClothingAbstract_FieldIndex.FemaleWorldModel:
                        this.FemaleWorldModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case ClothingAbstract_FieldIndex.FemaleIcon:
                        this.FemaleIcon = (Exception)obj;
                        break;
                    case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                        this.BMDTDataTypeState = (Exception)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Script != null) return true;
                if (Enchantment != null) return true;
                if (EnchantmentPoints != null) return true;
                if (BipedFlags != null) return true;
                if (Flags != null) return true;
                if (MaleBipedModel != null) return true;
                if (MaleWorldModel != null) return true;
                if (MaleIcon != null) return true;
                if (FemaleBipedModel != null) return true;
                if (FemaleWorldModel != null) return true;
                if (FemaleIcon != null) return true;
                if (BMDTDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg)
            {
                fg.AppendLine("ErrorMask =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendLine($"Name => {Name}");
                fg.AppendLine($"Script => {Script}");
                fg.AppendLine($"Enchantment => {Enchantment}");
                fg.AppendLine($"EnchantmentPoints => {EnchantmentPoints}");
                fg.AppendLine($"BipedFlags => {BipedFlags}");
                fg.AppendLine($"Flags => {Flags}");
                MaleBipedModel?.ToString(fg);
                MaleWorldModel?.ToString(fg);
                fg.AppendLine($"MaleIcon => {MaleIcon}");
                FemaleBipedModel?.ToString(fg);
                FemaleWorldModel?.ToString(fg);
                fg.AppendLine($"FemaleIcon => {FemaleIcon}");
                fg.AppendLine($"BMDTDataTypeState => {BMDTDataTypeState}");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Script = this.Script.Combine(rhs.Script);
                ret.Enchantment = this.Enchantment.Combine(rhs.Enchantment);
                ret.EnchantmentPoints = this.EnchantmentPoints.Combine(rhs.EnchantmentPoints);
                ret.BipedFlags = this.BipedFlags.Combine(rhs.BipedFlags);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.MaleBipedModel = new MaskItem<Exception?, Model.ErrorMask?>(ExceptionExt.Combine(this.MaleBipedModel?.Overall, rhs.MaleBipedModel?.Overall), (this.MaleBipedModel?.Specific as IErrorMask<Model.ErrorMask>)?.Combine(rhs.MaleBipedModel?.Specific));
                ret.MaleWorldModel = new MaskItem<Exception?, Model.ErrorMask?>(ExceptionExt.Combine(this.MaleWorldModel?.Overall, rhs.MaleWorldModel?.Overall), (this.MaleWorldModel?.Specific as IErrorMask<Model.ErrorMask>)?.Combine(rhs.MaleWorldModel?.Specific));
                ret.MaleIcon = this.MaleIcon.Combine(rhs.MaleIcon);
                ret.FemaleBipedModel = new MaskItem<Exception?, Model.ErrorMask?>(ExceptionExt.Combine(this.FemaleBipedModel?.Overall, rhs.FemaleBipedModel?.Overall), (this.FemaleBipedModel?.Specific as IErrorMask<Model.ErrorMask>)?.Combine(rhs.FemaleBipedModel?.Specific));
                ret.FemaleWorldModel = new MaskItem<Exception?, Model.ErrorMask?>(ExceptionExt.Combine(this.FemaleWorldModel?.Overall, rhs.FemaleWorldModel?.Overall), (this.FemaleWorldModel?.Specific as IErrorMask<Model.ErrorMask>)?.Combine(rhs.FemaleWorldModel?.Specific));
                ret.FemaleIcon = this.FemaleIcon.Combine(rhs.FemaleIcon);
                ret.BMDTDataTypeState = this.BMDTDataTypeState.Combine(rhs.BMDTDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ItemAbstract.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Script;
            public bool Enchantment;
            public bool EnchantmentPoints;
            public bool BipedFlags;
            public bool Flags;
            public MaskItem<bool, Model.TranslationMask?> MaleBipedModel;
            public MaskItem<bool, Model.TranslationMask?> MaleWorldModel;
            public bool MaleIcon;
            public MaskItem<bool, Model.TranslationMask?> FemaleBipedModel;
            public MaskItem<bool, Model.TranslationMask?> FemaleWorldModel;
            public bool FemaleIcon;
            public bool BMDTDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Script = defaultOn;
                this.Enchantment = defaultOn;
                this.EnchantmentPoints = defaultOn;
                this.BipedFlags = defaultOn;
                this.Flags = defaultOn;
                this.MaleBipedModel = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.MaleWorldModel = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.MaleIcon = defaultOn;
                this.FemaleBipedModel = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.FemaleWorldModel = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.FemaleIcon = defaultOn;
                this.BMDTDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Script, null));
                ret.Add((Enchantment, null));
                ret.Add((EnchantmentPoints, null));
                ret.Add((BipedFlags, null));
                ret.Add((Flags, null));
                ret.Add((MaleBipedModel?.Overall ?? true, MaleBipedModel?.Specific?.GetCrystal()));
                ret.Add((MaleWorldModel?.Overall ?? true, MaleWorldModel?.Specific?.GetCrystal()));
                ret.Add((MaleIcon, null));
                ret.Add((FemaleBipedModel?.Overall ?? true, FemaleBipedModel?.Specific?.GetCrystal()));
                ret.Add((FemaleWorldModel?.Overall ?? true, FemaleWorldModel?.Specific?.GetCrystal()));
                ret.Add((FemaleIcon, null));
                ret.Add((BMDTDataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        [Flags]
        public enum BMDTDataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => ClothingAbstractCommon.Instance.GetLinks(this);
        public ClothingAbstract(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public ClothingAbstract(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClothingAbstractBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ClothingAbstractBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClothingAbstractGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ClothingAbstractSetterCommon)((IClothingAbstractGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ClothingAbstract GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    public partial interface IClothingAbstract :
        IClothingAbstractGetter,
        IItemAbstract,
        ILoquiObjectSetter<IClothingAbstractInternal>
    {
        new String? Name { get; set; }
        new IFormIDSetLink<Script> Script { get; }
        new IFormIDSetLink<Enchantment> Enchantment { get; }
        new UInt16? EnchantmentPoints { get; set; }
        new BipedFlag BipedFlags { get; set; }
        new EquipmentFlag Flags { get; set; }
        new Model? MaleBipedModel { get; set; }
        new Model? MaleWorldModel { get; set; }
        new String? MaleIcon { get; set; }
        new Model? FemaleBipedModel { get; set; }
        new Model? FemaleWorldModel { get; set; }
        new String? FemaleIcon { get; set; }
        new ClothingAbstract.BMDTDataType BMDTDataTypeState { get; set; }
    }

    public partial interface IClothingAbstractInternal :
        IItemAbstractInternal,
        IClothingAbstract,
        IClothingAbstractGetter
    {
    }

    public partial interface IClothingAbstractGetter :
        IItemAbstractGetter,
        ILoquiObject<IClothingAbstractGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Name { get; }
        IFormIDSetLinkGetter<IScriptGetter> Script { get; }
        IFormIDSetLinkGetter<IEnchantmentGetter> Enchantment { get; }
        UInt16? EnchantmentPoints { get; }
        BipedFlag BipedFlags { get; }
        EquipmentFlag Flags { get; }
        IModelGetter? MaleBipedModel { get; }
        IModelGetter? MaleWorldModel { get; }
        String? MaleIcon { get; }
        IModelGetter? FemaleBipedModel { get; }
        IModelGetter? FemaleWorldModel { get; }
        String? FemaleIcon { get; }
        ClothingAbstract.BMDTDataType BMDTDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class ClothingAbstractMixIn
    {
        public static void Clear(this IClothingAbstractInternal item)
        {
            ((ClothingAbstractSetterCommon)((IClothingAbstractGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ClothingAbstract.Mask<bool> GetEqualsMask(
            this IClothingAbstractGetter item,
            IClothingAbstractGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClothingAbstractCommon)((IClothingAbstractGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IClothingAbstractGetter item,
            string? name = null,
            ClothingAbstract.Mask<bool>? printMask = null)
        {
            return ((ClothingAbstractCommon)((IClothingAbstractGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IClothingAbstractGetter item,
            FileGeneration fg,
            string? name = null,
            ClothingAbstract.Mask<bool>? printMask = null)
        {
            ((ClothingAbstractCommon)((IClothingAbstractGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IClothingAbstractGetter item,
            ClothingAbstract.Mask<bool?> checkMask)
        {
            return ((ClothingAbstractCommon)((IClothingAbstractGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ClothingAbstract.Mask<bool> GetHasBeenSetMask(this IClothingAbstractGetter item)
        {
            var ret = new ClothingAbstract.Mask<bool>(false);
            ((ClothingAbstractCommon)((IClothingAbstractGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IClothingAbstractGetter item,
            IClothingAbstractGetter rhs)
        {
            return ((ClothingAbstractCommon)((IClothingAbstractGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IClothingAbstractInternal lhs,
            IClothingAbstractGetter rhs,
            out ClothingAbstract.ErrorMask errorMask,
            ClothingAbstract.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ClothingAbstractSetterTranslationCommon)((IClothingAbstractGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ClothingAbstract.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IClothingAbstractInternal lhs,
            IClothingAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ClothingAbstractSetterTranslationCommon)((IClothingAbstractGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ClothingAbstract DeepCopy(
            this IClothingAbstractGetter item,
            ClothingAbstract.TranslationMask? copyMask = null)
        {
            return ((ClothingAbstractSetterTranslationCommon)((IClothingAbstractGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ClothingAbstract DeepCopy(
            this IClothingAbstractGetter item,
            out ClothingAbstract.ErrorMask errorMask,
            ClothingAbstract.TranslationMask? copyMask = null)
        {
            return ((ClothingAbstractSetterTranslationCommon)((IClothingAbstractGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ClothingAbstract DeepCopy(
            this IClothingAbstractGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ClothingAbstractSetterTranslationCommon)((IClothingAbstractGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClothingAbstractInternal item,
            XElement node,
            ClothingAbstract.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClothingAbstractInternal item,
            XElement node,
            out ClothingAbstract.ErrorMask errorMask,
            ClothingAbstract.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ClothingAbstract.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IClothingAbstractInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ClothingAbstractSetterCommon)((IClothingAbstractGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClothingAbstractInternal item,
            string path,
            ClothingAbstract.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClothingAbstractInternal item,
            string path,
            out ClothingAbstract.ErrorMask errorMask,
            ClothingAbstract.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClothingAbstractInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            ClothingAbstract.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IClothingAbstractInternal item,
            Stream stream,
            ClothingAbstract.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClothingAbstractInternal item,
            Stream stream,
            out ClothingAbstract.ErrorMask errorMask,
            ClothingAbstract.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClothingAbstractInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ClothingAbstract.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IClothingAbstractInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IClothingAbstractInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ClothingAbstractSetterCommon)((IClothingAbstractGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ClothingAbstract_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Script = 6,
        Enchantment = 7,
        EnchantmentPoints = 8,
        BipedFlags = 9,
        Flags = 10,
        MaleBipedModel = 11,
        MaleWorldModel = 12,
        MaleIcon = 13,
        FemaleBipedModel = 14,
        FemaleWorldModel = 15,
        FemaleIcon = 16,
        BMDTDataTypeState = 17,
    }
    #endregion

    #region Registration
    public partial class ClothingAbstract_Registration : ILoquiRegistration
    {
        public static readonly ClothingAbstract_Registration Instance = new ClothingAbstract_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 69,
            version: 0);

        public const string GUID = "45098216-a539-4788-84f5-ece76ab7abf2";

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(ClothingAbstract.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ClothingAbstract.ErrorMask);

        public static readonly Type ClassType = typeof(ClothingAbstract);

        public static readonly Type GetterType = typeof(IClothingAbstractGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClothingAbstract);

        public static readonly Type? InternalSetterType = typeof(IClothingAbstractInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.ClothingAbstract";

        public const string Name = "ClothingAbstract";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)ClothingAbstract_FieldIndex.Name;
                case "SCRIPT":
                    return (ushort)ClothingAbstract_FieldIndex.Script;
                case "ENCHANTMENT":
                    return (ushort)ClothingAbstract_FieldIndex.Enchantment;
                case "ENCHANTMENTPOINTS":
                    return (ushort)ClothingAbstract_FieldIndex.EnchantmentPoints;
                case "BIPEDFLAGS":
                    return (ushort)ClothingAbstract_FieldIndex.BipedFlags;
                case "FLAGS":
                    return (ushort)ClothingAbstract_FieldIndex.Flags;
                case "MALEBIPEDMODEL":
                    return (ushort)ClothingAbstract_FieldIndex.MaleBipedModel;
                case "MALEWORLDMODEL":
                    return (ushort)ClothingAbstract_FieldIndex.MaleWorldModel;
                case "MALEICON":
                    return (ushort)ClothingAbstract_FieldIndex.MaleIcon;
                case "FEMALEBIPEDMODEL":
                    return (ushort)ClothingAbstract_FieldIndex.FemaleBipedModel;
                case "FEMALEWORLDMODEL":
                    return (ushort)ClothingAbstract_FieldIndex.FemaleWorldModel;
                case "FEMALEICON":
                    return (ushort)ClothingAbstract_FieldIndex.FemaleIcon;
                case "BMDTDATATYPESTATE":
                    return (ushort)ClothingAbstract_FieldIndex.BMDTDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                case ClothingAbstract_FieldIndex.Script:
                case ClothingAbstract_FieldIndex.Enchantment:
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                case ClothingAbstract_FieldIndex.MaleIcon:
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                case ClothingAbstract_FieldIndex.FemaleIcon:
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return true;
                case ClothingAbstract_FieldIndex.Name:
                case ClothingAbstract_FieldIndex.Script:
                case ClothingAbstract_FieldIndex.Enchantment:
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                case ClothingAbstract_FieldIndex.MaleIcon:
                case ClothingAbstract_FieldIndex.FemaleIcon:
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                case ClothingAbstract_FieldIndex.Script:
                case ClothingAbstract_FieldIndex.Enchantment:
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                case ClothingAbstract_FieldIndex.MaleIcon:
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                case ClothingAbstract_FieldIndex.FemaleIcon:
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                    return "Name";
                case ClothingAbstract_FieldIndex.Script:
                    return "Script";
                case ClothingAbstract_FieldIndex.Enchantment:
                    return "Enchantment";
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    return "EnchantmentPoints";
                case ClothingAbstract_FieldIndex.BipedFlags:
                    return "BipedFlags";
                case ClothingAbstract_FieldIndex.Flags:
                    return "Flags";
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    return "MaleBipedModel";
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    return "MaleWorldModel";
                case ClothingAbstract_FieldIndex.MaleIcon:
                    return "MaleIcon";
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    return "FemaleBipedModel";
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return "FemaleWorldModel";
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return "FemaleIcon";
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return "BMDTDataTypeState";
                default:
                    return ItemAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                case ClothingAbstract_FieldIndex.Script:
                case ClothingAbstract_FieldIndex.Enchantment:
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                case ClothingAbstract_FieldIndex.MaleIcon:
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                case ClothingAbstract_FieldIndex.FemaleIcon:
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                case ClothingAbstract_FieldIndex.Script:
                case ClothingAbstract_FieldIndex.Enchantment:
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                case ClothingAbstract_FieldIndex.MaleIcon:
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                case ClothingAbstract_FieldIndex.FemaleIcon:
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                    return typeof(String);
                case ClothingAbstract_FieldIndex.Script:
                    return typeof(IFormIDSetLink<Script>);
                case ClothingAbstract_FieldIndex.Enchantment:
                    return typeof(IFormIDSetLink<Enchantment>);
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    return typeof(UInt16);
                case ClothingAbstract_FieldIndex.BipedFlags:
                    return typeof(BipedFlag);
                case ClothingAbstract_FieldIndex.Flags:
                    return typeof(EquipmentFlag);
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    return typeof(Model);
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    return typeof(Model);
                case ClothingAbstract_FieldIndex.MaleIcon:
                    return typeof(String);
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    return typeof(Model);
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return typeof(Model);
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return typeof(String);
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return typeof(ClothingAbstract.BMDTDataType);
                default:
                    return ItemAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ClothingAbstractXmlWriteTranslation);
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType BMDT_HEADER = new RecordType("BMDT");
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType CLOT_HEADER = new RecordType("CLOT");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType MOD2_HEADER = new RecordType("MOD2");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType MOD3_HEADER = new RecordType("MOD3");
        public static readonly RecordType MOD4_HEADER = new RecordType("MOD4");
        public static readonly RecordType ICO2_HEADER = new RecordType("ICO2");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        FULL_HEADER,
                        SCRI_HEADER,
                        ENAM_HEADER,
                        ANAM_HEADER,
                        BMDT_HEADER,
                        ARMO_HEADER,
                        CLOT_HEADER
                    })
            );
        });
        public static RecordTypeConverter MaleWorldModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODL_HEADER,
                new RecordType("MOD2")),
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODB_HEADER,
                new RecordType("MO2B")),
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODT_HEADER,
                new RecordType("MO2T")));
        public static RecordTypeConverter FemaleBipedModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODL_HEADER,
                new RecordType("MOD3")),
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODB_HEADER,
                new RecordType("MO3B")),
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODT_HEADER,
                new RecordType("MO3T")));
        public static RecordTypeConverter FemaleWorldModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODL_HEADER,
                new RecordType("MOD4")),
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODB_HEADER,
                new RecordType("MO4B")),
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODT_HEADER,
                new RecordType("MO4T")));
        public const int NumStructFields = 0;
        public const int NumTypedFields = 10;
        public static readonly Type BinaryWriteTranslation = typeof(ClothingAbstractBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ClothingAbstractSetterCommon : ItemAbstractSetterCommon
    {
        public new static readonly ClothingAbstractSetterCommon Instance = new ClothingAbstractSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IClothingAbstractInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Script.Unset();
            item.Enchantment.Unset();
            item.EnchantmentPoints = default;
            item.BipedFlags = default;
            item.Flags = default;
            item.MaleBipedModel = null;
            item.MaleWorldModel = null;
            item.MaleIcon = default;
            item.FemaleBipedModel = null;
            item.FemaleWorldModel = null;
            item.FemaleIcon = default;
            item.BMDTDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IItemAbstractInternal item)
        {
            Clear(item: (IClothingAbstractInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IClothingAbstractInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IClothingAbstractInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IClothingAbstractInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasBMDTDataType":
                    item.BMDTDataTypeState |= ClothingAbstract.BMDTDataType.Has;
                    break;
                default:
                    ItemAbstractSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IClothingAbstractInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ClothingAbstractXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => throw new ArgumentException();
        protected static void FillBinaryStructs(
            IClothingAbstractInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            ItemAbstractSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IClothingAbstractInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.Name);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Script.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.Script);
                }
                case 0x4D414E45: // ENAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Enchantment.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.Enchantment);
                }
                case 0x4D414E41: // ANAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.EnchantmentPoints = frame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.EnchantmentPoints);
                }
                case 0x54444D42: // BMDT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.BMDTDataTypeState = ClothingAbstract.BMDTDataType.Has;
                    }
                    item.BipedFlags = EnumBinaryTranslation<BipedFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(2));
                    item.Flags = EnumBinaryTranslation<EquipmentFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(2));
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.Flags);
                }
                case 0x4C444F4D: // MODL
                {
                    item.MaleBipedModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.MaleBipedModel);
                }
                case 0x32444F4D: // MOD2
                {
                    item.MaleWorldModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: ClothingAbstract_Registration.MaleWorldModelConverter,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.MaleWorldModel);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MaleIcon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.MaleIcon);
                }
                case 0x33444F4D: // MOD3
                {
                    item.FemaleBipedModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: ClothingAbstract_Registration.FemaleBipedModelConverter,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.FemaleBipedModel);
                }
                case 0x34444F4D: // MOD4
                {
                    item.FemaleWorldModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: ClothingAbstract_Registration.FemaleWorldModelConverter,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.FemaleWorldModel);
                }
                case 0x324F4349: // ICO2
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FemaleIcon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.FemaleIcon);
                }
                default:
                    return ItemAbstractSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IClothingAbstractInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
        }
        
        #endregion
        
    }
    public partial class ClothingAbstractCommon : ItemAbstractCommon
    {
        public new static readonly ClothingAbstractCommon Instance = new ClothingAbstractCommon();

        public ClothingAbstract.Mask<bool> GetEqualsMask(
            IClothingAbstractGetter item,
            IClothingAbstractGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ClothingAbstract.Mask<bool>(false);
            ((ClothingAbstractCommon)((IClothingAbstractGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClothingAbstractGetter item,
            IClothingAbstractGetter rhs,
            ClothingAbstract.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Script = object.Equals(item.Script, rhs.Script);
            ret.Enchantment = object.Equals(item.Enchantment, rhs.Enchantment);
            ret.EnchantmentPoints = item.EnchantmentPoints == rhs.EnchantmentPoints;
            ret.BipedFlags = item.BipedFlags == rhs.BipedFlags;
            ret.Flags = item.Flags == rhs.Flags;
            ret.MaleBipedModel = EqualsMaskHelper.EqualsHelper(
                item.MaleBipedModel,
                rhs.MaleBipedModel,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.MaleWorldModel = EqualsMaskHelper.EqualsHelper(
                item.MaleWorldModel,
                rhs.MaleWorldModel,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.MaleIcon = string.Equals(item.MaleIcon, rhs.MaleIcon);
            ret.FemaleBipedModel = EqualsMaskHelper.EqualsHelper(
                item.FemaleBipedModel,
                rhs.FemaleBipedModel,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.FemaleWorldModel = EqualsMaskHelper.EqualsHelper(
                item.FemaleWorldModel,
                rhs.FemaleWorldModel,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.FemaleIcon = string.Equals(item.FemaleIcon, rhs.FemaleIcon);
            ret.BMDTDataTypeState = item.BMDTDataTypeState == rhs.BMDTDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IClothingAbstractGetter item,
            string? name = null,
            ClothingAbstract.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IClothingAbstractGetter item,
            FileGeneration fg,
            string? name = null,
            ClothingAbstract.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ClothingAbstract =>");
            }
            else
            {
                fg.AppendLine($"{name} (ClothingAbstract) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IClothingAbstractGetter item,
            FileGeneration fg,
            ClothingAbstract.Mask<bool>? printMask = null)
        {
            ItemAbstractCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendLine($"Script => {item.Script}");
            }
            if (printMask?.Enchantment ?? true)
            {
                fg.AppendLine($"Enchantment => {item.Enchantment}");
            }
            if (printMask?.EnchantmentPoints ?? true)
            {
                fg.AppendLine($"EnchantmentPoints => {item.EnchantmentPoints}");
            }
            if (printMask?.BipedFlags ?? true)
            {
                fg.AppendLine($"BipedFlags => {item.BipedFlags}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.MaleBipedModel?.Overall ?? true)
            {
                item.MaleBipedModel?.ToString(fg, "MaleBipedModel");
            }
            if (printMask?.MaleWorldModel?.Overall ?? true)
            {
                item.MaleWorldModel?.ToString(fg, "MaleWorldModel");
            }
            if (printMask?.MaleIcon ?? true)
            {
                fg.AppendLine($"MaleIcon => {item.MaleIcon}");
            }
            if (printMask?.FemaleBipedModel?.Overall ?? true)
            {
                item.FemaleBipedModel?.ToString(fg, "FemaleBipedModel");
            }
            if (printMask?.FemaleWorldModel?.Overall ?? true)
            {
                item.FemaleWorldModel?.ToString(fg, "FemaleWorldModel");
            }
            if (printMask?.FemaleIcon ?? true)
            {
                fg.AppendLine($"FemaleIcon => {item.FemaleIcon}");
            }
            if (printMask?.BMDTDataTypeState ?? true)
            {
                fg.AppendLine($"BMDTDataTypeState => {item.BMDTDataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            IClothingAbstractGetter item,
            ClothingAbstract.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script.HasBeenSet) return false;
            if (checkMask.Enchantment.HasValue && checkMask.Enchantment.Value != item.Enchantment.HasBeenSet) return false;
            if (checkMask.EnchantmentPoints.HasValue && checkMask.EnchantmentPoints.Value != (item.EnchantmentPoints != null)) return false;
            if (checkMask.MaleBipedModel?.Overall.HasValue ?? false && checkMask.MaleBipedModel.Overall.Value != (item.MaleBipedModel != null)) return false;
            if (checkMask.MaleBipedModel?.Specific != null && (item.MaleBipedModel == null || !item.MaleBipedModel.HasBeenSet(checkMask.MaleBipedModel.Specific))) return false;
            if (checkMask.MaleWorldModel?.Overall.HasValue ?? false && checkMask.MaleWorldModel.Overall.Value != (item.MaleWorldModel != null)) return false;
            if (checkMask.MaleWorldModel?.Specific != null && (item.MaleWorldModel == null || !item.MaleWorldModel.HasBeenSet(checkMask.MaleWorldModel.Specific))) return false;
            if (checkMask.MaleIcon.HasValue && checkMask.MaleIcon.Value != (item.MaleIcon != null)) return false;
            if (checkMask.FemaleBipedModel?.Overall.HasValue ?? false && checkMask.FemaleBipedModel.Overall.Value != (item.FemaleBipedModel != null)) return false;
            if (checkMask.FemaleBipedModel?.Specific != null && (item.FemaleBipedModel == null || !item.FemaleBipedModel.HasBeenSet(checkMask.FemaleBipedModel.Specific))) return false;
            if (checkMask.FemaleWorldModel?.Overall.HasValue ?? false && checkMask.FemaleWorldModel.Overall.Value != (item.FemaleWorldModel != null)) return false;
            if (checkMask.FemaleWorldModel?.Specific != null && (item.FemaleWorldModel == null || !item.FemaleWorldModel.HasBeenSet(checkMask.FemaleWorldModel.Specific))) return false;
            if (checkMask.FemaleIcon.HasValue && checkMask.FemaleIcon.Value != (item.FemaleIcon != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IClothingAbstractGetter item,
            ClothingAbstract.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            mask.Script = item.Script.HasBeenSet;
            mask.Enchantment = item.Enchantment.HasBeenSet;
            mask.EnchantmentPoints = (item.EnchantmentPoints != null);
            mask.BipedFlags = true;
            mask.Flags = true;
            var itemMaleBipedModel = item.MaleBipedModel;
            mask.MaleBipedModel = new MaskItem<bool, Model.Mask<bool>?>(itemMaleBipedModel != null, itemMaleBipedModel?.GetHasBeenSetMask());
            var itemMaleWorldModel = item.MaleWorldModel;
            mask.MaleWorldModel = new MaskItem<bool, Model.Mask<bool>?>(itemMaleWorldModel != null, itemMaleWorldModel?.GetHasBeenSetMask());
            mask.MaleIcon = (item.MaleIcon != null);
            var itemFemaleBipedModel = item.FemaleBipedModel;
            mask.FemaleBipedModel = new MaskItem<bool, Model.Mask<bool>?>(itemFemaleBipedModel != null, itemFemaleBipedModel?.GetHasBeenSetMask());
            var itemFemaleWorldModel = item.FemaleWorldModel;
            mask.FemaleWorldModel = new MaskItem<bool, Model.Mask<bool>?>(itemFemaleWorldModel != null, itemFemaleWorldModel?.GetHasBeenSetMask());
            mask.FemaleIcon = (item.FemaleIcon != null);
            mask.BMDTDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static ClothingAbstract_FieldIndex ConvertFieldIndex(ItemAbstract_FieldIndex index)
        {
            switch (index)
            {
                case ItemAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.FormKey:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.Version:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.EditorID:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (ClothingAbstract_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new ClothingAbstract_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (ClothingAbstract_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new ClothingAbstract_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ClothingAbstract_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClothingAbstractGetter? lhs,
            IClothingAbstractGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.Script.Equals(rhs.Script)) return false;
            if (!lhs.Enchantment.Equals(rhs.Enchantment)) return false;
            if (lhs.EnchantmentPoints != rhs.EnchantmentPoints) return false;
            if (lhs.BipedFlags != rhs.BipedFlags) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!object.Equals(lhs.MaleBipedModel, rhs.MaleBipedModel)) return false;
            if (!object.Equals(lhs.MaleWorldModel, rhs.MaleWorldModel)) return false;
            if (!string.Equals(lhs.MaleIcon, rhs.MaleIcon)) return false;
            if (!object.Equals(lhs.FemaleBipedModel, rhs.FemaleBipedModel)) return false;
            if (!object.Equals(lhs.FemaleWorldModel, rhs.FemaleWorldModel)) return false;
            if (!string.Equals(lhs.FemaleIcon, rhs.FemaleIcon)) return false;
            if (lhs.BMDTDataTypeState != rhs.BMDTDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IItemAbstractGetter? lhs,
            IItemAbstractGetter? rhs)
        {
            return Equals(
                lhs: (IClothingAbstractGetter?)lhs,
                rhs: rhs as IClothingAbstractGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IClothingAbstractGetter?)lhs,
                rhs: rhs as IClothingAbstractGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IClothingAbstractGetter?)lhs,
                rhs: rhs as IClothingAbstractGetter);
        }
        
        public virtual int GetHashCode(IClothingAbstractGetter item)
        {
            int ret = 0;
            if (item.Name.TryGet(out var Nameitem))
            {
                ret = HashHelper.GetHashCode(Nameitem).CombineHashCode(ret);
            }
            if (item.Script.TryGet(out var Scriptitem))
            {
                ret = HashHelper.GetHashCode(Scriptitem).CombineHashCode(ret);
            }
            if (item.Enchantment.TryGet(out var Enchantmentitem))
            {
                ret = HashHelper.GetHashCode(Enchantmentitem).CombineHashCode(ret);
            }
            if (item.EnchantmentPoints.TryGet(out var EnchantmentPointsitem))
            {
                ret = HashHelper.GetHashCode(EnchantmentPointsitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.BipedFlags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            if (item.MaleBipedModel.TryGet(out var MaleBipedModelitem))
            {
                ret = HashHelper.GetHashCode(MaleBipedModelitem).CombineHashCode(ret);
            }
            if (item.MaleWorldModel.TryGet(out var MaleWorldModelitem))
            {
                ret = HashHelper.GetHashCode(MaleWorldModelitem).CombineHashCode(ret);
            }
            if (item.MaleIcon.TryGet(out var MaleIconitem))
            {
                ret = HashHelper.GetHashCode(MaleIconitem).CombineHashCode(ret);
            }
            if (item.FemaleBipedModel.TryGet(out var FemaleBipedModelitem))
            {
                ret = HashHelper.GetHashCode(FemaleBipedModelitem).CombineHashCode(ret);
            }
            if (item.FemaleWorldModel.TryGet(out var FemaleWorldModelitem))
            {
                ret = HashHelper.GetHashCode(FemaleWorldModelitem).CombineHashCode(ret);
            }
            if (item.FemaleIcon.TryGet(out var FemaleIconitem))
            {
                ret = HashHelper.GetHashCode(FemaleIconitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.BMDTDataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IItemAbstractGetter item)
        {
            return GetHashCode(item: (IClothingAbstractGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IClothingAbstractGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IClothingAbstractGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ClothingAbstract.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IClothingAbstractGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Script;
            yield return obj.Enchantment;
            yield break;
        }
        
        partial void PostDuplicate(ClothingAbstract obj, ClothingAbstract rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            throw new NotImplementedException();
        }
        
        #endregion
        
    }
    public partial class ClothingAbstractSetterTranslationCommon : ItemAbstractSetterTranslationCommon
    {
        public new static readonly ClothingAbstractSetterTranslationCommon Instance = new ClothingAbstractSetterTranslationCommon();

        #region Deep Copy Fields From
        public virtual void DeepCopyIn(
            IClothingAbstractInternal item,
            IClothingAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public virtual void DeepCopyIn(
            IClothingAbstract item,
            IClothingAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.Script) ?? true))
            {
                item.Script.SetToFormKey(rhs: rhs.Script);
            }
            if ((copyMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.Enchantment) ?? true))
            {
                item.Enchantment.SetToFormKey(rhs: rhs.Enchantment);
            }
            if ((copyMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.EnchantmentPoints) ?? true))
            {
                item.EnchantmentPoints = rhs.EnchantmentPoints;
            }
            if ((copyMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.BipedFlags) ?? true))
            {
                item.BipedFlags = rhs.BipedFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.MaleBipedModel) ?? true))
            {
                errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.MaleBipedModel);
                try
                {
                    if(rhs.MaleBipedModel.TryGet(out var rhsMaleBipedModel))
                    {
                        item.MaleBipedModel = rhsMaleBipedModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.MaleBipedModel));
                    }
                    else
                    {
                        item.MaleBipedModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.MaleWorldModel) ?? true))
            {
                errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.MaleWorldModel);
                try
                {
                    if(rhs.MaleWorldModel.TryGet(out var rhsMaleWorldModel))
                    {
                        item.MaleWorldModel = rhsMaleWorldModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.MaleWorldModel));
                    }
                    else
                    {
                        item.MaleWorldModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.MaleIcon) ?? true))
            {
                item.MaleIcon = rhs.MaleIcon;
            }
            if ((copyMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.FemaleBipedModel) ?? true))
            {
                errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.FemaleBipedModel);
                try
                {
                    if(rhs.FemaleBipedModel.TryGet(out var rhsFemaleBipedModel))
                    {
                        item.FemaleBipedModel = rhsFemaleBipedModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.FemaleBipedModel));
                    }
                    else
                    {
                        item.FemaleBipedModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.FemaleWorldModel) ?? true))
            {
                errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.FemaleWorldModel);
                try
                {
                    if(rhs.FemaleWorldModel.TryGet(out var rhsFemaleWorldModel))
                    {
                        item.FemaleWorldModel = rhsFemaleWorldModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.FemaleWorldModel));
                    }
                    else
                    {
                        item.FemaleWorldModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.FemaleIcon) ?? true))
            {
                item.FemaleIcon = rhs.FemaleIcon;
            }
            if ((copyMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.BMDTDataTypeState) ?? true))
            {
                item.BMDTDataTypeState = rhs.BMDTDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IItemAbstractInternal item,
            IItemAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClothingAbstractInternal)item,
                rhs: (IClothingAbstractGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IItemAbstract item,
            IItemAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClothingAbstract)item,
                rhs: (IClothingAbstractGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClothingAbstractInternal)item,
                rhs: (IClothingAbstractGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClothingAbstract)item,
                rhs: (IClothingAbstractGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClothingAbstractInternal)item,
                rhs: (IClothingAbstractGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClothingAbstract)item,
                rhs: (IClothingAbstractGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public ClothingAbstract DeepCopy(
            IClothingAbstractGetter item,
            ClothingAbstract.TranslationMask? copyMask = null)
        {
            ClothingAbstract ret = (ClothingAbstract)((ClothingAbstractCommon)((IClothingAbstractGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ClothingAbstract DeepCopy(
            IClothingAbstractGetter item,
            out ClothingAbstract.ErrorMask errorMask,
            ClothingAbstract.TranslationMask? copyMask = null)
        {
            ClothingAbstract ret = (ClothingAbstract)((ClothingAbstractCommon)((IClothingAbstractGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ClothingAbstract DeepCopy(
            IClothingAbstractGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ClothingAbstract ret = (ClothingAbstract)((ClothingAbstractCommon)((IClothingAbstractGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ClothingAbstract
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClothingAbstract_Registration.Instance;
        public new static ClothingAbstract_Registration Registration => ClothingAbstract_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClothingAbstractCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ClothingAbstractSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClothingAbstractSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClothingAbstractXmlWriteTranslation :
        ItemAbstractXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ClothingAbstractXmlWriteTranslation Instance = new ClothingAbstractXmlWriteTranslation();

        public static void WriteToNodeXml(
            IClothingAbstractGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ItemAbstractXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Script.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script.FormKey,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.Enchantment.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.Enchantment) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Enchantment),
                    item: item.Enchantment.FormKey,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.Enchantment,
                    errorMask: errorMask);
            }
            if ((item.EnchantmentPoints != null)
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.EnchantmentPoints) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EnchantmentPoints),
                    item: item.EnchantmentPoints.Value,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.EnchantmentPoints,
                    errorMask: errorMask);
            }
            if (item.BMDTDataTypeState.HasFlag(ClothingAbstract.BMDTDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.BipedFlags) ?? true))
                {
                    EnumXmlTranslation<BipedFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.BipedFlags),
                        item: item.BipedFlags,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.BipedFlags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<EquipmentFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.Flags,
                        errorMask: errorMask);
                }
            }
            if ((item.MaleBipedModel != null)
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.MaleBipedModel) ?? true))
            {
                var loquiItem = item.MaleBipedModel;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.MaleBipedModel),
                    fieldIndex: (int)ClothingAbstract_FieldIndex.MaleBipedModel,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.MaleBipedModel));
            }
            if ((item.MaleWorldModel != null)
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.MaleWorldModel) ?? true))
            {
                var loquiItem = item.MaleWorldModel;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.MaleWorldModel),
                    fieldIndex: (int)ClothingAbstract_FieldIndex.MaleWorldModel,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.MaleWorldModel));
            }
            if ((item.MaleIcon != null)
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.MaleIcon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaleIcon),
                    item: item.MaleIcon,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.MaleIcon,
                    errorMask: errorMask);
            }
            if ((item.FemaleBipedModel != null)
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.FemaleBipedModel) ?? true))
            {
                var loquiItem = item.FemaleBipedModel;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.FemaleBipedModel),
                    fieldIndex: (int)ClothingAbstract_FieldIndex.FemaleBipedModel,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.FemaleBipedModel));
            }
            if ((item.FemaleWorldModel != null)
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.FemaleWorldModel) ?? true))
            {
                var loquiItem = item.FemaleWorldModel;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.FemaleWorldModel),
                    fieldIndex: (int)ClothingAbstract_FieldIndex.FemaleWorldModel,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.FemaleWorldModel));
            }
            if ((item.FemaleIcon != null)
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.FemaleIcon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FemaleIcon),
                    item: item.FemaleIcon,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.FemaleIcon,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.BMDTDataTypeState) ?? true))
            {
                EnumXmlTranslation<ClothingAbstract.BMDTDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.BMDTDataTypeState),
                    item: item.BMDTDataTypeState,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.BMDTDataTypeState,
                    errorMask: errorMask);
            }
        }

        public virtual void Write(
            XElement node,
            IClothingAbstractGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ClothingAbstract");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ClothingAbstract");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClothingAbstractGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IItemAbstractGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClothingAbstractGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClothingAbstractGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClothingAbstractGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ClothingAbstractXmlCreateTranslation : ItemAbstractXmlCreateTranslation
    {
        public new readonly static ClothingAbstractXmlCreateTranslation Instance = new ClothingAbstractXmlCreateTranslation();

        public static void FillPublicXml(
            IClothingAbstractInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClothingAbstractXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IClothingAbstractInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.Name);
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.Script);
                        item.Script.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Enchantment":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.Enchantment);
                        item.Enchantment.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnchantmentPoints":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.EnchantmentPoints);
                        item.EnchantmentPoints = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BipedFlags":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.BipedFlags);
                        item.BipedFlags = EnumXmlTranslation<BipedFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.BMDTDataTypeState |= ClothingAbstract.BMDTDataType.Has;
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.Flags);
                        item.Flags = EnumXmlTranslation<EquipmentFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleBipedModel":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.MaleBipedModel);
                        item.MaleBipedModel = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.MaleBipedModel));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleWorldModel":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.MaleWorldModel);
                        item.MaleWorldModel = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.MaleWorldModel));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleIcon":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.MaleIcon);
                        item.MaleIcon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleBipedModel":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.FemaleBipedModel);
                        item.FemaleBipedModel = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.FemaleBipedModel));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleWorldModel":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.FemaleWorldModel);
                        item.FemaleWorldModel = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.FemaleWorldModel));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleIcon":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.FemaleIcon);
                        item.FemaleIcon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BMDTDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.BMDTDataTypeState);
                        item.BMDTDataTypeState = EnumXmlTranslation<ClothingAbstract.BMDTDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ItemAbstractXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ClothingAbstractXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IClothingAbstractGetter item,
            XElement node,
            out ClothingAbstract.ErrorMask errorMask,
            ClothingAbstract.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ClothingAbstractXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ClothingAbstract.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IClothingAbstractGetter item,
            string path,
            out ClothingAbstract.ErrorMask errorMask,
            ClothingAbstract.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClothingAbstractGetter item,
            Stream stream,
            out ClothingAbstract.ErrorMask errorMask,
            ClothingAbstract.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClothingAbstractBinaryWriteTranslation :
        ItemAbstractBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ClothingAbstractBinaryWriteTranslation Instance = new ClothingAbstractBinaryWriteTranslation();

        public static void Write_Embedded(
            IClothingAbstractGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IClothingAbstractGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.SCRI_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Enchantment,
                header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.ENAM_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EnchantmentPoints,
                header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.ANAM_HEADER));
            if (item.BMDTDataTypeState.HasFlag(ClothingAbstract.BMDTDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.BMDT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<BipedFlag>.Instance.Write(
                        writer,
                        item.BipedFlags,
                        length: 2);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<EquipmentFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 2);
                }
            }
            {
                var loquiItem = item.MaleBipedModel;
                if (loquiItem != null)
                {
                    ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            {
                var loquiItem = item.MaleWorldModel;
                if (loquiItem != null)
                {
                    ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: ClothingAbstract_Registration.MaleWorldModelConverter);
                }
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaleIcon,
                header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.ICON_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            {
                var loquiItem = item.FemaleBipedModel;
                if (loquiItem != null)
                {
                    ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: ClothingAbstract_Registration.FemaleBipedModelConverter);
                }
            }
            {
                var loquiItem = item.FemaleWorldModel;
                if (loquiItem != null)
                {
                    ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: ClothingAbstract_Registration.FemaleWorldModelConverter);
                }
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FemaleIcon,
                header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.ICO2_HEADER),
                binaryType: StringBinaryType.NullTerminate);
        }

        public virtual void Write(
            MutagenWriter writer,
            IClothingAbstractGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IClothingAbstractGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IItemAbstractGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IClothingAbstractGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IClothingAbstractGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IClothingAbstractGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ClothingAbstractBinaryCreateTranslation : ItemAbstractBinaryCreateTranslation
    {
        public new readonly static ClothingAbstractBinaryCreateTranslation Instance = new ClothingAbstractBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ClothingAbstractBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClothingAbstractBinaryOverlay :
        ItemAbstractBinaryOverlay,
        IClothingAbstractGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClothingAbstract_Registration.Instance;
        public new static ClothingAbstract_Registration Registration => ClothingAbstract_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClothingAbstractCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClothingAbstractSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClothingAbstractGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => ClothingAbstractCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ClothingAbstractXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ClothingAbstractXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClothingAbstractBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ClothingAbstractBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormIDSetLinkGetter<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormIDSetLink<IScriptGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormIDSetLink<IScriptGetter>.Empty;
        #endregion
        #region Enchantment
        private int? _EnchantmentLocation;
        public bool Enchantment_IsSet => _EnchantmentLocation.HasValue;
        public IFormIDSetLinkGetter<IEnchantmentGetter> Enchantment => _EnchantmentLocation.HasValue ? new FormIDSetLink<IEnchantmentGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _EnchantmentLocation.Value, _package.Meta)))) : FormIDSetLink<IEnchantmentGetter>.Empty;
        #endregion
        #region EnchantmentPoints
        private int? _EnchantmentPointsLocation;
        public UInt16? EnchantmentPoints => _EnchantmentPointsLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _EnchantmentPointsLocation.Value, _package.Meta)) : default(UInt16?);
        #endregion
        private int? _BMDTLocation;
        public ClothingAbstract.BMDTDataType BMDTDataTypeState { get; private set; }
        #region BipedFlags
        private int _BipedFlagsLocation => _BMDTLocation!.Value + 0x0;
        private bool _BipedFlags_IsSet => _BMDTLocation.HasValue;
        public BipedFlag BipedFlags => _BipedFlags_IsSet ? (BipedFlag)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_BipedFlagsLocation, 2)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _BMDTLocation!.Value + 0x2;
        private bool _Flags_IsSet => _BMDTLocation.HasValue;
        public EquipmentFlag Flags => _Flags_IsSet ? (EquipmentFlag)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_FlagsLocation, 2)) : default;
        #endregion
        #region MaleBipedModel
        public IModelGetter? MaleBipedModel { get; private set; }
        public bool MaleBipedModel_IsSet => MaleBipedModel != null;
        #endregion
        #region MaleWorldModel
        public IModelGetter? MaleWorldModel { get; private set; }
        public bool MaleWorldModel_IsSet => MaleWorldModel != null;
        #endregion
        #region MaleIcon
        private int? _MaleIconLocation;
        public String? MaleIcon => _MaleIconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _MaleIconLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region FemaleBipedModel
        public IModelGetter? FemaleBipedModel { get; private set; }
        public bool FemaleBipedModel_IsSet => FemaleBipedModel != null;
        #endregion
        #region FemaleWorldModel
        public IModelGetter? FemaleWorldModel { get; private set; }
        public bool FemaleWorldModel_IsSet => FemaleWorldModel != null;
        #endregion
        #region FemaleIcon
        private int? _FemaleIconLocation;
        public String? FemaleIcon => _FemaleIconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _FemaleIconLocation.Value, _package.Meta)) : default(string?);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ClothingAbstractBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.Name);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.Script);
                }
                case 0x4D414E45: // ENAM
                {
                    _EnchantmentLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.Enchantment);
                }
                case 0x4D414E41: // ANAM
                {
                    _EnchantmentPointsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.EnchantmentPoints);
                }
                case 0x54444D42: // BMDT
                {
                    _BMDTLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.BMDTDataTypeState = ClothingAbstract.BMDTDataType.Has;
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.Flags);
                }
                case 0x4C444F4D: // MODL
                {
                    this.MaleBipedModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.MaleBipedModel);
                }
                case 0x32444F4D: // MOD2
                {
                    this.MaleWorldModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: ClothingAbstract_Registration.MaleWorldModelConverter);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.MaleWorldModel);
                }
                case 0x4E4F4349: // ICON
                {
                    _MaleIconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.MaleIcon);
                }
                case 0x33444F4D: // MOD3
                {
                    this.FemaleBipedModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: ClothingAbstract_Registration.FemaleBipedModelConverter);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.FemaleBipedModel);
                }
                case 0x34444F4D: // MOD4
                {
                    this.FemaleWorldModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: ClothingAbstract_Registration.FemaleWorldModelConverter);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.FemaleWorldModel);
                }
                case 0x324F4349: // ICO2
                {
                    _FemaleIconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.FemaleIcon);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

