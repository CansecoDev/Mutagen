/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class CombatStyle :
        OblivionMajorRecord,
        ICombatStyleInternal,
        ILoquiObjectSetter<CombatStyle>,
        IEquatable<CombatStyle>,
        IEqualsMask
    {
        #region Ctor
        protected CombatStyle()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DodgePercentChance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _DodgePercentChance;
        public Byte DodgePercentChance
        {
            get => this._DodgePercentChance;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._DodgePercentChance = value;
            }
        }
        public static RangeUInt8 DodgePercentChance_Range = new RangeUInt8(0, 100);
        #endregion
        #region LeftRightPercentChance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _LeftRightPercentChance;
        public Byte LeftRightPercentChance
        {
            get => this._LeftRightPercentChance;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._LeftRightPercentChance = value;
            }
        }
        public static RangeUInt8 LeftRightPercentChance_Range = new RangeUInt8(0, 100);
        #endregion
        #region DodgeLeftRightTimerMin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _DodgeLeftRightTimerMin;
        public Single DodgeLeftRightTimerMin
        {
            get => this._DodgeLeftRightTimerMin;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._DodgeLeftRightTimerMin = value;
            }
        }
        #endregion
        #region DodgeLeftRightTimerMax
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _DodgeLeftRightTimerMax;
        public Single DodgeLeftRightTimerMax
        {
            get => this._DodgeLeftRightTimerMax;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._DodgeLeftRightTimerMax = value;
            }
        }
        #endregion
        #region DodgeForwardTimerMin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _DodgeForwardTimerMin;
        public Single DodgeForwardTimerMin
        {
            get => this._DodgeForwardTimerMin;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._DodgeForwardTimerMin = value;
            }
        }
        #endregion
        #region DodgeForwardTimerMax
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _DodgeForwardTimerMax;
        public Single DodgeForwardTimerMax
        {
            get => this._DodgeForwardTimerMax;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._DodgeForwardTimerMax = value;
            }
        }
        #endregion
        #region DodgeBackTimerMin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _DodgeBackTimerMin;
        public Single DodgeBackTimerMin
        {
            get => this._DodgeBackTimerMin;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._DodgeBackTimerMin = value;
            }
        }
        #endregion
        #region DodgeBackTimerMax
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _DodgeBackTimerMax;
        public Single DodgeBackTimerMax
        {
            get => this._DodgeBackTimerMax;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._DodgeBackTimerMax = value;
            }
        }
        #endregion
        #region IdleTimerMin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _IdleTimerMin;
        public Single IdleTimerMin
        {
            get => this._IdleTimerMin;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._IdleTimerMin = value;
            }
        }
        #endregion
        #region IdleTimerMax
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _IdleTimerMax;
        public Single IdleTimerMax
        {
            get => this._IdleTimerMax;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._IdleTimerMax = value;
            }
        }
        #endregion
        #region BlockPercentChance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _BlockPercentChance;
        public Byte BlockPercentChance
        {
            get => this._BlockPercentChance;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._BlockPercentChance = value;
            }
        }
        public static RangeUInt8 BlockPercentChance_Range = new RangeUInt8(0, 100);
        #endregion
        #region AttackPercentChance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _AttackPercentChance;
        public Byte AttackPercentChance
        {
            get => this._AttackPercentChance;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._AttackPercentChance = value;
            }
        }
        public static RangeUInt8 AttackPercentChance_Range = new RangeUInt8(0, 100);
        #endregion
        #region RecoilStaggerBonusToAttack
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _RecoilStaggerBonusToAttack;
        public Single RecoilStaggerBonusToAttack
        {
            get => this._RecoilStaggerBonusToAttack;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._RecoilStaggerBonusToAttack = value;
            }
        }
        #endregion
        #region UnconsciousBonusToAttack
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _UnconsciousBonusToAttack;
        public Single UnconsciousBonusToAttack
        {
            get => this._UnconsciousBonusToAttack;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._UnconsciousBonusToAttack = value;
            }
        }
        #endregion
        #region HandToHandBonusToAttack
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HandToHandBonusToAttack;
        public Single HandToHandBonusToAttack
        {
            get => this._HandToHandBonusToAttack;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._HandToHandBonusToAttack = value;
            }
        }
        #endregion
        #region PowerAttackPercentChance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _PowerAttackPercentChance;
        public Byte PowerAttackPercentChance
        {
            get => this._PowerAttackPercentChance;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._PowerAttackPercentChance = value;
            }
        }
        public static RangeUInt8 PowerAttackPercentChance_Range = new RangeUInt8(0, 100);
        #endregion
        #region RecoilStaggerBonusToPowerAttack
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _RecoilStaggerBonusToPowerAttack;
        public Single RecoilStaggerBonusToPowerAttack
        {
            get => this._RecoilStaggerBonusToPowerAttack;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._RecoilStaggerBonusToPowerAttack = value;
            }
        }
        #endregion
        #region UnconsciousBonusToPowerAttack
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _UnconsciousBonusToPowerAttack;
        public Single UnconsciousBonusToPowerAttack
        {
            get => this._UnconsciousBonusToPowerAttack;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._UnconsciousBonusToPowerAttack = value;
            }
        }
        #endregion
        #region PowerAttackNormal
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _PowerAttackNormal;
        public Byte PowerAttackNormal
        {
            get => this._PowerAttackNormal;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._PowerAttackNormal = value;
            }
        }
        public static RangeUInt8 PowerAttackNormal_Range = new RangeUInt8(0, 100);
        #endregion
        #region PowerAttackForward
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _PowerAttackForward;
        public Byte PowerAttackForward
        {
            get => this._PowerAttackForward;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._PowerAttackForward = value;
            }
        }
        public static RangeUInt8 PowerAttackForward_Range = new RangeUInt8(0, 100);
        #endregion
        #region PowerAttackBack
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _PowerAttackBack;
        public Byte PowerAttackBack
        {
            get => this._PowerAttackBack;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._PowerAttackBack = value;
            }
        }
        public static RangeUInt8 PowerAttackBack_Range = new RangeUInt8(0, 100);
        #endregion
        #region PowerAttackLeft
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _PowerAttackLeft;
        public Byte PowerAttackLeft
        {
            get => this._PowerAttackLeft;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._PowerAttackLeft = value;
            }
        }
        public static RangeUInt8 PowerAttackLeft_Range = new RangeUInt8(0, 100);
        #endregion
        #region PowerAttackRight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _PowerAttackRight;
        public Byte PowerAttackRight
        {
            get => this._PowerAttackRight;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._PowerAttackRight = value;
            }
        }
        public static RangeUInt8 PowerAttackRight_Range = new RangeUInt8(0, 100);
        #endregion
        #region HoldTimerMin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HoldTimerMin;
        public Single HoldTimerMin
        {
            get => this._HoldTimerMin;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._HoldTimerMin = value;
            }
        }
        #endregion
        #region HoldTimerMax
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HoldTimerMax;
        public Single HoldTimerMax
        {
            get => this._HoldTimerMax;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._HoldTimerMax = value;
            }
        }
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CombatStyle.Flag _Flags;
        public CombatStyle.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region AcrobaticDodgePercentChance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _AcrobaticDodgePercentChance;
        public Byte AcrobaticDodgePercentChance
        {
            get => this._AcrobaticDodgePercentChance;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this._AcrobaticDodgePercentChance = value;
            }
        }
        public static RangeUInt8 AcrobaticDodgePercentChance_Range = new RangeUInt8(0, 100);
        #endregion
        #region RangeMultOptimal
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _RangeMultOptimal;
        public Single RangeMultOptimal
        {
            get => this._RangeMultOptimal;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this.CSTDDataTypeState &= ~CSTDDataType.Break0;
                this._RangeMultOptimal = value;
            }
        }
        #endregion
        #region RangeMultMax
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _RangeMultMax;
        public Single RangeMultMax
        {
            get => this._RangeMultMax;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this.CSTDDataTypeState &= ~CSTDDataType.Break0;
                this._RangeMultMax = value;
            }
        }
        #endregion
        #region SwitchDistanceMelee
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _SwitchDistanceMelee;
        public Single SwitchDistanceMelee
        {
            get => this._SwitchDistanceMelee;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this.CSTDDataTypeState &= ~CSTDDataType.Break0;
                this.CSTDDataTypeState &= ~CSTDDataType.Break1;
                this._SwitchDistanceMelee = value;
            }
        }
        #endregion
        #region SwitchDistanceRanged
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _SwitchDistanceRanged;
        public Single SwitchDistanceRanged
        {
            get => this._SwitchDistanceRanged;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this.CSTDDataTypeState &= ~CSTDDataType.Break0;
                this.CSTDDataTypeState &= ~CSTDDataType.Break1;
                this._SwitchDistanceRanged = value;
            }
        }
        #endregion
        #region BuffStandoffDistance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _BuffStandoffDistance;
        public Single BuffStandoffDistance
        {
            get => this._BuffStandoffDistance;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this.CSTDDataTypeState &= ~CSTDDataType.Break0;
                this.CSTDDataTypeState &= ~CSTDDataType.Break1;
                this._BuffStandoffDistance = value;
            }
        }
        #endregion
        #region RangedStandoffDistance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _RangedStandoffDistance;
        public Single RangedStandoffDistance
        {
            get => this._RangedStandoffDistance;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this.CSTDDataTypeState &= ~CSTDDataType.Break0;
                this.CSTDDataTypeState &= ~CSTDDataType.Break1;
                this.CSTDDataTypeState &= ~CSTDDataType.Break2;
                this._RangedStandoffDistance = value;
            }
        }
        #endregion
        #region GroupStandoffDistance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _GroupStandoffDistance;
        public Single GroupStandoffDistance
        {
            get => this._GroupStandoffDistance;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this.CSTDDataTypeState &= ~CSTDDataType.Break0;
                this.CSTDDataTypeState &= ~CSTDDataType.Break1;
                this.CSTDDataTypeState &= ~CSTDDataType.Break2;
                this._GroupStandoffDistance = value;
            }
        }
        #endregion
        #region RushingAttackPercentChance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _RushingAttackPercentChance;
        public Byte RushingAttackPercentChance
        {
            get => this._RushingAttackPercentChance;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this.CSTDDataTypeState &= ~CSTDDataType.Break0;
                this.CSTDDataTypeState &= ~CSTDDataType.Break1;
                this.CSTDDataTypeState &= ~CSTDDataType.Break2;
                this.CSTDDataTypeState &= ~CSTDDataType.Break3;
                this._RushingAttackPercentChance = value;
            }
        }
        public static RangeUInt8 RushingAttackPercentChance_Range = new RangeUInt8(0, 100);
        #endregion
        #region RushingAttackDistanceMult
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _RushingAttackDistanceMult;
        public Single RushingAttackDistanceMult
        {
            get => this._RushingAttackDistanceMult;
            set
            {
                this.CSTDDataTypeState |= CSTDDataType.Has;
                this.CSTDDataTypeState &= ~CSTDDataType.Break0;
                this.CSTDDataTypeState &= ~CSTDDataType.Break1;
                this.CSTDDataTypeState &= ~CSTDDataType.Break2;
                this.CSTDDataTypeState &= ~CSTDDataType.Break3;
                this._RushingAttackDistanceMult = value;
            }
        }
        #endregion
        #region Advanced
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CombatStyleAdvanced? _Advanced;
        public CombatStyleAdvanced? Advanced
        {
            get => _Advanced;
            set => _Advanced = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICombatStyleAdvancedGetter? ICombatStyleGetter.Advanced => this.Advanced;
        #endregion
        #region CSTDDataTypeState
        public CombatStyle.CSTDDataType CSTDDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CombatStyleMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ICombatStyleGetter rhs)) return false;
            return ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(CombatStyle obj)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => CombatStyleXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CombatStyleXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new CombatStyle CreateFromXml(
            XElement node,
            CombatStyle_TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static CombatStyle CreateFromXml(
            XElement node,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CombatStyle_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static CombatStyle CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new CombatStyle();
            ((CombatStyleSetterCommon)((ICombatStyleGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static CombatStyle CreateFromXml(
            string path,
            CombatStyle_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static CombatStyle CreateFromXml(
            string path,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CombatStyle CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            CombatStyle_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static CombatStyle CreateFromXml(
            Stream stream,
            CombatStyle_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static CombatStyle CreateFromXml(
            Stream stream,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CombatStyle CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            CombatStyle_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = CombatStyle_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum CSTDDataType
        {
            Has = 1,
            Break0 = 2,
            Break1 = 4,
            Break2 = 8,
            Break3 = 16,
            Break4 = 32
        }
        public CombatStyle(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public CombatStyle(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CombatStyleBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((CombatStyleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new CombatStyle CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static CombatStyle CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new CombatStyle();
            ((CombatStyleSetterCommon)((ICombatStyleGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICombatStyleGetter)rhs, include);

        void IClearable.Clear()
        {
            ((CombatStyleSetterCommon)((ICombatStyleGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new CombatStyle GetNew()
        {
            return new CombatStyle();
        }

    }
    #endregion

    #region Interface
    public partial interface ICombatStyle :
        ICombatStyleGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<ICombatStyleInternal>
    {
        new Byte DodgePercentChance { get; set; }
        new Byte LeftRightPercentChance { get; set; }
        new Single DodgeLeftRightTimerMin { get; set; }
        new Single DodgeLeftRightTimerMax { get; set; }
        new Single DodgeForwardTimerMin { get; set; }
        new Single DodgeForwardTimerMax { get; set; }
        new Single DodgeBackTimerMin { get; set; }
        new Single DodgeBackTimerMax { get; set; }
        new Single IdleTimerMin { get; set; }
        new Single IdleTimerMax { get; set; }
        new Byte BlockPercentChance { get; set; }
        new Byte AttackPercentChance { get; set; }
        new Single RecoilStaggerBonusToAttack { get; set; }
        new Single UnconsciousBonusToAttack { get; set; }
        new Single HandToHandBonusToAttack { get; set; }
        new Byte PowerAttackPercentChance { get; set; }
        new Single RecoilStaggerBonusToPowerAttack { get; set; }
        new Single UnconsciousBonusToPowerAttack { get; set; }
        new Byte PowerAttackNormal { get; set; }
        new Byte PowerAttackForward { get; set; }
        new Byte PowerAttackBack { get; set; }
        new Byte PowerAttackLeft { get; set; }
        new Byte PowerAttackRight { get; set; }
        new Single HoldTimerMin { get; set; }
        new Single HoldTimerMax { get; set; }
        new CombatStyle.Flag Flags { get; set; }
        new Byte AcrobaticDodgePercentChance { get; set; }
        new Single RangeMultOptimal { get; set; }
        new Single RangeMultMax { get; set; }
        new Single SwitchDistanceMelee { get; set; }
        new Single SwitchDistanceRanged { get; set; }
        new Single BuffStandoffDistance { get; set; }
        new Single RangedStandoffDistance { get; set; }
        new Single GroupStandoffDistance { get; set; }
        new Byte RushingAttackPercentChance { get; set; }
        new Single RushingAttackDistanceMult { get; set; }
        new CombatStyleAdvanced? Advanced { get; set; }
        new CombatStyle.CSTDDataType CSTDDataTypeState { get; set; }
    }

    public partial interface ICombatStyleInternal :
        IOblivionMajorRecordInternal,
        ICombatStyle,
        ICombatStyleGetter
    {
    }

    public partial interface ICombatStyleGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<ICombatStyleGetter>,
        IXmlItem,
        IBinaryItem
    {
        Byte DodgePercentChance { get; }
        Byte LeftRightPercentChance { get; }
        Single DodgeLeftRightTimerMin { get; }
        Single DodgeLeftRightTimerMax { get; }
        Single DodgeForwardTimerMin { get; }
        Single DodgeForwardTimerMax { get; }
        Single DodgeBackTimerMin { get; }
        Single DodgeBackTimerMax { get; }
        Single IdleTimerMin { get; }
        Single IdleTimerMax { get; }
        Byte BlockPercentChance { get; }
        Byte AttackPercentChance { get; }
        Single RecoilStaggerBonusToAttack { get; }
        Single UnconsciousBonusToAttack { get; }
        Single HandToHandBonusToAttack { get; }
        Byte PowerAttackPercentChance { get; }
        Single RecoilStaggerBonusToPowerAttack { get; }
        Single UnconsciousBonusToPowerAttack { get; }
        Byte PowerAttackNormal { get; }
        Byte PowerAttackForward { get; }
        Byte PowerAttackBack { get; }
        Byte PowerAttackLeft { get; }
        Byte PowerAttackRight { get; }
        Single HoldTimerMin { get; }
        Single HoldTimerMax { get; }
        CombatStyle.Flag Flags { get; }
        Byte AcrobaticDodgePercentChance { get; }
        Single RangeMultOptimal { get; }
        Single RangeMultMax { get; }
        Single SwitchDistanceMelee { get; }
        Single SwitchDistanceRanged { get; }
        Single BuffStandoffDistance { get; }
        Single RangedStandoffDistance { get; }
        Single GroupStandoffDistance { get; }
        Byte RushingAttackPercentChance { get; }
        Single RushingAttackDistanceMult { get; }
        ICombatStyleAdvancedGetter? Advanced { get; }
        CombatStyle.CSTDDataType CSTDDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class CombatStyleMixIn
    {
        public static void Clear(this ICombatStyleInternal item)
        {
            ((CombatStyleSetterCommon)((ICombatStyleGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CombatStyle_Mask<bool> GetEqualsMask(
            this ICombatStyleGetter item,
            ICombatStyleGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICombatStyleGetter item,
            string? name = null,
            CombatStyle_Mask<bool>? printMask = null)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICombatStyleGetter item,
            FileGeneration fg,
            string? name = null,
            CombatStyle_Mask<bool>? printMask = null)
        {
            ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ICombatStyleGetter item,
            CombatStyle_Mask<bool?> checkMask)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static CombatStyle_Mask<bool> GetHasBeenSetMask(this ICombatStyleGetter item)
        {
            var ret = new CombatStyle_Mask<bool>(false);
            ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ICombatStyleGetter item,
            ICombatStyleGetter rhs)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICombatStyleInternal lhs,
            ICombatStyleGetter rhs,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = CombatStyle_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICombatStyleInternal lhs,
            ICombatStyleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static CombatStyle DeepCopy(
            this ICombatStyleGetter item,
            CombatStyle_TranslationMask? copyMask = null)
        {
            return ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CombatStyle DeepCopy(
            this ICombatStyleGetter item,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask? copyMask = null)
        {
            return ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CombatStyle DeepCopy(
            this ICombatStyleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICombatStyleInternal item,
            XElement node,
            CombatStyle_TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICombatStyleInternal item,
            XElement node,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CombatStyle_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ICombatStyleInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((CombatStyleSetterCommon)((ICombatStyleGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICombatStyleInternal item,
            string path,
            CombatStyle_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICombatStyleInternal item,
            string path,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICombatStyleInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            CombatStyle_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ICombatStyleInternal item,
            Stream stream,
            CombatStyle_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICombatStyleInternal item,
            Stream stream,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICombatStyleInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            CombatStyle_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ICombatStyleInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ICombatStyleInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((CombatStyleSetterCommon)((ICombatStyleGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum CombatStyle_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        DodgePercentChance = 5,
        LeftRightPercentChance = 6,
        DodgeLeftRightTimerMin = 7,
        DodgeLeftRightTimerMax = 8,
        DodgeForwardTimerMin = 9,
        DodgeForwardTimerMax = 10,
        DodgeBackTimerMin = 11,
        DodgeBackTimerMax = 12,
        IdleTimerMin = 13,
        IdleTimerMax = 14,
        BlockPercentChance = 15,
        AttackPercentChance = 16,
        RecoilStaggerBonusToAttack = 17,
        UnconsciousBonusToAttack = 18,
        HandToHandBonusToAttack = 19,
        PowerAttackPercentChance = 20,
        RecoilStaggerBonusToPowerAttack = 21,
        UnconsciousBonusToPowerAttack = 22,
        PowerAttackNormal = 23,
        PowerAttackForward = 24,
        PowerAttackBack = 25,
        PowerAttackLeft = 26,
        PowerAttackRight = 27,
        HoldTimerMin = 28,
        HoldTimerMax = 29,
        Flags = 30,
        AcrobaticDodgePercentChance = 31,
        RangeMultOptimal = 32,
        RangeMultMax = 33,
        SwitchDistanceMelee = 34,
        SwitchDistanceRanged = 35,
        BuffStandoffDistance = 36,
        RangedStandoffDistance = 37,
        GroupStandoffDistance = 38,
        RushingAttackPercentChance = 39,
        RushingAttackDistanceMult = 40,
        Advanced = 41,
        CSTDDataTypeState = 42,
    }
    #endregion

    #region Registration
    public partial class CombatStyle_Registration : ILoquiRegistration
    {
        public static readonly CombatStyle_Registration Instance = new CombatStyle_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 88,
            version: 0);

        public const string GUID = "5a84afb8-6c2a-4274-aa72-155f9fcddd71";

        public const ushort AdditionalFieldCount = 38;

        public const ushort FieldCount = 43;

        public static readonly Type MaskType = typeof(CombatStyle_Mask<>);

        public static readonly Type ErrorMaskType = typeof(CombatStyle_ErrorMask);

        public static readonly Type ClassType = typeof(CombatStyle);

        public static readonly Type GetterType = typeof(ICombatStyleGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICombatStyle);

        public static readonly Type? InternalSetterType = typeof(ICombatStyleInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.CombatStyle";

        public const string Name = "CombatStyle";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DODGEPERCENTCHANCE":
                    return (ushort)CombatStyle_FieldIndex.DodgePercentChance;
                case "LEFTRIGHTPERCENTCHANCE":
                    return (ushort)CombatStyle_FieldIndex.LeftRightPercentChance;
                case "DODGELEFTRIGHTTIMERMIN":
                    return (ushort)CombatStyle_FieldIndex.DodgeLeftRightTimerMin;
                case "DODGELEFTRIGHTTIMERMAX":
                    return (ushort)CombatStyle_FieldIndex.DodgeLeftRightTimerMax;
                case "DODGEFORWARDTIMERMIN":
                    return (ushort)CombatStyle_FieldIndex.DodgeForwardTimerMin;
                case "DODGEFORWARDTIMERMAX":
                    return (ushort)CombatStyle_FieldIndex.DodgeForwardTimerMax;
                case "DODGEBACKTIMERMIN":
                    return (ushort)CombatStyle_FieldIndex.DodgeBackTimerMin;
                case "DODGEBACKTIMERMAX":
                    return (ushort)CombatStyle_FieldIndex.DodgeBackTimerMax;
                case "IDLETIMERMIN":
                    return (ushort)CombatStyle_FieldIndex.IdleTimerMin;
                case "IDLETIMERMAX":
                    return (ushort)CombatStyle_FieldIndex.IdleTimerMax;
                case "BLOCKPERCENTCHANCE":
                    return (ushort)CombatStyle_FieldIndex.BlockPercentChance;
                case "ATTACKPERCENTCHANCE":
                    return (ushort)CombatStyle_FieldIndex.AttackPercentChance;
                case "RECOILSTAGGERBONUSTOATTACK":
                    return (ushort)CombatStyle_FieldIndex.RecoilStaggerBonusToAttack;
                case "UNCONSCIOUSBONUSTOATTACK":
                    return (ushort)CombatStyle_FieldIndex.UnconsciousBonusToAttack;
                case "HANDTOHANDBONUSTOATTACK":
                    return (ushort)CombatStyle_FieldIndex.HandToHandBonusToAttack;
                case "POWERATTACKPERCENTCHANCE":
                    return (ushort)CombatStyle_FieldIndex.PowerAttackPercentChance;
                case "RECOILSTAGGERBONUSTOPOWERATTACK":
                    return (ushort)CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack;
                case "UNCONSCIOUSBONUSTOPOWERATTACK":
                    return (ushort)CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack;
                case "POWERATTACKNORMAL":
                    return (ushort)CombatStyle_FieldIndex.PowerAttackNormal;
                case "POWERATTACKFORWARD":
                    return (ushort)CombatStyle_FieldIndex.PowerAttackForward;
                case "POWERATTACKBACK":
                    return (ushort)CombatStyle_FieldIndex.PowerAttackBack;
                case "POWERATTACKLEFT":
                    return (ushort)CombatStyle_FieldIndex.PowerAttackLeft;
                case "POWERATTACKRIGHT":
                    return (ushort)CombatStyle_FieldIndex.PowerAttackRight;
                case "HOLDTIMERMIN":
                    return (ushort)CombatStyle_FieldIndex.HoldTimerMin;
                case "HOLDTIMERMAX":
                    return (ushort)CombatStyle_FieldIndex.HoldTimerMax;
                case "FLAGS":
                    return (ushort)CombatStyle_FieldIndex.Flags;
                case "ACROBATICDODGEPERCENTCHANCE":
                    return (ushort)CombatStyle_FieldIndex.AcrobaticDodgePercentChance;
                case "RANGEMULTOPTIMAL":
                    return (ushort)CombatStyle_FieldIndex.RangeMultOptimal;
                case "RANGEMULTMAX":
                    return (ushort)CombatStyle_FieldIndex.RangeMultMax;
                case "SWITCHDISTANCEMELEE":
                    return (ushort)CombatStyle_FieldIndex.SwitchDistanceMelee;
                case "SWITCHDISTANCERANGED":
                    return (ushort)CombatStyle_FieldIndex.SwitchDistanceRanged;
                case "BUFFSTANDOFFDISTANCE":
                    return (ushort)CombatStyle_FieldIndex.BuffStandoffDistance;
                case "RANGEDSTANDOFFDISTANCE":
                    return (ushort)CombatStyle_FieldIndex.RangedStandoffDistance;
                case "GROUPSTANDOFFDISTANCE":
                    return (ushort)CombatStyle_FieldIndex.GroupStandoffDistance;
                case "RUSHINGATTACKPERCENTCHANCE":
                    return (ushort)CombatStyle_FieldIndex.RushingAttackPercentChance;
                case "RUSHINGATTACKDISTANCEMULT":
                    return (ushort)CombatStyle_FieldIndex.RushingAttackDistanceMult;
                case "ADVANCED":
                    return (ushort)CombatStyle_FieldIndex.Advanced;
                case "CSTDDATATYPESTATE":
                    return (ushort)CombatStyle_FieldIndex.CSTDDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                case CombatStyle_FieldIndex.IdleTimerMin:
                case CombatStyle_FieldIndex.IdleTimerMax:
                case CombatStyle_FieldIndex.BlockPercentChance:
                case CombatStyle_FieldIndex.AttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                case CombatStyle_FieldIndex.PowerAttackNormal:
                case CombatStyle_FieldIndex.PowerAttackForward:
                case CombatStyle_FieldIndex.PowerAttackBack:
                case CombatStyle_FieldIndex.PowerAttackLeft:
                case CombatStyle_FieldIndex.PowerAttackRight:
                case CombatStyle_FieldIndex.HoldTimerMin:
                case CombatStyle_FieldIndex.HoldTimerMax:
                case CombatStyle_FieldIndex.Flags:
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                case CombatStyle_FieldIndex.RangeMultOptimal:
                case CombatStyle_FieldIndex.RangeMultMax:
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                case CombatStyle_FieldIndex.Advanced:
                case CombatStyle_FieldIndex.CSTDDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.Advanced:
                    return true;
                case CombatStyle_FieldIndex.DodgePercentChance:
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                case CombatStyle_FieldIndex.IdleTimerMin:
                case CombatStyle_FieldIndex.IdleTimerMax:
                case CombatStyle_FieldIndex.BlockPercentChance:
                case CombatStyle_FieldIndex.AttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                case CombatStyle_FieldIndex.PowerAttackNormal:
                case CombatStyle_FieldIndex.PowerAttackForward:
                case CombatStyle_FieldIndex.PowerAttackBack:
                case CombatStyle_FieldIndex.PowerAttackLeft:
                case CombatStyle_FieldIndex.PowerAttackRight:
                case CombatStyle_FieldIndex.HoldTimerMin:
                case CombatStyle_FieldIndex.HoldTimerMax:
                case CombatStyle_FieldIndex.Flags:
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                case CombatStyle_FieldIndex.RangeMultOptimal:
                case CombatStyle_FieldIndex.RangeMultMax:
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                case CombatStyle_FieldIndex.CSTDDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                case CombatStyle_FieldIndex.IdleTimerMin:
                case CombatStyle_FieldIndex.IdleTimerMax:
                case CombatStyle_FieldIndex.BlockPercentChance:
                case CombatStyle_FieldIndex.AttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                case CombatStyle_FieldIndex.PowerAttackNormal:
                case CombatStyle_FieldIndex.PowerAttackForward:
                case CombatStyle_FieldIndex.PowerAttackBack:
                case CombatStyle_FieldIndex.PowerAttackLeft:
                case CombatStyle_FieldIndex.PowerAttackRight:
                case CombatStyle_FieldIndex.HoldTimerMin:
                case CombatStyle_FieldIndex.HoldTimerMax:
                case CombatStyle_FieldIndex.Flags:
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                case CombatStyle_FieldIndex.RangeMultOptimal:
                case CombatStyle_FieldIndex.RangeMultMax:
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                case CombatStyle_FieldIndex.Advanced:
                case CombatStyle_FieldIndex.CSTDDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                    return "DodgePercentChance";
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                    return "LeftRightPercentChance";
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                    return "DodgeLeftRightTimerMin";
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                    return "DodgeLeftRightTimerMax";
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                    return "DodgeForwardTimerMin";
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                    return "DodgeForwardTimerMax";
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                    return "DodgeBackTimerMin";
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                    return "DodgeBackTimerMax";
                case CombatStyle_FieldIndex.IdleTimerMin:
                    return "IdleTimerMin";
                case CombatStyle_FieldIndex.IdleTimerMax:
                    return "IdleTimerMax";
                case CombatStyle_FieldIndex.BlockPercentChance:
                    return "BlockPercentChance";
                case CombatStyle_FieldIndex.AttackPercentChance:
                    return "AttackPercentChance";
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                    return "RecoilStaggerBonusToAttack";
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                    return "UnconsciousBonusToAttack";
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                    return "HandToHandBonusToAttack";
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                    return "PowerAttackPercentChance";
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                    return "RecoilStaggerBonusToPowerAttack";
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                    return "UnconsciousBonusToPowerAttack";
                case CombatStyle_FieldIndex.PowerAttackNormal:
                    return "PowerAttackNormal";
                case CombatStyle_FieldIndex.PowerAttackForward:
                    return "PowerAttackForward";
                case CombatStyle_FieldIndex.PowerAttackBack:
                    return "PowerAttackBack";
                case CombatStyle_FieldIndex.PowerAttackLeft:
                    return "PowerAttackLeft";
                case CombatStyle_FieldIndex.PowerAttackRight:
                    return "PowerAttackRight";
                case CombatStyle_FieldIndex.HoldTimerMin:
                    return "HoldTimerMin";
                case CombatStyle_FieldIndex.HoldTimerMax:
                    return "HoldTimerMax";
                case CombatStyle_FieldIndex.Flags:
                    return "Flags";
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                    return "AcrobaticDodgePercentChance";
                case CombatStyle_FieldIndex.RangeMultOptimal:
                    return "RangeMultOptimal";
                case CombatStyle_FieldIndex.RangeMultMax:
                    return "RangeMultMax";
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                    return "SwitchDistanceMelee";
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                    return "SwitchDistanceRanged";
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                    return "BuffStandoffDistance";
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                    return "RangedStandoffDistance";
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                    return "GroupStandoffDistance";
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                    return "RushingAttackPercentChance";
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    return "RushingAttackDistanceMult";
                case CombatStyle_FieldIndex.Advanced:
                    return "Advanced";
                case CombatStyle_FieldIndex.CSTDDataTypeState:
                    return "CSTDDataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                case CombatStyle_FieldIndex.IdleTimerMin:
                case CombatStyle_FieldIndex.IdleTimerMax:
                case CombatStyle_FieldIndex.BlockPercentChance:
                case CombatStyle_FieldIndex.AttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                case CombatStyle_FieldIndex.PowerAttackNormal:
                case CombatStyle_FieldIndex.PowerAttackForward:
                case CombatStyle_FieldIndex.PowerAttackBack:
                case CombatStyle_FieldIndex.PowerAttackLeft:
                case CombatStyle_FieldIndex.PowerAttackRight:
                case CombatStyle_FieldIndex.HoldTimerMin:
                case CombatStyle_FieldIndex.HoldTimerMax:
                case CombatStyle_FieldIndex.Flags:
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                case CombatStyle_FieldIndex.RangeMultOptimal:
                case CombatStyle_FieldIndex.RangeMultMax:
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                case CombatStyle_FieldIndex.Advanced:
                case CombatStyle_FieldIndex.CSTDDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                case CombatStyle_FieldIndex.IdleTimerMin:
                case CombatStyle_FieldIndex.IdleTimerMax:
                case CombatStyle_FieldIndex.BlockPercentChance:
                case CombatStyle_FieldIndex.AttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                case CombatStyle_FieldIndex.PowerAttackNormal:
                case CombatStyle_FieldIndex.PowerAttackForward:
                case CombatStyle_FieldIndex.PowerAttackBack:
                case CombatStyle_FieldIndex.PowerAttackLeft:
                case CombatStyle_FieldIndex.PowerAttackRight:
                case CombatStyle_FieldIndex.HoldTimerMin:
                case CombatStyle_FieldIndex.HoldTimerMax:
                case CombatStyle_FieldIndex.Flags:
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                case CombatStyle_FieldIndex.RangeMultOptimal:
                case CombatStyle_FieldIndex.RangeMultMax:
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                case CombatStyle_FieldIndex.Advanced:
                case CombatStyle_FieldIndex.CSTDDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                    return typeof(Single);
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                    return typeof(Single);
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                    return typeof(Single);
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                    return typeof(Single);
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                    return typeof(Single);
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                    return typeof(Single);
                case CombatStyle_FieldIndex.IdleTimerMin:
                    return typeof(Single);
                case CombatStyle_FieldIndex.IdleTimerMax:
                    return typeof(Single);
                case CombatStyle_FieldIndex.BlockPercentChance:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.AttackPercentChance:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                    return typeof(Single);
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                    return typeof(Single);
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                    return typeof(Single);
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                    return typeof(Single);
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                    return typeof(Single);
                case CombatStyle_FieldIndex.PowerAttackNormal:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.PowerAttackForward:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.PowerAttackBack:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.PowerAttackLeft:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.PowerAttackRight:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.HoldTimerMin:
                    return typeof(Single);
                case CombatStyle_FieldIndex.HoldTimerMax:
                    return typeof(Single);
                case CombatStyle_FieldIndex.Flags:
                    return typeof(CombatStyle.Flag);
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.RangeMultOptimal:
                    return typeof(Single);
                case CombatStyle_FieldIndex.RangeMultMax:
                    return typeof(Single);
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                    return typeof(Single);
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                    return typeof(Single);
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                    return typeof(Single);
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                    return typeof(Single);
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                    return typeof(Single);
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    return typeof(Single);
                case CombatStyle_FieldIndex.Advanced:
                    return typeof(CombatStyleAdvanced);
                case CombatStyle_FieldIndex.CSTDDataTypeState:
                    return typeof(CombatStyle.CSTDDataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(CombatStyleXmlWriteTranslation);
        public static readonly RecordType CSTY_HEADER = new RecordType("CSTY");
        public static readonly RecordType CSTD_HEADER = new RecordType("CSTD");
        public static readonly RecordType CSAD_HEADER = new RecordType("CSAD");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CSTY_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(CombatStyleBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class CombatStyleSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly CombatStyleSetterCommon Instance = new CombatStyleSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICombatStyleInternal item)
        {
            ClearPartial();
            item.DodgePercentChance = default;
            item.LeftRightPercentChance = default;
            item.DodgeLeftRightTimerMin = default;
            item.DodgeLeftRightTimerMax = default;
            item.DodgeForwardTimerMin = default;
            item.DodgeForwardTimerMax = default;
            item.DodgeBackTimerMin = default;
            item.DodgeBackTimerMax = default;
            item.IdleTimerMin = default;
            item.IdleTimerMax = default;
            item.BlockPercentChance = default;
            item.AttackPercentChance = default;
            item.RecoilStaggerBonusToAttack = default;
            item.UnconsciousBonusToAttack = default;
            item.HandToHandBonusToAttack = default;
            item.PowerAttackPercentChance = default;
            item.RecoilStaggerBonusToPowerAttack = default;
            item.UnconsciousBonusToPowerAttack = default;
            item.PowerAttackNormal = default;
            item.PowerAttackForward = default;
            item.PowerAttackBack = default;
            item.PowerAttackLeft = default;
            item.PowerAttackRight = default;
            item.HoldTimerMin = default;
            item.HoldTimerMax = default;
            item.Flags = default;
            item.AcrobaticDodgePercentChance = default;
            item.RangeMultOptimal = default;
            item.RangeMultMax = default;
            item.SwitchDistanceMelee = default;
            item.SwitchDistanceRanged = default;
            item.BuffStandoffDistance = default;
            item.RangedStandoffDistance = default;
            item.GroupStandoffDistance = default;
            item.RushingAttackPercentChance = default;
            item.RushingAttackDistanceMult = default;
            item.Advanced = null;
            item.CSTDDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ICombatStyleInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICombatStyleInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ICombatStyleInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasCSTDDataType":
                    item.CSTDDataTypeState |= CombatStyle.CSTDDataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            ICombatStyleInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                item.CSTDDataTypeState |= CombatStyle.CSTDDataType.Break0;
                item.CSTDDataTypeState |= CombatStyle.CSTDDataType.Break1;
                item.CSTDDataTypeState |= CombatStyle.CSTDDataType.Break2;
                item.CSTDDataTypeState |= CombatStyle.CSTDDataType.Break3;
                item.CSTDDataTypeState |= CombatStyle.CSTDDataType.Break4;
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    CombatStyleXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => CombatStyle_Registration.CSTY_HEADER;
        protected static void FillBinaryStructs(
            ICombatStyleInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ICombatStyleInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x44545343: // CSTD
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.CSTDDataTypeState = CombatStyle.CSTDDataType.Has;
                    }
                    item.DodgePercentChance = dataFrame.ReadUInt8();
                    item.LeftRightPercentChance = dataFrame.ReadUInt8();
                    dataFrame.SetPosition(dataFrame.Position + 2);
                    item.DodgeLeftRightTimerMin = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.DodgeLeftRightTimerMax = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.DodgeForwardTimerMin = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.DodgeForwardTimerMax = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.DodgeBackTimerMin = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.DodgeBackTimerMax = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.IdleTimerMin = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.IdleTimerMax = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.BlockPercentChance = dataFrame.ReadUInt8();
                    item.AttackPercentChance = dataFrame.ReadUInt8();
                    dataFrame.SetPosition(dataFrame.Position + 2);
                    item.RecoilStaggerBonusToAttack = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.UnconsciousBonusToAttack = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HandToHandBonusToAttack = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.PowerAttackPercentChance = dataFrame.ReadUInt8();
                    dataFrame.SetPosition(dataFrame.Position + 3);
                    item.RecoilStaggerBonusToPowerAttack = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.UnconsciousBonusToPowerAttack = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.PowerAttackNormal = dataFrame.ReadUInt8();
                    item.PowerAttackForward = dataFrame.ReadUInt8();
                    item.PowerAttackBack = dataFrame.ReadUInt8();
                    item.PowerAttackLeft = dataFrame.ReadUInt8();
                    item.PowerAttackRight = dataFrame.ReadUInt8();
                    dataFrame.SetPosition(dataFrame.Position + 3);
                    item.HoldTimerMin = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HoldTimerMax = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Flags = EnumBinaryTranslation<CombatStyle.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.AcrobaticDodgePercentChance = dataFrame.ReadUInt8();
                    dataFrame.SetPosition(dataFrame.Position + 2);
                    if (dataFrame.Complete)
                    {
                        item.CSTDDataTypeState |= CombatStyle.CSTDDataType.Break0;
                        return TryGet<int?>.Succeed((int)CombatStyle_FieldIndex.AcrobaticDodgePercentChance);
                    }
                    item.RangeMultOptimal = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.RangeMultMax = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.CSTDDataTypeState |= CombatStyle.CSTDDataType.Break1;
                        return TryGet<int?>.Succeed((int)CombatStyle_FieldIndex.RangeMultMax);
                    }
                    item.SwitchDistanceMelee = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.SwitchDistanceRanged = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.BuffStandoffDistance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.CSTDDataTypeState |= CombatStyle.CSTDDataType.Break2;
                        return TryGet<int?>.Succeed((int)CombatStyle_FieldIndex.BuffStandoffDistance);
                    }
                    item.RangedStandoffDistance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.GroupStandoffDistance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.CSTDDataTypeState |= CombatStyle.CSTDDataType.Break3;
                        return TryGet<int?>.Succeed((int)CombatStyle_FieldIndex.GroupStandoffDistance);
                    }
                    item.RushingAttackPercentChance = dataFrame.ReadUInt8();
                    dataFrame.SetPosition(dataFrame.Position + 3);
                    item.RushingAttackDistanceMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.CSTDDataTypeState |= CombatStyle.CSTDDataType.Break4;
                        return TryGet<int?>.Succeed((int)CombatStyle_FieldIndex.RushingAttackDistanceMult);
                    }
                    CombatStyleBinaryCreateTranslation.FillBinarySecondaryFlagsCustomPublic(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)CombatStyle_FieldIndex.RushingAttackDistanceMult);
                }
                case 0x44415343: // CSAD
                {
                    item.Advanced = Mutagen.Bethesda.Oblivion.CombatStyleAdvanced.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)CombatStyle_FieldIndex.Advanced);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            ICombatStyleInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<ICombatStyleInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class CombatStyleCommon : OblivionMajorRecordCommon
    {
        public new static readonly CombatStyleCommon Instance = new CombatStyleCommon();

        public CombatStyle_Mask<bool> GetEqualsMask(
            ICombatStyleGetter item,
            ICombatStyleGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CombatStyle_Mask<bool>(false);
            ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICombatStyleGetter item,
            ICombatStyleGetter rhs,
            CombatStyle_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.DodgePercentChance = item.DodgePercentChance == rhs.DodgePercentChance;
            ret.LeftRightPercentChance = item.LeftRightPercentChance == rhs.LeftRightPercentChance;
            ret.DodgeLeftRightTimerMin = item.DodgeLeftRightTimerMin.EqualsWithin(rhs.DodgeLeftRightTimerMin);
            ret.DodgeLeftRightTimerMax = item.DodgeLeftRightTimerMax.EqualsWithin(rhs.DodgeLeftRightTimerMax);
            ret.DodgeForwardTimerMin = item.DodgeForwardTimerMin.EqualsWithin(rhs.DodgeForwardTimerMin);
            ret.DodgeForwardTimerMax = item.DodgeForwardTimerMax.EqualsWithin(rhs.DodgeForwardTimerMax);
            ret.DodgeBackTimerMin = item.DodgeBackTimerMin.EqualsWithin(rhs.DodgeBackTimerMin);
            ret.DodgeBackTimerMax = item.DodgeBackTimerMax.EqualsWithin(rhs.DodgeBackTimerMax);
            ret.IdleTimerMin = item.IdleTimerMin.EqualsWithin(rhs.IdleTimerMin);
            ret.IdleTimerMax = item.IdleTimerMax.EqualsWithin(rhs.IdleTimerMax);
            ret.BlockPercentChance = item.BlockPercentChance == rhs.BlockPercentChance;
            ret.AttackPercentChance = item.AttackPercentChance == rhs.AttackPercentChance;
            ret.RecoilStaggerBonusToAttack = item.RecoilStaggerBonusToAttack.EqualsWithin(rhs.RecoilStaggerBonusToAttack);
            ret.UnconsciousBonusToAttack = item.UnconsciousBonusToAttack.EqualsWithin(rhs.UnconsciousBonusToAttack);
            ret.HandToHandBonusToAttack = item.HandToHandBonusToAttack.EqualsWithin(rhs.HandToHandBonusToAttack);
            ret.PowerAttackPercentChance = item.PowerAttackPercentChance == rhs.PowerAttackPercentChance;
            ret.RecoilStaggerBonusToPowerAttack = item.RecoilStaggerBonusToPowerAttack.EqualsWithin(rhs.RecoilStaggerBonusToPowerAttack);
            ret.UnconsciousBonusToPowerAttack = item.UnconsciousBonusToPowerAttack.EqualsWithin(rhs.UnconsciousBonusToPowerAttack);
            ret.PowerAttackNormal = item.PowerAttackNormal == rhs.PowerAttackNormal;
            ret.PowerAttackForward = item.PowerAttackForward == rhs.PowerAttackForward;
            ret.PowerAttackBack = item.PowerAttackBack == rhs.PowerAttackBack;
            ret.PowerAttackLeft = item.PowerAttackLeft == rhs.PowerAttackLeft;
            ret.PowerAttackRight = item.PowerAttackRight == rhs.PowerAttackRight;
            ret.HoldTimerMin = item.HoldTimerMin.EqualsWithin(rhs.HoldTimerMin);
            ret.HoldTimerMax = item.HoldTimerMax.EqualsWithin(rhs.HoldTimerMax);
            ret.Flags = item.Flags == rhs.Flags;
            ret.AcrobaticDodgePercentChance = item.AcrobaticDodgePercentChance == rhs.AcrobaticDodgePercentChance;
            ret.RangeMultOptimal = item.RangeMultOptimal.EqualsWithin(rhs.RangeMultOptimal);
            ret.RangeMultMax = item.RangeMultMax.EqualsWithin(rhs.RangeMultMax);
            ret.SwitchDistanceMelee = item.SwitchDistanceMelee.EqualsWithin(rhs.SwitchDistanceMelee);
            ret.SwitchDistanceRanged = item.SwitchDistanceRanged.EqualsWithin(rhs.SwitchDistanceRanged);
            ret.BuffStandoffDistance = item.BuffStandoffDistance.EqualsWithin(rhs.BuffStandoffDistance);
            ret.RangedStandoffDistance = item.RangedStandoffDistance.EqualsWithin(rhs.RangedStandoffDistance);
            ret.GroupStandoffDistance = item.GroupStandoffDistance.EqualsWithin(rhs.GroupStandoffDistance);
            ret.RushingAttackPercentChance = item.RushingAttackPercentChance == rhs.RushingAttackPercentChance;
            ret.RushingAttackDistanceMult = item.RushingAttackDistanceMult.EqualsWithin(rhs.RushingAttackDistanceMult);
            ret.Advanced = EqualsMaskHelper.EqualsHelper(
                item.Advanced,
                rhs.Advanced,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.CSTDDataTypeState = item.CSTDDataTypeState == rhs.CSTDDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ICombatStyleGetter item,
            string? name = null,
            CombatStyle_Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICombatStyleGetter item,
            FileGeneration fg,
            string? name = null,
            CombatStyle_Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CombatStyle =>");
            }
            else
            {
                fg.AppendLine($"{name} (CombatStyle) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICombatStyleGetter item,
            FileGeneration fg,
            CombatStyle_Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.DodgePercentChance ?? true)
            {
                fg.AppendLine($"DodgePercentChance => {item.DodgePercentChance}");
            }
            if (printMask?.LeftRightPercentChance ?? true)
            {
                fg.AppendLine($"LeftRightPercentChance => {item.LeftRightPercentChance}");
            }
            if (printMask?.DodgeLeftRightTimerMin ?? true)
            {
                fg.AppendLine($"DodgeLeftRightTimerMin => {item.DodgeLeftRightTimerMin}");
            }
            if (printMask?.DodgeLeftRightTimerMax ?? true)
            {
                fg.AppendLine($"DodgeLeftRightTimerMax => {item.DodgeLeftRightTimerMax}");
            }
            if (printMask?.DodgeForwardTimerMin ?? true)
            {
                fg.AppendLine($"DodgeForwardTimerMin => {item.DodgeForwardTimerMin}");
            }
            if (printMask?.DodgeForwardTimerMax ?? true)
            {
                fg.AppendLine($"DodgeForwardTimerMax => {item.DodgeForwardTimerMax}");
            }
            if (printMask?.DodgeBackTimerMin ?? true)
            {
                fg.AppendLine($"DodgeBackTimerMin => {item.DodgeBackTimerMin}");
            }
            if (printMask?.DodgeBackTimerMax ?? true)
            {
                fg.AppendLine($"DodgeBackTimerMax => {item.DodgeBackTimerMax}");
            }
            if (printMask?.IdleTimerMin ?? true)
            {
                fg.AppendLine($"IdleTimerMin => {item.IdleTimerMin}");
            }
            if (printMask?.IdleTimerMax ?? true)
            {
                fg.AppendLine($"IdleTimerMax => {item.IdleTimerMax}");
            }
            if (printMask?.BlockPercentChance ?? true)
            {
                fg.AppendLine($"BlockPercentChance => {item.BlockPercentChance}");
            }
            if (printMask?.AttackPercentChance ?? true)
            {
                fg.AppendLine($"AttackPercentChance => {item.AttackPercentChance}");
            }
            if (printMask?.RecoilStaggerBonusToAttack ?? true)
            {
                fg.AppendLine($"RecoilStaggerBonusToAttack => {item.RecoilStaggerBonusToAttack}");
            }
            if (printMask?.UnconsciousBonusToAttack ?? true)
            {
                fg.AppendLine($"UnconsciousBonusToAttack => {item.UnconsciousBonusToAttack}");
            }
            if (printMask?.HandToHandBonusToAttack ?? true)
            {
                fg.AppendLine($"HandToHandBonusToAttack => {item.HandToHandBonusToAttack}");
            }
            if (printMask?.PowerAttackPercentChance ?? true)
            {
                fg.AppendLine($"PowerAttackPercentChance => {item.PowerAttackPercentChance}");
            }
            if (printMask?.RecoilStaggerBonusToPowerAttack ?? true)
            {
                fg.AppendLine($"RecoilStaggerBonusToPowerAttack => {item.RecoilStaggerBonusToPowerAttack}");
            }
            if (printMask?.UnconsciousBonusToPowerAttack ?? true)
            {
                fg.AppendLine($"UnconsciousBonusToPowerAttack => {item.UnconsciousBonusToPowerAttack}");
            }
            if (printMask?.PowerAttackNormal ?? true)
            {
                fg.AppendLine($"PowerAttackNormal => {item.PowerAttackNormal}");
            }
            if (printMask?.PowerAttackForward ?? true)
            {
                fg.AppendLine($"PowerAttackForward => {item.PowerAttackForward}");
            }
            if (printMask?.PowerAttackBack ?? true)
            {
                fg.AppendLine($"PowerAttackBack => {item.PowerAttackBack}");
            }
            if (printMask?.PowerAttackLeft ?? true)
            {
                fg.AppendLine($"PowerAttackLeft => {item.PowerAttackLeft}");
            }
            if (printMask?.PowerAttackRight ?? true)
            {
                fg.AppendLine($"PowerAttackRight => {item.PowerAttackRight}");
            }
            if (printMask?.HoldTimerMin ?? true)
            {
                fg.AppendLine($"HoldTimerMin => {item.HoldTimerMin}");
            }
            if (printMask?.HoldTimerMax ?? true)
            {
                fg.AppendLine($"HoldTimerMax => {item.HoldTimerMax}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.AcrobaticDodgePercentChance ?? true)
            {
                fg.AppendLine($"AcrobaticDodgePercentChance => {item.AcrobaticDodgePercentChance}");
            }
            if (printMask?.RangeMultOptimal ?? true)
            {
                fg.AppendLine($"RangeMultOptimal => {item.RangeMultOptimal}");
            }
            if (printMask?.RangeMultMax ?? true)
            {
                fg.AppendLine($"RangeMultMax => {item.RangeMultMax}");
            }
            if (printMask?.SwitchDistanceMelee ?? true)
            {
                fg.AppendLine($"SwitchDistanceMelee => {item.SwitchDistanceMelee}");
            }
            if (printMask?.SwitchDistanceRanged ?? true)
            {
                fg.AppendLine($"SwitchDistanceRanged => {item.SwitchDistanceRanged}");
            }
            if (printMask?.BuffStandoffDistance ?? true)
            {
                fg.AppendLine($"BuffStandoffDistance => {item.BuffStandoffDistance}");
            }
            if (printMask?.RangedStandoffDistance ?? true)
            {
                fg.AppendLine($"RangedStandoffDistance => {item.RangedStandoffDistance}");
            }
            if (printMask?.GroupStandoffDistance ?? true)
            {
                fg.AppendLine($"GroupStandoffDistance => {item.GroupStandoffDistance}");
            }
            if (printMask?.RushingAttackPercentChance ?? true)
            {
                fg.AppendLine($"RushingAttackPercentChance => {item.RushingAttackPercentChance}");
            }
            if (printMask?.RushingAttackDistanceMult ?? true)
            {
                fg.AppendLine($"RushingAttackDistanceMult => {item.RushingAttackDistanceMult}");
            }
            if (printMask?.Advanced?.Overall ?? true)
            {
                item.Advanced?.ToString(fg, "Advanced");
            }
            if (printMask?.CSTDDataTypeState ?? true)
            {
                fg.AppendLine($"CSTDDataTypeState => {item.CSTDDataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            ICombatStyleGetter item,
            CombatStyle_Mask<bool?> checkMask)
        {
            if (checkMask.Advanced?.Overall.HasValue ?? false && checkMask.Advanced.Overall.Value != (item.Advanced != null)) return false;
            if (checkMask.Advanced?.Specific != null && (item.Advanced == null || !item.Advanced.HasBeenSet(checkMask.Advanced.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ICombatStyleGetter item,
            CombatStyle_Mask<bool> mask)
        {
            mask.DodgePercentChance = true;
            mask.LeftRightPercentChance = true;
            mask.DodgeLeftRightTimerMin = true;
            mask.DodgeLeftRightTimerMax = true;
            mask.DodgeForwardTimerMin = true;
            mask.DodgeForwardTimerMax = true;
            mask.DodgeBackTimerMin = true;
            mask.DodgeBackTimerMax = true;
            mask.IdleTimerMin = true;
            mask.IdleTimerMax = true;
            mask.BlockPercentChance = true;
            mask.AttackPercentChance = true;
            mask.RecoilStaggerBonusToAttack = true;
            mask.UnconsciousBonusToAttack = true;
            mask.HandToHandBonusToAttack = true;
            mask.PowerAttackPercentChance = true;
            mask.RecoilStaggerBonusToPowerAttack = true;
            mask.UnconsciousBonusToPowerAttack = true;
            mask.PowerAttackNormal = true;
            mask.PowerAttackForward = true;
            mask.PowerAttackBack = true;
            mask.PowerAttackLeft = true;
            mask.PowerAttackRight = true;
            mask.HoldTimerMin = true;
            mask.HoldTimerMax = true;
            mask.Flags = true;
            mask.AcrobaticDodgePercentChance = true;
            mask.RangeMultOptimal = true;
            mask.RangeMultMax = true;
            mask.SwitchDistanceMelee = true;
            mask.SwitchDistanceRanged = true;
            mask.BuffStandoffDistance = true;
            mask.RangedStandoffDistance = true;
            mask.GroupStandoffDistance = true;
            mask.RushingAttackPercentChance = true;
            mask.RushingAttackDistanceMult = true;
            var itemAdvanced = item.Advanced;
            mask.Advanced = new MaskItem<bool, CombatStyleAdvanced_Mask<bool>?>(itemAdvanced != null, itemAdvanced?.GetHasBeenSetMask());
            mask.CSTDDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static CombatStyle_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CombatStyle_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (CombatStyle_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (CombatStyle_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (CombatStyle_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (CombatStyle_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new CombatStyle_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CombatStyle_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (CombatStyle_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (CombatStyle_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (CombatStyle_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICombatStyleGetter? lhs,
            ICombatStyleGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.DodgePercentChance != rhs.DodgePercentChance) return false;
            if (lhs.LeftRightPercentChance != rhs.LeftRightPercentChance) return false;
            if (!lhs.DodgeLeftRightTimerMin.EqualsWithin(rhs.DodgeLeftRightTimerMin)) return false;
            if (!lhs.DodgeLeftRightTimerMax.EqualsWithin(rhs.DodgeLeftRightTimerMax)) return false;
            if (!lhs.DodgeForwardTimerMin.EqualsWithin(rhs.DodgeForwardTimerMin)) return false;
            if (!lhs.DodgeForwardTimerMax.EqualsWithin(rhs.DodgeForwardTimerMax)) return false;
            if (!lhs.DodgeBackTimerMin.EqualsWithin(rhs.DodgeBackTimerMin)) return false;
            if (!lhs.DodgeBackTimerMax.EqualsWithin(rhs.DodgeBackTimerMax)) return false;
            if (!lhs.IdleTimerMin.EqualsWithin(rhs.IdleTimerMin)) return false;
            if (!lhs.IdleTimerMax.EqualsWithin(rhs.IdleTimerMax)) return false;
            if (lhs.BlockPercentChance != rhs.BlockPercentChance) return false;
            if (lhs.AttackPercentChance != rhs.AttackPercentChance) return false;
            if (!lhs.RecoilStaggerBonusToAttack.EqualsWithin(rhs.RecoilStaggerBonusToAttack)) return false;
            if (!lhs.UnconsciousBonusToAttack.EqualsWithin(rhs.UnconsciousBonusToAttack)) return false;
            if (!lhs.HandToHandBonusToAttack.EqualsWithin(rhs.HandToHandBonusToAttack)) return false;
            if (lhs.PowerAttackPercentChance != rhs.PowerAttackPercentChance) return false;
            if (!lhs.RecoilStaggerBonusToPowerAttack.EqualsWithin(rhs.RecoilStaggerBonusToPowerAttack)) return false;
            if (!lhs.UnconsciousBonusToPowerAttack.EqualsWithin(rhs.UnconsciousBonusToPowerAttack)) return false;
            if (lhs.PowerAttackNormal != rhs.PowerAttackNormal) return false;
            if (lhs.PowerAttackForward != rhs.PowerAttackForward) return false;
            if (lhs.PowerAttackBack != rhs.PowerAttackBack) return false;
            if (lhs.PowerAttackLeft != rhs.PowerAttackLeft) return false;
            if (lhs.PowerAttackRight != rhs.PowerAttackRight) return false;
            if (!lhs.HoldTimerMin.EqualsWithin(rhs.HoldTimerMin)) return false;
            if (!lhs.HoldTimerMax.EqualsWithin(rhs.HoldTimerMax)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.AcrobaticDodgePercentChance != rhs.AcrobaticDodgePercentChance) return false;
            if (!lhs.RangeMultOptimal.EqualsWithin(rhs.RangeMultOptimal)) return false;
            if (!lhs.RangeMultMax.EqualsWithin(rhs.RangeMultMax)) return false;
            if (!lhs.SwitchDistanceMelee.EqualsWithin(rhs.SwitchDistanceMelee)) return false;
            if (!lhs.SwitchDistanceRanged.EqualsWithin(rhs.SwitchDistanceRanged)) return false;
            if (!lhs.BuffStandoffDistance.EqualsWithin(rhs.BuffStandoffDistance)) return false;
            if (!lhs.RangedStandoffDistance.EqualsWithin(rhs.RangedStandoffDistance)) return false;
            if (!lhs.GroupStandoffDistance.EqualsWithin(rhs.GroupStandoffDistance)) return false;
            if (lhs.RushingAttackPercentChance != rhs.RushingAttackPercentChance) return false;
            if (!lhs.RushingAttackDistanceMult.EqualsWithin(rhs.RushingAttackDistanceMult)) return false;
            if (!object.Equals(lhs.Advanced, rhs.Advanced)) return false;
            if (lhs.CSTDDataTypeState != rhs.CSTDDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICombatStyleGetter?)lhs,
                rhs: rhs as ICombatStyleGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICombatStyleGetter?)lhs,
                rhs: rhs as ICombatStyleGetter);
        }
        
        public virtual int GetHashCode(ICombatStyleGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.DodgePercentChance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LeftRightPercentChance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DodgeLeftRightTimerMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DodgeLeftRightTimerMax).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DodgeForwardTimerMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DodgeForwardTimerMax).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DodgeBackTimerMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DodgeBackTimerMax).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.IdleTimerMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.IdleTimerMax).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BlockPercentChance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AttackPercentChance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RecoilStaggerBonusToAttack).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.UnconsciousBonusToAttack).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HandToHandBonusToAttack).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PowerAttackPercentChance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RecoilStaggerBonusToPowerAttack).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.UnconsciousBonusToPowerAttack).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PowerAttackNormal).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PowerAttackForward).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PowerAttackBack).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PowerAttackLeft).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PowerAttackRight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HoldTimerMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HoldTimerMax).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AcrobaticDodgePercentChance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RangeMultOptimal).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RangeMultMax).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SwitchDistanceMelee).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SwitchDistanceRanged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BuffStandoffDistance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RangedStandoffDistance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.GroupStandoffDistance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RushingAttackPercentChance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RushingAttackDistanceMult).CombineHashCode(ret);
            if (item.Advanced.TryGet(out var Advanceditem))
            {
                ret = HashHelper.GetHashCode(Advanceditem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.CSTDDataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ICombatStyleGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICombatStyleGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return CombatStyle.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ICombatStyleGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(CombatStyle obj, CombatStyle rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new CombatStyle(getNextFormKey());
            ret.DeepCopyIn((CombatStyle)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (CombatStyle)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class CombatStyleSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly CombatStyleSetterTranslationCommon Instance = new CombatStyleSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ICombatStyleInternal item,
            ICombatStyleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ICombatStyle item,
            ICombatStyleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgePercentChance) ?? true))
            {
                item.DodgePercentChance = rhs.DodgePercentChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LeftRightPercentChance) ?? true))
            {
                item.LeftRightPercentChance = rhs.LeftRightPercentChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeLeftRightTimerMin) ?? true))
            {
                item.DodgeLeftRightTimerMin = rhs.DodgeLeftRightTimerMin;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeLeftRightTimerMax) ?? true))
            {
                item.DodgeLeftRightTimerMax = rhs.DodgeLeftRightTimerMax;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeForwardTimerMin) ?? true))
            {
                item.DodgeForwardTimerMin = rhs.DodgeForwardTimerMin;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeForwardTimerMax) ?? true))
            {
                item.DodgeForwardTimerMax = rhs.DodgeForwardTimerMax;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeBackTimerMin) ?? true))
            {
                item.DodgeBackTimerMin = rhs.DodgeBackTimerMin;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeBackTimerMax) ?? true))
            {
                item.DodgeBackTimerMax = rhs.DodgeBackTimerMax;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.IdleTimerMin) ?? true))
            {
                item.IdleTimerMin = rhs.IdleTimerMin;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.IdleTimerMax) ?? true))
            {
                item.IdleTimerMax = rhs.IdleTimerMax;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.BlockPercentChance) ?? true))
            {
                item.BlockPercentChance = rhs.BlockPercentChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.AttackPercentChance) ?? true))
            {
                item.AttackPercentChance = rhs.AttackPercentChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RecoilStaggerBonusToAttack) ?? true))
            {
                item.RecoilStaggerBonusToAttack = rhs.RecoilStaggerBonusToAttack;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.UnconsciousBonusToAttack) ?? true))
            {
                item.UnconsciousBonusToAttack = rhs.UnconsciousBonusToAttack;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.HandToHandBonusToAttack) ?? true))
            {
                item.HandToHandBonusToAttack = rhs.HandToHandBonusToAttack;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackPercentChance) ?? true))
            {
                item.PowerAttackPercentChance = rhs.PowerAttackPercentChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack) ?? true))
            {
                item.RecoilStaggerBonusToPowerAttack = rhs.RecoilStaggerBonusToPowerAttack;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack) ?? true))
            {
                item.UnconsciousBonusToPowerAttack = rhs.UnconsciousBonusToPowerAttack;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackNormal) ?? true))
            {
                item.PowerAttackNormal = rhs.PowerAttackNormal;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackForward) ?? true))
            {
                item.PowerAttackForward = rhs.PowerAttackForward;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackBack) ?? true))
            {
                item.PowerAttackBack = rhs.PowerAttackBack;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackLeft) ?? true))
            {
                item.PowerAttackLeft = rhs.PowerAttackLeft;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackRight) ?? true))
            {
                item.PowerAttackRight = rhs.PowerAttackRight;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.HoldTimerMin) ?? true))
            {
                item.HoldTimerMin = rhs.HoldTimerMin;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.HoldTimerMax) ?? true))
            {
                item.HoldTimerMax = rhs.HoldTimerMax;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.AcrobaticDodgePercentChance) ?? true))
            {
                item.AcrobaticDodgePercentChance = rhs.AcrobaticDodgePercentChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangeMultOptimal) ?? true))
            {
                item.RangeMultOptimal = rhs.RangeMultOptimal;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangeMultMax) ?? true))
            {
                item.RangeMultMax = rhs.RangeMultMax;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SwitchDistanceMelee) ?? true))
            {
                item.SwitchDistanceMelee = rhs.SwitchDistanceMelee;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SwitchDistanceRanged) ?? true))
            {
                item.SwitchDistanceRanged = rhs.SwitchDistanceRanged;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.BuffStandoffDistance) ?? true))
            {
                item.BuffStandoffDistance = rhs.BuffStandoffDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedStandoffDistance) ?? true))
            {
                item.RangedStandoffDistance = rhs.RangedStandoffDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.GroupStandoffDistance) ?? true))
            {
                item.GroupStandoffDistance = rhs.GroupStandoffDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RushingAttackPercentChance) ?? true))
            {
                item.RushingAttackPercentChance = rhs.RushingAttackPercentChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RushingAttackDistanceMult) ?? true))
            {
                item.RushingAttackDistanceMult = rhs.RushingAttackDistanceMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.Advanced) ?? true))
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.Advanced);
                try
                {
                    if(rhs.Advanced.TryGet(out var rhsAdvanced))
                    {
                        item.Advanced = rhsAdvanced.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)CombatStyle_FieldIndex.Advanced));
                    }
                    else
                    {
                        item.Advanced = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CSTDDataTypeState) ?? true))
            {
                item.CSTDDataTypeState = rhs.CSTDDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICombatStyleInternal)item,
                rhs: (ICombatStyleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICombatStyle)item,
                rhs: (ICombatStyleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICombatStyleInternal)item,
                rhs: (ICombatStyleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICombatStyle)item,
                rhs: (ICombatStyleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public CombatStyle DeepCopy(
            ICombatStyleGetter item,
            CombatStyle_TranslationMask? copyMask = null)
        {
            CombatStyle ret = (CombatStyle)((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public CombatStyle DeepCopy(
            ICombatStyleGetter item,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask? copyMask = null)
        {
            CombatStyle ret = (CombatStyle)((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public CombatStyle DeepCopy(
            ICombatStyleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CombatStyle ret = (CombatStyle)((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class CombatStyle
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyle_Registration.Instance;
        public new static CombatStyle_Registration Registration => CombatStyle_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CombatStyleCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CombatStyleSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CombatStyleSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CombatStyleXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static CombatStyleXmlWriteTranslation Instance = new CombatStyleXmlWriteTranslation();

        public static void WriteToNodeXml(
            ICombatStyleGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgePercentChance) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.DodgePercentChance),
                        item: item.DodgePercentChance,
                        fieldIndex: (int)CombatStyle_FieldIndex.DodgePercentChance,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LeftRightPercentChance) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LeftRightPercentChance),
                        item: item.LeftRightPercentChance,
                        fieldIndex: (int)CombatStyle_FieldIndex.LeftRightPercentChance,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeLeftRightTimerMin) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.DodgeLeftRightTimerMin),
                        item: item.DodgeLeftRightTimerMin,
                        fieldIndex: (int)CombatStyle_FieldIndex.DodgeLeftRightTimerMin,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeLeftRightTimerMax) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.DodgeLeftRightTimerMax),
                        item: item.DodgeLeftRightTimerMax,
                        fieldIndex: (int)CombatStyle_FieldIndex.DodgeLeftRightTimerMax,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeForwardTimerMin) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.DodgeForwardTimerMin),
                        item: item.DodgeForwardTimerMin,
                        fieldIndex: (int)CombatStyle_FieldIndex.DodgeForwardTimerMin,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeForwardTimerMax) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.DodgeForwardTimerMax),
                        item: item.DodgeForwardTimerMax,
                        fieldIndex: (int)CombatStyle_FieldIndex.DodgeForwardTimerMax,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeBackTimerMin) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.DodgeBackTimerMin),
                        item: item.DodgeBackTimerMin,
                        fieldIndex: (int)CombatStyle_FieldIndex.DodgeBackTimerMin,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeBackTimerMax) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.DodgeBackTimerMax),
                        item: item.DodgeBackTimerMax,
                        fieldIndex: (int)CombatStyle_FieldIndex.DodgeBackTimerMax,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.IdleTimerMin) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.IdleTimerMin),
                        item: item.IdleTimerMin,
                        fieldIndex: (int)CombatStyle_FieldIndex.IdleTimerMin,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.IdleTimerMax) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.IdleTimerMax),
                        item: item.IdleTimerMax,
                        fieldIndex: (int)CombatStyle_FieldIndex.IdleTimerMax,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.BlockPercentChance) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BlockPercentChance),
                        item: item.BlockPercentChance,
                        fieldIndex: (int)CombatStyle_FieldIndex.BlockPercentChance,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.AttackPercentChance) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.AttackPercentChance),
                        item: item.AttackPercentChance,
                        fieldIndex: (int)CombatStyle_FieldIndex.AttackPercentChance,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RecoilStaggerBonusToAttack) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.RecoilStaggerBonusToAttack),
                        item: item.RecoilStaggerBonusToAttack,
                        fieldIndex: (int)CombatStyle_FieldIndex.RecoilStaggerBonusToAttack,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.UnconsciousBonusToAttack) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.UnconsciousBonusToAttack),
                        item: item.UnconsciousBonusToAttack,
                        fieldIndex: (int)CombatStyle_FieldIndex.UnconsciousBonusToAttack,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.HandToHandBonusToAttack) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HandToHandBonusToAttack),
                        item: item.HandToHandBonusToAttack,
                        fieldIndex: (int)CombatStyle_FieldIndex.HandToHandBonusToAttack,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackPercentChance) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.PowerAttackPercentChance),
                        item: item.PowerAttackPercentChance,
                        fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackPercentChance,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.RecoilStaggerBonusToPowerAttack),
                        item: item.RecoilStaggerBonusToPowerAttack,
                        fieldIndex: (int)CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.UnconsciousBonusToPowerAttack),
                        item: item.UnconsciousBonusToPowerAttack,
                        fieldIndex: (int)CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackNormal) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.PowerAttackNormal),
                        item: item.PowerAttackNormal,
                        fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackNormal,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackForward) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.PowerAttackForward),
                        item: item.PowerAttackForward,
                        fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackForward,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackBack) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.PowerAttackBack),
                        item: item.PowerAttackBack,
                        fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackBack,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackLeft) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.PowerAttackLeft),
                        item: item.PowerAttackLeft,
                        fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackLeft,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackRight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.PowerAttackRight),
                        item: item.PowerAttackRight,
                        fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackRight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.HoldTimerMin) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HoldTimerMin),
                        item: item.HoldTimerMin,
                        fieldIndex: (int)CombatStyle_FieldIndex.HoldTimerMin,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.HoldTimerMax) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HoldTimerMax),
                        item: item.HoldTimerMax,
                        fieldIndex: (int)CombatStyle_FieldIndex.HoldTimerMax,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<CombatStyle.Flag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)CombatStyle_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.AcrobaticDodgePercentChance) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.AcrobaticDodgePercentChance),
                        item: item.AcrobaticDodgePercentChance,
                        fieldIndex: (int)CombatStyle_FieldIndex.AcrobaticDodgePercentChance,
                        errorMask: errorMask);
                }
                if (!item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break0))
                {
                    if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangeMultOptimal) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.RangeMultOptimal),
                            item: item.RangeMultOptimal,
                            fieldIndex: (int)CombatStyle_FieldIndex.RangeMultOptimal,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangeMultMax) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.RangeMultMax),
                            item: item.RangeMultMax,
                            fieldIndex: (int)CombatStyle_FieldIndex.RangeMultMax,
                            errorMask: errorMask);
                    }
                    if (!item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break1))
                    {
                        if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SwitchDistanceMelee) ?? true))
                        {
                            FloatXmlTranslation.Instance.Write(
                                node: node,
                                name: nameof(item.SwitchDistanceMelee),
                                item: item.SwitchDistanceMelee,
                                fieldIndex: (int)CombatStyle_FieldIndex.SwitchDistanceMelee,
                                errorMask: errorMask);
                        }
                        if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SwitchDistanceRanged) ?? true))
                        {
                            FloatXmlTranslation.Instance.Write(
                                node: node,
                                name: nameof(item.SwitchDistanceRanged),
                                item: item.SwitchDistanceRanged,
                                fieldIndex: (int)CombatStyle_FieldIndex.SwitchDistanceRanged,
                                errorMask: errorMask);
                        }
                        if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.BuffStandoffDistance) ?? true))
                        {
                            FloatXmlTranslation.Instance.Write(
                                node: node,
                                name: nameof(item.BuffStandoffDistance),
                                item: item.BuffStandoffDistance,
                                fieldIndex: (int)CombatStyle_FieldIndex.BuffStandoffDistance,
                                errorMask: errorMask);
                        }
                        if (!item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break2))
                        {
                            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedStandoffDistance) ?? true))
                            {
                                FloatXmlTranslation.Instance.Write(
                                    node: node,
                                    name: nameof(item.RangedStandoffDistance),
                                    item: item.RangedStandoffDistance,
                                    fieldIndex: (int)CombatStyle_FieldIndex.RangedStandoffDistance,
                                    errorMask: errorMask);
                            }
                            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.GroupStandoffDistance) ?? true))
                            {
                                FloatXmlTranslation.Instance.Write(
                                    node: node,
                                    name: nameof(item.GroupStandoffDistance),
                                    item: item.GroupStandoffDistance,
                                    fieldIndex: (int)CombatStyle_FieldIndex.GroupStandoffDistance,
                                    errorMask: errorMask);
                            }
                            if (!item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break3))
                            {
                                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RushingAttackPercentChance) ?? true))
                                {
                                    ByteXmlTranslation.Instance.Write(
                                        node: node,
                                        name: nameof(item.RushingAttackPercentChance),
                                        item: item.RushingAttackPercentChance,
                                        fieldIndex: (int)CombatStyle_FieldIndex.RushingAttackPercentChance,
                                        errorMask: errorMask);
                                }
                                if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RushingAttackDistanceMult) ?? true))
                                {
                                    FloatXmlTranslation.Instance.Write(
                                        node: node,
                                        name: nameof(item.RushingAttackDistanceMult),
                                        item: item.RushingAttackDistanceMult,
                                        fieldIndex: (int)CombatStyle_FieldIndex.RushingAttackDistanceMult,
                                        errorMask: errorMask);
                                }
                            }
                        }
                    }
                }
                else
                {
                    node.Add(new XElement("HasCSTDDataType"));
                }
            }
            if ((item.Advanced != null)
                && (translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.Advanced) ?? true))
            {
                var loquiItem = item.Advanced;
                ((CombatStyleAdvancedXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Advanced),
                    fieldIndex: (int)CombatStyle_FieldIndex.Advanced,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)CombatStyle_FieldIndex.Advanced));
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CSTDDataTypeState) ?? true))
            {
                EnumXmlTranslation<CombatStyle.CSTDDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.CSTDDataTypeState),
                    item: item.CSTDDataTypeState,
                    fieldIndex: (int)CombatStyle_FieldIndex.CSTDDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ICombatStyleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.CombatStyle");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.CombatStyle");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICombatStyleGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICombatStyleGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICombatStyleGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class CombatStyleXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static CombatStyleXmlCreateTranslation Instance = new CombatStyleXmlCreateTranslation();

        public static void FillPublicXml(
            ICombatStyleInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CombatStyleXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICombatStyleInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "DodgePercentChance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgePercentChance);
                        item.DodgePercentChance = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.CSTDDataTypeState |= CombatStyle.CSTDDataType.Has;
                    break;
                case "LeftRightPercentChance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.LeftRightPercentChance);
                        item.LeftRightPercentChance = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeLeftRightTimerMin":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeLeftRightTimerMin);
                        item.DodgeLeftRightTimerMin = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeLeftRightTimerMax":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeLeftRightTimerMax);
                        item.DodgeLeftRightTimerMax = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeForwardTimerMin":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeForwardTimerMin);
                        item.DodgeForwardTimerMin = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeForwardTimerMax":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeForwardTimerMax);
                        item.DodgeForwardTimerMax = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeBackTimerMin":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeBackTimerMin);
                        item.DodgeBackTimerMin = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeBackTimerMax":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeBackTimerMax);
                        item.DodgeBackTimerMax = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IdleTimerMin":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.IdleTimerMin);
                        item.IdleTimerMin = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IdleTimerMax":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.IdleTimerMax);
                        item.IdleTimerMax = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BlockPercentChance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.BlockPercentChance);
                        item.BlockPercentChance = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AttackPercentChance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.AttackPercentChance);
                        item.AttackPercentChance = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RecoilStaggerBonusToAttack":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.RecoilStaggerBonusToAttack);
                        item.RecoilStaggerBonusToAttack = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnconsciousBonusToAttack":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.UnconsciousBonusToAttack);
                        item.UnconsciousBonusToAttack = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HandToHandBonusToAttack":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.HandToHandBonusToAttack);
                        item.HandToHandBonusToAttack = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PowerAttackPercentChance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackPercentChance);
                        item.PowerAttackPercentChance = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RecoilStaggerBonusToPowerAttack":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack);
                        item.RecoilStaggerBonusToPowerAttack = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnconsciousBonusToPowerAttack":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack);
                        item.UnconsciousBonusToPowerAttack = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PowerAttackNormal":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackNormal);
                        item.PowerAttackNormal = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PowerAttackForward":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackForward);
                        item.PowerAttackForward = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PowerAttackBack":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackBack);
                        item.PowerAttackBack = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PowerAttackLeft":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackLeft);
                        item.PowerAttackLeft = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PowerAttackRight":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackRight);
                        item.PowerAttackRight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HoldTimerMin":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.HoldTimerMin);
                        item.HoldTimerMin = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HoldTimerMax":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.HoldTimerMax);
                        item.HoldTimerMax = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.Flags);
                        item.Flags = EnumXmlTranslation<CombatStyle.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AcrobaticDodgePercentChance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.AcrobaticDodgePercentChance);
                        item.AcrobaticDodgePercentChance = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RangeMultOptimal":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.RangeMultOptimal);
                        item.RangeMultOptimal = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.CSTDDataTypeState &= ~CombatStyle.CSTDDataType.Break0;
                    break;
                case "RangeMultMax":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.RangeMultMax);
                        item.RangeMultMax = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SwitchDistanceMelee":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.SwitchDistanceMelee);
                        item.SwitchDistanceMelee = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.CSTDDataTypeState &= ~CombatStyle.CSTDDataType.Break1;
                    break;
                case "SwitchDistanceRanged":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.SwitchDistanceRanged);
                        item.SwitchDistanceRanged = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BuffStandoffDistance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.BuffStandoffDistance);
                        item.BuffStandoffDistance = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RangedStandoffDistance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.RangedStandoffDistance);
                        item.RangedStandoffDistance = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.CSTDDataTypeState &= ~CombatStyle.CSTDDataType.Break2;
                    break;
                case "GroupStandoffDistance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.GroupStandoffDistance);
                        item.GroupStandoffDistance = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RushingAttackPercentChance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.RushingAttackPercentChance);
                        item.RushingAttackPercentChance = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.CSTDDataTypeState &= ~CombatStyle.CSTDDataType.Break3;
                    break;
                case "RushingAttackDistanceMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.RushingAttackDistanceMult);
                        item.RushingAttackDistanceMult = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Advanced":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.Advanced);
                        item.Advanced = LoquiXmlTranslation<CombatStyleAdvanced>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)CombatStyle_FieldIndex.Advanced));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CSTDDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.CSTDDataTypeState);
                        item.CSTDDataTypeState = EnumXmlTranslation<CombatStyle.CSTDDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class CombatStyleXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ICombatStyleGetter item,
            XElement node,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((CombatStyleXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CombatStyle_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ICombatStyleGetter item,
            string path,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICombatStyleGetter item,
            Stream stream,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class CombatStyle_Mask<T> :
        OblivionMajorRecord_Mask<T>,
        IMask<T>,
        IEquatable<CombatStyle_Mask<T>>
        where T : notnull
    {
        #region Ctors
        public CombatStyle_Mask(T initialValue)
        : base(initialValue)
        {
            this.DodgePercentChance = initialValue;
            this.LeftRightPercentChance = initialValue;
            this.DodgeLeftRightTimerMin = initialValue;
            this.DodgeLeftRightTimerMax = initialValue;
            this.DodgeForwardTimerMin = initialValue;
            this.DodgeForwardTimerMax = initialValue;
            this.DodgeBackTimerMin = initialValue;
            this.DodgeBackTimerMax = initialValue;
            this.IdleTimerMin = initialValue;
            this.IdleTimerMax = initialValue;
            this.BlockPercentChance = initialValue;
            this.AttackPercentChance = initialValue;
            this.RecoilStaggerBonusToAttack = initialValue;
            this.UnconsciousBonusToAttack = initialValue;
            this.HandToHandBonusToAttack = initialValue;
            this.PowerAttackPercentChance = initialValue;
            this.RecoilStaggerBonusToPowerAttack = initialValue;
            this.UnconsciousBonusToPowerAttack = initialValue;
            this.PowerAttackNormal = initialValue;
            this.PowerAttackForward = initialValue;
            this.PowerAttackBack = initialValue;
            this.PowerAttackLeft = initialValue;
            this.PowerAttackRight = initialValue;
            this.HoldTimerMin = initialValue;
            this.HoldTimerMax = initialValue;
            this.Flags = initialValue;
            this.AcrobaticDodgePercentChance = initialValue;
            this.RangeMultOptimal = initialValue;
            this.RangeMultMax = initialValue;
            this.SwitchDistanceMelee = initialValue;
            this.SwitchDistanceRanged = initialValue;
            this.BuffStandoffDistance = initialValue;
            this.RangedStandoffDistance = initialValue;
            this.GroupStandoffDistance = initialValue;
            this.RushingAttackPercentChance = initialValue;
            this.RushingAttackDistanceMult = initialValue;
            this.Advanced = new MaskItem<T, CombatStyleAdvanced_Mask<T>?>(initialValue, new CombatStyleAdvanced_Mask<T>(initialValue));
            this.CSTDDataTypeState = initialValue;
        }

        public CombatStyle_Mask(
            T MajorRecordFlagsRaw,
            T FormKey,
            T Version,
            T EditorID,
            T OblivionMajorRecordFlags,
            T DodgePercentChance,
            T LeftRightPercentChance,
            T DodgeLeftRightTimerMin,
            T DodgeLeftRightTimerMax,
            T DodgeForwardTimerMin,
            T DodgeForwardTimerMax,
            T DodgeBackTimerMin,
            T DodgeBackTimerMax,
            T IdleTimerMin,
            T IdleTimerMax,
            T BlockPercentChance,
            T AttackPercentChance,
            T RecoilStaggerBonusToAttack,
            T UnconsciousBonusToAttack,
            T HandToHandBonusToAttack,
            T PowerAttackPercentChance,
            T RecoilStaggerBonusToPowerAttack,
            T UnconsciousBonusToPowerAttack,
            T PowerAttackNormal,
            T PowerAttackForward,
            T PowerAttackBack,
            T PowerAttackLeft,
            T PowerAttackRight,
            T HoldTimerMin,
            T HoldTimerMax,
            T Flags,
            T AcrobaticDodgePercentChance,
            T RangeMultOptimal,
            T RangeMultMax,
            T SwitchDistanceMelee,
            T SwitchDistanceRanged,
            T BuffStandoffDistance,
            T RangedStandoffDistance,
            T GroupStandoffDistance,
            T RushingAttackPercentChance,
            T RushingAttackDistanceMult,
            T Advanced,
            T CSTDDataTypeState)
        : base(
            MajorRecordFlagsRaw: MajorRecordFlagsRaw,
            FormKey: FormKey,
            Version: Version,
            EditorID: EditorID,
            OblivionMajorRecordFlags: OblivionMajorRecordFlags)
        {
            this.DodgePercentChance = DodgePercentChance;
            this.LeftRightPercentChance = LeftRightPercentChance;
            this.DodgeLeftRightTimerMin = DodgeLeftRightTimerMin;
            this.DodgeLeftRightTimerMax = DodgeLeftRightTimerMax;
            this.DodgeForwardTimerMin = DodgeForwardTimerMin;
            this.DodgeForwardTimerMax = DodgeForwardTimerMax;
            this.DodgeBackTimerMin = DodgeBackTimerMin;
            this.DodgeBackTimerMax = DodgeBackTimerMax;
            this.IdleTimerMin = IdleTimerMin;
            this.IdleTimerMax = IdleTimerMax;
            this.BlockPercentChance = BlockPercentChance;
            this.AttackPercentChance = AttackPercentChance;
            this.RecoilStaggerBonusToAttack = RecoilStaggerBonusToAttack;
            this.UnconsciousBonusToAttack = UnconsciousBonusToAttack;
            this.HandToHandBonusToAttack = HandToHandBonusToAttack;
            this.PowerAttackPercentChance = PowerAttackPercentChance;
            this.RecoilStaggerBonusToPowerAttack = RecoilStaggerBonusToPowerAttack;
            this.UnconsciousBonusToPowerAttack = UnconsciousBonusToPowerAttack;
            this.PowerAttackNormal = PowerAttackNormal;
            this.PowerAttackForward = PowerAttackForward;
            this.PowerAttackBack = PowerAttackBack;
            this.PowerAttackLeft = PowerAttackLeft;
            this.PowerAttackRight = PowerAttackRight;
            this.HoldTimerMin = HoldTimerMin;
            this.HoldTimerMax = HoldTimerMax;
            this.Flags = Flags;
            this.AcrobaticDodgePercentChance = AcrobaticDodgePercentChance;
            this.RangeMultOptimal = RangeMultOptimal;
            this.RangeMultMax = RangeMultMax;
            this.SwitchDistanceMelee = SwitchDistanceMelee;
            this.SwitchDistanceRanged = SwitchDistanceRanged;
            this.BuffStandoffDistance = BuffStandoffDistance;
            this.RangedStandoffDistance = RangedStandoffDistance;
            this.GroupStandoffDistance = GroupStandoffDistance;
            this.RushingAttackPercentChance = RushingAttackPercentChance;
            this.RushingAttackDistanceMult = RushingAttackDistanceMult;
            this.Advanced = new MaskItem<T, CombatStyleAdvanced_Mask<T>?>(Advanced, new CombatStyleAdvanced_Mask<T>(Advanced));
            this.CSTDDataTypeState = CSTDDataTypeState;
        }

        #pragma warning disable CS8618
        protected CombatStyle_Mask()
        {
        }
        #pragma warning restore CS8618

        #endregion

        #region Members
        public T DodgePercentChance;
        public T LeftRightPercentChance;
        public T DodgeLeftRightTimerMin;
        public T DodgeLeftRightTimerMax;
        public T DodgeForwardTimerMin;
        public T DodgeForwardTimerMax;
        public T DodgeBackTimerMin;
        public T DodgeBackTimerMax;
        public T IdleTimerMin;
        public T IdleTimerMax;
        public T BlockPercentChance;
        public T AttackPercentChance;
        public T RecoilStaggerBonusToAttack;
        public T UnconsciousBonusToAttack;
        public T HandToHandBonusToAttack;
        public T PowerAttackPercentChance;
        public T RecoilStaggerBonusToPowerAttack;
        public T UnconsciousBonusToPowerAttack;
        public T PowerAttackNormal;
        public T PowerAttackForward;
        public T PowerAttackBack;
        public T PowerAttackLeft;
        public T PowerAttackRight;
        public T HoldTimerMin;
        public T HoldTimerMax;
        public T Flags;
        public T AcrobaticDodgePercentChance;
        public T RangeMultOptimal;
        public T RangeMultMax;
        public T SwitchDistanceMelee;
        public T SwitchDistanceRanged;
        public T BuffStandoffDistance;
        public T RangedStandoffDistance;
        public T GroupStandoffDistance;
        public T RushingAttackPercentChance;
        public T RushingAttackDistanceMult;
        public MaskItem<T, CombatStyleAdvanced_Mask<T>?>? Advanced { get; set; }
        public T CSTDDataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is CombatStyle_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CombatStyle_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.DodgePercentChance, rhs.DodgePercentChance)) return false;
            if (!object.Equals(this.LeftRightPercentChance, rhs.LeftRightPercentChance)) return false;
            if (!object.Equals(this.DodgeLeftRightTimerMin, rhs.DodgeLeftRightTimerMin)) return false;
            if (!object.Equals(this.DodgeLeftRightTimerMax, rhs.DodgeLeftRightTimerMax)) return false;
            if (!object.Equals(this.DodgeForwardTimerMin, rhs.DodgeForwardTimerMin)) return false;
            if (!object.Equals(this.DodgeForwardTimerMax, rhs.DodgeForwardTimerMax)) return false;
            if (!object.Equals(this.DodgeBackTimerMin, rhs.DodgeBackTimerMin)) return false;
            if (!object.Equals(this.DodgeBackTimerMax, rhs.DodgeBackTimerMax)) return false;
            if (!object.Equals(this.IdleTimerMin, rhs.IdleTimerMin)) return false;
            if (!object.Equals(this.IdleTimerMax, rhs.IdleTimerMax)) return false;
            if (!object.Equals(this.BlockPercentChance, rhs.BlockPercentChance)) return false;
            if (!object.Equals(this.AttackPercentChance, rhs.AttackPercentChance)) return false;
            if (!object.Equals(this.RecoilStaggerBonusToAttack, rhs.RecoilStaggerBonusToAttack)) return false;
            if (!object.Equals(this.UnconsciousBonusToAttack, rhs.UnconsciousBonusToAttack)) return false;
            if (!object.Equals(this.HandToHandBonusToAttack, rhs.HandToHandBonusToAttack)) return false;
            if (!object.Equals(this.PowerAttackPercentChance, rhs.PowerAttackPercentChance)) return false;
            if (!object.Equals(this.RecoilStaggerBonusToPowerAttack, rhs.RecoilStaggerBonusToPowerAttack)) return false;
            if (!object.Equals(this.UnconsciousBonusToPowerAttack, rhs.UnconsciousBonusToPowerAttack)) return false;
            if (!object.Equals(this.PowerAttackNormal, rhs.PowerAttackNormal)) return false;
            if (!object.Equals(this.PowerAttackForward, rhs.PowerAttackForward)) return false;
            if (!object.Equals(this.PowerAttackBack, rhs.PowerAttackBack)) return false;
            if (!object.Equals(this.PowerAttackLeft, rhs.PowerAttackLeft)) return false;
            if (!object.Equals(this.PowerAttackRight, rhs.PowerAttackRight)) return false;
            if (!object.Equals(this.HoldTimerMin, rhs.HoldTimerMin)) return false;
            if (!object.Equals(this.HoldTimerMax, rhs.HoldTimerMax)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.AcrobaticDodgePercentChance, rhs.AcrobaticDodgePercentChance)) return false;
            if (!object.Equals(this.RangeMultOptimal, rhs.RangeMultOptimal)) return false;
            if (!object.Equals(this.RangeMultMax, rhs.RangeMultMax)) return false;
            if (!object.Equals(this.SwitchDistanceMelee, rhs.SwitchDistanceMelee)) return false;
            if (!object.Equals(this.SwitchDistanceRanged, rhs.SwitchDistanceRanged)) return false;
            if (!object.Equals(this.BuffStandoffDistance, rhs.BuffStandoffDistance)) return false;
            if (!object.Equals(this.RangedStandoffDistance, rhs.RangedStandoffDistance)) return false;
            if (!object.Equals(this.GroupStandoffDistance, rhs.GroupStandoffDistance)) return false;
            if (!object.Equals(this.RushingAttackPercentChance, rhs.RushingAttackPercentChance)) return false;
            if (!object.Equals(this.RushingAttackDistanceMult, rhs.RushingAttackDistanceMult)) return false;
            if (!object.Equals(this.Advanced, rhs.Advanced)) return false;
            if (!object.Equals(this.CSTDDataTypeState, rhs.CSTDDataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.DodgePercentChance?.GetHashCode());
            ret = ret.CombineHashCode(this.LeftRightPercentChance?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeLeftRightTimerMin?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeLeftRightTimerMax?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeForwardTimerMin?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeForwardTimerMax?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeBackTimerMin?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeBackTimerMax?.GetHashCode());
            ret = ret.CombineHashCode(this.IdleTimerMin?.GetHashCode());
            ret = ret.CombineHashCode(this.IdleTimerMax?.GetHashCode());
            ret = ret.CombineHashCode(this.BlockPercentChance?.GetHashCode());
            ret = ret.CombineHashCode(this.AttackPercentChance?.GetHashCode());
            ret = ret.CombineHashCode(this.RecoilStaggerBonusToAttack?.GetHashCode());
            ret = ret.CombineHashCode(this.UnconsciousBonusToAttack?.GetHashCode());
            ret = ret.CombineHashCode(this.HandToHandBonusToAttack?.GetHashCode());
            ret = ret.CombineHashCode(this.PowerAttackPercentChance?.GetHashCode());
            ret = ret.CombineHashCode(this.RecoilStaggerBonusToPowerAttack?.GetHashCode());
            ret = ret.CombineHashCode(this.UnconsciousBonusToPowerAttack?.GetHashCode());
            ret = ret.CombineHashCode(this.PowerAttackNormal?.GetHashCode());
            ret = ret.CombineHashCode(this.PowerAttackForward?.GetHashCode());
            ret = ret.CombineHashCode(this.PowerAttackBack?.GetHashCode());
            ret = ret.CombineHashCode(this.PowerAttackLeft?.GetHashCode());
            ret = ret.CombineHashCode(this.PowerAttackRight?.GetHashCode());
            ret = ret.CombineHashCode(this.HoldTimerMin?.GetHashCode());
            ret = ret.CombineHashCode(this.HoldTimerMax?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.AcrobaticDodgePercentChance?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeMultOptimal?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeMultMax?.GetHashCode());
            ret = ret.CombineHashCode(this.SwitchDistanceMelee?.GetHashCode());
            ret = ret.CombineHashCode(this.SwitchDistanceRanged?.GetHashCode());
            ret = ret.CombineHashCode(this.BuffStandoffDistance?.GetHashCode());
            ret = ret.CombineHashCode(this.RangedStandoffDistance?.GetHashCode());
            ret = ret.CombineHashCode(this.GroupStandoffDistance?.GetHashCode());
            ret = ret.CombineHashCode(this.RushingAttackPercentChance?.GetHashCode());
            ret = ret.CombineHashCode(this.RushingAttackDistanceMult?.GetHashCode());
            ret = ret.CombineHashCode(this.Advanced?.GetHashCode());
            ret = ret.CombineHashCode(this.CSTDDataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.DodgePercentChance)) return false;
            if (!eval(this.LeftRightPercentChance)) return false;
            if (!eval(this.DodgeLeftRightTimerMin)) return false;
            if (!eval(this.DodgeLeftRightTimerMax)) return false;
            if (!eval(this.DodgeForwardTimerMin)) return false;
            if (!eval(this.DodgeForwardTimerMax)) return false;
            if (!eval(this.DodgeBackTimerMin)) return false;
            if (!eval(this.DodgeBackTimerMax)) return false;
            if (!eval(this.IdleTimerMin)) return false;
            if (!eval(this.IdleTimerMax)) return false;
            if (!eval(this.BlockPercentChance)) return false;
            if (!eval(this.AttackPercentChance)) return false;
            if (!eval(this.RecoilStaggerBonusToAttack)) return false;
            if (!eval(this.UnconsciousBonusToAttack)) return false;
            if (!eval(this.HandToHandBonusToAttack)) return false;
            if (!eval(this.PowerAttackPercentChance)) return false;
            if (!eval(this.RecoilStaggerBonusToPowerAttack)) return false;
            if (!eval(this.UnconsciousBonusToPowerAttack)) return false;
            if (!eval(this.PowerAttackNormal)) return false;
            if (!eval(this.PowerAttackForward)) return false;
            if (!eval(this.PowerAttackBack)) return false;
            if (!eval(this.PowerAttackLeft)) return false;
            if (!eval(this.PowerAttackRight)) return false;
            if (!eval(this.HoldTimerMin)) return false;
            if (!eval(this.HoldTimerMax)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.AcrobaticDodgePercentChance)) return false;
            if (!eval(this.RangeMultOptimal)) return false;
            if (!eval(this.RangeMultMax)) return false;
            if (!eval(this.SwitchDistanceMelee)) return false;
            if (!eval(this.SwitchDistanceRanged)) return false;
            if (!eval(this.BuffStandoffDistance)) return false;
            if (!eval(this.RangedStandoffDistance)) return false;
            if (!eval(this.GroupStandoffDistance)) return false;
            if (!eval(this.RushingAttackPercentChance)) return false;
            if (!eval(this.RushingAttackDistanceMult)) return false;
            if (Advanced != null)
            {
                if (!eval(this.Advanced.Overall)) return false;
                if (this.Advanced.Specific != null && !this.Advanced.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.CSTDDataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new CombatStyle_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new CombatStyle_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(CombatStyle_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.DodgePercentChance = eval(this.DodgePercentChance);
            obj.LeftRightPercentChance = eval(this.LeftRightPercentChance);
            obj.DodgeLeftRightTimerMin = eval(this.DodgeLeftRightTimerMin);
            obj.DodgeLeftRightTimerMax = eval(this.DodgeLeftRightTimerMax);
            obj.DodgeForwardTimerMin = eval(this.DodgeForwardTimerMin);
            obj.DodgeForwardTimerMax = eval(this.DodgeForwardTimerMax);
            obj.DodgeBackTimerMin = eval(this.DodgeBackTimerMin);
            obj.DodgeBackTimerMax = eval(this.DodgeBackTimerMax);
            obj.IdleTimerMin = eval(this.IdleTimerMin);
            obj.IdleTimerMax = eval(this.IdleTimerMax);
            obj.BlockPercentChance = eval(this.BlockPercentChance);
            obj.AttackPercentChance = eval(this.AttackPercentChance);
            obj.RecoilStaggerBonusToAttack = eval(this.RecoilStaggerBonusToAttack);
            obj.UnconsciousBonusToAttack = eval(this.UnconsciousBonusToAttack);
            obj.HandToHandBonusToAttack = eval(this.HandToHandBonusToAttack);
            obj.PowerAttackPercentChance = eval(this.PowerAttackPercentChance);
            obj.RecoilStaggerBonusToPowerAttack = eval(this.RecoilStaggerBonusToPowerAttack);
            obj.UnconsciousBonusToPowerAttack = eval(this.UnconsciousBonusToPowerAttack);
            obj.PowerAttackNormal = eval(this.PowerAttackNormal);
            obj.PowerAttackForward = eval(this.PowerAttackForward);
            obj.PowerAttackBack = eval(this.PowerAttackBack);
            obj.PowerAttackLeft = eval(this.PowerAttackLeft);
            obj.PowerAttackRight = eval(this.PowerAttackRight);
            obj.HoldTimerMin = eval(this.HoldTimerMin);
            obj.HoldTimerMax = eval(this.HoldTimerMax);
            obj.Flags = eval(this.Flags);
            obj.AcrobaticDodgePercentChance = eval(this.AcrobaticDodgePercentChance);
            obj.RangeMultOptimal = eval(this.RangeMultOptimal);
            obj.RangeMultMax = eval(this.RangeMultMax);
            obj.SwitchDistanceMelee = eval(this.SwitchDistanceMelee);
            obj.SwitchDistanceRanged = eval(this.SwitchDistanceRanged);
            obj.BuffStandoffDistance = eval(this.BuffStandoffDistance);
            obj.RangedStandoffDistance = eval(this.RangedStandoffDistance);
            obj.GroupStandoffDistance = eval(this.GroupStandoffDistance);
            obj.RushingAttackPercentChance = eval(this.RushingAttackPercentChance);
            obj.RushingAttackDistanceMult = eval(this.RushingAttackDistanceMult);
            obj.Advanced = this.Advanced == null ? null : new MaskItem<R, CombatStyleAdvanced_Mask<R>?>(eval(this.Advanced.Overall), this.Advanced.Specific?.Translate(eval));
            obj.CSTDDataTypeState = eval(this.CSTDDataTypeState);
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(CombatStyle_Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, CombatStyle_Mask<bool>? printMask = null)
        {
            fg.AppendLine($"{nameof(CombatStyle_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.DodgePercentChance ?? true)
                {
                    fg.AppendLine($"DodgePercentChance => {DodgePercentChance}");
                }
                if (printMask?.LeftRightPercentChance ?? true)
                {
                    fg.AppendLine($"LeftRightPercentChance => {LeftRightPercentChance}");
                }
                if (printMask?.DodgeLeftRightTimerMin ?? true)
                {
                    fg.AppendLine($"DodgeLeftRightTimerMin => {DodgeLeftRightTimerMin}");
                }
                if (printMask?.DodgeLeftRightTimerMax ?? true)
                {
                    fg.AppendLine($"DodgeLeftRightTimerMax => {DodgeLeftRightTimerMax}");
                }
                if (printMask?.DodgeForwardTimerMin ?? true)
                {
                    fg.AppendLine($"DodgeForwardTimerMin => {DodgeForwardTimerMin}");
                }
                if (printMask?.DodgeForwardTimerMax ?? true)
                {
                    fg.AppendLine($"DodgeForwardTimerMax => {DodgeForwardTimerMax}");
                }
                if (printMask?.DodgeBackTimerMin ?? true)
                {
                    fg.AppendLine($"DodgeBackTimerMin => {DodgeBackTimerMin}");
                }
                if (printMask?.DodgeBackTimerMax ?? true)
                {
                    fg.AppendLine($"DodgeBackTimerMax => {DodgeBackTimerMax}");
                }
                if (printMask?.IdleTimerMin ?? true)
                {
                    fg.AppendLine($"IdleTimerMin => {IdleTimerMin}");
                }
                if (printMask?.IdleTimerMax ?? true)
                {
                    fg.AppendLine($"IdleTimerMax => {IdleTimerMax}");
                }
                if (printMask?.BlockPercentChance ?? true)
                {
                    fg.AppendLine($"BlockPercentChance => {BlockPercentChance}");
                }
                if (printMask?.AttackPercentChance ?? true)
                {
                    fg.AppendLine($"AttackPercentChance => {AttackPercentChance}");
                }
                if (printMask?.RecoilStaggerBonusToAttack ?? true)
                {
                    fg.AppendLine($"RecoilStaggerBonusToAttack => {RecoilStaggerBonusToAttack}");
                }
                if (printMask?.UnconsciousBonusToAttack ?? true)
                {
                    fg.AppendLine($"UnconsciousBonusToAttack => {UnconsciousBonusToAttack}");
                }
                if (printMask?.HandToHandBonusToAttack ?? true)
                {
                    fg.AppendLine($"HandToHandBonusToAttack => {HandToHandBonusToAttack}");
                }
                if (printMask?.PowerAttackPercentChance ?? true)
                {
                    fg.AppendLine($"PowerAttackPercentChance => {PowerAttackPercentChance}");
                }
                if (printMask?.RecoilStaggerBonusToPowerAttack ?? true)
                {
                    fg.AppendLine($"RecoilStaggerBonusToPowerAttack => {RecoilStaggerBonusToPowerAttack}");
                }
                if (printMask?.UnconsciousBonusToPowerAttack ?? true)
                {
                    fg.AppendLine($"UnconsciousBonusToPowerAttack => {UnconsciousBonusToPowerAttack}");
                }
                if (printMask?.PowerAttackNormal ?? true)
                {
                    fg.AppendLine($"PowerAttackNormal => {PowerAttackNormal}");
                }
                if (printMask?.PowerAttackForward ?? true)
                {
                    fg.AppendLine($"PowerAttackForward => {PowerAttackForward}");
                }
                if (printMask?.PowerAttackBack ?? true)
                {
                    fg.AppendLine($"PowerAttackBack => {PowerAttackBack}");
                }
                if (printMask?.PowerAttackLeft ?? true)
                {
                    fg.AppendLine($"PowerAttackLeft => {PowerAttackLeft}");
                }
                if (printMask?.PowerAttackRight ?? true)
                {
                    fg.AppendLine($"PowerAttackRight => {PowerAttackRight}");
                }
                if (printMask?.HoldTimerMin ?? true)
                {
                    fg.AppendLine($"HoldTimerMin => {HoldTimerMin}");
                }
                if (printMask?.HoldTimerMax ?? true)
                {
                    fg.AppendLine($"HoldTimerMax => {HoldTimerMax}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.AcrobaticDodgePercentChance ?? true)
                {
                    fg.AppendLine($"AcrobaticDodgePercentChance => {AcrobaticDodgePercentChance}");
                }
                if (printMask?.RangeMultOptimal ?? true)
                {
                    fg.AppendLine($"RangeMultOptimal => {RangeMultOptimal}");
                }
                if (printMask?.RangeMultMax ?? true)
                {
                    fg.AppendLine($"RangeMultMax => {RangeMultMax}");
                }
                if (printMask?.SwitchDistanceMelee ?? true)
                {
                    fg.AppendLine($"SwitchDistanceMelee => {SwitchDistanceMelee}");
                }
                if (printMask?.SwitchDistanceRanged ?? true)
                {
                    fg.AppendLine($"SwitchDistanceRanged => {SwitchDistanceRanged}");
                }
                if (printMask?.BuffStandoffDistance ?? true)
                {
                    fg.AppendLine($"BuffStandoffDistance => {BuffStandoffDistance}");
                }
                if (printMask?.RangedStandoffDistance ?? true)
                {
                    fg.AppendLine($"RangedStandoffDistance => {RangedStandoffDistance}");
                }
                if (printMask?.GroupStandoffDistance ?? true)
                {
                    fg.AppendLine($"GroupStandoffDistance => {GroupStandoffDistance}");
                }
                if (printMask?.RushingAttackPercentChance ?? true)
                {
                    fg.AppendLine($"RushingAttackPercentChance => {RushingAttackPercentChance}");
                }
                if (printMask?.RushingAttackDistanceMult ?? true)
                {
                    fg.AppendLine($"RushingAttackDistanceMult => {RushingAttackDistanceMult}");
                }
                if (printMask?.Advanced?.Overall ?? true)
                {
                    Advanced?.ToString(fg);
                }
                if (printMask?.CSTDDataTypeState ?? true)
                {
                    fg.AppendLine($"CSTDDataTypeState => {CSTDDataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class CombatStyle_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<CombatStyle_ErrorMask>
    {
        #region Members
        public Exception? DodgePercentChance;
        public Exception? LeftRightPercentChance;
        public Exception? DodgeLeftRightTimerMin;
        public Exception? DodgeLeftRightTimerMax;
        public Exception? DodgeForwardTimerMin;
        public Exception? DodgeForwardTimerMax;
        public Exception? DodgeBackTimerMin;
        public Exception? DodgeBackTimerMax;
        public Exception? IdleTimerMin;
        public Exception? IdleTimerMax;
        public Exception? BlockPercentChance;
        public Exception? AttackPercentChance;
        public Exception? RecoilStaggerBonusToAttack;
        public Exception? UnconsciousBonusToAttack;
        public Exception? HandToHandBonusToAttack;
        public Exception? PowerAttackPercentChance;
        public Exception? RecoilStaggerBonusToPowerAttack;
        public Exception? UnconsciousBonusToPowerAttack;
        public Exception? PowerAttackNormal;
        public Exception? PowerAttackForward;
        public Exception? PowerAttackBack;
        public Exception? PowerAttackLeft;
        public Exception? PowerAttackRight;
        public Exception? HoldTimerMin;
        public Exception? HoldTimerMax;
        public Exception? Flags;
        public Exception? AcrobaticDodgePercentChance;
        public Exception? RangeMultOptimal;
        public Exception? RangeMultMax;
        public Exception? SwitchDistanceMelee;
        public Exception? SwitchDistanceRanged;
        public Exception? BuffStandoffDistance;
        public Exception? RangedStandoffDistance;
        public Exception? GroupStandoffDistance;
        public Exception? RushingAttackPercentChance;
        public Exception? RushingAttackDistanceMult;
        public MaskItem<Exception?, CombatStyleAdvanced_ErrorMask?>? Advanced;
        public Exception? CSTDDataTypeState;
        #endregion

        #region IErrorMask
        public override object? GetNthMask(int index)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                    return DodgePercentChance;
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                    return LeftRightPercentChance;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                    return DodgeLeftRightTimerMin;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                    return DodgeLeftRightTimerMax;
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                    return DodgeForwardTimerMin;
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                    return DodgeForwardTimerMax;
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                    return DodgeBackTimerMin;
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                    return DodgeBackTimerMax;
                case CombatStyle_FieldIndex.IdleTimerMin:
                    return IdleTimerMin;
                case CombatStyle_FieldIndex.IdleTimerMax:
                    return IdleTimerMax;
                case CombatStyle_FieldIndex.BlockPercentChance:
                    return BlockPercentChance;
                case CombatStyle_FieldIndex.AttackPercentChance:
                    return AttackPercentChance;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                    return RecoilStaggerBonusToAttack;
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                    return UnconsciousBonusToAttack;
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                    return HandToHandBonusToAttack;
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                    return PowerAttackPercentChance;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                    return RecoilStaggerBonusToPowerAttack;
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                    return UnconsciousBonusToPowerAttack;
                case CombatStyle_FieldIndex.PowerAttackNormal:
                    return PowerAttackNormal;
                case CombatStyle_FieldIndex.PowerAttackForward:
                    return PowerAttackForward;
                case CombatStyle_FieldIndex.PowerAttackBack:
                    return PowerAttackBack;
                case CombatStyle_FieldIndex.PowerAttackLeft:
                    return PowerAttackLeft;
                case CombatStyle_FieldIndex.PowerAttackRight:
                    return PowerAttackRight;
                case CombatStyle_FieldIndex.HoldTimerMin:
                    return HoldTimerMin;
                case CombatStyle_FieldIndex.HoldTimerMax:
                    return HoldTimerMax;
                case CombatStyle_FieldIndex.Flags:
                    return Flags;
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                    return AcrobaticDodgePercentChance;
                case CombatStyle_FieldIndex.RangeMultOptimal:
                    return RangeMultOptimal;
                case CombatStyle_FieldIndex.RangeMultMax:
                    return RangeMultMax;
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                    return SwitchDistanceMelee;
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                    return SwitchDistanceRanged;
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                    return BuffStandoffDistance;
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                    return RangedStandoffDistance;
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                    return GroupStandoffDistance;
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                    return RushingAttackPercentChance;
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    return RushingAttackDistanceMult;
                case CombatStyle_FieldIndex.Advanced:
                    return Advanced;
                case CombatStyle_FieldIndex.CSTDDataTypeState:
                    return CSTDDataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                    this.DodgePercentChance = ex;
                    break;
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                    this.LeftRightPercentChance = ex;
                    break;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                    this.DodgeLeftRightTimerMin = ex;
                    break;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                    this.DodgeLeftRightTimerMax = ex;
                    break;
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                    this.DodgeForwardTimerMin = ex;
                    break;
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                    this.DodgeForwardTimerMax = ex;
                    break;
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                    this.DodgeBackTimerMin = ex;
                    break;
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                    this.DodgeBackTimerMax = ex;
                    break;
                case CombatStyle_FieldIndex.IdleTimerMin:
                    this.IdleTimerMin = ex;
                    break;
                case CombatStyle_FieldIndex.IdleTimerMax:
                    this.IdleTimerMax = ex;
                    break;
                case CombatStyle_FieldIndex.BlockPercentChance:
                    this.BlockPercentChance = ex;
                    break;
                case CombatStyle_FieldIndex.AttackPercentChance:
                    this.AttackPercentChance = ex;
                    break;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                    this.RecoilStaggerBonusToAttack = ex;
                    break;
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                    this.UnconsciousBonusToAttack = ex;
                    break;
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                    this.HandToHandBonusToAttack = ex;
                    break;
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                    this.PowerAttackPercentChance = ex;
                    break;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                    this.RecoilStaggerBonusToPowerAttack = ex;
                    break;
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                    this.UnconsciousBonusToPowerAttack = ex;
                    break;
                case CombatStyle_FieldIndex.PowerAttackNormal:
                    this.PowerAttackNormal = ex;
                    break;
                case CombatStyle_FieldIndex.PowerAttackForward:
                    this.PowerAttackForward = ex;
                    break;
                case CombatStyle_FieldIndex.PowerAttackBack:
                    this.PowerAttackBack = ex;
                    break;
                case CombatStyle_FieldIndex.PowerAttackLeft:
                    this.PowerAttackLeft = ex;
                    break;
                case CombatStyle_FieldIndex.PowerAttackRight:
                    this.PowerAttackRight = ex;
                    break;
                case CombatStyle_FieldIndex.HoldTimerMin:
                    this.HoldTimerMin = ex;
                    break;
                case CombatStyle_FieldIndex.HoldTimerMax:
                    this.HoldTimerMax = ex;
                    break;
                case CombatStyle_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                    this.AcrobaticDodgePercentChance = ex;
                    break;
                case CombatStyle_FieldIndex.RangeMultOptimal:
                    this.RangeMultOptimal = ex;
                    break;
                case CombatStyle_FieldIndex.RangeMultMax:
                    this.RangeMultMax = ex;
                    break;
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                    this.SwitchDistanceMelee = ex;
                    break;
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                    this.SwitchDistanceRanged = ex;
                    break;
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                    this.BuffStandoffDistance = ex;
                    break;
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                    this.RangedStandoffDistance = ex;
                    break;
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                    this.GroupStandoffDistance = ex;
                    break;
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                    this.RushingAttackPercentChance = ex;
                    break;
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    this.RushingAttackDistanceMult = ex;
                    break;
                case CombatStyle_FieldIndex.Advanced:
                    this.Advanced = new MaskItem<Exception?, CombatStyleAdvanced_ErrorMask?>(ex, null);
                    break;
                case CombatStyle_FieldIndex.CSTDDataTypeState:
                    this.CSTDDataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                    this.DodgePercentChance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                    this.LeftRightPercentChance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                    this.DodgeLeftRightTimerMin = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                    this.DodgeLeftRightTimerMax = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                    this.DodgeForwardTimerMin = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                    this.DodgeForwardTimerMax = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                    this.DodgeBackTimerMin = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                    this.DodgeBackTimerMax = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.IdleTimerMin:
                    this.IdleTimerMin = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.IdleTimerMax:
                    this.IdleTimerMax = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.BlockPercentChance:
                    this.BlockPercentChance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.AttackPercentChance:
                    this.AttackPercentChance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                    this.RecoilStaggerBonusToAttack = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                    this.UnconsciousBonusToAttack = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                    this.HandToHandBonusToAttack = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                    this.PowerAttackPercentChance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                    this.RecoilStaggerBonusToPowerAttack = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                    this.UnconsciousBonusToPowerAttack = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackNormal:
                    this.PowerAttackNormal = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackForward:
                    this.PowerAttackForward = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackBack:
                    this.PowerAttackBack = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackLeft:
                    this.PowerAttackLeft = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackRight:
                    this.PowerAttackRight = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.HoldTimerMin:
                    this.HoldTimerMin = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.HoldTimerMax:
                    this.HoldTimerMax = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                    this.AcrobaticDodgePercentChance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.RangeMultOptimal:
                    this.RangeMultOptimal = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.RangeMultMax:
                    this.RangeMultMax = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                    this.SwitchDistanceMelee = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                    this.SwitchDistanceRanged = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                    this.BuffStandoffDistance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                    this.RangedStandoffDistance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                    this.GroupStandoffDistance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                    this.RushingAttackPercentChance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    this.RushingAttackDistanceMult = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.Advanced:
                    this.Advanced = (MaskItem<Exception?, CombatStyleAdvanced_ErrorMask?>?)obj;
                    break;
                case CombatStyle_FieldIndex.CSTDDataTypeState:
                    this.CSTDDataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (DodgePercentChance != null) return true;
            if (LeftRightPercentChance != null) return true;
            if (DodgeLeftRightTimerMin != null) return true;
            if (DodgeLeftRightTimerMax != null) return true;
            if (DodgeForwardTimerMin != null) return true;
            if (DodgeForwardTimerMax != null) return true;
            if (DodgeBackTimerMin != null) return true;
            if (DodgeBackTimerMax != null) return true;
            if (IdleTimerMin != null) return true;
            if (IdleTimerMax != null) return true;
            if (BlockPercentChance != null) return true;
            if (AttackPercentChance != null) return true;
            if (RecoilStaggerBonusToAttack != null) return true;
            if (UnconsciousBonusToAttack != null) return true;
            if (HandToHandBonusToAttack != null) return true;
            if (PowerAttackPercentChance != null) return true;
            if (RecoilStaggerBonusToPowerAttack != null) return true;
            if (UnconsciousBonusToPowerAttack != null) return true;
            if (PowerAttackNormal != null) return true;
            if (PowerAttackForward != null) return true;
            if (PowerAttackBack != null) return true;
            if (PowerAttackLeft != null) return true;
            if (PowerAttackRight != null) return true;
            if (HoldTimerMin != null) return true;
            if (HoldTimerMax != null) return true;
            if (Flags != null) return true;
            if (AcrobaticDodgePercentChance != null) return true;
            if (RangeMultOptimal != null) return true;
            if (RangeMultMax != null) return true;
            if (SwitchDistanceMelee != null) return true;
            if (SwitchDistanceRanged != null) return true;
            if (BuffStandoffDistance != null) return true;
            if (RangedStandoffDistance != null) return true;
            if (GroupStandoffDistance != null) return true;
            if (RushingAttackPercentChance != null) return true;
            if (RushingAttackDistanceMult != null) return true;
            if (Advanced != null) return true;
            if (CSTDDataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("CombatStyle_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"DodgePercentChance => {DodgePercentChance}");
            fg.AppendLine($"LeftRightPercentChance => {LeftRightPercentChance}");
            fg.AppendLine($"DodgeLeftRightTimerMin => {DodgeLeftRightTimerMin}");
            fg.AppendLine($"DodgeLeftRightTimerMax => {DodgeLeftRightTimerMax}");
            fg.AppendLine($"DodgeForwardTimerMin => {DodgeForwardTimerMin}");
            fg.AppendLine($"DodgeForwardTimerMax => {DodgeForwardTimerMax}");
            fg.AppendLine($"DodgeBackTimerMin => {DodgeBackTimerMin}");
            fg.AppendLine($"DodgeBackTimerMax => {DodgeBackTimerMax}");
            fg.AppendLine($"IdleTimerMin => {IdleTimerMin}");
            fg.AppendLine($"IdleTimerMax => {IdleTimerMax}");
            fg.AppendLine($"BlockPercentChance => {BlockPercentChance}");
            fg.AppendLine($"AttackPercentChance => {AttackPercentChance}");
            fg.AppendLine($"RecoilStaggerBonusToAttack => {RecoilStaggerBonusToAttack}");
            fg.AppendLine($"UnconsciousBonusToAttack => {UnconsciousBonusToAttack}");
            fg.AppendLine($"HandToHandBonusToAttack => {HandToHandBonusToAttack}");
            fg.AppendLine($"PowerAttackPercentChance => {PowerAttackPercentChance}");
            fg.AppendLine($"RecoilStaggerBonusToPowerAttack => {RecoilStaggerBonusToPowerAttack}");
            fg.AppendLine($"UnconsciousBonusToPowerAttack => {UnconsciousBonusToPowerAttack}");
            fg.AppendLine($"PowerAttackNormal => {PowerAttackNormal}");
            fg.AppendLine($"PowerAttackForward => {PowerAttackForward}");
            fg.AppendLine($"PowerAttackBack => {PowerAttackBack}");
            fg.AppendLine($"PowerAttackLeft => {PowerAttackLeft}");
            fg.AppendLine($"PowerAttackRight => {PowerAttackRight}");
            fg.AppendLine($"HoldTimerMin => {HoldTimerMin}");
            fg.AppendLine($"HoldTimerMax => {HoldTimerMax}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"AcrobaticDodgePercentChance => {AcrobaticDodgePercentChance}");
            fg.AppendLine($"RangeMultOptimal => {RangeMultOptimal}");
            fg.AppendLine($"RangeMultMax => {RangeMultMax}");
            fg.AppendLine($"SwitchDistanceMelee => {SwitchDistanceMelee}");
            fg.AppendLine($"SwitchDistanceRanged => {SwitchDistanceRanged}");
            fg.AppendLine($"BuffStandoffDistance => {BuffStandoffDistance}");
            fg.AppendLine($"RangedStandoffDistance => {RangedStandoffDistance}");
            fg.AppendLine($"GroupStandoffDistance => {GroupStandoffDistance}");
            fg.AppendLine($"RushingAttackPercentChance => {RushingAttackPercentChance}");
            fg.AppendLine($"RushingAttackDistanceMult => {RushingAttackDistanceMult}");
            Advanced?.ToString(fg);
            fg.AppendLine($"CSTDDataTypeState => {CSTDDataTypeState}");
        }
        #endregion

        #region Combine
        public CombatStyle_ErrorMask Combine(CombatStyle_ErrorMask? rhs)
        {
            if (rhs == null) return this;
            var ret = new CombatStyle_ErrorMask();
            ret.DodgePercentChance = this.DodgePercentChance.Combine(rhs.DodgePercentChance);
            ret.LeftRightPercentChance = this.LeftRightPercentChance.Combine(rhs.LeftRightPercentChance);
            ret.DodgeLeftRightTimerMin = this.DodgeLeftRightTimerMin.Combine(rhs.DodgeLeftRightTimerMin);
            ret.DodgeLeftRightTimerMax = this.DodgeLeftRightTimerMax.Combine(rhs.DodgeLeftRightTimerMax);
            ret.DodgeForwardTimerMin = this.DodgeForwardTimerMin.Combine(rhs.DodgeForwardTimerMin);
            ret.DodgeForwardTimerMax = this.DodgeForwardTimerMax.Combine(rhs.DodgeForwardTimerMax);
            ret.DodgeBackTimerMin = this.DodgeBackTimerMin.Combine(rhs.DodgeBackTimerMin);
            ret.DodgeBackTimerMax = this.DodgeBackTimerMax.Combine(rhs.DodgeBackTimerMax);
            ret.IdleTimerMin = this.IdleTimerMin.Combine(rhs.IdleTimerMin);
            ret.IdleTimerMax = this.IdleTimerMax.Combine(rhs.IdleTimerMax);
            ret.BlockPercentChance = this.BlockPercentChance.Combine(rhs.BlockPercentChance);
            ret.AttackPercentChance = this.AttackPercentChance.Combine(rhs.AttackPercentChance);
            ret.RecoilStaggerBonusToAttack = this.RecoilStaggerBonusToAttack.Combine(rhs.RecoilStaggerBonusToAttack);
            ret.UnconsciousBonusToAttack = this.UnconsciousBonusToAttack.Combine(rhs.UnconsciousBonusToAttack);
            ret.HandToHandBonusToAttack = this.HandToHandBonusToAttack.Combine(rhs.HandToHandBonusToAttack);
            ret.PowerAttackPercentChance = this.PowerAttackPercentChance.Combine(rhs.PowerAttackPercentChance);
            ret.RecoilStaggerBonusToPowerAttack = this.RecoilStaggerBonusToPowerAttack.Combine(rhs.RecoilStaggerBonusToPowerAttack);
            ret.UnconsciousBonusToPowerAttack = this.UnconsciousBonusToPowerAttack.Combine(rhs.UnconsciousBonusToPowerAttack);
            ret.PowerAttackNormal = this.PowerAttackNormal.Combine(rhs.PowerAttackNormal);
            ret.PowerAttackForward = this.PowerAttackForward.Combine(rhs.PowerAttackForward);
            ret.PowerAttackBack = this.PowerAttackBack.Combine(rhs.PowerAttackBack);
            ret.PowerAttackLeft = this.PowerAttackLeft.Combine(rhs.PowerAttackLeft);
            ret.PowerAttackRight = this.PowerAttackRight.Combine(rhs.PowerAttackRight);
            ret.HoldTimerMin = this.HoldTimerMin.Combine(rhs.HoldTimerMin);
            ret.HoldTimerMax = this.HoldTimerMax.Combine(rhs.HoldTimerMax);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.AcrobaticDodgePercentChance = this.AcrobaticDodgePercentChance.Combine(rhs.AcrobaticDodgePercentChance);
            ret.RangeMultOptimal = this.RangeMultOptimal.Combine(rhs.RangeMultOptimal);
            ret.RangeMultMax = this.RangeMultMax.Combine(rhs.RangeMultMax);
            ret.SwitchDistanceMelee = this.SwitchDistanceMelee.Combine(rhs.SwitchDistanceMelee);
            ret.SwitchDistanceRanged = this.SwitchDistanceRanged.Combine(rhs.SwitchDistanceRanged);
            ret.BuffStandoffDistance = this.BuffStandoffDistance.Combine(rhs.BuffStandoffDistance);
            ret.RangedStandoffDistance = this.RangedStandoffDistance.Combine(rhs.RangedStandoffDistance);
            ret.GroupStandoffDistance = this.GroupStandoffDistance.Combine(rhs.GroupStandoffDistance);
            ret.RushingAttackPercentChance = this.RushingAttackPercentChance.Combine(rhs.RushingAttackPercentChance);
            ret.RushingAttackDistanceMult = this.RushingAttackDistanceMult.Combine(rhs.RushingAttackDistanceMult);
            ret.Advanced = new MaskItem<Exception?, CombatStyleAdvanced_ErrorMask?>(ExceptionExt.Combine(this.Advanced?.Overall, rhs.Advanced?.Overall), (this.Advanced?.Specific as IErrorMask<CombatStyleAdvanced_ErrorMask>)?.Combine(rhs.Advanced?.Specific));
            ret.CSTDDataTypeState = this.CSTDDataTypeState.Combine(rhs.CSTDDataTypeState);
            return ret;
        }
        public static CombatStyle_ErrorMask? Combine(CombatStyle_ErrorMask? lhs, CombatStyle_ErrorMask? rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static new CombatStyle_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            return new CombatStyle_ErrorMask();
        }
        #endregion

    }
    public class CombatStyle_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool DodgePercentChance;
        public bool LeftRightPercentChance;
        public bool DodgeLeftRightTimerMin;
        public bool DodgeLeftRightTimerMax;
        public bool DodgeForwardTimerMin;
        public bool DodgeForwardTimerMax;
        public bool DodgeBackTimerMin;
        public bool DodgeBackTimerMax;
        public bool IdleTimerMin;
        public bool IdleTimerMax;
        public bool BlockPercentChance;
        public bool AttackPercentChance;
        public bool RecoilStaggerBonusToAttack;
        public bool UnconsciousBonusToAttack;
        public bool HandToHandBonusToAttack;
        public bool PowerAttackPercentChance;
        public bool RecoilStaggerBonusToPowerAttack;
        public bool UnconsciousBonusToPowerAttack;
        public bool PowerAttackNormal;
        public bool PowerAttackForward;
        public bool PowerAttackBack;
        public bool PowerAttackLeft;
        public bool PowerAttackRight;
        public bool HoldTimerMin;
        public bool HoldTimerMax;
        public bool Flags;
        public bool AcrobaticDodgePercentChance;
        public bool RangeMultOptimal;
        public bool RangeMultMax;
        public bool SwitchDistanceMelee;
        public bool SwitchDistanceRanged;
        public bool BuffStandoffDistance;
        public bool RangedStandoffDistance;
        public bool GroupStandoffDistance;
        public bool RushingAttackPercentChance;
        public bool RushingAttackDistanceMult;
        public MaskItem<bool, CombatStyleAdvanced_TranslationMask?> Advanced;
        public bool CSTDDataTypeState;
        #endregion

        #region Ctors
        public CombatStyle_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.DodgePercentChance = defaultOn;
            this.LeftRightPercentChance = defaultOn;
            this.DodgeLeftRightTimerMin = defaultOn;
            this.DodgeLeftRightTimerMax = defaultOn;
            this.DodgeForwardTimerMin = defaultOn;
            this.DodgeForwardTimerMax = defaultOn;
            this.DodgeBackTimerMin = defaultOn;
            this.DodgeBackTimerMax = defaultOn;
            this.IdleTimerMin = defaultOn;
            this.IdleTimerMax = defaultOn;
            this.BlockPercentChance = defaultOn;
            this.AttackPercentChance = defaultOn;
            this.RecoilStaggerBonusToAttack = defaultOn;
            this.UnconsciousBonusToAttack = defaultOn;
            this.HandToHandBonusToAttack = defaultOn;
            this.PowerAttackPercentChance = defaultOn;
            this.RecoilStaggerBonusToPowerAttack = defaultOn;
            this.UnconsciousBonusToPowerAttack = defaultOn;
            this.PowerAttackNormal = defaultOn;
            this.PowerAttackForward = defaultOn;
            this.PowerAttackBack = defaultOn;
            this.PowerAttackLeft = defaultOn;
            this.PowerAttackRight = defaultOn;
            this.HoldTimerMin = defaultOn;
            this.HoldTimerMax = defaultOn;
            this.Flags = defaultOn;
            this.AcrobaticDodgePercentChance = defaultOn;
            this.RangeMultOptimal = defaultOn;
            this.RangeMultMax = defaultOn;
            this.SwitchDistanceMelee = defaultOn;
            this.SwitchDistanceRanged = defaultOn;
            this.BuffStandoffDistance = defaultOn;
            this.RangedStandoffDistance = defaultOn;
            this.GroupStandoffDistance = defaultOn;
            this.RushingAttackPercentChance = defaultOn;
            this.RushingAttackDistanceMult = defaultOn;
            this.Advanced = new MaskItem<bool, CombatStyleAdvanced_TranslationMask?>(defaultOn, null);
            this.CSTDDataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((DodgePercentChance, null));
            ret.Add((LeftRightPercentChance, null));
            ret.Add((DodgeLeftRightTimerMin, null));
            ret.Add((DodgeLeftRightTimerMax, null));
            ret.Add((DodgeForwardTimerMin, null));
            ret.Add((DodgeForwardTimerMax, null));
            ret.Add((DodgeBackTimerMin, null));
            ret.Add((DodgeBackTimerMax, null));
            ret.Add((IdleTimerMin, null));
            ret.Add((IdleTimerMax, null));
            ret.Add((BlockPercentChance, null));
            ret.Add((AttackPercentChance, null));
            ret.Add((RecoilStaggerBonusToAttack, null));
            ret.Add((UnconsciousBonusToAttack, null));
            ret.Add((HandToHandBonusToAttack, null));
            ret.Add((PowerAttackPercentChance, null));
            ret.Add((RecoilStaggerBonusToPowerAttack, null));
            ret.Add((UnconsciousBonusToPowerAttack, null));
            ret.Add((PowerAttackNormal, null));
            ret.Add((PowerAttackForward, null));
            ret.Add((PowerAttackBack, null));
            ret.Add((PowerAttackLeft, null));
            ret.Add((PowerAttackRight, null));
            ret.Add((HoldTimerMin, null));
            ret.Add((HoldTimerMax, null));
            ret.Add((Flags, null));
            ret.Add((AcrobaticDodgePercentChance, null));
            ret.Add((RangeMultOptimal, null));
            ret.Add((RangeMultMax, null));
            ret.Add((SwitchDistanceMelee, null));
            ret.Add((SwitchDistanceRanged, null));
            ret.Add((BuffStandoffDistance, null));
            ret.Add((RangedStandoffDistance, null));
            ret.Add((GroupStandoffDistance, null));
            ret.Add((RushingAttackPercentChance, null));
            ret.Add((RushingAttackDistanceMult, null));
            ret.Add((Advanced?.Overall ?? true, Advanced?.Specific?.GetCrystal()));
            ret.Add((CSTDDataTypeState, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CombatStyleBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static CombatStyleBinaryWriteTranslation Instance = new CombatStyleBinaryWriteTranslation();

        static partial void WriteBinarySecondaryFlagsCustom(
            MutagenWriter writer,
            ICombatStyleGetter item,
            MasterReferences masterReferences);

        public static void WriteBinarySecondaryFlags(
            MutagenWriter writer,
            ICombatStyleGetter item,
            MasterReferences masterReferences)
        {
            WriteBinarySecondaryFlagsCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        public static void Write_Embedded(
            ICombatStyleGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            ICombatStyleGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            if (item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(CombatStyle_Registration.CSTD_HEADER)))
                {
                    writer.Write(item.DodgePercentChance);
                    writer.Write(item.LeftRightPercentChance);
                    writer.WriteZeros(2);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.DodgeLeftRightTimerMin);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.DodgeLeftRightTimerMax);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.DodgeForwardTimerMin);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.DodgeForwardTimerMax);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.DodgeBackTimerMin);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.DodgeBackTimerMax);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.IdleTimerMin);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.IdleTimerMax);
                    writer.Write(item.BlockPercentChance);
                    writer.Write(item.AttackPercentChance);
                    writer.WriteZeros(2);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.RecoilStaggerBonusToAttack);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.UnconsciousBonusToAttack);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HandToHandBonusToAttack);
                    writer.Write(item.PowerAttackPercentChance);
                    writer.WriteZeros(3);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.RecoilStaggerBonusToPowerAttack);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.UnconsciousBonusToPowerAttack);
                    writer.Write(item.PowerAttackNormal);
                    writer.Write(item.PowerAttackForward);
                    writer.Write(item.PowerAttackBack);
                    writer.Write(item.PowerAttackLeft);
                    writer.Write(item.PowerAttackRight);
                    writer.WriteZeros(3);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HoldTimerMin);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HoldTimerMax);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<CombatStyle.Flag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 1);
                    writer.Write(item.AcrobaticDodgePercentChance);
                    writer.WriteZeros(2);
                    if (!item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break0))
                    {
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.RangeMultOptimal);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.RangeMultMax);
                        if (!item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break1))
                        {
                            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                writer: writer,
                                item: item.SwitchDistanceMelee);
                            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                writer: writer,
                                item: item.SwitchDistanceRanged);
                            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                writer: writer,
                                item: item.BuffStandoffDistance);
                            if (!item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break2))
                            {
                                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                    writer: writer,
                                    item: item.RangedStandoffDistance);
                                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                    writer: writer,
                                    item: item.GroupStandoffDistance);
                                if (!item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break3))
                                {
                                    writer.Write(item.RushingAttackPercentChance);
                                    writer.WriteZeros(3);
                                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                        writer: writer,
                                        item: item.RushingAttackDistanceMult);
                                    if (!item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break4))
                                    {
                                        CombatStyleBinaryWriteTranslation.WriteBinarySecondaryFlags(
                                            writer: writer,
                                            item: item,
                                            masterReferences: masterReferences);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            {
                var loquiItem = item.Advanced;
                if (loquiItem != null)
                {
                    ((CombatStyleAdvancedBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            ICombatStyleGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: CombatStyle_Registration.CSTY_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ICombatStyleGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ICombatStyleGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ICombatStyleGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CombatStyleBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static CombatStyleBinaryCreateTranslation Instance = new CombatStyleBinaryCreateTranslation();

        static partial void FillBinarySecondaryFlagsCustom(
            MutagenFrame frame,
            ICombatStyleInternal item,
            MasterReferences masterReferences);

        public static void FillBinarySecondaryFlagsCustomPublic(
            MutagenFrame frame,
            ICombatStyleInternal item,
            MasterReferences masterReferences)
        {
            FillBinarySecondaryFlagsCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class CombatStyleBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CombatStyleBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        ICombatStyleGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyle_Registration.Instance;
        public new static CombatStyle_Registration Registration => CombatStyle_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CombatStyleCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CombatStyleSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICombatStyleGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => CombatStyleXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CombatStyleXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CombatStyleBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((CombatStyleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        private int? _CSTDLocation;
        public CombatStyle.CSTDDataType CSTDDataTypeState { get; private set; }
        #region DodgePercentChance
        private int _DodgePercentChanceLocation => _CSTDLocation!.Value + 0x0;
        private bool _DodgePercentChance_IsSet => _CSTDLocation.HasValue;
        public Byte DodgePercentChance => _DodgePercentChance_IsSet ? _data.Span[_DodgePercentChanceLocation] : default;
        #endregion
        #region LeftRightPercentChance
        private int _LeftRightPercentChanceLocation => _CSTDLocation!.Value + 0x1;
        private bool _LeftRightPercentChance_IsSet => _CSTDLocation.HasValue;
        public Byte LeftRightPercentChance => _LeftRightPercentChance_IsSet ? _data.Span[_LeftRightPercentChanceLocation] : default;
        #endregion
        #region DodgeLeftRightTimerMin
        private int _DodgeLeftRightTimerMinLocation => _CSTDLocation!.Value + 0x4;
        private bool _DodgeLeftRightTimerMin_IsSet => _CSTDLocation.HasValue;
        public Single DodgeLeftRightTimerMin => _DodgeLeftRightTimerMin_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_DodgeLeftRightTimerMinLocation, 4)) : default;
        #endregion
        #region DodgeLeftRightTimerMax
        private int _DodgeLeftRightTimerMaxLocation => _CSTDLocation!.Value + 0x8;
        private bool _DodgeLeftRightTimerMax_IsSet => _CSTDLocation.HasValue;
        public Single DodgeLeftRightTimerMax => _DodgeLeftRightTimerMax_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_DodgeLeftRightTimerMaxLocation, 4)) : default;
        #endregion
        #region DodgeForwardTimerMin
        private int _DodgeForwardTimerMinLocation => _CSTDLocation!.Value + 0xC;
        private bool _DodgeForwardTimerMin_IsSet => _CSTDLocation.HasValue;
        public Single DodgeForwardTimerMin => _DodgeForwardTimerMin_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_DodgeForwardTimerMinLocation, 4)) : default;
        #endregion
        #region DodgeForwardTimerMax
        private int _DodgeForwardTimerMaxLocation => _CSTDLocation!.Value + 0x10;
        private bool _DodgeForwardTimerMax_IsSet => _CSTDLocation.HasValue;
        public Single DodgeForwardTimerMax => _DodgeForwardTimerMax_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_DodgeForwardTimerMaxLocation, 4)) : default;
        #endregion
        #region DodgeBackTimerMin
        private int _DodgeBackTimerMinLocation => _CSTDLocation!.Value + 0x14;
        private bool _DodgeBackTimerMin_IsSet => _CSTDLocation.HasValue;
        public Single DodgeBackTimerMin => _DodgeBackTimerMin_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_DodgeBackTimerMinLocation, 4)) : default;
        #endregion
        #region DodgeBackTimerMax
        private int _DodgeBackTimerMaxLocation => _CSTDLocation!.Value + 0x18;
        private bool _DodgeBackTimerMax_IsSet => _CSTDLocation.HasValue;
        public Single DodgeBackTimerMax => _DodgeBackTimerMax_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_DodgeBackTimerMaxLocation, 4)) : default;
        #endregion
        #region IdleTimerMin
        private int _IdleTimerMinLocation => _CSTDLocation!.Value + 0x1C;
        private bool _IdleTimerMin_IsSet => _CSTDLocation.HasValue;
        public Single IdleTimerMin => _IdleTimerMin_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_IdleTimerMinLocation, 4)) : default;
        #endregion
        #region IdleTimerMax
        private int _IdleTimerMaxLocation => _CSTDLocation!.Value + 0x20;
        private bool _IdleTimerMax_IsSet => _CSTDLocation.HasValue;
        public Single IdleTimerMax => _IdleTimerMax_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_IdleTimerMaxLocation, 4)) : default;
        #endregion
        #region BlockPercentChance
        private int _BlockPercentChanceLocation => _CSTDLocation!.Value + 0x24;
        private bool _BlockPercentChance_IsSet => _CSTDLocation.HasValue;
        public Byte BlockPercentChance => _BlockPercentChance_IsSet ? _data.Span[_BlockPercentChanceLocation] : default;
        #endregion
        #region AttackPercentChance
        private int _AttackPercentChanceLocation => _CSTDLocation!.Value + 0x25;
        private bool _AttackPercentChance_IsSet => _CSTDLocation.HasValue;
        public Byte AttackPercentChance => _AttackPercentChance_IsSet ? _data.Span[_AttackPercentChanceLocation] : default;
        #endregion
        #region RecoilStaggerBonusToAttack
        private int _RecoilStaggerBonusToAttackLocation => _CSTDLocation!.Value + 0x28;
        private bool _RecoilStaggerBonusToAttack_IsSet => _CSTDLocation.HasValue;
        public Single RecoilStaggerBonusToAttack => _RecoilStaggerBonusToAttack_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_RecoilStaggerBonusToAttackLocation, 4)) : default;
        #endregion
        #region UnconsciousBonusToAttack
        private int _UnconsciousBonusToAttackLocation => _CSTDLocation!.Value + 0x2C;
        private bool _UnconsciousBonusToAttack_IsSet => _CSTDLocation.HasValue;
        public Single UnconsciousBonusToAttack => _UnconsciousBonusToAttack_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_UnconsciousBonusToAttackLocation, 4)) : default;
        #endregion
        #region HandToHandBonusToAttack
        private int _HandToHandBonusToAttackLocation => _CSTDLocation!.Value + 0x30;
        private bool _HandToHandBonusToAttack_IsSet => _CSTDLocation.HasValue;
        public Single HandToHandBonusToAttack => _HandToHandBonusToAttack_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HandToHandBonusToAttackLocation, 4)) : default;
        #endregion
        #region PowerAttackPercentChance
        private int _PowerAttackPercentChanceLocation => _CSTDLocation!.Value + 0x34;
        private bool _PowerAttackPercentChance_IsSet => _CSTDLocation.HasValue;
        public Byte PowerAttackPercentChance => _PowerAttackPercentChance_IsSet ? _data.Span[_PowerAttackPercentChanceLocation] : default;
        #endregion
        #region RecoilStaggerBonusToPowerAttack
        private int _RecoilStaggerBonusToPowerAttackLocation => _CSTDLocation!.Value + 0x38;
        private bool _RecoilStaggerBonusToPowerAttack_IsSet => _CSTDLocation.HasValue;
        public Single RecoilStaggerBonusToPowerAttack => _RecoilStaggerBonusToPowerAttack_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_RecoilStaggerBonusToPowerAttackLocation, 4)) : default;
        #endregion
        #region UnconsciousBonusToPowerAttack
        private int _UnconsciousBonusToPowerAttackLocation => _CSTDLocation!.Value + 0x3C;
        private bool _UnconsciousBonusToPowerAttack_IsSet => _CSTDLocation.HasValue;
        public Single UnconsciousBonusToPowerAttack => _UnconsciousBonusToPowerAttack_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_UnconsciousBonusToPowerAttackLocation, 4)) : default;
        #endregion
        #region PowerAttackNormal
        private int _PowerAttackNormalLocation => _CSTDLocation!.Value + 0x40;
        private bool _PowerAttackNormal_IsSet => _CSTDLocation.HasValue;
        public Byte PowerAttackNormal => _PowerAttackNormal_IsSet ? _data.Span[_PowerAttackNormalLocation] : default;
        #endregion
        #region PowerAttackForward
        private int _PowerAttackForwardLocation => _CSTDLocation!.Value + 0x41;
        private bool _PowerAttackForward_IsSet => _CSTDLocation.HasValue;
        public Byte PowerAttackForward => _PowerAttackForward_IsSet ? _data.Span[_PowerAttackForwardLocation] : default;
        #endregion
        #region PowerAttackBack
        private int _PowerAttackBackLocation => _CSTDLocation!.Value + 0x42;
        private bool _PowerAttackBack_IsSet => _CSTDLocation.HasValue;
        public Byte PowerAttackBack => _PowerAttackBack_IsSet ? _data.Span[_PowerAttackBackLocation] : default;
        #endregion
        #region PowerAttackLeft
        private int _PowerAttackLeftLocation => _CSTDLocation!.Value + 0x43;
        private bool _PowerAttackLeft_IsSet => _CSTDLocation.HasValue;
        public Byte PowerAttackLeft => _PowerAttackLeft_IsSet ? _data.Span[_PowerAttackLeftLocation] : default;
        #endregion
        #region PowerAttackRight
        private int _PowerAttackRightLocation => _CSTDLocation!.Value + 0x44;
        private bool _PowerAttackRight_IsSet => _CSTDLocation.HasValue;
        public Byte PowerAttackRight => _PowerAttackRight_IsSet ? _data.Span[_PowerAttackRightLocation] : default;
        #endregion
        #region HoldTimerMin
        private int _HoldTimerMinLocation => _CSTDLocation!.Value + 0x48;
        private bool _HoldTimerMin_IsSet => _CSTDLocation.HasValue;
        public Single HoldTimerMin => _HoldTimerMin_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HoldTimerMinLocation, 4)) : default;
        #endregion
        #region HoldTimerMax
        private int _HoldTimerMaxLocation => _CSTDLocation!.Value + 0x4C;
        private bool _HoldTimerMax_IsSet => _CSTDLocation.HasValue;
        public Single HoldTimerMax => _HoldTimerMax_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HoldTimerMaxLocation, 4)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _CSTDLocation!.Value + 0x50;
        private bool _Flags_IsSet => GetFlagsIsSetCustom();
        public CombatStyle.Flag Flags => GetFlagsCustom();
        #endregion
        #region AcrobaticDodgePercentChance
        private int _AcrobaticDodgePercentChanceLocation => _CSTDLocation!.Value + 0x51;
        private bool _AcrobaticDodgePercentChance_IsSet => _CSTDLocation.HasValue;
        public Byte AcrobaticDodgePercentChance => _AcrobaticDodgePercentChance_IsSet ? _data.Span[_AcrobaticDodgePercentChanceLocation] : default;
        #endregion
        #region RangeMultOptimal
        private int _RangeMultOptimalLocation => _CSTDLocation!.Value + 0x54;
        private bool _RangeMultOptimal_IsSet => _CSTDLocation.HasValue && !CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break0);
        public Single RangeMultOptimal => _RangeMultOptimal_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_RangeMultOptimalLocation, 4)) : default;
        #endregion
        #region RangeMultMax
        private int _RangeMultMaxLocation => _CSTDLocation!.Value + 0x58;
        private bool _RangeMultMax_IsSet => _CSTDLocation.HasValue && !CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break0);
        public Single RangeMultMax => _RangeMultMax_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_RangeMultMaxLocation, 4)) : default;
        #endregion
        #region SwitchDistanceMelee
        private int _SwitchDistanceMeleeLocation => _CSTDLocation!.Value + 0x5C;
        private bool _SwitchDistanceMelee_IsSet => _CSTDLocation.HasValue && !CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break1);
        public Single SwitchDistanceMelee => _SwitchDistanceMelee_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_SwitchDistanceMeleeLocation, 4)) : default;
        #endregion
        #region SwitchDistanceRanged
        private int _SwitchDistanceRangedLocation => _CSTDLocation!.Value + 0x60;
        private bool _SwitchDistanceRanged_IsSet => _CSTDLocation.HasValue && !CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break1);
        public Single SwitchDistanceRanged => _SwitchDistanceRanged_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_SwitchDistanceRangedLocation, 4)) : default;
        #endregion
        #region BuffStandoffDistance
        private int _BuffStandoffDistanceLocation => _CSTDLocation!.Value + 0x64;
        private bool _BuffStandoffDistance_IsSet => _CSTDLocation.HasValue && !CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break1);
        public Single BuffStandoffDistance => _BuffStandoffDistance_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_BuffStandoffDistanceLocation, 4)) : default;
        #endregion
        #region RangedStandoffDistance
        private int _RangedStandoffDistanceLocation => _CSTDLocation!.Value + 0x68;
        private bool _RangedStandoffDistance_IsSet => _CSTDLocation.HasValue && !CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break2);
        public Single RangedStandoffDistance => _RangedStandoffDistance_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_RangedStandoffDistanceLocation, 4)) : default;
        #endregion
        #region GroupStandoffDistance
        private int _GroupStandoffDistanceLocation => _CSTDLocation!.Value + 0x6C;
        private bool _GroupStandoffDistance_IsSet => _CSTDLocation.HasValue && !CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break2);
        public Single GroupStandoffDistance => _GroupStandoffDistance_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_GroupStandoffDistanceLocation, 4)) : default;
        #endregion
        #region RushingAttackPercentChance
        private int _RushingAttackPercentChanceLocation => _CSTDLocation!.Value + 0x70;
        private bool _RushingAttackPercentChance_IsSet => _CSTDLocation.HasValue && !CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break3);
        public Byte RushingAttackPercentChance => _RushingAttackPercentChance_IsSet ? _data.Span[_RushingAttackPercentChanceLocation] : default;
        #endregion
        #region RushingAttackDistanceMult
        private int _RushingAttackDistanceMultLocation => _CSTDLocation!.Value + 0x74;
        private bool _RushingAttackDistanceMult_IsSet => _CSTDLocation.HasValue && !CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break3);
        public Single RushingAttackDistanceMult => _RushingAttackDistanceMult_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_RushingAttackDistanceMultLocation, 4)) : default;
        #endregion
        #region SecondaryFlags
        partial void SecondaryFlagsCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        #region Advanced
        private RangeInt32? _AdvancedLocation;
        private bool _Advanced_IsSet => _AdvancedLocation.HasValue;
        public ICombatStyleAdvancedGetter? Advanced => _Advanced_IsSet ? CombatStyleAdvancedBinaryOverlay.CombatStyleAdvancedFactory(new BinaryMemoryReadStream(_data.Slice(_AdvancedLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool Advanced_IsSet => _AdvancedLocation.HasValue;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected CombatStyleBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static CombatStyleBinaryOverlay CombatStyleFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new CombatStyleBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x44545343: // CSTD
                {
                    _CSTDLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.CSTDDataTypeState = CombatStyle.CSTDDataType.Has;
                    var subLen = _package.Meta.SubRecord(_data.Slice((stream.Position - offset))).RecordLength;
                    if (subLen <= 0x54)
                    {
                        this.CSTDDataTypeState |= CombatStyle.CSTDDataType.Break0;
                    }
                    if (subLen <= 0x5C)
                    {
                        this.CSTDDataTypeState |= CombatStyle.CSTDDataType.Break1;
                    }
                    if (subLen <= 0x68)
                    {
                        this.CSTDDataTypeState |= CombatStyle.CSTDDataType.Break2;
                    }
                    if (subLen <= 0x70)
                    {
                        this.CSTDDataTypeState |= CombatStyle.CSTDDataType.Break3;
                    }
                    if (subLen <= 0x78)
                    {
                        this.CSTDDataTypeState |= CombatStyle.CSTDDataType.Break4;
                    }
                    return TryGet<int?>.Succeed((int)CombatStyle_FieldIndex.RushingAttackDistanceMult);
                }
                case 0x44415343: // CSAD
                {
                    _AdvancedLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)CombatStyle_FieldIndex.Advanced);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

