/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class DialogTopic :
        OblivionMajorRecord,
        IDialogTopicInternal,
        ILoquiObjectSetter<DialogTopic>,
        INamed,
        IEquatable<DialogTopic>,
        IEqualsMask
    {
        #region Ctor
        protected DialogTopic()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Quests
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IFormIDLink<Quest>> _Quests = new SetList<IFormIDLink<Quest>>();
        public ISetList<IFormIDLink<Quest>> Quests => _Quests;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormIDLink<Quest>> IDialogTopic.Quests => _Quests;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormIDLinkGetter<IQuestGetter>> IDialogTopicGetter.Quests => _Quests;
        #endregion

        #endregion
        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IDialogTopicGetter.Name => this.Name;
        #endregion
        #region DialogType
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DialogType? _DialogType;
        public DialogType? DialogType
        {
            get => this._DialogType;
            set => this._DialogType = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        DialogType? IDialogTopicGetter.DialogType => this.DialogType;
        #endregion
        #region Timestamp
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _Timestamp = new byte[4];
        public Byte[] Timestamp
        {
            get => _Timestamp;
            set => this._Timestamp = value ?? new byte[4];
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IDialogTopicGetter.Timestamp => this.Timestamp;
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<DialogItem> _Items = new SetList<DialogItem>();
        public ISetList<DialogItem> Items => _Items;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<DialogItem> IDialogTopic.Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IDialogItemGetter> IDialogTopicGetter.Items => _Items;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogTopicMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IDialogTopicGetter rhs)) return false;
            return ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(DialogTopic obj)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => DialogTopicXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((DialogTopicXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new DialogTopic CreateFromXml(
            XElement node,
            DialogTopic_TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static DialogTopic CreateFromXml(
            XElement node,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogTopic_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static DialogTopic CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new DialogTopic();
            ((DialogTopicSetterCommon)((IDialogTopicGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static DialogTopic CreateFromXml(
            string path,
            DialogTopic_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static DialogTopic CreateFromXml(
            string path,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogTopic CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            DialogTopic_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static DialogTopic CreateFromXml(
            Stream stream,
            DialogTopic_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static DialogTopic CreateFromXml(
            Stream stream,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogTopic CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            DialogTopic_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = DialogTopic_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => DialogTopicCommon.Instance.GetLinks(this);
        public DialogTopic(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public DialogTopic(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogTopicBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((DialogTopicBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new DialogTopic CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static DialogTopic CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new DialogTopic();
            ((DialogTopicSetterCommon)((IDialogTopicGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDialogTopicGetter)rhs, include);

        void IClearable.Clear()
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new DialogTopic GetNew()
        {
            return new DialogTopic();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogTopic :
        IDialogTopicGetter,
        IOblivionMajorRecord,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<IDialogTopicInternal>
    {
        new ISetList<IFormIDLink<Quest>> Quests { get; }
        new String? Name { get; set; }
        new DialogType? DialogType { get; set; }
        new Byte[] Timestamp { get; set; }
        new ISetList<DialogItem> Items { get; }
    }

    public partial interface IDialogTopicInternal :
        IOblivionMajorRecordInternal,
        IDialogTopic,
        IDialogTopicGetter
    {
    }

    public partial interface IDialogTopicGetter :
        IOblivionMajorRecordGetter,
        IMajorRecordGetterEnumerable,
        ILoquiObject<IDialogTopicGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        IReadOnlySetList<IFormIDLinkGetter<IQuestGetter>> Quests { get; }
        String? Name { get; }
        DialogType? DialogType { get; }
        ReadOnlySpan<Byte> Timestamp { get; }
        IReadOnlySetList<IDialogItemGetter> Items { get; }

    }

    #endregion

    #region Common MixIn
    public static class DialogTopicMixIn
    {
        public static void Clear(this IDialogTopicInternal item)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogTopic_Mask<bool> GetEqualsMask(
            this IDialogTopicGetter item,
            IDialogTopicGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDialogTopicGetter item,
            string? name = null,
            DialogTopic_Mask<bool>? printMask = null)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDialogTopicGetter item,
            FileGeneration fg,
            string? name = null,
            DialogTopic_Mask<bool>? printMask = null)
        {
            ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IDialogTopicGetter item,
            DialogTopic_Mask<bool?> checkMask)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static DialogTopic_Mask<bool> GetHasBeenSetMask(this IDialogTopicGetter item)
        {
            var ret = new DialogTopic_Mask<bool>(false);
            ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IDialogTopicGetter item,
            IDialogTopicGetter rhs)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IDialogTopicInternal lhs,
            IDialogTopicGetter rhs,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = DialogTopic_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogTopicInternal lhs,
            IDialogTopicGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static DialogTopic DeepCopy(
            this IDialogTopicGetter item,
            DialogTopic_TranslationMask? copyMask = null)
        {
            return ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogTopic DeepCopy(
            this IDialogTopicGetter item,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask? copyMask = null)
        {
            return ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogTopic DeepCopy(
            this IDialogTopicGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            XElement node,
            DialogTopic_TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            XElement node,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogTopic_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            string path,
            DialogTopic_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            string path,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            DialogTopic_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            Stream stream,
            DialogTopic_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            Stream stream,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            DialogTopic_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this IDialogTopicGetter obj)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IDialogTopicGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)obj).CommonInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this IDialogTopicInternal obj)
        {
            return ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IDialogTopicInternal obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IDialogTopicInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IDialogTopicInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum DialogTopic_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Quests = 5,
        Name = 6,
        DialogType = 7,
        Timestamp = 8,
        Items = 9,
    }
    #endregion

    #region Registration
    public partial class DialogTopic_Registration : ILoquiRegistration
    {
        public static readonly DialogTopic_Registration Instance = new DialogTopic_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 147,
            version: 0);

        public const string GUID = "64f03683-28fd-43e3-8141-da8e95a52f89";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(DialogTopic_Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogTopic_ErrorMask);

        public static readonly Type ClassType = typeof(DialogTopic);

        public static readonly Type GetterType = typeof(IDialogTopicGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogTopic);

        public static readonly Type? InternalSetterType = typeof(IDialogTopicInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.DialogTopic";

        public const string Name = "DialogTopic";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "QUESTS":
                    return (ushort)DialogTopic_FieldIndex.Quests;
                case "NAME":
                    return (ushort)DialogTopic_FieldIndex.Name;
                case "DIALOGTYPE":
                    return (ushort)DialogTopic_FieldIndex.DialogType;
                case "TIMESTAMP":
                    return (ushort)DialogTopic_FieldIndex.Timestamp;
                case "ITEMS":
                    return (ushort)DialogTopic_FieldIndex.Items;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                case DialogTopic_FieldIndex.Items:
                    return true;
                case DialogTopic_FieldIndex.Name:
                case DialogTopic_FieldIndex.DialogType:
                case DialogTopic_FieldIndex.Timestamp:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Items:
                    return true;
                case DialogTopic_FieldIndex.Quests:
                case DialogTopic_FieldIndex.Name:
                case DialogTopic_FieldIndex.DialogType:
                case DialogTopic_FieldIndex.Timestamp:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                case DialogTopic_FieldIndex.Name:
                case DialogTopic_FieldIndex.DialogType:
                case DialogTopic_FieldIndex.Timestamp:
                case DialogTopic_FieldIndex.Items:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                    return "Quests";
                case DialogTopic_FieldIndex.Name:
                    return "Name";
                case DialogTopic_FieldIndex.DialogType:
                    return "DialogType";
                case DialogTopic_FieldIndex.Timestamp:
                    return "Timestamp";
                case DialogTopic_FieldIndex.Items:
                    return "Items";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                case DialogTopic_FieldIndex.Name:
                case DialogTopic_FieldIndex.DialogType:
                case DialogTopic_FieldIndex.Timestamp:
                case DialogTopic_FieldIndex.Items:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                case DialogTopic_FieldIndex.Name:
                case DialogTopic_FieldIndex.DialogType:
                case DialogTopic_FieldIndex.Timestamp:
                case DialogTopic_FieldIndex.Items:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                    return typeof(ISetList<IFormIDLink<Quest>>);
                case DialogTopic_FieldIndex.Name:
                    return typeof(String);
                case DialogTopic_FieldIndex.DialogType:
                    return typeof(DialogType);
                case DialogTopic_FieldIndex.Timestamp:
                    return typeof(Byte[]);
                case DialogTopic_FieldIndex.Items:
                    return typeof(ISetList<DialogItem>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(DialogTopicXmlWriteTranslation);
        public static readonly RecordType DIAL_HEADER = new RecordType("DIAL");
        public static readonly RecordType QSTI_HEADER = new RecordType("QSTI");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType INFO_HEADER = new RecordType("INFO");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = DIAL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(DialogTopicBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class DialogTopicSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly DialogTopicSetterCommon Instance = new DialogTopicSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogTopicInternal item)
        {
            ClearPartial();
            item.Quests.Unset();
            item.Name = default;
            item.DialogType = default;
            item.Timestamp = new byte[4];
            item.Items.Unset();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IDialogTopicInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDialogTopicInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IDialogTopicInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IDialogTopicInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    DialogTopicXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Mutagen
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(IDialogTopicInternal obj)
        {
            foreach (var item in DialogTopicCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(IDialogTopicInternal obj)
            where TMajor : class, IMajorRecordCommon
        {
            foreach (var item in DialogTopicCommon.Instance.EnumerateMajorRecords<TMajor>(obj))
            {
                yield return (item as TMajor)!;
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => DialogTopic_Registration.DIAL_HEADER;
        protected static void FillBinaryStructs(
            IDialogTopicInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IDialogTopicInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x49545351: // QSTI
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLink<Quest>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: DialogTopic_Registration.QSTI_HEADER,
                        masterReferences: masterReferences,
                        item: item.Quests,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.Quests);
                }
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.Name);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.DialogType = EnumBinaryTranslation<DialogType>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.DialogType);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IDialogTopicInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IDialogTopicInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
            DialogTopicBinaryCreateTranslation.CustomBinaryEndImportPublic(
                frame: frame,
                obj: item,
                masterReferences: masterReferences);
        }
        
        #endregion
        
    }
    public partial class DialogTopicCommon : OblivionMajorRecordCommon
    {
        public new static readonly DialogTopicCommon Instance = new DialogTopicCommon();

        public DialogTopic_Mask<bool> GetEqualsMask(
            IDialogTopicGetter item,
            IDialogTopicGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogTopic_Mask<bool>(false);
            ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogTopicGetter item,
            IDialogTopicGetter rhs,
            DialogTopic_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Quests = item.Quests.CollectionEqualsHelper(
                rhs.Quests,
                (l, r) => object.Equals(l, r),
                include);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.DialogType = item.DialogType == rhs.DialogType;
            ret.Timestamp = MemoryExtensions.SequenceEqual(item.Timestamp, rhs.Timestamp);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IDialogTopicGetter item,
            string? name = null,
            DialogTopic_Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDialogTopicGetter item,
            FileGeneration fg,
            string? name = null,
            DialogTopic_Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DialogTopic =>");
            }
            else
            {
                fg.AppendLine($"{name} (DialogTopic) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDialogTopicGetter item,
            FileGeneration fg,
            DialogTopic_Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Quests?.Overall ?? true)
            {
                fg.AppendLine("Quests =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Quests)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.DialogType ?? true)
            {
                fg.AppendLine($"DialogType => {item.DialogType}");
            }
            if (printMask?.Timestamp ?? true)
            {
                fg.AppendLine($"Timestamp => {SpanExt.ToHexString(item.Timestamp)}");
            }
            if (printMask?.Items?.Overall ?? true)
            {
                fg.AppendLine("Items =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Items)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IDialogTopicGetter item,
            DialogTopic_Mask<bool?> checkMask)
        {
            if (checkMask.Quests?.Overall.HasValue ?? false && checkMask.Quests!.Overall.Value != item.Quests.HasBeenSet) return false;
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.DialogType.HasValue && checkMask.DialogType.Value != (item.DialogType != null)) return false;
            if (checkMask.Items?.Overall.HasValue ?? false && checkMask.Items!.Overall.Value != item.Items.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IDialogTopicGetter item,
            DialogTopic_Mask<bool> mask)
        {
            mask.Quests = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Quests.HasBeenSet, Enumerable.Empty<(int, bool)>());
            mask.Name = (item.Name != null);
            mask.DialogType = (item.DialogType != null);
            mask.Timestamp = true;
            mask.Items = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, DialogItem_Mask<bool>?>>>(item.Items.HasBeenSet, item.Items.WithIndex().Select((i) => new MaskItemIndexed<bool, DialogItem_Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static DialogTopic_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogTopic_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (DialogTopic_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (DialogTopic_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (DialogTopic_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (DialogTopic_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new DialogTopic_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogTopic_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (DialogTopic_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (DialogTopic_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DialogTopic_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogTopicGetter? lhs,
            IDialogTopicGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.Quests.SequenceEqual(rhs.Quests)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (lhs.DialogType != rhs.DialogType) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Timestamp, rhs.Timestamp)) return false;
            if (!lhs.Items.SequenceEqual(rhs.Items)) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDialogTopicGetter?)lhs,
                rhs: rhs as IDialogTopicGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDialogTopicGetter?)lhs,
                rhs: rhs as IDialogTopicGetter);
        }
        
        public virtual int GetHashCode(IDialogTopicGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Quests).CombineHashCode(ret);
            if (item.Name.TryGet(out var Nameitem))
            {
                ret = HashHelper.GetHashCode(Nameitem).CombineHashCode(ret);
            }
            if (item.DialogType.TryGet(out var DialogTypeitem))
            {
                ret = HashHelper.GetHashCode(DialogTypeitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Timestamp).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Items).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogTopicGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogTopicGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return DialogTopic.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IDialogTopicGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Quests)
            {
                yield return item;
            }
            foreach (var item in obj.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(DialogTopic obj, DialogTopic rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new DialogTopic(getNextFormKey());
            ret.DeepCopyIn((DialogTopic)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (DialogTopic)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(IDialogTopicGetter obj)
        {
            foreach (var subItem in obj.Items)
            {
                yield return subItem;
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(IDialogTopicGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            switch (typeof(TMajor).Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecordCommonGetter":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "IOblivionMajorRecordGetter":
                case "OblivionMajorRecord":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return (item as TMajor)!;
                    }
                    yield break;
                case "DialogItem":
                case "IDialogItemGetter":
                case "IDialogItem":
                case "IDialogItemInternal":
                    foreach (var subItem in obj.Items)
                    {
                        yield return (subItem as TMajor)!;
                        foreach (var item in subItem.EnumerateMajorRecords<TMajor>())
                        {
                            yield return (item as TMajor)!;
                        }
                    }
                    yield break;
                default:
                    throw new ArgumentException();
            }
        }
        
        #endregion
        
    }
    public partial class DialogTopicSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly DialogTopicSetterTranslationCommon Instance = new DialogTopicSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IDialogTopicInternal item,
            IDialogTopicGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IDialogTopic item,
            IDialogTopicGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Quests) ?? true))
            {
                errorMask?.PushIndex((int)DialogTopic_FieldIndex.Quests);
                try
                {
                    if (rhs.Quests.HasBeenSet)
                    {
                        item.Quests.SetTo(
                            rhs.Quests,
                            (r) => new FormIDLink<Quest>(r.FormKey));
                    }
                    else
                    {
                        item.Quests.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.DialogType) ?? true))
            {
                item.DialogType = rhs.DialogType;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Timestamp) ?? true))
            {
                item.Timestamp = rhs.Timestamp.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)DialogTopic_FieldIndex.Items);
                try
                {
                    if (rhs.Items.HasBeenSet)
                    {
                        item.Items.SetTo(
                            items: rhs.Items,
                            converter: (r) =>
                            {
                                var copyRet = new DialogItem(r.FormKey);
                                copyRet.DeepCopyIn(
                                    rhs: r,
                                    copyMask: default(TranslationCrystal),
                                    errorMask: errorMask);
                                return copyRet;
                            });
                    }
                    else
                    {
                        item.Items.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDialogTopicInternal)item,
                rhs: (IDialogTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDialogTopic)item,
                rhs: (IDialogTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDialogTopicInternal)item,
                rhs: (IDialogTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDialogTopic)item,
                rhs: (IDialogTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public DialogTopic DeepCopy(
            IDialogTopicGetter item,
            DialogTopic_TranslationMask? copyMask = null)
        {
            DialogTopic ret = (DialogTopic)((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public DialogTopic DeepCopy(
            IDialogTopicGetter item,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask? copyMask = null)
        {
            DialogTopic ret = (DialogTopic)((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public DialogTopic DeepCopy(
            IDialogTopicGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogTopic ret = (DialogTopic)((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class DialogTopic
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogTopic_Registration.Instance;
        public new static DialogTopic_Registration Registration => DialogTopic_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogTopicCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DialogTopicSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogTopicSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DialogTopicXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static DialogTopicXmlWriteTranslation Instance = new DialogTopicXmlWriteTranslation();

        public static void WriteToNodeXml(
            IDialogTopicGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Quests.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Quests) ?? true))
            {
                ListXmlTranslation<IFormIDLinkGetter<IQuestGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Quests),
                    item: item.Quests,
                    fieldIndex: (int)DialogTopic_FieldIndex.Quests,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogTopic_FieldIndex.Quests),
                    transl: (XElement subNode, IFormIDLinkGetter<IQuestGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)DialogTopic_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.DialogType != null)
                && (translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.DialogType) ?? true))
            {
                EnumXmlTranslation<DialogType>.Instance.Write(
                    node: node,
                    name: nameof(item.DialogType),
                    item: item.DialogType,
                    fieldIndex: (int)DialogTopic_FieldIndex.DialogType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Timestamp) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Timestamp),
                    item: item.Timestamp,
                    fieldIndex: (int)DialogTopic_FieldIndex.Timestamp,
                    errorMask: errorMask);
            }
            if (item.Items.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Items) ?? true))
            {
                ListXmlTranslation<IDialogItemGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Items),
                    item: item.Items,
                    fieldIndex: (int)DialogTopic_FieldIndex.Items,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogTopic_FieldIndex.Items),
                    transl: (XElement subNode, IDialogItemGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((DialogItemXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IDialogTopicGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.DialogTopic");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.DialogTopic");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDialogTopicGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDialogTopicGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDialogTopicGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class DialogTopicXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static DialogTopicXmlCreateTranslation Instance = new DialogTopicXmlCreateTranslation();

        public static void FillPublicXml(
            IDialogTopicInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DialogTopicXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IDialogTopicInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Quests":
                    try
                    {
                        errorMask?.PushIndex((int)DialogTopic_FieldIndex.Quests);
                        if (ListXmlTranslation<IFormIDLink<Quest>>.Instance.Parse(
                            node: node,
                            enumer: out var QuestsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Quests.SetTo(QuestsItem);
                        }
                        else
                        {
                            item.Quests.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)DialogTopic_FieldIndex.Name);
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DialogType":
                    try
                    {
                        errorMask?.PushIndex((int)DialogTopic_FieldIndex.DialogType);
                        item.DialogType = EnumXmlTranslation<DialogType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Timestamp":
                    try
                    {
                        errorMask?.PushIndex((int)DialogTopic_FieldIndex.Timestamp);
                        item.Timestamp = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 4,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Items":
                    try
                    {
                        errorMask?.PushIndex((int)DialogTopic_FieldIndex.Items);
                        if (ListXmlTranslation<DialogItem>.Instance.Parse(
                            node: node,
                            enumer: out var ItemsItem,
                            transl: LoquiXmlTranslation<DialogItem>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Items.SetTo(ItemsItem);
                        }
                        else
                        {
                            item.Items.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class DialogTopicXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IDialogTopicGetter item,
            XElement node,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogTopicXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogTopic_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IDialogTopicGetter item,
            string path,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDialogTopicGetter item,
            Stream stream,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class DialogTopic_Mask<T> :
        OblivionMajorRecord_Mask<T>,
        IMask<T>,
        IEquatable<DialogTopic_Mask<T>>
        where T : notnull
    {
        #region Ctors
        public DialogTopic_Mask(T initialValue)
        : base(initialValue)
        {
            this.Quests = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, Enumerable.Empty<(int Index, T Value)>());
            this.Name = initialValue;
            this.DialogType = initialValue;
            this.Timestamp = initialValue;
            this.Items = new MaskItem<T, IEnumerable<MaskItemIndexed<T, DialogItem_Mask<T>?>>>(initialValue, Enumerable.Empty<MaskItemIndexed<T, DialogItem_Mask<T>?>>());
        }

        public DialogTopic_Mask(
            T MajorRecordFlagsRaw,
            T FormKey,
            T Version,
            T EditorID,
            T OblivionMajorRecordFlags,
            T Quests,
            T Name,
            T DialogType,
            T Timestamp,
            T Items)
        : base(
            MajorRecordFlagsRaw: MajorRecordFlagsRaw,
            FormKey: FormKey,
            Version: Version,
            EditorID: EditorID,
            OblivionMajorRecordFlags: OblivionMajorRecordFlags)
        {
            this.Quests = new MaskItem<T, IEnumerable<(int Index, T Value)>>(Quests, Enumerable.Empty<(int Index, T Value)>());
            this.Name = Name;
            this.DialogType = DialogType;
            this.Timestamp = Timestamp;
            this.Items = new MaskItem<T, IEnumerable<MaskItemIndexed<T, DialogItem_Mask<T>?>>>(Items, Enumerable.Empty<MaskItemIndexed<T, DialogItem_Mask<T>?>>());
        }

        #pragma warning disable CS8618
        protected DialogTopic_Mask()
        {
        }
        #pragma warning restore CS8618

        #endregion

        #region Members
        public MaskItem<T, IEnumerable<(int Index, T Value)>>? Quests;
        public T Name;
        public T DialogType;
        public T Timestamp;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, DialogItem_Mask<T>?>>>? Items;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is DialogTopic_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(DialogTopic_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Quests, rhs.Quests)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.DialogType, rhs.DialogType)) return false;
            if (!object.Equals(this.Timestamp, rhs.Timestamp)) return false;
            if (!object.Equals(this.Items, rhs.Items)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Quests?.GetHashCode());
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.DialogType?.GetHashCode());
            ret = ret.CombineHashCode(this.Timestamp?.GetHashCode());
            ret = ret.CombineHashCode(this.Items?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (this.Quests != null)
            {
                if (!eval(this.Quests.Overall)) return false;
                if (this.Quests.Specific != null)
                {
                    foreach (var item in this.Quests.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (!eval(this.Name)) return false;
            if (!eval(this.DialogType)) return false;
            if (!eval(this.Timestamp)) return false;
            if (this.Items != null)
            {
                if (!eval(this.Items.Overall)) return false;
                if (this.Items.Specific != null)
                {
                    foreach (var item in this.Items.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new DialogTopic_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new DialogTopic_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(DialogTopic_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (Quests != null)
            {
                obj.Quests = new MaskItem<R, IEnumerable<(int Index, R Value)>>(eval(this.Quests.Overall), Enumerable.Empty<(int Index, R Value)>());
                if (Quests.Specific != null)
                {
                    var l = new List<(int Index, R Item)>();
                    obj.Quests.Specific = l;
                    foreach (var item in Quests.Specific.WithIndex())
                    {
                        R mask = eval(item.Item.Value);
                        l.Add((item.Index, mask));
                    }
                }
            }
            obj.Name = eval(this.Name);
            obj.DialogType = eval(this.DialogType);
            obj.Timestamp = eval(this.Timestamp);
            if (Items != null)
            {
                obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogItem_Mask<R>?>>>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogItem_Mask<R>?>>());
                if (Items.Specific != null)
                {
                    var l = new List<MaskItemIndexed<R, DialogItem_Mask<R>?>>();
                    obj.Items.Specific = l;
                    foreach (var item in Items.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, DialogItem_Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, DialogItem_Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                        if (mask == null) continue;
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(DialogTopic_Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, DialogTopic_Mask<bool>? printMask = null)
        {
            fg.AppendLine($"{nameof(DialogTopic_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Quests?.Overall ?? true)
                {
                    fg.AppendLine("Quests =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Quests != null)
                        {
                            if (Quests.Overall != null)
                            {
                                fg.AppendLine(Quests.Overall.ToString());
                            }
                            if (Quests.Specific != null)
                            {
                                foreach (var subItem in Quests.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine($" => {subItem}");
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.DialogType ?? true)
                {
                    fg.AppendLine($"DialogType => {DialogType}");
                }
                if (printMask?.Timestamp ?? true)
                {
                    fg.AppendLine($"Timestamp => {Timestamp}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Items != null)
                        {
                            if (Items.Overall != null)
                            {
                                fg.AppendLine(Items.Overall.ToString());
                            }
                            if (Items.Specific != null)
                            {
                                foreach (var subItem in Items.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class DialogTopic_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<DialogTopic_ErrorMask>
    {
        #region Members
        public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Quests;
        public Exception? Name;
        public Exception? DialogType;
        public Exception? Timestamp;
        public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogItem_ErrorMask?>>?>? Items;
        #endregion

        #region IErrorMask
        public override object? GetNthMask(int index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                    return Quests;
                case DialogTopic_FieldIndex.Name:
                    return Name;
                case DialogTopic_FieldIndex.DialogType:
                    return DialogType;
                case DialogTopic_FieldIndex.Timestamp:
                    return Timestamp;
                case DialogTopic_FieldIndex.Items:
                    return Items;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                    this.Quests = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                    break;
                case DialogTopic_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case DialogTopic_FieldIndex.DialogType:
                    this.DialogType = ex;
                    break;
                case DialogTopic_FieldIndex.Timestamp:
                    this.Timestamp = ex;
                    break;
                case DialogTopic_FieldIndex.Items:
                    this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogItem_ErrorMask?>>?>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                    this.Quests = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                    break;
                case DialogTopic_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case DialogTopic_FieldIndex.DialogType:
                    this.DialogType = (Exception)obj;
                    break;
                case DialogTopic_FieldIndex.Timestamp:
                    this.Timestamp = (Exception)obj;
                    break;
                case DialogTopic_FieldIndex.Items:
                    this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogItem_ErrorMask?>>?>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Quests != null) return true;
            if (Name != null) return true;
            if (DialogType != null) return true;
            if (Timestamp != null) return true;
            if (Items != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("DialogTopic_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine("Quests =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Quests != null)
                {
                    if (Quests.Overall != null)
                    {
                        fg.AppendLine(Quests.Overall.ToString());
                    }
                    if (Quests.Specific != null)
                    {
                        foreach (var subItem in Quests.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($" => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"DialogType => {DialogType}");
            fg.AppendLine($"Timestamp => {Timestamp}");
            fg.AppendLine("Items =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Items != null)
                {
                    if (Items.Overall != null)
                    {
                        fg.AppendLine(Items.Overall.ToString());
                    }
                    if (Items.Specific != null)
                    {
                        foreach (var subItem in Items.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg);
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public DialogTopic_ErrorMask Combine(DialogTopic_ErrorMask? rhs)
        {
            if (rhs == null) return this;
            var ret = new DialogTopic_ErrorMask();
            ret.Quests = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Quests?.Overall, rhs.Quests?.Overall), ExceptionExt.Combine(this.Quests?.Specific, rhs.Quests?.Specific));
            ret.Name = this.Name.Combine(rhs.Name);
            ret.DialogType = this.DialogType.Combine(rhs.DialogType);
            ret.Timestamp = this.Timestamp.Combine(rhs.Timestamp);
            ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogItem_ErrorMask?>>?>(ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
            return ret;
        }
        public static DialogTopic_ErrorMask? Combine(DialogTopic_ErrorMask? lhs, DialogTopic_ErrorMask? rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static new DialogTopic_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            return new DialogTopic_ErrorMask();
        }
        #endregion

    }
    public class DialogTopic_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Quests;
        public bool Name;
        public bool DialogType;
        public bool Timestamp;
        public MaskItem<bool, DialogItem_TranslationMask?> Items;
        #endregion

        #region Ctors
        public DialogTopic_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Quests = defaultOn;
            this.Name = defaultOn;
            this.DialogType = defaultOn;
            this.Timestamp = defaultOn;
            this.Items = new MaskItem<bool, DialogItem_TranslationMask?>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Quests, null));
            ret.Add((Name, null));
            ret.Add((DialogType, null));
            ret.Add((Timestamp, null));
            ret.Add((Items?.Overall ?? true, Items?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DialogTopicBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static DialogTopicBinaryWriteTranslation Instance = new DialogTopicBinaryWriteTranslation();

        static partial void CustomBinaryEndExport(
            MutagenWriter writer,
            IDialogTopicGetter obj,
            MasterReferences masterReferences);
        public static void CustomBinaryEndExportInternal(
            MutagenWriter writer,
            IDialogTopicGetter obj,
            MasterReferences masterReferences)
        {
            CustomBinaryEndExport(
                writer: writer,
                obj: obj,
                masterReferences: masterReferences);
        }
        public static void Write_Embedded(
            IDialogTopicGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IDialogTopicGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLinkGetter<IQuestGetter>>.Instance.Write(
                writer: writer,
                items: item.Quests,
                transl: (MutagenWriter subWriter, IFormIDLinkGetter<IQuestGetter> subItem) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(DialogTopic_Registration.QSTI_HEADER),
                        masterReferences: masterReferences);
                });
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(DialogTopic_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<DialogType>.Instance.WriteNullable(
                writer,
                item.DialogType,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(DialogTopic_Registration.DATA_HEADER));
        }

        public void Write(
            MutagenWriter writer,
            IDialogTopicGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: DialogTopic_Registration.DIAL_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
            CustomBinaryEndExportInternal(
                writer: writer,
                obj: item,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IDialogTopicGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IDialogTopicGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IDialogTopicGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class DialogTopicBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static DialogTopicBinaryCreateTranslation Instance = new DialogTopicBinaryCreateTranslation();

        static partial void CustomBinaryEndImport(
            MutagenFrame frame,
            IDialogTopicInternal obj,
            MasterReferences masterReferences);
        public static void CustomBinaryEndImportPublic(
            MutagenFrame frame,
            IDialogTopicInternal obj,
            MasterReferences masterReferences)
        {
            CustomBinaryEndImport(
                frame: frame,
                obj: obj,
                masterReferences: masterReferences);
        }
    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class DialogTopicBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DialogTopicBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IDialogTopicGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogTopic_Registration.Instance;
        public new static DialogTopic_Registration Registration => DialogTopic_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogTopicCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogTopicSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDialogTopicGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => DialogTopicCommon.Instance.GetLinks(this);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => DialogTopicXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((DialogTopicXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogTopicBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((DialogTopicBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        public IReadOnlySetList<IFormIDLinkGetter<IQuestGetter>> Quests { get; private set; } = EmptySetList<IFormIDLinkGetter<IQuestGetter>>.Instance;
        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region DialogType
        private int? _DialogTypeLocation;
        private bool DialogType_IsSet => _DialogTypeLocation.HasValue;
        public DialogType? DialogType => DialogType_IsSet ? (DialogType)HeaderTranslation.ExtractSubrecordSpan(_data, _DialogTypeLocation!.Value, _package.Meta)[0] : default(DialogType?);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);
        partial void CustomEnd(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected DialogTopicBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static DialogTopicBinaryOverlay DialogTopicFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new DialogTopicBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            ret.CustomEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x49545351: // QSTI
                {
                    this.Quests = BinaryOverlaySetList<IFormIDLinkGetter<IQuestGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormIDLink<IQuestGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.Quests);
                }
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.Name);
                }
                case 0x41544144: // DATA
                {
                    _DialogTypeLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.DialogType);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

