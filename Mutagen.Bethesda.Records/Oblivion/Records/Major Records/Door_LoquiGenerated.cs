/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Door :
        OblivionMajorRecord,
        IDoorInternal,
        ILoquiObjectSetter<Door>,
        INamed,
        IEquatable<Door>,
        IEqualsMask
    {
        #region Ctor
        protected Door()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Door_FieldIndex.Name];
            set => _hasBeenSetTracker[(int)Door_FieldIndex.Name] = value;
        }
        bool IDoorGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IDoorGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            _Name = value;
            _hasBeenSetTracker[(int)Door_FieldIndex.Name] = markSet;
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)Door_FieldIndex.Model];
            set => _hasBeenSetTracker[(int)Door_FieldIndex.Model] = value;
        }
        bool IDoorGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool hasBeenSet = true)
        {
            _Model = value;
            _hasBeenSetTracker[(int)Door_FieldIndex.Model] = hasBeenSet;
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter IDoorGetter.Model => this.Model;
        #endregion
        #region Script
        protected IFormIDSetLink<Script> _Script = new FormIDSetLink<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IFormIDSetLink<Script> Script => this._Script;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLinkGetter<IScriptGetter> IDoorGetter.Script => this.Script;
        #endregion
        #region OpenSound
        protected IFormIDSetLink<Sound> _OpenSound = new FormIDSetLink<Sound>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IFormIDSetLink<Sound> OpenSound => this._OpenSound;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLinkGetter<ISoundGetter> IDoorGetter.OpenSound => this.OpenSound;
        #endregion
        #region CloseSound
        protected IFormIDSetLink<Sound> _CloseSound = new FormIDSetLink<Sound>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IFormIDSetLink<Sound> CloseSound => this._CloseSound;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLinkGetter<ISoundGetter> IDoorGetter.CloseSound => this.CloseSound;
        #endregion
        #region LoopSound
        protected IFormIDSetLink<Sound> _LoopSound = new FormIDSetLink<Sound>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IFormIDSetLink<Sound> LoopSound => this._LoopSound;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLinkGetter<ISoundGetter> IDoorGetter.LoopSound => this.LoopSound;
        #endregion
        #region Flags
        public bool Flags_IsSet
        {
            get => _hasBeenSetTracker[(int)Door_FieldIndex.Flags];
            set => _hasBeenSetTracker[(int)Door_FieldIndex.Flags] = value;
        }
        bool IDoorGetter.Flags_IsSet => Flags_IsSet;
        private Door.DoorFlag _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Door.DoorFlag Flags
        {
            get => this._Flags;
            set => Flags_Set(value);
        }
        Door.DoorFlag IDoorGetter.Flags => this.Flags;
        public void Flags_Set(
            Door.DoorFlag value,
            bool markSet = true)
        {
            _Flags = value;
            _hasBeenSetTracker[(int)Door_FieldIndex.Flags] = markSet;
        }
        public void Flags_Unset()
        {
            this.Flags_Set(default(Door.DoorFlag), false);
        }
        #endregion
        #region RandomTeleportDestinations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IFormIDLink<Place>> _RandomTeleportDestinations = new SetList<IFormIDLink<Place>>();
        public ISetList<IFormIDLink<Place>> RandomTeleportDestinations => _RandomTeleportDestinations;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormIDLink<Place>> IDoor.RandomTeleportDestinations => _RandomTeleportDestinations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormIDLinkGetter<IPlaceGetter>> IDoorGetter.RandomTeleportDestinations => _RandomTeleportDestinations;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            DoorMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IDoorGetter rhs)) return false;
            return ((DoorCommon)((IDoorGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Door obj)
        {
            return ((DoorCommon)((IDoorGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((DoorCommon)((IDoorGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => DoorXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((DoorXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Door CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Door_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Door CreateFromXml(
            XElement node,
            out Door_ErrorMask errorMask,
            bool doMasks = true,
            Door_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Door CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Door() : null;
                    break;
                default:
                    break;
            }
            var ret = new Door();
            ((DoorSetterCommon)((IDoorGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Door CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Door_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Door CreateFromXml(
            string path,
            out Door_ErrorMask errorMask,
            Door_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Door CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Door_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Door CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Door_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Door CreateFromXml(
            Stream stream,
            out Door_ErrorMask errorMask,
            Door_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Door CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Door_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Door_FieldIndex)index)
            {
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Model:
                case Door_FieldIndex.Script:
                case Door_FieldIndex.OpenSound:
                case Door_FieldIndex.CloseSound:
                case Door_FieldIndex.LoopSound:
                case Door_FieldIndex.Flags:
                    return _hasBeenSetTracker[index];
                case Door_FieldIndex.RandomTeleportDestinations:
                    return RandomTeleportDestinations.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Door_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILinkGetter> Links => DoorCommon.Instance.GetLinks(this);
        public Door(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Door(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => DoorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((DoorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Door CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Door CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Door_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Door CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Door();
            ((DoorSetterCommon)((IDoorGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDoorGetter)rhs, include);

        void IClearable.Clear()
        {
            ((DoorSetterCommon)((IDoorGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static Door GetNew()
        {
            return new Door();
        }

    }
    #endregion

    #region Interface
    public partial interface IDoor :
        IDoorGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IDoorInternal>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model value, bool hasBeenSet = true);
        void Model_Unset();

        new IFormIDSetLink<Script> Script { get; }
        new IFormIDSetLink<Sound> OpenSound { get; }
        new IFormIDSetLink<Sound> CloseSound { get; }
        new IFormIDSetLink<Sound> LoopSound { get; }
        new Door.DoorFlag Flags { get; set; }
        new bool Flags_IsSet { get; set; }
        void Flags_Set(Door.DoorFlag value, bool hasBeenSet = true);
        void Flags_Unset();

        new ISetList<IFormIDLink<Place>> RandomTeleportDestinations { get; }
    }

    public partial interface IDoorInternal :
        IOblivionMajorRecordInternal,
        IDoor,
        IDoorGetter
    {
    }

    public partial interface IDoorGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IDoorGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Model
        IModelGetter Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Script
        IFormIDSetLinkGetter<IScriptGetter> Script { get; }
        #endregion
        #region OpenSound
        IFormIDSetLinkGetter<ISoundGetter> OpenSound { get; }
        #endregion
        #region CloseSound
        IFormIDSetLinkGetter<ISoundGetter> CloseSound { get; }
        #endregion
        #region LoopSound
        IFormIDSetLinkGetter<ISoundGetter> LoopSound { get; }
        #endregion
        #region Flags
        Door.DoorFlag Flags { get; }
        bool Flags_IsSet { get; }

        #endregion
        #region RandomTeleportDestinations
        IReadOnlySetList<IFormIDLinkGetter<IPlaceGetter>> RandomTeleportDestinations { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class DoorMixIn
    {
        public static void Clear(this IDoorInternal item)
        {
            ((DoorSetterCommon)((IDoorGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Door_Mask<bool> GetEqualsMask(
            this IDoorGetter item,
            IDoorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DoorCommon)((IDoorGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDoorGetter item,
            string name = null,
            Door_Mask<bool> printMask = null)
        {
            return ((DoorCommon)((IDoorGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDoorGetter item,
            FileGeneration fg,
            string name = null,
            Door_Mask<bool> printMask = null)
        {
            ((DoorCommon)((IDoorGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IDoorGetter item,
            Door_Mask<bool?> checkMask)
        {
            return ((DoorCommon)((IDoorGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Door_Mask<bool> GetHasBeenSetMask(this IDoorGetter item)
        {
            var ret = new Door_Mask<bool>();
            ((DoorCommon)((IDoorGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IDoorGetter item,
            IDoorGetter rhs)
        {
            return ((DoorCommon)((IDoorGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IDoorInternal lhs,
            IDoorGetter rhs,
            Door_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IDoorInternal lhs,
            IDoorGetter rhs,
            out Door_ErrorMask errorMask,
            Door_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((DoorSetterTranslationCommon)((IDoorGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IDoorInternal lhs,
            IDoorGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((DoorSetterTranslationCommon)((IDoorGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Door DeepCopy(
            this IDoorGetter item,
            Door_TranslationMask copyMask = null)
        {
            return ((DoorSetterTranslationCommon)((IDoorGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Door DeepCopy(
            this IDoorGetter item,
            out Door_ErrorMask errorMask,
            Door_TranslationMask copyMask = null)
        {
            return ((DoorSetterTranslationCommon)((IDoorGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Door DeepCopy(
            this IDoorGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((DoorSetterTranslationCommon)((IDoorGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDoorInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Door_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDoorInternal item,
            XElement node,
            out Door_ErrorMask errorMask,
            bool doMasks = true,
            Door_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromXml(
            this IDoorInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((DoorSetterCommon)((IDoorGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDoorInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            Door_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDoorInternal item,
            string path,
            out Door_ErrorMask errorMask,
            Door_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDoorInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            Door_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IDoorInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Door_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDoorInternal item,
            Stream stream,
            out Door_ErrorMask errorMask,
            Door_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDoorInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            Door_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IDoorInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IDoorInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Door_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromBinary(
            this IDoorInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((DoorSetterCommon)((IDoorGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Door_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Script = 7,
        OpenSound = 8,
        CloseSound = 9,
        LoopSound = 10,
        Flags = 11,
        RandomTeleportDestinations = 12,
    }
    #endregion

    #region Registration
    public class Door_Registration : ILoquiRegistration
    {
        public static readonly Door_Registration Instance = new Door_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 74,
            version: 0);

        public const string GUID = "2430f9e3-8270-4b86-b1e2-03757c4a0f93";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(Door_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Door_ErrorMask);

        public static readonly Type ClassType = typeof(Door);

        public static readonly Type GetterType = typeof(IDoorGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDoor);

        public static readonly Type InternalSetterType = typeof(IDoorInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Door";

        public const string Name = "Door";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Door_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Door_FieldIndex.Model;
                case "SCRIPT":
                    return (ushort)Door_FieldIndex.Script;
                case "OPENSOUND":
                    return (ushort)Door_FieldIndex.OpenSound;
                case "CLOSESOUND":
                    return (ushort)Door_FieldIndex.CloseSound;
                case "LOOPSOUND":
                    return (ushort)Door_FieldIndex.LoopSound;
                case "FLAGS":
                    return (ushort)Door_FieldIndex.Flags;
                case "RANDOMTELEPORTDESTINATIONS":
                    return (ushort)Door_FieldIndex.RandomTeleportDestinations;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.RandomTeleportDestinations:
                    return true;
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Model:
                case Door_FieldIndex.Script:
                case Door_FieldIndex.OpenSound:
                case Door_FieldIndex.CloseSound:
                case Door_FieldIndex.LoopSound:
                case Door_FieldIndex.Flags:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Model:
                    return true;
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Script:
                case Door_FieldIndex.OpenSound:
                case Door_FieldIndex.CloseSound:
                case Door_FieldIndex.LoopSound:
                case Door_FieldIndex.Flags:
                case Door_FieldIndex.RandomTeleportDestinations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Model:
                case Door_FieldIndex.Script:
                case Door_FieldIndex.OpenSound:
                case Door_FieldIndex.CloseSound:
                case Door_FieldIndex.LoopSound:
                case Door_FieldIndex.Flags:
                case Door_FieldIndex.RandomTeleportDestinations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    return "Name";
                case Door_FieldIndex.Model:
                    return "Model";
                case Door_FieldIndex.Script:
                    return "Script";
                case Door_FieldIndex.OpenSound:
                    return "OpenSound";
                case Door_FieldIndex.CloseSound:
                    return "CloseSound";
                case Door_FieldIndex.LoopSound:
                    return "LoopSound";
                case Door_FieldIndex.Flags:
                    return "Flags";
                case Door_FieldIndex.RandomTeleportDestinations:
                    return "RandomTeleportDestinations";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Model:
                case Door_FieldIndex.Script:
                case Door_FieldIndex.OpenSound:
                case Door_FieldIndex.CloseSound:
                case Door_FieldIndex.LoopSound:
                case Door_FieldIndex.Flags:
                case Door_FieldIndex.RandomTeleportDestinations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Model:
                case Door_FieldIndex.Script:
                case Door_FieldIndex.OpenSound:
                case Door_FieldIndex.CloseSound:
                case Door_FieldIndex.LoopSound:
                case Door_FieldIndex.Flags:
                case Door_FieldIndex.RandomTeleportDestinations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    return typeof(String);
                case Door_FieldIndex.Model:
                    return typeof(Model);
                case Door_FieldIndex.Script:
                    return typeof(IFormIDSetLink<Script>);
                case Door_FieldIndex.OpenSound:
                    return typeof(IFormIDSetLink<Sound>);
                case Door_FieldIndex.CloseSound:
                    return typeof(IFormIDSetLink<Sound>);
                case Door_FieldIndex.LoopSound:
                    return typeof(IFormIDSetLink<Sound>);
                case Door_FieldIndex.Flags:
                    return typeof(Door.DoorFlag);
                case Door_FieldIndex.RandomTeleportDestinations:
                    return typeof(ISetList<IFormIDLink<Place>>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(DoorXmlWriteTranslation);
        public static readonly RecordType DOOR_HEADER = new RecordType("DOOR");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType BNAM_HEADER = new RecordType("BNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = DOOR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 8;
        public static readonly Type BinaryWriteTranslation = typeof(DoorBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class DoorSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly DoorSetterCommon Instance = new DoorSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDoorInternal item)
        {
            ClearPartial();
            item.Name_Unset();
            item.Model_Unset();
            item.Script.Unset();
            item.OpenSound.Unset();
            item.CloseSound.Unset();
            item.LoopSound.Unset();
            item.Flags_Unset();
            item.RandomTeleportDestinations.Unset();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IDoorInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDoorInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IDoorInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public new void CopyInFromXml(
            IDoorInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    DoorXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Door_Registration.DOOR_HEADER;
        protected static void FillBinaryStructs(
            IDoorInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IDoorInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    try
                    {
                        errorMask?.PushIndex((int)Door_FieldIndex.Model);
                        item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Model);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: out FormKey ScriptParse))
                    {
                        item.Script.FormKey = ScriptParse;
                    }
                    else
                    {
                        item.Script.FormKey = FormKey.NULL;
                    }
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Script);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: out FormKey OpenSoundParse))
                    {
                        item.OpenSound.FormKey = OpenSoundParse;
                    }
                    else
                    {
                        item.OpenSound.FormKey = FormKey.NULL;
                    }
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.OpenSound);
                }
                case 0x4D414E41: // ANAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: out FormKey CloseSoundParse))
                    {
                        item.CloseSound.FormKey = CloseSoundParse;
                    }
                    else
                    {
                        item.CloseSound.FormKey = FormKey.NULL;
                    }
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.CloseSound);
                }
                case 0x4D414E42: // BNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: out FormKey LoopSoundParse))
                    {
                        item.LoopSound.FormKey = LoopSoundParse;
                    }
                    else
                    {
                        item.LoopSound.FormKey = FormKey.NULL;
                    }
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.LoopSound);
                }
                case 0x4D414E46: // FNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (EnumBinaryTranslation<Door.DoorFlag>.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Door.DoorFlag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(Door.DoorFlag);
                    }
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Flags);
                }
                case 0x4D414E54: // TNAM
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLink<Place>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Door_Registration.TNAM_HEADER,
                        masterReferences: masterReferences,
                        item: item.RandomTeleportDestinations,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.RandomTeleportDestinations);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }
        
        public new void CopyInFromBinary(
            IDoorInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.MajorRecordParse<IDoorInternal>(
                record: item,
                frame: frame,
                errorMask: errorMask,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class DoorCommon : OblivionMajorRecordCommon
    {
        public new static readonly DoorCommon Instance = new DoorCommon();

        public Door_Mask<bool> GetEqualsMask(
            IDoorGetter item,
            IDoorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Door_Mask<bool>();
            ((DoorCommon)((IDoorGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDoorGetter item,
            IDoorGetter rhs,
            Door_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Script = object.Equals(item.Script, rhs.Script);
            ret.OpenSound = object.Equals(item.OpenSound, rhs.OpenSound);
            ret.CloseSound = object.Equals(item.CloseSound, rhs.CloseSound);
            ret.LoopSound = object.Equals(item.LoopSound, rhs.LoopSound);
            ret.Flags = item.Flags_IsSet == rhs.Flags_IsSet && item.Flags == rhs.Flags;
            ret.RandomTeleportDestinations = item.RandomTeleportDestinations.CollectionEqualsHelper(
                rhs.RandomTeleportDestinations,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IDoorGetter item,
            string name = null,
            Door_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDoorGetter item,
            FileGeneration fg,
            string name = null,
            Door_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Door =>");
            }
            else
            {
                fg.AppendLine($"{name} (Door) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDoorGetter item,
            FileGeneration fg,
            Door_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendLine($"Script => {item.Script}");
            }
            if (printMask?.OpenSound ?? true)
            {
                fg.AppendLine($"OpenSound => {item.OpenSound}");
            }
            if (printMask?.CloseSound ?? true)
            {
                fg.AppendLine($"CloseSound => {item.CloseSound}");
            }
            if (printMask?.LoopSound ?? true)
            {
                fg.AppendLine($"LoopSound => {item.LoopSound}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.RandomTeleportDestinations?.Overall ?? true)
            {
                fg.AppendLine("RandomTeleportDestinations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.RandomTeleportDestinations)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IDoorGetter item,
            Door_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script.HasBeenSet) return false;
            if (checkMask.OpenSound.HasValue && checkMask.OpenSound.Value != item.OpenSound.HasBeenSet) return false;
            if (checkMask.CloseSound.HasValue && checkMask.CloseSound.Value != item.CloseSound.HasBeenSet) return false;
            if (checkMask.LoopSound.HasValue && checkMask.LoopSound.Value != item.LoopSound.HasBeenSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_IsSet) return false;
            if (checkMask.RandomTeleportDestinations.Overall.HasValue && checkMask.RandomTeleportDestinations.Overall.Value != item.RandomTeleportDestinations.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IDoorGetter item,
            Door_Mask<bool> mask)
        {
            mask.Name = item.Name_IsSet;
            mask.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, item.Model.GetHasBeenSetMask());
            mask.Script = item.Script.HasBeenSet;
            mask.OpenSound = item.OpenSound.HasBeenSet;
            mask.CloseSound = item.CloseSound.HasBeenSet;
            mask.LoopSound = item.LoopSound.HasBeenSet;
            mask.Flags = item.Flags_IsSet;
            mask.RandomTeleportDestinations = new MaskItem<bool, IEnumerable<(int, bool)>>(item.RandomTeleportDestinations.HasBeenSet, null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Door_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Door_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Door_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Door_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Door_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Door_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static Door_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Door_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Door_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Door_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Door_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDoorGetter lhs,
            IDoorGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Name_IsSet != rhs.Name_IsSet) return false;
            if (lhs.Name_IsSet)
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if (lhs.Model_IsSet != rhs.Model_IsSet) return false;
            if (lhs.Model_IsSet)
            {
                if (!object.Equals(lhs.Model, rhs.Model)) return false;
            }
            if (lhs.Script.HasBeenSet != rhs.Script.HasBeenSet) return false;
            if (lhs.Script.HasBeenSet)
            {
                if (!lhs.Script.Equals(rhs.Script)) return false;
            }
            if (lhs.OpenSound.HasBeenSet != rhs.OpenSound.HasBeenSet) return false;
            if (lhs.OpenSound.HasBeenSet)
            {
                if (!lhs.OpenSound.Equals(rhs.OpenSound)) return false;
            }
            if (lhs.CloseSound.HasBeenSet != rhs.CloseSound.HasBeenSet) return false;
            if (lhs.CloseSound.HasBeenSet)
            {
                if (!lhs.CloseSound.Equals(rhs.CloseSound)) return false;
            }
            if (lhs.LoopSound.HasBeenSet != rhs.LoopSound.HasBeenSet) return false;
            if (lhs.LoopSound.HasBeenSet)
            {
                if (!lhs.LoopSound.Equals(rhs.LoopSound)) return false;
            }
            if (lhs.Flags_IsSet != rhs.Flags_IsSet) return false;
            if (lhs.Flags_IsSet)
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if (lhs.RandomTeleportDestinations.HasBeenSet != rhs.RandomTeleportDestinations.HasBeenSet) return false;
            if (lhs.RandomTeleportDestinations.HasBeenSet)
            {
                if (!lhs.RandomTeleportDestinations.SequenceEqual(rhs.RandomTeleportDestinations)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter lhs,
            IOblivionMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IDoorGetter)lhs,
                rhs: rhs as IDoorGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IDoorGetter)lhs,
                rhs: rhs as IDoorGetter);
        }
        
        public virtual int GetHashCode(IDoorGetter item)
        {
            int ret = 0;
            if (item.Name_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            }
            if (item.Model_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Model).CombineHashCode(ret);
            }
            if (item.Script.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Script).CombineHashCode(ret);
            }
            if (item.OpenSound.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.OpenSound).CombineHashCode(ret);
            }
            if (item.CloseSound.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.CloseSound).CombineHashCode(ret);
            }
            if (item.LoopSound.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.LoopSound).CombineHashCode(ret);
            }
            if (item.Flags_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            }
            if (item.RandomTeleportDestinations.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.RandomTeleportDestinations).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IDoorGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDoorGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Door.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IDoorGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Script;
            yield return obj.OpenSound;
            yield return obj.CloseSound;
            yield return obj.LoopSound;
            foreach (var item in obj.RandomTeleportDestinations)
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(Door obj, Door rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Door(getNextFormKey());
            ret.DeepCopyFieldsFrom((Door)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Door)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class DoorSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly DoorSetterTranslationCommon Instance = new DoorSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IDoorInternal item,
            IDoorGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyFieldsFrom(
            IDoor item,
            IDoorGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.Name) ?? true))
            {
                errorMask?.PushIndex((int)Door_FieldIndex.Name);
                try
                {
                    if (rhs.Name_IsSet)
                    {
                        item.Name = rhs.Name;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Door_FieldIndex.Model);
                try
                {
                    if(rhs.Model_IsSet)
                    {
                        item.Model = rhs.Model.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Door_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.Script) ?? true))
            {
                errorMask?.PushIndex((int)Door_FieldIndex.Script);
                try
                {
                    item.Script.SetToFormKey(rhs: rhs.Script);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.OpenSound) ?? true))
            {
                errorMask?.PushIndex((int)Door_FieldIndex.OpenSound);
                try
                {
                    item.OpenSound.SetToFormKey(rhs: rhs.OpenSound);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.CloseSound) ?? true))
            {
                errorMask?.PushIndex((int)Door_FieldIndex.CloseSound);
                try
                {
                    item.CloseSound.SetToFormKey(rhs: rhs.CloseSound);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.LoopSound) ?? true))
            {
                errorMask?.PushIndex((int)Door_FieldIndex.LoopSound);
                try
                {
                    item.LoopSound.SetToFormKey(rhs: rhs.LoopSound);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.Flags) ?? true))
            {
                errorMask?.PushIndex((int)Door_FieldIndex.Flags);
                try
                {
                    if (rhs.Flags_IsSet)
                    {
                        item.Flags = rhs.Flags;
                    }
                    else
                    {
                        item.Flags_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.RandomTeleportDestinations) ?? true))
            {
                errorMask?.PushIndex((int)Door_FieldIndex.RandomTeleportDestinations);
                try
                {
                    item.RandomTeleportDestinations.SetTo(
                        rhs.RandomTeleportDestinations,
                        (r) => new FormIDLink<Place>(r.FormKey));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IDoorInternal)item,
                rhs: (IDoorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IDoor)item,
                rhs: (IDoorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IDoorInternal)item,
                rhs: (IDoorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IDoor)item,
                rhs: (IDoorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Door DeepCopy(
            IDoorGetter item,
            Door_TranslationMask copyMask = null)
        {
            Door ret = (Door)((DoorCommon)((IDoorGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Door DeepCopy(
            IDoorGetter item,
            out Door_ErrorMask errorMask,
            Door_TranslationMask copyMask = null)
        {
            Door ret = (Door)((DoorCommon)((IDoorGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Door DeepCopy(
            IDoorGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            Door ret = (Door)((DoorCommon)((IDoorGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Door
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Door_Registration.Instance;
        public new static Door_Registration Registration => Door_Registration.Instance;
        protected override object CommonInstance() => DoorCommon.Instance;
        protected override object CommonSetterInstance()
        {
            return DoorSetterCommon.Instance;
        }
        protected override object CommonSetterTranslationInstance() => DoorSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DoorXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static DoorXmlWriteTranslation Instance = new DoorXmlWriteTranslation();

        public static void WriteToNodeXml(
            IDoorGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Door_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.Model) ?? true))
            {
                var loquiItem = item.Model;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)Door_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Door_FieldIndex.Model));
            }
            if (item.Script.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script?.FormKey,
                    fieldIndex: (int)Door_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.OpenSound.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.OpenSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.OpenSound),
                    item: item.OpenSound?.FormKey,
                    fieldIndex: (int)Door_FieldIndex.OpenSound,
                    errorMask: errorMask);
            }
            if (item.CloseSound.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.CloseSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CloseSound),
                    item: item.CloseSound?.FormKey,
                    fieldIndex: (int)Door_FieldIndex.CloseSound,
                    errorMask: errorMask);
            }
            if (item.LoopSound.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.LoopSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LoopSound),
                    item: item.LoopSound?.FormKey,
                    fieldIndex: (int)Door_FieldIndex.LoopSound,
                    errorMask: errorMask);
            }
            if (item.Flags_IsSet
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Door.DoorFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Door_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.RandomTeleportDestinations.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.RandomTeleportDestinations) ?? true))
            {
                ListXmlTranslation<IFormIDLinkGetter<IPlaceGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.RandomTeleportDestinations),
                    item: item.RandomTeleportDestinations,
                    fieldIndex: (int)Door_FieldIndex.RandomTeleportDestinations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Door_FieldIndex.RandomTeleportDestinations),
                    transl: (XElement subNode, IFormIDLinkGetter<IPlaceGetter> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IDoorGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Door");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Door");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IDoorGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IDoorGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IDoorGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class DoorXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static DoorXmlCreateTranslation Instance = new DoorXmlCreateTranslation();

        public static void FillPublicXml(
            IDoorInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DoorXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IDoorInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Door_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Door_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Door_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    try
                    {
                        errorMask?.PushIndex((int)Door_FieldIndex.Script);
                        if (FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out FormKey ScriptParse,
                            errorMask: errorMask))
                        {
                            item.Script.FormKey = ScriptParse;
                        }
                        else
                        {
                            item.Script.FormKey = FormKey.NULL;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OpenSound":
                    try
                    {
                        errorMask?.PushIndex((int)Door_FieldIndex.OpenSound);
                        if (FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out FormKey OpenSoundParse,
                            errorMask: errorMask))
                        {
                            item.OpenSound.FormKey = OpenSoundParse;
                        }
                        else
                        {
                            item.OpenSound.FormKey = FormKey.NULL;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CloseSound":
                    try
                    {
                        errorMask?.PushIndex((int)Door_FieldIndex.CloseSound);
                        if (FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out FormKey CloseSoundParse,
                            errorMask: errorMask))
                        {
                            item.CloseSound.FormKey = CloseSoundParse;
                        }
                        else
                        {
                            item.CloseSound.FormKey = FormKey.NULL;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LoopSound":
                    try
                    {
                        errorMask?.PushIndex((int)Door_FieldIndex.LoopSound);
                        if (FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out FormKey LoopSoundParse,
                            errorMask: errorMask))
                        {
                            item.LoopSound.FormKey = LoopSoundParse;
                        }
                        else
                        {
                            item.LoopSound.FormKey = FormKey.NULL;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Door_FieldIndex.Flags);
                        if (EnumXmlTranslation<Door.DoorFlag>.Instance.Parse(
                            node: node,
                            item: out Door.DoorFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Door.DoorFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RandomTeleportDestinations":
                    try
                    {
                        errorMask?.PushIndex((int)Door_FieldIndex.RandomTeleportDestinations);
                        if (ListXmlTranslation<IFormIDLink<Place>>.Instance.Parse(
                            node: node,
                            enumer: out var RandomTeleportDestinationsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.RandomTeleportDestinations.SetTo(RandomTeleportDestinationsItem);
                        }
                        else
                        {
                            item.RandomTeleportDestinations.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class DoorXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IDoorGetter item,
            XElement node,
            out Door_ErrorMask errorMask,
            bool doMasks = true,
            Door_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((DoorXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IDoorGetter item,
            string path,
            out Door_ErrorMask errorMask,
            Door_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDoorGetter item,
            Stream stream,
            out Door_ErrorMask errorMask,
            Door_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class Door_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Door_Mask<T>>
    {
        #region Ctors
        public Door_Mask()
        {
        }

        public Door_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Script = initialValue;
            this.OpenSound = initialValue;
            this.CloseSound = initialValue;
            this.LoopSound = initialValue;
            this.Flags = initialValue;
            this.RandomTeleportDestinations = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Name;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Script;
        public T OpenSound;
        public T CloseSound;
        public T LoopSound;
        public T Flags;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> RandomTeleportDestinations;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Door_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Door_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.OpenSound, rhs.OpenSound)) return false;
            if (!object.Equals(this.CloseSound, rhs.CloseSound)) return false;
            if (!object.Equals(this.LoopSound, rhs.LoopSound)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.RandomTeleportDestinations, rhs.RandomTeleportDestinations)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.OpenSound?.GetHashCode());
            ret = ret.CombineHashCode(this.CloseSound?.GetHashCode());
            ret = ret.CombineHashCode(this.LoopSound?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.RandomTeleportDestinations?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Script)) return false;
            if (!eval(this.OpenSound)) return false;
            if (!eval(this.CloseSound)) return false;
            if (!eval(this.LoopSound)) return false;
            if (!eval(this.Flags)) return false;
            if (this.RandomTeleportDestinations != null)
            {
                if (!eval(this.RandomTeleportDestinations.Overall)) return false;
                if (this.RandomTeleportDestinations.Specific != null)
                {
                    foreach (var item in this.RandomTeleportDestinations.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Door_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Door_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Door_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Script = eval(this.Script);
            obj.OpenSound = eval(this.OpenSound);
            obj.CloseSound = eval(this.CloseSound);
            obj.LoopSound = eval(this.LoopSound);
            obj.Flags = eval(this.Flags);
            if (RandomTeleportDestinations != null)
            {
                obj.RandomTeleportDestinations = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.RandomTeleportDestinations.Overall = eval(this.RandomTeleportDestinations.Overall);
                if (RandomTeleportDestinations.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.RandomTeleportDestinations.Specific = l;
                    foreach (var item in RandomTeleportDestinations.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.RandomTeleportDestinations.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Door_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Door_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Door_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.OpenSound ?? true)
                {
                    fg.AppendLine($"OpenSound => {OpenSound}");
                }
                if (printMask?.CloseSound ?? true)
                {
                    fg.AppendLine($"CloseSound => {CloseSound}");
                }
                if (printMask?.LoopSound ?? true)
                {
                    fg.AppendLine($"LoopSound => {LoopSound}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.RandomTeleportDestinations?.Overall ?? true)
                {
                    fg.AppendLine("RandomTeleportDestinations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RandomTeleportDestinations.Overall != null)
                        {
                            fg.AppendLine(RandomTeleportDestinations.Overall.ToString());
                        }
                        if (RandomTeleportDestinations.Specific != null)
                        {
                            foreach (var subItem in RandomTeleportDestinations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Door_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Door_ErrorMask>
    {
        #region Members
        public Exception Name;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Script;
        public Exception OpenSound;
        public Exception CloseSound;
        public Exception LoopSound;
        public Exception Flags;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> RandomTeleportDestinations;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    return Name;
                case Door_FieldIndex.Model:
                    return Model;
                case Door_FieldIndex.Script:
                    return Script;
                case Door_FieldIndex.OpenSound:
                    return OpenSound;
                case Door_FieldIndex.CloseSound:
                    return CloseSound;
                case Door_FieldIndex.LoopSound:
                    return LoopSound;
                case Door_FieldIndex.Flags:
                    return Flags;
                case Door_FieldIndex.RandomTeleportDestinations:
                    return RandomTeleportDestinations;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Door_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Door_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Door_FieldIndex.OpenSound:
                    this.OpenSound = ex;
                    break;
                case Door_FieldIndex.CloseSound:
                    this.CloseSound = ex;
                    break;
                case Door_FieldIndex.LoopSound:
                    this.LoopSound = ex;
                    break;
                case Door_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Door_FieldIndex.RandomTeleportDestinations:
                    this.RandomTeleportDestinations = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Door_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Door_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Door_FieldIndex.OpenSound:
                    this.OpenSound = (Exception)obj;
                    break;
                case Door_FieldIndex.CloseSound:
                    this.CloseSound = (Exception)obj;
                    break;
                case Door_FieldIndex.LoopSound:
                    this.LoopSound = (Exception)obj;
                    break;
                case Door_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Door_FieldIndex.RandomTeleportDestinations:
                    this.RandomTeleportDestinations = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Model != null) return true;
            if (Script != null) return true;
            if (OpenSound != null) return true;
            if (CloseSound != null) return true;
            if (LoopSound != null) return true;
            if (Flags != null) return true;
            if (RandomTeleportDestinations != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Door_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            Model?.ToString(fg);
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"OpenSound => {OpenSound}");
            fg.AppendLine($"CloseSound => {CloseSound}");
            fg.AppendLine($"LoopSound => {LoopSound}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine("RandomTeleportDestinations =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (RandomTeleportDestinations.Overall != null)
                {
                    fg.AppendLine(RandomTeleportDestinations.Overall.ToString());
                }
                if (RandomTeleportDestinations.Specific != null)
                {
                    foreach (var subItem in RandomTeleportDestinations.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Door_ErrorMask Combine(Door_ErrorMask rhs)
        {
            var ret = new Door_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Script = this.Script.Combine(rhs.Script);
            ret.OpenSound = this.OpenSound.Combine(rhs.OpenSound);
            ret.CloseSound = this.CloseSound.Combine(rhs.CloseSound);
            ret.LoopSound = this.LoopSound.Combine(rhs.LoopSound);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.RandomTeleportDestinations = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.RandomTeleportDestinations.Overall.Combine(rhs.RandomTeleportDestinations.Overall), new List<(int Index, Exception Value)>(this.RandomTeleportDestinations.Specific.And(rhs.RandomTeleportDestinations.Specific)));
            return ret;
        }
        public static Door_ErrorMask Combine(Door_ErrorMask lhs, Door_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Door_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Door_ErrorMask();
        }
        #endregion

    }
    public class Door_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Name;
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Script;
        public bool OpenSound;
        public bool CloseSound;
        public bool LoopSound;
        public bool Flags;
        public bool RandomTeleportDestinations;
        #endregion

        #region Ctors
        public Door_TranslationMask()
            : base()
        {
        }

        public Door_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.Script = defaultOn;
            this.OpenSound = defaultOn;
            this.CloseSound = defaultOn;
            this.LoopSound = defaultOn;
            this.Flags = defaultOn;
            this.RandomTeleportDestinations = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Script, null));
            ret.Add((OpenSound, null));
            ret.Add((CloseSound, null));
            ret.Add((LoopSound, null));
            ret.Add((Flags, null));
            ret.Add((RandomTeleportDestinations, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DoorBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static DoorBinaryWriteTranslation Instance = new DoorBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IDoorGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(Door_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Model_IsSet)
            {
                var loquiItem = item.Model;
                ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Script.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Script,
                    header: recordTypeConverter.ConvertToCustom(Door_Registration.SCRI_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.OpenSound.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.OpenSound,
                    header: recordTypeConverter.ConvertToCustom(Door_Registration.SNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.CloseSound.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CloseSound,
                    header: recordTypeConverter.ConvertToCustom(Door_Registration.ANAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.LoopSound.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LoopSound,
                    header: recordTypeConverter.ConvertToCustom(Door_Registration.BNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Flags_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Door.DoorFlag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1,
                    header: recordTypeConverter.ConvertToCustom(Door_Registration.FNAM_HEADER),
                    nullable: false);
            }
            if (item.RandomTeleportDestinations.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLinkGetter<IPlaceGetter>>.Instance.Write(
                    writer: writer,
                    items: item.RandomTeleportDestinations,
                    transl: (MutagenWriter subWriter, IFormIDLinkGetter<IPlaceGetter> subItem) =>
                    {
                        Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            header: recordTypeConverter.ConvertToCustom(Door_Registration.TNAM_HEADER),
                            nullable: false,
                            masterReferences: masterReferences);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IDoorGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Door_Registration.DOOR_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IDoorGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IDoorGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IDoorGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class DoorBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static DoorBinaryCreateTranslation Instance = new DoorBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class DoorBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDoorGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Door_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((DoorBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DoorBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        IDoorGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Door_Registration.Instance;
        public new static Door_Registration Registration => Door_Registration.Instance;
        protected override object CommonInstance() => DoorCommon.Instance;
        protected override object CommonSetterTranslationInstance() => DoorSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDoorGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => DoorCommon.Instance.GetLinks(this);
        protected override object XmlWriteTranslator => DoorXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((DoorXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => DoorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((DoorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Name
        private int? _NameLocation;
        public bool Name_IsSet => _NameLocation.HasValue;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default;
        #endregion
        #region Model
        public IModelGetter Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormIDSetLinkGetter<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormIDSetLink<IScriptGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormIDSetLink<IScriptGetter>.Empty;
        #endregion
        #region OpenSound
        private int? _OpenSoundLocation;
        public bool OpenSound_IsSet => _OpenSoundLocation.HasValue;
        public IFormIDSetLinkGetter<ISoundGetter> OpenSound => _OpenSoundLocation.HasValue ? new FormIDSetLink<ISoundGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _OpenSoundLocation.Value, _package.Meta)))) : FormIDSetLink<ISoundGetter>.Empty;
        #endregion
        #region CloseSound
        private int? _CloseSoundLocation;
        public bool CloseSound_IsSet => _CloseSoundLocation.HasValue;
        public IFormIDSetLinkGetter<ISoundGetter> CloseSound => _CloseSoundLocation.HasValue ? new FormIDSetLink<ISoundGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _CloseSoundLocation.Value, _package.Meta)))) : FormIDSetLink<ISoundGetter>.Empty;
        #endregion
        #region LoopSound
        private int? _LoopSoundLocation;
        public bool LoopSound_IsSet => _LoopSoundLocation.HasValue;
        public IFormIDSetLinkGetter<ISoundGetter> LoopSound => _LoopSoundLocation.HasValue ? new FormIDSetLink<ISoundGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _LoopSoundLocation.Value, _package.Meta)))) : FormIDSetLink<ISoundGetter>.Empty;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public bool Flags_IsSet => _FlagsLocation.HasValue;
        public Door.DoorFlag Flags => (Door.DoorFlag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation.Value, _package.Meta)[0];
        #endregion
        public IReadOnlySetList<IFormIDLinkGetter<IPlaceGetter>> RandomTeleportDestinations { get; private set; } = EmptySetList<IFormIDLinkGetter<IPlaceGetter>>.Instance;
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected DoorBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static DoorBinaryWrapper DoorFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new DoorBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryWrapper.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Model);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Script);
                }
                case 0x4D414E53: // SNAM
                {
                    _OpenSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.OpenSound);
                }
                case 0x4D414E41: // ANAM
                {
                    _CloseSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.CloseSound);
                }
                case 0x4D414E42: // BNAM
                {
                    _LoopSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.LoopSound);
                }
                case 0x4D414E46: // FNAM
                {
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Flags);
                }
                case 0x4D414E54: // TNAM
                {
                    this.RandomTeleportDestinations = BinaryWrapperSetList<IFormIDLinkGetter<IPlaceGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormIDLink<IPlaceGetter>(FormKey.Factory(p.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.RandomTeleportDestinations);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

