/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Enchantment :
        OblivionMajorRecord,
        IEnchantmentInternal,
        ILoquiObjectSetter<Enchantment>,
        INamed,
        IEquatable<Enchantment>,
        IEqualsMask
    {
        #region Ctor
        protected Enchantment()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IEnchantmentGetter.Name => this.Name;
        #endregion
        #region Type
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Enchantment.EnchantmentType _Type;
        public Enchantment.EnchantmentType Type
        {
            get => this._Type;
            set
            {
                this.ENITDataTypeState |= ENITDataType.Has;
                this._Type = value;
            }
        }
        #endregion
        #region ChargeAmount
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _ChargeAmount;
        public UInt32 ChargeAmount
        {
            get => this._ChargeAmount;
            set
            {
                this.ENITDataTypeState |= ENITDataType.Has;
                this._ChargeAmount = value;
            }
        }
        #endregion
        #region EnchantCost
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _EnchantCost;
        public UInt32 EnchantCost
        {
            get => this._EnchantCost;
            set
            {
                this.ENITDataTypeState |= ENITDataType.Has;
                this._EnchantCost = value;
            }
        }
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Enchantment.Flag _Flags;
        public Enchantment.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.ENITDataTypeState |= ENITDataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<Effect> _Effects = new SetList<Effect>();
        public ISetList<Effect> Effects => _Effects;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<Effect> IEnchantment.Effects => _Effects;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IEffectGetter> IEnchantmentGetter.Effects => _Effects;
        #endregion

        #endregion
        #region ENITDataTypeState
        public Enchantment.ENITDataType ENITDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            EnchantmentMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IEnchantmentGetter rhs)) return false;
            return ((EnchantmentCommon)((IEnchantmentGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Enchantment obj)
        {
            return ((EnchantmentCommon)((IEnchantmentGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((EnchantmentCommon)((IEnchantmentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => EnchantmentXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((EnchantmentXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Enchantment CreateFromXml(
            XElement node,
            Enchantment.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Enchantment CreateFromXml(
            XElement node,
            out Enchantment.ErrorMask errorMask,
            Enchantment.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Enchantment.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Enchantment CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Enchantment();
            ((EnchantmentSetterCommon)((IEnchantmentGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Enchantment CreateFromXml(
            string path,
            Enchantment.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Enchantment CreateFromXml(
            string path,
            out Enchantment.ErrorMask errorMask,
            Enchantment.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Enchantment CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Enchantment.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Enchantment CreateFromXml(
            Stream stream,
            Enchantment.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Enchantment CreateFromXml(
            Stream stream,
            out Enchantment.ErrorMask errorMask,
            Enchantment.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Enchantment CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Enchantment.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            OblivionMajorRecord.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Type = initialValue;
                this.ChargeAmount = initialValue;
                this.EnchantCost = initialValue;
                this.Flags = initialValue;
                this.Effects = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Effect.Mask<T>?>>>(initialValue, Enumerable.Empty<MaskItemIndexed<T, Effect.Mask<T>?>>());
                this.ENITDataTypeState = initialValue;
            }

            public Mask(
                T MajorRecordFlagsRaw,
                T FormKey,
                T Version,
                T EditorID,
                T OblivionMajorRecordFlags,
                T Name,
                T Type,
                T ChargeAmount,
                T EnchantCost,
                T Flags,
                T Effects,
                T ENITDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Type = Type;
                this.ChargeAmount = ChargeAmount;
                this.EnchantCost = EnchantCost;
                this.Flags = Flags;
                this.Effects = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Effect.Mask<T>?>>>(Effects, Enumerable.Empty<MaskItemIndexed<T, Effect.Mask<T>?>>());
                this.ENITDataTypeState = ENITDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T Name;
            public T Type;
            public T ChargeAmount;
            public T EnchantCost;
            public T Flags;
            public MaskItem<T, IEnumerable<MaskItemIndexed<T, Effect.Mask<T>?>>>? Effects;
            public T ENITDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.ChargeAmount, rhs.ChargeAmount)) return false;
                if (!object.Equals(this.EnchantCost, rhs.EnchantCost)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Effects, rhs.Effects)) return false;
                if (!object.Equals(this.ENITDataTypeState, rhs.ENITDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Name?.GetHashCode());
                ret = ret.CombineHashCode(this.Type?.GetHashCode());
                ret = ret.CombineHashCode(this.ChargeAmount?.GetHashCode());
                ret = ret.CombineHashCode(this.EnchantCost?.GetHashCode());
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.Effects?.GetHashCode());
                ret = ret.CombineHashCode(this.ENITDataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<T, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.ChargeAmount)) return false;
                if (!eval(this.EnchantCost)) return false;
                if (!eval(this.Flags)) return false;
                if (this.Effects != null)
                {
                    if (!eval(this.Effects.Overall)) return false;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.ENITDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<T, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.ChargeAmount)) return true;
                if (eval(this.EnchantCost)) return true;
                if (eval(this.Flags)) return true;
                if (this.Effects != null)
                {
                    if (eval(this.Effects.Overall)) return true;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.ENITDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new Enchantment.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Type = eval(this.Type);
                obj.ChargeAmount = eval(this.ChargeAmount);
                obj.EnchantCost = eval(this.EnchantCost);
                obj.Flags = eval(this.Flags);
                if (Effects != null)
                {
                    obj.Effects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Effect.Mask<R>?>>>(eval(this.Effects.Overall), Enumerable.Empty<MaskItemIndexed<R, Effect.Mask<R>?>>());
                    if (Effects.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Effect.Mask<R>?>>();
                        obj.Effects.Specific = l;
                        foreach (var item in Effects.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Effect.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Effect.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ENITDataTypeState = eval(this.ENITDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Enchantment.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Enchantment.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Enchantment.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendLine($"Name => {Name}");
                    }
                    if (printMask?.Type ?? true)
                    {
                        fg.AppendLine($"Type => {Type}");
                    }
                    if (printMask?.ChargeAmount ?? true)
                    {
                        fg.AppendLine($"ChargeAmount => {ChargeAmount}");
                    }
                    if (printMask?.EnchantCost ?? true)
                    {
                        fg.AppendLine($"EnchantCost => {EnchantCost}");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendLine($"Flags => {Flags}");
                    }
                    if (printMask?.Effects?.Overall ?? true)
                    {
                        fg.AppendLine("Effects =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Effects != null)
                            {
                                if (Effects.Overall != null)
                                {
                                    fg.AppendLine(Effects.Overall.ToString());
                                }
                                if (Effects.Specific != null)
                                {
                                    foreach (var subItem in Effects.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            subItem?.ToString(fg);
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.ENITDataTypeState ?? true)
                    {
                        fg.AppendLine($"ENITDataTypeState => {ENITDataTypeState}");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Type;
            public Exception? ChargeAmount;
            public Exception? EnchantCost;
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>? Effects;
            public Exception? ENITDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
                switch (enu)
                {
                    case Enchantment_FieldIndex.Name:
                        return Name;
                    case Enchantment_FieldIndex.Type:
                        return Type;
                    case Enchantment_FieldIndex.ChargeAmount:
                        return ChargeAmount;
                    case Enchantment_FieldIndex.EnchantCost:
                        return EnchantCost;
                    case Enchantment_FieldIndex.Flags:
                        return Flags;
                    case Enchantment_FieldIndex.Effects:
                        return Effects;
                    case Enchantment_FieldIndex.ENITDataTypeState:
                        return ENITDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
                switch (enu)
                {
                    case Enchantment_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Enchantment_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case Enchantment_FieldIndex.ChargeAmount:
                        this.ChargeAmount = ex;
                        break;
                    case Enchantment_FieldIndex.EnchantCost:
                        this.EnchantCost = ex;
                        break;
                    case Enchantment_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Enchantment_FieldIndex.Effects:
                        this.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ex, null);
                        break;
                    case Enchantment_FieldIndex.ENITDataTypeState:
                        this.ENITDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
                switch (enu)
                {
                    case Enchantment_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Enchantment_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case Enchantment_FieldIndex.ChargeAmount:
                        this.ChargeAmount = (Exception?)obj;
                        break;
                    case Enchantment_FieldIndex.EnchantCost:
                        this.EnchantCost = (Exception?)obj;
                        break;
                    case Enchantment_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Enchantment_FieldIndex.Effects:
                        this.Effects = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>)obj;
                        break;
                    case Enchantment_FieldIndex.ENITDataTypeState:
                        this.ENITDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Type != null) return true;
                if (ChargeAmount != null) return true;
                if (EnchantCost != null) return true;
                if (Flags != null) return true;
                if (Effects != null) return true;
                if (ENITDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendLine($"Name => {Name}");
                fg.AppendLine($"Type => {Type}");
                fg.AppendLine($"ChargeAmount => {ChargeAmount}");
                fg.AppendLine($"EnchantCost => {EnchantCost}");
                fg.AppendLine($"Flags => {Flags}");
                fg.AppendLine("Effects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Effects != null)
                    {
                        if (Effects.Overall != null)
                        {
                            fg.AppendLine(Effects.Overall.ToString());
                        }
                        if (Effects.Specific != null)
                        {
                            foreach (var subItem in Effects.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine($"ENITDataTypeState => {ENITDataTypeState}");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.ChargeAmount = this.ChargeAmount.Combine(rhs.ChargeAmount);
                ret.EnchantCost = this.EnchantCost.Combine(rhs.EnchantCost);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ExceptionExt.Combine(this.Effects?.Overall, rhs.Effects?.Overall), ExceptionExt.Combine(this.Effects?.Specific, rhs.Effects?.Specific));
                ret.ENITDataTypeState = this.ENITDataTypeState.Combine(rhs.ENITDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Type;
            public bool ChargeAmount;
            public bool EnchantCost;
            public bool Flags;
            public MaskItem<bool, Effect.TranslationMask?> Effects;
            public bool ENITDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Type = defaultOn;
                this.ChargeAmount = defaultOn;
                this.EnchantCost = defaultOn;
                this.Flags = defaultOn;
                this.Effects = new MaskItem<bool, Effect.TranslationMask?>(defaultOn, null);
                this.ENITDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Type, null));
                ret.Add((ChargeAmount, null));
                ret.Add((EnchantCost, null));
                ret.Add((Flags, null));
                ret.Add((Effects?.Overall ?? true, Effects?.Specific?.GetCrystal()));
                ret.Add((ENITDataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Enchantment_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum ENITDataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => EnchantmentCommon.Instance.GetLinks(this);
        public Enchantment(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Enchantment(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => EnchantmentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((EnchantmentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Enchantment CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Enchantment CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new Enchantment();
            ((EnchantmentSetterCommon)((IEnchantmentGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IEnchantmentGetter)rhs, include);

        void IClearable.Clear()
        {
            ((EnchantmentSetterCommon)((IEnchantmentGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Enchantment GetNew()
        {
            return new Enchantment();
        }

    }
    #endregion

    #region Interface
    public partial interface IEnchantment :
        IEnchantmentGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IEnchantmentInternal>
    {
        new String? Name { get; set; }
        new Enchantment.EnchantmentType Type { get; set; }
        new UInt32 ChargeAmount { get; set; }
        new UInt32 EnchantCost { get; set; }
        new Enchantment.Flag Flags { get; set; }
        new ISetList<Effect> Effects { get; }
        new Enchantment.ENITDataType ENITDataTypeState { get; set; }
    }

    public partial interface IEnchantmentInternal :
        IOblivionMajorRecordInternal,
        IEnchantment,
        IEnchantmentGetter
    {
    }

    public partial interface IEnchantmentGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IEnchantmentGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Name { get; }
        Enchantment.EnchantmentType Type { get; }
        UInt32 ChargeAmount { get; }
        UInt32 EnchantCost { get; }
        Enchantment.Flag Flags { get; }
        IReadOnlySetList<IEffectGetter> Effects { get; }
        Enchantment.ENITDataType ENITDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class EnchantmentMixIn
    {
        public static void Clear(this IEnchantmentInternal item)
        {
            ((EnchantmentSetterCommon)((IEnchantmentGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Enchantment.Mask<bool> GetEqualsMask(
            this IEnchantmentGetter item,
            IEnchantmentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((EnchantmentCommon)((IEnchantmentGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IEnchantmentGetter item,
            string? name = null,
            Enchantment.Mask<bool>? printMask = null)
        {
            return ((EnchantmentCommon)((IEnchantmentGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IEnchantmentGetter item,
            FileGeneration fg,
            string? name = null,
            Enchantment.Mask<bool>? printMask = null)
        {
            ((EnchantmentCommon)((IEnchantmentGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IEnchantmentGetter item,
            Enchantment.Mask<bool?> checkMask)
        {
            return ((EnchantmentCommon)((IEnchantmentGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Enchantment.Mask<bool> GetHasBeenSetMask(this IEnchantmentGetter item)
        {
            var ret = new Enchantment.Mask<bool>(false);
            ((EnchantmentCommon)((IEnchantmentGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IEnchantmentGetter item,
            IEnchantmentGetter rhs)
        {
            return ((EnchantmentCommon)((IEnchantmentGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IEnchantmentInternal lhs,
            IEnchantmentGetter rhs,
            out Enchantment.ErrorMask errorMask,
            Enchantment.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((EnchantmentSetterTranslationCommon)((IEnchantmentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Enchantment.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IEnchantmentInternal lhs,
            IEnchantmentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((EnchantmentSetterTranslationCommon)((IEnchantmentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Enchantment DeepCopy(
            this IEnchantmentGetter item,
            Enchantment.TranslationMask? copyMask = null)
        {
            return ((EnchantmentSetterTranslationCommon)((IEnchantmentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Enchantment DeepCopy(
            this IEnchantmentGetter item,
            out Enchantment.ErrorMask errorMask,
            Enchantment.TranslationMask? copyMask = null)
        {
            return ((EnchantmentSetterTranslationCommon)((IEnchantmentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Enchantment DeepCopy(
            this IEnchantmentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((EnchantmentSetterTranslationCommon)((IEnchantmentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IEnchantmentInternal item,
            XElement node,
            Enchantment.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IEnchantmentInternal item,
            XElement node,
            out Enchantment.ErrorMask errorMask,
            Enchantment.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Enchantment.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IEnchantmentInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((EnchantmentSetterCommon)((IEnchantmentGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEnchantmentInternal item,
            string path,
            Enchantment.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEnchantmentInternal item,
            string path,
            out Enchantment.ErrorMask errorMask,
            Enchantment.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEnchantmentInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Enchantment.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IEnchantmentInternal item,
            Stream stream,
            Enchantment.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEnchantmentInternal item,
            Stream stream,
            out Enchantment.ErrorMask errorMask,
            Enchantment.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEnchantmentInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Enchantment.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IEnchantmentInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IEnchantmentInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((EnchantmentSetterCommon)((IEnchantmentGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Enchantment_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Type = 6,
        ChargeAmount = 7,
        EnchantCost = 8,
        Flags = 9,
        Effects = 10,
        ENITDataTypeState = 11,
    }
    #endregion

    #region Registration
    public partial class Enchantment_Registration : ILoquiRegistration
    {
        public static readonly Enchantment_Registration Instance = new Enchantment_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 55,
            version: 0);

        public const string GUID = "70c1ef12-4d5f-4f6a-8899-5518fcba82ed";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(Enchantment.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Enchantment.ErrorMask);

        public static readonly Type ClassType = typeof(Enchantment);

        public static readonly Type GetterType = typeof(IEnchantmentGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IEnchantment);

        public static readonly Type? InternalSetterType = typeof(IEnchantmentInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Enchantment";

        public const string Name = "Enchantment";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Enchantment_FieldIndex.Name;
                case "TYPE":
                    return (ushort)Enchantment_FieldIndex.Type;
                case "CHARGEAMOUNT":
                    return (ushort)Enchantment_FieldIndex.ChargeAmount;
                case "ENCHANTCOST":
                    return (ushort)Enchantment_FieldIndex.EnchantCost;
                case "FLAGS":
                    return (ushort)Enchantment_FieldIndex.Flags;
                case "EFFECTS":
                    return (ushort)Enchantment_FieldIndex.Effects;
                case "ENITDATATYPESTATE":
                    return (ushort)Enchantment_FieldIndex.ENITDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Effects:
                    return true;
                case Enchantment_FieldIndex.Name:
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                case Enchantment_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Effects:
                    return true;
                case Enchantment_FieldIndex.Name:
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                case Enchantment_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Name:
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                case Enchantment_FieldIndex.Effects:
                case Enchantment_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Name:
                    return "Name";
                case Enchantment_FieldIndex.Type:
                    return "Type";
                case Enchantment_FieldIndex.ChargeAmount:
                    return "ChargeAmount";
                case Enchantment_FieldIndex.EnchantCost:
                    return "EnchantCost";
                case Enchantment_FieldIndex.Flags:
                    return "Flags";
                case Enchantment_FieldIndex.Effects:
                    return "Effects";
                case Enchantment_FieldIndex.ENITDataTypeState:
                    return "ENITDataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Name:
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                case Enchantment_FieldIndex.Effects:
                case Enchantment_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Name:
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                case Enchantment_FieldIndex.Effects:
                case Enchantment_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Name:
                    return typeof(String);
                case Enchantment_FieldIndex.Type:
                    return typeof(Enchantment.EnchantmentType);
                case Enchantment_FieldIndex.ChargeAmount:
                    return typeof(UInt32);
                case Enchantment_FieldIndex.EnchantCost:
                    return typeof(UInt32);
                case Enchantment_FieldIndex.Flags:
                    return typeof(Enchantment.Flag);
                case Enchantment_FieldIndex.Effects:
                    return typeof(ISetList<Effect>);
                case Enchantment_FieldIndex.ENITDataTypeState:
                    return typeof(Enchantment.ENITDataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(EnchantmentXmlWriteTranslation);
        public static readonly RecordType ENCH_HEADER = new RecordType("ENCH");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType ENIT_HEADER = new RecordType("ENIT");
        public static readonly RecordType EFID_HEADER = new RecordType("EFID");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ENCH_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryWriteTranslation = typeof(EnchantmentBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class EnchantmentSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly EnchantmentSetterCommon Instance = new EnchantmentSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IEnchantmentInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Type = default;
            item.ChargeAmount = default;
            item.EnchantCost = default;
            item.Flags = default;
            item.Effects.Unset();
            item.ENITDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IEnchantmentInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IEnchantmentInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IEnchantmentInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasENITDataType":
                    item.ENITDataTypeState |= Enchantment.ENITDataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IEnchantmentInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    EnchantmentXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Enchantment_Registration.ENCH_HEADER;
        protected static void FillBinaryStructs(
            IEnchantmentInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IEnchantmentInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Enchantment_FieldIndex.Name);
                }
                case 0x54494E45: // ENIT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.ENITDataTypeState = Enchantment.ENITDataType.Has;
                    }
                    item.Type = EnumBinaryTranslation<Enchantment.EnchantmentType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.ChargeAmount = dataFrame.ReadUInt32();
                    item.EnchantCost = dataFrame.ReadUInt32();
                    item.Flags = EnumBinaryTranslation<Enchantment.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    return TryGet<int?>.Succeed((int)Enchantment_FieldIndex.Flags);
                }
                case 0x44494645: // EFID
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Effect>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Enchantment_Registration.EFID_HEADER,
                        item: item.Effects,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: (MutagenFrame r, out Effect listSubItem) =>
                        {
                            return LoquiBinaryTranslation<Effect>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Enchantment_FieldIndex.Effects);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IEnchantmentInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IEnchantmentInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class EnchantmentCommon : OblivionMajorRecordCommon
    {
        public new static readonly EnchantmentCommon Instance = new EnchantmentCommon();

        public Enchantment.Mask<bool> GetEqualsMask(
            IEnchantmentGetter item,
            IEnchantmentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Enchantment.Mask<bool>(false);
            ((EnchantmentCommon)((IEnchantmentGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IEnchantmentGetter item,
            IEnchantmentGetter rhs,
            Enchantment.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Type = item.Type == rhs.Type;
            ret.ChargeAmount = item.ChargeAmount == rhs.ChargeAmount;
            ret.EnchantCost = item.EnchantCost == rhs.EnchantCost;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Effects = item.Effects.CollectionEqualsHelper(
                rhs.Effects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ENITDataTypeState = item.ENITDataTypeState == rhs.ENITDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IEnchantmentGetter item,
            string? name = null,
            Enchantment.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IEnchantmentGetter item,
            FileGeneration fg,
            string? name = null,
            Enchantment.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Enchantment =>");
            }
            else
            {
                fg.AppendLine($"{name} (Enchantment) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IEnchantmentGetter item,
            FileGeneration fg,
            Enchantment.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Type ?? true)
            {
                fg.AppendLine($"Type => {item.Type}");
            }
            if (printMask?.ChargeAmount ?? true)
            {
                fg.AppendLine($"ChargeAmount => {item.ChargeAmount}");
            }
            if (printMask?.EnchantCost ?? true)
            {
                fg.AppendLine($"EnchantCost => {item.EnchantCost}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Effects?.Overall ?? true)
            {
                fg.AppendLine("Effects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Effects)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.ENITDataTypeState ?? true)
            {
                fg.AppendLine($"ENITDataTypeState => {item.ENITDataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            IEnchantmentGetter item,
            Enchantment.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Effects?.Overall.HasValue ?? false && checkMask.Effects!.Overall.Value != item.Effects.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IEnchantmentGetter item,
            Enchantment.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            mask.Type = true;
            mask.ChargeAmount = true;
            mask.EnchantCost = true;
            mask.Flags = true;
            var EffectsItem = item.Effects;
            mask.Effects = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Effect.Mask<bool>?>>>(EffectsItem.HasBeenSet, EffectsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Effect.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.ENITDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Enchantment_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Enchantment_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Enchantment_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Enchantment_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Enchantment_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Enchantment_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Enchantment_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Enchantment_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Enchantment_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Enchantment_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Enchantment_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IEnchantmentGetter? lhs,
            IEnchantmentGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (lhs.Type != rhs.Type) return false;
            if (lhs.ChargeAmount != rhs.ChargeAmount) return false;
            if (lhs.EnchantCost != rhs.EnchantCost) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.Effects.SequenceEqual(rhs.Effects)) return false;
            if (lhs.ENITDataTypeState != rhs.ENITDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IEnchantmentGetter?)lhs,
                rhs: rhs as IEnchantmentGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IEnchantmentGetter?)lhs,
                rhs: rhs as IEnchantmentGetter);
        }
        
        public virtual int GetHashCode(IEnchantmentGetter item)
        {
            int ret = 0;
            if (item.Name.TryGet(out var Nameitem))
            {
                ret = HashHelper.GetHashCode(Nameitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Type).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ChargeAmount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EnchantCost).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Effects).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ENITDataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IEnchantmentGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IEnchantmentGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Enchantment.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IEnchantmentGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Effects.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(Enchantment obj, Enchantment rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Enchantment(getNextFormKey());
            ret.DeepCopyIn((Enchantment)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Enchantment)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class EnchantmentSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly EnchantmentSetterTranslationCommon Instance = new EnchantmentSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IEnchantmentInternal item,
            IEnchantmentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IEnchantment item,
            IEnchantmentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Enchantment_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Enchantment_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)Enchantment_FieldIndex.ChargeAmount) ?? true))
            {
                item.ChargeAmount = rhs.ChargeAmount;
            }
            if ((copyMask?.GetShouldTranslate((int)Enchantment_FieldIndex.EnchantCost) ?? true))
            {
                item.EnchantCost = rhs.EnchantCost;
            }
            if ((copyMask?.GetShouldTranslate((int)Enchantment_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Enchantment_FieldIndex.Effects) ?? true))
            {
                errorMask?.PushIndex((int)Enchantment_FieldIndex.Effects);
                try
                {
                    if (rhs.Effects.HasBeenSet)
                    {
                        item.Effects.SetTo(
                            items: rhs.Effects,
                            converter: (r) =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.Effects.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Enchantment_FieldIndex.ENITDataTypeState) ?? true))
            {
                item.ENITDataTypeState = rhs.ENITDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IEnchantmentInternal)item,
                rhs: (IEnchantmentGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IEnchantment)item,
                rhs: (IEnchantmentGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IEnchantmentInternal)item,
                rhs: (IEnchantmentGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IEnchantment)item,
                rhs: (IEnchantmentGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Enchantment DeepCopy(
            IEnchantmentGetter item,
            Enchantment.TranslationMask? copyMask = null)
        {
            Enchantment ret = (Enchantment)((EnchantmentCommon)((IEnchantmentGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Enchantment DeepCopy(
            IEnchantmentGetter item,
            out Enchantment.ErrorMask errorMask,
            Enchantment.TranslationMask? copyMask = null)
        {
            Enchantment ret = (Enchantment)((EnchantmentCommon)((IEnchantmentGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Enchantment DeepCopy(
            IEnchantmentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Enchantment ret = (Enchantment)((EnchantmentCommon)((IEnchantmentGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Enchantment
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Enchantment_Registration.Instance;
        public new static Enchantment_Registration Registration => Enchantment_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => EnchantmentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return EnchantmentSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => EnchantmentSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class EnchantmentXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static EnchantmentXmlWriteTranslation Instance = new EnchantmentXmlWriteTranslation();

        public static void WriteToNodeXml(
            IEnchantmentGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Enchantment_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Enchantment_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.ENITDataTypeState.HasFlag(Enchantment.ENITDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Enchantment_FieldIndex.Type) ?? true))
                {
                    EnumXmlTranslation<Enchantment.EnchantmentType>.Instance.Write(
                        node: node,
                        name: nameof(item.Type),
                        item: item.Type,
                        fieldIndex: (int)Enchantment_FieldIndex.Type,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Enchantment_FieldIndex.ChargeAmount) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ChargeAmount),
                        item: item.ChargeAmount,
                        fieldIndex: (int)Enchantment_FieldIndex.ChargeAmount,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Enchantment_FieldIndex.EnchantCost) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EnchantCost),
                        item: item.EnchantCost,
                        fieldIndex: (int)Enchantment_FieldIndex.EnchantCost,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Enchantment_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<Enchantment.Flag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Enchantment_FieldIndex.Flags,
                        errorMask: errorMask);
                }
            }
            if (item.Effects.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Enchantment_FieldIndex.Effects) ?? true))
            {
                ListXmlTranslation<IEffectGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Effects),
                    item: item.Effects,
                    fieldIndex: (int)Enchantment_FieldIndex.Effects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Enchantment_FieldIndex.Effects),
                    transl: (XElement subNode, IEffectGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((EffectXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Enchantment_FieldIndex.ENITDataTypeState) ?? true))
            {
                EnumXmlTranslation<Enchantment.ENITDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.ENITDataTypeState),
                    item: item.ENITDataTypeState,
                    fieldIndex: (int)Enchantment_FieldIndex.ENITDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IEnchantmentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Enchantment");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Enchantment");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IEnchantmentGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IEnchantmentGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IEnchantmentGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class EnchantmentXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static EnchantmentXmlCreateTranslation Instance = new EnchantmentXmlCreateTranslation();

        public static void FillPublicXml(
            IEnchantmentInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    EnchantmentXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IEnchantmentInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)Enchantment_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Type":
                    errorMask?.PushIndex((int)Enchantment_FieldIndex.Type);
                    try
                    {
                        item.Type = EnumXmlTranslation<Enchantment.EnchantmentType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.ENITDataTypeState |= Enchantment.ENITDataType.Has;
                    break;
                case "ChargeAmount":
                    errorMask?.PushIndex((int)Enchantment_FieldIndex.ChargeAmount);
                    try
                    {
                        item.ChargeAmount = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnchantCost":
                    errorMask?.PushIndex((int)Enchantment_FieldIndex.EnchantCost);
                    try
                    {
                        item.EnchantCost = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Enchantment_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Enchantment.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Effects":
                    errorMask?.PushIndex((int)Enchantment_FieldIndex.Effects);
                    try
                    {
                        if (ListXmlTranslation<Effect>.Instance.Parse(
                            node: node,
                            enumer: out var EffectsItem,
                            transl: LoquiXmlTranslation<Effect>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Effects.SetTo(EffectsItem);
                        }
                        else
                        {
                            item.Effects.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ENITDataTypeState":
                    errorMask?.PushIndex((int)Enchantment_FieldIndex.ENITDataTypeState);
                    try
                    {
                        item.ENITDataTypeState = EnumXmlTranslation<Enchantment.ENITDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class EnchantmentXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IEnchantmentGetter item,
            XElement node,
            out Enchantment.ErrorMask errorMask,
            Enchantment.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((EnchantmentXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Enchantment.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IEnchantmentGetter item,
            string path,
            out Enchantment.ErrorMask errorMask,
            Enchantment.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IEnchantmentGetter item,
            Stream stream,
            out Enchantment.ErrorMask errorMask,
            Enchantment.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class EnchantmentBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static EnchantmentBinaryWriteTranslation Instance = new EnchantmentBinaryWriteTranslation();

        public static void Write_Embedded(
            IEnchantmentGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IEnchantmentGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Enchantment_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.ENITDataTypeState.HasFlag(Enchantment.ENITDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Enchantment_Registration.ENIT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Enchantment.EnchantmentType>.Instance.Write(
                        writer,
                        item.Type,
                        length: 4);
                    writer.Write(item.ChargeAmount);
                    writer.Write(item.EnchantCost);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Enchantment.Flag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IEffectGetter>.Instance.Write(
                writer: writer,
                items: item.Effects,
                transl: (MutagenWriter subWriter, IEffectGetter subItem) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((EffectBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    }
                });
        }

        public void Write(
            MutagenWriter writer,
            IEnchantmentGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Enchantment_Registration.ENCH_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IEnchantmentGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IEnchantmentGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IEnchantmentGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class EnchantmentBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static EnchantmentBinaryCreateTranslation Instance = new EnchantmentBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class EnchantmentBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class EnchantmentBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IEnchantmentGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Enchantment_Registration.Instance;
        public new static Enchantment_Registration Registration => Enchantment_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => EnchantmentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => EnchantmentSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IEnchantmentGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => EnchantmentCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => EnchantmentXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((EnchantmentXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => EnchantmentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((EnchantmentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        private int? _ENITLocation;
        public Enchantment.ENITDataType ENITDataTypeState { get; private set; }
        #region Type
        private int _TypeLocation => _ENITLocation!.Value + 0x0;
        private bool _Type_IsSet => _ENITLocation.HasValue;
        public Enchantment.EnchantmentType Type => _Type_IsSet ? (Enchantment.EnchantmentType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TypeLocation, 4)) : default;
        #endregion
        #region ChargeAmount
        private int _ChargeAmountLocation => _ENITLocation!.Value + 0x4;
        private bool _ChargeAmount_IsSet => _ENITLocation.HasValue;
        public UInt32 ChargeAmount => _ChargeAmount_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ChargeAmountLocation, 4)) : default;
        #endregion
        #region EnchantCost
        private int _EnchantCostLocation => _ENITLocation!.Value + 0x8;
        private bool _EnchantCost_IsSet => _ENITLocation.HasValue;
        public UInt32 EnchantCost => _EnchantCost_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_EnchantCostLocation, 4)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _ENITLocation!.Value + 0xC;
        private bool _Flags_IsSet => _ENITLocation.HasValue;
        public Enchantment.Flag Flags => _Flags_IsSet ? (Enchantment.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 4)) : default;
        #endregion
        public IReadOnlySetList<IEffectGetter> Effects { get; private set; } = EmptySetList<EffectBinaryOverlay>.Instance;
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected EnchantmentBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static EnchantmentBinaryOverlay EnchantmentFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new EnchantmentBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Enchantment_FieldIndex.Name);
                }
                case 0x54494E45: // ENIT
                {
                    _ENITLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.ENITDataTypeState = Enchantment.ENITDataType.Has;
                    return TryGet<int?>.Succeed((int)Enchantment_FieldIndex.Flags);
                }
                case 0x44494645: // EFID
                {
                    this.Effects = this.ParseRepeatedTypelessSubrecord<EffectBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: Enchantment_Registration.EFID_HEADER,
                        factory:  EffectBinaryOverlay.EffectFactory);
                    return TryGet<int?>.Succeed((int)Enchantment_FieldIndex.Effects);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

