/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class FaceGenData :
        IFaceGenData,
        ILoquiObjectSetter<FaceGenData>,
        IEquatable<FaceGenData>,
        IEqualsMask
    {
        #region Ctor
        public FaceGenData()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region SymmetricGeometry
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool SymmetricGeometry_IsSet
        {
            get => _hasBeenSetTracker[(int)FaceGenData_FieldIndex.SymmetricGeometry];
            set => _hasBeenSetTracker[(int)FaceGenData_FieldIndex.SymmetricGeometry] = value;
        }
        bool IFaceGenDataGetter.SymmetricGeometry_IsSet => SymmetricGeometry_IsSet;
        protected Byte[] _SymmetricGeometry;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] SymmetricGeometry
        {
            get => this._SymmetricGeometry;
            set => SymmetricGeometry_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IFaceGenDataGetter.SymmetricGeometry => this.SymmetricGeometry;
        public void SymmetricGeometry_Set(
            Byte[] value,
            bool markSet = true)
        {
            _SymmetricGeometry = value;
            _hasBeenSetTracker[(int)FaceGenData_FieldIndex.SymmetricGeometry] = markSet;
        }
        public void SymmetricGeometry_Unset()
        {
            this.SymmetricGeometry_Set(default(Byte[]), false);
        }
        #endregion
        #region AsymmetricGeometry
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool AsymmetricGeometry_IsSet
        {
            get => _hasBeenSetTracker[(int)FaceGenData_FieldIndex.AsymmetricGeometry];
            set => _hasBeenSetTracker[(int)FaceGenData_FieldIndex.AsymmetricGeometry] = value;
        }
        bool IFaceGenDataGetter.AsymmetricGeometry_IsSet => AsymmetricGeometry_IsSet;
        protected Byte[] _AsymmetricGeometry;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] AsymmetricGeometry
        {
            get => this._AsymmetricGeometry;
            set => AsymmetricGeometry_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IFaceGenDataGetter.AsymmetricGeometry => this.AsymmetricGeometry;
        public void AsymmetricGeometry_Set(
            Byte[] value,
            bool markSet = true)
        {
            _AsymmetricGeometry = value;
            _hasBeenSetTracker[(int)FaceGenData_FieldIndex.AsymmetricGeometry] = markSet;
        }
        public void AsymmetricGeometry_Unset()
        {
            this.AsymmetricGeometry_Set(default(Byte[]), false);
        }
        #endregion
        #region SymmetricTexture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool SymmetricTexture_IsSet
        {
            get => _hasBeenSetTracker[(int)FaceGenData_FieldIndex.SymmetricTexture];
            set => _hasBeenSetTracker[(int)FaceGenData_FieldIndex.SymmetricTexture] = value;
        }
        bool IFaceGenDataGetter.SymmetricTexture_IsSet => SymmetricTexture_IsSet;
        protected Byte[] _SymmetricTexture;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] SymmetricTexture
        {
            get => this._SymmetricTexture;
            set => SymmetricTexture_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IFaceGenDataGetter.SymmetricTexture => this.SymmetricTexture;
        public void SymmetricTexture_Set(
            Byte[] value,
            bool markSet = true)
        {
            _SymmetricTexture = value;
            _hasBeenSetTracker[(int)FaceGenData_FieldIndex.SymmetricTexture] = markSet;
        }
        public void SymmetricTexture_Unset()
        {
            this.SymmetricTexture_Set(default(Byte[]), false);
        }
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            FaceGenDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IFaceGenDataGetter rhs)) return false;
            return ((FaceGenDataCommon)((IFaceGenDataGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(FaceGenData obj)
        {
            return ((FaceGenDataCommon)((IFaceGenDataGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((FaceGenDataCommon)((IFaceGenDataGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => FaceGenDataXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((FaceGenDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static FaceGenData CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            FaceGenData_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static FaceGenData CreateFromXml(
            XElement node,
            out FaceGenData_ErrorMask errorMask,
            bool doMasks = true,
            FaceGenData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = FaceGenData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static FaceGenData CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new FaceGenData() : null;
                    break;
                default:
                    break;
            }
            var ret = new FaceGenData();
            ((FaceGenDataSetterCommon)((IFaceGenDataGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static FaceGenData CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            FaceGenData_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static FaceGenData CreateFromXml(
            string path,
            out FaceGenData_ErrorMask errorMask,
            FaceGenData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FaceGenData CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            FaceGenData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static FaceGenData CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            FaceGenData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static FaceGenData CreateFromXml(
            Stream stream,
            out FaceGenData_ErrorMask errorMask,
            FaceGenData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FaceGenData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            FaceGenData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((FaceGenData_FieldIndex)index)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                case FaceGenData_FieldIndex.SymmetricTexture:
                    return _hasBeenSetTracker[index];
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        protected object BinaryWriteTranslator => FaceGenDataBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((FaceGenDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static FaceGenData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static FaceGenData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out FaceGenData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = FaceGenData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static FaceGenData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new FaceGenData();
            ((FaceGenDataSetterCommon)((IFaceGenDataGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFaceGenDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((FaceGenDataSetterCommon)((IFaceGenDataGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static FaceGenData GetNew()
        {
            return new FaceGenData();
        }

    }
    #endregion

    #region Interface
    public partial interface IFaceGenData :
        IFaceGenDataGetter,
        ILoquiObjectSetter<IFaceGenData>
    {
        new Byte[] SymmetricGeometry { get; set; }
        new bool SymmetricGeometry_IsSet { get; set; }
        void SymmetricGeometry_Set(Byte[] value, bool hasBeenSet = true);
        void SymmetricGeometry_Unset();

        new Byte[] AsymmetricGeometry { get; set; }
        new bool AsymmetricGeometry_IsSet { get; set; }
        void AsymmetricGeometry_Set(Byte[] value, bool hasBeenSet = true);
        void AsymmetricGeometry_Unset();

        new Byte[] SymmetricTexture { get; set; }
        new bool SymmetricTexture_IsSet { get; set; }
        void SymmetricTexture_Set(Byte[] value, bool hasBeenSet = true);
        void SymmetricTexture_Unset();

    }

    public partial interface IFaceGenDataGetter :
        ILoquiObject,
        ILoquiObject<IFaceGenDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region SymmetricGeometry
        ReadOnlySpan<Byte> SymmetricGeometry { get; }
        bool SymmetricGeometry_IsSet { get; }

        #endregion
        #region AsymmetricGeometry
        ReadOnlySpan<Byte> AsymmetricGeometry { get; }
        bool AsymmetricGeometry_IsSet { get; }

        #endregion
        #region SymmetricTexture
        ReadOnlySpan<Byte> SymmetricTexture { get; }
        bool SymmetricTexture_IsSet { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class FaceGenDataMixIn
    {
        public static void Clear(this IFaceGenData item)
        {
            ((FaceGenDataSetterCommon)((IFaceGenDataGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static FaceGenData_Mask<bool> GetEqualsMask(
            this IFaceGenDataGetter item,
            IFaceGenDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFaceGenDataGetter item,
            string name = null,
            FaceGenData_Mask<bool> printMask = null)
        {
            return ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFaceGenDataGetter item,
            FileGeneration fg,
            string name = null,
            FaceGenData_Mask<bool> printMask = null)
        {
            ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IFaceGenDataGetter item,
            FaceGenData_Mask<bool?> checkMask)
        {
            return ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static FaceGenData_Mask<bool> GetHasBeenSetMask(this IFaceGenDataGetter item)
        {
            var ret = new FaceGenData_Mask<bool>();
            ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IFaceGenDataGetter item,
            IFaceGenDataGetter rhs)
        {
            return ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IFaceGenData lhs,
            IFaceGenDataGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this IFaceGenData lhs,
            IFaceGenDataGetter rhs,
            FaceGenData_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IFaceGenData lhs,
            IFaceGenDataGetter rhs,
            out FaceGenData_ErrorMask errorMask,
            FaceGenData_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = FaceGenData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IFaceGenData lhs,
            IFaceGenDataGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static FaceGenData DeepCopy(
            this IFaceGenDataGetter item,
            FaceGenData_TranslationMask copyMask = null)
        {
            return ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FaceGenData DeepCopy(
            this IFaceGenDataGetter item,
            out FaceGenData_ErrorMask errorMask,
            FaceGenData_TranslationMask copyMask = null)
        {
            return ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FaceGenData DeepCopy(
            this IFaceGenDataGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFaceGenData item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            FaceGenData_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFaceGenData item,
            XElement node,
            out FaceGenData_ErrorMask errorMask,
            bool doMasks = true,
            FaceGenData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = FaceGenData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IFaceGenData item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((FaceGenDataSetterCommon)((IFaceGenDataGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceGenData item,
            string path,
            MissingCreate missing = MissingCreate.New,
            FaceGenData_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceGenData item,
            string path,
            out FaceGenData_ErrorMask errorMask,
            FaceGenData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceGenData item,
            string path,
            ErrorMaskBuilder errorMask,
            FaceGenData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IFaceGenData item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            FaceGenData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceGenData item,
            Stream stream,
            out FaceGenData_ErrorMask errorMask,
            FaceGenData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceGenData item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            FaceGenData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFaceGenData item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFaceGenData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out FaceGenData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = FaceGenData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this IFaceGenData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((FaceGenDataSetterCommon)((IFaceGenDataGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum FaceGenData_FieldIndex
    {
        SymmetricGeometry = 0,
        AsymmetricGeometry = 1,
        SymmetricTexture = 2,
    }
    #endregion

    #region Registration
    public class FaceGenData_Registration : ILoquiRegistration
    {
        public static readonly FaceGenData_Registration Instance = new FaceGenData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 38,
            version: 0);

        public const string GUID = "e43c6320-1bd4-466d-b0c0-3e30495b7e41";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(FaceGenData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(FaceGenData_ErrorMask);

        public static readonly Type ClassType = typeof(FaceGenData);

        public static readonly Type GetterType = typeof(IFaceGenDataGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFaceGenData);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.FaceGenData";

        public const string Name = "FaceGenData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SYMMETRICGEOMETRY":
                    return (ushort)FaceGenData_FieldIndex.SymmetricGeometry;
                case "ASYMMETRICGEOMETRY":
                    return (ushort)FaceGenData_FieldIndex.AsymmetricGeometry;
                case "SYMMETRICTEXTURE":
                    return (ushort)FaceGenData_FieldIndex.SymmetricTexture;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                case FaceGenData_FieldIndex.SymmetricTexture:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                case FaceGenData_FieldIndex.SymmetricTexture:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                case FaceGenData_FieldIndex.SymmetricTexture:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                    return "SymmetricGeometry";
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                    return "AsymmetricGeometry";
                case FaceGenData_FieldIndex.SymmetricTexture:
                    return "SymmetricTexture";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                case FaceGenData_FieldIndex.SymmetricTexture:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                case FaceGenData_FieldIndex.SymmetricTexture:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                    return typeof(Byte[]);
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                    return typeof(Byte[]);
                case FaceGenData_FieldIndex.SymmetricTexture:
                    return typeof(Byte[]);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(FaceGenDataXmlWriteTranslation);
        public static readonly RecordType FGGS_HEADER = new RecordType("FGGS");
        public static readonly RecordType FGGA_HEADER = new RecordType("FGGA");
        public static readonly RecordType FGTS_HEADER = new RecordType("FGTS");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        FGGS_HEADER,
                        FGGA_HEADER,
                        FGTS_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryWriteTranslation = typeof(FaceGenDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class FaceGenDataSetterCommon
    {
        public static readonly FaceGenDataSetterCommon Instance = new FaceGenDataSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IFaceGenData item)
        {
            ClearPartial();
            item.SymmetricGeometry_Unset();
            item.AsymmetricGeometry_Unset();
            item.SymmetricTexture_Unset();
        }
        
        public object GetNew() => FaceGenData.GetNew();
        
        #region Xml Translation
        public void CopyInFromXml(
            IFaceGenData item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FaceGenDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IFaceGenData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IFaceGenData item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x53474746: // FGGS
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FaceGenData_FieldIndex.SymmetricGeometry) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] SymmetricGeometryParse))
                    {
                        item.SymmetricGeometry = SymmetricGeometryParse;
                    }
                    else
                    {
                        item.SymmetricGeometry = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)FaceGenData_FieldIndex.SymmetricGeometry);
                }
                case 0x41474746: // FGGA
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FaceGenData_FieldIndex.AsymmetricGeometry) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] AsymmetricGeometryParse))
                    {
                        item.AsymmetricGeometry = AsymmetricGeometryParse;
                    }
                    else
                    {
                        item.AsymmetricGeometry = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)FaceGenData_FieldIndex.AsymmetricGeometry);
                }
                case 0x53544746: // FGTS
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FaceGenData_FieldIndex.SymmetricTexture) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] SymmetricTextureParse))
                    {
                        item.SymmetricTexture = SymmetricTextureParse;
                    }
                    else
                    {
                        item.SymmetricTexture = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)FaceGenData_FieldIndex.SymmetricTexture);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IFaceGenData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class FaceGenDataCommon
    {
        public static readonly FaceGenDataCommon Instance = new FaceGenDataCommon();

        public FaceGenData_Mask<bool> GetEqualsMask(
            IFaceGenDataGetter item,
            IFaceGenDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FaceGenData_Mask<bool>();
            ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFaceGenDataGetter item,
            IFaceGenDataGetter rhs,
            FaceGenData_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.SymmetricGeometry = item.SymmetricGeometry_IsSet == rhs.SymmetricGeometry_IsSet && MemoryExtensions.SequenceEqual(item.SymmetricGeometry, rhs.SymmetricGeometry);
            ret.AsymmetricGeometry = item.AsymmetricGeometry_IsSet == rhs.AsymmetricGeometry_IsSet && MemoryExtensions.SequenceEqual(item.AsymmetricGeometry, rhs.AsymmetricGeometry);
            ret.SymmetricTexture = item.SymmetricTexture_IsSet == rhs.SymmetricTexture_IsSet && MemoryExtensions.SequenceEqual(item.SymmetricTexture, rhs.SymmetricTexture);
        }
        
        public string ToString(
            IFaceGenDataGetter item,
            string name = null,
            FaceGenData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFaceGenDataGetter item,
            FileGeneration fg,
            string name = null,
            FaceGenData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"FaceGenData =>");
            }
            else
            {
                fg.AppendLine($"{name} (FaceGenData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFaceGenDataGetter item,
            FileGeneration fg,
            FaceGenData_Mask<bool> printMask = null)
        {
            if (printMask?.SymmetricGeometry ?? true)
            {
                fg.AppendLine($"SymmetricGeometry => {SpanExt.ToHexString(item.SymmetricGeometry)}");
            }
            if (printMask?.AsymmetricGeometry ?? true)
            {
                fg.AppendLine($"AsymmetricGeometry => {SpanExt.ToHexString(item.AsymmetricGeometry)}");
            }
            if (printMask?.SymmetricTexture ?? true)
            {
                fg.AppendLine($"SymmetricTexture => {SpanExt.ToHexString(item.SymmetricTexture)}");
            }
        }
        
        public bool HasBeenSet(
            IFaceGenDataGetter item,
            FaceGenData_Mask<bool?> checkMask)
        {
            if (checkMask.SymmetricGeometry.HasValue && checkMask.SymmetricGeometry.Value != item.SymmetricGeometry_IsSet) return false;
            if (checkMask.AsymmetricGeometry.HasValue && checkMask.AsymmetricGeometry.Value != item.AsymmetricGeometry_IsSet) return false;
            if (checkMask.SymmetricTexture.HasValue && checkMask.SymmetricTexture.Value != item.SymmetricTexture_IsSet) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IFaceGenDataGetter item,
            FaceGenData_Mask<bool> mask)
        {
            mask.SymmetricGeometry = item.SymmetricGeometry_IsSet;
            mask.AsymmetricGeometry = item.AsymmetricGeometry_IsSet;
            mask.SymmetricTexture = item.SymmetricTexture_IsSet;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFaceGenDataGetter lhs,
            IFaceGenDataGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.SymmetricGeometry_IsSet != rhs.SymmetricGeometry_IsSet) return false;
            if (lhs.SymmetricGeometry_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.SymmetricGeometry, rhs.SymmetricGeometry)) return false;
            }
            if (lhs.AsymmetricGeometry_IsSet != rhs.AsymmetricGeometry_IsSet) return false;
            if (lhs.AsymmetricGeometry_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.AsymmetricGeometry, rhs.AsymmetricGeometry)) return false;
            }
            if (lhs.SymmetricTexture_IsSet != rhs.SymmetricTexture_IsSet) return false;
            if (lhs.SymmetricTexture_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.SymmetricTexture, rhs.SymmetricTexture)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IFaceGenDataGetter item)
        {
            int ret = 0;
            if (item.SymmetricGeometry_IsSet)
            {
                ret = HashHelper.GetHashCode(item.SymmetricGeometry).CombineHashCode(ret);
            }
            if (item.AsymmetricGeometry_IsSet)
            {
                ret = HashHelper.GetHashCode(item.AsymmetricGeometry).CombineHashCode(ret);
            }
            if (item.SymmetricTexture_IsSet)
            {
                ret = HashHelper.GetHashCode(item.SymmetricTexture).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class FaceGenDataSetterTranslationCommon
    {
        public static readonly FaceGenDataSetterTranslationCommon Instance = new FaceGenDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IFaceGenData item,
            IFaceGenDataGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.SymmetricGeometry) ?? true))
            {
                errorMask?.PushIndex((int)FaceGenData_FieldIndex.SymmetricGeometry);
                try
                {
                    if(rhs.SymmetricGeometry_IsSet)
                    {
                        item.SymmetricGeometry = rhs.SymmetricGeometry.ToArray();
                    }
                    else
                    {
                        item.SymmetricGeometry_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.AsymmetricGeometry) ?? true))
            {
                errorMask?.PushIndex((int)FaceGenData_FieldIndex.AsymmetricGeometry);
                try
                {
                    if(rhs.AsymmetricGeometry_IsSet)
                    {
                        item.AsymmetricGeometry = rhs.AsymmetricGeometry.ToArray();
                    }
                    else
                    {
                        item.AsymmetricGeometry_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.SymmetricTexture) ?? true))
            {
                errorMask?.PushIndex((int)FaceGenData_FieldIndex.SymmetricTexture);
                try
                {
                    if(rhs.SymmetricTexture_IsSet)
                    {
                        item.SymmetricTexture = rhs.SymmetricTexture.ToArray();
                    }
                    else
                    {
                        item.SymmetricTexture_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public FaceGenData DeepCopy(
            IFaceGenDataGetter item,
            FaceGenData_TranslationMask copyMask = null)
        {
            FaceGenData ret = (FaceGenData)((FaceGenDataSetterCommon)((IFaceGenDataGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public FaceGenData DeepCopy(
            IFaceGenDataGetter item,
            out FaceGenData_ErrorMask errorMask,
            FaceGenData_TranslationMask copyMask = null)
        {
            FaceGenData ret = (FaceGenData)((FaceGenDataSetterCommon)((IFaceGenDataGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public FaceGenData DeepCopy(
            IFaceGenDataGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            FaceGenData ret = (FaceGenData)((FaceGenDataSetterCommon)((IFaceGenDataGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class FaceGenData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FaceGenData_Registration.Instance;
        public static FaceGenData_Registration Registration => FaceGenData_Registration.Instance;
        protected object CommonInstance() => FaceGenDataCommon.Instance;
        protected object CommonSetterInstance()
        {
            return FaceGenDataSetterCommon.Instance;
        }
        protected object CommonSetterTranslationInstance() => FaceGenDataSetterTranslationCommon.Instance;
        object IFaceGenDataGetter.CommonInstance() => this.CommonInstance();
        object IFaceGenDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        object IFaceGenDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class FaceGenDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static FaceGenDataXmlWriteTranslation Instance = new FaceGenDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IFaceGenDataGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.SymmetricGeometry_IsSet
                && (translationMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.SymmetricGeometry) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SymmetricGeometry),
                    item: item.SymmetricGeometry,
                    fieldIndex: (int)FaceGenData_FieldIndex.SymmetricGeometry,
                    errorMask: errorMask);
            }
            if (item.AsymmetricGeometry_IsSet
                && (translationMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.AsymmetricGeometry) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AsymmetricGeometry),
                    item: item.AsymmetricGeometry,
                    fieldIndex: (int)FaceGenData_FieldIndex.AsymmetricGeometry,
                    errorMask: errorMask);
            }
            if (item.SymmetricTexture_IsSet
                && (translationMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.SymmetricTexture) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SymmetricTexture),
                    item: item.SymmetricTexture,
                    fieldIndex: (int)FaceGenData_FieldIndex.SymmetricTexture,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IFaceGenDataGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.FaceGenData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.FaceGenData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IFaceGenDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IFaceGenDataGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IFaceGenDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class FaceGenDataXmlCreateTranslation
    {
        public readonly static FaceGenDataXmlCreateTranslation Instance = new FaceGenDataXmlCreateTranslation();

        public static void FillPublicXml(
            IFaceGenData item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FaceGenDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IFaceGenData item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "SymmetricGeometry":
                    try
                    {
                        errorMask?.PushIndex((int)FaceGenData_FieldIndex.SymmetricGeometry);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] SymmetricGeometryParse,
                            errorMask: errorMask))
                        {
                            item.SymmetricGeometry = SymmetricGeometryParse;
                        }
                        else
                        {
                            item.SymmetricGeometry = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AsymmetricGeometry":
                    try
                    {
                        errorMask?.PushIndex((int)FaceGenData_FieldIndex.AsymmetricGeometry);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] AsymmetricGeometryParse,
                            errorMask: errorMask))
                        {
                            item.AsymmetricGeometry = AsymmetricGeometryParse;
                        }
                        else
                        {
                            item.AsymmetricGeometry = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SymmetricTexture":
                    try
                    {
                        errorMask?.PushIndex((int)FaceGenData_FieldIndex.SymmetricTexture);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] SymmetricTextureParse,
                            errorMask: errorMask))
                        {
                            item.SymmetricTexture = SymmetricTextureParse;
                        }
                        else
                        {
                            item.SymmetricTexture = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class FaceGenDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IFaceGenDataGetter item,
            XElement node,
            out FaceGenData_ErrorMask errorMask,
            bool doMasks = true,
            FaceGenData_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((FaceGenDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FaceGenData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IFaceGenDataGetter item,
            string path,
            out FaceGenData_ErrorMask errorMask,
            FaceGenData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFaceGenDataGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFaceGenDataGetter item,
            Stream stream,
            out FaceGenData_ErrorMask errorMask,
            FaceGenData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IFaceGenDataGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IFaceGenDataGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((FaceGenDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IFaceGenDataGetter item,
            XElement node,
            string name = null,
            FaceGenData_TranslationMask translationMask = null)
        {
            ((FaceGenDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IFaceGenDataGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((FaceGenDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFaceGenDataGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((FaceGenDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class FaceGenData_Mask<T> : IMask<T>, IEquatable<FaceGenData_Mask<T>>
    {
        #region Ctors
        public FaceGenData_Mask()
        {
        }

        public FaceGenData_Mask(T initialValue)
        {
            this.SymmetricGeometry = initialValue;
            this.AsymmetricGeometry = initialValue;
            this.SymmetricTexture = initialValue;
        }
        #endregion

        #region Members
        public T SymmetricGeometry;
        public T AsymmetricGeometry;
        public T SymmetricTexture;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is FaceGenData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(FaceGenData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.SymmetricGeometry, rhs.SymmetricGeometry)) return false;
            if (!object.Equals(this.AsymmetricGeometry, rhs.AsymmetricGeometry)) return false;
            if (!object.Equals(this.SymmetricTexture, rhs.SymmetricTexture)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.SymmetricGeometry?.GetHashCode());
            ret = ret.CombineHashCode(this.AsymmetricGeometry?.GetHashCode());
            ret = ret.CombineHashCode(this.SymmetricTexture?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.SymmetricGeometry)) return false;
            if (!eval(this.AsymmetricGeometry)) return false;
            if (!eval(this.SymmetricTexture)) return false;
            return true;
        }
        #endregion

        #region Translate
        public FaceGenData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new FaceGenData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(FaceGenData_Mask<R> obj, Func<T, R> eval)
        {
            obj.SymmetricGeometry = eval(this.SymmetricGeometry);
            obj.AsymmetricGeometry = eval(this.AsymmetricGeometry);
            obj.SymmetricTexture = eval(this.SymmetricTexture);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(FaceGenData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, FaceGenData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(FaceGenData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.SymmetricGeometry ?? true)
                {
                    fg.AppendLine($"SymmetricGeometry => {SymmetricGeometry}");
                }
                if (printMask?.AsymmetricGeometry ?? true)
                {
                    fg.AppendLine($"AsymmetricGeometry => {AsymmetricGeometry}");
                }
                if (printMask?.SymmetricTexture ?? true)
                {
                    fg.AppendLine($"SymmetricTexture => {SymmetricTexture}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class FaceGenData_ErrorMask : IErrorMask, IErrorMask<FaceGenData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception SymmetricGeometry;
        public Exception AsymmetricGeometry;
        public Exception SymmetricTexture;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                    return SymmetricGeometry;
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                    return AsymmetricGeometry;
                case FaceGenData_FieldIndex.SymmetricTexture:
                    return SymmetricTexture;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                    this.SymmetricGeometry = ex;
                    break;
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                    this.AsymmetricGeometry = ex;
                    break;
                case FaceGenData_FieldIndex.SymmetricTexture:
                    this.SymmetricTexture = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                    this.SymmetricGeometry = (Exception)obj;
                    break;
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                    this.AsymmetricGeometry = (Exception)obj;
                    break;
                case FaceGenData_FieldIndex.SymmetricTexture:
                    this.SymmetricTexture = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (SymmetricGeometry != null) return true;
            if (AsymmetricGeometry != null) return true;
            if (SymmetricTexture != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("FaceGenData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"SymmetricGeometry => {SymmetricGeometry}");
            fg.AppendLine($"AsymmetricGeometry => {AsymmetricGeometry}");
            fg.AppendLine($"SymmetricTexture => {SymmetricTexture}");
        }
        #endregion

        #region Combine
        public FaceGenData_ErrorMask Combine(FaceGenData_ErrorMask rhs)
        {
            var ret = new FaceGenData_ErrorMask();
            ret.SymmetricGeometry = this.SymmetricGeometry.Combine(rhs.SymmetricGeometry);
            ret.AsymmetricGeometry = this.AsymmetricGeometry.Combine(rhs.AsymmetricGeometry);
            ret.SymmetricTexture = this.SymmetricTexture.Combine(rhs.SymmetricTexture);
            return ret;
        }
        public static FaceGenData_ErrorMask Combine(FaceGenData_ErrorMask lhs, FaceGenData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static FaceGenData_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new FaceGenData_ErrorMask();
        }
        #endregion

    }
    public class FaceGenData_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool SymmetricGeometry;
        public bool AsymmetricGeometry;
        public bool SymmetricTexture;
        #endregion

        #region Ctors
        public FaceGenData_TranslationMask()
        {
        }

        public FaceGenData_TranslationMask(bool defaultOn)
        {
            this.SymmetricGeometry = defaultOn;
            this.AsymmetricGeometry = defaultOn;
            this.SymmetricTexture = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((SymmetricGeometry, null));
            ret.Add((AsymmetricGeometry, null));
            ret.Add((SymmetricTexture, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class FaceGenDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static FaceGenDataBinaryWriteTranslation Instance = new FaceGenDataBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IFaceGenDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.SymmetricGeometry_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SymmetricGeometry,
                    header: recordTypeConverter.ConvertToCustom(FaceGenData_Registration.FGGS_HEADER),
                    nullable: false);
            }
            if (item.AsymmetricGeometry_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AsymmetricGeometry,
                    header: recordTypeConverter.ConvertToCustom(FaceGenData_Registration.FGGA_HEADER),
                    nullable: false);
            }
            if (item.SymmetricTexture_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SymmetricTexture,
                    header: recordTypeConverter.ConvertToCustom(FaceGenData_Registration.FGTS_HEADER),
                    nullable: false);
            }
        }

        public void Write(
            MutagenWriter writer,
            IFaceGenDataGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IFaceGenDataGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class FaceGenDataBinaryCreateTranslation
    {
        public readonly static FaceGenDataBinaryCreateTranslation Instance = new FaceGenDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class FaceGenDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFaceGenDataGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out FaceGenData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((FaceGenDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = FaceGenData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IFaceGenDataGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((FaceGenDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IFaceGenDataGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((FaceGenDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class FaceGenDataBinaryWrapper :
        BinaryWrapper,
        IFaceGenDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FaceGenData_Registration.Instance;
        public static FaceGenData_Registration Registration => FaceGenData_Registration.Instance;
        protected object CommonInstance() => FaceGenDataCommon.Instance;
        protected object CommonSetterTranslationInstance() => FaceGenDataSetterTranslationCommon.Instance;
        object IFaceGenDataGetter.CommonInstance() => this.CommonInstance();
        object IFaceGenDataGetter.CommonSetterInstance() => null;
        object IFaceGenDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFaceGenDataGetter)rhs, include);

        protected object XmlWriteTranslator => FaceGenDataXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((FaceGenDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => FaceGenDataBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((FaceGenDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region SymmetricGeometry
        private int? _SymmetricGeometryLocation;
        public bool SymmetricGeometry_IsSet => _SymmetricGeometryLocation.HasValue;
        public ReadOnlySpan<Byte> SymmetricGeometry => _SymmetricGeometryLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _SymmetricGeometryLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region AsymmetricGeometry
        private int? _AsymmetricGeometryLocation;
        public bool AsymmetricGeometry_IsSet => _AsymmetricGeometryLocation.HasValue;
        public ReadOnlySpan<Byte> AsymmetricGeometry => _AsymmetricGeometryLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _AsymmetricGeometryLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region SymmetricTexture
        private int? _SymmetricTextureLocation;
        public bool SymmetricTexture_IsSet => _SymmetricTextureLocation.HasValue;
        public ReadOnlySpan<Byte> SymmetricTexture => _SymmetricTextureLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _SymmetricTextureLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected FaceGenDataBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static FaceGenDataBinaryWrapper FaceGenDataFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new FaceGenDataBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x53474746: // FGGS
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FaceGenData_FieldIndex.SymmetricGeometry) return TryGet<int?>.Failure;
                    _SymmetricGeometryLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)FaceGenData_FieldIndex.SymmetricGeometry);
                }
                case 0x41474746: // FGGA
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FaceGenData_FieldIndex.AsymmetricGeometry) return TryGet<int?>.Failure;
                    _AsymmetricGeometryLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)FaceGenData_FieldIndex.AsymmetricGeometry);
                }
                case 0x53544746: // FGTS
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FaceGenData_FieldIndex.SymmetricTexture) return TryGet<int?>.Failure;
                    _SymmetricTextureLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)FaceGenData_FieldIndex.SymmetricTexture);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

