/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class FacePart :
        IFacePart,
        ILoquiObjectSetter<FacePart>,
        IEquatable<FacePart>,
        IEqualsMask
    {
        #region Ctor
        public FacePart()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Index
        public bool Index_IsSet
        {
            get => _hasBeenSetTracker[(int)FacePart_FieldIndex.Index];
            set => _hasBeenSetTracker[(int)FacePart_FieldIndex.Index] = value;
        }
        bool IFacePartGetter.Index_IsSet => Index_IsSet;
        private Race.FaceIndex _Index;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Race.FaceIndex Index
        {
            get => this._Index;
            set => Index_Set(value);
        }
        Race.FaceIndex IFacePartGetter.Index => this.Index;
        public void Index_Set(
            Race.FaceIndex value,
            bool markSet = true)
        {
            _Index = value;
            _hasBeenSetTracker[(int)FacePart_FieldIndex.Index] = markSet;
        }
        public void Index_Unset()
        {
            this.Index_Set(default(Race.FaceIndex), false);
        }
        #endregion
        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)FacePart_FieldIndex.Model];
            set => _hasBeenSetTracker[(int)FacePart_FieldIndex.Model] = value;
        }
        bool IFacePartGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool hasBeenSet = true)
        {
            _Model = value;
            _hasBeenSetTracker[(int)FacePart_FieldIndex.Model] = hasBeenSet;
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter IFacePartGetter.Model => this.Model;
        #endregion
        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)FacePart_FieldIndex.Icon];
            set => _hasBeenSetTracker[(int)FacePart_FieldIndex.Icon] = value;
        }
        bool IFacePartGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String IFacePartGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            _Icon = value;
            _hasBeenSetTracker[(int)FacePart_FieldIndex.Icon] = markSet;
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFacePartGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            FacePartMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IFacePartGetter rhs)) return false;
            return ((FacePartCommon)((IFacePartGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(FacePart obj)
        {
            return ((FacePartCommon)((IFacePartGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((FacePartCommon)((IFacePartGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => FacePartXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((FacePartXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static FacePart CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            FacePart_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static FacePart CreateFromXml(
            XElement node,
            out FacePart_ErrorMask errorMask,
            bool doMasks = true,
            FacePart_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = FacePart_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static FacePart CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new FacePart() : null;
                    break;
                default:
                    break;
            }
            var ret = new FacePart();
            ((FacePartSetterCommon)((IFacePartGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static FacePart CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            FacePart_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static FacePart CreateFromXml(
            string path,
            out FacePart_ErrorMask errorMask,
            FacePart_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FacePart CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            FacePart_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static FacePart CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            FacePart_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static FacePart CreateFromXml(
            Stream stream,
            out FacePart_ErrorMask errorMask,
            FacePart_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FacePart CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            FacePart_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((FacePart_FieldIndex)index)
            {
                case FacePart_FieldIndex.Index:
                case FacePart_FieldIndex.Model:
                case FacePart_FieldIndex.Icon:
                    return _hasBeenSetTracker[index];
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        protected object BinaryWriteTranslator => FacePartBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((FacePartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static FacePart CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static FacePart CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out FacePart_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = FacePart_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static FacePart CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new FacePart();
            ((FacePartSetterCommon)((IFacePartGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void IClearable.Clear()
        {
            ((FacePartSetterCommon)((IFacePartGetter)this).CommonSetterInstance()).Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface IFacePart :
        IFacePartGetter,
        ILoquiObjectSetter<IFacePart>
    {
        new Race.FaceIndex Index { get; set; }
        new bool Index_IsSet { get; set; }
        void Index_Set(Race.FaceIndex value, bool hasBeenSet = true);
        void Index_Unset();

        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model value, bool hasBeenSet = true);
        void Model_Unset();

        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String value, bool hasBeenSet = true);
        void Icon_Unset();

    }

    public partial interface IFacePartGetter :
        ILoquiObject,
        ILoquiObject<IFacePartGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region Index
        Race.FaceIndex Index { get; }
        bool Index_IsSet { get; }

        #endregion
        #region Model
        IModelGetter Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class FacePartMixIn
    {
        public static void Clear(this IFacePart item)
        {
            ((FacePartSetterCommon)((IFacePartGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static FacePart_Mask<bool> GetEqualsMask(
            this IFacePartGetter item,
            IFacePartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FacePartCommon)((IFacePartGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFacePartGetter item,
            string name = null,
            FacePart_Mask<bool> printMask = null)
        {
            return ((FacePartCommon)((IFacePartGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFacePartGetter item,
            FileGeneration fg,
            string name = null,
            FacePart_Mask<bool> printMask = null)
        {
            ((FacePartCommon)((IFacePartGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IFacePartGetter item,
            FacePart_Mask<bool?> checkMask)
        {
            return ((FacePartCommon)((IFacePartGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static FacePart_Mask<bool> GetHasBeenSetMask(this IFacePartGetter item)
        {
            var ret = new FacePart_Mask<bool>();
            ((FacePartCommon)((IFacePartGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IFacePartGetter item,
            IFacePartGetter rhs)
        {
            return ((FacePartCommon)((IFacePartGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IFacePart lhs,
            IFacePartGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this IFacePart lhs,
            IFacePartGetter rhs,
            FacePart_TranslationMask copyMask,
            IFacePartGetter def = null)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IFacePart lhs,
            IFacePartGetter rhs,
            out FacePart_ErrorMask errorMask,
            FacePart_TranslationMask copyMask = null,
            IFacePartGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((FacePartSetterTranslationCommon)((IFacePartGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = FacePart_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IFacePart lhs,
            IFacePartGetter rhs,
            ErrorMaskBuilder errorMask,
            FacePart_TranslationMask copyMask = null,
            IFacePartGetter def = null)
        {
            ((FacePartSetterTranslationCommon)((IFacePartGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static FacePart DeepCopy(
            this IFacePartGetter item,
            FacePart_TranslationMask copyMask = null,
            IFacePartGetter def = null)
        {
            return ((FacePartSetterTranslationCommon)((IFacePartGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                def: def);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFacePart item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            FacePart_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFacePart item,
            XElement node,
            out FacePart_ErrorMask errorMask,
            bool doMasks = true,
            FacePart_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = FacePart_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IFacePart item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((FacePartSetterCommon)((IFacePartGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFacePart item,
            string path,
            MissingCreate missing = MissingCreate.New,
            FacePart_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFacePart item,
            string path,
            out FacePart_ErrorMask errorMask,
            FacePart_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFacePart item,
            string path,
            ErrorMaskBuilder errorMask,
            FacePart_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IFacePart item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            FacePart_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFacePart item,
            Stream stream,
            out FacePart_ErrorMask errorMask,
            FacePart_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFacePart item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            FacePart_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFacePart item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFacePart item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out FacePart_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = FacePart_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this IFacePart item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((FacePartSetterCommon)((IFacePartGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum FacePart_FieldIndex
    {
        Index = 0,
        Model = 1,
        Icon = 2,
    }
    #endregion

    #region Registration
    public class FacePart_Registration : ILoquiRegistration
    {
        public static readonly FacePart_Registration Instance = new FacePart_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 34,
            version: 0);

        public const string GUID = "82c0ca6f-0e71-4c8f-ac1c-7bf04129339a";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(FacePart_Mask<>);

        public static readonly Type ErrorMaskType = typeof(FacePart_ErrorMask);

        public static readonly Type ClassType = typeof(FacePart);

        public static readonly Type GetterType = typeof(IFacePartGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFacePart);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.FacePart";

        public const string Name = "FacePart";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "INDEX":
                    return (ushort)FacePart_FieldIndex.Index;
                case "MODEL":
                    return (ushort)FacePart_FieldIndex.Model;
                case "ICON":
                    return (ushort)FacePart_FieldIndex.Icon;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                case FacePart_FieldIndex.Model:
                case FacePart_FieldIndex.Icon:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Model:
                    return true;
                case FacePart_FieldIndex.Index:
                case FacePart_FieldIndex.Icon:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                case FacePart_FieldIndex.Model:
                case FacePart_FieldIndex.Icon:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                    return "Index";
                case FacePart_FieldIndex.Model:
                    return "Model";
                case FacePart_FieldIndex.Icon:
                    return "Icon";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                case FacePart_FieldIndex.Model:
                case FacePart_FieldIndex.Icon:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                case FacePart_FieldIndex.Model:
                case FacePart_FieldIndex.Icon:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                    return typeof(Race.FaceIndex);
                case FacePart_FieldIndex.Model:
                    return typeof(Model);
                case FacePart_FieldIndex.Icon:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(FacePartXmlWriteTranslation);
        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        INDX_HEADER,
                        MODL_HEADER,
                        ICON_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryWriteTranslation = typeof(FacePartBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class FacePartSetterCommon
    {
        public static readonly FacePartSetterCommon Instance = new FacePartSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IFacePart item)
        {
            ClearPartial();
            item.Index_Unset();
            item.Model_Unset();
            item.Icon_Unset();
        }
        
        public FacePart GetNew()
        {
            return new FacePart();
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IFacePart item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FacePartXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IFacePart item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IFacePart item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x58444E49: // INDX
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FacePart_FieldIndex.Index) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (EnumBinaryTranslation<Race.FaceIndex>.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Race.FaceIndex IndexParse))
                    {
                        item.Index = IndexParse;
                    }
                    else
                    {
                        item.Index = default(Race.FaceIndex);
                    }
                    return TryGet<int?>.Succeed((int)FacePart_FieldIndex.Index);
                }
                case 0x4C444F4D: // MODL
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FacePart_FieldIndex.Model) return TryGet<int?>.Failure;
                    try
                    {
                        errorMask?.PushIndex((int)FacePart_FieldIndex.Model);
                        item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)FacePart_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FacePart_FieldIndex.Icon) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String IconParse))
                    {
                        item.Icon = IconParse;
                    }
                    else
                    {
                        item.Icon = default(String);
                    }
                    return TryGet<int?>.Succeed((int)FacePart_FieldIndex.Icon);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IFacePart item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class FacePartCommon
    {
        public static readonly FacePartCommon Instance = new FacePartCommon();

        public FacePart_Mask<bool> GetEqualsMask(
            IFacePartGetter item,
            IFacePartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FacePart_Mask<bool>();
            ((FacePartCommon)((IFacePartGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFacePartGetter item,
            IFacePartGetter rhs,
            FacePart_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Index = item.Index_IsSet == rhs.Index_IsSet && item.Index == rhs.Index;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && string.Equals(item.Icon, rhs.Icon);
        }
        
        public string ToString(
            IFacePartGetter item,
            string name = null,
            FacePart_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFacePartGetter item,
            FileGeneration fg,
            string name = null,
            FacePart_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"FacePart =>");
            }
            else
            {
                fg.AppendLine($"{name} (FacePart) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFacePartGetter item,
            FileGeneration fg,
            FacePart_Mask<bool> printMask = null)
        {
            if (printMask?.Index ?? true)
            {
                fg.AppendLine($"Index => {item.Index}");
            }
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.Icon ?? true)
            {
                fg.AppendLine($"Icon => {item.Icon}");
            }
        }
        
        public bool HasBeenSet(
            IFacePartGetter item,
            FacePart_Mask<bool?> checkMask)
        {
            if (checkMask.Index.HasValue && checkMask.Index.Value != item.Index_IsSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IFacePartGetter item,
            FacePart_Mask<bool> mask)
        {
            mask.Index = item.Index_IsSet;
            mask.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, item.Model.GetHasBeenSetMask());
            mask.Icon = item.Icon_IsSet;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFacePartGetter lhs,
            IFacePartGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Index_IsSet != rhs.Index_IsSet) return false;
            if (lhs.Index_IsSet)
            {
                if (lhs.Index != rhs.Index) return false;
            }
            if (lhs.Model_IsSet != rhs.Model_IsSet) return false;
            if (lhs.Model_IsSet)
            {
                if (!object.Equals(lhs.Model, rhs.Model)) return false;
            }
            if (lhs.Icon_IsSet != rhs.Icon_IsSet) return false;
            if (lhs.Icon_IsSet)
            {
                if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IFacePartGetter item)
        {
            int ret = 0;
            if (item.Index_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Index).CombineHashCode(ret);
            }
            if (item.Model_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Model).CombineHashCode(ret);
            }
            if (item.Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Icon).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class FacePartSetterTranslationCommon
    {
        public static readonly FacePartSetterTranslationCommon Instance = new FacePartSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IFacePart item,
            IFacePartGetter rhs,
            IFacePartGetter def,
            ErrorMaskBuilder errorMask,
            FacePart_TranslationMask copyMask)
        {
            if (copyMask?.Index ?? true)
            {
                errorMask?.PushIndex((int)FacePart_FieldIndex.Index);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Index,
                        rhsHasBeenSet: rhs.Index_IsSet,
                        defItem: def?.Index ?? default(Race.FaceIndex),
                        defHasBeenSet: def?.Index_IsSet ?? false,
                        outRhsItem: out var rhsIndexItem,
                        outDefItem: out var defIndexItem))
                    {
                        item.Index = rhsIndexItem;
                    }
                    else
                    {
                        item.Index_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Model.Overall ?? true)
            {
                errorMask?.PushIndex((int)FacePart_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        item.Model = rhsModelItem.DeepCopy(
                            copyMask?.Model?.Specific,
                            def: defModelItem);
                    }
                    else
                    {
                        item.Model_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)FacePart_FieldIndex.Icon);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Icon,
                        rhsHasBeenSet: rhs.Icon_IsSet,
                        defItem: def?.Icon ?? default(String),
                        defHasBeenSet: def?.Icon_IsSet ?? false,
                        outRhsItem: out var rhsIconItem,
                        outDefItem: out var defIconItem))
                    {
                        item.Icon = rhsIconItem;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public FacePart DeepCopy(
            IFacePartGetter item,
            FacePart_TranslationMask copyMask = null,
            IFacePartGetter def = null)
        {
            FacePart ret = FacePartSetterCommon.Instance.GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class FacePart
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FacePart_Registration.Instance;
        public static FacePart_Registration Registration => FacePart_Registration.Instance;
        protected object CommonInstance()
        {
            return FacePartCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return FacePartSetterCommon.Instance;
        }
        protected object CommonSetterTranslationInstance()
        {
            return FacePartSetterTranslationCommon.Instance;
        }
        object IFacePartGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IFacePartGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IFacePartGetter.CommonSetterTranslationInstance()
        {
            return this.CommonSetterTranslationInstance();
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class FacePartXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static FacePartXmlWriteTranslation Instance = new FacePartXmlWriteTranslation();

        public static void WriteToNodeXml(
            IFacePartGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.Index_IsSet
                && (translationMask?.GetShouldTranslate((int)FacePart_FieldIndex.Index) ?? true))
            {
                EnumXmlTranslation<Race.FaceIndex>.Instance.Write(
                    node: node,
                    name: nameof(item.Index),
                    item: item.Index,
                    fieldIndex: (int)FacePart_FieldIndex.Index,
                    errorMask: errorMask);
            }
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)FacePart_FieldIndex.Model) ?? true))
            {
                var loquiItem = item.Model;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)FacePart_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FacePart_FieldIndex.Model));
            }
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)FacePart_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)FacePart_FieldIndex.Icon,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IFacePartGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.FacePart");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.FacePart");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IFacePartGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IFacePartGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IFacePartGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class FacePartXmlCreateTranslation
    {
        public readonly static FacePartXmlCreateTranslation Instance = new FacePartXmlCreateTranslation();

        public static void FillPublicXml(
            IFacePart item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FacePartXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IFacePart item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Index":
                    try
                    {
                        errorMask?.PushIndex((int)FacePart_FieldIndex.Index);
                        if (EnumXmlTranslation<Race.FaceIndex>.Instance.Parse(
                            node: node,
                            item: out Race.FaceIndex IndexParse,
                            errorMask: errorMask))
                        {
                            item.Index = IndexParse;
                        }
                        else
                        {
                            item.Index = default(Race.FaceIndex);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)FacePart_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FacePart_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)FacePart_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class FacePartXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IFacePartGetter item,
            XElement node,
            out FacePart_ErrorMask errorMask,
            bool doMasks = true,
            FacePart_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((FacePartXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FacePart_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IFacePartGetter item,
            string path,
            out FacePart_ErrorMask errorMask,
            FacePart_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFacePartGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFacePartGetter item,
            Stream stream,
            out FacePart_ErrorMask errorMask,
            FacePart_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IFacePartGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IFacePartGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((FacePartXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IFacePartGetter item,
            XElement node,
            string name = null,
            FacePart_TranslationMask translationMask = null)
        {
            ((FacePartXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IFacePartGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((FacePartXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFacePartGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((FacePartXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class FacePart_Mask<T> : IMask<T>, IEquatable<FacePart_Mask<T>>
    {
        #region Ctors
        public FacePart_Mask()
        {
        }

        public FacePart_Mask(T initialValue)
        {
            this.Index = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Icon = initialValue;
        }
        #endregion

        #region Members
        public T Index;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Icon;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is FacePart_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(FacePart_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Index, rhs.Index)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Index?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Index)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Icon)) return false;
            return true;
        }
        #endregion

        #region Translate
        public FacePart_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new FacePart_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(FacePart_Mask<R> obj, Func<T, R> eval)
        {
            obj.Index = eval(this.Index);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Icon = eval(this.Icon);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(FacePart_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, FacePart_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(FacePart_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Index ?? true)
                {
                    fg.AppendLine($"Index => {Index}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class FacePart_ErrorMask : IErrorMask, IErrorMask<FacePart_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Index;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Icon;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                    return Index;
                case FacePart_FieldIndex.Model:
                    return Model;
                case FacePart_FieldIndex.Icon:
                    return Icon;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                    this.Index = ex;
                    break;
                case FacePart_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case FacePart_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                    this.Index = (Exception)obj;
                    break;
                case FacePart_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case FacePart_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Index != null) return true;
            if (Model != null) return true;
            if (Icon != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("FacePart_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Index => {Index}");
            Model?.ToString(fg);
            fg.AppendLine($"Icon => {Icon}");
        }
        #endregion

        #region Combine
        public FacePart_ErrorMask Combine(FacePart_ErrorMask rhs)
        {
            var ret = new FacePart_ErrorMask();
            ret.Index = this.Index.Combine(rhs.Index);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Icon = this.Icon.Combine(rhs.Icon);
            return ret;
        }
        public static FacePart_ErrorMask Combine(FacePart_ErrorMask lhs, FacePart_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static FacePart_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new FacePart_ErrorMask();
        }
        #endregion

    }
    public class FacePart_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Index;
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Icon;
        #endregion

        #region Ctors
        public FacePart_TranslationMask()
        {
        }

        public FacePart_TranslationMask(bool defaultOn)
        {
            this.Index = defaultOn;
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.Icon = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Index, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Icon, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class FacePartBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static FacePartBinaryWriteTranslation Instance = new FacePartBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IFacePartGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.Index_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Race.FaceIndex>.Instance.Write(
                    writer,
                    item.Index,
                    length: 4,
                    header: recordTypeConverter.ConvertToCustom(FacePart_Registration.INDX_HEADER),
                    nullable: false);
            }
            if (item.Model_IsSet)
            {
                var loquiItem = item.Model;
                ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    header: recordTypeConverter.ConvertToCustom(FacePart_Registration.ICON_HEADER),
                    nullable: false);
            }
        }

        public void Write(
            MutagenWriter writer,
            IFacePartGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IFacePartGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class FacePartBinaryCreateTranslation
    {
        public readonly static FacePartBinaryCreateTranslation Instance = new FacePartBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class FacePartBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFacePartGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out FacePart_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((FacePartBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = FacePart_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IFacePartGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((FacePartBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IFacePartGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((FacePartBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class FacePartBinaryWrapper :
        BinaryWrapper,
        IFacePartGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FacePart_Registration.Instance;
        public static FacePart_Registration Registration => FacePart_Registration.Instance;
        protected object CommonInstance()
        {
            return FacePartCommon.Instance;
        }
        protected object CommonSetterTranslationInstance()
        {
            return FacePartSetterTranslationCommon.Instance;
        }
        object IFacePartGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IFacePartGetter.CommonSetterInstance()
        {
            return null;
        }
        object IFacePartGetter.CommonSetterTranslationInstance()
        {
            return this.CommonSetterTranslationInstance();
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFacePartGetter)rhs, include);

        protected object XmlWriteTranslator => FacePartXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((FacePartXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => FacePartBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((FacePartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Index
        private int? _IndexLocation;
        public bool Index_IsSet => _IndexLocation.HasValue;
        public Race.FaceIndex Index => (Race.FaceIndex)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _IndexLocation.Value, _package.Meta));
        #endregion
        #region Model
        public IModelGetter Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        #region Icon
        private int? _IconLocation;
        public bool Icon_IsSet => _IconLocation.HasValue;
        public String Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _IconLocation.Value, _package.Meta)) : default;
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected FacePartBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this._data = bytes;
        }

        public static FacePartBinaryWrapper FacePartFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new FacePartBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x58444E49: // INDX
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FacePart_FieldIndex.Index) return TryGet<int?>.Failure;
                    _IndexLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)FacePart_FieldIndex.Index);
                }
                case 0x4C444F4D: // MODL
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FacePart_FieldIndex.Model) return TryGet<int?>.Failure;
                    this.Model = ModelBinaryWrapper.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)FacePart_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FacePart_FieldIndex.Icon) return TryGet<int?>.Failure;
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)FacePart_FieldIndex.Icon);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

