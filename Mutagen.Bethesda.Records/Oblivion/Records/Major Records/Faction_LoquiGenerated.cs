/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Faction :
        OblivionMajorRecord,
        IFactionInternal,
        ILoquiObjectSetter<Faction>,
        INamed,
        IOwner,
        ILinkSubContainer,
        IEquatable<Faction>,
        IEqualsMask
    {
        #region Ctor
        protected Faction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Faction_FieldIndex.Name];
            set => _hasBeenSetTracker[(int)Faction_FieldIndex.Name] = value;
        }
        bool IFactionGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IFactionGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            _Name = value;
            _hasBeenSetTracker[(int)Faction_FieldIndex.Name] = markSet;
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Relations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<Relation> _Relations = new SetList<Relation>();
        public ISetList<Relation> Relations => _Relations;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<Relation> IFaction.Relations => _Relations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IRelationGetter> IFactionGetter.Relations => _Relations;
        #endregion

        #endregion
        #region Flags
        public bool Flags_IsSet
        {
            get => _hasBeenSetTracker[(int)Faction_FieldIndex.Flags];
            set => _hasBeenSetTracker[(int)Faction_FieldIndex.Flags] = value;
        }
        bool IFactionGetter.Flags_IsSet => Flags_IsSet;
        private Faction.FactionFlag _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Faction.FactionFlag Flags
        {
            get => this._Flags;
            set => Flags_Set(value);
        }
        Faction.FactionFlag IFactionGetter.Flags => this.Flags;
        public void Flags_Set(
            Faction.FactionFlag value,
            bool markSet = true)
        {
            _Flags = value;
            _hasBeenSetTracker[(int)Faction_FieldIndex.Flags] = markSet;
        }
        public void Flags_Unset()
        {
            this.Flags_Set(default(Faction.FactionFlag), false);
        }
        #endregion
        #region CrimeGoldMultiplier
        public bool CrimeGoldMultiplier_IsSet
        {
            get => _hasBeenSetTracker[(int)Faction_FieldIndex.CrimeGoldMultiplier];
            set => _hasBeenSetTracker[(int)Faction_FieldIndex.CrimeGoldMultiplier] = value;
        }
        bool IFactionGetter.CrimeGoldMultiplier_IsSet => CrimeGoldMultiplier_IsSet;
        private Single _CrimeGoldMultiplier;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single CrimeGoldMultiplier
        {
            get => this._CrimeGoldMultiplier;
            set => CrimeGoldMultiplier_Set(value);
        }
        Single IFactionGetter.CrimeGoldMultiplier => this.CrimeGoldMultiplier;
        public void CrimeGoldMultiplier_Set(
            Single value,
            bool markSet = true)
        {
            _CrimeGoldMultiplier = value;
            _hasBeenSetTracker[(int)Faction_FieldIndex.CrimeGoldMultiplier] = markSet;
        }
        public void CrimeGoldMultiplier_Unset()
        {
            this.CrimeGoldMultiplier_Set(default(Single), false);
        }
        #endregion
        #region Ranks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<Rank> _Ranks = new SetList<Rank>();
        public ISetList<Rank> Ranks => _Ranks;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<Rank> IFaction.Ranks => _Ranks;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IRankGetter> IFactionGetter.Ranks => _Ranks;
        #endregion

        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFactionGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            FactionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IFactionGetter rhs)) return false;
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Faction obj)
        {
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((FactionCommon)((IFactionGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => FactionXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((FactionXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Faction CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Faction_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Faction CreateFromXml(
            XElement node,
            out Faction_ErrorMask errorMask,
            bool doMasks = true,
            Faction_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Faction CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Faction() : null;
                    break;
                default:
                    break;
            }
            var ret = new Faction();
            ((FactionSetterCommon)((IFactionGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Faction CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Faction_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Faction CreateFromXml(
            string path,
            out Faction_ErrorMask errorMask,
            Faction_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Faction CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Faction_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Faction CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Faction_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Faction CreateFromXml(
            Stream stream,
            out Faction_ErrorMask errorMask,
            Faction_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Faction CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Faction_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Faction_FieldIndex)index)
            {
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return _hasBeenSetTracker[index];
                case Faction_FieldIndex.Relations:
                    return Relations.HasBeenSet;
                case Faction_FieldIndex.Ranks:
                    return Ranks.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Faction_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Relations.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(LinkingPackage<M> package)
            
        {
            base.Link(package: package);
            foreach (var item in Relations)
            {
                item.Link(package: package);
            }
        }

        public Faction(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Faction(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => FactionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((FactionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Faction CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Faction CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Faction_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Faction CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Faction();
            ((FactionSetterCommon)((IFactionGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void IClearable.Clear()
        {
            ((FactionSetterCommon)((IFactionGetter)this).CommonSetterInstance()).Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface IFaction :
        IFactionGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IFactionInternal>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new ISetList<Relation> Relations { get; }
        new Faction.FactionFlag Flags { get; set; }
        new bool Flags_IsSet { get; set; }
        void Flags_Set(Faction.FactionFlag value, bool hasBeenSet = true);
        void Flags_Unset();

        new Single CrimeGoldMultiplier { get; set; }
        new bool CrimeGoldMultiplier_IsSet { get; set; }
        void CrimeGoldMultiplier_Set(Single value, bool hasBeenSet = true);
        void CrimeGoldMultiplier_Unset();

        new ISetList<Rank> Ranks { get; }
    }

    public partial interface IFactionInternal :
        IOblivionMajorRecordInternal,
        IFaction,
        IFactionGetter
    {
    }

    public partial interface IFactionGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IFactionGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Relations
        IReadOnlySetList<IRelationGetter> Relations { get; }
        #endregion
        #region Flags
        Faction.FactionFlag Flags { get; }
        bool Flags_IsSet { get; }

        #endregion
        #region CrimeGoldMultiplier
        Single CrimeGoldMultiplier { get; }
        bool CrimeGoldMultiplier_IsSet { get; }

        #endregion
        #region Ranks
        IReadOnlySetList<IRankGetter> Ranks { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class FactionMixIn
    {
        public static void Clear(this IFactionInternal item)
        {
            ((FactionSetterCommon)((IFactionGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Faction_Mask<bool> GetEqualsMask(
            this IFactionGetter item,
            IFactionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFactionGetter item,
            string name = null,
            Faction_Mask<bool> printMask = null)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFactionGetter item,
            FileGeneration fg,
            string name = null,
            Faction_Mask<bool> printMask = null)
        {
            ((FactionCommon)((IFactionGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IFactionGetter item,
            Faction_Mask<bool?> checkMask)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Faction_Mask<bool> GetHasBeenSetMask(this IFactionGetter item)
        {
            var ret = new Faction_Mask<bool>();
            ((FactionCommon)((IFactionGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IFactionGetter item,
            IFactionGetter rhs)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IFactionInternal lhs,
            IFactionGetter rhs,
            Faction_TranslationMask copyMask,
            IFactionGetter def = null)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IFactionInternal lhs,
            IFactionGetter rhs,
            out Faction_ErrorMask errorMask,
            Faction_TranslationMask copyMask = null,
            IFactionGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((FactionSetterTranslationCommon)((IFactionGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IFactionInternal lhs,
            IFactionGetter rhs,
            ErrorMaskBuilder errorMask,
            Faction_TranslationMask copyMask = null,
            IFactionGetter def = null)
        {
            ((FactionSetterTranslationCommon)((IFactionGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFactionInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Faction_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFactionInternal item,
            XElement node,
            out Faction_ErrorMask errorMask,
            bool doMasks = true,
            Faction_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromXml(
            this IFactionInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((FactionSetterCommon)((IFactionGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            Faction_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            string path,
            out Faction_ErrorMask errorMask,
            Faction_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            Faction_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Faction_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            Stream stream,
            out Faction_ErrorMask errorMask,
            Faction_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            Faction_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFactionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFactionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Faction_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromBinary(
            this IFactionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((FactionSetterCommon)((IFactionGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Faction_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Relations = 6,
        Flags = 7,
        CrimeGoldMultiplier = 8,
        Ranks = 9,
    }
    #endregion

    #region Registration
    public class Faction_Registration : ILoquiRegistration
    {
        public static readonly Faction_Registration Instance = new Faction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 22,
            version: 0);

        public const string GUID = "153fd2c1-b407-450e-af54-30f99328faff";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(Faction_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Faction_ErrorMask);

        public static readonly Type ClassType = typeof(Faction);

        public static readonly Type GetterType = typeof(IFactionGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFaction);

        public static readonly Type InternalSetterType = typeof(IFactionInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Faction";

        public const string Name = "Faction";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Faction_FieldIndex.Name;
                case "RELATIONS":
                    return (ushort)Faction_FieldIndex.Relations;
                case "FLAGS":
                    return (ushort)Faction_FieldIndex.Flags;
                case "CRIMEGOLDMULTIPLIER":
                    return (ushort)Faction_FieldIndex.CrimeGoldMultiplier;
                case "RANKS":
                    return (ushort)Faction_FieldIndex.Ranks;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Ranks:
                    return true;
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Ranks:
                    return true;
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                case Faction_FieldIndex.Ranks:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                    return "Name";
                case Faction_FieldIndex.Relations:
                    return "Relations";
                case Faction_FieldIndex.Flags:
                    return "Flags";
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return "CrimeGoldMultiplier";
                case Faction_FieldIndex.Ranks:
                    return "Ranks";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                case Faction_FieldIndex.Ranks:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                case Faction_FieldIndex.Ranks:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                    return typeof(String);
                case Faction_FieldIndex.Relations:
                    return typeof(ISetList<Relation>);
                case Faction_FieldIndex.Flags:
                    return typeof(Faction.FactionFlag);
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return typeof(Single);
                case Faction_FieldIndex.Ranks:
                    return typeof(ISetList<Rank>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(FactionXmlWriteTranslation);
        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType XNAM_HEADER = new RecordType("XNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType INAM_HEADER = new RecordType("INAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = FACT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        public static readonly Type BinaryWriteTranslation = typeof(FactionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class FactionSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly FactionSetterCommon Instance = new FactionSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IFactionInternal item)
        {
            ClearPartial();
            item.Name_Unset();
            item.Relations.Unset();
            item.Flags_Unset();
            item.CrimeGoldMultiplier_Unset();
            item.Ranks.Unset();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IFactionInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IFactionInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IFactionInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public new void CopyInFromXml(
            IFactionInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    FactionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Faction_Registration.FACT_HEADER;
        protected static void FillBinaryStructs(
            IFactionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IFactionInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Name);
                }
                case 0x4D414E58: // XNAM
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Relation>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Faction_Registration.XNAM_HEADER,
                        item: item.Relations,
                        fieldIndex: (int)Faction_FieldIndex.Relations,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out Relation listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<Relation>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Relations);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (EnumBinaryTranslation<Faction.FactionFlag>.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Faction.FactionFlag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(Faction.FactionFlag);
                    }
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Flags);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Single CrimeGoldMultiplierParse))
                    {
                        item.CrimeGoldMultiplier = CrimeGoldMultiplierParse;
                    }
                    else
                    {
                        item.CrimeGoldMultiplier = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.CrimeGoldMultiplier);
                }
                case 0x4D414E52: // RNAM
                case 0x4D414E4D: // MNAM
                case 0x4D414E46: // FNAM
                case 0x4D414E49: // INAM
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Rank>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Rank_Registration.TriggeringRecordTypes,
                        item: item.Ranks,
                        fieldIndex: (int)Faction_FieldIndex.Ranks,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out Rank listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<Rank>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Ranks);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }
        
        public new void CopyInFromBinary(
            IFactionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.MajorRecordParse<IFactionInternal>(
                record: item,
                frame: frame,
                errorMask: errorMask,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class FactionCommon : OblivionMajorRecordCommon
    {
        public new static readonly FactionCommon Instance = new FactionCommon();

        public Faction_Mask<bool> GetEqualsMask(
            IFactionGetter item,
            IFactionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Faction_Mask<bool>();
            ((FactionCommon)((IFactionGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFactionGetter item,
            IFactionGetter rhs,
            Faction_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Relations = item.Relations.CollectionEqualsHelper(
                rhs.Relations,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Flags = item.Flags_IsSet == rhs.Flags_IsSet && item.Flags == rhs.Flags;
            ret.CrimeGoldMultiplier = item.CrimeGoldMultiplier_IsSet == rhs.CrimeGoldMultiplier_IsSet && item.CrimeGoldMultiplier.EqualsWithin(rhs.CrimeGoldMultiplier);
            ret.Ranks = item.Ranks.CollectionEqualsHelper(
                rhs.Ranks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IFactionGetter item,
            string name = null,
            Faction_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFactionGetter item,
            FileGeneration fg,
            string name = null,
            Faction_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Faction =>");
            }
            else
            {
                fg.AppendLine($"{name} (Faction) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFactionGetter item,
            FileGeneration fg,
            Faction_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Relations?.Overall ?? true)
            {
                fg.AppendLine("Relations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Relations)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.CrimeGoldMultiplier ?? true)
            {
                fg.AppendLine($"CrimeGoldMultiplier => {item.CrimeGoldMultiplier}");
            }
            if (printMask?.Ranks?.Overall ?? true)
            {
                fg.AppendLine("Ranks =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Ranks)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IFactionGetter item,
            Faction_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Relations.Overall.HasValue && checkMask.Relations.Overall.Value != item.Relations.HasBeenSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_IsSet) return false;
            if (checkMask.CrimeGoldMultiplier.HasValue && checkMask.CrimeGoldMultiplier.Value != item.CrimeGoldMultiplier_IsSet) return false;
            if (checkMask.Ranks.Overall.HasValue && checkMask.Ranks.Overall.Value != item.Ranks.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IFactionGetter item,
            Faction_Mask<bool> mask)
        {
            mask.Name = item.Name_IsSet;
            mask.Relations = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Relation_Mask<bool>>>>(item.Relations.HasBeenSet, item.Relations.WithIndex().Select((i) => new MaskItemIndexed<bool, Relation_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Flags = item.Flags_IsSet;
            mask.CrimeGoldMultiplier = item.CrimeGoldMultiplier_IsSet;
            mask.Ranks = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Rank_Mask<bool>>>>(item.Ranks.HasBeenSet, item.Ranks.WithIndex().Select((i) => new MaskItemIndexed<bool, Rank_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Faction_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Faction_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Faction_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Faction_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Faction_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Faction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static Faction_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Faction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFactionGetter lhs,
            IFactionGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Name_IsSet != rhs.Name_IsSet) return false;
            if (lhs.Name_IsSet)
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if (lhs.Relations.HasBeenSet != rhs.Relations.HasBeenSet) return false;
            if (lhs.Relations.HasBeenSet)
            {
                if (!lhs.Relations.SequenceEqual(rhs.Relations)) return false;
            }
            if (lhs.Flags_IsSet != rhs.Flags_IsSet) return false;
            if (lhs.Flags_IsSet)
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if (lhs.CrimeGoldMultiplier_IsSet != rhs.CrimeGoldMultiplier_IsSet) return false;
            if (lhs.CrimeGoldMultiplier_IsSet)
            {
                if (!lhs.CrimeGoldMultiplier.EqualsWithin(rhs.CrimeGoldMultiplier)) return false;
            }
            if (lhs.Ranks.HasBeenSet != rhs.Ranks.HasBeenSet) return false;
            if (lhs.Ranks.HasBeenSet)
            {
                if (!lhs.Ranks.SequenceEqual(rhs.Ranks)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter lhs,
            IOblivionMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IFactionGetter)lhs,
                rhs: rhs as IFactionGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IFactionGetter)lhs,
                rhs: rhs as IFactionGetter);
        }
        
        public virtual int GetHashCode(IFactionGetter item)
        {
            int ret = 0;
            if (item.Name_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            }
            if (item.Relations.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Relations).CombineHashCode(ret);
            }
            if (item.Flags_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            }
            if (item.CrimeGoldMultiplier_IsSet)
            {
                ret = HashHelper.GetHashCode(item.CrimeGoldMultiplier).CombineHashCode(ret);
            }
            if (item.Ranks.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Ranks).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IFactionGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IFactionGetter)item);
        }
        
        #endregion
        
        
        #region Mutagen
        partial void PostDuplicate(Faction obj, Faction rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Faction(getNextFormKey());
            ret.DeepCopyFieldsFrom((Faction)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Faction)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class FactionSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly FactionSetterTranslationCommon Instance = new FactionSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IFaction item,
            IFactionGetter rhs,
            IFactionGetter def,
            ErrorMaskBuilder errorMask,
            Faction_TranslationMask copyMask)
        {
            ((OblivionMajorRecordSetterTranslationCommon)((IOblivionMajorRecordGetter)item).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Relations.Overall ?? true)
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Relations);
                try
                {
                    item.Relations.SetToWithDefault(
                        rhs: rhs.Relations,
                        def: def?.Relations,
                        converter: (r, d) =>
                        {
                            return r.DeepCopy(
                                copyMask?.Relations?.Specific,
                                def: d);
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Flags);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Flags,
                        rhsHasBeenSet: rhs.Flags_IsSet,
                        defItem: def?.Flags ?? default(Faction.FactionFlag),
                        defHasBeenSet: def?.Flags_IsSet ?? false,
                        outRhsItem: out var rhsFlagsItem,
                        outDefItem: out var defFlagsItem))
                    {
                        item.Flags = rhsFlagsItem;
                    }
                    else
                    {
                        item.Flags_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CrimeGoldMultiplier ?? true)
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.CrimeGoldMultiplier);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.CrimeGoldMultiplier,
                        rhsHasBeenSet: rhs.CrimeGoldMultiplier_IsSet,
                        defItem: def?.CrimeGoldMultiplier ?? default(Single),
                        defHasBeenSet: def?.CrimeGoldMultiplier_IsSet ?? false,
                        outRhsItem: out var rhsCrimeGoldMultiplierItem,
                        outDefItem: out var defCrimeGoldMultiplierItem))
                    {
                        item.CrimeGoldMultiplier = rhsCrimeGoldMultiplierItem;
                    }
                    else
                    {
                        item.CrimeGoldMultiplier_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Ranks.Overall ?? true)
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Ranks);
                try
                {
                    item.Ranks.SetToWithDefault(
                        rhs: rhs.Ranks,
                        def: def?.Ranks,
                        converter: (r, d) =>
                        {
                            return r.DeepCopy(
                                copyMask?.Ranks?.Specific,
                                def: d);
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Faction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Faction_Registration.Instance;
        public new static Faction_Registration Registration => Faction_Registration.Instance;
        protected override object CommonInstance()
        {
            return FactionCommon.Instance;
        }
        protected override object CommonSetterInstance()
        {
            return FactionSetterCommon.Instance;
        }
        protected override object CommonSetterTranslationInstance()
        {
            return FactionSetterTranslationCommon.Instance;
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class FactionXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static FactionXmlWriteTranslation Instance = new FactionXmlWriteTranslation();

        public static void WriteToNodeXml(
            IFactionGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Faction_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Relations.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Relations) ?? true))
            {
                ListXmlTranslation<IRelationGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Relations),
                    item: item.Relations,
                    fieldIndex: (int)Faction_FieldIndex.Relations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.Relations),
                    transl: (XElement subNode, IRelationGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((RelationXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.Flags_IsSet
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Faction.FactionFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Faction_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.CrimeGoldMultiplier_IsSet
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.CrimeGoldMultiplier) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CrimeGoldMultiplier),
                    item: item.CrimeGoldMultiplier,
                    fieldIndex: (int)Faction_FieldIndex.CrimeGoldMultiplier,
                    errorMask: errorMask);
            }
            if (item.Ranks.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Ranks) ?? true))
            {
                ListXmlTranslation<IRankGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Ranks),
                    item: item.Ranks,
                    fieldIndex: (int)Faction_FieldIndex.Ranks,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.Ranks),
                    transl: (XElement subNode, IRankGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((RankXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IFactionGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Faction");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Faction");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IFactionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IFactionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IFactionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class FactionXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static FactionXmlCreateTranslation Instance = new FactionXmlCreateTranslation();

        public static void FillPublicXml(
            IFactionInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FactionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IFactionInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Faction_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Relations":
                    try
                    {
                        errorMask?.PushIndex((int)Faction_FieldIndex.Relations);
                        if (ListXmlTranslation<Relation>.Instance.Parse(
                            node: node,
                            enumer: out var RelationsItem,
                            transl: LoquiXmlTranslation<Relation>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Relations.SetTo(RelationsItem);
                        }
                        else
                        {
                            item.Relations.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Faction_FieldIndex.Flags);
                        if (EnumXmlTranslation<Faction.FactionFlag>.Instance.Parse(
                            node: node,
                            item: out Faction.FactionFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Faction.FactionFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CrimeGoldMultiplier":
                    try
                    {
                        errorMask?.PushIndex((int)Faction_FieldIndex.CrimeGoldMultiplier);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single CrimeGoldMultiplierParse,
                            errorMask: errorMask))
                        {
                            item.CrimeGoldMultiplier = CrimeGoldMultiplierParse;
                        }
                        else
                        {
                            item.CrimeGoldMultiplier = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ranks":
                    try
                    {
                        errorMask?.PushIndex((int)Faction_FieldIndex.Ranks);
                        if (ListXmlTranslation<Rank>.Instance.Parse(
                            node: node,
                            enumer: out var RanksItem,
                            transl: LoquiXmlTranslation<Rank>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Ranks.SetTo(RanksItem);
                        }
                        else
                        {
                            item.Ranks.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class FactionXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IFactionGetter item,
            XElement node,
            out Faction_ErrorMask errorMask,
            bool doMasks = true,
            Faction_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((FactionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IFactionGetter item,
            string path,
            out Faction_ErrorMask errorMask,
            Faction_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFactionGetter item,
            Stream stream,
            out Faction_ErrorMask errorMask,
            Faction_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class Faction_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Faction_Mask<T>>
    {
        #region Ctors
        public Faction_Mask()
        {
        }

        public Faction_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Relations = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Relation_Mask<T>>>>(initialValue, null);
            this.Flags = initialValue;
            this.CrimeGoldMultiplier = initialValue;
            this.Ranks = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Rank_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Name;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Relation_Mask<T>>>> Relations;
        public T Flags;
        public T CrimeGoldMultiplier;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Rank_Mask<T>>>> Ranks;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Faction_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Faction_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Relations, rhs.Relations)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.CrimeGoldMultiplier, rhs.CrimeGoldMultiplier)) return false;
            if (!object.Equals(this.Ranks, rhs.Ranks)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Relations?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.CrimeGoldMultiplier?.GetHashCode());
            ret = ret.CombineHashCode(this.Ranks?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (this.Relations != null)
            {
                if (!eval(this.Relations.Overall)) return false;
                if (this.Relations.Specific != null)
                {
                    foreach (var item in this.Relations.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.Flags)) return false;
            if (!eval(this.CrimeGoldMultiplier)) return false;
            if (this.Ranks != null)
            {
                if (!eval(this.Ranks.Overall)) return false;
                if (this.Ranks.Specific != null)
                {
                    foreach (var item in this.Ranks.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Faction_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Faction_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Faction_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            if (Relations != null)
            {
                obj.Relations = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Relation_Mask<R>>>>();
                obj.Relations.Overall = eval(this.Relations.Overall);
                if (Relations.Specific != null)
                {
                    List<MaskItemIndexed<R, Relation_Mask<R>>> l = new List<MaskItemIndexed<R, Relation_Mask<R>>>();
                    obj.Relations.Specific = l;
                    foreach (var item in Relations.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Relation_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Relation_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.Flags = eval(this.Flags);
            obj.CrimeGoldMultiplier = eval(this.CrimeGoldMultiplier);
            if (Ranks != null)
            {
                obj.Ranks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Rank_Mask<R>>>>();
                obj.Ranks.Overall = eval(this.Ranks.Overall);
                if (Ranks.Specific != null)
                {
                    List<MaskItemIndexed<R, Rank_Mask<R>>> l = new List<MaskItemIndexed<R, Rank_Mask<R>>>();
                    obj.Ranks.Specific = l;
                    foreach (var item in Ranks.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Rank_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Rank_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Relations.Specific = null;
            this.Ranks.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Faction_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Faction_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Faction_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Relations?.Overall ?? true)
                {
                    fg.AppendLine("Relations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Relations.Overall != null)
                        {
                            fg.AppendLine(Relations.Overall.ToString());
                        }
                        if (Relations.Specific != null)
                        {
                            foreach (var subItem in Relations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.CrimeGoldMultiplier ?? true)
                {
                    fg.AppendLine($"CrimeGoldMultiplier => {CrimeGoldMultiplier}");
                }
                if (printMask?.Ranks?.Overall ?? true)
                {
                    fg.AppendLine("Ranks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Ranks.Overall != null)
                        {
                            fg.AppendLine(Ranks.Overall.ToString());
                        }
                        if (Ranks.Specific != null)
                        {
                            foreach (var subItem in Ranks.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Faction_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Faction_ErrorMask>
    {
        #region Members
        public Exception Name;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>> Relations;
        public Exception Flags;
        public Exception CrimeGoldMultiplier;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Rank_ErrorMask>>> Ranks;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                    return Name;
                case Faction_FieldIndex.Relations:
                    return Relations;
                case Faction_FieldIndex.Flags:
                    return Flags;
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return CrimeGoldMultiplier;
                case Faction_FieldIndex.Ranks:
                    return Ranks;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Faction_FieldIndex.Relations:
                    this.Relations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>(ex, null);
                    break;
                case Faction_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    this.CrimeGoldMultiplier = ex;
                    break;
                case Faction_FieldIndex.Ranks:
                    this.Ranks = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Rank_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Faction_FieldIndex.Relations:
                    this.Relations = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>)obj;
                    break;
                case Faction_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    this.CrimeGoldMultiplier = (Exception)obj;
                    break;
                case Faction_FieldIndex.Ranks:
                    this.Ranks = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Rank_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Relations != null) return true;
            if (Flags != null) return true;
            if (CrimeGoldMultiplier != null) return true;
            if (Ranks != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Faction_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine("Relations =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Relations.Overall != null)
                {
                    fg.AppendLine(Relations.Overall.ToString());
                }
                if (Relations.Specific != null)
                {
                    foreach (var subItem in Relations.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"CrimeGoldMultiplier => {CrimeGoldMultiplier}");
            fg.AppendLine("Ranks =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Ranks.Overall != null)
                {
                    fg.AppendLine(Ranks.Overall.ToString());
                }
                if (Ranks.Specific != null)
                {
                    foreach (var subItem in Ranks.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Faction_ErrorMask Combine(Faction_ErrorMask rhs)
        {
            var ret = new Faction_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Relations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>(this.Relations.Overall.Combine(rhs.Relations.Overall), new List<MaskItem<Exception, Relation_ErrorMask>>(this.Relations.Specific.And(rhs.Relations.Specific)));
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.CrimeGoldMultiplier = this.CrimeGoldMultiplier.Combine(rhs.CrimeGoldMultiplier);
            ret.Ranks = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Rank_ErrorMask>>>(this.Ranks.Overall.Combine(rhs.Ranks.Overall), new List<MaskItem<Exception, Rank_ErrorMask>>(this.Ranks.Specific.And(rhs.Ranks.Specific)));
            return ret;
        }
        public static Faction_ErrorMask Combine(Faction_ErrorMask lhs, Faction_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Faction_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Faction_ErrorMask();
        }
        #endregion

    }
    public class Faction_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Name;
        public MaskItem<bool, Relation_TranslationMask> Relations;
        public bool Flags;
        public bool CrimeGoldMultiplier;
        public MaskItem<bool, Rank_TranslationMask> Ranks;
        #endregion

        #region Ctors
        public Faction_TranslationMask()
            : base()
        {
        }

        public Faction_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Relations = new MaskItem<bool, Relation_TranslationMask>(defaultOn, null);
            this.Flags = defaultOn;
            this.CrimeGoldMultiplier = defaultOn;
            this.Ranks = new MaskItem<bool, Rank_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Relations?.Overall ?? true, Relations?.Specific?.GetCrystal()));
            ret.Add((Flags, null));
            ret.Add((CrimeGoldMultiplier, null));
            ret.Add((Ranks?.Overall ?? true, Ranks?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class FactionBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static FactionBinaryWriteTranslation Instance = new FactionBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IFactionGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(Faction_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Relations.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IRelationGetter>.Instance.Write(
                    writer: writer,
                    items: item.Relations,
                    fieldIndex: (int)Faction_FieldIndex.Relations,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IRelationGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((RelationBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
            if (item.Flags_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Faction.FactionFlag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1,
                    header: recordTypeConverter.ConvertToCustom(Faction_Registration.DATA_HEADER),
                    nullable: false);
            }
            if (item.CrimeGoldMultiplier_IsSet)
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CrimeGoldMultiplier,
                    header: recordTypeConverter.ConvertToCustom(Faction_Registration.CNAM_HEADER),
                    nullable: false);
            }
            if (item.Ranks.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IRankGetter>.Instance.Write(
                    writer: writer,
                    items: item.Ranks,
                    fieldIndex: (int)Faction_FieldIndex.Ranks,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IRankGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((RankBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IFactionGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Faction_Registration.FACT_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IFactionGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IFactionGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IFactionGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class FactionBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static FactionBinaryCreateTranslation Instance = new FactionBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class FactionBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFactionGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Faction_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((FactionBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class FactionBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        IFactionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Faction_Registration.Instance;
        public new static Faction_Registration Registration => Faction_Registration.Instance;
        protected override object CommonInstance()
        {
            return FactionCommon.Instance;
        }
        protected override object CommonSetterTranslationInstance()
        {
            return FactionSetterTranslationCommon.Instance;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFactionGetter)rhs, include);

        protected override object XmlWriteTranslator => FactionXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((FactionXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => FactionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((FactionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Name
        private int? _NameLocation;
        public bool Name_IsSet => _NameLocation.HasValue;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default;
        #endregion
        public IReadOnlySetList<IRelationGetter> Relations { get; private set; } = EmptySetList<RelationBinaryWrapper>.Instance;
        #region Flags
        private int? _FlagsLocation;
        public bool Flags_IsSet => _FlagsLocation.HasValue;
        public Faction.FactionFlag Flags => (Faction.FactionFlag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation.Value, _package.Meta)[0];
        #endregion
        #region CrimeGoldMultiplier
        private int? _CrimeGoldMultiplierLocation;
        public bool CrimeGoldMultiplier_IsSet => _CrimeGoldMultiplierLocation.HasValue;
        public Single CrimeGoldMultiplier => _CrimeGoldMultiplierLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordSpan(_data, _CrimeGoldMultiplierLocation.Value, _package.Meta)) : default;
        #endregion
        public IReadOnlySetList<IRankGetter> Ranks { get; private set; } = EmptySetList<RankBinaryWrapper>.Instance;
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected FactionBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static FactionBinaryWrapper FactionFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new FactionBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Name);
                }
                case 0x4D414E58: // XNAM
                {
                    this.Relations = BinaryWrapperSetList<RelationBinaryWrapper>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => RelationBinaryWrapper.RelationFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Relations);
                }
                case 0x41544144: // DATA
                {
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Flags);
                }
                case 0x4D414E43: // CNAM
                {
                    _CrimeGoldMultiplierLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.CrimeGoldMultiplier);
                }
                case 0x4D414E52: // RNAM
                case 0x4D414E4D: // MNAM
                case 0x4D414E46: // FNAM
                case 0x4D414E49: // INAM
                {
                    this.Ranks = this.ParseRepeatedTypelessSubrecord<RankBinaryWrapper>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: Rank_Registration.TriggeringRecordTypes,
                        factory:  RankBinaryWrapper.RankFactory);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Ranks);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

