/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Flora :
        OblivionMajorRecord,
        IFloraInternal,
        ILoquiObjectSetter<Flora>,
        INamed,
        IEquatable<Flora>,
        IEqualsMask
    {
        #region Ctor
        protected Flora()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Flora_FieldIndex.Name];
            set => _hasBeenSetTracker[(int)Flora_FieldIndex.Name] = value;
        }
        bool IFloraGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IFloraGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            _Name = value;
            _hasBeenSetTracker[(int)Flora_FieldIndex.Name] = markSet;
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)Flora_FieldIndex.Model];
            set => _hasBeenSetTracker[(int)Flora_FieldIndex.Model] = value;
        }
        bool IFloraGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool hasBeenSet = true)
        {
            _Model = value;
            _hasBeenSetTracker[(int)Flora_FieldIndex.Model] = hasBeenSet;
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter IFloraGetter.Model => this.Model;
        #endregion
        #region Script
        protected IFormIDSetLink<Script> _Script = new FormIDSetLink<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IFormIDSetLink<Script> Script => this._Script;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLinkGetter<IScriptGetter> IFloraGetter.Script => this.Script;
        #endregion
        #region Ingredient
        protected IFormIDSetLink<Ingredient> _Ingredient = new FormIDSetLink<Ingredient>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IFormIDSetLink<Ingredient> Ingredient => this._Ingredient;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLinkGetter<IIngredientGetter> IFloraGetter.Ingredient => this.Ingredient;
        #endregion
        #region Spring
        private Byte _Spring;
        public Byte Spring
        {
            get => this._Spring;
            set
            {
                this.PFPCDataTypeState |= PFPCDataType.Has;
                this._Spring = value;
            }
        }
        #endregion
        #region Summer
        private Byte _Summer;
        public Byte Summer
        {
            get => this._Summer;
            set
            {
                this.PFPCDataTypeState |= PFPCDataType.Has;
                this._Summer = value;
            }
        }
        #endregion
        #region Fall
        private Byte _Fall;
        public Byte Fall
        {
            get => this._Fall;
            set
            {
                this.PFPCDataTypeState |= PFPCDataType.Has;
                this._Fall = value;
            }
        }
        #endregion
        #region Winter
        private Byte _Winter;
        public Byte Winter
        {
            get => this._Winter;
            set
            {
                this.PFPCDataTypeState |= PFPCDataType.Has;
                this._Winter = value;
            }
        }
        #endregion
        #region PFPCDataTypeState
        public Flora.PFPCDataType PFPCDataTypeState { get; set; }
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            FloraMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IFloraGetter rhs)) return false;
            return ((FloraCommon)((IFloraGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Flora obj)
        {
            return ((FloraCommon)((IFloraGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((FloraCommon)((IFloraGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => FloraXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((FloraXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Flora CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Flora_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Flora CreateFromXml(
            XElement node,
            out Flora_ErrorMask errorMask,
            bool doMasks = true,
            Flora_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Flora_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Flora CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Flora() : null;
                    break;
                default:
                    break;
            }
            var ret = new Flora();
            ((FloraSetterCommon)((IFloraGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Flora CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Flora_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Flora CreateFromXml(
            string path,
            out Flora_ErrorMask errorMask,
            Flora_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Flora CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Flora_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Flora CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Flora_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Flora CreateFromXml(
            Stream stream,
            out Flora_ErrorMask errorMask,
            Flora_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Flora CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Flora_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Flora_FieldIndex)index)
            {
                case Flora_FieldIndex.Name:
                case Flora_FieldIndex.Model:
                case Flora_FieldIndex.Script:
                case Flora_FieldIndex.Ingredient:
                    return _hasBeenSetTracker[index];
                case Flora_FieldIndex.Spring:
                case Flora_FieldIndex.Summer:
                case Flora_FieldIndex.Fall:
                case Flora_FieldIndex.Winter:
                case Flora_FieldIndex.PFPCDataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Flora_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum PFPCDataType
        {
            Has = 1
        }
        public override IEnumerable<ILinkGetter> Links => FloraCommon.Instance.GetLinks(this);
        public Flora(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Flora(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => FloraBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((FloraBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Flora CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Flora CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Flora_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Flora_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Flora CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Flora();
            ((FloraSetterCommon)((IFloraGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFloraGetter)rhs, include);

        void IClearable.Clear()
        {
            ((FloraSetterCommon)((IFloraGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static new Flora GetNew()
        {
            return new Flora();
        }

    }
    #endregion

    #region Interface
    public partial interface IFlora :
        IFloraGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IFloraInternal>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model value, bool hasBeenSet = true);
        void Model_Unset();

        new IFormIDSetLink<Script> Script { get; }
        new IFormIDSetLink<Ingredient> Ingredient { get; }
        new Byte Spring { get; set; }

        new Byte Summer { get; set; }

        new Byte Fall { get; set; }

        new Byte Winter { get; set; }

        new Flora.PFPCDataType PFPCDataTypeState { get; set; }

    }

    public partial interface IFloraInternal :
        IOblivionMajorRecordInternal,
        IFlora,
        IFloraGetter
    {
    }

    public partial interface IFloraGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IFloraGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Model
        IModelGetter Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Script
        IFormIDSetLinkGetter<IScriptGetter> Script { get; }
        #endregion
        #region Ingredient
        IFormIDSetLinkGetter<IIngredientGetter> Ingredient { get; }
        #endregion
        #region Spring
        Byte Spring { get; }

        #endregion
        #region Summer
        Byte Summer { get; }

        #endregion
        #region Fall
        Byte Fall { get; }

        #endregion
        #region Winter
        Byte Winter { get; }

        #endregion
        #region PFPCDataTypeState
        Flora.PFPCDataType PFPCDataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class FloraMixIn
    {
        public static void Clear(this IFloraInternal item)
        {
            ((FloraSetterCommon)((IFloraGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Flora_Mask<bool> GetEqualsMask(
            this IFloraGetter item,
            IFloraGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FloraCommon)((IFloraGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFloraGetter item,
            string name = null,
            Flora_Mask<bool> printMask = null)
        {
            return ((FloraCommon)((IFloraGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFloraGetter item,
            FileGeneration fg,
            string name = null,
            Flora_Mask<bool> printMask = null)
        {
            ((FloraCommon)((IFloraGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IFloraGetter item,
            Flora_Mask<bool?> checkMask)
        {
            return ((FloraCommon)((IFloraGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Flora_Mask<bool> GetHasBeenSetMask(this IFloraGetter item)
        {
            var ret = new Flora_Mask<bool>();
            ((FloraCommon)((IFloraGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IFloraGetter item,
            IFloraGetter rhs)
        {
            return ((FloraCommon)((IFloraGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IFloraInternal lhs,
            IFloraGetter rhs,
            Flora_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IFloraInternal lhs,
            IFloraGetter rhs,
            out Flora_ErrorMask errorMask,
            Flora_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((FloraSetterTranslationCommon)((IFloraGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Flora_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IFloraInternal lhs,
            IFloraGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((FloraSetterTranslationCommon)((IFloraGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Flora DeepCopy(
            this IFloraGetter item,
            Flora_TranslationMask copyMask = null)
        {
            return ((FloraSetterTranslationCommon)((IFloraGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Flora DeepCopy(
            this IFloraGetter item,
            out Flora_ErrorMask errorMask,
            Flora_TranslationMask copyMask = null)
        {
            return ((FloraSetterTranslationCommon)((IFloraGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Flora DeepCopy(
            this IFloraGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((FloraSetterTranslationCommon)((IFloraGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFloraInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Flora_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFloraInternal item,
            XElement node,
            out Flora_ErrorMask errorMask,
            bool doMasks = true,
            Flora_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Flora_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IFloraInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((FloraSetterCommon)((IFloraGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFloraInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            Flora_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFloraInternal item,
            string path,
            out Flora_ErrorMask errorMask,
            Flora_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFloraInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            Flora_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IFloraInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Flora_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFloraInternal item,
            Stream stream,
            out Flora_ErrorMask errorMask,
            Flora_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFloraInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            Flora_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFloraInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFloraInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Flora_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Flora_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this IFloraInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((FloraSetterCommon)((IFloraGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Flora_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Script = 7,
        Ingredient = 8,
        Spring = 9,
        Summer = 10,
        Fall = 11,
        Winter = 12,
        PFPCDataTypeState = 13,
    }
    #endregion

    #region Registration
    public class Flora_Registration : ILoquiRegistration
    {
        public static readonly Flora_Registration Instance = new Flora_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 80,
            version: 0);

        public const string GUID = "5cc7a37a-95ea-4486-8c4c-02c55c3a4566";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(Flora_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Flora_ErrorMask);

        public static readonly Type ClassType = typeof(Flora);

        public static readonly Type GetterType = typeof(IFloraGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFlora);

        public static readonly Type InternalSetterType = typeof(IFloraInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Flora";

        public const string Name = "Flora";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Flora_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Flora_FieldIndex.Model;
                case "SCRIPT":
                    return (ushort)Flora_FieldIndex.Script;
                case "INGREDIENT":
                    return (ushort)Flora_FieldIndex.Ingredient;
                case "SPRING":
                    return (ushort)Flora_FieldIndex.Spring;
                case "SUMMER":
                    return (ushort)Flora_FieldIndex.Summer;
                case "FALL":
                    return (ushort)Flora_FieldIndex.Fall;
                case "WINTER":
                    return (ushort)Flora_FieldIndex.Winter;
                case "PFPCDATATYPESTATE":
                    return (ushort)Flora_FieldIndex.PFPCDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                case Flora_FieldIndex.Model:
                case Flora_FieldIndex.Script:
                case Flora_FieldIndex.Ingredient:
                case Flora_FieldIndex.Spring:
                case Flora_FieldIndex.Summer:
                case Flora_FieldIndex.Fall:
                case Flora_FieldIndex.Winter:
                case Flora_FieldIndex.PFPCDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Model:
                    return true;
                case Flora_FieldIndex.Name:
                case Flora_FieldIndex.Script:
                case Flora_FieldIndex.Ingredient:
                case Flora_FieldIndex.Spring:
                case Flora_FieldIndex.Summer:
                case Flora_FieldIndex.Fall:
                case Flora_FieldIndex.Winter:
                case Flora_FieldIndex.PFPCDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                case Flora_FieldIndex.Model:
                case Flora_FieldIndex.Script:
                case Flora_FieldIndex.Ingredient:
                case Flora_FieldIndex.Spring:
                case Flora_FieldIndex.Summer:
                case Flora_FieldIndex.Fall:
                case Flora_FieldIndex.Winter:
                case Flora_FieldIndex.PFPCDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                    return "Name";
                case Flora_FieldIndex.Model:
                    return "Model";
                case Flora_FieldIndex.Script:
                    return "Script";
                case Flora_FieldIndex.Ingredient:
                    return "Ingredient";
                case Flora_FieldIndex.Spring:
                    return "Spring";
                case Flora_FieldIndex.Summer:
                    return "Summer";
                case Flora_FieldIndex.Fall:
                    return "Fall";
                case Flora_FieldIndex.Winter:
                    return "Winter";
                case Flora_FieldIndex.PFPCDataTypeState:
                    return "PFPCDataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                case Flora_FieldIndex.Model:
                case Flora_FieldIndex.Script:
                case Flora_FieldIndex.Ingredient:
                case Flora_FieldIndex.Spring:
                case Flora_FieldIndex.Summer:
                case Flora_FieldIndex.Fall:
                case Flora_FieldIndex.Winter:
                case Flora_FieldIndex.PFPCDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                case Flora_FieldIndex.Model:
                case Flora_FieldIndex.Script:
                case Flora_FieldIndex.Ingredient:
                case Flora_FieldIndex.Spring:
                case Flora_FieldIndex.Summer:
                case Flora_FieldIndex.Fall:
                case Flora_FieldIndex.Winter:
                case Flora_FieldIndex.PFPCDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                    return typeof(String);
                case Flora_FieldIndex.Model:
                    return typeof(Model);
                case Flora_FieldIndex.Script:
                    return typeof(IFormIDSetLink<Script>);
                case Flora_FieldIndex.Ingredient:
                    return typeof(IFormIDSetLink<Ingredient>);
                case Flora_FieldIndex.Spring:
                    return typeof(Byte);
                case Flora_FieldIndex.Summer:
                    return typeof(Byte);
                case Flora_FieldIndex.Fall:
                    return typeof(Byte);
                case Flora_FieldIndex.Winter:
                    return typeof(Byte);
                case Flora_FieldIndex.PFPCDataTypeState:
                    return typeof(Flora.PFPCDataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(FloraXmlWriteTranslation);
        public static readonly RecordType FLOR_HEADER = new RecordType("FLOR");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType PFIG_HEADER = new RecordType("PFIG");
        public static readonly RecordType PFPC_HEADER = new RecordType("PFPC");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = FLOR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(FloraBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class FloraSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly FloraSetterCommon Instance = new FloraSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFloraInternal item)
        {
            ClearPartial();
            item.Name_Unset();
            item.Model_Unset();
            item.Script.Unset();
            item.Ingredient.Unset();
            item.Spring = default(Byte);
            item.Summer = default(Byte);
            item.Fall = default(Byte);
            item.Winter = default(Byte);
            item.PFPCDataTypeState = default(Flora.PFPCDataType);
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IFloraInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IFloraInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IFloraInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasPFPCDataType":
                    item.PFPCDataTypeState |= Flora.PFPCDataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IFloraInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    FloraXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Flora_Registration.FLOR_HEADER;
        protected static void FillBinaryStructs(
            IFloraInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IFloraInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Flora_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Model);
                        item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Flora_FieldIndex.Model);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: out FormKey ScriptParse))
                    {
                        item.Script.FormKey = ScriptParse;
                    }
                    else
                    {
                        item.Script.FormKey = FormKey.NULL;
                    }
                    return TryGet<int?>.Succeed((int)Flora_FieldIndex.Script);
                }
                case 0x47494650: // PFIG
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: out FormKey IngredientParse))
                    {
                        item.Ingredient.FormKey = IngredientParse;
                    }
                    else
                    {
                        item.Ingredient.FormKey = FormKey.NULL;
                    }
                    return TryGet<int?>.Succeed((int)Flora_FieldIndex.Ingredient);
                }
                case 0x43504650: // PFPC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.PFPCDataTypeState = Flora.PFPCDataType.Has;
                    }
                    item.Spring = dataFrame.ReadUInt8();
                    item.Summer = dataFrame.ReadUInt8();
                    item.Fall = dataFrame.ReadUInt8();
                    item.Winter = dataFrame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)Flora_FieldIndex.Winter);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }
        
        public void CopyInFromBinary(
            IFloraInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.MajorRecordParse<IFloraInternal>(
                record: item,
                frame: frame,
                errorMask: errorMask,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class FloraCommon : OblivionMajorRecordCommon
    {
        public new static readonly FloraCommon Instance = new FloraCommon();

        public Flora_Mask<bool> GetEqualsMask(
            IFloraGetter item,
            IFloraGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Flora_Mask<bool>();
            ((FloraCommon)((IFloraGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFloraGetter item,
            IFloraGetter rhs,
            Flora_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Script = object.Equals(item.Script, rhs.Script);
            ret.Ingredient = object.Equals(item.Ingredient, rhs.Ingredient);
            ret.Spring = item.Spring == rhs.Spring;
            ret.Summer = item.Summer == rhs.Summer;
            ret.Fall = item.Fall == rhs.Fall;
            ret.Winter = item.Winter == rhs.Winter;
            ret.PFPCDataTypeState = item.PFPCDataTypeState == rhs.PFPCDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IFloraGetter item,
            string name = null,
            Flora_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFloraGetter item,
            FileGeneration fg,
            string name = null,
            Flora_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Flora =>");
            }
            else
            {
                fg.AppendLine($"{name} (Flora) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFloraGetter item,
            FileGeneration fg,
            Flora_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendLine($"Script => {item.Script}");
            }
            if (printMask?.Ingredient ?? true)
            {
                fg.AppendLine($"Ingredient => {item.Ingredient}");
            }
            if (printMask?.Spring ?? true)
            {
                fg.AppendLine($"Spring => {item.Spring}");
            }
            if (printMask?.Summer ?? true)
            {
                fg.AppendLine($"Summer => {item.Summer}");
            }
            if (printMask?.Fall ?? true)
            {
                fg.AppendLine($"Fall => {item.Fall}");
            }
            if (printMask?.Winter ?? true)
            {
                fg.AppendLine($"Winter => {item.Winter}");
            }
            if (printMask?.PFPCDataTypeState ?? true)
            {
                fg.AppendLine($"PFPCDataTypeState => {item.PFPCDataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            IFloraGetter item,
            Flora_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script.HasBeenSet) return false;
            if (checkMask.Ingredient.HasValue && checkMask.Ingredient.Value != item.Ingredient.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IFloraGetter item,
            Flora_Mask<bool> mask)
        {
            mask.Name = item.Name_IsSet;
            mask.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, item.Model.GetHasBeenSetMask());
            mask.Script = item.Script.HasBeenSet;
            mask.Ingredient = item.Ingredient.HasBeenSet;
            mask.Spring = true;
            mask.Summer = true;
            mask.Fall = true;
            mask.Winter = true;
            mask.PFPCDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Flora_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Flora_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Flora_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Flora_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Flora_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Flora_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Flora_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Flora_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Flora_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Flora_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Flora_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFloraGetter lhs,
            IFloraGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Name_IsSet != rhs.Name_IsSet) return false;
            if (lhs.Name_IsSet)
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if (lhs.Model_IsSet != rhs.Model_IsSet) return false;
            if (lhs.Model_IsSet)
            {
                if (!object.Equals(lhs.Model, rhs.Model)) return false;
            }
            if (lhs.Script.HasBeenSet != rhs.Script.HasBeenSet) return false;
            if (lhs.Script.HasBeenSet)
            {
                if (!lhs.Script.Equals(rhs.Script)) return false;
            }
            if (lhs.Ingredient.HasBeenSet != rhs.Ingredient.HasBeenSet) return false;
            if (lhs.Ingredient.HasBeenSet)
            {
                if (!lhs.Ingredient.Equals(rhs.Ingredient)) return false;
            }
            if (lhs.Spring != rhs.Spring) return false;
            if (lhs.Summer != rhs.Summer) return false;
            if (lhs.Fall != rhs.Fall) return false;
            if (lhs.Winter != rhs.Winter) return false;
            if (lhs.PFPCDataTypeState != rhs.PFPCDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter lhs,
            IOblivionMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IFloraGetter)lhs,
                rhs: rhs as IFloraGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IFloraGetter)lhs,
                rhs: rhs as IFloraGetter);
        }
        
        public virtual int GetHashCode(IFloraGetter item)
        {
            int ret = 0;
            if (item.Name_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            }
            if (item.Model_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Model).CombineHashCode(ret);
            }
            if (item.Script.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Script).CombineHashCode(ret);
            }
            if (item.Ingredient.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Ingredient).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Spring).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Summer).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Fall).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Winter).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PFPCDataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IFloraGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IFloraGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Flora.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IFloraGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Script;
            yield return obj.Ingredient;
            yield break;
        }
        
        partial void PostDuplicate(Flora obj, Flora rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Flora(getNextFormKey());
            ret.DeepCopyFieldsFrom((Flora)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Flora)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class FloraSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly FloraSetterTranslationCommon Instance = new FloraSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IFloraInternal item,
            IFloraGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyFieldsFrom(
            IFlora item,
            IFloraGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.Name) ?? true))
            {
                errorMask?.PushIndex((int)Flora_FieldIndex.Name);
                try
                {
                    if (rhs.Name_IsSet)
                    {
                        item.Name = rhs.Name;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Flora_FieldIndex.Model);
                try
                {
                    if(rhs.Model_IsSet)
                    {
                        item.Model = rhs.Model.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Flora_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.Script) ?? true))
            {
                errorMask?.PushIndex((int)Flora_FieldIndex.Script);
                try
                {
                    item.Script.SetToFormKey(rhs: rhs.Script);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.Ingredient) ?? true))
            {
                errorMask?.PushIndex((int)Flora_FieldIndex.Ingredient);
                try
                {
                    item.Ingredient.SetToFormKey(rhs: rhs.Ingredient);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.Spring) ?? true))
            {
                item.Spring = rhs.Spring;
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.Summer) ?? true))
            {
                item.Summer = rhs.Summer;
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.Fall) ?? true))
            {
                item.Fall = rhs.Fall;
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.Winter) ?? true))
            {
                item.Winter = rhs.Winter;
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.PFPCDataTypeState) ?? true))
            {
                item.PFPCDataTypeState = rhs.PFPCDataTypeState;
            }
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IFloraInternal)item,
                rhs: (IFloraGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IFlora)item,
                rhs: (IFloraGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IFloraInternal)item,
                rhs: (IFloraGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IFlora)item,
                rhs: (IFloraGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Flora DeepCopy(
            IFloraGetter item,
            Flora_TranslationMask copyMask = null)
        {
            Flora ret = (Flora)((FloraCommon)((IFloraGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Flora DeepCopy(
            IFloraGetter item,
            out Flora_ErrorMask errorMask,
            Flora_TranslationMask copyMask = null)
        {
            Flora ret = (Flora)((FloraCommon)((IFloraGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Flora DeepCopy(
            IFloraGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            Flora ret = (Flora)((FloraCommon)((IFloraGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Flora
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Flora_Registration.Instance;
        public new static Flora_Registration Registration => Flora_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FloraCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FloraSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FloraSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class FloraXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static FloraXmlWriteTranslation Instance = new FloraXmlWriteTranslation();

        public static void WriteToNodeXml(
            IFloraGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Flora_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Flora_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)Flora_FieldIndex.Model) ?? true))
            {
                var loquiItem = item.Model;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)Flora_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Flora_FieldIndex.Model));
            }
            if (item.Script.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Flora_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script?.FormKey,
                    fieldIndex: (int)Flora_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.Ingredient.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Flora_FieldIndex.Ingredient) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Ingredient),
                    item: item.Ingredient?.FormKey,
                    fieldIndex: (int)Flora_FieldIndex.Ingredient,
                    errorMask: errorMask);
            }
            if (item.PFPCDataTypeState.HasFlag(Flora.PFPCDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Flora_FieldIndex.Spring) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Spring),
                        item: item.Spring,
                        fieldIndex: (int)Flora_FieldIndex.Spring,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Flora_FieldIndex.Summer) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Summer),
                        item: item.Summer,
                        fieldIndex: (int)Flora_FieldIndex.Summer,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Flora_FieldIndex.Fall) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Fall),
                        item: item.Fall,
                        fieldIndex: (int)Flora_FieldIndex.Fall,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Flora_FieldIndex.Winter) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Winter),
                        item: item.Winter,
                        fieldIndex: (int)Flora_FieldIndex.Winter,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Flora_FieldIndex.PFPCDataTypeState) ?? true))
            {
                EnumXmlTranslation<Flora.PFPCDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.PFPCDataTypeState),
                    item: item.PFPCDataTypeState,
                    fieldIndex: (int)Flora_FieldIndex.PFPCDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IFloraGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Flora");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Flora");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IFloraGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IFloraGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IFloraGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class FloraXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static FloraXmlCreateTranslation Instance = new FloraXmlCreateTranslation();

        public static void FillPublicXml(
            IFloraInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FloraXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IFloraInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Flora_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Script);
                        if (FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out FormKey ScriptParse,
                            errorMask: errorMask))
                        {
                            item.Script.FormKey = ScriptParse;
                        }
                        else
                        {
                            item.Script.FormKey = FormKey.NULL;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ingredient":
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Ingredient);
                        if (FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out FormKey IngredientParse,
                            errorMask: errorMask))
                        {
                            item.Ingredient.FormKey = IngredientParse;
                        }
                        else
                        {
                            item.Ingredient.FormKey = FormKey.NULL;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Spring":
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Spring);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte SpringParse,
                            errorMask: errorMask))
                        {
                            item.Spring = SpringParse;
                        }
                        else
                        {
                            item.Spring = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.PFPCDataTypeState |= Flora.PFPCDataType.Has;
                    break;
                case "Summer":
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Summer);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte SummerParse,
                            errorMask: errorMask))
                        {
                            item.Summer = SummerParse;
                        }
                        else
                        {
                            item.Summer = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fall":
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Fall);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte FallParse,
                            errorMask: errorMask))
                        {
                            item.Fall = FallParse;
                        }
                        else
                        {
                            item.Fall = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Winter":
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Winter);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte WinterParse,
                            errorMask: errorMask))
                        {
                            item.Winter = WinterParse;
                        }
                        else
                        {
                            item.Winter = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PFPCDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.PFPCDataTypeState);
                        if (EnumXmlTranslation<Flora.PFPCDataType>.Instance.Parse(
                            node: node,
                            item: out Flora.PFPCDataType PFPCDataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.PFPCDataTypeState = PFPCDataTypeStateParse;
                        }
                        else
                        {
                            item.PFPCDataTypeState = default(Flora.PFPCDataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class FloraXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IFloraGetter item,
            XElement node,
            out Flora_ErrorMask errorMask,
            bool doMasks = true,
            Flora_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((FloraXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Flora_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IFloraGetter item,
            string path,
            out Flora_ErrorMask errorMask,
            Flora_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFloraGetter item,
            Stream stream,
            out Flora_ErrorMask errorMask,
            Flora_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class Flora_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Flora_Mask<T>>
    {
        #region Ctors
        public Flora_Mask()
        {
        }

        public Flora_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Script = initialValue;
            this.Ingredient = initialValue;
            this.Spring = initialValue;
            this.Summer = initialValue;
            this.Fall = initialValue;
            this.Winter = initialValue;
            this.PFPCDataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Script;
        public T Ingredient;
        public T Spring;
        public T Summer;
        public T Fall;
        public T Winter;
        public T PFPCDataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Flora_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Flora_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Ingredient, rhs.Ingredient)) return false;
            if (!object.Equals(this.Spring, rhs.Spring)) return false;
            if (!object.Equals(this.Summer, rhs.Summer)) return false;
            if (!object.Equals(this.Fall, rhs.Fall)) return false;
            if (!object.Equals(this.Winter, rhs.Winter)) return false;
            if (!object.Equals(this.PFPCDataTypeState, rhs.PFPCDataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Ingredient?.GetHashCode());
            ret = ret.CombineHashCode(this.Spring?.GetHashCode());
            ret = ret.CombineHashCode(this.Summer?.GetHashCode());
            ret = ret.CombineHashCode(this.Fall?.GetHashCode());
            ret = ret.CombineHashCode(this.Winter?.GetHashCode());
            ret = ret.CombineHashCode(this.PFPCDataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Script)) return false;
            if (!eval(this.Ingredient)) return false;
            if (!eval(this.Spring)) return false;
            if (!eval(this.Summer)) return false;
            if (!eval(this.Fall)) return false;
            if (!eval(this.Winter)) return false;
            if (!eval(this.PFPCDataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Flora_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Flora_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Flora_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Script = eval(this.Script);
            obj.Ingredient = eval(this.Ingredient);
            obj.Spring = eval(this.Spring);
            obj.Summer = eval(this.Summer);
            obj.Fall = eval(this.Fall);
            obj.Winter = eval(this.Winter);
            obj.PFPCDataTypeState = eval(this.PFPCDataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Flora_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Flora_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Flora_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Ingredient ?? true)
                {
                    fg.AppendLine($"Ingredient => {Ingredient}");
                }
                if (printMask?.Spring ?? true)
                {
                    fg.AppendLine($"Spring => {Spring}");
                }
                if (printMask?.Summer ?? true)
                {
                    fg.AppendLine($"Summer => {Summer}");
                }
                if (printMask?.Fall ?? true)
                {
                    fg.AppendLine($"Fall => {Fall}");
                }
                if (printMask?.Winter ?? true)
                {
                    fg.AppendLine($"Winter => {Winter}");
                }
                if (printMask?.PFPCDataTypeState ?? true)
                {
                    fg.AppendLine($"PFPCDataTypeState => {PFPCDataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Flora_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Flora_ErrorMask>
    {
        #region Members
        public Exception Name;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Script;
        public Exception Ingredient;
        public Exception Spring;
        public Exception Summer;
        public Exception Fall;
        public Exception Winter;
        public Exception PFPCDataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                    return Name;
                case Flora_FieldIndex.Model:
                    return Model;
                case Flora_FieldIndex.Script:
                    return Script;
                case Flora_FieldIndex.Ingredient:
                    return Ingredient;
                case Flora_FieldIndex.Spring:
                    return Spring;
                case Flora_FieldIndex.Summer:
                    return Summer;
                case Flora_FieldIndex.Fall:
                    return Fall;
                case Flora_FieldIndex.Winter:
                    return Winter;
                case Flora_FieldIndex.PFPCDataTypeState:
                    return PFPCDataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Flora_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Flora_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Flora_FieldIndex.Ingredient:
                    this.Ingredient = ex;
                    break;
                case Flora_FieldIndex.Spring:
                    this.Spring = ex;
                    break;
                case Flora_FieldIndex.Summer:
                    this.Summer = ex;
                    break;
                case Flora_FieldIndex.Fall:
                    this.Fall = ex;
                    break;
                case Flora_FieldIndex.Winter:
                    this.Winter = ex;
                    break;
                case Flora_FieldIndex.PFPCDataTypeState:
                    this.PFPCDataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Flora_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Flora_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Flora_FieldIndex.Ingredient:
                    this.Ingredient = (Exception)obj;
                    break;
                case Flora_FieldIndex.Spring:
                    this.Spring = (Exception)obj;
                    break;
                case Flora_FieldIndex.Summer:
                    this.Summer = (Exception)obj;
                    break;
                case Flora_FieldIndex.Fall:
                    this.Fall = (Exception)obj;
                    break;
                case Flora_FieldIndex.Winter:
                    this.Winter = (Exception)obj;
                    break;
                case Flora_FieldIndex.PFPCDataTypeState:
                    this.PFPCDataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Model != null) return true;
            if (Script != null) return true;
            if (Ingredient != null) return true;
            if (Spring != null) return true;
            if (Summer != null) return true;
            if (Fall != null) return true;
            if (Winter != null) return true;
            if (PFPCDataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Flora_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            Model?.ToString(fg);
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Ingredient => {Ingredient}");
            fg.AppendLine($"Spring => {Spring}");
            fg.AppendLine($"Summer => {Summer}");
            fg.AppendLine($"Fall => {Fall}");
            fg.AppendLine($"Winter => {Winter}");
            fg.AppendLine($"PFPCDataTypeState => {PFPCDataTypeState}");
        }
        #endregion

        #region Combine
        public Flora_ErrorMask Combine(Flora_ErrorMask rhs)
        {
            var ret = new Flora_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Ingredient = this.Ingredient.Combine(rhs.Ingredient);
            ret.Spring = this.Spring.Combine(rhs.Spring);
            ret.Summer = this.Summer.Combine(rhs.Summer);
            ret.Fall = this.Fall.Combine(rhs.Fall);
            ret.Winter = this.Winter.Combine(rhs.Winter);
            ret.PFPCDataTypeState = this.PFPCDataTypeState.Combine(rhs.PFPCDataTypeState);
            return ret;
        }
        public static Flora_ErrorMask Combine(Flora_ErrorMask lhs, Flora_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static new Flora_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Flora_ErrorMask();
        }
        #endregion

    }
    public class Flora_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Name;
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Script;
        public bool Ingredient;
        public bool Spring;
        public bool Summer;
        public bool Fall;
        public bool Winter;
        public bool PFPCDataTypeState;
        #endregion

        #region Ctors
        public Flora_TranslationMask()
            : base()
        {
        }

        public Flora_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.Script = defaultOn;
            this.Ingredient = defaultOn;
            this.Spring = defaultOn;
            this.Summer = defaultOn;
            this.Fall = defaultOn;
            this.Winter = defaultOn;
            this.PFPCDataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Script, null));
            ret.Add((Ingredient, null));
            ret.Add((Spring, null));
            ret.Add((Summer, null));
            ret.Add((Fall, null));
            ret.Add((Winter, null));
            ret.Add((PFPCDataTypeState, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class FloraBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static FloraBinaryWriteTranslation Instance = new FloraBinaryWriteTranslation();

        public static void Write_Embedded(
            IFloraGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IFloraGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(Flora_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Model_IsSet)
            {
                var loquiItem = item.Model;
                ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Script.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Script,
                    header: recordTypeConverter.ConvertToCustom(Flora_Registration.SCRI_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Ingredient.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Ingredient,
                    header: recordTypeConverter.ConvertToCustom(Flora_Registration.PFIG_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.PFPCDataTypeState.HasFlag(Flora.PFPCDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Flora_Registration.PFPC_HEADER)))
                {
                    writer.Write(item.Spring);
                    writer.Write(item.Summer);
                    writer.Write(item.Fall);
                    writer.Write(item.Winter);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IFloraGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Flora_Registration.FLOR_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IFloraGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IFloraGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IFloraGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class FloraBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static FloraBinaryCreateTranslation Instance = new FloraBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class FloraBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFloraGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Flora_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((FloraBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Flora_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class FloraBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        IFloraGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Flora_Registration.Instance;
        public new static Flora_Registration Registration => Flora_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FloraCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FloraSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFloraGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => FloraCommon.Instance.GetLinks(this);
        protected override object XmlWriteTranslator => FloraXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((FloraXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => FloraBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((FloraBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Name
        private int? _NameLocation;
        public bool Name_IsSet => _NameLocation.HasValue;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default;
        #endregion
        #region Model
        public IModelGetter Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormIDSetLinkGetter<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormIDSetLink<IScriptGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormIDSetLink<IScriptGetter>.Empty;
        #endregion
        #region Ingredient
        private int? _IngredientLocation;
        public bool Ingredient_IsSet => _IngredientLocation.HasValue;
        public IFormIDSetLinkGetter<IIngredientGetter> Ingredient => _IngredientLocation.HasValue ? new FormIDSetLink<IIngredientGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _IngredientLocation.Value, _package.Meta)))) : FormIDSetLink<IIngredientGetter>.Empty;
        #endregion
        private int? _PFPCLocation;
        public Flora.PFPCDataType PFPCDataTypeState { get; private set; }
        #region Spring
        private int _SpringLocation => _PFPCLocation.Value + 0x0;
        private bool _Spring_IsSet => _PFPCLocation.HasValue;
        public Byte Spring => _Spring_IsSet ? _data.Span[_SpringLocation] : default;
        #endregion
        #region Summer
        private int _SummerLocation => _PFPCLocation.Value + 0x1;
        private bool _Summer_IsSet => _PFPCLocation.HasValue;
        public Byte Summer => _Summer_IsSet ? _data.Span[_SummerLocation] : default;
        #endregion
        #region Fall
        private int _FallLocation => _PFPCLocation.Value + 0x2;
        private bool _Fall_IsSet => _PFPCLocation.HasValue;
        public Byte Fall => _Fall_IsSet ? _data.Span[_FallLocation] : default;
        #endregion
        #region Winter
        private int _WinterLocation => _PFPCLocation.Value + 0x3;
        private bool _Winter_IsSet => _PFPCLocation.HasValue;
        public Byte Winter => _Winter_IsSet ? _data.Span[_WinterLocation] : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected FloraBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static FloraBinaryWrapper FloraFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new FloraBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Flora_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryWrapper.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Flora_FieldIndex.Model);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Flora_FieldIndex.Script);
                }
                case 0x47494650: // PFIG
                {
                    _IngredientLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Flora_FieldIndex.Ingredient);
                }
                case 0x43504650: // PFPC
                {
                    _PFPCLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.PFPCDataTypeState = Flora.PFPCDataType.Has;
                    return TryGet<int?>.Succeed((int)Flora_FieldIndex.Winter);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

