/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class IdleAnimation :
        OblivionMajorRecord,
        IIdleAnimationInternal,
        ILoquiObjectSetter<IdleAnimation>,
        IEquatable<IdleAnimation>,
        IEqualsMask
    {
        #region Ctor
        protected IdleAnimation()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IIdleAnimationGetter.Model => this.Model;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition>? _Conditions;
        public ExtendedList<Condition>? Conditions
        {
            get => this._Conditions;
            set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter>? IIdleAnimationGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region AnimationGroupSection
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IdleAnimation.AnimationGroupSectionEnum? _AnimationGroupSection;
        public IdleAnimation.AnimationGroupSectionEnum? AnimationGroupSection
        {
            get => this._AnimationGroupSection;
            set => this._AnimationGroupSection = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IdleAnimation.AnimationGroupSectionEnum? IIdleAnimationGetter.AnimationGroupSection => this.AnimationGroupSection;
        #endregion
        #region RelatedIdleAnimations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IdleAnimation>>? _RelatedIdleAnimations;
        public ExtendedList<IFormLink<IdleAnimation>>? RelatedIdleAnimations
        {
            get => this._RelatedIdleAnimations;
            set => this._RelatedIdleAnimations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IIdleAnimationGetter>>? IIdleAnimationGetter.RelatedIdleAnimations => _RelatedIdleAnimations;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            IdleAnimationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IIdleAnimationGetter rhs)) return false;
            return ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IdleAnimation obj)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => IdleAnimationXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((IdleAnimationXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new IdleAnimation CreateFromXml(
            XElement node,
            IdleAnimation.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static IdleAnimation CreateFromXml(
            XElement node,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = IdleAnimation.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static IdleAnimation CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new IdleAnimation();
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static IdleAnimation CreateFromXml(
            string path,
            IdleAnimation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static IdleAnimation CreateFromXml(
            string path,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static IdleAnimation CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            IdleAnimation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static IdleAnimation CreateFromXml(
            Stream stream,
            IdleAnimation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static IdleAnimation CreateFromXml(
            Stream stream,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static IdleAnimation CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            IdleAnimation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.AnimationGroupSection = initialValue;
                this.RelatedIdleAnimations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Model,
                TItem Conditions,
                TItem AnimationGroupSection,
                TItem RelatedIdleAnimations)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.AnimationGroupSection = AnimationGroupSection;
                this.RelatedIdleAnimations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RelatedIdleAnimations, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem AnimationGroupSection;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RelatedIdleAnimations;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.AnimationGroupSection, rhs.AnimationGroupSection)) return false;
                if (!object.Equals(this.RelatedIdleAnimations, rhs.RelatedIdleAnimations)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Model?.GetHashCode());
                ret = ret.CombineHashCode(this.Conditions?.GetHashCode());
                ret = ret.CombineHashCode(this.AnimationGroupSection?.GetHashCode());
                ret = ret.CombineHashCode(this.RelatedIdleAnimations?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.AnimationGroupSection)) return false;
                if (this.RelatedIdleAnimations != null)
                {
                    if (!eval(this.RelatedIdleAnimations.Overall)) return false;
                    if (this.RelatedIdleAnimations.Specific != null)
                    {
                        foreach (var item in this.RelatedIdleAnimations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.AnimationGroupSection)) return true;
                if (this.RelatedIdleAnimations != null)
                {
                    if (eval(this.RelatedIdleAnimations.Overall)) return true;
                    if (this.RelatedIdleAnimations.Specific != null)
                    {
                        foreach (var item in this.RelatedIdleAnimations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new IdleAnimation.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.AnimationGroupSection = eval(this.AnimationGroupSection);
                if (RelatedIdleAnimations != null)
                {
                    obj.RelatedIdleAnimations = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RelatedIdleAnimations.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RelatedIdleAnimations.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RelatedIdleAnimations.Specific = l;
                        foreach (var item in RelatedIdleAnimations.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(IdleAnimation.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, IdleAnimation.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(IdleAnimation.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.AnimationGroupSection ?? true)
                    {
                        fg.AppendItem(AnimationGroupSection, "AnimationGroupSection");
                    }
                    if ((printMask?.RelatedIdleAnimations?.Overall ?? true)
                        && RelatedIdleAnimations.TryGet(out var RelatedIdleAnimationsItem))
                    {
                        fg.AppendLine("RelatedIdleAnimations =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RelatedIdleAnimationsItem.Overall);
                            if (RelatedIdleAnimationsItem.Specific != null)
                            {
                                foreach (var subItem in RelatedIdleAnimationsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? AnimationGroupSection;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RelatedIdleAnimations;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
                switch (enu)
                {
                    case IdleAnimation_FieldIndex.Model:
                        return Model;
                    case IdleAnimation_FieldIndex.Conditions:
                        return Conditions;
                    case IdleAnimation_FieldIndex.AnimationGroupSection:
                        return AnimationGroupSection;
                    case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                        return RelatedIdleAnimations;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
                switch (enu)
                {
                    case IdleAnimation_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case IdleAnimation_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case IdleAnimation_FieldIndex.AnimationGroupSection:
                        this.AnimationGroupSection = ex;
                        break;
                    case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                        this.RelatedIdleAnimations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
                switch (enu)
                {
                    case IdleAnimation_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case IdleAnimation_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case IdleAnimation_FieldIndex.AnimationGroupSection:
                        this.AnimationGroupSection = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                        this.RelatedIdleAnimations = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Model != null) return true;
                if (Conditions != null) return true;
                if (AnimationGroupSection != null) return true;
                if (RelatedIdleAnimations != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                Model?.ToString(fg);
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(AnimationGroupSection, "AnimationGroupSection");
                if (RelatedIdleAnimations.TryGet(out var RelatedIdleAnimationsItem))
                {
                    fg.AppendLine("RelatedIdleAnimations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RelatedIdleAnimationsItem.Overall);
                        if (RelatedIdleAnimationsItem.Specific != null)
                        {
                            foreach (var subItem in RelatedIdleAnimationsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.AnimationGroupSection = this.AnimationGroupSection.Combine(rhs.AnimationGroupSection);
                ret.RelatedIdleAnimations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.RelatedIdleAnimations?.Overall, rhs.RelatedIdleAnimations?.Overall), ExceptionExt.Combine(this.RelatedIdleAnimations?.Specific, rhs.RelatedIdleAnimations?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, Model.TranslationMask?> Model;
            public MaskItem<bool, Condition.TranslationMask?> Conditions;
            public bool AnimationGroupSection;
            public bool RelatedIdleAnimations;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Conditions = new MaskItem<bool, Condition.TranslationMask?>(defaultOn, null);
                this.AnimationGroupSection = defaultOn;
                this.RelatedIdleAnimations = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
                ret.Add((AnimationGroupSection, null));
                ret.Add((RelatedIdleAnimations, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = IdleAnimation_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => IdleAnimationCommon.Instance.GetLinks(this);
        public IdleAnimation(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public IdleAnimation(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => IdleAnimationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((IdleAnimationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new IdleAnimation CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static IdleAnimation CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new IdleAnimation();
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IIdleAnimationGetter)rhs, include);

        void IClearable.Clear()
        {
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new IdleAnimation GetNew()
        {
            return new IdleAnimation();
        }

    }
    #endregion

    #region Interface
    public partial interface IIdleAnimation :
        IIdleAnimationGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IIdleAnimationInternal>
    {
        new Model? Model { get; set; }
        new ExtendedList<Condition>? Conditions { get; set; }
        new IdleAnimation.AnimationGroupSectionEnum? AnimationGroupSection { get; set; }
        new ExtendedList<IFormLink<IdleAnimation>>? RelatedIdleAnimations { get; set; }
    }

    public partial interface IIdleAnimationInternal :
        IOblivionMajorRecordInternal,
        IIdleAnimation,
        IIdleAnimationGetter
    {
    }

    public partial interface IIdleAnimationGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IIdleAnimationGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        IModelGetter? Model { get; }
        IReadOnlyList<IConditionGetter>? Conditions { get; }
        IdleAnimation.AnimationGroupSectionEnum? AnimationGroupSection { get; }
        IReadOnlyList<IFormLinkGetter<IIdleAnimationGetter>>? RelatedIdleAnimations { get; }

    }

    #endregion

    #region Common MixIn
    public static class IdleAnimationMixIn
    {
        public static void Clear(this IIdleAnimationInternal item)
        {
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static IdleAnimation.Mask<bool> GetEqualsMask(
            this IIdleAnimationGetter item,
            IIdleAnimationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IIdleAnimationGetter item,
            string? name = null,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IIdleAnimationGetter item,
            FileGeneration fg,
            string? name = null,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IIdleAnimationGetter item,
            IdleAnimation.Mask<bool?> checkMask)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static IdleAnimation.Mask<bool> GetHasBeenSetMask(this IIdleAnimationGetter item)
        {
            var ret = new IdleAnimation.Mask<bool>(false);
            ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IIdleAnimationGetter item,
            IIdleAnimationGetter rhs)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IIdleAnimationInternal lhs,
            IIdleAnimationGetter rhs,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = IdleAnimation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IIdleAnimationInternal lhs,
            IIdleAnimationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static IdleAnimation DeepCopy(
            this IIdleAnimationGetter item,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            return ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static IdleAnimation DeepCopy(
            this IIdleAnimationGetter item,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            return ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static IdleAnimation DeepCopy(
            this IIdleAnimationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IIdleAnimationInternal item,
            XElement node,
            IdleAnimation.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IIdleAnimationInternal item,
            XElement node,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = IdleAnimation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IIdleAnimationInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIdleAnimationInternal item,
            string path,
            IdleAnimation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIdleAnimationInternal item,
            string path,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIdleAnimationInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            IdleAnimation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IIdleAnimationInternal item,
            Stream stream,
            IdleAnimation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIdleAnimationInternal item,
            Stream stream,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIdleAnimationInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            IdleAnimation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IIdleAnimationInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IIdleAnimationInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum IdleAnimation_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Model = 5,
        Conditions = 6,
        AnimationGroupSection = 7,
        RelatedIdleAnimations = 8,
    }
    #endregion

    #region Registration
    public partial class IdleAnimation_Registration : ILoquiRegistration
    {
        public static readonly IdleAnimation_Registration Instance = new IdleAnimation_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 156,
            version: 0);

        public const string GUID = "899444e1-4339-4d2c-8fdc-f6c32c68050b";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(IdleAnimation.Mask<>);

        public static readonly Type ErrorMaskType = typeof(IdleAnimation.ErrorMask);

        public static readonly Type ClassType = typeof(IdleAnimation);

        public static readonly Type GetterType = typeof(IIdleAnimationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IIdleAnimation);

        public static readonly Type? InternalSetterType = typeof(IIdleAnimationInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.IdleAnimation";

        public const string Name = "IdleAnimation";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)IdleAnimation_FieldIndex.Model;
                case "CONDITIONS":
                    return (ushort)IdleAnimation_FieldIndex.Conditions;
                case "ANIMATIONGROUPSECTION":
                    return (ushort)IdleAnimation_FieldIndex.AnimationGroupSection;
                case "RELATEDIDLEANIMATIONS":
                    return (ushort)IdleAnimation_FieldIndex.RelatedIdleAnimations;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Conditions:
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    return true;
                case IdleAnimation_FieldIndex.Model:
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                case IdleAnimation_FieldIndex.Conditions:
                    return true;
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                case IdleAnimation_FieldIndex.Conditions:
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                    return "Model";
                case IdleAnimation_FieldIndex.Conditions:
                    return "Conditions";
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                    return "AnimationGroupSection";
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    return "RelatedIdleAnimations";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                case IdleAnimation_FieldIndex.Conditions:
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                case IdleAnimation_FieldIndex.Conditions:
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                    return typeof(Model);
                case IdleAnimation_FieldIndex.Conditions:
                    return typeof(ExtendedList<Condition>);
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                    return typeof(IdleAnimation.AnimationGroupSectionEnum);
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    return typeof(ExtendedList<IFormLink<IdleAnimation>>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(IdleAnimationXmlWriteTranslation);
        public static readonly RecordType IDLE_HEADER = new RecordType("IDLE");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = IDLE_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(IdleAnimationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class IdleAnimationSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly IdleAnimationSetterCommon Instance = new IdleAnimationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IIdleAnimationInternal item)
        {
            ClearPartial();
            item.Model = null;
            item.Conditions = null;
            item.AnimationGroupSection = default;
            item.RelatedIdleAnimations = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IIdleAnimationInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IIdleAnimationInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IIdleAnimationInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IIdleAnimationInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    IdleAnimationXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => IdleAnimation_Registration.IDLE_HEADER;
        protected static void FillBinaryStructs(
            IIdleAnimationInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IIdleAnimationInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)IdleAnimation_FieldIndex.Model);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    item.Conditions = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                            lengthLength: frame.MetaData.SubConstants.LengthLength,
                            transl: (MutagenFrame r, out Condition listSubItem) =>
                            {
                                return LoquiBinaryTranslation<Condition>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem,
                                    masterReferences: masterReferences);
                            })
                        .ToExtendedList<Condition>();
                    return TryGet<int?>.Succeed((int)IdleAnimation_FieldIndex.Conditions);
                }
                case 0x4D414E41: // ANAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.AnimationGroupSection = EnumBinaryTranslation<IdleAnimation.AnimationGroupSectionEnum>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)IdleAnimation_FieldIndex.AnimationGroupSection);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.RelatedIdleAnimations = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IdleAnimation>>.Instance.ParseRepeatedItem(
                            frame: frame.SpawnWithLength(contentLength),
                            masterReferences: masterReferences,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<IdleAnimation>>();
                    return TryGet<int?>.Succeed((int)IdleAnimation_FieldIndex.RelatedIdleAnimations);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IIdleAnimationInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IIdleAnimationInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class IdleAnimationCommon : OblivionMajorRecordCommon
    {
        public new static readonly IdleAnimationCommon Instance = new IdleAnimationCommon();

        public IdleAnimation.Mask<bool> GetEqualsMask(
            IIdleAnimationGetter item,
            IIdleAnimationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new IdleAnimation.Mask<bool>(false);
            ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IIdleAnimationGetter item,
            IIdleAnimationGetter rhs,
            IdleAnimation.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.AnimationGroupSection = item.AnimationGroupSection == rhs.AnimationGroupSection;
            ret.RelatedIdleAnimations = item.RelatedIdleAnimations.CollectionEqualsHelper(
                rhs.RelatedIdleAnimations,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IIdleAnimationGetter item,
            string? name = null,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IIdleAnimationGetter item,
            FileGeneration fg,
            string? name = null,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"IdleAnimation =>");
            }
            else
            {
                fg.AppendLine($"{name} (IdleAnimation) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IIdleAnimationGetter item,
            FileGeneration fg,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Conditions?.Overall ?? true)
                && item.Conditions.TryGet(out var ConditionsItem))
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ConditionsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.AnimationGroupSection ?? true)
                && item.AnimationGroupSection.TryGet(out var AnimationGroupSectionItem))
            {
                fg.AppendItem(AnimationGroupSectionItem, "AnimationGroupSection");
            }
            if ((printMask?.RelatedIdleAnimations?.Overall ?? true)
                && item.RelatedIdleAnimations.TryGet(out var RelatedIdleAnimationsItem))
            {
                fg.AppendLine("RelatedIdleAnimations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in RelatedIdleAnimationsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IIdleAnimationGetter item,
            IdleAnimation.Mask<bool?> checkMask)
        {
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Conditions?.Overall.HasValue ?? false && checkMask.Conditions!.Overall.Value != (item.Conditions != null)) return false;
            if (checkMask.AnimationGroupSection.HasValue && checkMask.AnimationGroupSection.Value != (item.AnimationGroupSection != null)) return false;
            if (checkMask.RelatedIdleAnimations?.Overall.HasValue ?? false && checkMask.RelatedIdleAnimations!.Overall.Value != (item.RelatedIdleAnimations != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IIdleAnimationGetter item,
            IdleAnimation.Mask<bool> mask)
        {
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            if (item.Conditions.TryGet(out var ConditionsItem))
            {
                mask.Conditions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Condition.Mask<bool>?>>?>(true, ConditionsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Condition.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            mask.AnimationGroupSection = (item.AnimationGroupSection != null);
            mask.RelatedIdleAnimations = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.RelatedIdleAnimations != null), default);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static IdleAnimation_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (IdleAnimation_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (IdleAnimation_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (IdleAnimation_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (IdleAnimation_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (IdleAnimation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new IdleAnimation_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (IdleAnimation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (IdleAnimation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (IdleAnimation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (IdleAnimation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IIdleAnimationGetter? lhs,
            IIdleAnimationGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!lhs.Conditions.SequenceEqual(rhs.Conditions)) return false;
            if (lhs.AnimationGroupSection != rhs.AnimationGroupSection) return false;
            if (!lhs.RelatedIdleAnimations.SequenceEqual(rhs.RelatedIdleAnimations)) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IIdleAnimationGetter?)lhs,
                rhs: rhs as IIdleAnimationGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IIdleAnimationGetter?)lhs,
                rhs: rhs as IIdleAnimationGetter);
        }
        
        public virtual int GetHashCode(IIdleAnimationGetter item)
        {
            int ret = 0;
            if (item.Model.TryGet(out var Modelitem))
            {
                ret = HashHelper.GetHashCode(Modelitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Conditions).CombineHashCode(ret);
            if (item.AnimationGroupSection.TryGet(out var AnimationGroupSectionitem))
            {
                ret = HashHelper.GetHashCode(AnimationGroupSectionitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.RelatedIdleAnimations).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IIdleAnimationGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IIdleAnimationGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return IdleAnimation.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IIdleAnimationGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            if (obj.RelatedIdleAnimations != null)
            {
                foreach (var item in obj.RelatedIdleAnimations)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        partial void PostDuplicate(IdleAnimation obj, IdleAnimation rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new IdleAnimation(getNextFormKey());
            ret.DeepCopyIn((IdleAnimation)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (IdleAnimation)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class IdleAnimationSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly IdleAnimationSetterTranslationCommon Instance = new IdleAnimationSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IIdleAnimationInternal item,
            IIdleAnimationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IIdleAnimation item,
            IIdleAnimationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)IdleAnimation_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)IdleAnimation_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)IdleAnimation_FieldIndex.Conditions);
                try
                {
                    if ((rhs.Conditions != null))
                    {
                        item.Conditions = 
                            rhs.Conditions
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Condition>();
                    }
                    else
                    {
                        item.Conditions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.AnimationGroupSection) ?? true))
            {
                item.AnimationGroupSection = rhs.AnimationGroupSection;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.RelatedIdleAnimations) ?? true))
            {
                errorMask?.PushIndex((int)IdleAnimation_FieldIndex.RelatedIdleAnimations);
                try
                {
                    if ((rhs.RelatedIdleAnimations != null))
                    {
                        item.RelatedIdleAnimations = 
                            rhs.RelatedIdleAnimations
                            .Select(r => new FormLink<IdleAnimation>(r.FormKey))
                            .ToExtendedList<IFormLink<IdleAnimation>>();
                    }
                    else
                    {
                        item.RelatedIdleAnimations = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IIdleAnimationInternal)item,
                rhs: (IIdleAnimationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IIdleAnimation)item,
                rhs: (IIdleAnimationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IIdleAnimationInternal)item,
                rhs: (IIdleAnimationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IIdleAnimation)item,
                rhs: (IIdleAnimationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public IdleAnimation DeepCopy(
            IIdleAnimationGetter item,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            IdleAnimation ret = (IdleAnimation)((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public IdleAnimation DeepCopy(
            IIdleAnimationGetter item,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            IdleAnimation ret = (IdleAnimation)((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public IdleAnimation DeepCopy(
            IIdleAnimationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            IdleAnimation ret = (IdleAnimation)((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class IdleAnimation
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => IdleAnimation_Registration.Instance;
        public new static IdleAnimation_Registration Registration => IdleAnimation_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => IdleAnimationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return IdleAnimationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => IdleAnimationSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class IdleAnimationXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static IdleAnimationXmlWriteTranslation Instance = new IdleAnimationXmlWriteTranslation();

        public static void WriteToNodeXml(
            IIdleAnimationGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)IdleAnimation_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)IdleAnimation_FieldIndex.Model));
                }
            }
            if ((item.Conditions != null)
                && (translationMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<IConditionGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)IdleAnimation_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)IdleAnimation_FieldIndex.Conditions),
                    transl: (XElement subNode, IConditionGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((ConditionXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((item.AnimationGroupSection != null)
                && (translationMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.AnimationGroupSection) ?? true))
            {
                EnumXmlTranslation<IdleAnimation.AnimationGroupSectionEnum>.Instance.Write(
                    node: node,
                    name: nameof(item.AnimationGroupSection),
                    item: item.AnimationGroupSection,
                    fieldIndex: (int)IdleAnimation_FieldIndex.AnimationGroupSection,
                    errorMask: errorMask);
            }
            if ((item.RelatedIdleAnimations != null)
                && (translationMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.RelatedIdleAnimations) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IIdleAnimationGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.RelatedIdleAnimations),
                    item: item.RelatedIdleAnimations,
                    fieldIndex: (int)IdleAnimation_FieldIndex.RelatedIdleAnimations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)IdleAnimation_FieldIndex.RelatedIdleAnimations),
                    transl: (XElement subNode, IFormLinkGetter<IIdleAnimationGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IIdleAnimationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.IdleAnimation");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.IdleAnimation");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IIdleAnimationGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IIdleAnimationGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IIdleAnimationGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class IdleAnimationXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static IdleAnimationXmlCreateTranslation Instance = new IdleAnimationXmlCreateTranslation();

        public static void FillPublicXml(
            IIdleAnimationInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    IdleAnimationXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IIdleAnimationInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Model":
                    errorMask?.PushIndex((int)IdleAnimation_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)IdleAnimation_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    errorMask?.PushIndex((int)IdleAnimation_FieldIndex.Conditions);
                    try
                    {
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            node: node,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions = ConditionsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Conditions = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AnimationGroupSection":
                    errorMask?.PushIndex((int)IdleAnimation_FieldIndex.AnimationGroupSection);
                    try
                    {
                        item.AnimationGroupSection = EnumXmlTranslation<IdleAnimation.AnimationGroupSectionEnum>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RelatedIdleAnimations":
                    errorMask?.PushIndex((int)IdleAnimation_FieldIndex.RelatedIdleAnimations);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<IdleAnimation>>.Instance.Parse(
                            node: node,
                            enumer: out var RelatedIdleAnimationsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.RelatedIdleAnimations = RelatedIdleAnimationsItem.ToExtendedList();
                        }
                        else
                        {
                            item.RelatedIdleAnimations = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class IdleAnimationXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IIdleAnimationGetter item,
            XElement node,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((IdleAnimationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = IdleAnimation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IIdleAnimationGetter item,
            string path,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IIdleAnimationGetter item,
            Stream stream,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class IdleAnimationBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static IdleAnimationBinaryWriteTranslation Instance = new IdleAnimationBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IIdleAnimationGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    }
                });
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<IdleAnimation.AnimationGroupSectionEnum>.Instance.WriteNullable(
                writer,
                item.AnimationGroupSection,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(IdleAnimation_Registration.ANAM_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IIdleAnimationGetter>>.Instance.Write(
                writer: writer,
                items: item.RelatedIdleAnimations,
                recordType: IdleAnimation_Registration.DATA_HEADER,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IIdleAnimationGetter> subItem) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        masterReferences: masterReferences);
                });
        }

        public void Write(
            MutagenWriter writer,
            IIdleAnimationGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: IdleAnimation_Registration.IDLE_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IIdleAnimationGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IIdleAnimationGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IIdleAnimationGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class IdleAnimationBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static IdleAnimationBinaryCreateTranslation Instance = new IdleAnimationBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class IdleAnimationBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class IdleAnimationBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IIdleAnimationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => IdleAnimation_Registration.Instance;
        public new static IdleAnimation_Registration Registration => IdleAnimation_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => IdleAnimationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => IdleAnimationSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IIdleAnimationGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => IdleAnimationCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => IdleAnimationXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((IdleAnimationXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => IdleAnimationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((IdleAnimationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Model
        public IModelGetter? Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        public IReadOnlyList<IConditionGetter>? Conditions { get; private set; }
        #region AnimationGroupSection
        private int? _AnimationGroupSectionLocation;
        private bool AnimationGroupSection_IsSet => _AnimationGroupSectionLocation.HasValue;
        public IdleAnimation.AnimationGroupSectionEnum? AnimationGroupSection => AnimationGroupSection_IsSet ? (IdleAnimation.AnimationGroupSectionEnum)HeaderTranslation.ExtractSubrecordSpan(_data, _AnimationGroupSectionLocation!.Value, _package.Meta)[0] : default(IdleAnimation.AnimationGroupSectionEnum?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IIdleAnimationGetter>>? RelatedIdleAnimations { get; private set; }
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected IdleAnimationBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static IdleAnimationBinaryOverlay IdleAnimationFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new IdleAnimationBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)IdleAnimation_FieldIndex.Model);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    this.Conditions = BinaryOverlaySetList<ConditionBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)IdleAnimation_FieldIndex.Conditions);
                }
                case 0x4D414E41: // ANAM
                {
                    _AnimationGroupSectionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)IdleAnimation_FieldIndex.AnimationGroupSection);
                }
                case 0x41544144: // DATA
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.RelatedIdleAnimations = BinaryOverlaySetList<IFormLinkGetter<IIdleAnimationGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IIdleAnimationGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)IdleAnimation_FieldIndex.RelatedIdleAnimations);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

