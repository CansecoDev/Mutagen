/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Landscape :
        OblivionMajorRecord,
        ILandscapeInternal,
        ILoquiObjectSetter<Landscape>,
        ILinkSubContainer,
        IEquatable<Landscape>,
        IEqualsMask
    {
        #region Ctor
        protected Landscape()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool Unknown_IsSet
        {
            get => _hasBeenSetTracker[(int)Landscape_FieldIndex.Unknown];
            set => _hasBeenSetTracker[(int)Landscape_FieldIndex.Unknown] = value;
        }
        bool ILandscapeGetter.Unknown_IsSet => Unknown_IsSet;
        protected Byte[] _Unknown;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Unknown
        {
            get => this._Unknown;
            set => Unknown_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> ILandscapeGetter.Unknown => this.Unknown;
        public void Unknown_Set(
            Byte[] value,
            bool markSet = true)
        {
            _Unknown = value;
            _hasBeenSetTracker[(int)Landscape_FieldIndex.Unknown] = markSet;
        }
        public void Unknown_Unset()
        {
            this.Unknown_Set(default(Byte[]), false);
        }
        #endregion
        #region VertexNormals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool VertexNormals_IsSet
        {
            get => _hasBeenSetTracker[(int)Landscape_FieldIndex.VertexNormals];
            set => _hasBeenSetTracker[(int)Landscape_FieldIndex.VertexNormals] = value;
        }
        bool ILandscapeGetter.VertexNormals_IsSet => VertexNormals_IsSet;
        protected Byte[] _VertexNormals;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] VertexNormals
        {
            get => this._VertexNormals;
            set => VertexNormals_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> ILandscapeGetter.VertexNormals => this.VertexNormals;
        public void VertexNormals_Set(
            Byte[] value,
            bool markSet = true)
        {
            _VertexNormals = value;
            _hasBeenSetTracker[(int)Landscape_FieldIndex.VertexNormals] = markSet;
        }
        public void VertexNormals_Unset()
        {
            this.VertexNormals_Set(default(Byte[]), false);
        }
        #endregion
        #region VertexHeightMap
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool VertexHeightMap_IsSet
        {
            get => _hasBeenSetTracker[(int)Landscape_FieldIndex.VertexHeightMap];
            set => _hasBeenSetTracker[(int)Landscape_FieldIndex.VertexHeightMap] = value;
        }
        bool ILandscapeGetter.VertexHeightMap_IsSet => VertexHeightMap_IsSet;
        protected Byte[] _VertexHeightMap;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] VertexHeightMap
        {
            get => this._VertexHeightMap;
            set => VertexHeightMap_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> ILandscapeGetter.VertexHeightMap => this.VertexHeightMap;
        public void VertexHeightMap_Set(
            Byte[] value,
            bool markSet = true)
        {
            _VertexHeightMap = value;
            _hasBeenSetTracker[(int)Landscape_FieldIndex.VertexHeightMap] = markSet;
        }
        public void VertexHeightMap_Unset()
        {
            this.VertexHeightMap_Set(default(Byte[]), false);
        }
        #endregion
        #region VertexColors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool VertexColors_IsSet
        {
            get => _hasBeenSetTracker[(int)Landscape_FieldIndex.VertexColors];
            set => _hasBeenSetTracker[(int)Landscape_FieldIndex.VertexColors] = value;
        }
        bool ILandscapeGetter.VertexColors_IsSet => VertexColors_IsSet;
        protected Byte[] _VertexColors;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] VertexColors
        {
            get => this._VertexColors;
            set => VertexColors_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> ILandscapeGetter.VertexColors => this.VertexColors;
        public void VertexColors_Set(
            Byte[] value,
            bool markSet = true)
        {
            _VertexColors = value;
            _hasBeenSetTracker[(int)Landscape_FieldIndex.VertexColors] = markSet;
        }
        public void VertexColors_Unset()
        {
            this.VertexColors_Set(default(Byte[]), false);
        }
        #endregion
        #region Layers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<BaseLayer> _Layers = new SetList<BaseLayer>();
        public ISetList<BaseLayer> Layers => _Layers;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<BaseLayer> ILandscape.Layers => _Layers;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IBaseLayerGetter> ILandscapeGetter.Layers => _Layers;
        #endregion

        #endregion
        #region Textures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IFormIDLink<LandTexture>> _Textures = new SetList<IFormIDLink<LandTexture>>();
        public ISetList<IFormIDLink<LandTexture>> Textures => _Textures;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormIDLink<LandTexture>> ILandscape.Textures => _Textures;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormIDLinkGetter<ILandTextureGetter>> ILandscapeGetter.Textures => _Textures;
        #endregion

        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILandscapeGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            LandscapeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ILandscapeGetter rhs)) return false;
            return ((LandscapeCommon)((ILandscapeGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Landscape obj)
        {
            return ((LandscapeCommon)((ILandscapeGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((LandscapeCommon)((ILandscapeGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => LandscapeXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((LandscapeXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Landscape CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Landscape_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Landscape CreateFromXml(
            XElement node,
            out Landscape_ErrorMask errorMask,
            bool doMasks = true,
            Landscape_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Landscape_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Landscape CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Landscape() : null;
                    break;
                default:
                    break;
            }
            var ret = new Landscape();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    LandscapeXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Landscape CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Landscape_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Landscape CreateFromXml(
            string path,
            out Landscape_ErrorMask errorMask,
            Landscape_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Landscape CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Landscape_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Landscape CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Landscape_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Landscape CreateFromXml(
            Stream stream,
            out Landscape_ErrorMask errorMask,
            Landscape_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Landscape CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Landscape_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            Landscape item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Landscape_FieldIndex)index)
            {
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                    return _hasBeenSetTracker[index];
                case Landscape_FieldIndex.Layers:
                    return Layers.HasBeenSet;
                case Landscape_FieldIndex.Textures:
                    return Textures.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Landscape_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Layers.SelectMany(f => f.Links))
            {
                yield return item;
            }
            foreach (var item in Textures)
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(LinkingPackage<M> package)
            
        {
            base.Link(package: package);
            foreach (var item in Layers)
            {
                item.Link(package: package);
            }
            foreach (var item in Textures)
            {
                item.Link(package: package);
            }
        }

        public Landscape(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Landscape(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => LandscapeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((LandscapeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Landscape CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Landscape CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Landscape_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Landscape_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Landscape CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Landscape();
            UtilityTranslation.MajorRecordParse<Landscape>(
                record: ret,
                frame: frame,
                errorMask: errorMask,
                recType: Landscape_Registration.LAND_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            Landscape item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            Landscape item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] UnknownParse))
                    {
                        item.Unknown = UnknownParse;
                    }
                    else
                    {
                        item.Unknown = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.Unknown);
                }
                case 0x4C4D4E56: // VNML
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] VertexNormalsParse))
                    {
                        item.VertexNormals = VertexNormalsParse;
                    }
                    else
                    {
                        item.VertexNormals = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.VertexNormals);
                }
                case 0x54474856: // VHGT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] VertexHeightMapParse))
                    {
                        item.VertexHeightMap = VertexHeightMapParse;
                    }
                    else
                    {
                        item.VertexHeightMap = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.VertexHeightMap);
                }
                case 0x524C4356: // VCLR
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] VertexColorsParse))
                    {
                        item.VertexColors = VertexColorsParse;
                    }
                    else
                    {
                        item.VertexColors = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.VertexColors);
                }
                case 0x54585442: // BTXT
                case 0x54585441: // ATXT
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<BaseLayer>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: BaseLayer_Registration.TriggeringRecordTypes,
                        item: item.Layers,
                        fieldIndex: (int)Landscape_FieldIndex.Layers,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, RecordType header, out BaseLayer listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            switch (header.TypeInt)
                            {
                                case 0x54585442: // BTXT
                                    return LoquiBinaryTranslation<BaseLayer>.Instance.Parse(
                                        frame: r,
                                        item: out listSubItem,
                                        errorMask: listErrMask,
                                        masterReferences: masterReferences);
                                case 0x54585441: // ATXT
                                    return LoquiBinaryTranslation<AlphaLayer>.Instance.Parse(
                                        frame: r,
                                        item: out listSubItem,
                                        errorMask: listErrMask,
                                        masterReferences: masterReferences);
                                default:
                                    throw new NotImplementedException();
                            }
                        });
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.Layers);
                }
                case 0x58455456: // VTEX
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLink<LandTexture>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Textures,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.Textures);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        void IClearable.Clear()
        {
            ((LandscapeSetterCommon)((ILandscapeGetter)this).CommonSetterInstance()).Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface ILandscape :
        ILandscapeGetter,
        IOblivionMajorRecord,
        IPlaced,
        ILoquiObjectSetter<ILandscapeInternal>
    {
        new Byte[] Unknown { get; set; }
        new bool Unknown_IsSet { get; set; }
        void Unknown_Set(Byte[] value, bool hasBeenSet = true);
        void Unknown_Unset();

        new Byte[] VertexNormals { get; set; }
        new bool VertexNormals_IsSet { get; set; }
        void VertexNormals_Set(Byte[] value, bool hasBeenSet = true);
        void VertexNormals_Unset();

        new Byte[] VertexHeightMap { get; set; }
        new bool VertexHeightMap_IsSet { get; set; }
        void VertexHeightMap_Set(Byte[] value, bool hasBeenSet = true);
        void VertexHeightMap_Unset();

        new Byte[] VertexColors { get; set; }
        new bool VertexColors_IsSet { get; set; }
        void VertexColors_Set(Byte[] value, bool hasBeenSet = true);
        void VertexColors_Unset();

        new ISetList<BaseLayer> Layers { get; }
        new ISetList<IFormIDLink<LandTexture>> Textures { get; }
    }

    public partial interface ILandscapeInternal :
        IOblivionMajorRecordInternal,
        ILandscape,
        ILandscapeGetter
    {
    }

    public partial interface ILandscapeGetter :
        IOblivionMajorRecordGetter,
        IPlacedGetter,
        ILoquiObject<ILandscapeGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Unknown
        ReadOnlySpan<Byte> Unknown { get; }
        bool Unknown_IsSet { get; }

        #endregion
        #region VertexNormals
        ReadOnlySpan<Byte> VertexNormals { get; }
        bool VertexNormals_IsSet { get; }

        #endregion
        #region VertexHeightMap
        ReadOnlySpan<Byte> VertexHeightMap { get; }
        bool VertexHeightMap_IsSet { get; }

        #endregion
        #region VertexColors
        ReadOnlySpan<Byte> VertexColors { get; }
        bool VertexColors_IsSet { get; }

        #endregion
        #region Layers
        IReadOnlySetList<IBaseLayerGetter> Layers { get; }
        #endregion
        #region Textures
        IReadOnlySetList<IFormIDLinkGetter<ILandTextureGetter>> Textures { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class LandscapeMixIn
    {
        public static void Clear(this ILandscapeInternal item)
        {
            ((LandscapeSetterCommon)((ILandscapeGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Landscape_Mask<bool> GetEqualsMask(
            this ILandscapeGetter item,
            ILandscapeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILandscapeGetter item,
            string name = null,
            Landscape_Mask<bool> printMask = null)
        {
            return ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILandscapeGetter item,
            FileGeneration fg,
            string name = null,
            Landscape_Mask<bool> printMask = null)
        {
            ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILandscapeGetter item,
            Landscape_Mask<bool?> checkMask)
        {
            return ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Landscape_Mask<bool> GetHasBeenSetMask(this ILandscapeGetter item)
        {
            var ret = new Landscape_Mask<bool>();
            ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ILandscapeGetter item,
            ILandscapeGetter rhs)
        {
            return ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void CopyFieldsFrom(
            this Landscape lhs,
            Landscape rhs,
            Landscape_CopyMask copyMask,
            Landscape def = null)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void CopyFieldsFrom(
            this Landscape lhs,
            Landscape rhs,
            out Landscape_ErrorMask errorMask,
            Landscape_CopyMask copyMask = null,
            Landscape def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LandscapeSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Landscape_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyFieldsFrom(
            this Landscape lhs,
            Landscape rhs,
            ErrorMaskBuilder errorMask,
            Landscape_CopyMask copyMask = null,
            Landscape def = null)
        {
            LandscapeSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Landscape_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Unknown = 5,
        VertexNormals = 6,
        VertexHeightMap = 7,
        VertexColors = 8,
        Layers = 9,
        Textures = 10,
    }
    #endregion

    #region Registration
    public class Landscape_Registration : ILoquiRegistration
    {
        public static readonly Landscape_Registration Instance = new Landscape_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 143,
            version: 0);

        public const string GUID = "f03a09c7-ce1f-4764-ac9a-bccccfa481d4";

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(Landscape_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Landscape_ErrorMask);

        public static readonly Type ClassType = typeof(Landscape);

        public static readonly Type GetterType = typeof(ILandscapeGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILandscape);

        public static readonly Type InternalSetterType = typeof(ILandscapeInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Landscape";

        public const string Name = "Landscape";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "UNKNOWN":
                    return (ushort)Landscape_FieldIndex.Unknown;
                case "VERTEXNORMALS":
                    return (ushort)Landscape_FieldIndex.VertexNormals;
                case "VERTEXHEIGHTMAP":
                    return (ushort)Landscape_FieldIndex.VertexHeightMap;
                case "VERTEXCOLORS":
                    return (ushort)Landscape_FieldIndex.VertexColors;
                case "LAYERS":
                    return (ushort)Landscape_FieldIndex.Layers;
                case "TEXTURES":
                    return (ushort)Landscape_FieldIndex.Textures;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Layers:
                case Landscape_FieldIndex.Textures:
                    return true;
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Layers:
                    return true;
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                case Landscape_FieldIndex.Textures:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                case Landscape_FieldIndex.Layers:
                case Landscape_FieldIndex.Textures:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    return "Unknown";
                case Landscape_FieldIndex.VertexNormals:
                    return "VertexNormals";
                case Landscape_FieldIndex.VertexHeightMap:
                    return "VertexHeightMap";
                case Landscape_FieldIndex.VertexColors:
                    return "VertexColors";
                case Landscape_FieldIndex.Layers:
                    return "Layers";
                case Landscape_FieldIndex.Textures:
                    return "Textures";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                case Landscape_FieldIndex.Layers:
                case Landscape_FieldIndex.Textures:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                case Landscape_FieldIndex.Layers:
                case Landscape_FieldIndex.Textures:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    return typeof(Byte[]);
                case Landscape_FieldIndex.VertexNormals:
                    return typeof(Byte[]);
                case Landscape_FieldIndex.VertexHeightMap:
                    return typeof(Byte[]);
                case Landscape_FieldIndex.VertexColors:
                    return typeof(Byte[]);
                case Landscape_FieldIndex.Layers:
                    return typeof(ISetList<BaseLayer>);
                case Landscape_FieldIndex.Textures:
                    return typeof(ISetList<IFormIDLink<LandTexture>>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(LandscapeXmlWriteTranslation);
        public static readonly RecordType LAND_HEADER = new RecordType("LAND");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType VNML_HEADER = new RecordType("VNML");
        public static readonly RecordType VHGT_HEADER = new RecordType("VHGT");
        public static readonly RecordType VCLR_HEADER = new RecordType("VCLR");
        public static readonly RecordType BTXT_HEADER = new RecordType("BTXT");
        public static readonly RecordType ATXT_HEADER = new RecordType("ATXT");
        public static readonly RecordType VTEX_HEADER = new RecordType("VTEX");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LAND_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 6;
        public static readonly Type BinaryWriteTranslation = typeof(LandscapeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LandscapeSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly LandscapeSetterCommon Instance = new LandscapeSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(ILandscapeInternal item)
        {
            ClearPartial();
            item.Unknown_Unset();
            item.VertexNormals_Unset();
            item.VertexHeightMap_Unset();
            item.VertexColors_Unset();
            item.Layers.Unset();
            item.Textures.Unset();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ILandscapeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILandscapeInternal)item);
        }
        
    }
    public partial class LandscapeCommon : OblivionMajorRecordCommon
    {
        public new static readonly LandscapeCommon Instance = new LandscapeCommon();

        public Landscape_Mask<bool> GetEqualsMask(
            ILandscapeGetter item,
            ILandscapeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Landscape_Mask<bool>();
            ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILandscapeGetter item,
            ILandscapeGetter rhs,
            Landscape_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Unknown = item.Unknown_IsSet == rhs.Unknown_IsSet && MemoryExtensions.SequenceEqual(item.Unknown, rhs.Unknown);
            ret.VertexNormals = item.VertexNormals_IsSet == rhs.VertexNormals_IsSet && MemoryExtensions.SequenceEqual(item.VertexNormals, rhs.VertexNormals);
            ret.VertexHeightMap = item.VertexHeightMap_IsSet == rhs.VertexHeightMap_IsSet && MemoryExtensions.SequenceEqual(item.VertexHeightMap, rhs.VertexHeightMap);
            ret.VertexColors = item.VertexColors_IsSet == rhs.VertexColors_IsSet && MemoryExtensions.SequenceEqual(item.VertexColors, rhs.VertexColors);
            ret.Layers = item.Layers.CollectionEqualsHelper(
                rhs.Layers,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Textures = item.Textures.CollectionEqualsHelper(
                rhs.Textures,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ILandscapeGetter item,
            string name = null,
            Landscape_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILandscapeGetter item,
            FileGeneration fg,
            string name = null,
            Landscape_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Landscape =>");
            }
            else
            {
                fg.AppendLine($"{name} (Landscape) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILandscapeGetter item,
            FileGeneration fg,
            Landscape_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Unknown ?? true)
            {
                fg.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
            if (printMask?.VertexNormals ?? true)
            {
                fg.AppendLine($"VertexNormals => {SpanExt.ToHexString(item.VertexNormals)}");
            }
            if (printMask?.VertexHeightMap ?? true)
            {
                fg.AppendLine($"VertexHeightMap => {SpanExt.ToHexString(item.VertexHeightMap)}");
            }
            if (printMask?.VertexColors ?? true)
            {
                fg.AppendLine($"VertexColors => {SpanExt.ToHexString(item.VertexColors)}");
            }
            if (printMask?.Layers?.Overall ?? true)
            {
                fg.AppendLine("Layers =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Layers)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Textures?.Overall ?? true)
            {
                fg.AppendLine("Textures =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Textures)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ILandscapeGetter item,
            Landscape_Mask<bool?> checkMask)
        {
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != item.Unknown_IsSet) return false;
            if (checkMask.VertexNormals.HasValue && checkMask.VertexNormals.Value != item.VertexNormals_IsSet) return false;
            if (checkMask.VertexHeightMap.HasValue && checkMask.VertexHeightMap.Value != item.VertexHeightMap_IsSet) return false;
            if (checkMask.VertexColors.HasValue && checkMask.VertexColors.Value != item.VertexColors_IsSet) return false;
            if (checkMask.Layers.Overall.HasValue && checkMask.Layers.Overall.Value != item.Layers.HasBeenSet) return false;
            if (checkMask.Textures.Overall.HasValue && checkMask.Textures.Overall.Value != item.Textures.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ILandscapeGetter item,
            Landscape_Mask<bool> mask)
        {
            mask.Unknown = item.Unknown_IsSet;
            mask.VertexNormals = item.VertexNormals_IsSet;
            mask.VertexHeightMap = item.VertexHeightMap_IsSet;
            mask.VertexColors = item.VertexColors_IsSet;
            mask.Layers = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, BaseLayer_Mask<bool>>>>(item.Layers.HasBeenSet, item.Layers.WithIndex().Select((i) => new MaskItemIndexed<bool, BaseLayer_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Textures = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Textures.HasBeenSet, null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Landscape_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Landscape_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Landscape_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Landscape_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Landscape_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Landscape_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static Landscape_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Landscape_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Landscape_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Landscape_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Landscape_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILandscapeGetter lhs,
            ILandscapeGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Unknown_IsSet != rhs.Unknown_IsSet) return false;
            if (lhs.Unknown_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown, rhs.Unknown)) return false;
            }
            if (lhs.VertexNormals_IsSet != rhs.VertexNormals_IsSet) return false;
            if (lhs.VertexNormals_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.VertexNormals, rhs.VertexNormals)) return false;
            }
            if (lhs.VertexHeightMap_IsSet != rhs.VertexHeightMap_IsSet) return false;
            if (lhs.VertexHeightMap_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.VertexHeightMap, rhs.VertexHeightMap)) return false;
            }
            if (lhs.VertexColors_IsSet != rhs.VertexColors_IsSet) return false;
            if (lhs.VertexColors_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.VertexColors, rhs.VertexColors)) return false;
            }
            if (lhs.Layers.HasBeenSet != rhs.Layers.HasBeenSet) return false;
            if (lhs.Layers.HasBeenSet)
            {
                if (!lhs.Layers.SequenceEqual(rhs.Layers)) return false;
            }
            if (lhs.Textures.HasBeenSet != rhs.Textures.HasBeenSet) return false;
            if (lhs.Textures.HasBeenSet)
            {
                if (!lhs.Textures.SequenceEqual(rhs.Textures)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter lhs,
            IOblivionMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (ILandscapeGetter)lhs,
                rhs: rhs as ILandscapeGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (ILandscapeGetter)lhs,
                rhs: rhs as ILandscapeGetter);
        }
        
        public virtual int GetHashCode(ILandscapeGetter item)
        {
            int ret = 0;
            if (item.Unknown_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Unknown).CombineHashCode(ret);
            }
            if (item.VertexNormals_IsSet)
            {
                ret = HashHelper.GetHashCode(item.VertexNormals).CombineHashCode(ret);
            }
            if (item.VertexHeightMap_IsSet)
            {
                ret = HashHelper.GetHashCode(item.VertexHeightMap).CombineHashCode(ret);
            }
            if (item.VertexColors_IsSet)
            {
                ret = HashHelper.GetHashCode(item.VertexColors).CombineHashCode(ret);
            }
            if (item.Layers.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Layers).CombineHashCode(ret);
            }
            if (item.Textures.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Textures).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ILandscapeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILandscapeGetter)item);
        }
        
        #endregion
        
        
        #region Mutagen
        partial void PostDuplicate(Landscape obj, Landscape rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Landscape(getNextFormKey());
            ret.CopyFieldsFrom((Landscape)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Landscape)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class LandscapeSetterCopyCommon : OblivionMajorRecordSetterCopyCommon
    {
        public new static readonly LandscapeSetterCopyCommon Instance = new LandscapeSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Landscape item,
            Landscape rhs,
            Landscape def,
            ErrorMaskBuilder errorMask,
            Landscape_CopyMask copyMask)
        {
            OblivionMajorRecordSetterCopyCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Unknown ?? true)
            {
                errorMask?.PushIndex((int)Landscape_FieldIndex.Unknown);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Unknown,
                        rhsHasBeenSet: rhs.Unknown_IsSet,
                        defItem: def?.Unknown ?? default(Byte[]),
                        defHasBeenSet: def?.Unknown_IsSet ?? false,
                        outRhsItem: out var rhsUnknownItem,
                        outDefItem: out var defUnknownItem))
                    {
                        item.Unknown = rhsUnknownItem;
                    }
                    else
                    {
                        item.Unknown_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.VertexNormals ?? true)
            {
                errorMask?.PushIndex((int)Landscape_FieldIndex.VertexNormals);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.VertexNormals,
                        rhsHasBeenSet: rhs.VertexNormals_IsSet,
                        defItem: def?.VertexNormals ?? default(Byte[]),
                        defHasBeenSet: def?.VertexNormals_IsSet ?? false,
                        outRhsItem: out var rhsVertexNormalsItem,
                        outDefItem: out var defVertexNormalsItem))
                    {
                        item.VertexNormals = rhsVertexNormalsItem;
                    }
                    else
                    {
                        item.VertexNormals_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.VertexHeightMap ?? true)
            {
                errorMask?.PushIndex((int)Landscape_FieldIndex.VertexHeightMap);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.VertexHeightMap,
                        rhsHasBeenSet: rhs.VertexHeightMap_IsSet,
                        defItem: def?.VertexHeightMap ?? default(Byte[]),
                        defHasBeenSet: def?.VertexHeightMap_IsSet ?? false,
                        outRhsItem: out var rhsVertexHeightMapItem,
                        outDefItem: out var defVertexHeightMapItem))
                    {
                        item.VertexHeightMap = rhsVertexHeightMapItem;
                    }
                    else
                    {
                        item.VertexHeightMap_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.VertexColors ?? true)
            {
                errorMask?.PushIndex((int)Landscape_FieldIndex.VertexColors);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.VertexColors,
                        rhsHasBeenSet: rhs.VertexColors_IsSet,
                        defItem: def?.VertexColors ?? default(Byte[]),
                        defHasBeenSet: def?.VertexColors_IsSet ?? false,
                        outRhsItem: out var rhsVertexColorsItem,
                        outDefItem: out var defVertexColorsItem))
                    {
                        item.VertexColors = rhsVertexColorsItem;
                    }
                    else
                    {
                        item.VertexColors_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Layers.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Landscape_FieldIndex.Layers);
                try
                {
                    item.Layers.SetToWithDefault<BaseLayer, BaseLayer>(
                        rhs: rhs.Layers,
                        def: def?.Layers,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Layers.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (BaseLayer)r;
                                case CopyOption.MakeCopy:
                                    return r.Copy(
                                        copyMask?.Layers?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Layers.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Textures != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Landscape_FieldIndex.Textures);
                try
                {
                    item.Textures.SetToWithDefault(
                        rhs.Textures,
                        def?.Textures);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Landscape
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Landscape_Registration.Instance;
        public new static Landscape_Registration Registration => Landscape_Registration.Instance;
        protected override object CommonInstance()
        {
            return LandscapeCommon.Instance;
        }
        protected override object CommonSetterInstance()
        {
            return LandscapeSetterCommon.Instance;
        }
        protected override object CommonSetterCopyInstance()
        {
            return LandscapeSetterCopyCommon.Instance;
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LandscapeXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static LandscapeXmlWriteTranslation Instance = new LandscapeXmlWriteTranslation();

        public static void WriteToNodeXml(
            ILandscapeGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Unknown_IsSet
                && (translationMask?.GetShouldTranslate((int)Landscape_FieldIndex.Unknown) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)Landscape_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if (item.VertexNormals_IsSet
                && (translationMask?.GetShouldTranslate((int)Landscape_FieldIndex.VertexNormals) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VertexNormals),
                    item: item.VertexNormals,
                    fieldIndex: (int)Landscape_FieldIndex.VertexNormals,
                    errorMask: errorMask);
            }
            if (item.VertexHeightMap_IsSet
                && (translationMask?.GetShouldTranslate((int)Landscape_FieldIndex.VertexHeightMap) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VertexHeightMap),
                    item: item.VertexHeightMap,
                    fieldIndex: (int)Landscape_FieldIndex.VertexHeightMap,
                    errorMask: errorMask);
            }
            if (item.VertexColors_IsSet
                && (translationMask?.GetShouldTranslate((int)Landscape_FieldIndex.VertexColors) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VertexColors),
                    item: item.VertexColors,
                    fieldIndex: (int)Landscape_FieldIndex.VertexColors,
                    errorMask: errorMask);
            }
            if (item.Layers.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Landscape_FieldIndex.Layers) ?? true))
            {
                ListXmlTranslation<IBaseLayerGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Layers),
                    item: item.Layers,
                    fieldIndex: (int)Landscape_FieldIndex.Layers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Landscape_FieldIndex.Layers),
                    transl: (XElement subNode, IBaseLayerGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((BaseLayerXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.Textures.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Landscape_FieldIndex.Textures) ?? true))
            {
                ListXmlTranslation<IFormIDLinkGetter<ILandTextureGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Textures),
                    item: item.Textures,
                    fieldIndex: (int)Landscape_FieldIndex.Textures,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Landscape_FieldIndex.Textures),
                    transl: (XElement subNode, IFormIDLinkGetter<ILandTextureGetter> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            ILandscapeGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Landscape");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Landscape");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILandscapeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILandscapeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILandscapeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class LandscapeXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static LandscapeXmlCreateTranslation Instance = new LandscapeXmlCreateTranslation();

        public static void FillPublicXml(
            ILandscapeInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LandscapeXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILandscapeInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Unknown":
                    try
                    {
                        errorMask?.PushIndex((int)Landscape_FieldIndex.Unknown);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] UnknownParse,
                            errorMask: errorMask))
                        {
                            item.Unknown = UnknownParse;
                        }
                        else
                        {
                            item.Unknown = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VertexNormals":
                    try
                    {
                        errorMask?.PushIndex((int)Landscape_FieldIndex.VertexNormals);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] VertexNormalsParse,
                            errorMask: errorMask))
                        {
                            item.VertexNormals = VertexNormalsParse;
                        }
                        else
                        {
                            item.VertexNormals = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VertexHeightMap":
                    try
                    {
                        errorMask?.PushIndex((int)Landscape_FieldIndex.VertexHeightMap);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] VertexHeightMapParse,
                            errorMask: errorMask))
                        {
                            item.VertexHeightMap = VertexHeightMapParse;
                        }
                        else
                        {
                            item.VertexHeightMap = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VertexColors":
                    try
                    {
                        errorMask?.PushIndex((int)Landscape_FieldIndex.VertexColors);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] VertexColorsParse,
                            errorMask: errorMask))
                        {
                            item.VertexColors = VertexColorsParse;
                        }
                        else
                        {
                            item.VertexColors = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Layers":
                    try
                    {
                        errorMask?.PushIndex((int)Landscape_FieldIndex.Layers);
                        if (ListXmlTranslation<BaseLayer>.Instance.Parse(
                            node: node,
                            enumer: out var LayersItem,
                            transl: LoquiXmlTranslation<BaseLayer>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Layers.SetTo(LayersItem);
                        }
                        else
                        {
                            item.Layers.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Textures":
                    try
                    {
                        errorMask?.PushIndex((int)Landscape_FieldIndex.Textures);
                        if (ListXmlTranslation<IFormIDLink<LandTexture>>.Instance.Parse(
                            node: node,
                            enumer: out var TexturesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Textures.SetTo(TexturesItem);
                        }
                        else
                        {
                            item.Textures.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class LandscapeXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ILandscapeGetter item,
            XElement node,
            out Landscape_ErrorMask errorMask,
            bool doMasks = true,
            Landscape_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LandscapeXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Landscape_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ILandscapeGetter item,
            string path,
            out Landscape_ErrorMask errorMask,
            Landscape_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILandscapeGetter item,
            Stream stream,
            out Landscape_ErrorMask errorMask,
            Landscape_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class Landscape_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Landscape_Mask<T>>
    {
        #region Ctors
        public Landscape_Mask()
        {
        }

        public Landscape_Mask(T initialValue)
        {
            this.Unknown = initialValue;
            this.VertexNormals = initialValue;
            this.VertexHeightMap = initialValue;
            this.VertexColors = initialValue;
            this.Layers = new MaskItem<T, IEnumerable<MaskItemIndexed<T, BaseLayer_Mask<T>>>>(initialValue, null);
            this.Textures = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Unknown;
        public T VertexNormals;
        public T VertexHeightMap;
        public T VertexColors;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, BaseLayer_Mask<T>>>> Layers;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Textures;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Landscape_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Landscape_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
            if (!object.Equals(this.VertexNormals, rhs.VertexNormals)) return false;
            if (!object.Equals(this.VertexHeightMap, rhs.VertexHeightMap)) return false;
            if (!object.Equals(this.VertexColors, rhs.VertexColors)) return false;
            if (!object.Equals(this.Layers, rhs.Layers)) return false;
            if (!object.Equals(this.Textures, rhs.Textures)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
            ret = ret.CombineHashCode(this.VertexNormals?.GetHashCode());
            ret = ret.CombineHashCode(this.VertexHeightMap?.GetHashCode());
            ret = ret.CombineHashCode(this.VertexColors?.GetHashCode());
            ret = ret.CombineHashCode(this.Layers?.GetHashCode());
            ret = ret.CombineHashCode(this.Textures?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Unknown)) return false;
            if (!eval(this.VertexNormals)) return false;
            if (!eval(this.VertexHeightMap)) return false;
            if (!eval(this.VertexColors)) return false;
            if (this.Layers != null)
            {
                if (!eval(this.Layers.Overall)) return false;
                if (this.Layers.Specific != null)
                {
                    foreach (var item in this.Layers.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.Textures != null)
            {
                if (!eval(this.Textures.Overall)) return false;
                if (this.Textures.Specific != null)
                {
                    foreach (var item in this.Textures.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Landscape_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Landscape_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Landscape_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Unknown = eval(this.Unknown);
            obj.VertexNormals = eval(this.VertexNormals);
            obj.VertexHeightMap = eval(this.VertexHeightMap);
            obj.VertexColors = eval(this.VertexColors);
            if (Layers != null)
            {
                obj.Layers = new MaskItem<R, IEnumerable<MaskItemIndexed<R, BaseLayer_Mask<R>>>>();
                obj.Layers.Overall = eval(this.Layers.Overall);
                if (Layers.Specific != null)
                {
                    List<MaskItemIndexed<R, BaseLayer_Mask<R>>> l = new List<MaskItemIndexed<R, BaseLayer_Mask<R>>>();
                    obj.Layers.Specific = l;
                    foreach (var item in Layers.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, BaseLayer_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, BaseLayer_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Textures != null)
            {
                obj.Textures = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Textures.Overall = eval(this.Textures.Overall);
                if (Textures.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Textures.Specific = l;
                    foreach (var item in Textures.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Layers.Specific = null;
            this.Textures.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Landscape_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Landscape_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Landscape_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {Unknown}");
                }
                if (printMask?.VertexNormals ?? true)
                {
                    fg.AppendLine($"VertexNormals => {VertexNormals}");
                }
                if (printMask?.VertexHeightMap ?? true)
                {
                    fg.AppendLine($"VertexHeightMap => {VertexHeightMap}");
                }
                if (printMask?.VertexColors ?? true)
                {
                    fg.AppendLine($"VertexColors => {VertexColors}");
                }
                if (printMask?.Layers?.Overall ?? true)
                {
                    fg.AppendLine("Layers =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Layers.Overall != null)
                        {
                            fg.AppendLine(Layers.Overall.ToString());
                        }
                        if (Layers.Specific != null)
                        {
                            foreach (var subItem in Layers.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Textures?.Overall ?? true)
                {
                    fg.AppendLine("Textures =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Textures.Overall != null)
                        {
                            fg.AppendLine(Textures.Overall.ToString());
                        }
                        if (Textures.Specific != null)
                        {
                            foreach (var subItem in Textures.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Landscape_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Landscape_ErrorMask>
    {
        #region Members
        public Exception Unknown;
        public Exception VertexNormals;
        public Exception VertexHeightMap;
        public Exception VertexColors;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, BaseLayer_ErrorMask>>> Layers;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Textures;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    return Unknown;
                case Landscape_FieldIndex.VertexNormals:
                    return VertexNormals;
                case Landscape_FieldIndex.VertexHeightMap:
                    return VertexHeightMap;
                case Landscape_FieldIndex.VertexColors:
                    return VertexColors;
                case Landscape_FieldIndex.Layers:
                    return Layers;
                case Landscape_FieldIndex.Textures:
                    return Textures;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    this.Unknown = ex;
                    break;
                case Landscape_FieldIndex.VertexNormals:
                    this.VertexNormals = ex;
                    break;
                case Landscape_FieldIndex.VertexHeightMap:
                    this.VertexHeightMap = ex;
                    break;
                case Landscape_FieldIndex.VertexColors:
                    this.VertexColors = ex;
                    break;
                case Landscape_FieldIndex.Layers:
                    this.Layers = new MaskItem<Exception, IEnumerable<MaskItem<Exception, BaseLayer_ErrorMask>>>(ex, null);
                    break;
                case Landscape_FieldIndex.Textures:
                    this.Textures = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    this.Unknown = (Exception)obj;
                    break;
                case Landscape_FieldIndex.VertexNormals:
                    this.VertexNormals = (Exception)obj;
                    break;
                case Landscape_FieldIndex.VertexHeightMap:
                    this.VertexHeightMap = (Exception)obj;
                    break;
                case Landscape_FieldIndex.VertexColors:
                    this.VertexColors = (Exception)obj;
                    break;
                case Landscape_FieldIndex.Layers:
                    this.Layers = (MaskItem<Exception, IEnumerable<MaskItem<Exception, BaseLayer_ErrorMask>>>)obj;
                    break;
                case Landscape_FieldIndex.Textures:
                    this.Textures = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Unknown != null) return true;
            if (VertexNormals != null) return true;
            if (VertexHeightMap != null) return true;
            if (VertexColors != null) return true;
            if (Layers != null) return true;
            if (Textures != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Landscape_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Unknown => {Unknown}");
            fg.AppendLine($"VertexNormals => {VertexNormals}");
            fg.AppendLine($"VertexHeightMap => {VertexHeightMap}");
            fg.AppendLine($"VertexColors => {VertexColors}");
            fg.AppendLine("Layers =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Layers.Overall != null)
                {
                    fg.AppendLine(Layers.Overall.ToString());
                }
                if (Layers.Specific != null)
                {
                    foreach (var subItem in Layers.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Textures =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Textures.Overall != null)
                {
                    fg.AppendLine(Textures.Overall.ToString());
                }
                if (Textures.Specific != null)
                {
                    foreach (var subItem in Textures.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Landscape_ErrorMask Combine(Landscape_ErrorMask rhs)
        {
            var ret = new Landscape_ErrorMask();
            ret.Unknown = this.Unknown.Combine(rhs.Unknown);
            ret.VertexNormals = this.VertexNormals.Combine(rhs.VertexNormals);
            ret.VertexHeightMap = this.VertexHeightMap.Combine(rhs.VertexHeightMap);
            ret.VertexColors = this.VertexColors.Combine(rhs.VertexColors);
            ret.Layers = new MaskItem<Exception, IEnumerable<MaskItem<Exception, BaseLayer_ErrorMask>>>(this.Layers.Overall.Combine(rhs.Layers.Overall), new List<MaskItem<Exception, BaseLayer_ErrorMask>>(this.Layers.Specific.And(rhs.Layers.Specific)));
            ret.Textures = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Textures.Overall.Combine(rhs.Textures.Overall), new List<(int Index, Exception Value)>(this.Textures.Specific.And(rhs.Textures.Specific)));
            return ret;
        }
        public static Landscape_ErrorMask Combine(Landscape_ErrorMask lhs, Landscape_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Landscape_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Landscape_ErrorMask();
        }
        #endregion

    }
    public class Landscape_CopyMask : OblivionMajorRecord_CopyMask
    {
        public Landscape_CopyMask()
        {
        }

        public Landscape_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Unknown = defaultOn;
            this.VertexNormals = defaultOn;
            this.VertexHeightMap = defaultOn;
            this.VertexColors = defaultOn;
            this.Layers = new MaskItem<CopyOption, BaseLayer_CopyMask>(deepCopyOption, default);
            this.Textures = deepCopyOption;
        }

        #region Members
        public bool Unknown;
        public bool VertexNormals;
        public bool VertexHeightMap;
        public bool VertexColors;
        public MaskItem<CopyOption, BaseLayer_CopyMask> Layers;
        public CopyOption Textures;
        #endregion

    }

    public class Landscape_DeepCopyMask : OblivionMajorRecord_DeepCopyMask
    {
        public Landscape_DeepCopyMask()
        {
        }

        public Landscape_DeepCopyMask(bool defaultOn)
        {
            this.Unknown = defaultOn;
            this.VertexNormals = defaultOn;
            this.VertexHeightMap = defaultOn;
            this.VertexColors = defaultOn;
            this.Layers = new MaskItem<bool, BaseLayer_DeepCopyMask>(defaultOn, default);
            this.Textures = defaultOn;
        }

        #region Members
        public bool Unknown;
        public bool VertexNormals;
        public bool VertexHeightMap;
        public bool VertexColors;
        public MaskItem<bool, BaseLayer_DeepCopyMask> Layers;
        public bool Textures;
        #endregion

    }

    public class Landscape_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Unknown;
        public bool VertexNormals;
        public bool VertexHeightMap;
        public bool VertexColors;
        public MaskItem<bool, BaseLayer_TranslationMask> Layers;
        public bool Textures;
        #endregion

        #region Ctors
        public Landscape_TranslationMask()
            : base()
        {
        }

        public Landscape_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Unknown = defaultOn;
            this.VertexNormals = defaultOn;
            this.VertexHeightMap = defaultOn;
            this.VertexColors = defaultOn;
            this.Layers = new MaskItem<bool, BaseLayer_TranslationMask>(defaultOn, null);
            this.Textures = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Unknown, null));
            ret.Add((VertexNormals, null));
            ret.Add((VertexHeightMap, null));
            ret.Add((VertexColors, null));
            ret.Add((Layers?.Overall ?? true, Layers?.Specific?.GetCrystal()));
            ret.Add((Textures, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LandscapeBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LandscapeBinaryWriteTranslation Instance = new LandscapeBinaryWriteTranslation();

        public static void Write_RecordTypes(
            ILandscapeGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Unknown_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unknown,
                    header: recordTypeConverter.ConvertToCustom(Landscape_Registration.DATA_HEADER),
                    nullable: false);
            }
            if (item.VertexNormals_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.VertexNormals,
                    header: recordTypeConverter.ConvertToCustom(Landscape_Registration.VNML_HEADER),
                    nullable: false);
            }
            if (item.VertexHeightMap_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.VertexHeightMap,
                    header: recordTypeConverter.ConvertToCustom(Landscape_Registration.VHGT_HEADER),
                    nullable: false);
            }
            if (item.VertexColors_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.VertexColors,
                    header: recordTypeConverter.ConvertToCustom(Landscape_Registration.VCLR_HEADER),
                    nullable: false);
            }
            if (item.Layers.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IBaseLayerGetter>.Instance.Write(
                    writer: writer,
                    items: item.Layers,
                    fieldIndex: (int)Landscape_FieldIndex.Layers,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IBaseLayerGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((BaseLayerBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
            if (item.Textures.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLinkGetter<ILandTextureGetter>>.Instance.Write(
                    writer: writer,
                    items: item.Textures,
                    recordType: Landscape_Registration.VTEX_HEADER,
                    transl: (MutagenWriter subWriter, IFormIDLinkGetter<ILandTextureGetter> subItem) =>
                    {
                        Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            masterReferences: masterReferences);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            ILandscapeGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Landscape_Registration.LAND_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ILandscapeGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ILandscapeGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ILandscapeGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class LandscapeBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static LandscapeBinaryCreateTranslation Instance = new LandscapeBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LandscapeBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILandscapeGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Landscape_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LandscapeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Landscape_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LandscapeBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        ILandscapeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Landscape_Registration.Instance;
        public new static Landscape_Registration Registration => Landscape_Registration.Instance;
        protected override object CommonInstance()
        {
            return LandscapeCommon.Instance;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILandscapeGetter)rhs, include);

        protected override object XmlWriteTranslator => LandscapeXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((LandscapeXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => LandscapeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((LandscapeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Unknown
        private int? _UnknownLocation;
        public bool Unknown_IsSet => _UnknownLocation.HasValue;
        public ReadOnlySpan<Byte> Unknown => _UnknownLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _UnknownLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region VertexNormals
        private int? _VertexNormalsLocation;
        public bool VertexNormals_IsSet => _VertexNormalsLocation.HasValue;
        public ReadOnlySpan<Byte> VertexNormals => _VertexNormalsLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _VertexNormalsLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region VertexHeightMap
        private int? _VertexHeightMapLocation;
        public bool VertexHeightMap_IsSet => _VertexHeightMapLocation.HasValue;
        public ReadOnlySpan<Byte> VertexHeightMap => _VertexHeightMapLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _VertexHeightMapLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region VertexColors
        private int? _VertexColorsLocation;
        public bool VertexColors_IsSet => _VertexColorsLocation.HasValue;
        public ReadOnlySpan<Byte> VertexColors => _VertexColorsLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _VertexColorsLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        public IReadOnlySetList<IBaseLayerGetter> Layers { get; private set; } = EmptySetList<BaseLayerBinaryWrapper>.Instance;
        public IReadOnlySetList<IFormIDLinkGetter<ILandTextureGetter>> Textures { get; private set; } = EmptySetList<IFormIDLinkGetter<ILandTextureGetter>>.Instance;
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected LandscapeBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static LandscapeBinaryWrapper LandscapeFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new LandscapeBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x41544144: // DATA
                {
                    _UnknownLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.Unknown);
                }
                case 0x4C4D4E56: // VNML
                {
                    _VertexNormalsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.VertexNormals);
                }
                case 0x54474856: // VHGT
                {
                    _VertexHeightMapLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.VertexHeightMap);
                }
                case 0x524C4356: // VCLR
                {
                    _VertexColorsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.VertexColors);
                }
                case 0x54585442: // BTXT
                case 0x54585441: // ATXT
                {
                    this.Layers = this.ParseRepeatedTypelessSubrecord<BaseLayerBinaryWrapper>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: BaseLayer_Registration.TriggeringRecordTypes,
                        factory: (s, r, p, recConv) =>
                        {
                            switch (r.TypeInt)
                            {
                                case 0x54585442: // BTXT
                                    return BaseLayerBinaryWrapper.BaseLayerFactory(s, p);
                                case 0x54585441: // ATXT
                                    return AlphaLayerBinaryWrapper.AlphaLayerFactory(s, p);
                                default:
                                    throw new NotImplementedException();
                            }
                        });
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.Layers);
                }
                case 0x58455456: // VTEX
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Textures = BinaryWrapperSetList<IFormIDLinkGetter<ILandTextureGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormIDLink<ILandTextureGetter>(FormKey.Factory(p.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.Textures);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

