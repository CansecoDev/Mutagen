/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LeveledSpell :
        SpellAbstract,
        ILeveledSpellInternal,
        ILoquiObjectSetter<LeveledSpell>,
        IEquatable<LeveledSpell>,
        IEqualsMask
    {
        #region Ctor
        protected LeveledSpell()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ChanceNone
        public bool ChanceNone_IsSet
        {
            get => _hasBeenSetTracker[(int)LeveledSpell_FieldIndex.ChanceNone];
            set => _hasBeenSetTracker[(int)LeveledSpell_FieldIndex.ChanceNone] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool ILeveledSpellGetter.ChanceNone_IsSet => ChanceNone_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _ChanceNone;
        public Byte ChanceNone
        {
            get => this._ChanceNone;
            set => ChanceNone_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte ILeveledSpellGetter.ChanceNone => this.ChanceNone;
        public void ChanceNone_Set(
            Byte value,
            bool markSet = true)
        {
            _ChanceNone = value;
            _hasBeenSetTracker[(int)LeveledSpell_FieldIndex.ChanceNone] = markSet;
        }
        public void ChanceNone_Unset()
        {
            this.ChanceNone_Set(default(Byte), false);
        }
        #endregion
        #region Flags
        public bool Flags_IsSet
        {
            get => _hasBeenSetTracker[(int)LeveledSpell_FieldIndex.Flags];
            set => _hasBeenSetTracker[(int)LeveledSpell_FieldIndex.Flags] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool ILeveledSpellGetter.Flags_IsSet => Flags_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LeveledFlag _Flags;
        public LeveledFlag Flags
        {
            get => this._Flags;
            set => Flags_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        LeveledFlag ILeveledSpellGetter.Flags => this.Flags;
        public void Flags_Set(
            LeveledFlag value,
            bool markSet = true)
        {
            _Flags = value;
            _hasBeenSetTracker[(int)LeveledSpell_FieldIndex.Flags] = markSet;
        }
        public void Flags_Unset()
        {
            this.Flags_Set(default(LeveledFlag), false);
        }
        #endregion
        #region Entries
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<LeveledEntry<SpellAbstract>> _Entries = new SetList<LeveledEntry<SpellAbstract>>();
        public ISetList<LeveledEntry<SpellAbstract>> Entries => _Entries;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<LeveledEntry<SpellAbstract>> ILeveledSpell.Entries => _Entries;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<ILeveledEntryGetter<ISpellAbstractGetter>> ILeveledSpellGetter.Entries => _Entries;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            LeveledSpellMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ILeveledSpellGetter rhs)) return false;
            return ((LeveledSpellCommon)((ILeveledSpellGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(LeveledSpell obj)
        {
            return ((LeveledSpellCommon)((ILeveledSpellGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((LeveledSpellCommon)((ILeveledSpellGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => LeveledSpellXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((LeveledSpellXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new LeveledSpell CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            LeveledSpell_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LeveledSpell CreateFromXml(
            XElement node,
            out LeveledSpell_ErrorMask errorMask,
            bool doMasks = true,
            LeveledSpell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = LeveledSpell_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static LeveledSpell CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new LeveledSpell() : null;
                    break;
                default:
                    break;
            }
            var ret = new LeveledSpell();
            ((LeveledSpellSetterCommon)((ILeveledSpellGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static LeveledSpell CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            LeveledSpell_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static LeveledSpell CreateFromXml(
            string path,
            out LeveledSpell_ErrorMask errorMask,
            LeveledSpell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LeveledSpell CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            LeveledSpell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LeveledSpell CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            LeveledSpell_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static LeveledSpell CreateFromXml(
            Stream stream,
            out LeveledSpell_ErrorMask errorMask,
            LeveledSpell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LeveledSpell CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            LeveledSpell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((LeveledSpell_FieldIndex)index)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                case LeveledSpell_FieldIndex.Flags:
                    return _hasBeenSetTracker[index];
                case LeveledSpell_FieldIndex.Entries:
                    return Entries.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LeveledSpell_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => LeveledSpellCommon.Instance.GetLinks(this);
        public LeveledSpell(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public LeveledSpell(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LeveledSpellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((LeveledSpellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new LeveledSpell CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static LeveledSpell CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new LeveledSpell();
            ((LeveledSpellSetterCommon)((ILeveledSpellGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILeveledSpellGetter)rhs, include);

        void IClearable.Clear()
        {
            ((LeveledSpellSetterCommon)((ILeveledSpellGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static new LeveledSpell GetNew()
        {
            return new LeveledSpell();
        }

    }
    #endregion

    #region Interface
    public partial interface ILeveledSpell :
        ILeveledSpellGetter,
        ISpellAbstract,
        ILoquiObjectSetter<ILeveledSpellInternal>
    {
        new Byte ChanceNone { get; set; }
        new bool ChanceNone_IsSet { get; set; }
        void ChanceNone_Set(Byte value, bool hasBeenSet = true);
        void ChanceNone_Unset();

        new LeveledFlag Flags { get; set; }
        new bool Flags_IsSet { get; set; }
        void Flags_Set(LeveledFlag value, bool hasBeenSet = true);
        void Flags_Unset();

        new ISetList<LeveledEntry<SpellAbstract>> Entries { get; }
    }

    public partial interface ILeveledSpellInternal :
        ISpellAbstractInternal,
        ILeveledSpell,
        ILeveledSpellGetter
    {
    }

    public partial interface ILeveledSpellGetter :
        ISpellAbstractGetter,
        ILoquiObject<ILeveledSpellGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        #region ChanceNone
        Byte ChanceNone { get; }
        bool ChanceNone_IsSet { get; }

        #endregion
        #region Flags
        LeveledFlag Flags { get; }
        bool Flags_IsSet { get; }

        #endregion
        #region Entries
        IReadOnlySetList<ILeveledEntryGetter<ISpellAbstractGetter>> Entries { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class LeveledSpellMixIn
    {
        public static void Clear(this ILeveledSpellInternal item)
        {
            ((LeveledSpellSetterCommon)((ILeveledSpellGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static LeveledSpell_Mask<bool> GetEqualsMask(
            this ILeveledSpellGetter item,
            ILeveledSpellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LeveledSpellCommon)((ILeveledSpellGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILeveledSpellGetter item,
            string name = null,
            LeveledSpell_Mask<bool> printMask = null)
        {
            return ((LeveledSpellCommon)((ILeveledSpellGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILeveledSpellGetter item,
            FileGeneration fg,
            string name = null,
            LeveledSpell_Mask<bool> printMask = null)
        {
            ((LeveledSpellCommon)((ILeveledSpellGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILeveledSpellGetter item,
            LeveledSpell_Mask<bool?> checkMask)
        {
            return ((LeveledSpellCommon)((ILeveledSpellGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static LeveledSpell_Mask<bool> GetHasBeenSetMask(this ILeveledSpellGetter item)
        {
            var ret = new LeveledSpell_Mask<bool>();
            ((LeveledSpellCommon)((ILeveledSpellGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ILeveledSpellGetter item,
            ILeveledSpellGetter rhs)
        {
            return ((LeveledSpellCommon)((ILeveledSpellGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this ILeveledSpellInternal lhs,
            ILeveledSpellGetter rhs,
            LeveledSpell_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this ILeveledSpellInternal lhs,
            ILeveledSpellGetter rhs,
            out LeveledSpell_ErrorMask errorMask,
            LeveledSpell_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LeveledSpellSetterTranslationCommon)((ILeveledSpellGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = LeveledSpell_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this ILeveledSpellInternal lhs,
            ILeveledSpellGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((LeveledSpellSetterTranslationCommon)((ILeveledSpellGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static LeveledSpell DeepCopy(
            this ILeveledSpellGetter item,
            LeveledSpell_TranslationMask copyMask = null)
        {
            return ((LeveledSpellSetterTranslationCommon)((ILeveledSpellGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LeveledSpell DeepCopy(
            this ILeveledSpellGetter item,
            out LeveledSpell_ErrorMask errorMask,
            LeveledSpell_TranslationMask copyMask = null)
        {
            return ((LeveledSpellSetterTranslationCommon)((ILeveledSpellGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LeveledSpell DeepCopy(
            this ILeveledSpellGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((LeveledSpellSetterTranslationCommon)((ILeveledSpellGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILeveledSpellInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            LeveledSpell_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILeveledSpellInternal item,
            XElement node,
            out LeveledSpell_ErrorMask errorMask,
            bool doMasks = true,
            LeveledSpell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = LeveledSpell_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ILeveledSpellInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((LeveledSpellSetterCommon)((ILeveledSpellGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILeveledSpellInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            LeveledSpell_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILeveledSpellInternal item,
            string path,
            out LeveledSpell_ErrorMask errorMask,
            LeveledSpell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILeveledSpellInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            LeveledSpell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ILeveledSpellInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            LeveledSpell_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILeveledSpellInternal item,
            Stream stream,
            out LeveledSpell_ErrorMask errorMask,
            LeveledSpell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILeveledSpellInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            LeveledSpell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ILeveledSpellInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ILeveledSpellInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((LeveledSpellSetterCommon)((ILeveledSpellGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LeveledSpell_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        ChanceNone = 5,
        Flags = 6,
        Entries = 7,
    }
    #endregion

    #region Registration
    public partial class LeveledSpell_Registration : ILoquiRegistration
    {
        public static readonly LeveledSpell_Registration Instance = new LeveledSpell_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 164,
            version: 0);

        public const string GUID = "ebf4d53e-7995-458e-b9a8-5521f7d86bd5";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(LeveledSpell_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LeveledSpell_ErrorMask);

        public static readonly Type ClassType = typeof(LeveledSpell);

        public static readonly Type GetterType = typeof(ILeveledSpellGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILeveledSpell);

        public static readonly Type InternalSetterType = typeof(ILeveledSpellInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LeveledSpell";

        public const string Name = "LeveledSpell";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "CHANCENONE":
                    return (ushort)LeveledSpell_FieldIndex.ChanceNone;
                case "FLAGS":
                    return (ushort)LeveledSpell_FieldIndex.Flags;
                case "ENTRIES":
                    return (ushort)LeveledSpell_FieldIndex.Entries;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.Entries:
                    return true;
                case LeveledSpell_FieldIndex.ChanceNone:
                case LeveledSpell_FieldIndex.Flags:
                    return false;
                default:
                    return SpellAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.Entries:
                    return true;
                case LeveledSpell_FieldIndex.ChanceNone:
                case LeveledSpell_FieldIndex.Flags:
                    return false;
                default:
                    return SpellAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                case LeveledSpell_FieldIndex.Flags:
                case LeveledSpell_FieldIndex.Entries:
                    return false;
                default:
                    return SpellAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                    return "ChanceNone";
                case LeveledSpell_FieldIndex.Flags:
                    return "Flags";
                case LeveledSpell_FieldIndex.Entries:
                    return "Entries";
                default:
                    return SpellAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                case LeveledSpell_FieldIndex.Flags:
                case LeveledSpell_FieldIndex.Entries:
                    return false;
                default:
                    return SpellAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                case LeveledSpell_FieldIndex.Flags:
                case LeveledSpell_FieldIndex.Entries:
                    return false;
                default:
                    return SpellAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                    return typeof(Byte);
                case LeveledSpell_FieldIndex.Flags:
                    return typeof(LeveledFlag);
                case LeveledSpell_FieldIndex.Entries:
                    return typeof(ISetList<LeveledEntry<SpellAbstract>>);
                default:
                    return SpellAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(LeveledSpellXmlWriteTranslation);
        public static readonly RecordType LVSP_HEADER = new RecordType("LVSP");
        public static readonly RecordType LVLD_HEADER = new RecordType("LVLD");
        public static readonly RecordType LVLF_HEADER = new RecordType("LVLF");
        public static readonly RecordType LVLO_HEADER = new RecordType("LVLO");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LVSP_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryWriteTranslation = typeof(LeveledSpellBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LeveledSpellSetterCommon : SpellAbstractSetterCommon
    {
        public new static readonly LeveledSpellSetterCommon Instance = new LeveledSpellSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILeveledSpellInternal item)
        {
            ClearPartial();
            item.ChanceNone_Unset();
            item.Flags_Unset();
            item.Entries.Unset();
            base.Clear(item);
        }
        
        public override void Clear(ISpellAbstractInternal item)
        {
            Clear(item: (ILeveledSpellInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ILeveledSpellInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILeveledSpellInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ILeveledSpellInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    SpellAbstractSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            ILeveledSpellInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    LeveledSpellXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => LeveledSpell_Registration.LVSP_HEADER;
        protected static void FillBinaryStructs(
            ILeveledSpellInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            SpellAbstractSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ILeveledSpellInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x444C564C: // LVLD
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.ChanceNone = frame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)LeveledSpell_FieldIndex.ChanceNone);
                }
                case 0x464C564C: // LVLF
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<LeveledFlag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)LeveledSpell_FieldIndex.Flags);
                }
                case 0x4F4C564C: // LVLO
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<LeveledEntry<SpellAbstract>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: LeveledSpell_Registration.LVLO_HEADER,
                        item: item.Entries,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: (MutagenFrame r, out LeveledEntry<SpellAbstract> listSubItem) =>
                        {
                            return LoquiBinaryTranslation<LeveledEntry<SpellAbstract>>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)LeveledSpell_FieldIndex.Entries);
                }
                default:
                    return SpellAbstractSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            ILeveledSpellInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<ILeveledSpellInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class LeveledSpellCommon : SpellAbstractCommon
    {
        public new static readonly LeveledSpellCommon Instance = new LeveledSpellCommon();

        public LeveledSpell_Mask<bool> GetEqualsMask(
            ILeveledSpellGetter item,
            ILeveledSpellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LeveledSpell_Mask<bool>();
            ((LeveledSpellCommon)((ILeveledSpellGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILeveledSpellGetter item,
            ILeveledSpellGetter rhs,
            LeveledSpell_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ChanceNone = item.ChanceNone_IsSet == rhs.ChanceNone_IsSet && item.ChanceNone == rhs.ChanceNone;
            ret.Flags = item.Flags_IsSet == rhs.Flags_IsSet && item.Flags == rhs.Flags;
            ret.Entries = item.Entries.CollectionEqualsHelper(
                rhs.Entries,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ILeveledSpellGetter item,
            string name = null,
            LeveledSpell_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILeveledSpellGetter item,
            FileGeneration fg,
            string name = null,
            LeveledSpell_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LeveledSpell =>");
            }
            else
            {
                fg.AppendLine($"{name} (LeveledSpell) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILeveledSpellGetter item,
            FileGeneration fg,
            LeveledSpell_Mask<bool> printMask = null)
        {
            SpellAbstractCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ChanceNone ?? true)
            {
                fg.AppendLine($"ChanceNone => {item.ChanceNone}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Entries?.Overall ?? true)
            {
                fg.AppendLine("Entries =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Entries)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ILeveledSpellGetter item,
            LeveledSpell_Mask<bool?> checkMask)
        {
            if (checkMask.ChanceNone.HasValue && checkMask.ChanceNone.Value != item.ChanceNone_IsSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_IsSet) return false;
            if (checkMask.Entries.Overall.HasValue && checkMask.Entries.Overall.Value != item.Entries.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ILeveledSpellGetter item,
            LeveledSpell_Mask<bool> mask)
        {
            mask.ChanceNone = item.ChanceNone_IsSet;
            mask.Flags = item.Flags_IsSet;
            mask.Entries = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, LeveledEntry_Mask<bool>>>>(item.Entries.HasBeenSet, item.Entries.WithIndex().Select((i) => new MaskItemIndexed<bool, LeveledEntry_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static LeveledSpell_FieldIndex ConvertFieldIndex(SpellAbstract_FieldIndex index)
        {
            switch (index)
            {
                case SpellAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (LeveledSpell_FieldIndex)((int)index);
                case SpellAbstract_FieldIndex.FormKey:
                    return (LeveledSpell_FieldIndex)((int)index);
                case SpellAbstract_FieldIndex.Version:
                    return (LeveledSpell_FieldIndex)((int)index);
                case SpellAbstract_FieldIndex.EditorID:
                    return (LeveledSpell_FieldIndex)((int)index);
                case SpellAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (LeveledSpell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new LeveledSpell_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LeveledSpell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (LeveledSpell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (LeveledSpell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (LeveledSpell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (LeveledSpell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new LeveledSpell_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LeveledSpell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (LeveledSpell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (LeveledSpell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LeveledSpell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILeveledSpellGetter lhs,
            ILeveledSpellGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.ChanceNone_IsSet != rhs.ChanceNone_IsSet) return false;
            if (lhs.ChanceNone_IsSet)
            {
                if (lhs.ChanceNone != rhs.ChanceNone) return false;
            }
            if (lhs.Flags_IsSet != rhs.Flags_IsSet) return false;
            if (lhs.Flags_IsSet)
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if (lhs.Entries.HasBeenSet != rhs.Entries.HasBeenSet) return false;
            if (lhs.Entries.HasBeenSet)
            {
                if (!lhs.Entries.SequenceEqual(rhs.Entries)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISpellAbstractGetter lhs,
            ISpellAbstractGetter rhs)
        {
            return Equals(
                lhs: (ILeveledSpellGetter)lhs,
                rhs: rhs as ILeveledSpellGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter lhs,
            IOblivionMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (ILeveledSpellGetter)lhs,
                rhs: rhs as ILeveledSpellGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (ILeveledSpellGetter)lhs,
                rhs: rhs as ILeveledSpellGetter);
        }
        
        public virtual int GetHashCode(ILeveledSpellGetter item)
        {
            int ret = 0;
            if (item.ChanceNone_IsSet)
            {
                ret = HashHelper.GetHashCode(item.ChanceNone).CombineHashCode(ret);
            }
            if (item.Flags_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            }
            if (item.Entries.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Entries).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(ISpellAbstractGetter item)
        {
            return GetHashCode(item: (ILeveledSpellGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ILeveledSpellGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILeveledSpellGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return LeveledSpell.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ILeveledSpellGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Entries.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(LeveledSpell obj, LeveledSpell rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new LeveledSpell(getNextFormKey());
            ret.DeepCopyFieldsFrom((LeveledSpell)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (LeveledSpell)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class LeveledSpellSetterTranslationCommon : SpellAbstractSetterTranslationCommon
    {
        public new static readonly LeveledSpellSetterTranslationCommon Instance = new LeveledSpellSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            ILeveledSpellInternal item,
            ILeveledSpellGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyFieldsFrom(
            ILeveledSpell item,
            ILeveledSpellGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)LeveledSpell_FieldIndex.ChanceNone) ?? true))
            {
                errorMask?.PushIndex((int)LeveledSpell_FieldIndex.ChanceNone);
                try
                {
                    if (rhs.ChanceNone_IsSet)
                    {
                        item.ChanceNone = rhs.ChanceNone;
                    }
                    else
                    {
                        item.ChanceNone_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledSpell_FieldIndex.Flags) ?? true))
            {
                errorMask?.PushIndex((int)LeveledSpell_FieldIndex.Flags);
                try
                {
                    if (rhs.Flags_IsSet)
                    {
                        item.Flags = rhs.Flags;
                    }
                    else
                    {
                        item.Flags_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledSpell_FieldIndex.Entries) ?? true))
            {
                errorMask?.PushIndex((int)LeveledSpell_FieldIndex.Entries);
                try
                {
                    if (rhs.Entries.HasBeenSet)
                    {
                        item.Entries.SetTo(
                            items: rhs.Entries,
                            converter: (r) =>
                            {
                                return r.DeepCopy<SpellAbstract, ISpellAbstractGetter, SpellAbstract_TranslationMask>(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.Entries.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyFieldsFrom(
            ISpellAbstractInternal item,
            ISpellAbstractGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (ILeveledSpellInternal)item,
                rhs: (ILeveledSpellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            ISpellAbstract item,
            ISpellAbstractGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (ILeveledSpell)item,
                rhs: (ILeveledSpellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (ILeveledSpellInternal)item,
                rhs: (ILeveledSpellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (ILeveledSpell)item,
                rhs: (ILeveledSpellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (ILeveledSpellInternal)item,
                rhs: (ILeveledSpellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (ILeveledSpell)item,
                rhs: (ILeveledSpellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public LeveledSpell DeepCopy(
            ILeveledSpellGetter item,
            LeveledSpell_TranslationMask copyMask = null)
        {
            LeveledSpell ret = (LeveledSpell)((LeveledSpellCommon)((ILeveledSpellGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public LeveledSpell DeepCopy(
            ILeveledSpellGetter item,
            out LeveledSpell_ErrorMask errorMask,
            LeveledSpell_TranslationMask copyMask = null)
        {
            LeveledSpell ret = (LeveledSpell)((LeveledSpellCommon)((ILeveledSpellGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public LeveledSpell DeepCopy(
            ILeveledSpellGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            LeveledSpell ret = (LeveledSpell)((LeveledSpellCommon)((ILeveledSpellGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LeveledSpell
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledSpell_Registration.Instance;
        public new static LeveledSpell_Registration Registration => LeveledSpell_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LeveledSpellCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LeveledSpellSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LeveledSpellSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LeveledSpellXmlWriteTranslation :
        SpellAbstractXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static LeveledSpellXmlWriteTranslation Instance = new LeveledSpellXmlWriteTranslation();

        public static void WriteToNodeXml(
            ILeveledSpellGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            SpellAbstractXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.ChanceNone_IsSet
                && (translationMask?.GetShouldTranslate((int)LeveledSpell_FieldIndex.ChanceNone) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ChanceNone),
                    item: item.ChanceNone,
                    fieldIndex: (int)LeveledSpell_FieldIndex.ChanceNone,
                    errorMask: errorMask);
            }
            if (item.Flags_IsSet
                && (translationMask?.GetShouldTranslate((int)LeveledSpell_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<LeveledFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)LeveledSpell_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.Entries.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)LeveledSpell_FieldIndex.Entries) ?? true))
            {
                ListXmlTranslation<ILeveledEntryGetter<ISpellAbstractGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Entries),
                    item: item.Entries,
                    fieldIndex: (int)LeveledSpell_FieldIndex.Entries,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)LeveledSpell_FieldIndex.Entries),
                    transl: (XElement subNode, ILeveledEntryGetter<ISpellAbstractGetter> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((LeveledEntryXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ISpellAbstractGetter>(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            ILeveledSpellGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LeveledSpell");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LeveledSpell");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILeveledSpellGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISpellAbstractGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILeveledSpellGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILeveledSpellGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILeveledSpellGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class LeveledSpellXmlCreateTranslation : SpellAbstractXmlCreateTranslation
    {
        public new readonly static LeveledSpellXmlCreateTranslation Instance = new LeveledSpellXmlCreateTranslation();

        public static void FillPublicXml(
            ILeveledSpellInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LeveledSpellXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILeveledSpellInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "ChanceNone":
                    try
                    {
                        errorMask?.PushIndex((int)LeveledSpell_FieldIndex.ChanceNone);
                        item.ChanceNone = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)LeveledSpell_FieldIndex.Flags);
                        item.Flags = EnumXmlTranslation<LeveledFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Entries":
                    try
                    {
                        errorMask?.PushIndex((int)LeveledSpell_FieldIndex.Entries);
                        if (ListXmlTranslation<LeveledEntry<SpellAbstract>>.Instance.Parse(
                            node: node,
                            enumer: out var EntriesItem,
                            transl: LoquiXmlTranslation<LeveledEntry<SpellAbstract>>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Entries.SetTo(EntriesItem);
                        }
                        else
                        {
                            item.Entries.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SpellAbstractXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class LeveledSpellXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ILeveledSpellGetter item,
            XElement node,
            out LeveledSpell_ErrorMask errorMask,
            bool doMasks = true,
            LeveledSpell_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LeveledSpellXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LeveledSpell_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ILeveledSpellGetter item,
            string path,
            out LeveledSpell_ErrorMask errorMask,
            LeveledSpell_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILeveledSpellGetter item,
            Stream stream,
            out LeveledSpell_ErrorMask errorMask,
            LeveledSpell_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class LeveledSpell_Mask<T> : SpellAbstract_Mask<T>, IMask<T>, IEquatable<LeveledSpell_Mask<T>>
    {
        #region Ctors
        public LeveledSpell_Mask()
        {
        }

        public LeveledSpell_Mask(T initialValue)
        {
            this.ChanceNone = initialValue;
            this.Flags = initialValue;
            this.Entries = new MaskItem<T, IEnumerable<MaskItemIndexed<T, LeveledEntry_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T ChanceNone;
        public T Flags;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, LeveledEntry_Mask<T>>>> Entries;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LeveledSpell_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LeveledSpell_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.ChanceNone, rhs.ChanceNone)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Entries, rhs.Entries)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ChanceNone?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Entries?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.ChanceNone)) return false;
            if (!eval(this.Flags)) return false;
            if (this.Entries != null)
            {
                if (!eval(this.Entries.Overall)) return false;
                if (this.Entries.Specific != null)
                {
                    foreach (var item in this.Entries.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new LeveledSpell_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LeveledSpell_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LeveledSpell_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.ChanceNone = eval(this.ChanceNone);
            obj.Flags = eval(this.Flags);
            if (Entries != null)
            {
                obj.Entries = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LeveledEntry_Mask<R>>>>();
                obj.Entries.Overall = eval(this.Entries.Overall);
                if (Entries.Specific != null)
                {
                    List<MaskItemIndexed<R, LeveledEntry_Mask<R>>> l = new List<MaskItemIndexed<R, LeveledEntry_Mask<R>>>();
                    obj.Entries.Specific = l;
                    foreach (var item in Entries.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, LeveledEntry_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, LeveledEntry_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Entries.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LeveledSpell_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LeveledSpell_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LeveledSpell_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ChanceNone ?? true)
                {
                    fg.AppendLine($"ChanceNone => {ChanceNone}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Entries?.Overall ?? true)
                {
                    fg.AppendLine("Entries =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Entries.Overall != null)
                        {
                            fg.AppendLine(Entries.Overall.ToString());
                        }
                        if (Entries.Specific != null)
                        {
                            foreach (var subItem in Entries.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LeveledSpell_ErrorMask : SpellAbstract_ErrorMask, IErrorMask<LeveledSpell_ErrorMask>
    {
        #region Members
        public Exception ChanceNone;
        public Exception Flags;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, LeveledEntry_ErrorMask<SpellAbstract_ErrorMask>>>> Entries;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                    return ChanceNone;
                case LeveledSpell_FieldIndex.Flags:
                    return Flags;
                case LeveledSpell_FieldIndex.Entries:
                    return Entries;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                    this.ChanceNone = ex;
                    break;
                case LeveledSpell_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case LeveledSpell_FieldIndex.Entries:
                    this.Entries = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LeveledEntry_ErrorMask<SpellAbstract_ErrorMask>>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                    this.ChanceNone = (Exception)obj;
                    break;
                case LeveledSpell_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case LeveledSpell_FieldIndex.Entries:
                    this.Entries = (MaskItem<Exception, IEnumerable<MaskItem<Exception, LeveledEntry_ErrorMask<SpellAbstract_ErrorMask>>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (ChanceNone != null) return true;
            if (Flags != null) return true;
            if (Entries != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("LeveledSpell_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"ChanceNone => {ChanceNone}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine("Entries =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Entries.Overall != null)
                {
                    fg.AppendLine(Entries.Overall.ToString());
                }
                if (Entries.Specific != null)
                {
                    foreach (var subItem in Entries.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public LeveledSpell_ErrorMask Combine(LeveledSpell_ErrorMask rhs)
        {
            var ret = new LeveledSpell_ErrorMask();
            ret.ChanceNone = this.ChanceNone.Combine(rhs.ChanceNone);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Entries = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LeveledEntry_ErrorMask<SpellAbstract_ErrorMask>>>>(this.Entries.Overall.Combine(rhs.Entries.Overall), new List<MaskItem<Exception, LeveledEntry_ErrorMask<SpellAbstract_ErrorMask>>>(this.Entries.Specific.And(rhs.Entries.Specific)));
            return ret;
        }
        public static LeveledSpell_ErrorMask Combine(LeveledSpell_ErrorMask lhs, LeveledSpell_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static new LeveledSpell_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new LeveledSpell_ErrorMask();
        }
        #endregion

    }
    public class LeveledSpell_TranslationMask : SpellAbstract_TranslationMask
    {
        #region Members
        public bool ChanceNone;
        public bool Flags;
        public MaskItem<bool, LeveledEntry_TranslationMask<SpellAbstract_TranslationMask>> Entries;
        #endregion

        #region Ctors
        public LeveledSpell_TranslationMask()
            : base()
        {
        }

        public LeveledSpell_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.ChanceNone = defaultOn;
            this.Flags = defaultOn;
            this.Entries = new MaskItem<bool, LeveledEntry_TranslationMask<SpellAbstract_TranslationMask>>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((ChanceNone, null));
            ret.Add((Flags, null));
            ret.Add((Entries?.Overall ?? true, Entries?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LeveledSpellBinaryWriteTranslation :
        SpellAbstractBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LeveledSpellBinaryWriteTranslation Instance = new LeveledSpellBinaryWriteTranslation();

        public static void Write_RecordTypes(
            ILeveledSpellGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            if (item.ChanceNone_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ChanceNone,
                    header: recordTypeConverter.ConvertToCustom(LeveledSpell_Registration.LVLD_HEADER),
                    nullable: false);
            }
            if (item.Flags_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<LeveledFlag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1,
                    header: recordTypeConverter.ConvertToCustom(LeveledSpell_Registration.LVLF_HEADER),
                    nullable: false);
            }
            if (item.Entries.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<ILeveledEntryGetter<ISpellAbstractGetter>>.Instance.Write(
                    writer: writer,
                    items: item.Entries,
                    transl: (MutagenWriter subWriter, ILeveledEntryGetter<ISpellAbstractGetter> subItem) =>
                    {
                        var loquiItem = subItem;
                        ((LeveledEntryBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ISpellAbstractGetter>(
                            item: loquiItem,
                            writer: subWriter,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            ILeveledSpellGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: LeveledSpell_Registration.LVSP_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (ILeveledSpellGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISpellAbstractGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (ILeveledSpellGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (ILeveledSpellGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (ILeveledSpellGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LeveledSpellBinaryCreateTranslation : SpellAbstractBinaryCreateTranslation
    {
        public new readonly static LeveledSpellBinaryCreateTranslation Instance = new LeveledSpellBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LeveledSpellBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LeveledSpellBinaryOverlay :
        SpellAbstractBinaryOverlay,
        ILeveledSpellGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledSpell_Registration.Instance;
        public new static LeveledSpell_Registration Registration => LeveledSpell_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LeveledSpellCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LeveledSpellSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILeveledSpellGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => LeveledSpellCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => LeveledSpellXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((LeveledSpellXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LeveledSpellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((LeveledSpellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region ChanceNone
        private int? _ChanceNoneLocation;
        public bool ChanceNone_IsSet => _ChanceNoneLocation.HasValue;
        public Byte ChanceNone => _ChanceNoneLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _ChanceNoneLocation.Value, _package.Meta)[0] : default;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public bool Flags_IsSet => _FlagsLocation.HasValue;
        public LeveledFlag Flags => (LeveledFlag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation.Value, _package.Meta)[0];
        #endregion
        public IReadOnlySetList<ILeveledEntryGetter<ISpellAbstractGetter>> Entries { get; private set; } = EmptySetList<LeveledEntryBinaryOverlay<ISpellAbstractGetter>>.Instance;
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected LeveledSpellBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static LeveledSpellBinaryOverlay LeveledSpellFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new LeveledSpellBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x444C564C: // LVLD
                {
                    _ChanceNoneLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LeveledSpell_FieldIndex.ChanceNone);
                }
                case 0x464C564C: // LVLF
                {
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LeveledSpell_FieldIndex.Flags);
                }
                case 0x4F4C564C: // LVLO
                {
                    this.Entries = BinaryOverlaySetList<LeveledEntryBinaryOverlay<ISpellAbstractGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => LeveledEntryBinaryOverlay<ISpellAbstractGetter>.LeveledEntryFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)LeveledSpell_FieldIndex.Entries);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

