/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Drawing;
using Loqui.Presentation;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Light :
        ItemAbstract,
        ILightInternal,
        ILoquiObjectSetter<Light>,
        INamed,
        ILinkSubContainer,
        IEquatable<Light>,
        IEqualsMask
    {
        #region Ctor
        protected Light()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)Light_FieldIndex.Model];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Light_FieldIndex.Model, nameof(Model_IsSet));
        }
        bool ILightGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Model, value, _hasBeenSetTracker, hasBeenSet, (int)Light_FieldIndex.Model, nameof(Model), nameof(Model_IsSet));
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter ILightGetter.Model => this.Model;
        #endregion
        #region Script
        public IFormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Script> ILight.Script_Property => this.Script_Property;
        IScriptGetter ILightGetter.Script => this.Script_Property.Item;
        IFormIDSetLinkGetter<IScriptGetter> ILightGetter.Script_Property => this.Script_Property;
        #endregion
        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Light_FieldIndex.Name];
            set => _hasBeenSetTracker[(int)Light_FieldIndex.Name] = value;
        }
        bool ILightGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String ILightGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            _Name = value;
            _hasBeenSetTracker[(int)Light_FieldIndex.Name] = markSet;
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)Light_FieldIndex.Icon];
            set => _hasBeenSetTracker[(int)Light_FieldIndex.Icon] = value;
        }
        bool ILightGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String ILightGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            _Icon = value;
            _hasBeenSetTracker[(int)Light_FieldIndex.Icon] = markSet;
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region Time
        public readonly static Int32 _Time_Default = -1;
        private Int32 _Time;
        public Int32 Time
        {
            get => this._Time;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Time = value;
            }
        }
        #endregion
        #region Radius
        private UInt32 _Radius;
        public UInt32 Radius
        {
            get => this._Radius;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Radius = value;
            }
        }
        #endregion
        #region Color
        private Color _Color;
        public Color Color
        {
            get => this._Color;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Color = value;
            }
        }
        #endregion
        #region Flags
        private Light.LightFlag _Flags;
        public Light.LightFlag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region FalloffExponent
        public readonly static Single _FalloffExponent_Default = 1;
        private Single _FalloffExponent;
        public Single FalloffExponent
        {
            get => this._FalloffExponent;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._FalloffExponent = value;
            }
        }
        #endregion
        #region FOV
        public readonly static Single _FOV_Default = 90;
        private Single _FOV;
        public Single FOV
        {
            get => this._FOV;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._FOV = value;
            }
        }
        #endregion
        #region Value
        private UInt32 _Value;
        public UInt32 Value
        {
            get => this._Value;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._Value = value;
            }
        }
        #endregion
        #region Weight
        private Single _Weight;
        public Single Weight
        {
            get => this._Weight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._Weight = value;
            }
        }
        #endregion
        #region Fade
        public bool Fade_IsSet
        {
            get => _hasBeenSetTracker[(int)Light_FieldIndex.Fade];
            set => _hasBeenSetTracker[(int)Light_FieldIndex.Fade] = value;
        }
        bool ILightGetter.Fade_IsSet => Fade_IsSet;
        private Single _Fade;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Fade
        {
            get => this._Fade;
            set => Fade_Set(value);
        }
        Single ILightGetter.Fade => this.Fade;
        public void Fade_Set(
            Single value,
            bool markSet = true)
        {
            _Fade = value;
            _hasBeenSetTracker[(int)Light_FieldIndex.Fade] = markSet;
        }
        public void Fade_Unset()
        {
            this.Fade_Set(default(Single), false);
        }
        #endregion
        #region Sound
        public IFormIDSetLink<Sound> Sound_Property { get; } = new FormIDSetLink<Sound>();
        public Sound Sound { get => Sound_Property.Item; set => Sound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Sound> ILight.Sound_Property => this.Sound_Property;
        ISoundGetter ILightGetter.Sound => this.Sound_Property.Item;
        IFormIDSetLinkGetter<ISoundGetter> ILightGetter.Sound_Property => this.Sound_Property;
        #endregion
        #region DATADataTypeState
        public Light.DATADataType DATADataTypeState { get; set; }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILightGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            LightMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ILightGetter rhs)) return false;
            return ((LightCommon)((ILightGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Light obj)
        {
            return ((LightCommon)((ILightGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((LightCommon)((ILightGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => LightXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((LightXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Light CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Light_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Light CreateFromXml(
            XElement node,
            out Light_ErrorMask errorMask,
            bool doMasks = true,
            Light_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Light_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Light CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Light() : null;
                    break;
                default:
                    break;
            }
            var ret = new Light();
            try
            {
                ret.DATADataTypeState |= Light.DATADataType.Break0;
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    LightXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Light CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Light_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Light CreateFromXml(
            string path,
            out Light_ErrorMask errorMask,
            Light_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Light CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Light_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Light CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Light_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Light CreateFromXml(
            Stream stream,
            out Light_ErrorMask errorMask,
            Light_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Light CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Light_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            Light item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= Light.DATADataType.Has;
                    break;
                default:
                    ItemAbstract.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Light_FieldIndex)index)
            {
                case Light_FieldIndex.Model:
                case Light_FieldIndex.Name:
                case Light_FieldIndex.Icon:
                case Light_FieldIndex.Fade:
                    return _hasBeenSetTracker[index];
                case Light_FieldIndex.Script:
                    return Script_Property.HasBeenSet;
                case Light_FieldIndex.Sound:
                    return Sound_Property.HasBeenSet;
                case Light_FieldIndex.Time:
                case Light_FieldIndex.Radius:
                case Light_FieldIndex.Color:
                case Light_FieldIndex.Flags:
                case Light_FieldIndex.FalloffExponent:
                case Light_FieldIndex.FOV:
                case Light_FieldIndex.Value:
                case Light_FieldIndex.Weight:
                case Light_FieldIndex.DATADataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Light_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1,
            Break0 = 2
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Script_Property;
            yield return Sound_Property;
            yield break;
        }

        public override void Link<M>(LinkingPackage<M> package)
            
        {
            base.Link(package: package);
            Script_Property.Link(package);
            Sound_Property.Link(package);
        }

        public Light(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Light(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => LightBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((LightBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Light CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Light CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Light_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Light_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Light CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Light>(
                record: new Light(),
                frame: frame,
                errorMask: errorMask,
                recType: Light_Registration.LIGH_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            Light item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ItemAbstract.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            Light item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    try
                    {
                        errorMask?.PushIndex((int)Light_FieldIndex.Model);
                        item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Light_FieldIndex.Model);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Script_Property);
                    return TryGet<int?>.Succeed((int)Light_FieldIndex.Script);
                }
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Light_FieldIndex.Name);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String IconParse))
                    {
                        item.Icon = IconParse;
                    }
                    else
                    {
                        item.Icon = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Light_FieldIndex.Icon);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = DATADataType.Has;
                    }
                    item.Time = dataFrame.ReadInt32();
                    item.Radius = dataFrame.ReadUInt32();
                    if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        extraByte: true,
                        item: out Color ColorParse))
                    {
                        item.Color = ColorParse;
                    }
                    else
                    {
                        item.Color = default(Color);
                    }
                    if (EnumBinaryTranslation<Light.LightFlag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out Light.LightFlag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(Light.LightFlag);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single FalloffExponentParse))
                    {
                        item.FalloffExponent = FalloffExponentParse;
                    }
                    else
                    {
                        item.FalloffExponent = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single FOVParse))
                    {
                        item.FOV = FOVParse;
                    }
                    else
                    {
                        item.FOV = default(Single);
                    }
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= DATADataType.Break0;
                        return TryGet<int?>.Succeed((int)Light_FieldIndex.FOV);
                    }
                    item.Value = dataFrame.ReadUInt32();
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single WeightParse))
                    {
                        item.Weight = WeightParse;
                    }
                    else
                    {
                        item.Weight = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)Light_FieldIndex.Weight);
                }
                case 0x4D414E46: // FNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Single FadeParse))
                    {
                        item.Fade = FadeParse;
                    }
                    else
                    {
                        item.Fade = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)Light_FieldIndex.Fade);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Sound_Property);
                    return TryGet<int?>.Succeed((int)Light_FieldIndex.Sound);
                }
                default:
                    return ItemAbstract.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        void IClearable.Clear()
        {
            ((LightSetterCommon)((ILightGetter)this).CommonSetterInstance()).Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface ILight :
        ILightGetter,
        IItemAbstract,
        ILoquiObjectSetter<ILightInternal>
    {
        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model value, bool hasBeenSet = true);
        void Model_Unset();

        new Script Script { get; set; }
        new IFormIDSetLink<Script> Script_Property { get; }
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String value, bool hasBeenSet = true);
        void Icon_Unset();

        new Int32 Time { get; set; }

        new UInt32 Radius { get; set; }

        new Color Color { get; set; }

        new Light.LightFlag Flags { get; set; }

        new Single FalloffExponent { get; set; }

        new Single FOV { get; set; }

        new UInt32 Value { get; set; }

        new Single Weight { get; set; }

        new Single Fade { get; set; }
        new bool Fade_IsSet { get; set; }
        void Fade_Set(Single value, bool hasBeenSet = true);
        void Fade_Unset();

        new Sound Sound { get; set; }
        new IFormIDSetLink<Sound> Sound_Property { get; }
        new Light.DATADataType DATADataTypeState { get; set; }

    }

    public partial interface ILightInternal :
        IItemAbstractInternal,
        ILight,
        ILightGetter
    {
    }

    public partial interface ILightGetter :
        IItemAbstractGetter,
        ILoquiObject<ILightGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Model
        IModelGetter Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Script
        IScriptGetter Script { get; }
        IFormIDSetLinkGetter<IScriptGetter> Script_Property { get; }

        #endregion
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region Time
        Int32 Time { get; }

        #endregion
        #region Radius
        UInt32 Radius { get; }

        #endregion
        #region Color
        Color Color { get; }

        #endregion
        #region Flags
        Light.LightFlag Flags { get; }

        #endregion
        #region FalloffExponent
        Single FalloffExponent { get; }

        #endregion
        #region FOV
        Single FOV { get; }

        #endregion
        #region Value
        UInt32 Value { get; }

        #endregion
        #region Weight
        Single Weight { get; }

        #endregion
        #region Fade
        Single Fade { get; }
        bool Fade_IsSet { get; }

        #endregion
        #region Sound
        ISoundGetter Sound { get; }
        IFormIDSetLinkGetter<ISoundGetter> Sound_Property { get; }

        #endregion
        #region DATADataTypeState
        Light.DATADataType DATADataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class LightMixIn
    {
        public static void Clear(this ILightInternal item)
        {
            ((LightSetterCommon)((ILightGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Light_Mask<bool> GetEqualsMask(
            this ILightGetter item,
            ILightGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILightGetter item,
            string name = null,
            Light_Mask<bool> printMask = null)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILightGetter item,
            FileGeneration fg,
            string name = null,
            Light_Mask<bool> printMask = null)
        {
            ((LightCommon)((ILightGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILightGetter item,
            Light_Mask<bool?> checkMask)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Light_Mask<bool> GetHasBeenSetMask(this ILightGetter item)
        {
            var ret = new Light_Mask<bool>();
            ((LightCommon)((ILightGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ILightGetter item,
            ILightGetter rhs)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void CopyFieldsFrom(
            this Light lhs,
            Light rhs,
            Light_CopyMask copyMask,
            Light def = null)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void CopyFieldsFrom(
            this Light lhs,
            Light rhs,
            out Light_ErrorMask errorMask,
            Light_CopyMask copyMask = null,
            Light def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LightSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Light_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyFieldsFrom(
            this Light lhs,
            Light rhs,
            ErrorMaskBuilder errorMask,
            Light_CopyMask copyMask = null,
            Light def = null)
        {
            LightSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Light_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Model = 5,
        Script = 6,
        Name = 7,
        Icon = 8,
        Time = 9,
        Radius = 10,
        Color = 11,
        Flags = 12,
        FalloffExponent = 13,
        FOV = 14,
        Value = 15,
        Weight = 16,
        Fade = 17,
        Sound = 18,
        DATADataTypeState = 19,
    }
    #endregion

    #region Registration
    public class Light_Registration : ILoquiRegistration
    {
        public static readonly Light_Registration Instance = new Light_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 59,
            version: 0);

        public const string GUID = "c427a7d6-4fbf-45c8-80c7-f3c8f8646bc1";

        public const ushort AdditionalFieldCount = 15;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(Light_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Light_ErrorMask);

        public static readonly Type ClassType = typeof(Light);

        public static readonly Type GetterType = typeof(ILightGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILight);

        public static readonly Type InternalSetterType = typeof(ILightInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Light";

        public const string Name = "Light";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)Light_FieldIndex.Model;
                case "SCRIPT":
                    return (ushort)Light_FieldIndex.Script;
                case "NAME":
                    return (ushort)Light_FieldIndex.Name;
                case "ICON":
                    return (ushort)Light_FieldIndex.Icon;
                case "TIME":
                    return (ushort)Light_FieldIndex.Time;
                case "RADIUS":
                    return (ushort)Light_FieldIndex.Radius;
                case "COLOR":
                    return (ushort)Light_FieldIndex.Color;
                case "FLAGS":
                    return (ushort)Light_FieldIndex.Flags;
                case "FALLOFFEXPONENT":
                    return (ushort)Light_FieldIndex.FalloffExponent;
                case "FOV":
                    return (ushort)Light_FieldIndex.FOV;
                case "VALUE":
                    return (ushort)Light_FieldIndex.Value;
                case "WEIGHT":
                    return (ushort)Light_FieldIndex.Weight;
                case "FADE":
                    return (ushort)Light_FieldIndex.Fade;
                case "SOUND":
                    return (ushort)Light_FieldIndex.Sound;
                case "DATADATATYPESTATE":
                    return (ushort)Light_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Light_FieldIndex enu = (Light_FieldIndex)index;
            switch (enu)
            {
                case Light_FieldIndex.Model:
                case Light_FieldIndex.Script:
                case Light_FieldIndex.Name:
                case Light_FieldIndex.Icon:
                case Light_FieldIndex.Time:
                case Light_FieldIndex.Radius:
                case Light_FieldIndex.Color:
                case Light_FieldIndex.Flags:
                case Light_FieldIndex.FalloffExponent:
                case Light_FieldIndex.FOV:
                case Light_FieldIndex.Value:
                case Light_FieldIndex.Weight:
                case Light_FieldIndex.Fade:
                case Light_FieldIndex.Sound:
                case Light_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Light_FieldIndex enu = (Light_FieldIndex)index;
            switch (enu)
            {
                case Light_FieldIndex.Model:
                    return true;
                case Light_FieldIndex.Script:
                case Light_FieldIndex.Name:
                case Light_FieldIndex.Icon:
                case Light_FieldIndex.Time:
                case Light_FieldIndex.Radius:
                case Light_FieldIndex.Color:
                case Light_FieldIndex.Flags:
                case Light_FieldIndex.FalloffExponent:
                case Light_FieldIndex.FOV:
                case Light_FieldIndex.Value:
                case Light_FieldIndex.Weight:
                case Light_FieldIndex.Fade:
                case Light_FieldIndex.Sound:
                case Light_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Light_FieldIndex enu = (Light_FieldIndex)index;
            switch (enu)
            {
                case Light_FieldIndex.Model:
                case Light_FieldIndex.Script:
                case Light_FieldIndex.Name:
                case Light_FieldIndex.Icon:
                case Light_FieldIndex.Time:
                case Light_FieldIndex.Radius:
                case Light_FieldIndex.Color:
                case Light_FieldIndex.Flags:
                case Light_FieldIndex.FalloffExponent:
                case Light_FieldIndex.FOV:
                case Light_FieldIndex.Value:
                case Light_FieldIndex.Weight:
                case Light_FieldIndex.Fade:
                case Light_FieldIndex.Sound:
                case Light_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Light_FieldIndex enu = (Light_FieldIndex)index;
            switch (enu)
            {
                case Light_FieldIndex.Model:
                    return "Model";
                case Light_FieldIndex.Script:
                    return "Script";
                case Light_FieldIndex.Name:
                    return "Name";
                case Light_FieldIndex.Icon:
                    return "Icon";
                case Light_FieldIndex.Time:
                    return "Time";
                case Light_FieldIndex.Radius:
                    return "Radius";
                case Light_FieldIndex.Color:
                    return "Color";
                case Light_FieldIndex.Flags:
                    return "Flags";
                case Light_FieldIndex.FalloffExponent:
                    return "FalloffExponent";
                case Light_FieldIndex.FOV:
                    return "FOV";
                case Light_FieldIndex.Value:
                    return "Value";
                case Light_FieldIndex.Weight:
                    return "Weight";
                case Light_FieldIndex.Fade:
                    return "Fade";
                case Light_FieldIndex.Sound:
                    return "Sound";
                case Light_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return ItemAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Light_FieldIndex enu = (Light_FieldIndex)index;
            switch (enu)
            {
                case Light_FieldIndex.Model:
                case Light_FieldIndex.Script:
                case Light_FieldIndex.Name:
                case Light_FieldIndex.Icon:
                case Light_FieldIndex.Time:
                case Light_FieldIndex.Radius:
                case Light_FieldIndex.Color:
                case Light_FieldIndex.Flags:
                case Light_FieldIndex.FalloffExponent:
                case Light_FieldIndex.FOV:
                case Light_FieldIndex.Value:
                case Light_FieldIndex.Weight:
                case Light_FieldIndex.Fade:
                case Light_FieldIndex.Sound:
                case Light_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Light_FieldIndex enu = (Light_FieldIndex)index;
            switch (enu)
            {
                case Light_FieldIndex.Model:
                case Light_FieldIndex.Script:
                case Light_FieldIndex.Name:
                case Light_FieldIndex.Icon:
                case Light_FieldIndex.Time:
                case Light_FieldIndex.Radius:
                case Light_FieldIndex.Color:
                case Light_FieldIndex.Flags:
                case Light_FieldIndex.FalloffExponent:
                case Light_FieldIndex.FOV:
                case Light_FieldIndex.Value:
                case Light_FieldIndex.Weight:
                case Light_FieldIndex.Fade:
                case Light_FieldIndex.Sound:
                case Light_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Light_FieldIndex enu = (Light_FieldIndex)index;
            switch (enu)
            {
                case Light_FieldIndex.Model:
                    return typeof(Model);
                case Light_FieldIndex.Script:
                    return typeof(IFormIDSetLink<Script>);
                case Light_FieldIndex.Name:
                    return typeof(String);
                case Light_FieldIndex.Icon:
                    return typeof(String);
                case Light_FieldIndex.Time:
                    return typeof(Int32);
                case Light_FieldIndex.Radius:
                    return typeof(UInt32);
                case Light_FieldIndex.Color:
                    return typeof(Color);
                case Light_FieldIndex.Flags:
                    return typeof(Light.LightFlag);
                case Light_FieldIndex.FalloffExponent:
                    return typeof(Single);
                case Light_FieldIndex.FOV:
                    return typeof(Single);
                case Light_FieldIndex.Value:
                    return typeof(UInt32);
                case Light_FieldIndex.Weight:
                    return typeof(Single);
                case Light_FieldIndex.Fade:
                    return typeof(Single);
                case Light_FieldIndex.Sound:
                    return typeof(IFormIDSetLink<Sound>);
                case Light_FieldIndex.DATADataTypeState:
                    return typeof(Light.DATADataType);
                default:
                    return ItemAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(LightXmlWriteTranslation);
        public static readonly RecordType LIGH_HEADER = new RecordType("LIGH");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LIGH_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 6;
        public static readonly Type BinaryWriteTranslation = typeof(LightBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LightSetterCommon : ItemAbstractSetterCommon
    {
        public new static readonly LightSetterCommon Instance = new LightSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(ILightInternal item)
        {
            ClearPartial();
            item.Model_Unset();
            item.Script_Property.Unset();
            item.Name_Unset();
            item.Icon_Unset();
            item.Time = Light._Time_Default;
            item.Radius = default(UInt32);
            item.Color = default(Color);
            item.Flags = default(Light.LightFlag);
            item.FalloffExponent = Light._FalloffExponent_Default;
            item.FOV = Light._FOV_Default;
            item.Value = default(UInt32);
            item.Weight = default(Single);
            item.Fade_Unset();
            item.Sound_Property.Unset();
            item.DATADataTypeState = default(Light.DATADataType);
            base.Clear(item);
        }
        
        public override void Clear(IItemAbstractInternal item)
        {
            Clear(item: (ILightInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ILightInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILightInternal)item);
        }
        
    }
    public partial class LightCommon : ItemAbstractCommon
    {
        public new static readonly LightCommon Instance = new LightCommon();

        public Light_Mask<bool> GetEqualsMask(
            ILightGetter item,
            ILightGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Light_Mask<bool>();
            ((LightCommon)((ILightGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILightGetter item,
            ILightGetter rhs,
            Light_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Script = item.Script_Property.FormKey == rhs.Script_Property.FormKey;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && string.Equals(item.Icon, rhs.Icon);
            ret.Time = item.Time == rhs.Time;
            ret.Radius = item.Radius == rhs.Radius;
            ret.Color = item.Color.ColorOnlyEquals(rhs.Color);
            ret.Flags = item.Flags == rhs.Flags;
            ret.FalloffExponent = item.FalloffExponent.EqualsWithin(rhs.FalloffExponent);
            ret.FOV = item.FOV.EqualsWithin(rhs.FOV);
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.Fade = item.Fade_IsSet == rhs.Fade_IsSet && item.Fade.EqualsWithin(rhs.Fade);
            ret.Sound = item.Sound_Property.FormKey == rhs.Sound_Property.FormKey;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ILightGetter item,
            string name = null,
            Light_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILightGetter item,
            FileGeneration fg,
            string name = null,
            Light_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Light =>");
            }
            else
            {
                fg.AppendLine($"{name} (Light) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILightGetter item,
            FileGeneration fg,
            Light_Mask<bool> printMask = null)
        {
            ItemAbstractCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendLine($"Script => {item.Script_Property}");
            }
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Icon ?? true)
            {
                fg.AppendLine($"Icon => {item.Icon}");
            }
            if (printMask?.Time ?? true)
            {
                fg.AppendLine($"Time => {item.Time}");
            }
            if (printMask?.Radius ?? true)
            {
                fg.AppendLine($"Radius => {item.Radius}");
            }
            if (printMask?.Color ?? true)
            {
                fg.AppendLine($"Color => {item.Color}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.FalloffExponent ?? true)
            {
                fg.AppendLine($"FalloffExponent => {item.FalloffExponent}");
            }
            if (printMask?.FOV ?? true)
            {
                fg.AppendLine($"FOV => {item.FOV}");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendLine($"Value => {item.Value}");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendLine($"Weight => {item.Weight}");
            }
            if (printMask?.Fade ?? true)
            {
                fg.AppendLine($"Fade => {item.Fade}");
            }
            if (printMask?.Sound ?? true)
            {
                fg.AppendLine($"Sound => {item.Sound_Property}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendLine($"DATADataTypeState => {item.DATADataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            ILightGetter item,
            Light_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            if (checkMask.Fade.HasValue && checkMask.Fade.Value != item.Fade_IsSet) return false;
            if (checkMask.Sound.HasValue && checkMask.Sound.Value != item.Sound_Property.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ILightGetter item,
            Light_Mask<bool> mask)
        {
            mask.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, item.Model.GetHasBeenSetMask());
            mask.Script = item.Script_Property.HasBeenSet;
            mask.Name = item.Name_IsSet;
            mask.Icon = item.Icon_IsSet;
            mask.Time = true;
            mask.Radius = true;
            mask.Color = true;
            mask.Flags = true;
            mask.FalloffExponent = true;
            mask.FOV = true;
            mask.Value = true;
            mask.Weight = true;
            mask.Fade = item.Fade_IsSet;
            mask.Sound = item.Sound_Property.HasBeenSet;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Light_FieldIndex ConvertFieldIndex(ItemAbstract_FieldIndex index)
        {
            switch (index)
            {
                case ItemAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (Light_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.FormKey:
                    return (Light_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.Version:
                    return (Light_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.EditorID:
                    return (Light_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (Light_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static Light_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Light_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Light_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Light_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Light_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Light_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static Light_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Light_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Light_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Light_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Light_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILightGetter lhs,
            ILightGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Model_IsSet != rhs.Model_IsSet) return false;
            if (lhs.Model_IsSet)
            {
                if (!object.Equals(lhs.Model, rhs.Model)) return false;
            }
            if (lhs.Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (lhs.Script_Property.HasBeenSet)
            {
                if (!lhs.Script_Property.Equals(rhs.Script_Property)) return false;
            }
            if (lhs.Name_IsSet != rhs.Name_IsSet) return false;
            if (lhs.Name_IsSet)
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if (lhs.Icon_IsSet != rhs.Icon_IsSet) return false;
            if (lhs.Icon_IsSet)
            {
                if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            }
            if (lhs.Time != rhs.Time) return false;
            if (lhs.Radius != rhs.Radius) return false;
            if (!lhs.Color.ColorOnlyEquals(rhs.Color)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.FalloffExponent.EqualsWithin(rhs.FalloffExponent)) return false;
            if (!lhs.FOV.EqualsWithin(rhs.FOV)) return false;
            if (lhs.Value != rhs.Value) return false;
            if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            if (lhs.Fade_IsSet != rhs.Fade_IsSet) return false;
            if (lhs.Fade_IsSet)
            {
                if (!lhs.Fade.EqualsWithin(rhs.Fade)) return false;
            }
            if (lhs.Sound_Property.HasBeenSet != rhs.Sound_Property.HasBeenSet) return false;
            if (lhs.Sound_Property.HasBeenSet)
            {
                if (!lhs.Sound_Property.Equals(rhs.Sound_Property)) return false;
            }
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IItemAbstractGetter lhs,
            IItemAbstractGetter rhs)
        {
            return Equals(
                lhs: (ILightGetter)lhs,
                rhs: rhs as ILightGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter lhs,
            IOblivionMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (ILightGetter)lhs,
                rhs: rhs as ILightGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (ILightGetter)lhs,
                rhs: rhs as ILightGetter);
        }
        
        public virtual int GetHashCode(ILightGetter item)
        {
            int ret = 0;
            if (item.Model_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Model).CombineHashCode(ret);
            }
            if (item.Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Script).CombineHashCode(ret);
            }
            if (item.Name_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            }
            if (item.Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Icon).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Time).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Radius).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Color).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FalloffExponent).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FOV).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Value).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Weight).CombineHashCode(ret);
            if (item.Fade_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Fade).CombineHashCode(ret);
            }
            if (item.Sound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Sound).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IItemAbstractGetter item)
        {
            return GetHashCode(item: (ILightGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ILightGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILightGetter)item);
        }
        
        #endregion
        
        
        #region Mutagen
        partial void PostDuplicate(Light obj, Light rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Light(getNextFormKey());
            ret.CopyFieldsFrom((Light)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Light)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class LightSetterCopyCommon : ItemAbstractSetterCopyCommon
    {
        public new static readonly LightSetterCopyCommon Instance = new LightSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Light item,
            Light rhs,
            Light def,
            ErrorMaskBuilder errorMask,
            Light_CopyMask copyMask)
        {
            ItemAbstractSetterCopyCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                ModelSetterCopyCommon.CopyFieldsFrom(
                                    item: item.Model,
                                    rhs: rhs.Model,
                                    def: def?.Model,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Model.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Model = rhsModelItem.Copy(
                                    copyMask?.Model?.Specific,
                                    def: defModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Model_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Script ?? true)
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Script);
                try
                {
                    item.Script_Property.SetLink(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Icon);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Icon,
                        rhsHasBeenSet: rhs.Icon_IsSet,
                        defItem: def?.Icon ?? default(String),
                        defHasBeenSet: def?.Icon_IsSet ?? false,
                        outRhsItem: out var rhsIconItem,
                        outDefItem: out var defIconItem))
                    {
                        item.Icon = rhsIconItem;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Time ?? true)
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Time);
                item.Time = rhs.Time;
                errorMask?.PopIndex();
            }
            if (copyMask?.Radius ?? true)
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Radius);
                item.Radius = rhs.Radius;
                errorMask?.PopIndex();
            }
            if (copyMask?.Color ?? true)
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Color);
                item.Color = rhs.Color;
                errorMask?.PopIndex();
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Flags);
                item.Flags = rhs.Flags;
                errorMask?.PopIndex();
            }
            if (copyMask?.FalloffExponent ?? true)
            {
                errorMask?.PushIndex((int)Light_FieldIndex.FalloffExponent);
                item.FalloffExponent = rhs.FalloffExponent;
                errorMask?.PopIndex();
            }
            if (copyMask?.FOV ?? true)
            {
                errorMask?.PushIndex((int)Light_FieldIndex.FOV);
                item.FOV = rhs.FOV;
                errorMask?.PopIndex();
            }
            if (copyMask?.Value ?? true)
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Value);
                item.Value = rhs.Value;
                errorMask?.PopIndex();
            }
            if (copyMask?.Weight ?? true)
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Weight);
                item.Weight = rhs.Weight;
                errorMask?.PopIndex();
            }
            if (copyMask?.Fade ?? true)
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Fade);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Fade,
                        rhsHasBeenSet: rhs.Fade_IsSet,
                        defItem: def?.Fade ?? default(Single),
                        defHasBeenSet: def?.Fade_IsSet ?? false,
                        outRhsItem: out var rhsFadeItem,
                        outDefItem: out var defFadeItem))
                    {
                        item.Fade = rhsFadeItem;
                    }
                    else
                    {
                        item.Fade_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Sound ?? true)
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Sound);
                try
                {
                    item.Sound_Property.SetLink(
                        rhs: rhs.Sound_Property,
                        def: def?.Sound_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DATADataTypeState ?? true)
            {
                errorMask?.PushIndex((int)Light_FieldIndex.DATADataTypeState);
                item.DATADataTypeState = rhs.DATADataTypeState;
                errorMask?.PopIndex();
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Light
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Light_Registration.Instance;
        public new static Light_Registration Registration => Light_Registration.Instance;
        protected override object CommonInstance()
        {
            return LightCommon.Instance;
        }
        protected override object CommonSetterInstance()
        {
            return LightSetterCommon.Instance;
        }
        protected override object CommonSetterCopyInstance()
        {
            return LightSetterCopyCommon.Instance;
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LightXmlWriteTranslation :
        ItemAbstractXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static LightXmlWriteTranslation Instance = new LightXmlWriteTranslation();

        public static void WriteToNodeXml(
            ILightGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            ItemAbstractXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)Light_FieldIndex.Model) ?? true))
            {
                var loquiItem = item.Model;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)Light_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Light_FieldIndex.Model));
            }
            if (item.Script_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Light_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script_Property?.FormKey,
                    fieldIndex: (int)Light_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Light_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Light_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)Light_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Light_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(Light.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Light_FieldIndex.Time) ?? true))
                {
                    Int32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Time),
                        item: item.Time,
                        fieldIndex: (int)Light_FieldIndex.Time,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Light_FieldIndex.Radius) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Radius),
                        item: item.Radius,
                        fieldIndex: (int)Light_FieldIndex.Radius,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Light_FieldIndex.Color) ?? true))
                {
                    ColorXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Color),
                        item: item.Color,
                        fieldIndex: (int)Light_FieldIndex.Color,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Light_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<Light.LightFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Light_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Light_FieldIndex.FalloffExponent) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FalloffExponent),
                        item: item.FalloffExponent,
                        fieldIndex: (int)Light_FieldIndex.FalloffExponent,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Light_FieldIndex.FOV) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FOV),
                        item: item.FOV,
                        fieldIndex: (int)Light_FieldIndex.FOV,
                        errorMask: errorMask);
                }
                if (!item.DATADataTypeState.HasFlag(Light.DATADataType.Break0))
                {
                    if ((translationMask?.GetShouldTranslate((int)Light_FieldIndex.Value) ?? true))
                    {
                        UInt32XmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.Value),
                            item: item.Value,
                            fieldIndex: (int)Light_FieldIndex.Value,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)Light_FieldIndex.Weight) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.Weight),
                            item: item.Weight,
                            fieldIndex: (int)Light_FieldIndex.Weight,
                            errorMask: errorMask);
                    }
                }
                else
                {
                    node.Add(new XElement("HasDATADataType"));
                }
            }
            if (item.Fade_IsSet
                && (translationMask?.GetShouldTranslate((int)Light_FieldIndex.Fade) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Fade),
                    item: item.Fade,
                    fieldIndex: (int)Light_FieldIndex.Fade,
                    errorMask: errorMask);
            }
            if (item.Sound_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Light_FieldIndex.Sound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sound),
                    item: item.Sound_Property?.FormKey,
                    fieldIndex: (int)Light_FieldIndex.Sound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Light_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Light.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Light_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ILightGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Light");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Light");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILightGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IItemAbstractGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILightGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILightGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILightGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class LightXmlCreateTranslation : ItemAbstractXmlCreateTranslation
    {
        public new readonly static LightXmlCreateTranslation Instance = new LightXmlCreateTranslation();

        public static void FillPublicXml(
            ILightInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LightXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILightInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Light_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Light_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Script_Property,
                        fieldIndex: (int)Light_FieldIndex.Script,
                        errorMask: errorMask);
                    break;
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Light_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Light_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Time":
                    try
                    {
                        errorMask?.PushIndex((int)Light_FieldIndex.Time);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 TimeParse,
                            errorMask: errorMask))
                        {
                            item.Time = TimeParse;
                        }
                        else
                        {
                            item.Time = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Light.DATADataType.Has;
                    break;
                case "Radius":
                    try
                    {
                        errorMask?.PushIndex((int)Light_FieldIndex.Radius);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 RadiusParse,
                            errorMask: errorMask))
                        {
                            item.Radius = RadiusParse;
                        }
                        else
                        {
                            item.Radius = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Color":
                    try
                    {
                        errorMask?.PushIndex((int)Light_FieldIndex.Color);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color ColorParse,
                            errorMask: errorMask))
                        {
                            item.Color = ColorParse;
                        }
                        else
                        {
                            item.Color = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Light_FieldIndex.Flags);
                        if (EnumXmlTranslation<Light.LightFlag>.Instance.Parse(
                            node: node,
                            item: out Light.LightFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Light.LightFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FalloffExponent":
                    try
                    {
                        errorMask?.PushIndex((int)Light_FieldIndex.FalloffExponent);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FalloffExponentParse,
                            errorMask: errorMask))
                        {
                            item.FalloffExponent = FalloffExponentParse;
                        }
                        else
                        {
                            item.FalloffExponent = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FOV":
                    try
                    {
                        errorMask?.PushIndex((int)Light_FieldIndex.FOV);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FOVParse,
                            errorMask: errorMask))
                        {
                            item.FOV = FOVParse;
                        }
                        else
                        {
                            item.FOV = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Value":
                    try
                    {
                        errorMask?.PushIndex((int)Light_FieldIndex.Value);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 ValueParse,
                            errorMask: errorMask))
                        {
                            item.Value = ValueParse;
                        }
                        else
                        {
                            item.Value = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~Light.DATADataType.Break0;
                    break;
                case "Weight":
                    try
                    {
                        errorMask?.PushIndex((int)Light_FieldIndex.Weight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single WeightParse,
                            errorMask: errorMask))
                        {
                            item.Weight = WeightParse;
                        }
                        else
                        {
                            item.Weight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fade":
                    try
                    {
                        errorMask?.PushIndex((int)Light_FieldIndex.Fade);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FadeParse,
                            errorMask: errorMask))
                        {
                            item.Fade = FadeParse;
                        }
                        else
                        {
                            item.Fade = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sound":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Sound_Property,
                        fieldIndex: (int)Light_FieldIndex.Sound,
                        errorMask: errorMask);
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Light_FieldIndex.DATADataTypeState);
                        if (EnumXmlTranslation<Light.DATADataType>.Instance.Parse(
                            node: node,
                            item: out Light.DATADataType DATADataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.DATADataTypeState = DATADataTypeStateParse;
                        }
                        else
                        {
                            item.DATADataTypeState = default(Light.DATADataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ItemAbstractXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class LightXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ILightGetter item,
            XElement node,
            out Light_ErrorMask errorMask,
            bool doMasks = true,
            Light_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LightXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Light_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ILightGetter item,
            string path,
            out Light_ErrorMask errorMask,
            Light_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILightGetter item,
            Stream stream,
            out Light_ErrorMask errorMask,
            Light_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class Light_Mask<T> : ItemAbstract_Mask<T>, IMask<T>, IEquatable<Light_Mask<T>>
    {
        #region Ctors
        public Light_Mask()
        {
        }

        public Light_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Script = initialValue;
            this.Name = initialValue;
            this.Icon = initialValue;
            this.Time = initialValue;
            this.Radius = initialValue;
            this.Color = initialValue;
            this.Flags = initialValue;
            this.FalloffExponent = initialValue;
            this.FOV = initialValue;
            this.Value = initialValue;
            this.Weight = initialValue;
            this.Fade = initialValue;
            this.Sound = initialValue;
            this.DATADataTypeState = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Script;
        public T Name;
        public T Icon;
        public T Time;
        public T Radius;
        public T Color;
        public T Flags;
        public T FalloffExponent;
        public T FOV;
        public T Value;
        public T Weight;
        public T Fade;
        public T Sound;
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Light_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Light_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Time, rhs.Time)) return false;
            if (!object.Equals(this.Radius, rhs.Radius)) return false;
            if (!object.Equals(this.Color, rhs.Color)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.FalloffExponent, rhs.FalloffExponent)) return false;
            if (!object.Equals(this.FOV, rhs.FOV)) return false;
            if (!object.Equals(this.Value, rhs.Value)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            if (!object.Equals(this.Fade, rhs.Fade)) return false;
            if (!object.Equals(this.Sound, rhs.Sound)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Time?.GetHashCode());
            ret = ret.CombineHashCode(this.Radius?.GetHashCode());
            ret = ret.CombineHashCode(this.Color?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.FalloffExponent?.GetHashCode());
            ret = ret.CombineHashCode(this.FOV?.GetHashCode());
            ret = ret.CombineHashCode(this.Value?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(this.Fade?.GetHashCode());
            ret = ret.CombineHashCode(this.Sound?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Script)) return false;
            if (!eval(this.Name)) return false;
            if (!eval(this.Icon)) return false;
            if (!eval(this.Time)) return false;
            if (!eval(this.Radius)) return false;
            if (!eval(this.Color)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.FalloffExponent)) return false;
            if (!eval(this.FOV)) return false;
            if (!eval(this.Value)) return false;
            if (!eval(this.Weight)) return false;
            if (!eval(this.Fade)) return false;
            if (!eval(this.Sound)) return false;
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Light_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Light_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Light_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Script = eval(this.Script);
            obj.Name = eval(this.Name);
            obj.Icon = eval(this.Icon);
            obj.Time = eval(this.Time);
            obj.Radius = eval(this.Radius);
            obj.Color = eval(this.Color);
            obj.Flags = eval(this.Flags);
            obj.FalloffExponent = eval(this.FalloffExponent);
            obj.FOV = eval(this.FOV);
            obj.Value = eval(this.Value);
            obj.Weight = eval(this.Weight);
            obj.Fade = eval(this.Fade);
            obj.Sound = eval(this.Sound);
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Light_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Light_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Light_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Time ?? true)
                {
                    fg.AppendLine($"Time => {Time}");
                }
                if (printMask?.Radius ?? true)
                {
                    fg.AppendLine($"Radius => {Radius}");
                }
                if (printMask?.Color ?? true)
                {
                    fg.AppendLine($"Color => {Color}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.FalloffExponent ?? true)
                {
                    fg.AppendLine($"FalloffExponent => {FalloffExponent}");
                }
                if (printMask?.FOV ?? true)
                {
                    fg.AppendLine($"FOV => {FOV}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {Value}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
                if (printMask?.Fade ?? true)
                {
                    fg.AppendLine($"Fade => {Fade}");
                }
                if (printMask?.Sound ?? true)
                {
                    fg.AppendLine($"Sound => {Sound}");
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Light_ErrorMask : ItemAbstract_ErrorMask, IErrorMask<Light_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Script;
        public Exception Name;
        public Exception Icon;
        public Exception Time;
        public Exception Radius;
        public Exception Color;
        public Exception Flags;
        public Exception FalloffExponent;
        public Exception FOV;
        public Exception Value;
        public Exception Weight;
        public Exception Fade;
        public Exception Sound;
        public Exception DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Light_FieldIndex enu = (Light_FieldIndex)index;
            switch (enu)
            {
                case Light_FieldIndex.Model:
                    return Model;
                case Light_FieldIndex.Script:
                    return Script;
                case Light_FieldIndex.Name:
                    return Name;
                case Light_FieldIndex.Icon:
                    return Icon;
                case Light_FieldIndex.Time:
                    return Time;
                case Light_FieldIndex.Radius:
                    return Radius;
                case Light_FieldIndex.Color:
                    return Color;
                case Light_FieldIndex.Flags:
                    return Flags;
                case Light_FieldIndex.FalloffExponent:
                    return FalloffExponent;
                case Light_FieldIndex.FOV:
                    return FOV;
                case Light_FieldIndex.Value:
                    return Value;
                case Light_FieldIndex.Weight:
                    return Weight;
                case Light_FieldIndex.Fade:
                    return Fade;
                case Light_FieldIndex.Sound:
                    return Sound;
                case Light_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Light_FieldIndex enu = (Light_FieldIndex)index;
            switch (enu)
            {
                case Light_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Light_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Light_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Light_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Light_FieldIndex.Time:
                    this.Time = ex;
                    break;
                case Light_FieldIndex.Radius:
                    this.Radius = ex;
                    break;
                case Light_FieldIndex.Color:
                    this.Color = ex;
                    break;
                case Light_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Light_FieldIndex.FalloffExponent:
                    this.FalloffExponent = ex;
                    break;
                case Light_FieldIndex.FOV:
                    this.FOV = ex;
                    break;
                case Light_FieldIndex.Value:
                    this.Value = ex;
                    break;
                case Light_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                case Light_FieldIndex.Fade:
                    this.Fade = ex;
                    break;
                case Light_FieldIndex.Sound:
                    this.Sound = ex;
                    break;
                case Light_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Light_FieldIndex enu = (Light_FieldIndex)index;
            switch (enu)
            {
                case Light_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Light_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Light_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Light_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Light_FieldIndex.Time:
                    this.Time = (Exception)obj;
                    break;
                case Light_FieldIndex.Radius:
                    this.Radius = (Exception)obj;
                    break;
                case Light_FieldIndex.Color:
                    this.Color = (Exception)obj;
                    break;
                case Light_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Light_FieldIndex.FalloffExponent:
                    this.FalloffExponent = (Exception)obj;
                    break;
                case Light_FieldIndex.FOV:
                    this.FOV = (Exception)obj;
                    break;
                case Light_FieldIndex.Value:
                    this.Value = (Exception)obj;
                    break;
                case Light_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                case Light_FieldIndex.Fade:
                    this.Fade = (Exception)obj;
                    break;
                case Light_FieldIndex.Sound:
                    this.Sound = (Exception)obj;
                    break;
                case Light_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (Script != null) return true;
            if (Name != null) return true;
            if (Icon != null) return true;
            if (Time != null) return true;
            if (Radius != null) return true;
            if (Color != null) return true;
            if (Flags != null) return true;
            if (FalloffExponent != null) return true;
            if (FOV != null) return true;
            if (Value != null) return true;
            if (Weight != null) return true;
            if (Fade != null) return true;
            if (Sound != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Light_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            Model?.ToString(fg);
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Time => {Time}");
            fg.AppendLine($"Radius => {Radius}");
            fg.AppendLine($"Color => {Color}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"FalloffExponent => {FalloffExponent}");
            fg.AppendLine($"FOV => {FOV}");
            fg.AppendLine($"Value => {Value}");
            fg.AppendLine($"Weight => {Weight}");
            fg.AppendLine($"Fade => {Fade}");
            fg.AppendLine($"Sound => {Sound}");
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public Light_ErrorMask Combine(Light_ErrorMask rhs)
        {
            var ret = new Light_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Time = this.Time.Combine(rhs.Time);
            ret.Radius = this.Radius.Combine(rhs.Radius);
            ret.Color = this.Color.Combine(rhs.Color);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.FalloffExponent = this.FalloffExponent.Combine(rhs.FalloffExponent);
            ret.FOV = this.FOV.Combine(rhs.FOV);
            ret.Value = this.Value.Combine(rhs.Value);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            ret.Fade = this.Fade.Combine(rhs.Fade);
            ret.Sound = this.Sound.Combine(rhs.Sound);
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static Light_ErrorMask Combine(Light_ErrorMask lhs, Light_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Light_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Light_ErrorMask();
        }
        #endregion

    }
    public class Light_CopyMask : ItemAbstract_CopyMask
    {
        public Light_CopyMask()
        {
        }

        public Light_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Model = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.Script = defaultOn;
            this.Name = defaultOn;
            this.Icon = defaultOn;
            this.Time = defaultOn;
            this.Radius = defaultOn;
            this.Color = defaultOn;
            this.Flags = defaultOn;
            this.FalloffExponent = defaultOn;
            this.FOV = defaultOn;
            this.Value = defaultOn;
            this.Weight = defaultOn;
            this.Fade = defaultOn;
            this.Sound = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Script;
        public bool Name;
        public bool Icon;
        public bool Time;
        public bool Radius;
        public bool Color;
        public bool Flags;
        public bool FalloffExponent;
        public bool FOV;
        public bool Value;
        public bool Weight;
        public bool Fade;
        public bool Sound;
        public bool DATADataTypeState;
        #endregion

    }

    public class Light_TranslationMask : ItemAbstract_TranslationMask
    {
        #region Members
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Script;
        public bool Name;
        public bool Icon;
        public bool Time;
        public bool Radius;
        public bool Color;
        public bool Flags;
        public bool FalloffExponent;
        public bool FOV;
        public bool Value;
        public bool Weight;
        public bool Fade;
        public bool Sound;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public Light_TranslationMask()
            : base()
        {
        }

        public Light_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.Script = defaultOn;
            this.Name = defaultOn;
            this.Icon = defaultOn;
            this.Time = defaultOn;
            this.Radius = defaultOn;
            this.Color = defaultOn;
            this.Flags = defaultOn;
            this.FalloffExponent = defaultOn;
            this.FOV = defaultOn;
            this.Value = defaultOn;
            this.Weight = defaultOn;
            this.Fade = defaultOn;
            this.Sound = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Script, null));
            ret.Add((Name, null));
            ret.Add((Icon, null));
            ret.Add((Time, null));
            ret.Add((Radius, null));
            ret.Add((Color, null));
            ret.Add((Flags, null));
            ret.Add((FalloffExponent, null));
            ret.Add((FOV, null));
            ret.Add((Value, null));
            ret.Add((Weight, null));
            ret.Add((Fade, null));
            ret.Add((Sound, null));
            ret.Add((DATADataTypeState, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LightBinaryWriteTranslation :
        ItemAbstractBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LightBinaryWriteTranslation Instance = new LightBinaryWriteTranslation();

        public static void Write_Embedded(
            ILightGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            ILightGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Model_IsSet)
            {
                var loquiItem = item.Model;
                ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Script_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Script_Property,
                    header: recordTypeConverter.ConvertToCustom(Light_Registration.SCRI_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(Light_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    header: recordTypeConverter.ConvertToCustom(Light_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.DATADataTypeState.HasFlag(Light.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Light_Registration.DATA_HEADER)))
                {
                    writer.Write(item.Time);
                    writer.Write(item.Radius);
                    Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Color,
                        extraByte: true);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Light.LightFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FalloffExponent);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FOV);
                    if (!item.DATADataTypeState.HasFlag(Light.DATADataType.Break0))
                    {
                        writer.Write(item.Value);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.Weight);
                    }
                }
            }
            if (item.Fade_IsSet)
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Fade,
                    header: recordTypeConverter.ConvertToCustom(Light_Registration.FNAM_HEADER),
                    nullable: false);
            }
            if (item.Sound_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Sound_Property,
                    header: recordTypeConverter.ConvertToCustom(Light_Registration.SNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            ILightGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Light_Registration.LIGH_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ILightGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IItemAbstractGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ILightGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ILightGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ILightGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class LightBinaryCreateTranslation : ItemAbstractBinaryCreateTranslation
    {
        public new readonly static LightBinaryCreateTranslation Instance = new LightBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LightBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILightGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Light_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LightBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Light_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LightBinaryWrapper :
        ItemAbstractBinaryWrapper,
        ILightGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Light_Registration.Instance;
        public new static Light_Registration Registration => Light_Registration.Instance;
        protected override object CommonInstance()
        {
            return LightCommon.Instance;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILightGetter)rhs, include);

        protected override object XmlWriteTranslator => LightXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((LightXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => LightBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((LightBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Model
        public IModelGetter Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormIDSetLinkGetter<IScriptGetter> Script_Property => _ScriptLocation.HasValue ? new FormIDSetLink<IScriptGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormIDSetLink<IScriptGetter>.Empty;
        public IScriptGetter Script => default;
        #endregion
        #region Name
        private int? _NameLocation;
        public bool Name_IsSet => _NameLocation.HasValue;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default;
        #endregion
        #region Icon
        private int? _IconLocation;
        public bool Icon_IsSet => _IconLocation.HasValue;
        public String Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _IconLocation.Value, _package.Meta)) : default;
        #endregion
        private int? _DATALocation;
        public Light.DATADataType DATADataTypeState { get; private set; }
        #region Time
        private int _TimeLocation => _DATALocation.Value + 0x0;
        private bool _Time_IsSet => _DATALocation.HasValue;
        public Int32 Time => _Time_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TimeLocation, 4)) : default;
        #endregion
        #region Radius
        private int _RadiusLocation => _DATALocation.Value + 0x4;
        private bool _Radius_IsSet => _DATALocation.HasValue;
        public UInt32 Radius => _Radius_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_RadiusLocation, 4)) : default;
        #endregion
        #region Color
        private int _ColorLocation => _DATALocation.Value + 0x8;
        private bool _Color_IsSet => _DATALocation.HasValue;
        public Color Color => _Color_IsSet ? _data.Span.Slice(_ColorLocation, 4).ReadColor() : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation.Value + 0xC;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Light.LightFlag Flags => _Flags_IsSet ? (Light.LightFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 4)) : default;
        #endregion
        #region FalloffExponent
        private int _FalloffExponentLocation => _DATALocation.Value + 0x10;
        private bool _FalloffExponent_IsSet => _DATALocation.HasValue;
        public Single FalloffExponent => _FalloffExponent_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FalloffExponentLocation, 4)) : default;
        #endregion
        #region FOV
        private int _FOVLocation => _DATALocation.Value + 0x14;
        private bool _FOV_IsSet => _DATALocation.HasValue;
        public Single FOV => _FOV_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FOVLocation, 4)) : default;
        #endregion
        #region Value
        private int _ValueLocation => _DATALocation.Value + 0x18;
        private bool _Value_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Light.DATADataType.Break0);
        public UInt32 Value => _Value_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ValueLocation, 4)) : default;
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation.Value + 0x1C;
        private bool _Weight_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Light.DATADataType.Break0);
        public Single Weight => _Weight_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_WeightLocation, 4)) : default;
        #endregion
        #region Fade
        private int? _FadeLocation;
        public bool Fade_IsSet => _FadeLocation.HasValue;
        public Single Fade => _FadeLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordSpan(_data, _FadeLocation.Value, _package.Meta)) : default;
        #endregion
        #region Sound
        private int? _SoundLocation;
        public bool Sound_IsSet => _SoundLocation.HasValue;
        public IFormIDSetLinkGetter<ISoundGetter> Sound_Property => _SoundLocation.HasValue ? new FormIDSetLink<ISoundGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _SoundLocation.Value, _package.Meta)))) : FormIDSetLink<ISoundGetter>.Empty;
        public ISoundGetter Sound => default;
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected LightBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static LightBinaryWrapper LightFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new LightBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryWrapper.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Light_FieldIndex.Model);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Light_FieldIndex.Script);
                }
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Light_FieldIndex.Name);
                }
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Light_FieldIndex.Icon);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = Light.DATADataType.Has;
                    var subLen = _package.Meta.SubRecord(_data.Slice((stream.Position - offset))).RecordLength;
                    if (subLen <= 0x18)
                    {
                        this.DATADataTypeState |= Light.DATADataType.Break0;
                    }
                    return TryGet<int?>.Succeed((int)Light_FieldIndex.Weight);
                }
                case 0x4D414E46: // FNAM
                {
                    _FadeLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Light_FieldIndex.Fade);
                }
                case 0x4D414E53: // SNAM
                {
                    _SoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Light_FieldIndex.Sound);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

