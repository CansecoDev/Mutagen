/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LoadScreen :
        OblivionMajorRecord,
        ILoadScreenInternal,
        ILoquiObjectSetter<LoadScreen>,
        IEquatable<LoadScreen>,
        IEqualsMask
    {
        #region Ctor
        protected LoadScreen()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)LoadScreen_FieldIndex.Icon];
            set => _hasBeenSetTracker[(int)LoadScreen_FieldIndex.Icon] = value;
        }
        bool ILoadScreenGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String ILoadScreenGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            _Icon = value;
            _hasBeenSetTracker[(int)LoadScreen_FieldIndex.Icon] = markSet;
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region Description
        public bool Description_IsSet
        {
            get => _hasBeenSetTracker[(int)LoadScreen_FieldIndex.Description];
            set => _hasBeenSetTracker[(int)LoadScreen_FieldIndex.Description] = value;
        }
        bool ILoadScreenGetter.Description_IsSet => Description_IsSet;
        private String _Description;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Description
        {
            get => this._Description;
            set => Description_Set(value);
        }
        String ILoadScreenGetter.Description => this.Description;
        public void Description_Set(
            String value,
            bool markSet = true)
        {
            _Description = value;
            _hasBeenSetTracker[(int)LoadScreen_FieldIndex.Description] = markSet;
        }
        public void Description_Unset()
        {
            this.Description_Set(default(String), false);
        }
        #endregion
        #region Locations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<LoadScreenLocation> _Locations = new SetList<LoadScreenLocation>();
        public ISetList<LoadScreenLocation> Locations => _Locations;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<LoadScreenLocation> ILoadScreen.Locations => _Locations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<ILoadScreenLocationGetter> ILoadScreenGetter.Locations => _Locations;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            LoadScreenMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ILoadScreenGetter rhs)) return false;
            return ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(LoadScreen obj)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => LoadScreenXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((LoadScreenXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static LoadScreen CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            LoadScreen_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LoadScreen CreateFromXml(
            XElement node,
            out LoadScreen_ErrorMask errorMask,
            bool doMasks = true,
            LoadScreen_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static LoadScreen CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new LoadScreen() : null;
                    break;
                default:
                    break;
            }
            var ret = new LoadScreen();
            ((LoadScreenSetterCommon)((ILoadScreenGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static LoadScreen CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            LoadScreen_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static LoadScreen CreateFromXml(
            string path,
            out LoadScreen_ErrorMask errorMask,
            LoadScreen_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LoadScreen CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            LoadScreen_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LoadScreen CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            LoadScreen_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static LoadScreen CreateFromXml(
            Stream stream,
            out LoadScreen_ErrorMask errorMask,
            LoadScreen_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LoadScreen CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            LoadScreen_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((LoadScreen_FieldIndex)index)
            {
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                    return _hasBeenSetTracker[index];
                case LoadScreen_FieldIndex.Locations:
                    return Locations.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LoadScreen_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILinkGetter> Links => LoadScreenCommon.Instance.GetLinks(this);
        public LoadScreen(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public LoadScreen(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => LoadScreenBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((LoadScreenBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static LoadScreen CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static LoadScreen CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out LoadScreen_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static LoadScreen CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new LoadScreen();
            ((LoadScreenSetterCommon)((ILoadScreenGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILoadScreenGetter)rhs, include);

        void IClearable.Clear()
        {
            ((LoadScreenSetterCommon)((ILoadScreenGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static LoadScreen GetNew()
        {
            return new LoadScreen();
        }

    }
    #endregion

    #region Interface
    public partial interface ILoadScreen :
        ILoadScreenGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<ILoadScreenInternal>
    {
        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String value, bool hasBeenSet = true);
        void Icon_Unset();

        new String Description { get; set; }
        new bool Description_IsSet { get; set; }
        void Description_Set(String value, bool hasBeenSet = true);
        void Description_Unset();

        new ISetList<LoadScreenLocation> Locations { get; }
    }

    public partial interface ILoadScreenInternal :
        IOblivionMajorRecordInternal,
        ILoadScreen,
        ILoadScreenGetter
    {
    }

    public partial interface ILoadScreenGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<ILoadScreenGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region Description
        String Description { get; }
        bool Description_IsSet { get; }

        #endregion
        #region Locations
        IReadOnlySetList<ILoadScreenLocationGetter> Locations { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class LoadScreenMixIn
    {
        public static void Clear(this ILoadScreenInternal item)
        {
            ((LoadScreenSetterCommon)((ILoadScreenGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static LoadScreen_Mask<bool> GetEqualsMask(
            this ILoadScreenGetter item,
            ILoadScreenGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILoadScreenGetter item,
            string name = null,
            LoadScreen_Mask<bool> printMask = null)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILoadScreenGetter item,
            FileGeneration fg,
            string name = null,
            LoadScreen_Mask<bool> printMask = null)
        {
            ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILoadScreenGetter item,
            LoadScreen_Mask<bool?> checkMask)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static LoadScreen_Mask<bool> GetHasBeenSetMask(this ILoadScreenGetter item)
        {
            var ret = new LoadScreen_Mask<bool>();
            ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ILoadScreenGetter item,
            ILoadScreenGetter rhs)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this ILoadScreenInternal lhs,
            ILoadScreenGetter rhs,
            LoadScreen_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this ILoadScreenInternal lhs,
            ILoadScreenGetter rhs,
            out LoadScreen_ErrorMask errorMask,
            LoadScreen_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this ILoadScreenInternal lhs,
            ILoadScreenGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static LoadScreen DeepCopy(
            this ILoadScreenGetter item,
            LoadScreen_TranslationMask copyMask = null)
        {
            return ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LoadScreen DeepCopy(
            this ILoadScreenGetter item,
            out LoadScreen_ErrorMask errorMask,
            LoadScreen_TranslationMask copyMask = null)
        {
            return ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LoadScreen DeepCopy(
            this ILoadScreenGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            LoadScreen_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            XElement node,
            out LoadScreen_ErrorMask errorMask,
            bool doMasks = true,
            LoadScreen_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromXml(
            this ILoadScreenInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((LoadScreenSetterCommon)((ILoadScreenGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            LoadScreen_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            string path,
            out LoadScreen_ErrorMask errorMask,
            LoadScreen_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            LoadScreen_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            LoadScreen_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            Stream stream,
            out LoadScreen_ErrorMask errorMask,
            LoadScreen_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            LoadScreen_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ILoadScreenInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ILoadScreenInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out LoadScreen_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromBinary(
            this ILoadScreenInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((LoadScreenSetterCommon)((ILoadScreenGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LoadScreen_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Icon = 5,
        Description = 6,
        Locations = 7,
    }
    #endregion

    #region Registration
    public partial class LoadScreen_Registration : ILoquiRegistration
    {
        public static readonly LoadScreen_Registration Instance = new LoadScreen_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 161,
            version: 0);

        public const string GUID = "12f93621-ba01-4a56-89b2-13d84e7a6972";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(LoadScreen_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LoadScreen_ErrorMask);

        public static readonly Type ClassType = typeof(LoadScreen);

        public static readonly Type GetterType = typeof(ILoadScreenGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILoadScreen);

        public static readonly Type InternalSetterType = typeof(ILoadScreenInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LoadScreen";

        public const string Name = "LoadScreen";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ICON":
                    return (ushort)LoadScreen_FieldIndex.Icon;
                case "DESCRIPTION":
                    return (ushort)LoadScreen_FieldIndex.Description;
                case "LOCATIONS":
                    return (ushort)LoadScreen_FieldIndex.Locations;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Locations:
                    return true;
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Locations:
                    return true;
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                case LoadScreen_FieldIndex.Locations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                    return "Icon";
                case LoadScreen_FieldIndex.Description:
                    return "Description";
                case LoadScreen_FieldIndex.Locations:
                    return "Locations";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                case LoadScreen_FieldIndex.Locations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                case LoadScreen_FieldIndex.Locations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                    return typeof(String);
                case LoadScreen_FieldIndex.Description:
                    return typeof(String);
                case LoadScreen_FieldIndex.Locations:
                    return typeof(ISetList<LoadScreenLocation>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(LoadScreenXmlWriteTranslation);
        public static readonly RecordType LSCR_HEADER = new RecordType("LSCR");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType LNAM_HEADER = new RecordType("LNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LSCR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryWriteTranslation = typeof(LoadScreenBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LoadScreenSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly LoadScreenSetterCommon Instance = new LoadScreenSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILoadScreenInternal item)
        {
            ClearPartial();
            item.Icon_Unset();
            item.Description_Unset();
            item.Locations.Unset();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ILoadScreenInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILoadScreenInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ILoadScreenInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public new void CopyInFromXml(
            ILoadScreenInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    LoadScreenXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => LoadScreen_Registration.LSCR_HEADER;
        protected static void FillBinaryStructs(
            ILoadScreenInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ILoadScreenInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String IconParse))
                    {
                        item.Icon = IconParse;
                    }
                    else
                    {
                        item.Icon = default(String);
                    }
                    return TryGet<int?>.Succeed((int)LoadScreen_FieldIndex.Icon);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String DescriptionParse))
                    {
                        item.Description = DescriptionParse;
                    }
                    else
                    {
                        item.Description = default(String);
                    }
                    return TryGet<int?>.Succeed((int)LoadScreen_FieldIndex.Description);
                }
                case 0x4D414E4C: // LNAM
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<LoadScreenLocation>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: LoadScreen_Registration.LNAM_HEADER,
                        item: item.Locations,
                        fieldIndex: (int)LoadScreen_FieldIndex.Locations,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out LoadScreenLocation listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<LoadScreenLocation>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)LoadScreen_FieldIndex.Locations);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }
        
        public new void CopyInFromBinary(
            ILoadScreenInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.MajorRecordParse<ILoadScreenInternal>(
                record: item,
                frame: frame,
                errorMask: errorMask,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class LoadScreenCommon : OblivionMajorRecordCommon
    {
        public new static readonly LoadScreenCommon Instance = new LoadScreenCommon();

        public LoadScreen_Mask<bool> GetEqualsMask(
            ILoadScreenGetter item,
            ILoadScreenGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LoadScreen_Mask<bool>();
            ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILoadScreenGetter item,
            ILoadScreenGetter rhs,
            LoadScreen_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && string.Equals(item.Icon, rhs.Icon);
            ret.Description = item.Description_IsSet == rhs.Description_IsSet && string.Equals(item.Description, rhs.Description);
            ret.Locations = item.Locations.CollectionEqualsHelper(
                rhs.Locations,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ILoadScreenGetter item,
            string name = null,
            LoadScreen_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILoadScreenGetter item,
            FileGeneration fg,
            string name = null,
            LoadScreen_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LoadScreen =>");
            }
            else
            {
                fg.AppendLine($"{name} (LoadScreen) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILoadScreenGetter item,
            FileGeneration fg,
            LoadScreen_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Icon ?? true)
            {
                fg.AppendLine($"Icon => {item.Icon}");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendLine($"Description => {item.Description}");
            }
            if (printMask?.Locations?.Overall ?? true)
            {
                fg.AppendLine("Locations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Locations)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ILoadScreenGetter item,
            LoadScreen_Mask<bool?> checkMask)
        {
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_IsSet) return false;
            if (checkMask.Locations.Overall.HasValue && checkMask.Locations.Overall.Value != item.Locations.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ILoadScreenGetter item,
            LoadScreen_Mask<bool> mask)
        {
            mask.Icon = item.Icon_IsSet;
            mask.Description = item.Description_IsSet;
            mask.Locations = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, LoadScreenLocation_Mask<bool>>>>(item.Locations.HasBeenSet, item.Locations.WithIndex().Select((i) => new MaskItemIndexed<bool, LoadScreenLocation_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static LoadScreen_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LoadScreen_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (LoadScreen_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (LoadScreen_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (LoadScreen_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (LoadScreen_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static LoadScreen_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LoadScreen_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (LoadScreen_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (LoadScreen_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LoadScreen_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILoadScreenGetter lhs,
            ILoadScreenGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Icon_IsSet != rhs.Icon_IsSet) return false;
            if (lhs.Icon_IsSet)
            {
                if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            }
            if (lhs.Description_IsSet != rhs.Description_IsSet) return false;
            if (lhs.Description_IsSet)
            {
                if (!string.Equals(lhs.Description, rhs.Description)) return false;
            }
            if (lhs.Locations.HasBeenSet != rhs.Locations.HasBeenSet) return false;
            if (lhs.Locations.HasBeenSet)
            {
                if (!lhs.Locations.SequenceEqual(rhs.Locations)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter lhs,
            IOblivionMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (ILoadScreenGetter)lhs,
                rhs: rhs as ILoadScreenGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (ILoadScreenGetter)lhs,
                rhs: rhs as ILoadScreenGetter);
        }
        
        public virtual int GetHashCode(ILoadScreenGetter item)
        {
            int ret = 0;
            if (item.Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Icon).CombineHashCode(ret);
            }
            if (item.Description_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Description).CombineHashCode(ret);
            }
            if (item.Locations.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Locations).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ILoadScreenGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILoadScreenGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return LoadScreen.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ILoadScreenGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Locations.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(LoadScreen obj, LoadScreen rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new LoadScreen(getNextFormKey());
            ret.DeepCopyFieldsFrom((LoadScreen)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (LoadScreen)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class LoadScreenSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly LoadScreenSetterTranslationCommon Instance = new LoadScreenSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            ILoadScreenInternal item,
            ILoadScreenGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyFieldsFrom(
            ILoadScreen item,
            ILoadScreenGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Icon) ?? true))
            {
                errorMask?.PushIndex((int)LoadScreen_FieldIndex.Icon);
                try
                {
                    if (rhs.Icon_IsSet)
                    {
                        item.Icon = rhs.Icon;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Description) ?? true))
            {
                errorMask?.PushIndex((int)LoadScreen_FieldIndex.Description);
                try
                {
                    if (rhs.Description_IsSet)
                    {
                        item.Description = rhs.Description;
                    }
                    else
                    {
                        item.Description_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Locations) ?? true))
            {
                errorMask?.PushIndex((int)LoadScreen_FieldIndex.Locations);
                try
                {
                    item.Locations.SetTo(
                        items: rhs.Locations,
                        converter: (r) =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (ILoadScreenInternal)item,
                rhs: (ILoadScreenGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (ILoadScreen)item,
                rhs: (ILoadScreenGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (ILoadScreenInternal)item,
                rhs: (ILoadScreenGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (ILoadScreen)item,
                rhs: (ILoadScreenGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public LoadScreen DeepCopy(
            ILoadScreenGetter item,
            LoadScreen_TranslationMask copyMask = null)
        {
            LoadScreen ret = (LoadScreen)((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public LoadScreen DeepCopy(
            ILoadScreenGetter item,
            out LoadScreen_ErrorMask errorMask,
            LoadScreen_TranslationMask copyMask = null)
        {
            LoadScreen ret = (LoadScreen)((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public LoadScreen DeepCopy(
            ILoadScreenGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            LoadScreen ret = (LoadScreen)((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LoadScreen
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LoadScreen_Registration.Instance;
        public new static LoadScreen_Registration Registration => LoadScreen_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LoadScreenCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LoadScreenSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LoadScreenSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LoadScreenXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static LoadScreenXmlWriteTranslation Instance = new LoadScreenXmlWriteTranslation();

        public static void WriteToNodeXml(
            ILoadScreenGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)LoadScreen_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.Description_IsSet
                && (translationMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)LoadScreen_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if (item.Locations.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Locations) ?? true))
            {
                ListXmlTranslation<ILoadScreenLocationGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Locations),
                    item: item.Locations,
                    fieldIndex: (int)LoadScreen_FieldIndex.Locations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)LoadScreen_FieldIndex.Locations),
                    transl: (XElement subNode, ILoadScreenLocationGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((LoadScreenLocationXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            ILoadScreenGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LoadScreen");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LoadScreen");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILoadScreenGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILoadScreenGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILoadScreenGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class LoadScreenXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static LoadScreenXmlCreateTranslation Instance = new LoadScreenXmlCreateTranslation();

        public static void FillPublicXml(
            ILoadScreenInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LoadScreenXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILoadScreenInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)LoadScreen_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    try
                    {
                        errorMask?.PushIndex((int)LoadScreen_FieldIndex.Description);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String DescriptionParse,
                            errorMask: errorMask))
                        {
                            item.Description = DescriptionParse;
                        }
                        else
                        {
                            item.Description = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Locations":
                    try
                    {
                        errorMask?.PushIndex((int)LoadScreen_FieldIndex.Locations);
                        if (ListXmlTranslation<LoadScreenLocation>.Instance.Parse(
                            node: node,
                            enumer: out var LocationsItem,
                            transl: LoquiXmlTranslation<LoadScreenLocation>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Locations.SetTo(LocationsItem);
                        }
                        else
                        {
                            item.Locations.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class LoadScreenXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ILoadScreenGetter item,
            XElement node,
            out LoadScreen_ErrorMask errorMask,
            bool doMasks = true,
            LoadScreen_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LoadScreenXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ILoadScreenGetter item,
            string path,
            out LoadScreen_ErrorMask errorMask,
            LoadScreen_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILoadScreenGetter item,
            Stream stream,
            out LoadScreen_ErrorMask errorMask,
            LoadScreen_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class LoadScreen_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<LoadScreen_Mask<T>>
    {
        #region Ctors
        public LoadScreen_Mask()
        {
        }

        public LoadScreen_Mask(T initialValue)
        {
            this.Icon = initialValue;
            this.Description = initialValue;
            this.Locations = new MaskItem<T, IEnumerable<MaskItemIndexed<T, LoadScreenLocation_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Icon;
        public T Description;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, LoadScreenLocation_Mask<T>>>> Locations;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LoadScreen_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LoadScreen_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Locations, rhs.Locations)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Locations?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Icon)) return false;
            if (!eval(this.Description)) return false;
            if (this.Locations != null)
            {
                if (!eval(this.Locations.Overall)) return false;
                if (this.Locations.Specific != null)
                {
                    foreach (var item in this.Locations.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new LoadScreen_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LoadScreen_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LoadScreen_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Icon = eval(this.Icon);
            obj.Description = eval(this.Description);
            if (Locations != null)
            {
                obj.Locations = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LoadScreenLocation_Mask<R>>>>();
                obj.Locations.Overall = eval(this.Locations.Overall);
                if (Locations.Specific != null)
                {
                    List<MaskItemIndexed<R, LoadScreenLocation_Mask<R>>> l = new List<MaskItemIndexed<R, LoadScreenLocation_Mask<R>>>();
                    obj.Locations.Specific = l;
                    foreach (var item in Locations.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, LoadScreenLocation_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, LoadScreenLocation_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Locations.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LoadScreen_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LoadScreen_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LoadScreen_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.Locations?.Overall ?? true)
                {
                    fg.AppendLine("Locations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Locations.Overall != null)
                        {
                            fg.AppendLine(Locations.Overall.ToString());
                        }
                        if (Locations.Specific != null)
                        {
                            foreach (var subItem in Locations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LoadScreen_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<LoadScreen_ErrorMask>
    {
        #region Members
        public Exception Icon;
        public Exception Description;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, LoadScreenLocation_ErrorMask>>> Locations;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                    return Icon;
                case LoadScreen_FieldIndex.Description:
                    return Description;
                case LoadScreen_FieldIndex.Locations:
                    return Locations;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case LoadScreen_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case LoadScreen_FieldIndex.Locations:
                    this.Locations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LoadScreenLocation_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case LoadScreen_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case LoadScreen_FieldIndex.Locations:
                    this.Locations = (MaskItem<Exception, IEnumerable<MaskItem<Exception, LoadScreenLocation_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Icon != null) return true;
            if (Description != null) return true;
            if (Locations != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("LoadScreen_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine("Locations =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Locations.Overall != null)
                {
                    fg.AppendLine(Locations.Overall.ToString());
                }
                if (Locations.Specific != null)
                {
                    foreach (var subItem in Locations.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public LoadScreen_ErrorMask Combine(LoadScreen_ErrorMask rhs)
        {
            var ret = new LoadScreen_ErrorMask();
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Locations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LoadScreenLocation_ErrorMask>>>(this.Locations.Overall.Combine(rhs.Locations.Overall), new List<MaskItem<Exception, LoadScreenLocation_ErrorMask>>(this.Locations.Specific.And(rhs.Locations.Specific)));
            return ret;
        }
        public static LoadScreen_ErrorMask Combine(LoadScreen_ErrorMask lhs, LoadScreen_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static LoadScreen_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new LoadScreen_ErrorMask();
        }
        #endregion

    }
    public class LoadScreen_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Icon;
        public bool Description;
        public MaskItem<bool, LoadScreenLocation_TranslationMask> Locations;
        #endregion

        #region Ctors
        public LoadScreen_TranslationMask()
            : base()
        {
        }

        public LoadScreen_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Icon = defaultOn;
            this.Description = defaultOn;
            this.Locations = new MaskItem<bool, LoadScreenLocation_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Icon, null));
            ret.Add((Description, null));
            ret.Add((Locations?.Overall ?? true, Locations?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LoadScreenBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LoadScreenBinaryWriteTranslation Instance = new LoadScreenBinaryWriteTranslation();

        public static void Write_RecordTypes(
            ILoadScreenGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    header: recordTypeConverter.ConvertToCustom(LoadScreen_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.Description_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Description,
                    header: recordTypeConverter.ConvertToCustom(LoadScreen_Registration.DESC_HEADER),
                    nullable: false);
            }
            if (item.Locations.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<ILoadScreenLocationGetter>.Instance.Write(
                    writer: writer,
                    items: item.Locations,
                    fieldIndex: (int)LoadScreen_FieldIndex.Locations,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, ILoadScreenLocationGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((LoadScreenLocationBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            ILoadScreenGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: LoadScreen_Registration.LSCR_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ILoadScreenGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ILoadScreenGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ILoadScreenGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class LoadScreenBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static LoadScreenBinaryCreateTranslation Instance = new LoadScreenBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LoadScreenBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILoadScreenGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out LoadScreen_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LoadScreenBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LoadScreenBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        ILoadScreenGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LoadScreen_Registration.Instance;
        public new static LoadScreen_Registration Registration => LoadScreen_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LoadScreenCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LoadScreenSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILoadScreenGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => LoadScreenCommon.Instance.GetLinks(this);
        protected override object XmlWriteTranslator => LoadScreenXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((LoadScreenXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => LoadScreenBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((LoadScreenBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Icon
        private int? _IconLocation;
        public bool Icon_IsSet => _IconLocation.HasValue;
        public String Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _IconLocation.Value, _package.Meta)) : default;
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public bool Description_IsSet => _DescriptionLocation.HasValue;
        public String Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _DescriptionLocation.Value, _package.Meta)) : default;
        #endregion
        public IReadOnlySetList<ILoadScreenLocationGetter> Locations { get; private set; } = EmptySetList<LoadScreenLocationBinaryWrapper>.Instance;
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected LoadScreenBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static LoadScreenBinaryWrapper LoadScreenFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new LoadScreenBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LoadScreen_FieldIndex.Icon);
                }
                case 0x43534544: // DESC
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LoadScreen_FieldIndex.Description);
                }
                case 0x4D414E4C: // LNAM
                {
                    this.Locations = BinaryWrapperSetList<LoadScreenLocationBinaryWrapper>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => LoadScreenLocationBinaryWrapper.LoadScreenLocationFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)LoadScreen_FieldIndex.Locations);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

