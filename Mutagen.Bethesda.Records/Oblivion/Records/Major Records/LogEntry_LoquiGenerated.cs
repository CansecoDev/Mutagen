/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LogEntry :
        ILogEntry,
        ILoquiObjectSetter<LogEntry>,
        ILinkSubContainer,
        IEquatable<LogEntry>,
        IEqualsMask
    {
        #region Ctor
        public LogEntry()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public bool Flags_IsSet
        {
            get => _hasBeenSetTracker[(int)LogEntry_FieldIndex.Flags];
            set => _hasBeenSetTracker[(int)LogEntry_FieldIndex.Flags] = value;
        }
        bool ILogEntryGetter.Flags_IsSet => Flags_IsSet;
        private LogEntry.Flag _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LogEntry.Flag Flags
        {
            get => this._Flags;
            set => Flags_Set(value);
        }
        LogEntry.Flag ILogEntryGetter.Flags => this.Flags;
        public void Flags_Set(
            LogEntry.Flag value,
            bool markSet = true)
        {
            _Flags = value;
            _hasBeenSetTracker[(int)LogEntry_FieldIndex.Flags] = markSet;
        }
        public void Flags_Unset()
        {
            this.Flags_Set(default(LogEntry.Flag), false);
        }
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<Condition> _Conditions = new SetList<Condition>();
        public ISetList<Condition> Conditions => _Conditions;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<Condition> ILogEntry.Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IConditionGetter> ILogEntryGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Entry
        public bool Entry_IsSet
        {
            get => _hasBeenSetTracker[(int)LogEntry_FieldIndex.Entry];
            set => _hasBeenSetTracker[(int)LogEntry_FieldIndex.Entry] = value;
        }
        bool ILogEntryGetter.Entry_IsSet => Entry_IsSet;
        private String _Entry;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Entry
        {
            get => this._Entry;
            set => Entry_Set(value);
        }
        String ILogEntryGetter.Entry => this.Entry;
        public void Entry_Set(
            String value,
            bool markSet = true)
        {
            _Entry = value;
            _hasBeenSetTracker[(int)LogEntry_FieldIndex.Entry] = markSet;
        }
        public void Entry_Unset()
        {
            this.Entry_Set(default(String), false);
        }
        #endregion
        #region ResultScript
        public bool ResultScript_IsSet
        {
            get => _hasBeenSetTracker[(int)LogEntry_FieldIndex.ResultScript];
            set => _hasBeenSetTracker[(int)LogEntry_FieldIndex.ResultScript] = value;
        }
        bool ILogEntryGetter.ResultScript_IsSet => ResultScript_IsSet;
        private ScriptFields _ResultScript;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ScriptFields ResultScript
        {
            get => _ResultScript;
            set => ResultScript_Set(value);
        }
        public void ResultScript_Set(
            ScriptFields value,
            bool hasBeenSet = true)
        {
            _ResultScript = value;
            _hasBeenSetTracker[(int)LogEntry_FieldIndex.ResultScript] = hasBeenSet;
        }
        public void ResultScript_Unset()
        {
            this.ResultScript_Set(default(ScriptFields), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScriptFieldsGetter ILogEntryGetter.ResultScript => this.ResultScript;
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILogEntryGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            LogEntryMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ILogEntryGetter rhs)) return false;
            return ((LogEntryCommon)((ILogEntryGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(LogEntry obj)
        {
            return ((LogEntryCommon)((ILogEntryGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((LogEntryCommon)((ILogEntryGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => LogEntryXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((LogEntryXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static LogEntry CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            LogEntry_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LogEntry CreateFromXml(
            XElement node,
            out LogEntry_ErrorMask errorMask,
            bool doMasks = true,
            LogEntry_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = LogEntry_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static LogEntry CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new LogEntry() : null;
                    break;
                default:
                    break;
            }
            var ret = new LogEntry();
            ((LogEntrySetterCommon)((ILogEntryGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static LogEntry CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            LogEntry_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static LogEntry CreateFromXml(
            string path,
            out LogEntry_ErrorMask errorMask,
            LogEntry_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LogEntry CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            LogEntry_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LogEntry CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            LogEntry_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static LogEntry CreateFromXml(
            Stream stream,
            out LogEntry_ErrorMask errorMask,
            LogEntry_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LogEntry CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            LogEntry_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((LogEntry_FieldIndex)index)
            {
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Entry:
                case LogEntry_FieldIndex.ResultScript:
                    return _hasBeenSetTracker[index];
                case LogEntry_FieldIndex.Conditions:
                    return Conditions.HasBeenSet;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            if (ResultScript is ILinkSubContainer ResultScriptlinkCont)
            {
                foreach (var item in ResultScriptlinkCont.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }

        public void Link<M>(LinkingPackage<M> package)
            where M : IMod
        {
            if (ResultScript is ILinkSubContainer ResultScriptlinkCont)
            {
                ResultScriptlinkCont?.Link(package: package);
            }
        }

        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => LogEntryBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((LogEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static LogEntry CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static LogEntry CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out LogEntry_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LogEntry_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static LogEntry CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new LogEntry();
            ((LogEntrySetterCommon)((ILogEntryGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void IClearable.Clear()
        {
            ((LogEntrySetterCommon)((ILogEntryGetter)this).CommonSetterInstance()).Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface ILogEntry :
        ILogEntryGetter,
        ILoquiObjectSetter<ILogEntry>
    {
        new LogEntry.Flag Flags { get; set; }
        new bool Flags_IsSet { get; set; }
        void Flags_Set(LogEntry.Flag value, bool hasBeenSet = true);
        void Flags_Unset();

        new ISetList<Condition> Conditions { get; }
        new String Entry { get; set; }
        new bool Entry_IsSet { get; set; }
        void Entry_Set(String value, bool hasBeenSet = true);
        void Entry_Unset();

        new ScriptFields ResultScript { get; set; }
        new bool ResultScript_IsSet { get; set; }
        void ResultScript_Set(ScriptFields value, bool hasBeenSet = true);
        void ResultScript_Unset();

    }

    public partial interface ILogEntryGetter :
        ILoquiObject,
        ILoquiObject<ILogEntryGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region Flags
        LogEntry.Flag Flags { get; }
        bool Flags_IsSet { get; }

        #endregion
        #region Conditions
        IReadOnlySetList<IConditionGetter> Conditions { get; }
        #endregion
        #region Entry
        String Entry { get; }
        bool Entry_IsSet { get; }

        #endregion
        #region ResultScript
        IScriptFieldsGetter ResultScript { get; }
        bool ResultScript_IsSet { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class LogEntryMixIn
    {
        public static void Clear(this ILogEntry item)
        {
            ((LogEntrySetterCommon)((ILogEntryGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static LogEntry_Mask<bool> GetEqualsMask(
            this ILogEntryGetter item,
            ILogEntryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILogEntryGetter item,
            string name = null,
            LogEntry_Mask<bool> printMask = null)
        {
            return ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILogEntryGetter item,
            FileGeneration fg,
            string name = null,
            LogEntry_Mask<bool> printMask = null)
        {
            ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILogEntryGetter item,
            LogEntry_Mask<bool?> checkMask)
        {
            return ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static LogEntry_Mask<bool> GetHasBeenSetMask(this ILogEntryGetter item)
        {
            var ret = new LogEntry_Mask<bool>();
            ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ILogEntryGetter item,
            ILogEntryGetter rhs)
        {
            return ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this ILogEntry lhs,
            ILogEntryGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this ILogEntry lhs,
            ILogEntryGetter rhs,
            LogEntry_TranslationMask copyMask,
            ILogEntryGetter def = null)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this ILogEntry lhs,
            ILogEntryGetter rhs,
            out LogEntry_ErrorMask errorMask,
            LogEntry_TranslationMask copyMask = null,
            ILogEntryGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LogEntrySetterTranslationCommon)((ILogEntryGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = LogEntry_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this ILogEntry lhs,
            ILogEntryGetter rhs,
            ErrorMaskBuilder errorMask,
            LogEntry_TranslationMask copyMask = null,
            ILogEntryGetter def = null)
        {
            ((LogEntrySetterTranslationCommon)((ILogEntryGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static LogEntry DeepCopy(
            this ILogEntryGetter item,
            LogEntry_TranslationMask copyMask = null,
            ILogEntryGetter def = null)
        {
            return ((LogEntrySetterTranslationCommon)((ILogEntryGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                def: def);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILogEntry item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            LogEntry_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILogEntry item,
            XElement node,
            out LogEntry_ErrorMask errorMask,
            bool doMasks = true,
            LogEntry_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = LogEntry_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ILogEntry item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((LogEntrySetterCommon)((ILogEntryGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILogEntry item,
            string path,
            MissingCreate missing = MissingCreate.New,
            LogEntry_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILogEntry item,
            string path,
            out LogEntry_ErrorMask errorMask,
            LogEntry_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILogEntry item,
            string path,
            ErrorMaskBuilder errorMask,
            LogEntry_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ILogEntry item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            LogEntry_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILogEntry item,
            Stream stream,
            out LogEntry_ErrorMask errorMask,
            LogEntry_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILogEntry item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            LogEntry_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ILogEntry item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ILogEntry item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out LogEntry_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LogEntry_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this ILogEntry item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((LogEntrySetterCommon)((ILogEntryGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LogEntry_FieldIndex
    {
        Flags = 0,
        Conditions = 1,
        Entry = 2,
        ResultScript = 3,
    }
    #endregion

    #region Registration
    public class LogEntry_Registration : ILoquiRegistration
    {
        public static readonly LogEntry_Registration Instance = new LogEntry_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 153,
            version: 0);

        public const string GUID = "c5072833-ef3f-418b-b86d-452f4bbd7617";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(LogEntry_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LogEntry_ErrorMask);

        public static readonly Type ClassType = typeof(LogEntry);

        public static readonly Type GetterType = typeof(ILogEntryGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILogEntry);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.LogEntry";

        public const string Name = "LogEntry";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLAGS":
                    return (ushort)LogEntry_FieldIndex.Flags;
                case "CONDITIONS":
                    return (ushort)LogEntry_FieldIndex.Conditions;
                case "ENTRY":
                    return (ushort)LogEntry_FieldIndex.Entry;
                case "RESULTSCRIPT":
                    return (ushort)LogEntry_FieldIndex.ResultScript;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Conditions:
                    return true;
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Entry:
                case LogEntry_FieldIndex.ResultScript:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Conditions:
                case LogEntry_FieldIndex.ResultScript:
                    return true;
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Entry:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Conditions:
                case LogEntry_FieldIndex.Entry:
                case LogEntry_FieldIndex.ResultScript:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    return "Flags";
                case LogEntry_FieldIndex.Conditions:
                    return "Conditions";
                case LogEntry_FieldIndex.Entry:
                    return "Entry";
                case LogEntry_FieldIndex.ResultScript:
                    return "ResultScript";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Conditions:
                case LogEntry_FieldIndex.Entry:
                case LogEntry_FieldIndex.ResultScript:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Conditions:
                case LogEntry_FieldIndex.Entry:
                case LogEntry_FieldIndex.ResultScript:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    return typeof(LogEntry.Flag);
                case LogEntry_FieldIndex.Conditions:
                    return typeof(ISetList<Condition>);
                case LogEntry_FieldIndex.Entry:
                    return typeof(String);
                case LogEntry_FieldIndex.ResultScript:
                    return typeof(ScriptFields);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(LogEntryXmlWriteTranslation);
        public static readonly RecordType QSDT_HEADER = new RecordType("QSDT");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType SCHD_HEADER = new RecordType("SCHD");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        QSDT_HEADER,
                        CTDA_HEADER,
                        CTDT_HEADER,
                        CNAM_HEADER,
                        SCHR_HEADER,
                        SCHD_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(LogEntryBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LogEntrySetterCommon
    {
        public static readonly LogEntrySetterCommon Instance = new LogEntrySetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(ILogEntry item)
        {
            ClearPartial();
            item.Flags_Unset();
            item.Conditions.Unset();
            item.Entry_Unset();
            item.ResultScript_Unset();
        }
        
        public LogEntry GetNew()
        {
            return new LogEntry();
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            ILogEntry item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LogEntryXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ILogEntry item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ILogEntry item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54445351: // QSDT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.Flags) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (EnumBinaryTranslation<LogEntry.Flag>.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out LogEntry.Flag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(LogEntry.Flag);
                    }
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.Flags);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.Conditions) return TryGet<int?>.Failure;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                        item: item.Conditions,
                        fieldIndex: (int)LogEntry_FieldIndex.Conditions,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out Condition listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<Condition>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.Conditions);
                }
                case 0x4D414E43: // CNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.Entry) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String EntryParse))
                    {
                        item.Entry = EntryParse;
                    }
                    else
                    {
                        item.Entry = default(String);
                    }
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.Entry);
                }
                case 0x52484353: // SCHR
                case 0x44484353: // SCHD
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.ResultScript) return TryGet<int?>.Failure;
                    try
                    {
                        errorMask?.PushIndex((int)LogEntry_FieldIndex.ResultScript);
                        item.ResultScript = Mutagen.Bethesda.Oblivion.ScriptFields.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.ResultScript);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            ILogEntry item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class LogEntryCommon
    {
        public static readonly LogEntryCommon Instance = new LogEntryCommon();

        public LogEntry_Mask<bool> GetEqualsMask(
            ILogEntryGetter item,
            ILogEntryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LogEntry_Mask<bool>();
            ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILogEntryGetter item,
            ILogEntryGetter rhs,
            LogEntry_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags_IsSet == rhs.Flags_IsSet && item.Flags == rhs.Flags;
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Entry = item.Entry_IsSet == rhs.Entry_IsSet && string.Equals(item.Entry, rhs.Entry);
            ret.ResultScript = EqualsMaskHelper.EqualsHelper(
                item.ResultScript_IsSet,
                rhs.ResultScript_IsSet,
                item.ResultScript,
                rhs.ResultScript,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
        }
        
        public string ToString(
            ILogEntryGetter item,
            string name = null,
            LogEntry_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILogEntryGetter item,
            FileGeneration fg,
            string name = null,
            LogEntry_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LogEntry =>");
            }
            else
            {
                fg.AppendLine($"{name} (LogEntry) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILogEntryGetter item,
            FileGeneration fg,
            LogEntry_Mask<bool> printMask = null)
        {
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Entry ?? true)
            {
                fg.AppendLine($"Entry => {item.Entry}");
            }
            if (printMask?.ResultScript?.Overall ?? true)
            {
                item.ResultScript?.ToString(fg, "ResultScript");
            }
        }
        
        public bool HasBeenSet(
            ILogEntryGetter item,
            LogEntry_Mask<bool?> checkMask)
        {
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_IsSet) return false;
            if (checkMask.Conditions.Overall.HasValue && checkMask.Conditions.Overall.Value != item.Conditions.HasBeenSet) return false;
            if (checkMask.Entry.HasValue && checkMask.Entry.Value != item.Entry_IsSet) return false;
            if (checkMask.ResultScript.Overall.HasValue && checkMask.ResultScript.Overall.Value != item.ResultScript_IsSet) return false;
            if (checkMask.ResultScript.Specific != null && (item.ResultScript == null || !item.ResultScript.HasBeenSet(checkMask.ResultScript.Specific))) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            ILogEntryGetter item,
            LogEntry_Mask<bool> mask)
        {
            mask.Flags = item.Flags_IsSet;
            mask.Conditions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Condition_Mask<bool>>>>(item.Conditions.HasBeenSet, item.Conditions.WithIndex().Select((i) => new MaskItemIndexed<bool, Condition_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Entry = item.Entry_IsSet;
            mask.ResultScript = new MaskItem<bool, ScriptFields_Mask<bool>>(item.ResultScript_IsSet, item.ResultScript.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILogEntryGetter lhs,
            ILogEntryGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Flags_IsSet != rhs.Flags_IsSet) return false;
            if (lhs.Flags_IsSet)
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if (lhs.Conditions.HasBeenSet != rhs.Conditions.HasBeenSet) return false;
            if (lhs.Conditions.HasBeenSet)
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions)) return false;
            }
            if (lhs.Entry_IsSet != rhs.Entry_IsSet) return false;
            if (lhs.Entry_IsSet)
            {
                if (!string.Equals(lhs.Entry, rhs.Entry)) return false;
            }
            if (lhs.ResultScript_IsSet != rhs.ResultScript_IsSet) return false;
            if (lhs.ResultScript_IsSet)
            {
                if (!object.Equals(lhs.ResultScript, rhs.ResultScript)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ILogEntryGetter item)
        {
            int ret = 0;
            if (item.Flags_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            }
            if (item.Conditions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Conditions).CombineHashCode(ret);
            }
            if (item.Entry_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Entry).CombineHashCode(ret);
            }
            if (item.ResultScript_IsSet)
            {
                ret = HashHelper.GetHashCode(item.ResultScript).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class LogEntrySetterTranslationCommon
    {
        public static readonly LogEntrySetterTranslationCommon Instance = new LogEntrySetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            ILogEntry item,
            ILogEntryGetter rhs,
            ILogEntryGetter def,
            ErrorMaskBuilder errorMask,
            LogEntry_TranslationMask copyMask)
        {
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)LogEntry_FieldIndex.Flags);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Flags,
                        rhsHasBeenSet: rhs.Flags_IsSet,
                        defItem: def?.Flags ?? default(LogEntry.Flag),
                        defHasBeenSet: def?.Flags_IsSet ?? false,
                        outRhsItem: out var rhsFlagsItem,
                        outDefItem: out var defFlagsItem))
                    {
                        item.Flags = rhsFlagsItem;
                    }
                    else
                    {
                        item.Flags_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Conditions.Overall ?? true)
            {
                errorMask?.PushIndex((int)LogEntry_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetToWithDefault(
                        rhs: rhs.Conditions,
                        def: def?.Conditions,
                        converter: (r, d) =>
                        {
                            return r.DeepCopy(
                                copyMask?.Conditions?.Specific,
                                def: d);
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Entry ?? true)
            {
                errorMask?.PushIndex((int)LogEntry_FieldIndex.Entry);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Entry,
                        rhsHasBeenSet: rhs.Entry_IsSet,
                        defItem: def?.Entry ?? default(String),
                        defHasBeenSet: def?.Entry_IsSet ?? false,
                        outRhsItem: out var rhsEntryItem,
                        outDefItem: out var defEntryItem))
                    {
                        item.Entry = rhsEntryItem;
                    }
                    else
                    {
                        item.Entry_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ResultScript.Overall ?? true)
            {
                errorMask?.PushIndex((int)LogEntry_FieldIndex.ResultScript);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.ResultScript,
                        rhsHasBeenSet: rhs.ResultScript_IsSet,
                        defItem: def?.ResultScript,
                        defHasBeenSet: def?.ResultScript_IsSet ?? false,
                        outRhsItem: out var rhsResultScriptItem,
                        outDefItem: out var defResultScriptItem))
                    {
                        item.ResultScript = rhsResultScriptItem.DeepCopy(
                            copyMask?.ResultScript?.Specific,
                            def: defResultScriptItem);
                    }
                    else
                    {
                        item.ResultScript_Set(
                            value: default(ScriptFields),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public LogEntry DeepCopy(
            ILogEntryGetter item,
            LogEntry_TranslationMask copyMask = null,
            ILogEntryGetter def = null)
        {
            LogEntry ret = LogEntrySetterCommon.Instance.GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LogEntry
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LogEntry_Registration.Instance;
        public static LogEntry_Registration Registration => LogEntry_Registration.Instance;
        protected object CommonInstance()
        {
            return LogEntryCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return LogEntrySetterCommon.Instance;
        }
        protected object CommonSetterTranslationInstance()
        {
            return LogEntrySetterTranslationCommon.Instance;
        }
        object ILogEntryGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object ILogEntryGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object ILogEntryGetter.CommonSetterTranslationInstance()
        {
            return this.CommonSetterTranslationInstance();
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LogEntryXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static LogEntryXmlWriteTranslation Instance = new LogEntryXmlWriteTranslation();

        public static void WriteToNodeXml(
            ILogEntryGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.Flags_IsSet
                && (translationMask?.GetShouldTranslate((int)LogEntry_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<LogEntry.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)LogEntry_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.Conditions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)LogEntry_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<IConditionGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)LogEntry_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)LogEntry_FieldIndex.Conditions),
                    transl: (XElement subNode, IConditionGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((ConditionXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.Entry_IsSet
                && (translationMask?.GetShouldTranslate((int)LogEntry_FieldIndex.Entry) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Entry),
                    item: item.Entry,
                    fieldIndex: (int)LogEntry_FieldIndex.Entry,
                    errorMask: errorMask);
            }
            if (item.ResultScript_IsSet
                && (translationMask?.GetShouldTranslate((int)LogEntry_FieldIndex.ResultScript) ?? true))
            {
                var loquiItem = item.ResultScript;
                ((ScriptFieldsXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.ResultScript),
                    fieldIndex: (int)LogEntry_FieldIndex.ResultScript,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)LogEntry_FieldIndex.ResultScript));
            }
        }

        public void Write(
            XElement node,
            ILogEntryGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LogEntry");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LogEntry");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILogEntryGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ILogEntryGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ILogEntryGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class LogEntryXmlCreateTranslation
    {
        public readonly static LogEntryXmlCreateTranslation Instance = new LogEntryXmlCreateTranslation();

        public static void FillPublicXml(
            ILogEntry item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LogEntryXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILogEntry item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)LogEntry_FieldIndex.Flags);
                        if (EnumXmlTranslation<LogEntry.Flag>.Instance.Parse(
                            node: node,
                            item: out LogEntry.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(LogEntry.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    try
                    {
                        errorMask?.PushIndex((int)LogEntry_FieldIndex.Conditions);
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            node: node,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Entry":
                    try
                    {
                        errorMask?.PushIndex((int)LogEntry_FieldIndex.Entry);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String EntryParse,
                            errorMask: errorMask))
                        {
                            item.Entry = EntryParse;
                        }
                        else
                        {
                            item.Entry = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ResultScript":
                    try
                    {
                        errorMask?.PushIndex((int)LogEntry_FieldIndex.ResultScript);
                        if (LoquiXmlTranslation<ScriptFields>.Instance.Parse(
                            node: node,
                            item: out ScriptFields ResultScriptParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)LogEntry_FieldIndex.ResultScript)))
                        {
                            item.ResultScript = ResultScriptParse;
                        }
                        else
                        {
                            item.ResultScript = default(ScriptFields);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class LogEntryXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ILogEntryGetter item,
            XElement node,
            out LogEntry_ErrorMask errorMask,
            bool doMasks = true,
            LogEntry_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LogEntryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LogEntry_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ILogEntryGetter item,
            string path,
            out LogEntry_ErrorMask errorMask,
            LogEntry_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILogEntryGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILogEntryGetter item,
            Stream stream,
            out LogEntry_ErrorMask errorMask,
            LogEntry_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ILogEntryGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ILogEntryGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((LogEntryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ILogEntryGetter item,
            XElement node,
            string name = null,
            LogEntry_TranslationMask translationMask = null)
        {
            ((LogEntryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this ILogEntryGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((LogEntryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILogEntryGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((LogEntryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class LogEntry_Mask<T> : IMask<T>, IEquatable<LogEntry_Mask<T>>
    {
        #region Ctors
        public LogEntry_Mask()
        {
        }

        public LogEntry_Mask(T initialValue)
        {
            this.Flags = initialValue;
            this.Conditions = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Condition_Mask<T>>>>(initialValue, null);
            this.Entry = initialValue;
            this.ResultScript = new MaskItem<T, ScriptFields_Mask<T>>(initialValue, new ScriptFields_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T Flags;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Condition_Mask<T>>>> Conditions;
        public T Entry;
        public MaskItem<T, ScriptFields_Mask<T>> ResultScript { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LogEntry_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LogEntry_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
            if (!object.Equals(this.Entry, rhs.Entry)) return false;
            if (!object.Equals(this.ResultScript, rhs.ResultScript)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Conditions?.GetHashCode());
            ret = ret.CombineHashCode(this.Entry?.GetHashCode());
            ret = ret.CombineHashCode(this.ResultScript?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Flags)) return false;
            if (this.Conditions != null)
            {
                if (!eval(this.Conditions.Overall)) return false;
                if (this.Conditions.Specific != null)
                {
                    foreach (var item in this.Conditions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.Entry)) return false;
            if (ResultScript != null)
            {
                if (!eval(this.ResultScript.Overall)) return false;
                if (this.ResultScript.Specific != null && !this.ResultScript.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public LogEntry_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LogEntry_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LogEntry_Mask<R> obj, Func<T, R> eval)
        {
            obj.Flags = eval(this.Flags);
            if (Conditions != null)
            {
                obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition_Mask<R>>>>();
                obj.Conditions.Overall = eval(this.Conditions.Overall);
                if (Conditions.Specific != null)
                {
                    List<MaskItemIndexed<R, Condition_Mask<R>>> l = new List<MaskItemIndexed<R, Condition_Mask<R>>>();
                    obj.Conditions.Specific = l;
                    foreach (var item in Conditions.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Condition_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Condition_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.Entry = eval(this.Entry);
            if (this.ResultScript != null)
            {
                obj.ResultScript = new MaskItem<R, ScriptFields_Mask<R>>();
                obj.ResultScript.Overall = eval(this.ResultScript.Overall);
                if (this.ResultScript.Specific != null)
                {
                    obj.ResultScript.Specific = this.ResultScript.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Conditions.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LogEntry_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LogEntry_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LogEntry_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Conditions?.Overall ?? true)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Conditions.Overall != null)
                        {
                            fg.AppendLine(Conditions.Overall.ToString());
                        }
                        if (Conditions.Specific != null)
                        {
                            foreach (var subItem in Conditions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Entry ?? true)
                {
                    fg.AppendLine($"Entry => {Entry}");
                }
                if (printMask?.ResultScript?.Overall ?? true)
                {
                    ResultScript?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LogEntry_ErrorMask : IErrorMask, IErrorMask<LogEntry_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Flags;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>> Conditions;
        public Exception Entry;
        public MaskItem<Exception, ScriptFields_ErrorMask> ResultScript;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    return Flags;
                case LogEntry_FieldIndex.Conditions:
                    return Conditions;
                case LogEntry_FieldIndex.Entry:
                    return Entry;
                case LogEntry_FieldIndex.ResultScript:
                    return ResultScript;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case LogEntry_FieldIndex.Conditions:
                    this.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(ex, null);
                    break;
                case LogEntry_FieldIndex.Entry:
                    this.Entry = ex;
                    break;
                case LogEntry_FieldIndex.ResultScript:
                    this.ResultScript = new MaskItem<Exception, ScriptFields_ErrorMask>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case LogEntry_FieldIndex.Conditions:
                    this.Conditions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>)obj;
                    break;
                case LogEntry_FieldIndex.Entry:
                    this.Entry = (Exception)obj;
                    break;
                case LogEntry_FieldIndex.ResultScript:
                    this.ResultScript = (MaskItem<Exception, ScriptFields_ErrorMask>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Flags != null) return true;
            if (Conditions != null) return true;
            if (Entry != null) return true;
            if (ResultScript != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("LogEntry_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine("Conditions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Conditions.Overall != null)
                {
                    fg.AppendLine(Conditions.Overall.ToString());
                }
                if (Conditions.Specific != null)
                {
                    foreach (var subItem in Conditions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Entry => {Entry}");
            ResultScript?.ToString(fg);
        }
        #endregion

        #region Combine
        public LogEntry_ErrorMask Combine(LogEntry_ErrorMask rhs)
        {
            var ret = new LogEntry_ErrorMask();
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(this.Conditions.Overall.Combine(rhs.Conditions.Overall), new List<MaskItem<Exception, Condition_ErrorMask>>(this.Conditions.Specific.And(rhs.Conditions.Specific)));
            ret.Entry = this.Entry.Combine(rhs.Entry);
            ret.ResultScript = new MaskItem<Exception, ScriptFields_ErrorMask>(this.ResultScript.Overall.Combine(rhs.ResultScript.Overall), ((IErrorMask<ScriptFields_ErrorMask>)this.ResultScript.Specific).Combine(rhs.ResultScript.Specific));
            return ret;
        }
        public static LogEntry_ErrorMask Combine(LogEntry_ErrorMask lhs, LogEntry_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static LogEntry_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new LogEntry_ErrorMask();
        }
        #endregion

    }
    public class LogEntry_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Flags;
        public MaskItem<bool, Condition_TranslationMask> Conditions;
        public bool Entry;
        public MaskItem<bool, ScriptFields_TranslationMask> ResultScript;
        #endregion

        #region Ctors
        public LogEntry_TranslationMask()
        {
        }

        public LogEntry_TranslationMask(bool defaultOn)
        {
            this.Flags = defaultOn;
            this.Conditions = new MaskItem<bool, Condition_TranslationMask>(defaultOn, null);
            this.Entry = defaultOn;
            this.ResultScript = new MaskItem<bool, ScriptFields_TranslationMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Flags, null));
            ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
            ret.Add((Entry, null));
            ret.Add((ResultScript?.Overall ?? true, ResultScript?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LogEntryBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static LogEntryBinaryWriteTranslation Instance = new LogEntryBinaryWriteTranslation();

        public static void Write_RecordTypes(
            ILogEntryGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.Flags_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<LogEntry.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1,
                    header: recordTypeConverter.ConvertToCustom(LogEntry_Registration.QSDT_HEADER),
                    nullable: false);
            }
            if (item.Conditions.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                    writer: writer,
                    items: item.Conditions,
                    fieldIndex: (int)LogEntry_FieldIndex.Conditions,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IConditionGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((ConditionBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
            if (item.Entry_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Entry,
                    header: recordTypeConverter.ConvertToCustom(LogEntry_Registration.CNAM_HEADER),
                    nullable: false);
            }
            if (item.ResultScript_IsSet)
            {
                var loquiItem = item.ResultScript;
                ((ScriptFieldsBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
        }

        public void Write(
            MutagenWriter writer,
            ILogEntryGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ILogEntryGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class LogEntryBinaryCreateTranslation
    {
        public readonly static LogEntryBinaryCreateTranslation Instance = new LogEntryBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LogEntryBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILogEntryGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out LogEntry_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LogEntryBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LogEntry_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this ILogEntryGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((LogEntryBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this ILogEntryGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((LogEntryBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LogEntryBinaryWrapper :
        BinaryWrapper,
        ILogEntryGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LogEntry_Registration.Instance;
        public static LogEntry_Registration Registration => LogEntry_Registration.Instance;
        protected object CommonInstance()
        {
            return LogEntryCommon.Instance;
        }
        protected object CommonSetterTranslationInstance()
        {
            return LogEntrySetterTranslationCommon.Instance;
        }
        object ILogEntryGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object ILogEntryGetter.CommonSetterInstance()
        {
            return null;
        }
        object ILogEntryGetter.CommonSetterTranslationInstance()
        {
            return this.CommonSetterTranslationInstance();
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILogEntryGetter)rhs, include);

        protected object XmlWriteTranslator => LogEntryXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((LogEntryXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => LogEntryBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((LogEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Flags
        private int? _FlagsLocation;
        public bool Flags_IsSet => _FlagsLocation.HasValue;
        public LogEntry.Flag Flags => (LogEntry.Flag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation.Value, _package.Meta)[0];
        #endregion
        public IReadOnlySetList<IConditionGetter> Conditions { get; private set; } = EmptySetList<ConditionBinaryWrapper>.Instance;
        #region Entry
        private int? _EntryLocation;
        public bool Entry_IsSet => _EntryLocation.HasValue;
        public String Entry => _EntryLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _EntryLocation.Value, _package.Meta)) : default;
        #endregion
        #region ResultScript
        public IScriptFieldsGetter ResultScript { get; private set; }
        public bool ResultScript_IsSet => ResultScript != null;
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected LogEntryBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static LogEntryBinaryWrapper LogEntryFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new LogEntryBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x54445351: // QSDT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.Flags) return TryGet<int?>.Failure;
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.Flags);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.Conditions) return TryGet<int?>.Failure;
                    this.Conditions = BinaryWrapperSetList<ConditionBinaryWrapper>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => ConditionBinaryWrapper.ConditionFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.Conditions);
                }
                case 0x4D414E43: // CNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.Entry) return TryGet<int?>.Failure;
                    _EntryLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.Entry);
                }
                case 0x52484353: // SCHR
                case 0x44484353: // SCHD
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.ResultScript) return TryGet<int?>.Failure;
                    this.ResultScript = ScriptFieldsBinaryWrapper.ScriptFieldsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.ResultScript);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

