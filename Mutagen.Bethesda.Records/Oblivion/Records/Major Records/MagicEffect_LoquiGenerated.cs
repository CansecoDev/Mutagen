/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class MagicEffect :
        OblivionMajorRecord,
        IMagicEffectInternal,
        ILoquiObjectSetter<MagicEffect>,
        INamed,
        IEquatable<MagicEffect>,
        IEqualsMask
    {
        #region Ctor
        protected MagicEffect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)MagicEffect_FieldIndex.Name];
            set => _hasBeenSetTracker[(int)MagicEffect_FieldIndex.Name] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool IMagicEffectGetter.Name_IsSet => Name_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String _Name;
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String IMagicEffectGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            _Name = value;
            _hasBeenSetTracker[(int)MagicEffect_FieldIndex.Name] = markSet;
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Description
        public bool Description_IsSet
        {
            get => _hasBeenSetTracker[(int)MagicEffect_FieldIndex.Description];
            set => _hasBeenSetTracker[(int)MagicEffect_FieldIndex.Description] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool IMagicEffectGetter.Description_IsSet => Description_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String _Description;
        public String Description
        {
            get => this._Description;
            set => Description_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String IMagicEffectGetter.Description => this.Description;
        public void Description_Set(
            String value,
            bool markSet = true)
        {
            _Description = value;
            _hasBeenSetTracker[(int)MagicEffect_FieldIndex.Description] = markSet;
        }
        public void Description_Unset()
        {
            this.Description_Set(default(String), false);
        }
        #endregion
        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)MagicEffect_FieldIndex.Icon];
            set => _hasBeenSetTracker[(int)MagicEffect_FieldIndex.Icon] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool IMagicEffectGetter.Icon_IsSet => Icon_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String _Icon;
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String IMagicEffectGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            _Icon = value;
            _hasBeenSetTracker[(int)MagicEffect_FieldIndex.Icon] = markSet;
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)MagicEffect_FieldIndex.Model];
            set => _hasBeenSetTracker[(int)MagicEffect_FieldIndex.Model] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool IMagicEffectGetter.Model_IsSet => Model_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model _Model;
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool hasBeenSet = true)
        {
            _Model = value;
            _hasBeenSetTracker[(int)MagicEffect_FieldIndex.Model] = hasBeenSet;
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter IMagicEffectGetter.Model => this.Model;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MagicEffect.MagicFlag _Flags;
        public MagicEffect.MagicFlag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region BaseCost
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _BaseCost;
        public Single BaseCost
        {
            get => this._BaseCost;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._BaseCost = value;
            }
        }
        #endregion
        #region Unused
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _Unused = new byte[4];
        public Byte[] Unused
        {
            get => _Unused;
            set => this._Unused = value ?? new byte[4];
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IMagicEffectGetter.Unused => this.Unused;
        #endregion
        #region MagicSchool
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MagicSchool _MagicSchool;
        public MagicSchool MagicSchool
        {
            get => this._MagicSchool;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._MagicSchool = value;
            }
        }
        #endregion
        #region Resistance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Resistance _Resistance;
        public Resistance Resistance
        {
            get => this._Resistance;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Resistance = value;
            }
        }
        #endregion
        #region CounterEffectCount
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _CounterEffectCount;
        public UInt32 CounterEffectCount
        {
            get => this._CounterEffectCount;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._CounterEffectCount = value;
            }
        }
        #endregion
        #region Light
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDLink<Light> _Light = new FormIDLink<Light>();
        public IFormIDLink<Light> Light => this._Light;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLinkGetter<ILightGetter> IMagicEffectGetter.Light => this.Light;
        #endregion
        #region ProjectileSpeed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ProjectileSpeed;
        public Single ProjectileSpeed
        {
            get => this._ProjectileSpeed;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._ProjectileSpeed = value;
            }
        }
        #endregion
        #region EffectShader
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDLink<EffectShader> _EffectShader = new FormIDLink<EffectShader>();
        public IFormIDLink<EffectShader> EffectShader => this._EffectShader;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLinkGetter<IEffectShaderGetter> IMagicEffectGetter.EffectShader => this.EffectShader;
        #endregion
        #region SubData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MagicEffectSubData _SubData = new MagicEffectSubData();
        public MagicEffectSubData SubData
        {
            get => _SubData;
            set => _SubData = value ?? new MagicEffectSubData();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMagicEffectSubDataGetter IMagicEffectGetter.SubData => _SubData;
        #endregion
        #region CounterEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IEDIDLink<MagicEffect>> _CounterEffects = new SetList<IEDIDLink<MagicEffect>>();
        public ISetList<IEDIDLink<MagicEffect>> CounterEffects => _CounterEffects;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IEDIDLink<MagicEffect>> IMagicEffect.CounterEffects => _CounterEffects;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IEDIDLinkGetter<IMagicEffectGetter>> IMagicEffectGetter.CounterEffects => _CounterEffects;
        #endregion

        #endregion
        #region DATADataTypeState
        public MagicEffect.DATADataType DATADataTypeState { get; set; }
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            MagicEffectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IMagicEffectGetter rhs)) return false;
            return ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(MagicEffect obj)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => MagicEffectXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((MagicEffectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new MagicEffect CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            MagicEffect_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static MagicEffect CreateFromXml(
            XElement node,
            out MagicEffect_ErrorMask errorMask,
            bool doMasks = true,
            MagicEffect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = MagicEffect_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static MagicEffect CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new MagicEffect() : null;
                    break;
                default:
                    break;
            }
            var ret = new MagicEffect();
            ((MagicEffectSetterCommon)((IMagicEffectGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static MagicEffect CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            MagicEffect_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static MagicEffect CreateFromXml(
            string path,
            out MagicEffect_ErrorMask errorMask,
            MagicEffect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MagicEffect CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            MagicEffect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static MagicEffect CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            MagicEffect_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static MagicEffect CreateFromXml(
            Stream stream,
            out MagicEffect_ErrorMask errorMask,
            MagicEffect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MagicEffect CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            MagicEffect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((MagicEffect_FieldIndex)index)
            {
                case MagicEffect_FieldIndex.Name:
                case MagicEffect_FieldIndex.Description:
                case MagicEffect_FieldIndex.Icon:
                case MagicEffect_FieldIndex.Model:
                    return _hasBeenSetTracker[index];
                case MagicEffect_FieldIndex.CounterEffects:
                    return CounterEffects.HasBeenSet;
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.SubData:
                case MagicEffect_FieldIndex.DATADataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = MagicEffect_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1,
            Break0 = 2
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => MagicEffectCommon.Instance.GetLinks(this);
        public MagicEffect(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public MagicEffect(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MagicEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((MagicEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new MagicEffect CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static MagicEffect CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new MagicEffect();
            ((MagicEffectSetterCommon)((IMagicEffectGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMagicEffectGetter)rhs, include);

        void IClearable.Clear()
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static new MagicEffect GetNew()
        {
            return new MagicEffect();
        }

    }
    #endregion

    #region Interface
    public partial interface IMagicEffect :
        IMagicEffectGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IMagicEffectInternal>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new String Description { get; set; }
        new bool Description_IsSet { get; set; }
        void Description_Set(String value, bool hasBeenSet = true);
        void Description_Unset();

        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String value, bool hasBeenSet = true);
        void Icon_Unset();

        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model value, bool hasBeenSet = true);
        void Model_Unset();

        new MagicEffect.MagicFlag Flags { get; set; }

        new Single BaseCost { get; set; }

        new Byte[] Unused { get; set; }

        new MagicSchool MagicSchool { get; set; }

        new Resistance Resistance { get; set; }

        new UInt32 CounterEffectCount { get; set; }

        new IFormIDLink<Light> Light { get; }
        new Single ProjectileSpeed { get; set; }

        new IFormIDLink<EffectShader> EffectShader { get; }
        new MagicEffectSubData SubData { get; set; }

        new ISetList<IEDIDLink<MagicEffect>> CounterEffects { get; }
        new MagicEffect.DATADataType DATADataTypeState { get; set; }

    }

    public partial interface IMagicEffectInternal :
        IOblivionMajorRecordInternal,
        IMagicEffect,
        IMagicEffectGetter
    {
    }

    public partial interface IMagicEffectGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IMagicEffectGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Description
        String Description { get; }
        bool Description_IsSet { get; }

        #endregion
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region Model
        IModelGetter Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Flags
        MagicEffect.MagicFlag Flags { get; }

        #endregion
        #region BaseCost
        Single BaseCost { get; }

        #endregion
        #region Unused
        ReadOnlySpan<Byte> Unused { get; }

        #endregion
        #region MagicSchool
        MagicSchool MagicSchool { get; }

        #endregion
        #region Resistance
        Resistance Resistance { get; }

        #endregion
        #region CounterEffectCount
        UInt32 CounterEffectCount { get; }

        #endregion
        #region Light
        IFormIDLinkGetter<ILightGetter> Light { get; }
        #endregion
        #region ProjectileSpeed
        Single ProjectileSpeed { get; }

        #endregion
        #region EffectShader
        IFormIDLinkGetter<IEffectShaderGetter> EffectShader { get; }
        #endregion
        #region SubData
        IMagicEffectSubDataGetter SubData { get; }
        #endregion
        #region CounterEffects
        IReadOnlySetList<IEDIDLinkGetter<IMagicEffectGetter>> CounterEffects { get; }
        #endregion
        #region DATADataTypeState
        MagicEffect.DATADataType DATADataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class MagicEffectMixIn
    {
        public static void Clear(this IMagicEffectInternal item)
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static MagicEffect_Mask<bool> GetEqualsMask(
            this IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMagicEffectGetter item,
            string name = null,
            MagicEffect_Mask<bool> printMask = null)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMagicEffectGetter item,
            FileGeneration fg,
            string name = null,
            MagicEffect_Mask<bool> printMask = null)
        {
            ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IMagicEffectGetter item,
            MagicEffect_Mask<bool?> checkMask)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static MagicEffect_Mask<bool> GetHasBeenSetMask(this IMagicEffectGetter item)
        {
            var ret = new MagicEffect_Mask<bool>();
            ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IMagicEffectGetter item,
            IMagicEffectGetter rhs)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IMagicEffectInternal lhs,
            IMagicEffectGetter rhs,
            MagicEffect_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IMagicEffectInternal lhs,
            IMagicEffectGetter rhs,
            out MagicEffect_ErrorMask errorMask,
            MagicEffect_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = MagicEffect_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IMagicEffectInternal lhs,
            IMagicEffectGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static MagicEffect DeepCopy(
            this IMagicEffectGetter item,
            MagicEffect_TranslationMask copyMask = null)
        {
            return ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MagicEffect DeepCopy(
            this IMagicEffectGetter item,
            out MagicEffect_ErrorMask errorMask,
            MagicEffect_TranslationMask copyMask = null)
        {
            return ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MagicEffect DeepCopy(
            this IMagicEffectGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            MagicEffect_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            XElement node,
            out MagicEffect_ErrorMask errorMask,
            bool doMasks = true,
            MagicEffect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = MagicEffect_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            MagicEffect_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            string path,
            out MagicEffect_ErrorMask errorMask,
            MagicEffect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            MagicEffect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            MagicEffect_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            Stream stream,
            out MagicEffect_ErrorMask errorMask,
            MagicEffect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            MagicEffect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IMagicEffectInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IMagicEffectInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum MagicEffect_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Description = 6,
        Icon = 7,
        Model = 8,
        Flags = 9,
        BaseCost = 10,
        Unused = 11,
        MagicSchool = 12,
        Resistance = 13,
        CounterEffectCount = 14,
        Light = 15,
        ProjectileSpeed = 16,
        EffectShader = 17,
        SubData = 18,
        CounterEffects = 19,
        DATADataTypeState = 20,
    }
    #endregion

    #region Registration
    public partial class MagicEffect_Registration : ILoquiRegistration
    {
        public static readonly MagicEffect_Registration Instance = new MagicEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 44,
            version: 0);

        public const string GUID = "57a9087c-140b-4152-8b1e-0508d36a2df4";

        public const ushort AdditionalFieldCount = 16;

        public const ushort FieldCount = 21;

        public static readonly Type MaskType = typeof(MagicEffect_Mask<>);

        public static readonly Type ErrorMaskType = typeof(MagicEffect_ErrorMask);

        public static readonly Type ClassType = typeof(MagicEffect);

        public static readonly Type GetterType = typeof(IMagicEffectGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMagicEffect);

        public static readonly Type InternalSetterType = typeof(IMagicEffectInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.MagicEffect";

        public const string Name = "MagicEffect";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)MagicEffect_FieldIndex.Name;
                case "DESCRIPTION":
                    return (ushort)MagicEffect_FieldIndex.Description;
                case "ICON":
                    return (ushort)MagicEffect_FieldIndex.Icon;
                case "MODEL":
                    return (ushort)MagicEffect_FieldIndex.Model;
                case "FLAGS":
                    return (ushort)MagicEffect_FieldIndex.Flags;
                case "BASECOST":
                    return (ushort)MagicEffect_FieldIndex.BaseCost;
                case "UNUSED":
                    return (ushort)MagicEffect_FieldIndex.Unused;
                case "MAGICSCHOOL":
                    return (ushort)MagicEffect_FieldIndex.MagicSchool;
                case "RESISTANCE":
                    return (ushort)MagicEffect_FieldIndex.Resistance;
                case "COUNTEREFFECTCOUNT":
                    return (ushort)MagicEffect_FieldIndex.CounterEffectCount;
                case "LIGHT":
                    return (ushort)MagicEffect_FieldIndex.Light;
                case "PROJECTILESPEED":
                    return (ushort)MagicEffect_FieldIndex.ProjectileSpeed;
                case "EFFECTSHADER":
                    return (ushort)MagicEffect_FieldIndex.EffectShader;
                case "SUBDATA":
                    return (ushort)MagicEffect_FieldIndex.SubData;
                case "COUNTEREFFECTS":
                    return (ushort)MagicEffect_FieldIndex.CounterEffects;
                case "DATADATATYPESTATE":
                    return (ushort)MagicEffect_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.CounterEffects:
                    return true;
                case MagicEffect_FieldIndex.Name:
                case MagicEffect_FieldIndex.Description:
                case MagicEffect_FieldIndex.Icon:
                case MagicEffect_FieldIndex.Model:
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.SubData:
                case MagicEffect_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Model:
                case MagicEffect_FieldIndex.SubData:
                    return true;
                case MagicEffect_FieldIndex.Name:
                case MagicEffect_FieldIndex.Description:
                case MagicEffect_FieldIndex.Icon:
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.CounterEffects:
                case MagicEffect_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Name:
                case MagicEffect_FieldIndex.Description:
                case MagicEffect_FieldIndex.Icon:
                case MagicEffect_FieldIndex.Model:
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.SubData:
                case MagicEffect_FieldIndex.CounterEffects:
                case MagicEffect_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Name:
                    return "Name";
                case MagicEffect_FieldIndex.Description:
                    return "Description";
                case MagicEffect_FieldIndex.Icon:
                    return "Icon";
                case MagicEffect_FieldIndex.Model:
                    return "Model";
                case MagicEffect_FieldIndex.Flags:
                    return "Flags";
                case MagicEffect_FieldIndex.BaseCost:
                    return "BaseCost";
                case MagicEffect_FieldIndex.Unused:
                    return "Unused";
                case MagicEffect_FieldIndex.MagicSchool:
                    return "MagicSchool";
                case MagicEffect_FieldIndex.Resistance:
                    return "Resistance";
                case MagicEffect_FieldIndex.CounterEffectCount:
                    return "CounterEffectCount";
                case MagicEffect_FieldIndex.Light:
                    return "Light";
                case MagicEffect_FieldIndex.ProjectileSpeed:
                    return "ProjectileSpeed";
                case MagicEffect_FieldIndex.EffectShader:
                    return "EffectShader";
                case MagicEffect_FieldIndex.SubData:
                    return "SubData";
                case MagicEffect_FieldIndex.CounterEffects:
                    return "CounterEffects";
                case MagicEffect_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Name:
                case MagicEffect_FieldIndex.Description:
                case MagicEffect_FieldIndex.Icon:
                case MagicEffect_FieldIndex.Model:
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.SubData:
                case MagicEffect_FieldIndex.CounterEffects:
                case MagicEffect_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Name:
                case MagicEffect_FieldIndex.Description:
                case MagicEffect_FieldIndex.Icon:
                case MagicEffect_FieldIndex.Model:
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.SubData:
                case MagicEffect_FieldIndex.CounterEffects:
                case MagicEffect_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Name:
                    return typeof(String);
                case MagicEffect_FieldIndex.Description:
                    return typeof(String);
                case MagicEffect_FieldIndex.Icon:
                    return typeof(String);
                case MagicEffect_FieldIndex.Model:
                    return typeof(Model);
                case MagicEffect_FieldIndex.Flags:
                    return typeof(MagicEffect.MagicFlag);
                case MagicEffect_FieldIndex.BaseCost:
                    return typeof(Single);
                case MagicEffect_FieldIndex.Unused:
                    return typeof(Byte[]);
                case MagicEffect_FieldIndex.MagicSchool:
                    return typeof(MagicSchool);
                case MagicEffect_FieldIndex.Resistance:
                    return typeof(Resistance);
                case MagicEffect_FieldIndex.CounterEffectCount:
                    return typeof(UInt32);
                case MagicEffect_FieldIndex.Light:
                    return typeof(IFormIDLink<Light>);
                case MagicEffect_FieldIndex.ProjectileSpeed:
                    return typeof(Single);
                case MagicEffect_FieldIndex.EffectShader:
                    return typeof(IFormIDLink<EffectShader>);
                case MagicEffect_FieldIndex.SubData:
                    return typeof(MagicEffectSubData);
                case MagicEffect_FieldIndex.CounterEffects:
                    return typeof(ISetList<IEDIDLink<MagicEffect>>);
                case MagicEffect_FieldIndex.DATADataTypeState:
                    return typeof(MagicEffect.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(MagicEffectXmlWriteTranslation);
        public static readonly RecordType MGEF_HEADER = new RecordType("MGEF");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType ESCE_HEADER = new RecordType("ESCE");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = MGEF_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        public static readonly Type BinaryWriteTranslation = typeof(MagicEffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class MagicEffectSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly MagicEffectSetterCommon Instance = new MagicEffectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMagicEffectInternal item)
        {
            ClearPartial();
            item.Name_Unset();
            item.Description_Unset();
            item.Icon_Unset();
            item.Model_Unset();
            item.Flags = default(MagicEffect.MagicFlag);
            item.BaseCost = default(Single);
            item.Unused = default(Byte[]);
            item.MagicSchool = default(MagicSchool);
            item.Resistance = default(Resistance);
            item.CounterEffectCount = default(UInt32);
            item.Light.Unset();
            item.ProjectileSpeed = default(Single);
            item.EffectShader.Unset();
            item.SubData = default(MagicEffectSubData);
            item.CounterEffects.Unset();
            item.DATADataTypeState = default(MagicEffect.DATADataType);
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IMagicEffectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IMagicEffectInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IMagicEffectInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= MagicEffect.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IMagicEffectInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                item.DATADataTypeState |= MagicEffect.DATADataType.Break0;
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    MagicEffectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => MagicEffect_Registration.MGEF_HEADER;
        protected static void FillBinaryStructs(
            IMagicEffectInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IMagicEffectInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Name);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Description);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Icon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Icon);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Model);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = MagicEffect.DATADataType.Has;
                    }
                    item.Flags = EnumBinaryTranslation<MagicEffect.MagicFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.BaseCost = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Unused = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.MagicSchool = EnumBinaryTranslation<MagicSchool>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Resistance = EnumBinaryTranslation<Resistance>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.CounterEffectCount = dataFrame.ReadUInt32();
                    item.Light.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        masterReferences: masterReferences,
                        defaultVal: FormKey.NULL);
                    item.ProjectileSpeed = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.EffectShader.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        masterReferences: masterReferences,
                        defaultVal: FormKey.NULL);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= MagicEffect.DATADataType.Break0;
                        return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.EffectShader);
                    }
                    item.SubData = Mutagen.Bethesda.Oblivion.MagicEffectSubData.CreateFromBinary(
                        frame: dataFrame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.SubData);
                }
                case 0x45435345: // ESCE
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IEDIDLink<MagicEffect>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.CounterEffects,
                        transl: RecordTypeBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.CounterEffects);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IMagicEffectInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IMagicEffectInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class MagicEffectCommon : OblivionMajorRecordCommon
    {
        public new static readonly MagicEffectCommon Instance = new MagicEffectCommon();

        public MagicEffect_Mask<bool> GetEqualsMask(
            IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MagicEffect_Mask<bool>();
            ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            MagicEffect_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Description = item.Description_IsSet == rhs.Description_IsSet && string.Equals(item.Description, rhs.Description);
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && string.Equals(item.Icon, rhs.Icon);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.BaseCost = item.BaseCost.EqualsWithin(rhs.BaseCost);
            ret.Unused = MemoryExtensions.SequenceEqual(item.Unused, rhs.Unused);
            ret.MagicSchool = item.MagicSchool == rhs.MagicSchool;
            ret.Resistance = item.Resistance == rhs.Resistance;
            ret.CounterEffectCount = item.CounterEffectCount == rhs.CounterEffectCount;
            ret.Light = object.Equals(item.Light, rhs.Light);
            ret.ProjectileSpeed = item.ProjectileSpeed.EqualsWithin(rhs.ProjectileSpeed);
            ret.EffectShader = object.Equals(item.EffectShader, rhs.EffectShader);
            ret.SubData = MaskItemExt.Factory(item.SubData.GetEqualsMask(rhs.SubData, include), include);
            ret.CounterEffects = item.CounterEffects.CollectionEqualsHelper(
                rhs.CounterEffects,
                (l, r) => object.Equals(l, r),
                include);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IMagicEffectGetter item,
            string name = null,
            MagicEffect_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMagicEffectGetter item,
            FileGeneration fg,
            string name = null,
            MagicEffect_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MagicEffect =>");
            }
            else
            {
                fg.AppendLine($"{name} (MagicEffect) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMagicEffectGetter item,
            FileGeneration fg,
            MagicEffect_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendLine($"Description => {item.Description}");
            }
            if (printMask?.Icon ?? true)
            {
                fg.AppendLine($"Icon => {item.Icon}");
            }
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.BaseCost ?? true)
            {
                fg.AppendLine($"BaseCost => {item.BaseCost}");
            }
            if (printMask?.Unused ?? true)
            {
                fg.AppendLine($"Unused => {SpanExt.ToHexString(item.Unused)}");
            }
            if (printMask?.MagicSchool ?? true)
            {
                fg.AppendLine($"MagicSchool => {item.MagicSchool}");
            }
            if (printMask?.Resistance ?? true)
            {
                fg.AppendLine($"Resistance => {item.Resistance}");
            }
            if (printMask?.CounterEffectCount ?? true)
            {
                fg.AppendLine($"CounterEffectCount => {item.CounterEffectCount}");
            }
            if (printMask?.Light ?? true)
            {
                fg.AppendLine($"Light => {item.Light}");
            }
            if (printMask?.ProjectileSpeed ?? true)
            {
                fg.AppendLine($"ProjectileSpeed => {item.ProjectileSpeed}");
            }
            if (printMask?.EffectShader ?? true)
            {
                fg.AppendLine($"EffectShader => {item.EffectShader}");
            }
            if (printMask?.SubData?.Overall ?? true)
            {
                item.SubData?.ToString(fg, "SubData");
            }
            if (printMask?.CounterEffects?.Overall ?? true)
            {
                fg.AppendLine("CounterEffects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.CounterEffects)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendLine($"DATADataTypeState => {item.DATADataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            IMagicEffectGetter item,
            MagicEffect_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_IsSet) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.CounterEffects.Overall.HasValue && checkMask.CounterEffects.Overall.Value != item.CounterEffects.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IMagicEffectGetter item,
            MagicEffect_Mask<bool> mask)
        {
            mask.Name = item.Name_IsSet;
            mask.Description = item.Description_IsSet;
            mask.Icon = item.Icon_IsSet;
            mask.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, item.Model.GetHasBeenSetMask());
            mask.Flags = true;
            mask.BaseCost = true;
            mask.Unused = true;
            mask.MagicSchool = true;
            mask.Resistance = true;
            mask.CounterEffectCount = true;
            mask.Light = true;
            mask.ProjectileSpeed = true;
            mask.EffectShader = true;
            mask.SubData = new MaskItem<bool, MagicEffectSubData_Mask<bool>>(true, item.SubData.GetHasBeenSetMask());
            mask.CounterEffects = new MaskItem<bool, IEnumerable<(int, bool)>>(item.CounterEffects.HasBeenSet, null);
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static MagicEffect_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MagicEffect_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (MagicEffect_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (MagicEffect_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (MagicEffect_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (MagicEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new MagicEffect_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (MagicEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMagicEffectGetter lhs,
            IMagicEffectGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Name_IsSet != rhs.Name_IsSet) return false;
            if (lhs.Name_IsSet)
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if (lhs.Description_IsSet != rhs.Description_IsSet) return false;
            if (lhs.Description_IsSet)
            {
                if (!string.Equals(lhs.Description, rhs.Description)) return false;
            }
            if (lhs.Icon_IsSet != rhs.Icon_IsSet) return false;
            if (lhs.Icon_IsSet)
            {
                if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            }
            if (lhs.Model_IsSet != rhs.Model_IsSet) return false;
            if (lhs.Model_IsSet)
            {
                if (!object.Equals(lhs.Model, rhs.Model)) return false;
            }
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.BaseCost.EqualsWithin(rhs.BaseCost)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unused, rhs.Unused)) return false;
            if (lhs.MagicSchool != rhs.MagicSchool) return false;
            if (lhs.Resistance != rhs.Resistance) return false;
            if (lhs.CounterEffectCount != rhs.CounterEffectCount) return false;
            if (!lhs.Light.Equals(rhs.Light)) return false;
            if (!lhs.ProjectileSpeed.EqualsWithin(rhs.ProjectileSpeed)) return false;
            if (!lhs.EffectShader.Equals(rhs.EffectShader)) return false;
            if (!object.Equals(lhs.SubData, rhs.SubData)) return false;
            if (lhs.CounterEffects.HasBeenSet != rhs.CounterEffects.HasBeenSet) return false;
            if (lhs.CounterEffects.HasBeenSet)
            {
                if (!lhs.CounterEffects.SequenceEqual(rhs.CounterEffects)) return false;
            }
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter lhs,
            IOblivionMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IMagicEffectGetter)lhs,
                rhs: rhs as IMagicEffectGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IMagicEffectGetter)lhs,
                rhs: rhs as IMagicEffectGetter);
        }
        
        public virtual int GetHashCode(IMagicEffectGetter item)
        {
            int ret = 0;
            if (item.Name_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            }
            if (item.Description_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Description).CombineHashCode(ret);
            }
            if (item.Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Icon).CombineHashCode(ret);
            }
            if (item.Model_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Model).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BaseCost).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Unused).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MagicSchool).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Resistance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CounterEffectCount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Light).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ProjectileSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EffectShader).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SubData).CombineHashCode(ret);
            if (item.CounterEffects.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.CounterEffects).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IMagicEffectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IMagicEffectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return MagicEffect.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IMagicEffectGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Light;
            yield return obj.EffectShader;
            foreach (var item in obj.SubData.Links)
            {
                yield return item;
            }
            foreach (var item in obj.CounterEffects)
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(MagicEffect obj, MagicEffect rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new MagicEffect(getNextFormKey());
            ret.DeepCopyFieldsFrom((MagicEffect)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (MagicEffect)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class MagicEffectSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly MagicEffectSetterTranslationCommon Instance = new MagicEffectSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IMagicEffectInternal item,
            IMagicEffectGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyFieldsFrom(
            IMagicEffect item,
            IMagicEffectGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Name) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Name);
                try
                {
                    if (rhs.Name_IsSet)
                    {
                        item.Name = rhs.Name;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Description) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Description);
                try
                {
                    if (rhs.Description_IsSet)
                    {
                        item.Description = rhs.Description;
                    }
                    else
                    {
                        item.Description_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Icon) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Icon);
                try
                {
                    if (rhs.Icon_IsSet)
                    {
                        item.Icon = rhs.Icon;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Model);
                try
                {
                    if(rhs.Model_IsSet)
                    {
                        item.Model = rhs.Model.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.BaseCost) ?? true))
            {
                item.BaseCost = rhs.BaseCost;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Unused) ?? true))
            {
                item.Unused = rhs.Unused.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.MagicSchool) ?? true))
            {
                item.MagicSchool = rhs.MagicSchool;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Resistance) ?? true))
            {
                item.Resistance = rhs.Resistance;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CounterEffectCount) ?? true))
            {
                item.CounterEffectCount = rhs.CounterEffectCount;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Light) ?? true))
            {
                item.Light.FormKey = rhs.Light.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ProjectileSpeed) ?? true))
            {
                item.ProjectileSpeed = rhs.ProjectileSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.EffectShader) ?? true))
            {
                item.EffectShader.FormKey = rhs.EffectShader.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.SubData) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.SubData);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.SubData) ?? true))
                    {
                        if (rhs.SubData == null)
                        {
                            item.SubData = null;
                        }
                        else
                        {
                            item.SubData = rhs.SubData.DeepCopy(
                                copyMask: copyMask?.GetSubCrystal((int)MagicEffect_FieldIndex.SubData),
                                errorMask: errorMask);
                        }
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CounterEffects) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.CounterEffects);
                try
                {
                    if (rhs.CounterEffects.HasBeenSet)
                    {
                        item.CounterEffects.SetTo(
                            rhs.CounterEffects,
                            (r) => new EDIDLink<MagicEffect>(r.EDID));
                    }
                    else
                    {
                        item.CounterEffects.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IMagicEffectInternal)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IMagicEffect)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IMagicEffectInternal)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IMagicEffect)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public MagicEffect DeepCopy(
            IMagicEffectGetter item,
            MagicEffect_TranslationMask copyMask = null)
        {
            MagicEffect ret = (MagicEffect)((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public MagicEffect DeepCopy(
            IMagicEffectGetter item,
            out MagicEffect_ErrorMask errorMask,
            MagicEffect_TranslationMask copyMask = null)
        {
            MagicEffect ret = (MagicEffect)((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public MagicEffect DeepCopy(
            IMagicEffectGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            MagicEffect ret = (MagicEffect)((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class MagicEffect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffect_Registration.Instance;
        public new static MagicEffect_Registration Registration => MagicEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MagicEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return MagicEffectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MagicEffectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MagicEffectXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static MagicEffectXmlWriteTranslation Instance = new MagicEffectXmlWriteTranslation();

        public static void WriteToNodeXml(
            IMagicEffectGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)MagicEffect_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Description_IsSet
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)MagicEffect_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)MagicEffect_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Model) ?? true))
            {
                var loquiItem = item.Model;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)MagicEffect_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Model));
            }
            if (item.DATADataTypeState.HasFlag(MagicEffect.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<MagicEffect.MagicFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)MagicEffect_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.BaseCost) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BaseCost),
                        item: item.BaseCost,
                        fieldIndex: (int)MagicEffect_FieldIndex.BaseCost,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Unused) ?? true))
                {
                    ByteArrayXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Unused),
                        item: item.Unused,
                        fieldIndex: (int)MagicEffect_FieldIndex.Unused,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.MagicSchool) ?? true))
                {
                    EnumXmlTranslation<MagicSchool>.Instance.Write(
                        node: node,
                        name: nameof(item.MagicSchool),
                        item: item.MagicSchool,
                        fieldIndex: (int)MagicEffect_FieldIndex.MagicSchool,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Resistance) ?? true))
                {
                    EnumXmlTranslation<Resistance>.Instance.Write(
                        node: node,
                        name: nameof(item.Resistance),
                        item: item.Resistance,
                        fieldIndex: (int)MagicEffect_FieldIndex.Resistance,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CounterEffectCount) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.CounterEffectCount),
                        item: item.CounterEffectCount,
                        fieldIndex: (int)MagicEffect_FieldIndex.CounterEffectCount,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Light) ?? true))
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Light),
                        item: item.Light?.FormKey,
                        fieldIndex: (int)MagicEffect_FieldIndex.Light,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ProjectileSpeed) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ProjectileSpeed),
                        item: item.ProjectileSpeed,
                        fieldIndex: (int)MagicEffect_FieldIndex.ProjectileSpeed,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.EffectShader) ?? true))
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EffectShader),
                        item: item.EffectShader?.FormKey,
                        fieldIndex: (int)MagicEffect_FieldIndex.EffectShader,
                        errorMask: errorMask);
                }
                if (!item.DATADataTypeState.HasFlag(MagicEffect.DATADataType.Break0))
                {
                    if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.SubData) ?? true))
                    {
                        var loquiItem = item.SubData;
                        ((MagicEffectSubDataXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: node,
                            name: nameof(item.SubData),
                            fieldIndex: (int)MagicEffect_FieldIndex.SubData,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.SubData));
                    }
                }
                else
                {
                    node.Add(new XElement("HasDATADataType"));
                }
            }
            if (item.CounterEffects.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CounterEffects) ?? true))
            {
                ListXmlTranslation<IEDIDLinkGetter<IMagicEffectGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.CounterEffects),
                    item: item.CounterEffects,
                    fieldIndex: (int)MagicEffect_FieldIndex.CounterEffects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.CounterEffects),
                    transl: (XElement subNode, IEDIDLinkGetter<IMagicEffectGetter> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        RecordTypeXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.EDID,
                            errorMask: listSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<MagicEffect.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)MagicEffect_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IMagicEffectGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.MagicEffect");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.MagicEffect");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class MagicEffectXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static MagicEffectXmlCreateTranslation Instance = new MagicEffectXmlCreateTranslation();

        public static void FillPublicXml(
            IMagicEffectInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MagicEffectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IMagicEffectInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffect_FieldIndex.Name);
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffect_FieldIndex.Description);
                        item.Description = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffect_FieldIndex.Icon);
                        item.Icon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffect_FieldIndex.Model);
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffect_FieldIndex.Flags);
                        item.Flags = EnumXmlTranslation<MagicEffect.MagicFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= MagicEffect.DATADataType.Has;
                    break;
                case "BaseCost":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffect_FieldIndex.BaseCost);
                        item.BaseCost = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unused":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffect_FieldIndex.Unused);
                        item.Unused = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MagicSchool":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffect_FieldIndex.MagicSchool);
                        item.MagicSchool = EnumXmlTranslation<MagicSchool>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Resistance":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffect_FieldIndex.Resistance);
                        item.Resistance = EnumXmlTranslation<Resistance>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CounterEffectCount":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffect_FieldIndex.CounterEffectCount);
                        item.CounterEffectCount = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Light":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffect_FieldIndex.Light);
                        item.Light.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            defaultVal: FormKey.NULL);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ProjectileSpeed":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffect_FieldIndex.ProjectileSpeed);
                        item.ProjectileSpeed = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EffectShader":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffect_FieldIndex.EffectShader);
                        item.EffectShader.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            defaultVal: FormKey.NULL);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SubData":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffect_FieldIndex.SubData);
                        item.SubData = LoquiXmlTranslation<MagicEffectSubData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.SubData));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~MagicEffect.DATADataType.Break0;
                    break;
                case "CounterEffects":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffect_FieldIndex.CounterEffects);
                        if (ListXmlTranslation<IEDIDLink<MagicEffect>>.Instance.Parse(
                            node: node,
                            enumer: out var CounterEffectsItem,
                            transl: RecordTypeXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.CounterEffects.SetTo(CounterEffectsItem);
                        }
                        else
                        {
                            item.CounterEffects.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffect_FieldIndex.DATADataTypeState);
                        item.DATADataTypeState = EnumXmlTranslation<MagicEffect.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class MagicEffectXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IMagicEffectGetter item,
            XElement node,
            out MagicEffect_ErrorMask errorMask,
            bool doMasks = true,
            MagicEffect_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((MagicEffectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MagicEffect_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IMagicEffectGetter item,
            string path,
            out MagicEffect_ErrorMask errorMask,
            MagicEffect_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMagicEffectGetter item,
            Stream stream,
            out MagicEffect_ErrorMask errorMask,
            MagicEffect_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class MagicEffect_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<MagicEffect_Mask<T>>
    {
        #region Ctors
        public MagicEffect_Mask()
        {
        }

        public MagicEffect_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Description = initialValue;
            this.Icon = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Flags = initialValue;
            this.BaseCost = initialValue;
            this.Unused = initialValue;
            this.MagicSchool = initialValue;
            this.Resistance = initialValue;
            this.CounterEffectCount = initialValue;
            this.Light = initialValue;
            this.ProjectileSpeed = initialValue;
            this.EffectShader = initialValue;
            this.SubData = new MaskItem<T, MagicEffectSubData_Mask<T>>(initialValue, new MagicEffectSubData_Mask<T>(initialValue));
            this.CounterEffects = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.DATADataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        public T Description;
        public T Icon;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Flags;
        public T BaseCost;
        public T Unused;
        public T MagicSchool;
        public T Resistance;
        public T CounterEffectCount;
        public T Light;
        public T ProjectileSpeed;
        public T EffectShader;
        public MaskItem<T, MagicEffectSubData_Mask<T>> SubData { get; set; }
        public MaskItem<T, IEnumerable<(int Index, T Value)>> CounterEffects;
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is MagicEffect_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MagicEffect_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.BaseCost, rhs.BaseCost)) return false;
            if (!object.Equals(this.Unused, rhs.Unused)) return false;
            if (!object.Equals(this.MagicSchool, rhs.MagicSchool)) return false;
            if (!object.Equals(this.Resistance, rhs.Resistance)) return false;
            if (!object.Equals(this.CounterEffectCount, rhs.CounterEffectCount)) return false;
            if (!object.Equals(this.Light, rhs.Light)) return false;
            if (!object.Equals(this.ProjectileSpeed, rhs.ProjectileSpeed)) return false;
            if (!object.Equals(this.EffectShader, rhs.EffectShader)) return false;
            if (!object.Equals(this.SubData, rhs.SubData)) return false;
            if (!object.Equals(this.CounterEffects, rhs.CounterEffects)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.BaseCost?.GetHashCode());
            ret = ret.CombineHashCode(this.Unused?.GetHashCode());
            ret = ret.CombineHashCode(this.MagicSchool?.GetHashCode());
            ret = ret.CombineHashCode(this.Resistance?.GetHashCode());
            ret = ret.CombineHashCode(this.CounterEffectCount?.GetHashCode());
            ret = ret.CombineHashCode(this.Light?.GetHashCode());
            ret = ret.CombineHashCode(this.ProjectileSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.EffectShader?.GetHashCode());
            ret = ret.CombineHashCode(this.SubData?.GetHashCode());
            ret = ret.CombineHashCode(this.CounterEffects?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (!eval(this.Description)) return false;
            if (!eval(this.Icon)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Flags)) return false;
            if (!eval(this.BaseCost)) return false;
            if (!eval(this.Unused)) return false;
            if (!eval(this.MagicSchool)) return false;
            if (!eval(this.Resistance)) return false;
            if (!eval(this.CounterEffectCount)) return false;
            if (!eval(this.Light)) return false;
            if (!eval(this.ProjectileSpeed)) return false;
            if (!eval(this.EffectShader)) return false;
            if (SubData != null)
            {
                if (!eval(this.SubData.Overall)) return false;
                if (this.SubData.Specific != null && !this.SubData.Specific.AllEqual(eval)) return false;
            }
            if (this.CounterEffects != null)
            {
                if (!eval(this.CounterEffects.Overall)) return false;
                if (this.CounterEffects.Specific != null)
                {
                    foreach (var item in this.CounterEffects.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new MagicEffect_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new MagicEffect_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(MagicEffect_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            obj.Description = eval(this.Description);
            obj.Icon = eval(this.Icon);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Flags = eval(this.Flags);
            obj.BaseCost = eval(this.BaseCost);
            obj.Unused = eval(this.Unused);
            obj.MagicSchool = eval(this.MagicSchool);
            obj.Resistance = eval(this.Resistance);
            obj.CounterEffectCount = eval(this.CounterEffectCount);
            obj.Light = eval(this.Light);
            obj.ProjectileSpeed = eval(this.ProjectileSpeed);
            obj.EffectShader = eval(this.EffectShader);
            if (this.SubData != null)
            {
                obj.SubData = new MaskItem<R, MagicEffectSubData_Mask<R>>();
                obj.SubData.Overall = eval(this.SubData.Overall);
                if (this.SubData.Specific != null)
                {
                    obj.SubData.Specific = this.SubData.Specific.Translate(eval);
                }
            }
            if (CounterEffects != null)
            {
                obj.CounterEffects = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.CounterEffects.Overall = eval(this.CounterEffects.Overall);
                if (CounterEffects.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.CounterEffects.Specific = l;
                    foreach (var item in CounterEffects.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.CounterEffects.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(MagicEffect_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, MagicEffect_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(MagicEffect_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.BaseCost ?? true)
                {
                    fg.AppendLine($"BaseCost => {BaseCost}");
                }
                if (printMask?.Unused ?? true)
                {
                    fg.AppendLine($"Unused => {Unused}");
                }
                if (printMask?.MagicSchool ?? true)
                {
                    fg.AppendLine($"MagicSchool => {MagicSchool}");
                }
                if (printMask?.Resistance ?? true)
                {
                    fg.AppendLine($"Resistance => {Resistance}");
                }
                if (printMask?.CounterEffectCount ?? true)
                {
                    fg.AppendLine($"CounterEffectCount => {CounterEffectCount}");
                }
                if (printMask?.Light ?? true)
                {
                    fg.AppendLine($"Light => {Light}");
                }
                if (printMask?.ProjectileSpeed ?? true)
                {
                    fg.AppendLine($"ProjectileSpeed => {ProjectileSpeed}");
                }
                if (printMask?.EffectShader ?? true)
                {
                    fg.AppendLine($"EffectShader => {EffectShader}");
                }
                if (printMask?.SubData?.Overall ?? true)
                {
                    SubData?.ToString(fg);
                }
                if (printMask?.CounterEffects?.Overall ?? true)
                {
                    fg.AppendLine("CounterEffects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (CounterEffects.Overall != null)
                        {
                            fg.AppendLine(CounterEffects.Overall.ToString());
                        }
                        if (CounterEffects.Specific != null)
                        {
                            foreach (var subItem in CounterEffects.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class MagicEffect_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<MagicEffect_ErrorMask>
    {
        #region Members
        public Exception Name;
        public Exception Description;
        public Exception Icon;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Flags;
        public Exception BaseCost;
        public Exception Unused;
        public Exception MagicSchool;
        public Exception Resistance;
        public Exception CounterEffectCount;
        public Exception Light;
        public Exception ProjectileSpeed;
        public Exception EffectShader;
        public MaskItem<Exception, MagicEffectSubData_ErrorMask> SubData;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> CounterEffects;
        public Exception DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Name:
                    return Name;
                case MagicEffect_FieldIndex.Description:
                    return Description;
                case MagicEffect_FieldIndex.Icon:
                    return Icon;
                case MagicEffect_FieldIndex.Model:
                    return Model;
                case MagicEffect_FieldIndex.Flags:
                    return Flags;
                case MagicEffect_FieldIndex.BaseCost:
                    return BaseCost;
                case MagicEffect_FieldIndex.Unused:
                    return Unused;
                case MagicEffect_FieldIndex.MagicSchool:
                    return MagicSchool;
                case MagicEffect_FieldIndex.Resistance:
                    return Resistance;
                case MagicEffect_FieldIndex.CounterEffectCount:
                    return CounterEffectCount;
                case MagicEffect_FieldIndex.Light:
                    return Light;
                case MagicEffect_FieldIndex.ProjectileSpeed:
                    return ProjectileSpeed;
                case MagicEffect_FieldIndex.EffectShader:
                    return EffectShader;
                case MagicEffect_FieldIndex.SubData:
                    return SubData;
                case MagicEffect_FieldIndex.CounterEffects:
                    return CounterEffects;
                case MagicEffect_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case MagicEffect_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case MagicEffect_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case MagicEffect_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case MagicEffect_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case MagicEffect_FieldIndex.BaseCost:
                    this.BaseCost = ex;
                    break;
                case MagicEffect_FieldIndex.Unused:
                    this.Unused = ex;
                    break;
                case MagicEffect_FieldIndex.MagicSchool:
                    this.MagicSchool = ex;
                    break;
                case MagicEffect_FieldIndex.Resistance:
                    this.Resistance = ex;
                    break;
                case MagicEffect_FieldIndex.CounterEffectCount:
                    this.CounterEffectCount = ex;
                    break;
                case MagicEffect_FieldIndex.Light:
                    this.Light = ex;
                    break;
                case MagicEffect_FieldIndex.ProjectileSpeed:
                    this.ProjectileSpeed = ex;
                    break;
                case MagicEffect_FieldIndex.EffectShader:
                    this.EffectShader = ex;
                    break;
                case MagicEffect_FieldIndex.SubData:
                    this.SubData = new MaskItem<Exception, MagicEffectSubData_ErrorMask>(ex, null);
                    break;
                case MagicEffect_FieldIndex.CounterEffects:
                    this.CounterEffects = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case MagicEffect_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case MagicEffect_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.BaseCost:
                    this.BaseCost = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.Unused:
                    this.Unused = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.MagicSchool:
                    this.MagicSchool = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.Resistance:
                    this.Resistance = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.CounterEffectCount:
                    this.CounterEffectCount = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.Light:
                    this.Light = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.ProjectileSpeed:
                    this.ProjectileSpeed = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.EffectShader:
                    this.EffectShader = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.SubData:
                    this.SubData = (MaskItem<Exception, MagicEffectSubData_ErrorMask>)obj;
                    break;
                case MagicEffect_FieldIndex.CounterEffects:
                    this.CounterEffects = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case MagicEffect_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Description != null) return true;
            if (Icon != null) return true;
            if (Model != null) return true;
            if (Flags != null) return true;
            if (BaseCost != null) return true;
            if (Unused != null) return true;
            if (MagicSchool != null) return true;
            if (Resistance != null) return true;
            if (CounterEffectCount != null) return true;
            if (Light != null) return true;
            if (ProjectileSpeed != null) return true;
            if (EffectShader != null) return true;
            if (SubData != null) return true;
            if (CounterEffects != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("MagicEffect_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine($"Icon => {Icon}");
            Model?.ToString(fg);
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"BaseCost => {BaseCost}");
            fg.AppendLine($"Unused => {Unused}");
            fg.AppendLine($"MagicSchool => {MagicSchool}");
            fg.AppendLine($"Resistance => {Resistance}");
            fg.AppendLine($"CounterEffectCount => {CounterEffectCount}");
            fg.AppendLine($"Light => {Light}");
            fg.AppendLine($"ProjectileSpeed => {ProjectileSpeed}");
            fg.AppendLine($"EffectShader => {EffectShader}");
            SubData?.ToString(fg);
            fg.AppendLine("CounterEffects =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (CounterEffects.Overall != null)
                {
                    fg.AppendLine(CounterEffects.Overall.ToString());
                }
                if (CounterEffects.Specific != null)
                {
                    foreach (var subItem in CounterEffects.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public MagicEffect_ErrorMask Combine(MagicEffect_ErrorMask rhs)
        {
            var ret = new MagicEffect_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.BaseCost = this.BaseCost.Combine(rhs.BaseCost);
            ret.Unused = this.Unused.Combine(rhs.Unused);
            ret.MagicSchool = this.MagicSchool.Combine(rhs.MagicSchool);
            ret.Resistance = this.Resistance.Combine(rhs.Resistance);
            ret.CounterEffectCount = this.CounterEffectCount.Combine(rhs.CounterEffectCount);
            ret.Light = this.Light.Combine(rhs.Light);
            ret.ProjectileSpeed = this.ProjectileSpeed.Combine(rhs.ProjectileSpeed);
            ret.EffectShader = this.EffectShader.Combine(rhs.EffectShader);
            ret.SubData = new MaskItem<Exception, MagicEffectSubData_ErrorMask>(this.SubData.Overall.Combine(rhs.SubData.Overall), ((IErrorMask<MagicEffectSubData_ErrorMask>)this.SubData.Specific).Combine(rhs.SubData.Specific));
            ret.CounterEffects = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.CounterEffects.Overall.Combine(rhs.CounterEffects.Overall), new List<(int Index, Exception Value)>(this.CounterEffects.Specific.And(rhs.CounterEffects.Specific)));
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static MagicEffect_ErrorMask Combine(MagicEffect_ErrorMask lhs, MagicEffect_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static new MagicEffect_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new MagicEffect_ErrorMask();
        }
        #endregion

    }
    public class MagicEffect_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Name;
        public bool Description;
        public bool Icon;
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Flags;
        public bool BaseCost;
        public bool Unused;
        public bool MagicSchool;
        public bool Resistance;
        public bool CounterEffectCount;
        public bool Light;
        public bool ProjectileSpeed;
        public bool EffectShader;
        public MaskItem<bool, MagicEffectSubData_TranslationMask> SubData;
        public bool CounterEffects;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public MagicEffect_TranslationMask()
            : base()
        {
        }

        public MagicEffect_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Description = defaultOn;
            this.Icon = defaultOn;
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.Flags = defaultOn;
            this.BaseCost = defaultOn;
            this.Unused = defaultOn;
            this.MagicSchool = defaultOn;
            this.Resistance = defaultOn;
            this.CounterEffectCount = defaultOn;
            this.Light = defaultOn;
            this.ProjectileSpeed = defaultOn;
            this.EffectShader = defaultOn;
            this.SubData = new MaskItem<bool, MagicEffectSubData_TranslationMask>(defaultOn, null);
            this.CounterEffects = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Description, null));
            ret.Add((Icon, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Flags, null));
            ret.Add((BaseCost, null));
            ret.Add((Unused, null));
            ret.Add((MagicSchool, null));
            ret.Add((Resistance, null));
            ret.Add((CounterEffectCount, null));
            ret.Add((Light, null));
            ret.Add((ProjectileSpeed, null));
            ret.Add((EffectShader, null));
            ret.Add((SubData?.Overall ?? true, SubData?.Specific?.GetCrystal()));
            ret.Add((CounterEffects, null));
            ret.Add((DATADataTypeState, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MagicEffectBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static MagicEffectBinaryWriteTranslation Instance = new MagicEffectBinaryWriteTranslation();

        public static void Write_Embedded(
            IMagicEffectGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IMagicEffectGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(MagicEffect_Registration.FULL_HEADER),
                    nullable: false,
                    binaryType: StringBinaryType.NullTerminate);
            }
            if (item.Description_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Description,
                    header: recordTypeConverter.ConvertToCustom(MagicEffect_Registration.DESC_HEADER),
                    nullable: false,
                    binaryType: StringBinaryType.NullTerminate);
            }
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    header: recordTypeConverter.ConvertToCustom(MagicEffect_Registration.ICON_HEADER),
                    nullable: false,
                    binaryType: StringBinaryType.NullTerminate);
            }
            if (item.Model_IsSet)
            {
                var loquiItem = item.Model;
                ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.DATADataTypeState.HasFlag(MagicEffect.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(MagicEffect_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<MagicEffect.MagicFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.BaseCost);
                    Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Unused);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<MagicSchool>.Instance.Write(
                        writer,
                        item.MagicSchool,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Resistance>.Instance.Write(
                        writer,
                        item.Resistance,
                        length: 4);
                    writer.Write(item.CounterEffectCount);
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Light,
                        masterReferences: masterReferences);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.ProjectileSpeed);
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EffectShader,
                        masterReferences: masterReferences);
                    if (!item.DATADataTypeState.HasFlag(MagicEffect.DATADataType.Break0))
                    {
                        {
                            var loquiItem = item.SubData;
                            ((MagicEffectSubDataBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                                item: loquiItem,
                                writer: writer,
                                masterReferences: masterReferences,
                                recordTypeConverter: null);
                        }
                    }
                }
            }
            if (item.CounterEffects.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IEDIDLinkGetter<IMagicEffectGetter>>.Instance.Write(
                    writer: writer,
                    items: item.CounterEffects,
                    recordType: MagicEffect_Registration.ESCE_HEADER,
                    transl: (MutagenWriter subWriter, IEDIDLinkGetter<IMagicEffectGetter> subItem) =>
                    {
                        Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IMagicEffectGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: MagicEffect_Registration.MGEF_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (IMagicEffectGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (IMagicEffectGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (IMagicEffectGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class MagicEffectBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static MagicEffectBinaryCreateTranslation Instance = new MagicEffectBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class MagicEffectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MagicEffectBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IMagicEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffect_Registration.Instance;
        public new static MagicEffect_Registration Registration => MagicEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MagicEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MagicEffectSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMagicEffectGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => MagicEffectCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => MagicEffectXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((MagicEffectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MagicEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((MagicEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public bool Name_IsSet => _NameLocation.HasValue;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default;
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public bool Description_IsSet => _DescriptionLocation.HasValue;
        public String Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _DescriptionLocation.Value, _package.Meta)) : default;
        #endregion
        #region Icon
        private int? _IconLocation;
        public bool Icon_IsSet => _IconLocation.HasValue;
        public String Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _IconLocation.Value, _package.Meta)) : default;
        #endregion
        #region Model
        public IModelGetter Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        private int? _DATALocation;
        public MagicEffect.DATADataType DATADataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _DATALocation.Value + 0x0;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public MagicEffect.MagicFlag Flags => _Flags_IsSet ? (MagicEffect.MagicFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 4)) : default;
        #endregion
        #region BaseCost
        private int _BaseCostLocation => _DATALocation.Value + 0x4;
        private bool _BaseCost_IsSet => _DATALocation.HasValue;
        public Single BaseCost => _BaseCost_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_BaseCostLocation, 4)) : default;
        #endregion
        #region Unused
        private int _UnusedLocation => _DATALocation.Value + 0x8;
        private bool _Unused_IsSet => _DATALocation.HasValue;
        public ReadOnlySpan<Byte> Unused => _Unused_IsSet ? _data.Span.Slice(_UnusedLocation, 4).ToArray() : default;
        #endregion
        #region MagicSchool
        private int _MagicSchoolLocation => _DATALocation.Value + 0xC;
        private bool _MagicSchool_IsSet => _DATALocation.HasValue;
        public MagicSchool MagicSchool => _MagicSchool_IsSet ? (MagicSchool)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_MagicSchoolLocation, 4)) : default;
        #endregion
        #region Resistance
        private int _ResistanceLocation => _DATALocation.Value + 0x10;
        private bool _Resistance_IsSet => _DATALocation.HasValue;
        public Resistance Resistance => _Resistance_IsSet ? (Resistance)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_ResistanceLocation, 4)) : default;
        #endregion
        #region CounterEffectCount
        private int _CounterEffectCountLocation => _DATALocation.Value + 0x14;
        private bool _CounterEffectCount_IsSet => _DATALocation.HasValue;
        public UInt32 CounterEffectCount => _CounterEffectCount_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_CounterEffectCountLocation, 4)) : default;
        #endregion
        #region Light
        private int _LightLocation => _DATALocation.Value + 0x18;
        private bool _Light_IsSet => _DATALocation.HasValue;
        public IFormIDLinkGetter<ILightGetter> Light => _Light_IsSet ? new FormIDLink<ILightGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_LightLocation, 4)))) : FormIDLink<ILightGetter>.Empty;
        #endregion
        #region ProjectileSpeed
        private int _ProjectileSpeedLocation => _DATALocation.Value + 0x1C;
        private bool _ProjectileSpeed_IsSet => _DATALocation.HasValue;
        public Single ProjectileSpeed => _ProjectileSpeed_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ProjectileSpeedLocation, 4)) : default;
        #endregion
        #region EffectShader
        private int _EffectShaderLocation => _DATALocation.Value + 0x20;
        private bool _EffectShader_IsSet => _DATALocation.HasValue;
        public IFormIDLinkGetter<IEffectShaderGetter> EffectShader => _EffectShader_IsSet ? new FormIDLink<IEffectShaderGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_EffectShaderLocation, 4)))) : FormIDLink<IEffectShaderGetter>.Empty;
        #endregion
        #region SubData
        private int _SubDataLocation => _DATALocation.Value + 0x24;
        private bool _SubData_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(MagicEffect.DATADataType.Break0);
        private IMagicEffectSubDataGetter _SubData => _SubData_IsSet ? MagicEffectSubDataBinaryOverlay.MagicEffectSubDataFactory(new BinaryMemoryReadStream(_data.Slice(_SubDataLocation)), _package) : default;
        public IMagicEffectSubDataGetter SubData => _SubData ?? new MagicEffectSubData();
        #endregion
        public IReadOnlySetList<IEDIDLinkGetter<IMagicEffectGetter>> CounterEffects { get; private set; } = EmptySetList<IEDIDLinkGetter<IMagicEffectGetter>>.Instance;
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected MagicEffectBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static MagicEffectBinaryOverlay MagicEffectFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new MagicEffectBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Name);
                }
                case 0x43534544: // DESC
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Description);
                }
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Icon);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Model);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = MagicEffect.DATADataType.Has;
                    var subLen = _package.Meta.SubRecord(_data.Slice((stream.Position - offset))).RecordLength;
                    if (subLen <= 0x24)
                    {
                        this.DATADataTypeState |= MagicEffect.DATADataType.Break0;
                    }
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.SubData);
                }
                case 0x45435345: // ESCE
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.CounterEffects = BinaryOverlaySetList<IEDIDLinkGetter<IMagicEffectGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new EDIDLink<IMagicEffectGetter>(new RecordType(BinaryPrimitives.ReadInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.CounterEffects);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

