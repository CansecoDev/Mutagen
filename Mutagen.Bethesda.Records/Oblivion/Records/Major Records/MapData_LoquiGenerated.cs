/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class MapData :
        IMapData,
        ILoquiObjectSetter<MapData>,
        IEquatable<MapData>,
        IEqualsMask
    {
        #region Ctor
        public MapData()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region UsableDimensions
        public P2Int UsableDimensions { get; set; }
        #endregion
        #region CellCoordinatesNWCell
        public P2Int16 CellCoordinatesNWCell { get; set; }
        #endregion
        #region CellCoordinatesSECell
        public P2Int16 CellCoordinatesSECell { get; set; }
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            MapDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IMapDataGetter rhs)) return false;
            return ((MapDataCommon)((IMapDataGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(MapData obj)
        {
            return ((MapDataCommon)((IMapDataGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((MapDataCommon)((IMapDataGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => MapDataXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((MapDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static MapData CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            MapData_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static MapData CreateFromXml(
            XElement node,
            out MapData_ErrorMask errorMask,
            bool doMasks = true,
            MapData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = MapData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MapData CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new MapData() : null;
                    break;
                default:
                    break;
            }
            var ret = new MapData();
            ((MapDataSetterCommon)((IMapDataGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static MapData CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            MapData_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static MapData CreateFromXml(
            string path,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MapData CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            MapData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static MapData CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            MapData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static MapData CreateFromXml(
            Stream stream,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MapData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            MapData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((MapData_FieldIndex)index)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = MapData_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => MapDataBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((MapDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static MapData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static MapData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out MapData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = MapData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MapData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new MapData();
            ((MapDataSetterCommon)((IMapDataGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMapDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((MapDataSetterCommon)((IMapDataGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static MapData GetNew()
        {
            return new MapData();
        }

    }
    #endregion

    #region Interface
    public partial interface IMapData :
        IMapDataGetter,
        ILoquiObjectSetter<IMapData>
    {
        new P2Int UsableDimensions { get; set; }

        new P2Int16 CellCoordinatesNWCell { get; set; }

        new P2Int16 CellCoordinatesSECell { get; set; }

    }

    public partial interface IMapDataGetter :
        ILoquiObject,
        ILoquiObject<IMapDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region UsableDimensions
        P2Int UsableDimensions { get; }

        #endregion
        #region CellCoordinatesNWCell
        P2Int16 CellCoordinatesNWCell { get; }

        #endregion
        #region CellCoordinatesSECell
        P2Int16 CellCoordinatesSECell { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class MapDataMixIn
    {
        public static void Clear(this IMapData item)
        {
            ((MapDataSetterCommon)((IMapDataGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static MapData_Mask<bool> GetEqualsMask(
            this IMapDataGetter item,
            IMapDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MapDataCommon)((IMapDataGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMapDataGetter item,
            string name = null,
            MapData_Mask<bool> printMask = null)
        {
            return ((MapDataCommon)((IMapDataGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMapDataGetter item,
            FileGeneration fg,
            string name = null,
            MapData_Mask<bool> printMask = null)
        {
            ((MapDataCommon)((IMapDataGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IMapDataGetter item,
            MapData_Mask<bool?> checkMask)
        {
            return ((MapDataCommon)((IMapDataGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static MapData_Mask<bool> GetHasBeenSetMask(this IMapDataGetter item)
        {
            var ret = new MapData_Mask<bool>();
            ((MapDataCommon)((IMapDataGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IMapDataGetter item,
            IMapDataGetter rhs)
        {
            return ((MapDataCommon)((IMapDataGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IMapData lhs,
            IMapDataGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this IMapData lhs,
            IMapDataGetter rhs,
            MapData_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IMapData lhs,
            IMapDataGetter rhs,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((MapDataSetterTranslationCommon)((IMapDataGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = MapData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IMapData lhs,
            IMapDataGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((MapDataSetterTranslationCommon)((IMapDataGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static MapData DeepCopy(
            this IMapDataGetter item,
            MapData_TranslationMask copyMask = null)
        {
            return ((MapDataSetterTranslationCommon)((IMapDataGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MapData DeepCopy(
            this IMapDataGetter item,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask copyMask = null)
        {
            return ((MapDataSetterTranslationCommon)((IMapDataGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MapData DeepCopy(
            this IMapDataGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((MapDataSetterTranslationCommon)((IMapDataGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMapData item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            MapData_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMapData item,
            XElement node,
            out MapData_ErrorMask errorMask,
            bool doMasks = true,
            MapData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = MapData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IMapData item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((MapDataSetterCommon)((IMapDataGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMapData item,
            string path,
            MissingCreate missing = MissingCreate.New,
            MapData_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMapData item,
            string path,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMapData item,
            string path,
            ErrorMaskBuilder errorMask,
            MapData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IMapData item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            MapData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMapData item,
            Stream stream,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMapData item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            MapData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IMapData item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IMapData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out MapData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = MapData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this IMapData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((MapDataSetterCommon)((IMapDataGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum MapData_FieldIndex
    {
        UsableDimensions = 0,
        CellCoordinatesNWCell = 1,
        CellCoordinatesSECell = 2,
    }
    #endregion

    #region Registration
    public class MapData_Registration : ILoquiRegistration
    {
        public static readonly MapData_Registration Instance = new MapData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 146,
            version: 0);

        public const string GUID = "493c28c6-8dd0-40cd-9c54-87243564a406";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(MapData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(MapData_ErrorMask);

        public static readonly Type ClassType = typeof(MapData);

        public static readonly Type GetterType = typeof(IMapDataGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMapData);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.MapData";

        public const string Name = "MapData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "USABLEDIMENSIONS":
                    return (ushort)MapData_FieldIndex.UsableDimensions;
                case "CELLCOORDINATESNWCELL":
                    return (ushort)MapData_FieldIndex.CellCoordinatesNWCell;
                case "CELLCOORDINATESSECELL":
                    return (ushort)MapData_FieldIndex.CellCoordinatesSECell;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                    return "UsableDimensions";
                case MapData_FieldIndex.CellCoordinatesNWCell:
                    return "CellCoordinatesNWCell";
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return "CellCoordinatesSECell";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                    return typeof(P2Int);
                case MapData_FieldIndex.CellCoordinatesNWCell:
                    return typeof(P2Int16);
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return typeof(P2Int16);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(MapDataXmlWriteTranslation);
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = MNAM_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(MapDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class MapDataSetterCommon
    {
        public static readonly MapDataSetterCommon Instance = new MapDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMapData item)
        {
            ClearPartial();
            item.UsableDimensions = default(P2Int);
            item.CellCoordinatesNWCell = default(P2Int16);
            item.CellCoordinatesSECell = default(P2Int16);
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IMapData item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MapDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IMapData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out P2Int UsableDimensionsParse))
            {
                item.UsableDimensions = UsableDimensionsParse;
            }
            else
            {
                item.UsableDimensions = default(P2Int);
            }
            if (Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Parse(
                frame: frame,
                item: out P2Int16 CellCoordinatesNWCellParse))
            {
                item.CellCoordinatesNWCell = CellCoordinatesNWCellParse;
            }
            else
            {
                item.CellCoordinatesNWCell = default(P2Int16);
            }
            if (Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Parse(
                frame: frame,
                item: out P2Int16 CellCoordinatesSECellParse))
            {
                item.CellCoordinatesSECell = CellCoordinatesSECellParse;
            }
            else
            {
                item.CellCoordinatesSECell = default(P2Int16);
            }
        }
        
        public void CopyInFromBinary(
            IMapData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(MapData_Registration.MNAM_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class MapDataCommon
    {
        public static readonly MapDataCommon Instance = new MapDataCommon();

        public MapData_Mask<bool> GetEqualsMask(
            IMapDataGetter item,
            IMapDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MapData_Mask<bool>();
            ((MapDataCommon)((IMapDataGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMapDataGetter item,
            IMapDataGetter rhs,
            MapData_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.UsableDimensions = item.UsableDimensions.Equals(rhs.UsableDimensions);
            ret.CellCoordinatesNWCell = item.CellCoordinatesNWCell.Equals(rhs.CellCoordinatesNWCell);
            ret.CellCoordinatesSECell = item.CellCoordinatesSECell.Equals(rhs.CellCoordinatesSECell);
        }
        
        public string ToString(
            IMapDataGetter item,
            string name = null,
            MapData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMapDataGetter item,
            FileGeneration fg,
            string name = null,
            MapData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MapData =>");
            }
            else
            {
                fg.AppendLine($"{name} (MapData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMapDataGetter item,
            FileGeneration fg,
            MapData_Mask<bool> printMask = null)
        {
            if (printMask?.UsableDimensions ?? true)
            {
                fg.AppendLine($"UsableDimensions => {item.UsableDimensions}");
            }
            if (printMask?.CellCoordinatesNWCell ?? true)
            {
                fg.AppendLine($"CellCoordinatesNWCell => {item.CellCoordinatesNWCell}");
            }
            if (printMask?.CellCoordinatesSECell ?? true)
            {
                fg.AppendLine($"CellCoordinatesSECell => {item.CellCoordinatesSECell}");
            }
        }
        
        public bool HasBeenSet(
            IMapDataGetter item,
            MapData_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IMapDataGetter item,
            MapData_Mask<bool> mask)
        {
            mask.UsableDimensions = true;
            mask.CellCoordinatesNWCell = true;
            mask.CellCoordinatesSECell = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMapDataGetter lhs,
            IMapDataGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.UsableDimensions.Equals(rhs.UsableDimensions)) return false;
            if (!lhs.CellCoordinatesNWCell.Equals(rhs.CellCoordinatesNWCell)) return false;
            if (!lhs.CellCoordinatesSECell.Equals(rhs.CellCoordinatesSECell)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IMapDataGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.UsableDimensions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CellCoordinatesNWCell).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CellCoordinatesSECell).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return MapData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IMapDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class MapDataSetterTranslationCommon
    {
        public static readonly MapDataSetterTranslationCommon Instance = new MapDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IMapData item,
            IMapDataGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)MapData_FieldIndex.UsableDimensions) ?? true))
            {
                item.UsableDimensions = rhs.UsableDimensions;
            }
            if ((copyMask?.GetShouldTranslate((int)MapData_FieldIndex.CellCoordinatesNWCell) ?? true))
            {
                item.CellCoordinatesNWCell = rhs.CellCoordinatesNWCell;
            }
            if ((copyMask?.GetShouldTranslate((int)MapData_FieldIndex.CellCoordinatesSECell) ?? true))
            {
                item.CellCoordinatesSECell = rhs.CellCoordinatesSECell;
            }
        }
        
        #endregion
        
        public MapData DeepCopy(
            IMapDataGetter item,
            MapData_TranslationMask copyMask = null)
        {
            MapData ret = (MapData)((MapDataCommon)((IMapDataGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public MapData DeepCopy(
            IMapDataGetter item,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask copyMask = null)
        {
            MapData ret = (MapData)((MapDataCommon)((IMapDataGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public MapData DeepCopy(
            IMapDataGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            MapData ret = (MapData)((MapDataCommon)((IMapDataGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class MapData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MapData_Registration.Instance;
        public static MapData_Registration Registration => MapData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MapDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return MapDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MapDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMapDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IMapDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IMapDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MapDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static MapDataXmlWriteTranslation Instance = new MapDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IMapDataGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)MapData_FieldIndex.UsableDimensions) ?? true))
            {
                P2IntXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.UsableDimensions),
                    item: item.UsableDimensions,
                    fieldIndex: (int)MapData_FieldIndex.UsableDimensions,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MapData_FieldIndex.CellCoordinatesNWCell) ?? true))
            {
                P2Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CellCoordinatesNWCell),
                    item: item.CellCoordinatesNWCell,
                    fieldIndex: (int)MapData_FieldIndex.CellCoordinatesNWCell,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MapData_FieldIndex.CellCoordinatesSECell) ?? true))
            {
                P2Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CellCoordinatesSECell),
                    item: item.CellCoordinatesSECell,
                    fieldIndex: (int)MapData_FieldIndex.CellCoordinatesSECell,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IMapDataGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.MapData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.MapData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IMapDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IMapDataGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IMapDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class MapDataXmlCreateTranslation
    {
        public readonly static MapDataXmlCreateTranslation Instance = new MapDataXmlCreateTranslation();

        public static void FillPublicXml(
            IMapData item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MapDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IMapData item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "UsableDimensions":
                    try
                    {
                        errorMask?.PushIndex((int)MapData_FieldIndex.UsableDimensions);
                        if (P2IntXmlTranslation.Instance.Parse(
                            node: node,
                            item: out P2Int UsableDimensionsParse,
                            errorMask: errorMask))
                        {
                            item.UsableDimensions = UsableDimensionsParse;
                        }
                        else
                        {
                            item.UsableDimensions = default(P2Int);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CellCoordinatesNWCell":
                    try
                    {
                        errorMask?.PushIndex((int)MapData_FieldIndex.CellCoordinatesNWCell);
                        if (P2Int16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out P2Int16 CellCoordinatesNWCellParse,
                            errorMask: errorMask))
                        {
                            item.CellCoordinatesNWCell = CellCoordinatesNWCellParse;
                        }
                        else
                        {
                            item.CellCoordinatesNWCell = default(P2Int16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CellCoordinatesSECell":
                    try
                    {
                        errorMask?.PushIndex((int)MapData_FieldIndex.CellCoordinatesSECell);
                        if (P2Int16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out P2Int16 CellCoordinatesSECellParse,
                            errorMask: errorMask))
                        {
                            item.CellCoordinatesSECell = CellCoordinatesSECellParse;
                        }
                        else
                        {
                            item.CellCoordinatesSECell = default(P2Int16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class MapDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IMapDataGetter item,
            XElement node,
            out MapData_ErrorMask errorMask,
            bool doMasks = true,
            MapData_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((MapDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MapData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IMapDataGetter item,
            string path,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMapDataGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMapDataGetter item,
            Stream stream,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMapDataGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMapDataGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((MapDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IMapDataGetter item,
            XElement node,
            string name = null,
            MapData_TranslationMask translationMask = null)
        {
            ((MapDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IMapDataGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((MapDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMapDataGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((MapDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class MapData_Mask<T> : IMask<T>, IEquatable<MapData_Mask<T>>
    {
        #region Ctors
        public MapData_Mask()
        {
        }

        public MapData_Mask(T initialValue)
        {
            this.UsableDimensions = initialValue;
            this.CellCoordinatesNWCell = initialValue;
            this.CellCoordinatesSECell = initialValue;
        }
        #endregion

        #region Members
        public T UsableDimensions;
        public T CellCoordinatesNWCell;
        public T CellCoordinatesSECell;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is MapData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MapData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.UsableDimensions, rhs.UsableDimensions)) return false;
            if (!object.Equals(this.CellCoordinatesNWCell, rhs.CellCoordinatesNWCell)) return false;
            if (!object.Equals(this.CellCoordinatesSECell, rhs.CellCoordinatesSECell)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.UsableDimensions?.GetHashCode());
            ret = ret.CombineHashCode(this.CellCoordinatesNWCell?.GetHashCode());
            ret = ret.CombineHashCode(this.CellCoordinatesSECell?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.UsableDimensions)) return false;
            if (!eval(this.CellCoordinatesNWCell)) return false;
            if (!eval(this.CellCoordinatesSECell)) return false;
            return true;
        }
        #endregion

        #region Translate
        public MapData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new MapData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(MapData_Mask<R> obj, Func<T, R> eval)
        {
            obj.UsableDimensions = eval(this.UsableDimensions);
            obj.CellCoordinatesNWCell = eval(this.CellCoordinatesNWCell);
            obj.CellCoordinatesSECell = eval(this.CellCoordinatesSECell);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(MapData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, MapData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(MapData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.UsableDimensions ?? true)
                {
                    fg.AppendLine($"UsableDimensions => {UsableDimensions}");
                }
                if (printMask?.CellCoordinatesNWCell ?? true)
                {
                    fg.AppendLine($"CellCoordinatesNWCell => {CellCoordinatesNWCell}");
                }
                if (printMask?.CellCoordinatesSECell ?? true)
                {
                    fg.AppendLine($"CellCoordinatesSECell => {CellCoordinatesSECell}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class MapData_ErrorMask : IErrorMask, IErrorMask<MapData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception UsableDimensions;
        public Exception CellCoordinatesNWCell;
        public Exception CellCoordinatesSECell;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                    return UsableDimensions;
                case MapData_FieldIndex.CellCoordinatesNWCell:
                    return CellCoordinatesNWCell;
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return CellCoordinatesSECell;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                    this.UsableDimensions = ex;
                    break;
                case MapData_FieldIndex.CellCoordinatesNWCell:
                    this.CellCoordinatesNWCell = ex;
                    break;
                case MapData_FieldIndex.CellCoordinatesSECell:
                    this.CellCoordinatesSECell = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                    this.UsableDimensions = (Exception)obj;
                    break;
                case MapData_FieldIndex.CellCoordinatesNWCell:
                    this.CellCoordinatesNWCell = (Exception)obj;
                    break;
                case MapData_FieldIndex.CellCoordinatesSECell:
                    this.CellCoordinatesSECell = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (UsableDimensions != null) return true;
            if (CellCoordinatesNWCell != null) return true;
            if (CellCoordinatesSECell != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("MapData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"UsableDimensions => {UsableDimensions}");
            fg.AppendLine($"CellCoordinatesNWCell => {CellCoordinatesNWCell}");
            fg.AppendLine($"CellCoordinatesSECell => {CellCoordinatesSECell}");
        }
        #endregion

        #region Combine
        public MapData_ErrorMask Combine(MapData_ErrorMask rhs)
        {
            var ret = new MapData_ErrorMask();
            ret.UsableDimensions = this.UsableDimensions.Combine(rhs.UsableDimensions);
            ret.CellCoordinatesNWCell = this.CellCoordinatesNWCell.Combine(rhs.CellCoordinatesNWCell);
            ret.CellCoordinatesSECell = this.CellCoordinatesSECell.Combine(rhs.CellCoordinatesSECell);
            return ret;
        }
        public static MapData_ErrorMask Combine(MapData_ErrorMask lhs, MapData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static MapData_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new MapData_ErrorMask();
        }
        #endregion

    }
    public class MapData_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool UsableDimensions;
        public bool CellCoordinatesNWCell;
        public bool CellCoordinatesSECell;
        #endregion

        #region Ctors
        public MapData_TranslationMask()
        {
        }

        public MapData_TranslationMask(bool defaultOn)
        {
            this.UsableDimensions = defaultOn;
            this.CellCoordinatesNWCell = defaultOn;
            this.CellCoordinatesSECell = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((UsableDimensions, null));
            ret.Add((CellCoordinatesNWCell, null));
            ret.Add((CellCoordinatesSECell, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MapDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static MapDataBinaryWriteTranslation Instance = new MapDataBinaryWriteTranslation();

        public static void Write_Embedded(
            IMapDataGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UsableDimensions);
            Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CellCoordinatesNWCell);
            Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CellCoordinatesSECell);
        }

        public void Write(
            MutagenWriter writer,
            IMapDataGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: MapData_Registration.MNAM_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IMapDataGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class MapDataBinaryCreateTranslation
    {
        public readonly static MapDataBinaryCreateTranslation Instance = new MapDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class MapDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMapDataGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MapData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((MapDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = MapData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IMapDataGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((MapDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IMapDataGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((MapDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MapDataBinaryOverlay :
        BinaryOverlay,
        IMapDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MapData_Registration.Instance;
        public static MapData_Registration Registration => MapData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MapDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MapDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMapDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IMapDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IMapDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMapDataGetter)rhs, include);

        protected object XmlWriteTranslator => MapDataXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((MapDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => MapDataBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((MapDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public P2Int UsableDimensions => P2IntBinaryTranslation.Read(_data.Span.Slice(0, 8));
        public P2Int16 CellCoordinatesNWCell => P2Int16BinaryTranslation.Read(_data.Span.Slice(8, 4));
        public P2Int16 CellCoordinatesSECell => P2Int16BinaryTranslation.Read(_data.Span.Slice(12, 4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected MapDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static MapDataBinaryOverlay MapDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new MapDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

