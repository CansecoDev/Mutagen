/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class MapMarker :
        LoquiNotifyingObject,
        IMapMarkerInternal,
        ILoquiObjectSetter<MapMarker>,
        INamed,
        IEquatable<MapMarker>,
        IEqualsMask
    {
        #region Ctor
        public MapMarker()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public bool Flags_IsSet
        {
            get => _hasBeenSetTracker[(int)MapMarker_FieldIndex.Flags];
            set => _hasBeenSetTracker[(int)MapMarker_FieldIndex.Flags] = value;
        }
        bool IMapMarkerGetter.Flags_IsSet => Flags_IsSet;
        private MapMarker.Flag _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MapMarker.Flag Flags
        {
            get => this._Flags;
            set => Flags_Set(value);
        }
        MapMarker.Flag IMapMarkerGetter.Flags => this.Flags;
        public void Flags_Set(
            MapMarker.Flag value,
            bool markSet = true)
        {
            _Flags = value;
            _hasBeenSetTracker[(int)MapMarker_FieldIndex.Flags] = markSet;
        }
        public void Flags_Unset()
        {
            this.Flags_Set(default(MapMarker.Flag), false);
        }
        #endregion
        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)MapMarker_FieldIndex.Name];
            set => _hasBeenSetTracker[(int)MapMarker_FieldIndex.Name] = value;
        }
        bool IMapMarkerGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IMapMarkerGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            _Name = value;
            _hasBeenSetTracker[(int)MapMarker_FieldIndex.Name] = markSet;
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Types
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<MapMarker.Type> _Types = new SourceSetList<MapMarker.Type>();
        public ISourceSetList<MapMarker.Type> Types => _Types;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<MapMarker.Type> IMapMarker.Types => _Types;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<MapMarker.Type> IMapMarkerGetter.Types => _Types;
        #endregion

        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMapMarkerInternalGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            MapMarkerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IMapMarkerInternalGetter rhs)) return false;
            return ((MapMarkerCommon)((IMapMarkerInternalGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(MapMarker obj)
        {
            return ((MapMarkerCommon)((IMapMarkerInternalGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((MapMarkerCommon)((IMapMarkerInternalGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => MapMarkerXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((MapMarkerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static MapMarker CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            MapMarker_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static MapMarker CreateFromXml(
            XElement node,
            out MapMarker_ErrorMask errorMask,
            bool doMasks = true,
            MapMarker_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = MapMarker_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MapMarker CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new MapMarker() : null;
                    break;
                default:
                    break;
            }
            var ret = new MapMarker();
            try
            {
                foreach (var elem in node.Elements())
                {
                    MapMarkerXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static MapMarker CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            MapMarker_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static MapMarker CreateFromXml(
            string path,
            out MapMarker_ErrorMask errorMask,
            MapMarker_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MapMarker CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            MapMarker_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static MapMarker CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            MapMarker_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static MapMarker CreateFromXml(
            Stream stream,
            out MapMarker_ErrorMask errorMask,
            MapMarker_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MapMarker CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            MapMarker_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((MapMarker_FieldIndex)index)
            {
                case MapMarker_FieldIndex.Flags:
                case MapMarker_FieldIndex.Name:
                    return _hasBeenSetTracker[index];
                case MapMarker_FieldIndex.Types:
                    return Types.HasBeenSet;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        protected object BinaryWriteTranslator => MapMarkerBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((MapMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static MapMarker CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static MapMarker CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out MapMarker_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = MapMarker_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MapMarker CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new MapMarker();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            MapMarker item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            MapMarker item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4D414E46: // FNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)MapMarker_FieldIndex.Flags) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (EnumBinaryTranslation<MapMarker.Flag>.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out MapMarker.Flag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(MapMarker.Flag);
                    }
                    return TryGet<int?>.Succeed((int)MapMarker_FieldIndex.Flags);
                }
                case 0x4C4C5546: // FULL
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)MapMarker_FieldIndex.Name) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)MapMarker_FieldIndex.Name);
                }
                case 0x4D414E54: // TNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)MapMarker_FieldIndex.Types) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<MapMarker.Type>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Types,
                        transl: (MutagenFrame r, out MapMarker.Type listSubItem) =>
                        {
                            return Mutagen.Bethesda.Binary.EnumBinaryTranslation<MapMarker.Type>.Instance.Parse(
                                frame: r.SpawnWithLength(2),
                                item: out listSubItem);
                        });
                    return TryGet<int?>.Succeed((int)MapMarker_FieldIndex.Types);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public MapMarker Copy(
            MapMarker_CopyMask copyMask = null,
            MapMarker def = null)
        {
            return MapMarker.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static MapMarker Copy(
            MapMarker item,
            MapMarker_CopyMask copyMask = null,
            MapMarker def = null)
        {
            MapMarker ret;
            if (item.GetType().Equals(typeof(MapMarker)))
            {
                ret = new MapMarker();
            }
            else
            {
                ret = (MapMarker)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static MapMarker Copy_ToLoqui(
            MapMarker item,
            MapMarker_CopyMask copyMask = null,
            MapMarker def = null)
        {
            MapMarker ret;
            if (item.GetType().Equals(typeof(MapMarker)))
            {
                ret = new MapMarker() as MapMarker;
            }
            else
            {
                ret = (MapMarker)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(MapMarker rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            MapMarker rhs,
            MapMarker_CopyMask copyMask,
            MapMarker def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            MapMarker rhs,
            out MapMarker_ErrorMask errorMask,
            MapMarker_CopyMask copyMask = null,
            MapMarker def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MapMarkerSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = MapMarker_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            MapMarker rhs,
            ErrorMaskBuilder errorMask,
            MapMarker_CopyMask copyMask = null,
            MapMarker def = null)
        {
            MapMarkerSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    this.Flags = (MapMarker.Flag)obj;
                    break;
                case MapMarker_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case MapMarker_FieldIndex.Types:
                    this._Types.SetTo((ISetList<MapMarker.Type>)obj);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            MapMarkerSetterCommon.Instance.Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface IMapMarker :
        IMapMarkerInternalGetter,
        ILoquiObjectSetter<IMapMarkerInternal>
    {
        new MapMarker.Flag Flags { get; set; }
        new bool Flags_IsSet { get; set; }
        void Flags_Set(MapMarker.Flag value, bool hasBeenSet = true);
        void Flags_Unset();

        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new ISetList<MapMarker.Type> Types { get; }
        void CopyFieldsFrom(
            MapMarker rhs,
            ErrorMaskBuilder errorMask = null,
            MapMarker_CopyMask copyMask = null,
            MapMarker def = null);
    }

    public partial interface IMapMarkerInternal :
        IMapMarker,
        IMapMarkerInternalGetter
    {
    }

    public partial interface IMapMarkerGetter :
        ILoquiObject,
        ILoquiObject<IMapMarkerInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Flags
        MapMarker.Flag Flags { get; }
        bool Flags_IsSet { get; }

        #endregion
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Types
        IReadOnlySetList<MapMarker.Type> Types { get; }
        #endregion

    }

    public partial interface IMapMarkerInternalGetter : IMapMarkerGetter
    {
        object CommonInstance();
        object CommonSetterInstance();
        object CommonSetterCopyInstance();

    }

    #endregion

    #region Common MixIn
    public static class MapMarkerMixIn
    {
        public static void Clear(this IMapMarkerInternal item)
        {
            ((MapMarkerSetterCommon)((IMapMarkerInternalGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static MapMarker_Mask<bool> GetEqualsMask(
            this IMapMarkerInternalGetter item,
            IMapMarkerInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MapMarkerCommon)((IMapMarkerInternalGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMapMarkerInternalGetter item,
            string name = null,
            MapMarker_Mask<bool> printMask = null)
        {
            return ((MapMarkerCommon)((IMapMarkerInternalGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMapMarkerInternalGetter item,
            FileGeneration fg,
            string name = null,
            MapMarker_Mask<bool> printMask = null)
        {
            ((MapMarkerCommon)((IMapMarkerInternalGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IMapMarkerInternalGetter item,
            MapMarker_Mask<bool?> checkMask)
        {
            return ((MapMarkerCommon)((IMapMarkerInternalGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static MapMarker_Mask<bool> GetHasBeenSetMask(this IMapMarkerInternalGetter item)
        {
            var ret = new MapMarker_Mask<bool>();
            ((MapMarkerCommon)((IMapMarkerInternalGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IMapMarkerInternalGetter item,
            IMapMarkerInternalGetter rhs)
        {
            return ((MapMarkerCommon)((IMapMarkerInternalGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum MapMarker_FieldIndex
    {
        Flags = 0,
        Name = 1,
        Types = 2,
    }
    #endregion

    #region Registration
    public class MapMarker_Registration : ILoquiRegistration
    {
        public static readonly MapMarker_Registration Instance = new MapMarker_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 126,
            version: 0);

        public const string GUID = "96e2692c-898d-48c5-acd1-fbbee402a4f9";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(MapMarker_Mask<>);

        public static readonly Type ErrorMaskType = typeof(MapMarker_ErrorMask);

        public static readonly Type ClassType = typeof(MapMarker);

        public static readonly Type GetterType = typeof(IMapMarkerGetter);

        public static readonly Type InternalGetterType = typeof(IMapMarkerInternalGetter);

        public static readonly Type SetterType = typeof(IMapMarker);

        public static readonly Type InternalSetterType = typeof(IMapMarkerInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.MapMarker";

        public const string Name = "MapMarker";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLAGS":
                    return (ushort)MapMarker_FieldIndex.Flags;
                case "NAME":
                    return (ushort)MapMarker_FieldIndex.Name;
                case "TYPES":
                    return (ushort)MapMarker_FieldIndex.Types;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Types:
                    return true;
                case MapMarker_FieldIndex.Flags:
                case MapMarker_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                case MapMarker_FieldIndex.Name:
                case MapMarker_FieldIndex.Types:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                case MapMarker_FieldIndex.Name:
                case MapMarker_FieldIndex.Types:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    return "Flags";
                case MapMarker_FieldIndex.Name:
                    return "Name";
                case MapMarker_FieldIndex.Types:
                    return "Types";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                case MapMarker_FieldIndex.Name:
                case MapMarker_FieldIndex.Types:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                case MapMarker_FieldIndex.Name:
                case MapMarker_FieldIndex.Types:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    return typeof(MapMarker.Flag);
                case MapMarker_FieldIndex.Name:
                    return typeof(String);
                case MapMarker_FieldIndex.Types:
                    return typeof(ISetList<MapMarker.Type>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(MapMarkerXmlWriteTranslation);
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        FNAM_HEADER,
                        FULL_HEADER,
                        TNAM_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryWriteTranslation = typeof(MapMarkerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class MapMarkerSetterCommon
    {
        public static readonly MapMarkerSetterCommon Instance = new MapMarkerSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IMapMarkerInternal item)
        {
            ClearPartial();
            item.Flags_Unset();
            item.Name_Unset();
            item.Types.Unset();
        }
        
    }
    public partial class MapMarkerCommon
    {
        public static readonly MapMarkerCommon Instance = new MapMarkerCommon();

        public MapMarker_Mask<bool> GetEqualsMask(
            IMapMarkerInternalGetter item,
            IMapMarkerInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MapMarker_Mask<bool>();
            ((MapMarkerCommon)((IMapMarkerInternalGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMapMarkerInternalGetter item,
            IMapMarkerInternalGetter rhs,
            MapMarker_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags_IsSet == rhs.Flags_IsSet && item.Flags == rhs.Flags;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Types = item.Types.CollectionEqualsHelper(
                rhs.Types,
                (l, r) => l == r,
                include);
        }
        
        public string ToString(
            IMapMarkerInternalGetter item,
            string name = null,
            MapMarker_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMapMarkerInternalGetter item,
            FileGeneration fg,
            string name = null,
            MapMarker_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MapMarker =>");
            }
            else
            {
                fg.AppendLine($"{name} (MapMarker) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMapMarkerInternalGetter item,
            FileGeneration fg,
            MapMarker_Mask<bool> printMask = null)
        {
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Types?.Overall ?? true)
            {
                fg.AppendLine("Types =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Types)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IMapMarkerInternalGetter item,
            MapMarker_Mask<bool?> checkMask)
        {
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_IsSet) return false;
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Types.Overall.HasValue && checkMask.Types.Overall.Value != item.Types.HasBeenSet) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IMapMarkerInternalGetter item,
            MapMarker_Mask<bool> mask)
        {
            mask.Flags = item.Flags_IsSet;
            mask.Name = item.Name_IsSet;
            mask.Types = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Types.HasBeenSet, null);
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMapMarkerInternalGetter lhs,
            IMapMarkerInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Flags_IsSet != rhs.Flags_IsSet) return false;
            if (lhs.Flags_IsSet)
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if (lhs.Name_IsSet != rhs.Name_IsSet) return false;
            if (lhs.Name_IsSet)
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if (lhs.Types.HasBeenSet != rhs.Types.HasBeenSet) return false;
            if (lhs.Types.HasBeenSet)
            {
                if (!lhs.Types.SequenceEqual(rhs.Types)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IMapMarkerInternalGetter item)
        {
            int ret = 0;
            if (item.Flags_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            }
            if (item.Name_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            }
            if (item.Types.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Types).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class MapMarkerSetterCopyCommon
    {
        public static readonly MapMarkerSetterCopyCommon Instance = new MapMarkerSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            MapMarker item,
            MapMarker rhs,
            MapMarker def,
            ErrorMaskBuilder errorMask,
            MapMarker_CopyMask copyMask)
        {
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)MapMarker_FieldIndex.Flags);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Flags,
                        rhsHasBeenSet: rhs.Flags_IsSet,
                        defItem: def?.Flags ?? default(MapMarker.Flag),
                        defHasBeenSet: def?.Flags_IsSet ?? false,
                        outRhsItem: out var rhsFlagsItem,
                        outDefItem: out var defFlagsItem))
                    {
                        item.Flags = rhsFlagsItem;
                    }
                    else
                    {
                        item.Flags_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)MapMarker_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Types != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)MapMarker_FieldIndex.Types);
                try
                {
                    item.Types.SetToWithDefault(
                        rhs.Types,
                        def?.Types);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class MapMarker
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MapMarker_Registration.Instance;
        public static MapMarker_Registration Registration => MapMarker_Registration.Instance;
        protected object CommonInstance()
        {
            return MapMarkerCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return MapMarkerSetterCommon.Instance;
        }
        protected object CommonSetterCopyInstance()
        {
            return MapMarkerSetterCopyCommon.Instance;
        }
        object IMapMarkerInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IMapMarkerInternalGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IMapMarkerInternalGetter.CommonSetterCopyInstance()
        {
            return this.CommonSetterCopyInstance();
        }

        #endregion

    }
}
#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MapMarkerXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static MapMarkerXmlWriteTranslation Instance = new MapMarkerXmlWriteTranslation();

        public static void WriteToNodeXml(
            IMapMarkerInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.Flags_IsSet
                && (translationMask?.GetShouldTranslate((int)MapMarker_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<MapMarker.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)MapMarker_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)MapMarker_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)MapMarker_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Types.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)MapMarker_FieldIndex.Types) ?? true))
            {
                ListXmlTranslation<MapMarker.Type>.Instance.Write(
                    node: node,
                    name: nameof(item.Types),
                    item: item.Types,
                    fieldIndex: (int)MapMarker_FieldIndex.Types,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)MapMarker_FieldIndex.Types),
                    transl: (XElement subNode, MapMarker.Type subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        EnumXmlTranslation<MapMarker.Type>.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IMapMarkerInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.MapMarker");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.MapMarker");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IMapMarkerInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IMapMarkerInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IMapMarkerInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class MapMarkerXmlCreateTranslation
    {
        public readonly static MapMarkerXmlCreateTranslation Instance = new MapMarkerXmlCreateTranslation();

        public static void FillPublicXml(
            IMapMarkerInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MapMarkerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IMapMarkerInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)MapMarker_FieldIndex.Flags);
                        if (EnumXmlTranslation<MapMarker.Flag>.Instance.Parse(
                            node: node,
                            item: out MapMarker.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(MapMarker.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)MapMarker_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Types":
                    try
                    {
                        errorMask?.PushIndex((int)MapMarker_FieldIndex.Types);
                        if (ListXmlTranslation<MapMarker.Type>.Instance.Parse(
                            node: node,
                            enumer: out var TypesItem,
                            transl: EnumXmlTranslation<MapMarker.Type>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Types.SetTo(TypesItem);
                        }
                        else
                        {
                            item.Types.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class MapMarkerXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IMapMarkerInternalGetter item,
            XElement node,
            out MapMarker_ErrorMask errorMask,
            bool doMasks = true,
            MapMarker_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((MapMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MapMarker_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IMapMarkerInternalGetter item,
            string path,
            out MapMarker_ErrorMask errorMask,
            MapMarker_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMapMarkerInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMapMarkerInternalGetter item,
            Stream stream,
            out MapMarker_ErrorMask errorMask,
            MapMarker_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMapMarkerInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMapMarkerInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((MapMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IMapMarkerInternalGetter item,
            XElement node,
            string name = null,
            MapMarker_TranslationMask translationMask = null)
        {
            ((MapMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IMapMarkerInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((MapMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMapMarkerInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((MapMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class MapMarker_Mask<T> : IMask<T>, IEquatable<MapMarker_Mask<T>>
    {
        #region Ctors
        public MapMarker_Mask()
        {
        }

        public MapMarker_Mask(T initialValue)
        {
            this.Flags = initialValue;
            this.Name = initialValue;
            this.Types = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Flags;
        public T Name;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Types;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is MapMarker_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MapMarker_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Types, rhs.Types)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Types?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Flags)) return false;
            if (!eval(this.Name)) return false;
            if (this.Types != null)
            {
                if (!eval(this.Types.Overall)) return false;
                if (this.Types.Specific != null)
                {
                    foreach (var item in this.Types.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public MapMarker_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new MapMarker_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(MapMarker_Mask<R> obj, Func<T, R> eval)
        {
            obj.Flags = eval(this.Flags);
            obj.Name = eval(this.Name);
            if (Types != null)
            {
                obj.Types = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Types.Overall = eval(this.Types.Overall);
                if (Types.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Types.Specific = l;
                    foreach (var item in Types.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Types.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(MapMarker_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, MapMarker_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(MapMarker_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Types?.Overall ?? true)
                {
                    fg.AppendLine("Types =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Types.Overall != null)
                        {
                            fg.AppendLine(Types.Overall.ToString());
                        }
                        if (Types.Specific != null)
                        {
                            foreach (var subItem in Types.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class MapMarker_ErrorMask : IErrorMask, IErrorMask<MapMarker_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Flags;
        public Exception Name;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Types;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    return Flags;
                case MapMarker_FieldIndex.Name:
                    return Name;
                case MapMarker_FieldIndex.Types:
                    return Types;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case MapMarker_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case MapMarker_FieldIndex.Types:
                    this.Types = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case MapMarker_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case MapMarker_FieldIndex.Types:
                    this.Types = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Flags != null) return true;
            if (Name != null) return true;
            if (Types != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("MapMarker_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine("Types =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Types.Overall != null)
                {
                    fg.AppendLine(Types.Overall.ToString());
                }
                if (Types.Specific != null)
                {
                    foreach (var subItem in Types.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public MapMarker_ErrorMask Combine(MapMarker_ErrorMask rhs)
        {
            var ret = new MapMarker_ErrorMask();
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Types = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Types.Overall.Combine(rhs.Types.Overall), new List<(int Index, Exception Value)>(this.Types.Specific.And(rhs.Types.Specific)));
            return ret;
        }
        public static MapMarker_ErrorMask Combine(MapMarker_ErrorMask lhs, MapMarker_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static MapMarker_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new MapMarker_ErrorMask();
        }
        #endregion

    }
    public class MapMarker_CopyMask
    {
        public MapMarker_CopyMask()
        {
        }

        public MapMarker_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Flags = defaultOn;
            this.Name = defaultOn;
            this.Types = deepCopyOption;
        }

        #region Members
        public bool Flags;
        public bool Name;
        public CopyOption Types;
        #endregion

    }

    public class MapMarker_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Flags;
        public bool Name;
        public bool Types;
        #endregion

        #region Ctors
        public MapMarker_TranslationMask()
        {
        }

        public MapMarker_TranslationMask(bool defaultOn)
        {
            this.Flags = defaultOn;
            this.Name = defaultOn;
            this.Types = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Flags, null));
            ret.Add((Name, null));
            ret.Add((Types, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MapMarkerBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static MapMarkerBinaryWriteTranslation Instance = new MapMarkerBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IMapMarkerInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.Flags_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<MapMarker.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1,
                    header: recordTypeConverter.ConvertToCustom(MapMarker_Registration.FNAM_HEADER),
                    nullable: false);
            }
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(MapMarker_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Types.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<MapMarker.Type>.Instance.Write(
                    writer: writer,
                    items: item.Types,
                    recordType: MapMarker_Registration.TNAM_HEADER,
                    transl: (MutagenWriter subWriter, MapMarker.Type subItem) =>
                    {
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<MapMarker.Type>.Instance.Write(
                            subWriter,
                            subItem,
                            length: 2);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IMapMarkerInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IMapMarkerInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class MapMarkerBinaryCreateTranslation
    {
        public readonly static MapMarkerBinaryCreateTranslation Instance = new MapMarkerBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class MapMarkerBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMapMarkerInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MapMarker_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((MapMarkerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = MapMarker_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IMapMarkerInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((MapMarkerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IMapMarkerInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((MapMarkerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MapMarkerBinaryWrapper :
        BinaryWrapper,
        IMapMarkerInternalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MapMarker_Registration.Instance;
        public static MapMarker_Registration Registration => MapMarker_Registration.Instance;
        protected object CommonInstance()
        {
            return MapMarkerCommon.Instance;
        }
        object IMapMarkerInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IMapMarkerInternalGetter.CommonSetterInstance()
        {
            return null;
        }
        object IMapMarkerInternalGetter.CommonSetterCopyInstance()
        {
            return null;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMapMarkerInternalGetter)rhs, include);

        protected object XmlWriteTranslator => MapMarkerXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((MapMarkerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => MapMarkerBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((MapMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Flags
        private int? _FlagsLocation;
        public bool Flags_IsSet => _FlagsLocation.HasValue;
        public MapMarker.Flag Flags => (MapMarker.Flag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation.Value, _package.Meta)[0];
        #endregion
        #region Name
        private int? _NameLocation;
        public bool Name_IsSet => _NameLocation.HasValue;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default;
        #endregion
        public IReadOnlySetList<MapMarker.Type> Types { get; private set; } = EmptySetList<MapMarker.Type>.Instance;
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected MapMarkerBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this._data = bytes;
        }

        public static MapMarkerBinaryWrapper MapMarkerFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new MapMarkerBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4D414E46: // FNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)MapMarker_FieldIndex.Flags) return TryGet<int?>.Failure;
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MapMarker_FieldIndex.Flags);
                }
                case 0x4C4C5546: // FULL
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)MapMarker_FieldIndex.Name) return TryGet<int?>.Failure;
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MapMarker_FieldIndex.Name);
                }
                case 0x4D414E54: // TNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)MapMarker_FieldIndex.Types) return TryGet<int?>.Failure;
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Types = BinaryWrapperSetList<MapMarker.Type>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 2,
                        getter: (s, p) => (MapMarker.Type)BinaryPrimitives.ReadUInt16LittleEndian(s));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)MapMarker_FieldIndex.Types);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

