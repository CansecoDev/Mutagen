/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public abstract partial class NPCSpawn :
        OblivionMajorRecord,
        INPCSpawnInternal,
        ILoquiObjectSetter<NPCSpawn>,
        IEquatable<NPCSpawn>,
        IEqualsMask
    {
        #region Ctor
        protected NPCSpawn()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion


        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            NPCSpawnMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is INPCSpawnGetter rhs)) return false;
            return ((NPCSpawnCommon)((INPCSpawnGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(NPCSpawn obj)
        {
            return ((NPCSpawnCommon)((INPCSpawnGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((NPCSpawnCommon)((INPCSpawnGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => NPCSpawnXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((NPCSpawnXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static NPCSpawn CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            NPCSpawn_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static NPCSpawn CreateFromXml(
            XElement node,
            out NPCSpawn_ErrorMask errorMask,
            bool doMasks = true,
            NPCSpawn_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = NPCSpawn_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static NPCSpawn CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return null;
                    break;
                default:
                    break;
            }
            if (!LoquiXmlTranslation.Instance.TryCreate(node, out NPCSpawn ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown NPCSpawn subclass: {node.Name.LocalName}");
            }
            ((NPCSpawnSetterCommon)((INPCSpawnGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static NPCSpawn CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            NPCSpawn_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static NPCSpawn CreateFromXml(
            string path,
            out NPCSpawn_ErrorMask errorMask,
            NPCSpawn_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static NPCSpawn CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            NPCSpawn_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static NPCSpawn CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            NPCSpawn_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static NPCSpawn CreateFromXml(
            Stream stream,
            out NPCSpawn_ErrorMask errorMask,
            NPCSpawn_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static NPCSpawn CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            NPCSpawn_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mutagen
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(LinkingPackage<M> package)
            
        {
            base.Link(package: package);
        }

        public NPCSpawn(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public NPCSpawn(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => NPCSpawnBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((NPCSpawnBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((INPCSpawnGetter)rhs, include);

        void IClearable.Clear()
        {
            ((NPCSpawnSetterCommon)((INPCSpawnGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static NPCSpawn GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    public partial interface INPCSpawn :
        INPCSpawnGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<INPCSpawnInternal>,
        ILinkSubContainer
    {
    }

    public partial interface INPCSpawnInternal :
        IOblivionMajorRecordInternal,
        INPCSpawn,
        INPCSpawnGetter
    {
    }

    public partial interface INPCSpawnGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<INPCSpawnGetter>,
        IXmlItem,
        IBinaryItem
    {

    }

    #endregion

    #region Common MixIn
    public static class NPCSpawnMixIn
    {
        public static void Clear(this INPCSpawnInternal item)
        {
            ((NPCSpawnSetterCommon)((INPCSpawnGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static NPCSpawn_Mask<bool> GetEqualsMask(
            this INPCSpawnGetter item,
            INPCSpawnGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NPCSpawnCommon)((INPCSpawnGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INPCSpawnGetter item,
            string name = null,
            NPCSpawn_Mask<bool> printMask = null)
        {
            return ((NPCSpawnCommon)((INPCSpawnGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INPCSpawnGetter item,
            FileGeneration fg,
            string name = null,
            NPCSpawn_Mask<bool> printMask = null)
        {
            ((NPCSpawnCommon)((INPCSpawnGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this INPCSpawnGetter item,
            NPCSpawn_Mask<bool?> checkMask)
        {
            return ((NPCSpawnCommon)((INPCSpawnGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static NPCSpawn_Mask<bool> GetHasBeenSetMask(this INPCSpawnGetter item)
        {
            var ret = new NPCSpawn_Mask<bool>();
            ((NPCSpawnCommon)((INPCSpawnGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this INPCSpawnGetter item,
            INPCSpawnGetter rhs)
        {
            return ((NPCSpawnCommon)((INPCSpawnGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this INPCSpawnInternal lhs,
            INPCSpawnGetter rhs,
            NPCSpawn_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this INPCSpawnInternal lhs,
            INPCSpawnGetter rhs,
            out NPCSpawn_ErrorMask errorMask,
            NPCSpawn_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((NPCSpawnSetterTranslationCommon)((INPCSpawnGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask.GetCrystal());
            errorMask = NPCSpawn_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this INPCSpawnInternal lhs,
            INPCSpawnGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((NPCSpawnSetterTranslationCommon)((INPCSpawnGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static NPCSpawn DeepCopy(
            this INPCSpawnGetter item,
            NPCSpawn_TranslationMask copyMask = null)
        {
            return ((NPCSpawnSetterTranslationCommon)((INPCSpawnGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NPCSpawn DeepCopy(
            this INPCSpawnGetter item,
            out NPCSpawn_ErrorMask errorMask,
            NPCSpawn_TranslationMask copyMask = null)
        {
            return ((NPCSpawnSetterTranslationCommon)((INPCSpawnGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NPCSpawn DeepCopy(
            this INPCSpawnGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((NPCSpawnSetterTranslationCommon)((INPCSpawnGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this INPCSpawnInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            NPCSpawn_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this INPCSpawnInternal item,
            XElement node,
            out NPCSpawn_ErrorMask errorMask,
            bool doMasks = true,
            NPCSpawn_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = NPCSpawn_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromXml(
            this INPCSpawnInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((NPCSpawnSetterCommon)((INPCSpawnGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INPCSpawnInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            NPCSpawn_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INPCSpawnInternal item,
            string path,
            out NPCSpawn_ErrorMask errorMask,
            NPCSpawn_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INPCSpawnInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            NPCSpawn_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this INPCSpawnInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            NPCSpawn_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INPCSpawnInternal item,
            Stream stream,
            out NPCSpawn_ErrorMask errorMask,
            NPCSpawn_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INPCSpawnInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            NPCSpawn_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this INPCSpawnInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this INPCSpawnInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out NPCSpawn_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = NPCSpawn_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromBinary(
            this INPCSpawnInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((NPCSpawnSetterCommon)((INPCSpawnGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum NPCSpawn_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
    }
    #endregion

    #region Registration
    public class NPCSpawn_Registration : ILoquiRegistration
    {
        public static readonly NPCSpawn_Registration Instance = new NPCSpawn_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 95,
            version: 0);

        public const string GUID = "85b66f0a-7526-41d9-b6a5-292dafc16405";

        public const ushort AdditionalFieldCount = 0;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(NPCSpawn_Mask<>);

        public static readonly Type ErrorMaskType = typeof(NPCSpawn_ErrorMask);

        public static readonly Type ClassType = typeof(NPCSpawn);

        public static readonly Type GetterType = typeof(INPCSpawnGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(INPCSpawn);

        public static readonly Type InternalSetterType = typeof(INPCSpawnInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.NPCSpawn";

        public const string Name = "NPCSpawn";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            NPCSpawn_FieldIndex enu = (NPCSpawn_FieldIndex)index;
            switch (enu)
            {
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            NPCSpawn_FieldIndex enu = (NPCSpawn_FieldIndex)index;
            switch (enu)
            {
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            NPCSpawn_FieldIndex enu = (NPCSpawn_FieldIndex)index;
            switch (enu)
            {
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            NPCSpawn_FieldIndex enu = (NPCSpawn_FieldIndex)index;
            switch (enu)
            {
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            NPCSpawn_FieldIndex enu = (NPCSpawn_FieldIndex)index;
            switch (enu)
            {
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            NPCSpawn_FieldIndex enu = (NPCSpawn_FieldIndex)index;
            switch (enu)
            {
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            NPCSpawn_FieldIndex enu = (NPCSpawn_FieldIndex)index;
            switch (enu)
            {
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(NPCSpawnXmlWriteTranslation);
        public static readonly RecordType LVLC_HEADER = new RecordType("LVLC");
        public static readonly RecordType CREA_HEADER = new RecordType("CREA");
        public static readonly RecordType NPC__HEADER = new RecordType("NPC_");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        LVLC_HEADER,
                        CREA_HEADER,
                        NPC__HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(NPCSpawnBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class NPCSpawnSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly NPCSpawnSetterCommon Instance = new NPCSpawnSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(INPCSpawnInternal item)
        {
            ClearPartial();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (INPCSpawnInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (INPCSpawnInternal)item);
        }
        
        public override object GetNew() => NPCSpawn.GetNew();
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            INPCSpawnInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public new void CopyInFromXml(
            INPCSpawnInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    NPCSpawnXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => throw new ArgumentException();
        public new void CopyInFromBinary(
            INPCSpawnInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
        }
        
        #endregion
        
    }
    public partial class NPCSpawnCommon : OblivionMajorRecordCommon
    {
        public new static readonly NPCSpawnCommon Instance = new NPCSpawnCommon();

        public NPCSpawn_Mask<bool> GetEqualsMask(
            INPCSpawnGetter item,
            INPCSpawnGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NPCSpawn_Mask<bool>();
            ((NPCSpawnCommon)((INPCSpawnGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INPCSpawnGetter item,
            INPCSpawnGetter rhs,
            NPCSpawn_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            INPCSpawnGetter item,
            string name = null,
            NPCSpawn_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            INPCSpawnGetter item,
            FileGeneration fg,
            string name = null,
            NPCSpawn_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"NPCSpawn =>");
            }
            else
            {
                fg.AppendLine($"{name} (NPCSpawn) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            INPCSpawnGetter item,
            FileGeneration fg,
            NPCSpawn_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
        }
        
        public bool HasBeenSet(
            INPCSpawnGetter item,
            NPCSpawn_Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            INPCSpawnGetter item,
            NPCSpawn_Mask<bool> mask)
        {
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static NPCSpawn_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (NPCSpawn_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (NPCSpawn_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (NPCSpawn_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (NPCSpawn_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (NPCSpawn_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static NPCSpawn_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (NPCSpawn_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (NPCSpawn_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (NPCSpawn_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (NPCSpawn_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INPCSpawnGetter lhs,
            INPCSpawnGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter lhs,
            IOblivionMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (INPCSpawnGetter)lhs,
                rhs: rhs as INPCSpawnGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (INPCSpawnGetter)lhs,
                rhs: rhs as INPCSpawnGetter);
        }
        
        public virtual int GetHashCode(INPCSpawnGetter item)
        {
            int ret = 0;
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (INPCSpawnGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (INPCSpawnGetter)item);
        }
        
        #endregion
        
        
        #region Mutagen
        partial void PostDuplicate(NPCSpawn obj, NPCSpawn rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            throw new NotImplementedException();
        }
        
        #endregion
        
    }
    public partial class NPCSpawnSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly NPCSpawnSetterTranslationCommon Instance = new NPCSpawnSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            INPCSpawn item,
            INPCSpawnGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((OblivionMajorRecordSetterTranslationCommon)((IOblivionMajorRecordGetter)item).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        #endregion
        
        public NPCSpawn DeepCopy(
            INPCSpawnGetter item,
            NPCSpawn_TranslationMask copyMask = null)
        {
            NPCSpawn ret = (NPCSpawn)((NPCSpawnSetterCommon)((INPCSpawnGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public NPCSpawn DeepCopy(
            INPCSpawnGetter item,
            out NPCSpawn_ErrorMask errorMask,
            NPCSpawn_TranslationMask copyMask = null)
        {
            NPCSpawn ret = (NPCSpawn)((NPCSpawnSetterCommon)((INPCSpawnGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public NPCSpawn DeepCopy(
            INPCSpawnGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            NPCSpawn ret = (NPCSpawn)((NPCSpawnSetterCommon)((INPCSpawnGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class NPCSpawn
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NPCSpawn_Registration.Instance;
        public new static NPCSpawn_Registration Registration => NPCSpawn_Registration.Instance;
        protected override object CommonInstance()
        {
            return NPCSpawnCommon.Instance;
        }
        protected override object CommonSetterInstance()
        {
            return NPCSpawnSetterCommon.Instance;
        }
        protected override object CommonSetterTranslationInstance()
        {
            return NPCSpawnSetterTranslationCommon.Instance;
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class NPCSpawnXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static NPCSpawnXmlWriteTranslation Instance = new NPCSpawnXmlWriteTranslation();

        public static void WriteToNodeXml(
            INPCSpawnGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public virtual void Write(
            XElement node,
            INPCSpawnGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.NPCSpawn");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.NPCSpawn");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (INPCSpawnGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (INPCSpawnGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (INPCSpawnGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class NPCSpawnXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static NPCSpawnXmlCreateTranslation Instance = new NPCSpawnXmlCreateTranslation();

        public static void FillPublicXml(
            INPCSpawnInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    NPCSpawnXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            INPCSpawnInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class NPCSpawnXmlTranslationMixIn
    {
        public static void WriteToXml(
            this INPCSpawnGetter item,
            XElement node,
            out NPCSpawn_ErrorMask errorMask,
            bool doMasks = true,
            NPCSpawn_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((NPCSpawnXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = NPCSpawn_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this INPCSpawnGetter item,
            string path,
            out NPCSpawn_ErrorMask errorMask,
            NPCSpawn_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this INPCSpawnGetter item,
            Stream stream,
            out NPCSpawn_ErrorMask errorMask,
            NPCSpawn_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class NPCSpawn_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<NPCSpawn_Mask<T>>
    {
        #region Ctors
        public NPCSpawn_Mask()
        {
        }

        public NPCSpawn_Mask(T initialValue)
        {
        }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is NPCSpawn_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(NPCSpawn_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new NPCSpawn_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new NPCSpawn_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(NPCSpawn_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(NPCSpawn_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, NPCSpawn_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(NPCSpawn_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class NPCSpawn_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<NPCSpawn_ErrorMask>
    {
        #region IErrorMask
        public override object GetNthMask(int index)
        {
            NPCSpawn_FieldIndex enu = (NPCSpawn_FieldIndex)index;
            switch (enu)
            {
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            NPCSpawn_FieldIndex enu = (NPCSpawn_FieldIndex)index;
            switch (enu)
            {
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            NPCSpawn_FieldIndex enu = (NPCSpawn_FieldIndex)index;
            switch (enu)
            {
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("NPCSpawn_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
        }
        #endregion

        #region Combine
        public NPCSpawn_ErrorMask Combine(NPCSpawn_ErrorMask rhs)
        {
            var ret = new NPCSpawn_ErrorMask();
            return ret;
        }
        public static NPCSpawn_ErrorMask Combine(NPCSpawn_ErrorMask lhs, NPCSpawn_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static NPCSpawn_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new NPCSpawn_ErrorMask();
        }
        #endregion

    }
    public class NPCSpawn_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Ctors
        public NPCSpawn_TranslationMask()
            : base()
        {
        }

        public NPCSpawn_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
        }

        #endregion

    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class NPCSpawnBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static NPCSpawnBinaryWriteTranslation Instance = new NPCSpawnBinaryWriteTranslation();

        public virtual void Write(
            MutagenWriter writer,
            INPCSpawnGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (INPCSpawnGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (INPCSpawnGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (INPCSpawnGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class NPCSpawnBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static NPCSpawnBinaryCreateTranslation Instance = new NPCSpawnBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class NPCSpawnBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INPCSpawnGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out NPCSpawn_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((NPCSpawnBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = NPCSpawn_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class NPCSpawnBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        INPCSpawnGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NPCSpawn_Registration.Instance;
        public new static NPCSpawn_Registration Registration => NPCSpawn_Registration.Instance;
        protected override object CommonInstance()
        {
            return NPCSpawnCommon.Instance;
        }
        protected override object CommonSetterTranslationInstance()
        {
            return NPCSpawnSetterTranslationCommon.Instance;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((INPCSpawnGetter)rhs, include);

        protected override object XmlWriteTranslator => NPCSpawnXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((NPCSpawnXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => NPCSpawnBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((NPCSpawnBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected NPCSpawnBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

    }

}
#endregion

#endregion

