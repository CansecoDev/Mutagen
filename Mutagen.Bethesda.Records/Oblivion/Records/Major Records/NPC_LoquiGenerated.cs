/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Drawing;
using Loqui.Presentation;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class NPC :
        NPCAbstract,
        INPCInternal,
        ILoquiObjectSetter<NPC>,
        INamed,
        IOwner,
        IEquatable<NPC>,
        IEqualsMask
    {
        #region Ctor
        protected NPC()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? INPCGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? INPCGetter.Model => this.Model;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NPC.NPCFlag _Flags;
        public NPC.NPCFlag Flags
        {
            get => this._Flags;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region BaseSpellPoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _BaseSpellPoints;
        public UInt16 BaseSpellPoints
        {
            get => this._BaseSpellPoints;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this._BaseSpellPoints = value;
            }
        }
        #endregion
        #region Fatigue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _Fatigue;
        public UInt16 Fatigue
        {
            get => this._Fatigue;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this._Fatigue = value;
            }
        }
        #endregion
        #region BarterGold
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _BarterGold;
        public UInt16 BarterGold
        {
            get => this._BarterGold;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this._BarterGold = value;
            }
        }
        #endregion
        #region LevelOffset
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int16 _LevelOffset;
        public Int16 LevelOffset
        {
            get => this._LevelOffset;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this._LevelOffset = value;
            }
        }
        #endregion
        #region CalcMin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _CalcMin;
        public UInt16 CalcMin
        {
            get => this._CalcMin;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this._CalcMin = value;
            }
        }
        #endregion
        #region CalcMax
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _CalcMax;
        public UInt16 CalcMax
        {
            get => this._CalcMax;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this._CalcMax = value;
            }
        }
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<RankPlacement> _Factions = new SetList<RankPlacement>();
        public ISetList<RankPlacement> Factions => _Factions;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<RankPlacement> INPC.Factions => _Factions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IRankPlacementGetter> INPCGetter.Factions => _Factions;
        #endregion

        #endregion
        #region DeathItem
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormSetLink<ItemAbstract> _DeathItem = new FormSetLink<ItemAbstract>();
        public IFormSetLink<ItemAbstract> DeathItem => this._DeathItem;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormSetLinkGetter<IItemAbstractGetter> INPCGetter.DeathItem => this.DeathItem;
        #endregion
        #region Race
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormSetLink<Race> _Race = new FormSetLink<Race>();
        public IFormSetLink<Race> Race => this._Race;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormSetLinkGetter<IRaceGetter> INPCGetter.Race => this.Race;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IFormLink<SpellAbstract>> _Spells = new SetList<IFormLink<SpellAbstract>>();
        public ISetList<IFormLink<SpellAbstract>> Spells => _Spells;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormLink<SpellAbstract>> INPC.Spells => _Spells;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormLinkGetter<ISpellAbstractGetter>> INPCGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Script
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormSetLink<Script> _Script = new FormSetLink<Script>();
        public IFormSetLink<Script> Script => this._Script;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormSetLinkGetter<IScriptGetter> INPCGetter.Script => this.Script;
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<ItemEntry> _Items = new SetList<ItemEntry>();
        public ISetList<ItemEntry> Items => _Items;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<ItemEntry> INPC.Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IItemEntryGetter> INPCGetter.Items => _Items;
        #endregion

        #endregion
        #region Aggression
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Aggression;
        public Byte Aggression
        {
            get => this._Aggression;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this._Aggression = value;
            }
        }
        #endregion
        #region Confidence
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Confidence;
        public Byte Confidence
        {
            get => this._Confidence;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this._Confidence = value;
            }
        }
        #endregion
        #region EnergyLevel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _EnergyLevel;
        public Byte EnergyLevel
        {
            get => this._EnergyLevel;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this._EnergyLevel = value;
            }
        }
        #endregion
        #region Responsibility
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Responsibility;
        public Byte Responsibility
        {
            get => this._Responsibility;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this._Responsibility = value;
            }
        }
        #endregion
        #region BuySellServices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NPC.BuySellServiceFlag _BuySellServices;
        public NPC.BuySellServiceFlag BuySellServices
        {
            get => this._BuySellServices;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this._BuySellServices = value;
            }
        }
        #endregion
        #region Teaches
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Skill _Teaches;
        public Skill Teaches
        {
            get => this._Teaches;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this._Teaches = value;
            }
        }
        #endregion
        #region MaximumTrainingLevel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _MaximumTrainingLevel;
        public Byte MaximumTrainingLevel
        {
            get => this._MaximumTrainingLevel;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this._MaximumTrainingLevel = value;
            }
        }
        #endregion
        #region Fluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _Fluff = new byte[2];
        public Byte[] Fluff
        {
            get => _Fluff;
            set => this._Fluff = value ?? new byte[2];
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> INPCGetter.Fluff => this.Fluff;
        #endregion
        #region AIPackages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IFormLink<AIPackage>> _AIPackages = new SetList<IFormLink<AIPackage>>();
        public ISetList<IFormLink<AIPackage>> AIPackages => _AIPackages;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormLink<AIPackage>> INPC.AIPackages => _AIPackages;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormLinkGetter<IAIPackageGetter>> INPCGetter.AIPackages => _AIPackages;
        #endregion

        #endregion
        #region Animations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<String> _Animations = new SetList<String>();
        public ISetList<String> Animations => _Animations;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<String> INPC.Animations => _Animations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<String> INPCGetter.Animations => _Animations;
        #endregion

        #endregion
        #region Class
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormSetLink<Class> _Class = new FormSetLink<Class>();
        public IFormSetLink<Class> Class => this._Class;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormSetLinkGetter<IClassGetter> INPCGetter.Class => this.Class;
        #endregion
        #region Armorer
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Armorer;
        public Byte Armorer
        {
            get => this._Armorer;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Armorer = value;
            }
        }
        #endregion
        #region Athletics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Athletics;
        public Byte Athletics
        {
            get => this._Athletics;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Athletics = value;
            }
        }
        #endregion
        #region Blade
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Blade;
        public Byte Blade
        {
            get => this._Blade;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Blade = value;
            }
        }
        #endregion
        #region Block
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Block;
        public Byte Block
        {
            get => this._Block;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Block = value;
            }
        }
        #endregion
        #region Blunt
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Blunt;
        public Byte Blunt
        {
            get => this._Blunt;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Blunt = value;
            }
        }
        #endregion
        #region HandToHand
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _HandToHand;
        public Byte HandToHand
        {
            get => this._HandToHand;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._HandToHand = value;
            }
        }
        #endregion
        #region HeavyArmor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _HeavyArmor;
        public Byte HeavyArmor
        {
            get => this._HeavyArmor;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._HeavyArmor = value;
            }
        }
        #endregion
        #region Alchemy
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Alchemy;
        public Byte Alchemy
        {
            get => this._Alchemy;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Alchemy = value;
            }
        }
        #endregion
        #region Alteration
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Alteration;
        public Byte Alteration
        {
            get => this._Alteration;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Alteration = value;
            }
        }
        #endregion
        #region Conjuration
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Conjuration;
        public Byte Conjuration
        {
            get => this._Conjuration;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Conjuration = value;
            }
        }
        #endregion
        #region Destruction
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Destruction;
        public Byte Destruction
        {
            get => this._Destruction;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Destruction = value;
            }
        }
        #endregion
        #region Illusion
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Illusion;
        public Byte Illusion
        {
            get => this._Illusion;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Illusion = value;
            }
        }
        #endregion
        #region Mysticism
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Mysticism;
        public Byte Mysticism
        {
            get => this._Mysticism;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Mysticism = value;
            }
        }
        #endregion
        #region Restoration
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Restoration;
        public Byte Restoration
        {
            get => this._Restoration;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Restoration = value;
            }
        }
        #endregion
        #region Acrobatics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Acrobatics;
        public Byte Acrobatics
        {
            get => this._Acrobatics;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Acrobatics = value;
            }
        }
        #endregion
        #region LightArmor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _LightArmor;
        public Byte LightArmor
        {
            get => this._LightArmor;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._LightArmor = value;
            }
        }
        #endregion
        #region Marksman
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Marksman;
        public Byte Marksman
        {
            get => this._Marksman;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Marksman = value;
            }
        }
        #endregion
        #region Mercantile
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Mercantile;
        public Byte Mercantile
        {
            get => this._Mercantile;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Mercantile = value;
            }
        }
        #endregion
        #region Security
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Security;
        public Byte Security
        {
            get => this._Security;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Security = value;
            }
        }
        #endregion
        #region Sneak
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Sneak;
        public Byte Sneak
        {
            get => this._Sneak;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Sneak = value;
            }
        }
        #endregion
        #region Speechcraft
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Speechcraft;
        public Byte Speechcraft
        {
            get => this._Speechcraft;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Speechcraft = value;
            }
        }
        #endregion
        #region Health
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _Health;
        public UInt32 Health
        {
            get => this._Health;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Health = value;
            }
        }
        #endregion
        #region Strength
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Strength;
        public Byte Strength
        {
            get => this._Strength;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Strength = value;
            }
        }
        #endregion
        #region Intelligence
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Intelligence;
        public Byte Intelligence
        {
            get => this._Intelligence;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Intelligence = value;
            }
        }
        #endregion
        #region Willpower
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Willpower;
        public Byte Willpower
        {
            get => this._Willpower;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Willpower = value;
            }
        }
        #endregion
        #region Agility
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Agility;
        public Byte Agility
        {
            get => this._Agility;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Agility = value;
            }
        }
        #endregion
        #region Speed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Speed;
        public Byte Speed
        {
            get => this._Speed;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Speed = value;
            }
        }
        #endregion
        #region Endurance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Endurance;
        public Byte Endurance
        {
            get => this._Endurance;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Endurance = value;
            }
        }
        #endregion
        #region Personality
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Personality;
        public Byte Personality
        {
            get => this._Personality;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Personality = value;
            }
        }
        #endregion
        #region Luck
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Luck;
        public Byte Luck
        {
            get => this._Luck;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Luck = value;
            }
        }
        #endregion
        #region Hair
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormSetLink<Hair> _Hair = new FormSetLink<Hair>();
        public IFormSetLink<Hair> Hair => this._Hair;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormSetLinkGetter<IHairGetter> INPCGetter.Hair => this.Hair;
        #endregion
        #region HairLength
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single? _HairLength;
        public Single? HairLength
        {
            get => this._HairLength;
            set => this._HairLength = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? INPCGetter.HairLength => this.HairLength;
        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IFormLink<Eye>> _Eyes = new SetList<IFormLink<Eye>>();
        public ISetList<IFormLink<Eye>> Eyes => _Eyes;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormLink<Eye>> INPC.Eyes => _Eyes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormLinkGetter<IEyeGetter>> INPCGetter.Eyes => _Eyes;
        #endregion

        #endregion
        #region HairColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Color? _HairColor;
        public Color? HairColor
        {
            get => this._HairColor;
            set => this._HairColor = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? INPCGetter.HairColor => this.HairColor;
        #endregion
        #region CombatStyle
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormSetLink<CombatStyle> _CombatStyle = new FormSetLink<CombatStyle>();
        public IFormSetLink<CombatStyle> CombatStyle => this._CombatStyle;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormSetLinkGetter<ICombatStyleGetter> INPCGetter.CombatStyle => this.CombatStyle;
        #endregion
        #region FaceGenGeometrySymmetric
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _FaceGenGeometrySymmetric;
        public Byte[]? FaceGenGeometrySymmetric
        {
            get => this._FaceGenGeometrySymmetric;
            set => this._FaceGenGeometrySymmetric = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> INPCGetter.FaceGenGeometrySymmetric => this.FaceGenGeometrySymmetric;
        bool INPCGetter.FaceGenGeometrySymmetric_IsSet => this.FaceGenGeometrySymmetric != null;
        #endregion
        #region FaceGenGeometryAsymmetric
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _FaceGenGeometryAsymmetric;
        public Byte[]? FaceGenGeometryAsymmetric
        {
            get => this._FaceGenGeometryAsymmetric;
            set => this._FaceGenGeometryAsymmetric = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> INPCGetter.FaceGenGeometryAsymmetric => this.FaceGenGeometryAsymmetric;
        bool INPCGetter.FaceGenGeometryAsymmetric_IsSet => this.FaceGenGeometryAsymmetric != null;
        #endregion
        #region FaceGenTextureSymmetric
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _FaceGenTextureSymmetric;
        public Byte[]? FaceGenTextureSymmetric
        {
            get => this._FaceGenTextureSymmetric;
            set => this._FaceGenTextureSymmetric = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> INPCGetter.FaceGenTextureSymmetric => this.FaceGenTextureSymmetric;
        bool INPCGetter.FaceGenTextureSymmetric_IsSet => this.FaceGenTextureSymmetric != null;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _Unknown;
        public Byte[]? Unknown
        {
            get => this._Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> INPCGetter.Unknown => this.Unknown;
        bool INPCGetter.Unknown_IsSet => this.Unknown != null;
        #endregion
        #region ACBSDataTypeState
        public NPC.ACBSDataType ACBSDataTypeState { get; set; } = default;
        #endregion
        #region AIDTDataTypeState
        public NPC.AIDTDataType AIDTDataTypeState { get; set; } = default;
        #endregion
        #region DATADataTypeState
        public NPC.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NPCMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is INPCGetter rhs)) return false;
            return ((NPCCommon)((INPCGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(NPC obj)
        {
            return ((NPCCommon)((INPCGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NPCCommon)((INPCGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => NPCXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((NPCXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new NPC CreateFromXml(
            XElement node,
            NPC.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static NPC CreateFromXml(
            XElement node,
            out NPC.ErrorMask errorMask,
            NPC.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = NPC.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static NPC CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new NPC();
            ((NPCSetterCommon)((INPCGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static NPC CreateFromXml(
            string path,
            NPC.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static NPC CreateFromXml(
            string path,
            out NPC.ErrorMask errorMask,
            NPC.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static NPC CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            NPC.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static NPC CreateFromXml(
            Stream stream,
            NPC.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static NPC CreateFromXml(
            Stream stream,
            out NPC.ErrorMask errorMask,
            NPC.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static NPC CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            NPC.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            NPCAbstract.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Model = new MaskItem<T, Model.Mask<T>?>(initialValue, new Model.Mask<T>(initialValue));
                this.Flags = initialValue;
                this.BaseSpellPoints = initialValue;
                this.Fatigue = initialValue;
                this.BarterGold = initialValue;
                this.LevelOffset = initialValue;
                this.CalcMin = initialValue;
                this.CalcMax = initialValue;
                this.Factions = new MaskItem<T, IEnumerable<MaskItemIndexed<T, RankPlacement.Mask<T>?>>>(initialValue, Enumerable.Empty<MaskItemIndexed<T, RankPlacement.Mask<T>?>>());
                this.DeathItem = initialValue;
                this.Race = initialValue;
                this.Spells = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, Enumerable.Empty<(int Index, T Value)>());
                this.Script = initialValue;
                this.Items = new MaskItem<T, IEnumerable<MaskItemIndexed<T, ItemEntry.Mask<T>?>>>(initialValue, Enumerable.Empty<MaskItemIndexed<T, ItemEntry.Mask<T>?>>());
                this.Aggression = initialValue;
                this.Confidence = initialValue;
                this.EnergyLevel = initialValue;
                this.Responsibility = initialValue;
                this.BuySellServices = initialValue;
                this.Teaches = initialValue;
                this.MaximumTrainingLevel = initialValue;
                this.Fluff = initialValue;
                this.AIPackages = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, Enumerable.Empty<(int Index, T Value)>());
                this.Animations = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, Enumerable.Empty<(int Index, T Value)>());
                this.Class = initialValue;
                this.Armorer = initialValue;
                this.Athletics = initialValue;
                this.Blade = initialValue;
                this.Block = initialValue;
                this.Blunt = initialValue;
                this.HandToHand = initialValue;
                this.HeavyArmor = initialValue;
                this.Alchemy = initialValue;
                this.Alteration = initialValue;
                this.Conjuration = initialValue;
                this.Destruction = initialValue;
                this.Illusion = initialValue;
                this.Mysticism = initialValue;
                this.Restoration = initialValue;
                this.Acrobatics = initialValue;
                this.LightArmor = initialValue;
                this.Marksman = initialValue;
                this.Mercantile = initialValue;
                this.Security = initialValue;
                this.Sneak = initialValue;
                this.Speechcraft = initialValue;
                this.Health = initialValue;
                this.Strength = initialValue;
                this.Intelligence = initialValue;
                this.Willpower = initialValue;
                this.Agility = initialValue;
                this.Speed = initialValue;
                this.Endurance = initialValue;
                this.Personality = initialValue;
                this.Luck = initialValue;
                this.Hair = initialValue;
                this.HairLength = initialValue;
                this.Eyes = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, Enumerable.Empty<(int Index, T Value)>());
                this.HairColor = initialValue;
                this.CombatStyle = initialValue;
                this.FaceGenGeometrySymmetric = initialValue;
                this.FaceGenGeometryAsymmetric = initialValue;
                this.FaceGenTextureSymmetric = initialValue;
                this.Unknown = initialValue;
                this.ACBSDataTypeState = initialValue;
                this.AIDTDataTypeState = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                T MajorRecordFlagsRaw,
                T FormKey,
                T Version,
                T EditorID,
                T OblivionMajorRecordFlags,
                T Name,
                T Model,
                T Flags,
                T BaseSpellPoints,
                T Fatigue,
                T BarterGold,
                T LevelOffset,
                T CalcMin,
                T CalcMax,
                T Factions,
                T DeathItem,
                T Race,
                T Spells,
                T Script,
                T Items,
                T Aggression,
                T Confidence,
                T EnergyLevel,
                T Responsibility,
                T BuySellServices,
                T Teaches,
                T MaximumTrainingLevel,
                T Fluff,
                T AIPackages,
                T Animations,
                T Class,
                T Armorer,
                T Athletics,
                T Blade,
                T Block,
                T Blunt,
                T HandToHand,
                T HeavyArmor,
                T Alchemy,
                T Alteration,
                T Conjuration,
                T Destruction,
                T Illusion,
                T Mysticism,
                T Restoration,
                T Acrobatics,
                T LightArmor,
                T Marksman,
                T Mercantile,
                T Security,
                T Sneak,
                T Speechcraft,
                T Health,
                T Strength,
                T Intelligence,
                T Willpower,
                T Agility,
                T Speed,
                T Endurance,
                T Personality,
                T Luck,
                T Hair,
                T HairLength,
                T Eyes,
                T HairColor,
                T CombatStyle,
                T FaceGenGeometrySymmetric,
                T FaceGenGeometryAsymmetric,
                T FaceGenTextureSymmetric,
                T Unknown,
                T ACBSDataTypeState,
                T AIDTDataTypeState,
                T DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Model = new MaskItem<T, Model.Mask<T>?>(Model, new Model.Mask<T>(Model));
                this.Flags = Flags;
                this.BaseSpellPoints = BaseSpellPoints;
                this.Fatigue = Fatigue;
                this.BarterGold = BarterGold;
                this.LevelOffset = LevelOffset;
                this.CalcMin = CalcMin;
                this.CalcMax = CalcMax;
                this.Factions = new MaskItem<T, IEnumerable<MaskItemIndexed<T, RankPlacement.Mask<T>?>>>(Factions, Enumerable.Empty<MaskItemIndexed<T, RankPlacement.Mask<T>?>>());
                this.DeathItem = DeathItem;
                this.Race = Race;
                this.Spells = new MaskItem<T, IEnumerable<(int Index, T Value)>>(Spells, Enumerable.Empty<(int Index, T Value)>());
                this.Script = Script;
                this.Items = new MaskItem<T, IEnumerable<MaskItemIndexed<T, ItemEntry.Mask<T>?>>>(Items, Enumerable.Empty<MaskItemIndexed<T, ItemEntry.Mask<T>?>>());
                this.Aggression = Aggression;
                this.Confidence = Confidence;
                this.EnergyLevel = EnergyLevel;
                this.Responsibility = Responsibility;
                this.BuySellServices = BuySellServices;
                this.Teaches = Teaches;
                this.MaximumTrainingLevel = MaximumTrainingLevel;
                this.Fluff = Fluff;
                this.AIPackages = new MaskItem<T, IEnumerable<(int Index, T Value)>>(AIPackages, Enumerable.Empty<(int Index, T Value)>());
                this.Animations = new MaskItem<T, IEnumerable<(int Index, T Value)>>(Animations, Enumerable.Empty<(int Index, T Value)>());
                this.Class = Class;
                this.Armorer = Armorer;
                this.Athletics = Athletics;
                this.Blade = Blade;
                this.Block = Block;
                this.Blunt = Blunt;
                this.HandToHand = HandToHand;
                this.HeavyArmor = HeavyArmor;
                this.Alchemy = Alchemy;
                this.Alteration = Alteration;
                this.Conjuration = Conjuration;
                this.Destruction = Destruction;
                this.Illusion = Illusion;
                this.Mysticism = Mysticism;
                this.Restoration = Restoration;
                this.Acrobatics = Acrobatics;
                this.LightArmor = LightArmor;
                this.Marksman = Marksman;
                this.Mercantile = Mercantile;
                this.Security = Security;
                this.Sneak = Sneak;
                this.Speechcraft = Speechcraft;
                this.Health = Health;
                this.Strength = Strength;
                this.Intelligence = Intelligence;
                this.Willpower = Willpower;
                this.Agility = Agility;
                this.Speed = Speed;
                this.Endurance = Endurance;
                this.Personality = Personality;
                this.Luck = Luck;
                this.Hair = Hair;
                this.HairLength = HairLength;
                this.Eyes = new MaskItem<T, IEnumerable<(int Index, T Value)>>(Eyes, Enumerable.Empty<(int Index, T Value)>());
                this.HairColor = HairColor;
                this.CombatStyle = CombatStyle;
                this.FaceGenGeometrySymmetric = FaceGenGeometrySymmetric;
                this.FaceGenGeometryAsymmetric = FaceGenGeometryAsymmetric;
                this.FaceGenTextureSymmetric = FaceGenTextureSymmetric;
                this.Unknown = Unknown;
                this.ACBSDataTypeState = ACBSDataTypeState;
                this.AIDTDataTypeState = AIDTDataTypeState;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T Name;
            public MaskItem<T, Model.Mask<T>?>? Model { get; set; }
            public T Flags;
            public T BaseSpellPoints;
            public T Fatigue;
            public T BarterGold;
            public T LevelOffset;
            public T CalcMin;
            public T CalcMax;
            public MaskItem<T, IEnumerable<MaskItemIndexed<T, RankPlacement.Mask<T>?>>>? Factions;
            public T DeathItem;
            public T Race;
            public MaskItem<T, IEnumerable<(int Index, T Value)>>? Spells;
            public T Script;
            public MaskItem<T, IEnumerable<MaskItemIndexed<T, ItemEntry.Mask<T>?>>>? Items;
            public T Aggression;
            public T Confidence;
            public T EnergyLevel;
            public T Responsibility;
            public T BuySellServices;
            public T Teaches;
            public T MaximumTrainingLevel;
            public T Fluff;
            public MaskItem<T, IEnumerable<(int Index, T Value)>>? AIPackages;
            public MaskItem<T, IEnumerable<(int Index, T Value)>>? Animations;
            public T Class;
            public T Armorer;
            public T Athletics;
            public T Blade;
            public T Block;
            public T Blunt;
            public T HandToHand;
            public T HeavyArmor;
            public T Alchemy;
            public T Alteration;
            public T Conjuration;
            public T Destruction;
            public T Illusion;
            public T Mysticism;
            public T Restoration;
            public T Acrobatics;
            public T LightArmor;
            public T Marksman;
            public T Mercantile;
            public T Security;
            public T Sneak;
            public T Speechcraft;
            public T Health;
            public T Strength;
            public T Intelligence;
            public T Willpower;
            public T Agility;
            public T Speed;
            public T Endurance;
            public T Personality;
            public T Luck;
            public T Hair;
            public T HairLength;
            public MaskItem<T, IEnumerable<(int Index, T Value)>>? Eyes;
            public T HairColor;
            public T CombatStyle;
            public T FaceGenGeometrySymmetric;
            public T FaceGenGeometryAsymmetric;
            public T FaceGenTextureSymmetric;
            public T Unknown;
            public T ACBSDataTypeState;
            public T AIDTDataTypeState;
            public T DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.BaseSpellPoints, rhs.BaseSpellPoints)) return false;
                if (!object.Equals(this.Fatigue, rhs.Fatigue)) return false;
                if (!object.Equals(this.BarterGold, rhs.BarterGold)) return false;
                if (!object.Equals(this.LevelOffset, rhs.LevelOffset)) return false;
                if (!object.Equals(this.CalcMin, rhs.CalcMin)) return false;
                if (!object.Equals(this.CalcMax, rhs.CalcMax)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.DeathItem, rhs.DeathItem)) return false;
                if (!object.Equals(this.Race, rhs.Race)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.Aggression, rhs.Aggression)) return false;
                if (!object.Equals(this.Confidence, rhs.Confidence)) return false;
                if (!object.Equals(this.EnergyLevel, rhs.EnergyLevel)) return false;
                if (!object.Equals(this.Responsibility, rhs.Responsibility)) return false;
                if (!object.Equals(this.BuySellServices, rhs.BuySellServices)) return false;
                if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
                if (!object.Equals(this.MaximumTrainingLevel, rhs.MaximumTrainingLevel)) return false;
                if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
                if (!object.Equals(this.AIPackages, rhs.AIPackages)) return false;
                if (!object.Equals(this.Animations, rhs.Animations)) return false;
                if (!object.Equals(this.Class, rhs.Class)) return false;
                if (!object.Equals(this.Armorer, rhs.Armorer)) return false;
                if (!object.Equals(this.Athletics, rhs.Athletics)) return false;
                if (!object.Equals(this.Blade, rhs.Blade)) return false;
                if (!object.Equals(this.Block, rhs.Block)) return false;
                if (!object.Equals(this.Blunt, rhs.Blunt)) return false;
                if (!object.Equals(this.HandToHand, rhs.HandToHand)) return false;
                if (!object.Equals(this.HeavyArmor, rhs.HeavyArmor)) return false;
                if (!object.Equals(this.Alchemy, rhs.Alchemy)) return false;
                if (!object.Equals(this.Alteration, rhs.Alteration)) return false;
                if (!object.Equals(this.Conjuration, rhs.Conjuration)) return false;
                if (!object.Equals(this.Destruction, rhs.Destruction)) return false;
                if (!object.Equals(this.Illusion, rhs.Illusion)) return false;
                if (!object.Equals(this.Mysticism, rhs.Mysticism)) return false;
                if (!object.Equals(this.Restoration, rhs.Restoration)) return false;
                if (!object.Equals(this.Acrobatics, rhs.Acrobatics)) return false;
                if (!object.Equals(this.LightArmor, rhs.LightArmor)) return false;
                if (!object.Equals(this.Marksman, rhs.Marksman)) return false;
                if (!object.Equals(this.Mercantile, rhs.Mercantile)) return false;
                if (!object.Equals(this.Security, rhs.Security)) return false;
                if (!object.Equals(this.Sneak, rhs.Sneak)) return false;
                if (!object.Equals(this.Speechcraft, rhs.Speechcraft)) return false;
                if (!object.Equals(this.Health, rhs.Health)) return false;
                if (!object.Equals(this.Strength, rhs.Strength)) return false;
                if (!object.Equals(this.Intelligence, rhs.Intelligence)) return false;
                if (!object.Equals(this.Willpower, rhs.Willpower)) return false;
                if (!object.Equals(this.Agility, rhs.Agility)) return false;
                if (!object.Equals(this.Speed, rhs.Speed)) return false;
                if (!object.Equals(this.Endurance, rhs.Endurance)) return false;
                if (!object.Equals(this.Personality, rhs.Personality)) return false;
                if (!object.Equals(this.Luck, rhs.Luck)) return false;
                if (!object.Equals(this.Hair, rhs.Hair)) return false;
                if (!object.Equals(this.HairLength, rhs.HairLength)) return false;
                if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
                if (!object.Equals(this.HairColor, rhs.HairColor)) return false;
                if (!object.Equals(this.CombatStyle, rhs.CombatStyle)) return false;
                if (!object.Equals(this.FaceGenGeometrySymmetric, rhs.FaceGenGeometrySymmetric)) return false;
                if (!object.Equals(this.FaceGenGeometryAsymmetric, rhs.FaceGenGeometryAsymmetric)) return false;
                if (!object.Equals(this.FaceGenTextureSymmetric, rhs.FaceGenTextureSymmetric)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.ACBSDataTypeState, rhs.ACBSDataTypeState)) return false;
                if (!object.Equals(this.AIDTDataTypeState, rhs.AIDTDataTypeState)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Name?.GetHashCode());
                ret = ret.CombineHashCode(this.Model?.GetHashCode());
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.BaseSpellPoints?.GetHashCode());
                ret = ret.CombineHashCode(this.Fatigue?.GetHashCode());
                ret = ret.CombineHashCode(this.BarterGold?.GetHashCode());
                ret = ret.CombineHashCode(this.LevelOffset?.GetHashCode());
                ret = ret.CombineHashCode(this.CalcMin?.GetHashCode());
                ret = ret.CombineHashCode(this.CalcMax?.GetHashCode());
                ret = ret.CombineHashCode(this.Factions?.GetHashCode());
                ret = ret.CombineHashCode(this.DeathItem?.GetHashCode());
                ret = ret.CombineHashCode(this.Race?.GetHashCode());
                ret = ret.CombineHashCode(this.Spells?.GetHashCode());
                ret = ret.CombineHashCode(this.Script?.GetHashCode());
                ret = ret.CombineHashCode(this.Items?.GetHashCode());
                ret = ret.CombineHashCode(this.Aggression?.GetHashCode());
                ret = ret.CombineHashCode(this.Confidence?.GetHashCode());
                ret = ret.CombineHashCode(this.EnergyLevel?.GetHashCode());
                ret = ret.CombineHashCode(this.Responsibility?.GetHashCode());
                ret = ret.CombineHashCode(this.BuySellServices?.GetHashCode());
                ret = ret.CombineHashCode(this.Teaches?.GetHashCode());
                ret = ret.CombineHashCode(this.MaximumTrainingLevel?.GetHashCode());
                ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
                ret = ret.CombineHashCode(this.AIPackages?.GetHashCode());
                ret = ret.CombineHashCode(this.Animations?.GetHashCode());
                ret = ret.CombineHashCode(this.Class?.GetHashCode());
                ret = ret.CombineHashCode(this.Armorer?.GetHashCode());
                ret = ret.CombineHashCode(this.Athletics?.GetHashCode());
                ret = ret.CombineHashCode(this.Blade?.GetHashCode());
                ret = ret.CombineHashCode(this.Block?.GetHashCode());
                ret = ret.CombineHashCode(this.Blunt?.GetHashCode());
                ret = ret.CombineHashCode(this.HandToHand?.GetHashCode());
                ret = ret.CombineHashCode(this.HeavyArmor?.GetHashCode());
                ret = ret.CombineHashCode(this.Alchemy?.GetHashCode());
                ret = ret.CombineHashCode(this.Alteration?.GetHashCode());
                ret = ret.CombineHashCode(this.Conjuration?.GetHashCode());
                ret = ret.CombineHashCode(this.Destruction?.GetHashCode());
                ret = ret.CombineHashCode(this.Illusion?.GetHashCode());
                ret = ret.CombineHashCode(this.Mysticism?.GetHashCode());
                ret = ret.CombineHashCode(this.Restoration?.GetHashCode());
                ret = ret.CombineHashCode(this.Acrobatics?.GetHashCode());
                ret = ret.CombineHashCode(this.LightArmor?.GetHashCode());
                ret = ret.CombineHashCode(this.Marksman?.GetHashCode());
                ret = ret.CombineHashCode(this.Mercantile?.GetHashCode());
                ret = ret.CombineHashCode(this.Security?.GetHashCode());
                ret = ret.CombineHashCode(this.Sneak?.GetHashCode());
                ret = ret.CombineHashCode(this.Speechcraft?.GetHashCode());
                ret = ret.CombineHashCode(this.Health?.GetHashCode());
                ret = ret.CombineHashCode(this.Strength?.GetHashCode());
                ret = ret.CombineHashCode(this.Intelligence?.GetHashCode());
                ret = ret.CombineHashCode(this.Willpower?.GetHashCode());
                ret = ret.CombineHashCode(this.Agility?.GetHashCode());
                ret = ret.CombineHashCode(this.Speed?.GetHashCode());
                ret = ret.CombineHashCode(this.Endurance?.GetHashCode());
                ret = ret.CombineHashCode(this.Personality?.GetHashCode());
                ret = ret.CombineHashCode(this.Luck?.GetHashCode());
                ret = ret.CombineHashCode(this.Hair?.GetHashCode());
                ret = ret.CombineHashCode(this.HairLength?.GetHashCode());
                ret = ret.CombineHashCode(this.Eyes?.GetHashCode());
                ret = ret.CombineHashCode(this.HairColor?.GetHashCode());
                ret = ret.CombineHashCode(this.CombatStyle?.GetHashCode());
                ret = ret.CombineHashCode(this.FaceGenGeometrySymmetric?.GetHashCode());
                ret = ret.CombineHashCode(this.FaceGenGeometryAsymmetric?.GetHashCode());
                ret = ret.CombineHashCode(this.FaceGenTextureSymmetric?.GetHashCode());
                ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
                ret = ret.CombineHashCode(this.ACBSDataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(this.AIDTDataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All Equal
            public override bool AllEqual(Func<T, bool> eval)
            {
                if (!base.AllEqual(eval)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.BaseSpellPoints)) return false;
                if (!eval(this.Fatigue)) return false;
                if (!eval(this.BarterGold)) return false;
                if (!eval(this.LevelOffset)) return false;
                if (!eval(this.CalcMin)) return false;
                if (!eval(this.CalcMax)) return false;
                if (this.Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DeathItem)) return false;
                if (!eval(this.Race)) return false;
                if (this.Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Script)) return false;
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Aggression)) return false;
                if (!eval(this.Confidence)) return false;
                if (!eval(this.EnergyLevel)) return false;
                if (!eval(this.Responsibility)) return false;
                if (!eval(this.BuySellServices)) return false;
                if (!eval(this.Teaches)) return false;
                if (!eval(this.MaximumTrainingLevel)) return false;
                if (!eval(this.Fluff)) return false;
                if (this.AIPackages != null)
                {
                    if (!eval(this.AIPackages.Overall)) return false;
                    if (this.AIPackages.Specific != null)
                    {
                        foreach (var item in this.AIPackages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Animations != null)
                {
                    if (!eval(this.Animations.Overall)) return false;
                    if (this.Animations.Specific != null)
                    {
                        foreach (var item in this.Animations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Class)) return false;
                if (!eval(this.Armorer)) return false;
                if (!eval(this.Athletics)) return false;
                if (!eval(this.Blade)) return false;
                if (!eval(this.Block)) return false;
                if (!eval(this.Blunt)) return false;
                if (!eval(this.HandToHand)) return false;
                if (!eval(this.HeavyArmor)) return false;
                if (!eval(this.Alchemy)) return false;
                if (!eval(this.Alteration)) return false;
                if (!eval(this.Conjuration)) return false;
                if (!eval(this.Destruction)) return false;
                if (!eval(this.Illusion)) return false;
                if (!eval(this.Mysticism)) return false;
                if (!eval(this.Restoration)) return false;
                if (!eval(this.Acrobatics)) return false;
                if (!eval(this.LightArmor)) return false;
                if (!eval(this.Marksman)) return false;
                if (!eval(this.Mercantile)) return false;
                if (!eval(this.Security)) return false;
                if (!eval(this.Sneak)) return false;
                if (!eval(this.Speechcraft)) return false;
                if (!eval(this.Health)) return false;
                if (!eval(this.Strength)) return false;
                if (!eval(this.Intelligence)) return false;
                if (!eval(this.Willpower)) return false;
                if (!eval(this.Agility)) return false;
                if (!eval(this.Speed)) return false;
                if (!eval(this.Endurance)) return false;
                if (!eval(this.Personality)) return false;
                if (!eval(this.Luck)) return false;
                if (!eval(this.Hair)) return false;
                if (!eval(this.HairLength)) return false;
                if (this.Eyes != null)
                {
                    if (!eval(this.Eyes.Overall)) return false;
                    if (this.Eyes.Specific != null)
                    {
                        foreach (var item in this.Eyes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.HairColor)) return false;
                if (!eval(this.CombatStyle)) return false;
                if (!eval(this.FaceGenGeometrySymmetric)) return false;
                if (!eval(this.FaceGenGeometryAsymmetric)) return false;
                if (!eval(this.FaceGenTextureSymmetric)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.ACBSDataTypeState)) return false;
                if (!eval(this.AIDTDataTypeState)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new NPC.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                obj.BaseSpellPoints = eval(this.BaseSpellPoints);
                obj.Fatigue = eval(this.Fatigue);
                obj.BarterGold = eval(this.BarterGold);
                obj.LevelOffset = eval(this.LevelOffset);
                obj.CalcMin = eval(this.CalcMin);
                obj.CalcMax = eval(this.CalcMax);
                if (Factions != null)
                {
                    obj.Factions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RankPlacement.Mask<R>?>>>(eval(this.Factions.Overall), Enumerable.Empty<MaskItemIndexed<R, RankPlacement.Mask<R>?>>());
                    if (Factions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RankPlacement.Mask<R>?>>();
                        obj.Factions.Specific = l;
                        foreach (var item in Factions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, RankPlacement.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, RankPlacement.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DeathItem = eval(this.DeathItem);
                obj.Race = eval(this.Race);
                if (Spells != null)
                {
                    obj.Spells = new MaskItem<R, IEnumerable<(int Index, R Value)>>(eval(this.Spells.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Spells.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Spells.Specific = l;
                        foreach (var item in Spells.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Script = eval(this.Script);
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ItemEntry.Mask<R>?>>>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, ItemEntry.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ItemEntry.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ItemEntry.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ItemEntry.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Aggression = eval(this.Aggression);
                obj.Confidence = eval(this.Confidence);
                obj.EnergyLevel = eval(this.EnergyLevel);
                obj.Responsibility = eval(this.Responsibility);
                obj.BuySellServices = eval(this.BuySellServices);
                obj.Teaches = eval(this.Teaches);
                obj.MaximumTrainingLevel = eval(this.MaximumTrainingLevel);
                obj.Fluff = eval(this.Fluff);
                if (AIPackages != null)
                {
                    obj.AIPackages = new MaskItem<R, IEnumerable<(int Index, R Value)>>(eval(this.AIPackages.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AIPackages.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AIPackages.Specific = l;
                        foreach (var item in AIPackages.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Animations != null)
                {
                    obj.Animations = new MaskItem<R, IEnumerable<(int Index, R Value)>>(eval(this.Animations.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Animations.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Animations.Specific = l;
                        foreach (var item in Animations.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Class = eval(this.Class);
                obj.Armorer = eval(this.Armorer);
                obj.Athletics = eval(this.Athletics);
                obj.Blade = eval(this.Blade);
                obj.Block = eval(this.Block);
                obj.Blunt = eval(this.Blunt);
                obj.HandToHand = eval(this.HandToHand);
                obj.HeavyArmor = eval(this.HeavyArmor);
                obj.Alchemy = eval(this.Alchemy);
                obj.Alteration = eval(this.Alteration);
                obj.Conjuration = eval(this.Conjuration);
                obj.Destruction = eval(this.Destruction);
                obj.Illusion = eval(this.Illusion);
                obj.Mysticism = eval(this.Mysticism);
                obj.Restoration = eval(this.Restoration);
                obj.Acrobatics = eval(this.Acrobatics);
                obj.LightArmor = eval(this.LightArmor);
                obj.Marksman = eval(this.Marksman);
                obj.Mercantile = eval(this.Mercantile);
                obj.Security = eval(this.Security);
                obj.Sneak = eval(this.Sneak);
                obj.Speechcraft = eval(this.Speechcraft);
                obj.Health = eval(this.Health);
                obj.Strength = eval(this.Strength);
                obj.Intelligence = eval(this.Intelligence);
                obj.Willpower = eval(this.Willpower);
                obj.Agility = eval(this.Agility);
                obj.Speed = eval(this.Speed);
                obj.Endurance = eval(this.Endurance);
                obj.Personality = eval(this.Personality);
                obj.Luck = eval(this.Luck);
                obj.Hair = eval(this.Hair);
                obj.HairLength = eval(this.HairLength);
                if (Eyes != null)
                {
                    obj.Eyes = new MaskItem<R, IEnumerable<(int Index, R Value)>>(eval(this.Eyes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Eyes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Eyes.Specific = l;
                        foreach (var item in Eyes.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.HairColor = eval(this.HairColor);
                obj.CombatStyle = eval(this.CombatStyle);
                obj.FaceGenGeometrySymmetric = eval(this.FaceGenGeometrySymmetric);
                obj.FaceGenGeometryAsymmetric = eval(this.FaceGenGeometryAsymmetric);
                obj.FaceGenTextureSymmetric = eval(this.FaceGenTextureSymmetric);
                obj.Unknown = eval(this.Unknown);
                obj.ACBSDataTypeState = eval(this.ACBSDataTypeState);
                obj.AIDTDataTypeState = eval(this.AIDTDataTypeState);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(NPC.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, NPC.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(NPC.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendLine($"Name => {Name}");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendLine($"Flags => {Flags}");
                    }
                    if (printMask?.BaseSpellPoints ?? true)
                    {
                        fg.AppendLine($"BaseSpellPoints => {BaseSpellPoints}");
                    }
                    if (printMask?.Fatigue ?? true)
                    {
                        fg.AppendLine($"Fatigue => {Fatigue}");
                    }
                    if (printMask?.BarterGold ?? true)
                    {
                        fg.AppendLine($"BarterGold => {BarterGold}");
                    }
                    if (printMask?.LevelOffset ?? true)
                    {
                        fg.AppendLine($"LevelOffset => {LevelOffset}");
                    }
                    if (printMask?.CalcMin ?? true)
                    {
                        fg.AppendLine($"CalcMin => {CalcMin}");
                    }
                    if (printMask?.CalcMax ?? true)
                    {
                        fg.AppendLine($"CalcMax => {CalcMax}");
                    }
                    if (printMask?.Factions?.Overall ?? true)
                    {
                        fg.AppendLine("Factions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Factions != null)
                            {
                                if (Factions.Overall != null)
                                {
                                    fg.AppendLine(Factions.Overall.ToString());
                                }
                                if (Factions.Specific != null)
                                {
                                    foreach (var subItem in Factions.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            subItem?.ToString(fg);
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.DeathItem ?? true)
                    {
                        fg.AppendLine($"DeathItem => {DeathItem}");
                    }
                    if (printMask?.Race ?? true)
                    {
                        fg.AppendLine($"Race => {Race}");
                    }
                    if (printMask?.Spells?.Overall ?? true)
                    {
                        fg.AppendLine("Spells =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Spells != null)
                            {
                                if (Spells.Overall != null)
                                {
                                    fg.AppendLine(Spells.Overall.ToString());
                                }
                                if (Spells.Specific != null)
                                {
                                    foreach (var subItem in Spells.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem}");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Script ?? true)
                    {
                        fg.AppendLine($"Script => {Script}");
                    }
                    if (printMask?.Items?.Overall ?? true)
                    {
                        fg.AppendLine("Items =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Items != null)
                            {
                                if (Items.Overall != null)
                                {
                                    fg.AppendLine(Items.Overall.ToString());
                                }
                                if (Items.Specific != null)
                                {
                                    foreach (var subItem in Items.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            subItem?.ToString(fg);
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Aggression ?? true)
                    {
                        fg.AppendLine($"Aggression => {Aggression}");
                    }
                    if (printMask?.Confidence ?? true)
                    {
                        fg.AppendLine($"Confidence => {Confidence}");
                    }
                    if (printMask?.EnergyLevel ?? true)
                    {
                        fg.AppendLine($"EnergyLevel => {EnergyLevel}");
                    }
                    if (printMask?.Responsibility ?? true)
                    {
                        fg.AppendLine($"Responsibility => {Responsibility}");
                    }
                    if (printMask?.BuySellServices ?? true)
                    {
                        fg.AppendLine($"BuySellServices => {BuySellServices}");
                    }
                    if (printMask?.Teaches ?? true)
                    {
                        fg.AppendLine($"Teaches => {Teaches}");
                    }
                    if (printMask?.MaximumTrainingLevel ?? true)
                    {
                        fg.AppendLine($"MaximumTrainingLevel => {MaximumTrainingLevel}");
                    }
                    if (printMask?.Fluff ?? true)
                    {
                        fg.AppendLine($"Fluff => {Fluff}");
                    }
                    if (printMask?.AIPackages?.Overall ?? true)
                    {
                        fg.AppendLine("AIPackages =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (AIPackages != null)
                            {
                                if (AIPackages.Overall != null)
                                {
                                    fg.AppendLine(AIPackages.Overall.ToString());
                                }
                                if (AIPackages.Specific != null)
                                {
                                    foreach (var subItem in AIPackages.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem}");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Animations?.Overall ?? true)
                    {
                        fg.AppendLine("Animations =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Animations != null)
                            {
                                if (Animations.Overall != null)
                                {
                                    fg.AppendLine(Animations.Overall.ToString());
                                }
                                if (Animations.Specific != null)
                                {
                                    foreach (var subItem in Animations.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem}");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Class ?? true)
                    {
                        fg.AppendLine($"Class => {Class}");
                    }
                    if (printMask?.Armorer ?? true)
                    {
                        fg.AppendLine($"Armorer => {Armorer}");
                    }
                    if (printMask?.Athletics ?? true)
                    {
                        fg.AppendLine($"Athletics => {Athletics}");
                    }
                    if (printMask?.Blade ?? true)
                    {
                        fg.AppendLine($"Blade => {Blade}");
                    }
                    if (printMask?.Block ?? true)
                    {
                        fg.AppendLine($"Block => {Block}");
                    }
                    if (printMask?.Blunt ?? true)
                    {
                        fg.AppendLine($"Blunt => {Blunt}");
                    }
                    if (printMask?.HandToHand ?? true)
                    {
                        fg.AppendLine($"HandToHand => {HandToHand}");
                    }
                    if (printMask?.HeavyArmor ?? true)
                    {
                        fg.AppendLine($"HeavyArmor => {HeavyArmor}");
                    }
                    if (printMask?.Alchemy ?? true)
                    {
                        fg.AppendLine($"Alchemy => {Alchemy}");
                    }
                    if (printMask?.Alteration ?? true)
                    {
                        fg.AppendLine($"Alteration => {Alteration}");
                    }
                    if (printMask?.Conjuration ?? true)
                    {
                        fg.AppendLine($"Conjuration => {Conjuration}");
                    }
                    if (printMask?.Destruction ?? true)
                    {
                        fg.AppendLine($"Destruction => {Destruction}");
                    }
                    if (printMask?.Illusion ?? true)
                    {
                        fg.AppendLine($"Illusion => {Illusion}");
                    }
                    if (printMask?.Mysticism ?? true)
                    {
                        fg.AppendLine($"Mysticism => {Mysticism}");
                    }
                    if (printMask?.Restoration ?? true)
                    {
                        fg.AppendLine($"Restoration => {Restoration}");
                    }
                    if (printMask?.Acrobatics ?? true)
                    {
                        fg.AppendLine($"Acrobatics => {Acrobatics}");
                    }
                    if (printMask?.LightArmor ?? true)
                    {
                        fg.AppendLine($"LightArmor => {LightArmor}");
                    }
                    if (printMask?.Marksman ?? true)
                    {
                        fg.AppendLine($"Marksman => {Marksman}");
                    }
                    if (printMask?.Mercantile ?? true)
                    {
                        fg.AppendLine($"Mercantile => {Mercantile}");
                    }
                    if (printMask?.Security ?? true)
                    {
                        fg.AppendLine($"Security => {Security}");
                    }
                    if (printMask?.Sneak ?? true)
                    {
                        fg.AppendLine($"Sneak => {Sneak}");
                    }
                    if (printMask?.Speechcraft ?? true)
                    {
                        fg.AppendLine($"Speechcraft => {Speechcraft}");
                    }
                    if (printMask?.Health ?? true)
                    {
                        fg.AppendLine($"Health => {Health}");
                    }
                    if (printMask?.Strength ?? true)
                    {
                        fg.AppendLine($"Strength => {Strength}");
                    }
                    if (printMask?.Intelligence ?? true)
                    {
                        fg.AppendLine($"Intelligence => {Intelligence}");
                    }
                    if (printMask?.Willpower ?? true)
                    {
                        fg.AppendLine($"Willpower => {Willpower}");
                    }
                    if (printMask?.Agility ?? true)
                    {
                        fg.AppendLine($"Agility => {Agility}");
                    }
                    if (printMask?.Speed ?? true)
                    {
                        fg.AppendLine($"Speed => {Speed}");
                    }
                    if (printMask?.Endurance ?? true)
                    {
                        fg.AppendLine($"Endurance => {Endurance}");
                    }
                    if (printMask?.Personality ?? true)
                    {
                        fg.AppendLine($"Personality => {Personality}");
                    }
                    if (printMask?.Luck ?? true)
                    {
                        fg.AppendLine($"Luck => {Luck}");
                    }
                    if (printMask?.Hair ?? true)
                    {
                        fg.AppendLine($"Hair => {Hair}");
                    }
                    if (printMask?.HairLength ?? true)
                    {
                        fg.AppendLine($"HairLength => {HairLength}");
                    }
                    if (printMask?.Eyes?.Overall ?? true)
                    {
                        fg.AppendLine("Eyes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Eyes != null)
                            {
                                if (Eyes.Overall != null)
                                {
                                    fg.AppendLine(Eyes.Overall.ToString());
                                }
                                if (Eyes.Specific != null)
                                {
                                    foreach (var subItem in Eyes.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem}");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.HairColor ?? true)
                    {
                        fg.AppendLine($"HairColor => {HairColor}");
                    }
                    if (printMask?.CombatStyle ?? true)
                    {
                        fg.AppendLine($"CombatStyle => {CombatStyle}");
                    }
                    if (printMask?.FaceGenGeometrySymmetric ?? true)
                    {
                        fg.AppendLine($"FaceGenGeometrySymmetric => {FaceGenGeometrySymmetric}");
                    }
                    if (printMask?.FaceGenGeometryAsymmetric ?? true)
                    {
                        fg.AppendLine($"FaceGenGeometryAsymmetric => {FaceGenGeometryAsymmetric}");
                    }
                    if (printMask?.FaceGenTextureSymmetric ?? true)
                    {
                        fg.AppendLine($"FaceGenTextureSymmetric => {FaceGenTextureSymmetric}");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendLine($"Unknown => {Unknown}");
                    }
                    if (printMask?.ACBSDataTypeState ?? true)
                    {
                        fg.AppendLine($"ACBSDataTypeState => {ACBSDataTypeState}");
                    }
                    if (printMask?.AIDTDataTypeState ?? true)
                    {
                        fg.AppendLine($"AIDTDataTypeState => {AIDTDataTypeState}");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            NPCAbstract.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Flags;
            public Exception? BaseSpellPoints;
            public Exception? Fatigue;
            public Exception? BarterGold;
            public Exception? LevelOffset;
            public Exception? CalcMin;
            public Exception? CalcMax;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>? Factions;
            public Exception? DeathItem;
            public Exception? Race;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Spells;
            public Exception? Script;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>? Items;
            public Exception? Aggression;
            public Exception? Confidence;
            public Exception? EnergyLevel;
            public Exception? Responsibility;
            public Exception? BuySellServices;
            public Exception? Teaches;
            public Exception? MaximumTrainingLevel;
            public Exception? Fluff;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AIPackages;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Animations;
            public Exception? Class;
            public Exception? Armorer;
            public Exception? Athletics;
            public Exception? Blade;
            public Exception? Block;
            public Exception? Blunt;
            public Exception? HandToHand;
            public Exception? HeavyArmor;
            public Exception? Alchemy;
            public Exception? Alteration;
            public Exception? Conjuration;
            public Exception? Destruction;
            public Exception? Illusion;
            public Exception? Mysticism;
            public Exception? Restoration;
            public Exception? Acrobatics;
            public Exception? LightArmor;
            public Exception? Marksman;
            public Exception? Mercantile;
            public Exception? Security;
            public Exception? Sneak;
            public Exception? Speechcraft;
            public Exception? Health;
            public Exception? Strength;
            public Exception? Intelligence;
            public Exception? Willpower;
            public Exception? Agility;
            public Exception? Speed;
            public Exception? Endurance;
            public Exception? Personality;
            public Exception? Luck;
            public Exception? Hair;
            public Exception? HairLength;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Eyes;
            public Exception? HairColor;
            public Exception? CombatStyle;
            public Exception? FaceGenGeometrySymmetric;
            public Exception? FaceGenGeometryAsymmetric;
            public Exception? FaceGenTextureSymmetric;
            public Exception? Unknown;
            public Exception? ACBSDataTypeState;
            public Exception? AIDTDataTypeState;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                NPC_FieldIndex enu = (NPC_FieldIndex)index;
                switch (enu)
                {
                    case NPC_FieldIndex.Name:
                        return Name;
                    case NPC_FieldIndex.Model:
                        return Model;
                    case NPC_FieldIndex.Flags:
                        return Flags;
                    case NPC_FieldIndex.BaseSpellPoints:
                        return BaseSpellPoints;
                    case NPC_FieldIndex.Fatigue:
                        return Fatigue;
                    case NPC_FieldIndex.BarterGold:
                        return BarterGold;
                    case NPC_FieldIndex.LevelOffset:
                        return LevelOffset;
                    case NPC_FieldIndex.CalcMin:
                        return CalcMin;
                    case NPC_FieldIndex.CalcMax:
                        return CalcMax;
                    case NPC_FieldIndex.Factions:
                        return Factions;
                    case NPC_FieldIndex.DeathItem:
                        return DeathItem;
                    case NPC_FieldIndex.Race:
                        return Race;
                    case NPC_FieldIndex.Spells:
                        return Spells;
                    case NPC_FieldIndex.Script:
                        return Script;
                    case NPC_FieldIndex.Items:
                        return Items;
                    case NPC_FieldIndex.Aggression:
                        return Aggression;
                    case NPC_FieldIndex.Confidence:
                        return Confidence;
                    case NPC_FieldIndex.EnergyLevel:
                        return EnergyLevel;
                    case NPC_FieldIndex.Responsibility:
                        return Responsibility;
                    case NPC_FieldIndex.BuySellServices:
                        return BuySellServices;
                    case NPC_FieldIndex.Teaches:
                        return Teaches;
                    case NPC_FieldIndex.MaximumTrainingLevel:
                        return MaximumTrainingLevel;
                    case NPC_FieldIndex.Fluff:
                        return Fluff;
                    case NPC_FieldIndex.AIPackages:
                        return AIPackages;
                    case NPC_FieldIndex.Animations:
                        return Animations;
                    case NPC_FieldIndex.Class:
                        return Class;
                    case NPC_FieldIndex.Armorer:
                        return Armorer;
                    case NPC_FieldIndex.Athletics:
                        return Athletics;
                    case NPC_FieldIndex.Blade:
                        return Blade;
                    case NPC_FieldIndex.Block:
                        return Block;
                    case NPC_FieldIndex.Blunt:
                        return Blunt;
                    case NPC_FieldIndex.HandToHand:
                        return HandToHand;
                    case NPC_FieldIndex.HeavyArmor:
                        return HeavyArmor;
                    case NPC_FieldIndex.Alchemy:
                        return Alchemy;
                    case NPC_FieldIndex.Alteration:
                        return Alteration;
                    case NPC_FieldIndex.Conjuration:
                        return Conjuration;
                    case NPC_FieldIndex.Destruction:
                        return Destruction;
                    case NPC_FieldIndex.Illusion:
                        return Illusion;
                    case NPC_FieldIndex.Mysticism:
                        return Mysticism;
                    case NPC_FieldIndex.Restoration:
                        return Restoration;
                    case NPC_FieldIndex.Acrobatics:
                        return Acrobatics;
                    case NPC_FieldIndex.LightArmor:
                        return LightArmor;
                    case NPC_FieldIndex.Marksman:
                        return Marksman;
                    case NPC_FieldIndex.Mercantile:
                        return Mercantile;
                    case NPC_FieldIndex.Security:
                        return Security;
                    case NPC_FieldIndex.Sneak:
                        return Sneak;
                    case NPC_FieldIndex.Speechcraft:
                        return Speechcraft;
                    case NPC_FieldIndex.Health:
                        return Health;
                    case NPC_FieldIndex.Strength:
                        return Strength;
                    case NPC_FieldIndex.Intelligence:
                        return Intelligence;
                    case NPC_FieldIndex.Willpower:
                        return Willpower;
                    case NPC_FieldIndex.Agility:
                        return Agility;
                    case NPC_FieldIndex.Speed:
                        return Speed;
                    case NPC_FieldIndex.Endurance:
                        return Endurance;
                    case NPC_FieldIndex.Personality:
                        return Personality;
                    case NPC_FieldIndex.Luck:
                        return Luck;
                    case NPC_FieldIndex.Hair:
                        return Hair;
                    case NPC_FieldIndex.HairLength:
                        return HairLength;
                    case NPC_FieldIndex.Eyes:
                        return Eyes;
                    case NPC_FieldIndex.HairColor:
                        return HairColor;
                    case NPC_FieldIndex.CombatStyle:
                        return CombatStyle;
                    case NPC_FieldIndex.FaceGenGeometrySymmetric:
                        return FaceGenGeometrySymmetric;
                    case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                        return FaceGenGeometryAsymmetric;
                    case NPC_FieldIndex.FaceGenTextureSymmetric:
                        return FaceGenTextureSymmetric;
                    case NPC_FieldIndex.Unknown:
                        return Unknown;
                    case NPC_FieldIndex.ACBSDataTypeState:
                        return ACBSDataTypeState;
                    case NPC_FieldIndex.AIDTDataTypeState:
                        return AIDTDataTypeState;
                    case NPC_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                NPC_FieldIndex enu = (NPC_FieldIndex)index;
                switch (enu)
                {
                    case NPC_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case NPC_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case NPC_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case NPC_FieldIndex.BaseSpellPoints:
                        this.BaseSpellPoints = ex;
                        break;
                    case NPC_FieldIndex.Fatigue:
                        this.Fatigue = ex;
                        break;
                    case NPC_FieldIndex.BarterGold:
                        this.BarterGold = ex;
                        break;
                    case NPC_FieldIndex.LevelOffset:
                        this.LevelOffset = ex;
                        break;
                    case NPC_FieldIndex.CalcMin:
                        this.CalcMin = ex;
                        break;
                    case NPC_FieldIndex.CalcMax:
                        this.CalcMax = ex;
                        break;
                    case NPC_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(ex, null);
                        break;
                    case NPC_FieldIndex.DeathItem:
                        this.DeathItem = ex;
                        break;
                    case NPC_FieldIndex.Race:
                        this.Race = ex;
                        break;
                    case NPC_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case NPC_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case NPC_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case NPC_FieldIndex.Aggression:
                        this.Aggression = ex;
                        break;
                    case NPC_FieldIndex.Confidence:
                        this.Confidence = ex;
                        break;
                    case NPC_FieldIndex.EnergyLevel:
                        this.EnergyLevel = ex;
                        break;
                    case NPC_FieldIndex.Responsibility:
                        this.Responsibility = ex;
                        break;
                    case NPC_FieldIndex.BuySellServices:
                        this.BuySellServices = ex;
                        break;
                    case NPC_FieldIndex.Teaches:
                        this.Teaches = ex;
                        break;
                    case NPC_FieldIndex.MaximumTrainingLevel:
                        this.MaximumTrainingLevel = ex;
                        break;
                    case NPC_FieldIndex.Fluff:
                        this.Fluff = ex;
                        break;
                    case NPC_FieldIndex.AIPackages:
                        this.AIPackages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case NPC_FieldIndex.Animations:
                        this.Animations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case NPC_FieldIndex.Class:
                        this.Class = ex;
                        break;
                    case NPC_FieldIndex.Armorer:
                        this.Armorer = ex;
                        break;
                    case NPC_FieldIndex.Athletics:
                        this.Athletics = ex;
                        break;
                    case NPC_FieldIndex.Blade:
                        this.Blade = ex;
                        break;
                    case NPC_FieldIndex.Block:
                        this.Block = ex;
                        break;
                    case NPC_FieldIndex.Blunt:
                        this.Blunt = ex;
                        break;
                    case NPC_FieldIndex.HandToHand:
                        this.HandToHand = ex;
                        break;
                    case NPC_FieldIndex.HeavyArmor:
                        this.HeavyArmor = ex;
                        break;
                    case NPC_FieldIndex.Alchemy:
                        this.Alchemy = ex;
                        break;
                    case NPC_FieldIndex.Alteration:
                        this.Alteration = ex;
                        break;
                    case NPC_FieldIndex.Conjuration:
                        this.Conjuration = ex;
                        break;
                    case NPC_FieldIndex.Destruction:
                        this.Destruction = ex;
                        break;
                    case NPC_FieldIndex.Illusion:
                        this.Illusion = ex;
                        break;
                    case NPC_FieldIndex.Mysticism:
                        this.Mysticism = ex;
                        break;
                    case NPC_FieldIndex.Restoration:
                        this.Restoration = ex;
                        break;
                    case NPC_FieldIndex.Acrobatics:
                        this.Acrobatics = ex;
                        break;
                    case NPC_FieldIndex.LightArmor:
                        this.LightArmor = ex;
                        break;
                    case NPC_FieldIndex.Marksman:
                        this.Marksman = ex;
                        break;
                    case NPC_FieldIndex.Mercantile:
                        this.Mercantile = ex;
                        break;
                    case NPC_FieldIndex.Security:
                        this.Security = ex;
                        break;
                    case NPC_FieldIndex.Sneak:
                        this.Sneak = ex;
                        break;
                    case NPC_FieldIndex.Speechcraft:
                        this.Speechcraft = ex;
                        break;
                    case NPC_FieldIndex.Health:
                        this.Health = ex;
                        break;
                    case NPC_FieldIndex.Strength:
                        this.Strength = ex;
                        break;
                    case NPC_FieldIndex.Intelligence:
                        this.Intelligence = ex;
                        break;
                    case NPC_FieldIndex.Willpower:
                        this.Willpower = ex;
                        break;
                    case NPC_FieldIndex.Agility:
                        this.Agility = ex;
                        break;
                    case NPC_FieldIndex.Speed:
                        this.Speed = ex;
                        break;
                    case NPC_FieldIndex.Endurance:
                        this.Endurance = ex;
                        break;
                    case NPC_FieldIndex.Personality:
                        this.Personality = ex;
                        break;
                    case NPC_FieldIndex.Luck:
                        this.Luck = ex;
                        break;
                    case NPC_FieldIndex.Hair:
                        this.Hair = ex;
                        break;
                    case NPC_FieldIndex.HairLength:
                        this.HairLength = ex;
                        break;
                    case NPC_FieldIndex.Eyes:
                        this.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case NPC_FieldIndex.HairColor:
                        this.HairColor = ex;
                        break;
                    case NPC_FieldIndex.CombatStyle:
                        this.CombatStyle = ex;
                        break;
                    case NPC_FieldIndex.FaceGenGeometrySymmetric:
                        this.FaceGenGeometrySymmetric = ex;
                        break;
                    case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                        this.FaceGenGeometryAsymmetric = ex;
                        break;
                    case NPC_FieldIndex.FaceGenTextureSymmetric:
                        this.FaceGenTextureSymmetric = ex;
                        break;
                    case NPC_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case NPC_FieldIndex.ACBSDataTypeState:
                        this.ACBSDataTypeState = ex;
                        break;
                    case NPC_FieldIndex.AIDTDataTypeState:
                        this.AIDTDataTypeState = ex;
                        break;
                    case NPC_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                NPC_FieldIndex enu = (NPC_FieldIndex)index;
                switch (enu)
                {
                    case NPC_FieldIndex.Name:
                        this.Name = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case NPC_FieldIndex.Flags:
                        this.Flags = (Exception)obj;
                        break;
                    case NPC_FieldIndex.BaseSpellPoints:
                        this.BaseSpellPoints = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Fatigue:
                        this.Fatigue = (Exception)obj;
                        break;
                    case NPC_FieldIndex.BarterGold:
                        this.BarterGold = (Exception)obj;
                        break;
                    case NPC_FieldIndex.LevelOffset:
                        this.LevelOffset = (Exception)obj;
                        break;
                    case NPC_FieldIndex.CalcMin:
                        this.CalcMin = (Exception)obj;
                        break;
                    case NPC_FieldIndex.CalcMax:
                        this.CalcMax = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>)obj;
                        break;
                    case NPC_FieldIndex.DeathItem:
                        this.DeathItem = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Race:
                        this.Race = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case NPC_FieldIndex.Script:
                        this.Script = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>)obj;
                        break;
                    case NPC_FieldIndex.Aggression:
                        this.Aggression = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Confidence:
                        this.Confidence = (Exception)obj;
                        break;
                    case NPC_FieldIndex.EnergyLevel:
                        this.EnergyLevel = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Responsibility:
                        this.Responsibility = (Exception)obj;
                        break;
                    case NPC_FieldIndex.BuySellServices:
                        this.BuySellServices = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Teaches:
                        this.Teaches = (Exception)obj;
                        break;
                    case NPC_FieldIndex.MaximumTrainingLevel:
                        this.MaximumTrainingLevel = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Fluff:
                        this.Fluff = (Exception)obj;
                        break;
                    case NPC_FieldIndex.AIPackages:
                        this.AIPackages = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case NPC_FieldIndex.Animations:
                        this.Animations = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case NPC_FieldIndex.Class:
                        this.Class = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Armorer:
                        this.Armorer = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Athletics:
                        this.Athletics = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Blade:
                        this.Blade = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Block:
                        this.Block = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Blunt:
                        this.Blunt = (Exception)obj;
                        break;
                    case NPC_FieldIndex.HandToHand:
                        this.HandToHand = (Exception)obj;
                        break;
                    case NPC_FieldIndex.HeavyArmor:
                        this.HeavyArmor = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Alchemy:
                        this.Alchemy = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Alteration:
                        this.Alteration = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Conjuration:
                        this.Conjuration = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Destruction:
                        this.Destruction = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Illusion:
                        this.Illusion = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Mysticism:
                        this.Mysticism = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Restoration:
                        this.Restoration = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Acrobatics:
                        this.Acrobatics = (Exception)obj;
                        break;
                    case NPC_FieldIndex.LightArmor:
                        this.LightArmor = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Marksman:
                        this.Marksman = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Mercantile:
                        this.Mercantile = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Security:
                        this.Security = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Sneak:
                        this.Sneak = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Speechcraft:
                        this.Speechcraft = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Health:
                        this.Health = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Strength:
                        this.Strength = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Intelligence:
                        this.Intelligence = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Willpower:
                        this.Willpower = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Agility:
                        this.Agility = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Speed:
                        this.Speed = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Endurance:
                        this.Endurance = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Personality:
                        this.Personality = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Luck:
                        this.Luck = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Hair:
                        this.Hair = (Exception)obj;
                        break;
                    case NPC_FieldIndex.HairLength:
                        this.HairLength = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Eyes:
                        this.Eyes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case NPC_FieldIndex.HairColor:
                        this.HairColor = (Exception)obj;
                        break;
                    case NPC_FieldIndex.CombatStyle:
                        this.CombatStyle = (Exception)obj;
                        break;
                    case NPC_FieldIndex.FaceGenGeometrySymmetric:
                        this.FaceGenGeometrySymmetric = (Exception)obj;
                        break;
                    case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                        this.FaceGenGeometryAsymmetric = (Exception)obj;
                        break;
                    case NPC_FieldIndex.FaceGenTextureSymmetric:
                        this.FaceGenTextureSymmetric = (Exception)obj;
                        break;
                    case NPC_FieldIndex.Unknown:
                        this.Unknown = (Exception)obj;
                        break;
                    case NPC_FieldIndex.ACBSDataTypeState:
                        this.ACBSDataTypeState = (Exception)obj;
                        break;
                    case NPC_FieldIndex.AIDTDataTypeState:
                        this.AIDTDataTypeState = (Exception)obj;
                        break;
                    case NPC_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Flags != null) return true;
                if (BaseSpellPoints != null) return true;
                if (Fatigue != null) return true;
                if (BarterGold != null) return true;
                if (LevelOffset != null) return true;
                if (CalcMin != null) return true;
                if (CalcMax != null) return true;
                if (Factions != null) return true;
                if (DeathItem != null) return true;
                if (Race != null) return true;
                if (Spells != null) return true;
                if (Script != null) return true;
                if (Items != null) return true;
                if (Aggression != null) return true;
                if (Confidence != null) return true;
                if (EnergyLevel != null) return true;
                if (Responsibility != null) return true;
                if (BuySellServices != null) return true;
                if (Teaches != null) return true;
                if (MaximumTrainingLevel != null) return true;
                if (Fluff != null) return true;
                if (AIPackages != null) return true;
                if (Animations != null) return true;
                if (Class != null) return true;
                if (Armorer != null) return true;
                if (Athletics != null) return true;
                if (Blade != null) return true;
                if (Block != null) return true;
                if (Blunt != null) return true;
                if (HandToHand != null) return true;
                if (HeavyArmor != null) return true;
                if (Alchemy != null) return true;
                if (Alteration != null) return true;
                if (Conjuration != null) return true;
                if (Destruction != null) return true;
                if (Illusion != null) return true;
                if (Mysticism != null) return true;
                if (Restoration != null) return true;
                if (Acrobatics != null) return true;
                if (LightArmor != null) return true;
                if (Marksman != null) return true;
                if (Mercantile != null) return true;
                if (Security != null) return true;
                if (Sneak != null) return true;
                if (Speechcraft != null) return true;
                if (Health != null) return true;
                if (Strength != null) return true;
                if (Intelligence != null) return true;
                if (Willpower != null) return true;
                if (Agility != null) return true;
                if (Speed != null) return true;
                if (Endurance != null) return true;
                if (Personality != null) return true;
                if (Luck != null) return true;
                if (Hair != null) return true;
                if (HairLength != null) return true;
                if (Eyes != null) return true;
                if (HairColor != null) return true;
                if (CombatStyle != null) return true;
                if (FaceGenGeometrySymmetric != null) return true;
                if (FaceGenGeometryAsymmetric != null) return true;
                if (FaceGenTextureSymmetric != null) return true;
                if (Unknown != null) return true;
                if (ACBSDataTypeState != null) return true;
                if (AIDTDataTypeState != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg)
            {
                fg.AppendLine("ErrorMask =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendLine($"Name => {Name}");
                Model?.ToString(fg);
                fg.AppendLine($"Flags => {Flags}");
                fg.AppendLine($"BaseSpellPoints => {BaseSpellPoints}");
                fg.AppendLine($"Fatigue => {Fatigue}");
                fg.AppendLine($"BarterGold => {BarterGold}");
                fg.AppendLine($"LevelOffset => {LevelOffset}");
                fg.AppendLine($"CalcMin => {CalcMin}");
                fg.AppendLine($"CalcMax => {CalcMax}");
                fg.AppendLine("Factions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Factions != null)
                    {
                        if (Factions.Overall != null)
                        {
                            fg.AppendLine(Factions.Overall.ToString());
                        }
                        if (Factions.Specific != null)
                        {
                            foreach (var subItem in Factions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine($"DeathItem => {DeathItem}");
                fg.AppendLine($"Race => {Race}");
                fg.AppendLine("Spells =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Spells != null)
                    {
                        if (Spells.Overall != null)
                        {
                            fg.AppendLine(Spells.Overall.ToString());
                        }
                        if (Spells.Specific != null)
                        {
                            foreach (var subItem in Spells.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine($"Script => {Script}");
                fg.AppendLine("Items =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Items != null)
                    {
                        if (Items.Overall != null)
                        {
                            fg.AppendLine(Items.Overall.ToString());
                        }
                        if (Items.Specific != null)
                        {
                            foreach (var subItem in Items.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine($"Aggression => {Aggression}");
                fg.AppendLine($"Confidence => {Confidence}");
                fg.AppendLine($"EnergyLevel => {EnergyLevel}");
                fg.AppendLine($"Responsibility => {Responsibility}");
                fg.AppendLine($"BuySellServices => {BuySellServices}");
                fg.AppendLine($"Teaches => {Teaches}");
                fg.AppendLine($"MaximumTrainingLevel => {MaximumTrainingLevel}");
                fg.AppendLine($"Fluff => {Fluff}");
                fg.AppendLine("AIPackages =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (AIPackages != null)
                    {
                        if (AIPackages.Overall != null)
                        {
                            fg.AppendLine(AIPackages.Overall.ToString());
                        }
                        if (AIPackages.Specific != null)
                        {
                            foreach (var subItem in AIPackages.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine("Animations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Animations != null)
                    {
                        if (Animations.Overall != null)
                        {
                            fg.AppendLine(Animations.Overall.ToString());
                        }
                        if (Animations.Specific != null)
                        {
                            foreach (var subItem in Animations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine($"Class => {Class}");
                fg.AppendLine($"Armorer => {Armorer}");
                fg.AppendLine($"Athletics => {Athletics}");
                fg.AppendLine($"Blade => {Blade}");
                fg.AppendLine($"Block => {Block}");
                fg.AppendLine($"Blunt => {Blunt}");
                fg.AppendLine($"HandToHand => {HandToHand}");
                fg.AppendLine($"HeavyArmor => {HeavyArmor}");
                fg.AppendLine($"Alchemy => {Alchemy}");
                fg.AppendLine($"Alteration => {Alteration}");
                fg.AppendLine($"Conjuration => {Conjuration}");
                fg.AppendLine($"Destruction => {Destruction}");
                fg.AppendLine($"Illusion => {Illusion}");
                fg.AppendLine($"Mysticism => {Mysticism}");
                fg.AppendLine($"Restoration => {Restoration}");
                fg.AppendLine($"Acrobatics => {Acrobatics}");
                fg.AppendLine($"LightArmor => {LightArmor}");
                fg.AppendLine($"Marksman => {Marksman}");
                fg.AppendLine($"Mercantile => {Mercantile}");
                fg.AppendLine($"Security => {Security}");
                fg.AppendLine($"Sneak => {Sneak}");
                fg.AppendLine($"Speechcraft => {Speechcraft}");
                fg.AppendLine($"Health => {Health}");
                fg.AppendLine($"Strength => {Strength}");
                fg.AppendLine($"Intelligence => {Intelligence}");
                fg.AppendLine($"Willpower => {Willpower}");
                fg.AppendLine($"Agility => {Agility}");
                fg.AppendLine($"Speed => {Speed}");
                fg.AppendLine($"Endurance => {Endurance}");
                fg.AppendLine($"Personality => {Personality}");
                fg.AppendLine($"Luck => {Luck}");
                fg.AppendLine($"Hair => {Hair}");
                fg.AppendLine($"HairLength => {HairLength}");
                fg.AppendLine("Eyes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Eyes != null)
                    {
                        if (Eyes.Overall != null)
                        {
                            fg.AppendLine(Eyes.Overall.ToString());
                        }
                        if (Eyes.Specific != null)
                        {
                            foreach (var subItem in Eyes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine($"HairColor => {HairColor}");
                fg.AppendLine($"CombatStyle => {CombatStyle}");
                fg.AppendLine($"FaceGenGeometrySymmetric => {FaceGenGeometrySymmetric}");
                fg.AppendLine($"FaceGenGeometryAsymmetric => {FaceGenGeometryAsymmetric}");
                fg.AppendLine($"FaceGenTextureSymmetric => {FaceGenTextureSymmetric}");
                fg.AppendLine($"Unknown => {Unknown}");
                fg.AppendLine($"ACBSDataTypeState => {ACBSDataTypeState}");
                fg.AppendLine($"AIDTDataTypeState => {AIDTDataTypeState}");
                fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = new MaskItem<Exception?, Model.ErrorMask?>(ExceptionExt.Combine(this.Model?.Overall, rhs.Model?.Overall), (this.Model?.Specific as IErrorMask<Model.ErrorMask>)?.Combine(rhs.Model?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.BaseSpellPoints = this.BaseSpellPoints.Combine(rhs.BaseSpellPoints);
                ret.Fatigue = this.Fatigue.Combine(rhs.Fatigue);
                ret.BarterGold = this.BarterGold.Combine(rhs.BarterGold);
                ret.LevelOffset = this.LevelOffset.Combine(rhs.LevelOffset);
                ret.CalcMin = this.CalcMin.Combine(rhs.CalcMin);
                ret.CalcMax = this.CalcMax.Combine(rhs.CalcMax);
                ret.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(ExceptionExt.Combine(this.Factions?.Overall, rhs.Factions?.Overall), ExceptionExt.Combine(this.Factions?.Specific, rhs.Factions?.Specific));
                ret.DeathItem = this.DeathItem.Combine(rhs.DeathItem);
                ret.Race = this.Race.Combine(rhs.Race);
                ret.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Spells?.Overall, rhs.Spells?.Overall), ExceptionExt.Combine(this.Spells?.Specific, rhs.Spells?.Specific));
                ret.Script = this.Script.Combine(rhs.Script);
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>(ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.Aggression = this.Aggression.Combine(rhs.Aggression);
                ret.Confidence = this.Confidence.Combine(rhs.Confidence);
                ret.EnergyLevel = this.EnergyLevel.Combine(rhs.EnergyLevel);
                ret.Responsibility = this.Responsibility.Combine(rhs.Responsibility);
                ret.BuySellServices = this.BuySellServices.Combine(rhs.BuySellServices);
                ret.Teaches = this.Teaches.Combine(rhs.Teaches);
                ret.MaximumTrainingLevel = this.MaximumTrainingLevel.Combine(rhs.MaximumTrainingLevel);
                ret.Fluff = this.Fluff.Combine(rhs.Fluff);
                ret.AIPackages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.AIPackages?.Overall, rhs.AIPackages?.Overall), ExceptionExt.Combine(this.AIPackages?.Specific, rhs.AIPackages?.Specific));
                ret.Animations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Animations?.Overall, rhs.Animations?.Overall), ExceptionExt.Combine(this.Animations?.Specific, rhs.Animations?.Specific));
                ret.Class = this.Class.Combine(rhs.Class);
                ret.Armorer = this.Armorer.Combine(rhs.Armorer);
                ret.Athletics = this.Athletics.Combine(rhs.Athletics);
                ret.Blade = this.Blade.Combine(rhs.Blade);
                ret.Block = this.Block.Combine(rhs.Block);
                ret.Blunt = this.Blunt.Combine(rhs.Blunt);
                ret.HandToHand = this.HandToHand.Combine(rhs.HandToHand);
                ret.HeavyArmor = this.HeavyArmor.Combine(rhs.HeavyArmor);
                ret.Alchemy = this.Alchemy.Combine(rhs.Alchemy);
                ret.Alteration = this.Alteration.Combine(rhs.Alteration);
                ret.Conjuration = this.Conjuration.Combine(rhs.Conjuration);
                ret.Destruction = this.Destruction.Combine(rhs.Destruction);
                ret.Illusion = this.Illusion.Combine(rhs.Illusion);
                ret.Mysticism = this.Mysticism.Combine(rhs.Mysticism);
                ret.Restoration = this.Restoration.Combine(rhs.Restoration);
                ret.Acrobatics = this.Acrobatics.Combine(rhs.Acrobatics);
                ret.LightArmor = this.LightArmor.Combine(rhs.LightArmor);
                ret.Marksman = this.Marksman.Combine(rhs.Marksman);
                ret.Mercantile = this.Mercantile.Combine(rhs.Mercantile);
                ret.Security = this.Security.Combine(rhs.Security);
                ret.Sneak = this.Sneak.Combine(rhs.Sneak);
                ret.Speechcraft = this.Speechcraft.Combine(rhs.Speechcraft);
                ret.Health = this.Health.Combine(rhs.Health);
                ret.Strength = this.Strength.Combine(rhs.Strength);
                ret.Intelligence = this.Intelligence.Combine(rhs.Intelligence);
                ret.Willpower = this.Willpower.Combine(rhs.Willpower);
                ret.Agility = this.Agility.Combine(rhs.Agility);
                ret.Speed = this.Speed.Combine(rhs.Speed);
                ret.Endurance = this.Endurance.Combine(rhs.Endurance);
                ret.Personality = this.Personality.Combine(rhs.Personality);
                ret.Luck = this.Luck.Combine(rhs.Luck);
                ret.Hair = this.Hair.Combine(rhs.Hair);
                ret.HairLength = this.HairLength.Combine(rhs.HairLength);
                ret.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Eyes?.Overall, rhs.Eyes?.Overall), ExceptionExt.Combine(this.Eyes?.Specific, rhs.Eyes?.Specific));
                ret.HairColor = this.HairColor.Combine(rhs.HairColor);
                ret.CombatStyle = this.CombatStyle.Combine(rhs.CombatStyle);
                ret.FaceGenGeometrySymmetric = this.FaceGenGeometrySymmetric.Combine(rhs.FaceGenGeometrySymmetric);
                ret.FaceGenGeometryAsymmetric = this.FaceGenGeometryAsymmetric.Combine(rhs.FaceGenGeometryAsymmetric);
                ret.FaceGenTextureSymmetric = this.FaceGenTextureSymmetric.Combine(rhs.FaceGenTextureSymmetric);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.ACBSDataTypeState = this.ACBSDataTypeState.Combine(rhs.ACBSDataTypeState);
                ret.AIDTDataTypeState = this.AIDTDataTypeState.Combine(rhs.AIDTDataTypeState);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            NPCAbstract.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public bool Flags;
            public bool BaseSpellPoints;
            public bool Fatigue;
            public bool BarterGold;
            public bool LevelOffset;
            public bool CalcMin;
            public bool CalcMax;
            public MaskItem<bool, RankPlacement.TranslationMask?> Factions;
            public bool DeathItem;
            public bool Race;
            public bool Spells;
            public bool Script;
            public MaskItem<bool, ItemEntry.TranslationMask?> Items;
            public bool Aggression;
            public bool Confidence;
            public bool EnergyLevel;
            public bool Responsibility;
            public bool BuySellServices;
            public bool Teaches;
            public bool MaximumTrainingLevel;
            public bool Fluff;
            public bool AIPackages;
            public bool Animations;
            public bool Class;
            public bool Armorer;
            public bool Athletics;
            public bool Blade;
            public bool Block;
            public bool Blunt;
            public bool HandToHand;
            public bool HeavyArmor;
            public bool Alchemy;
            public bool Alteration;
            public bool Conjuration;
            public bool Destruction;
            public bool Illusion;
            public bool Mysticism;
            public bool Restoration;
            public bool Acrobatics;
            public bool LightArmor;
            public bool Marksman;
            public bool Mercantile;
            public bool Security;
            public bool Sneak;
            public bool Speechcraft;
            public bool Health;
            public bool Strength;
            public bool Intelligence;
            public bool Willpower;
            public bool Agility;
            public bool Speed;
            public bool Endurance;
            public bool Personality;
            public bool Luck;
            public bool Hair;
            public bool HairLength;
            public bool Eyes;
            public bool HairColor;
            public bool CombatStyle;
            public bool FaceGenGeometrySymmetric;
            public bool FaceGenGeometryAsymmetric;
            public bool FaceGenTextureSymmetric;
            public bool Unknown;
            public bool ACBSDataTypeState;
            public bool AIDTDataTypeState;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Flags = defaultOn;
                this.BaseSpellPoints = defaultOn;
                this.Fatigue = defaultOn;
                this.BarterGold = defaultOn;
                this.LevelOffset = defaultOn;
                this.CalcMin = defaultOn;
                this.CalcMax = defaultOn;
                this.Factions = new MaskItem<bool, RankPlacement.TranslationMask?>(defaultOn, null);
                this.DeathItem = defaultOn;
                this.Race = defaultOn;
                this.Spells = defaultOn;
                this.Script = defaultOn;
                this.Items = new MaskItem<bool, ItemEntry.TranslationMask?>(defaultOn, null);
                this.Aggression = defaultOn;
                this.Confidence = defaultOn;
                this.EnergyLevel = defaultOn;
                this.Responsibility = defaultOn;
                this.BuySellServices = defaultOn;
                this.Teaches = defaultOn;
                this.MaximumTrainingLevel = defaultOn;
                this.Fluff = defaultOn;
                this.AIPackages = defaultOn;
                this.Animations = defaultOn;
                this.Class = defaultOn;
                this.Armorer = defaultOn;
                this.Athletics = defaultOn;
                this.Blade = defaultOn;
                this.Block = defaultOn;
                this.Blunt = defaultOn;
                this.HandToHand = defaultOn;
                this.HeavyArmor = defaultOn;
                this.Alchemy = defaultOn;
                this.Alteration = defaultOn;
                this.Conjuration = defaultOn;
                this.Destruction = defaultOn;
                this.Illusion = defaultOn;
                this.Mysticism = defaultOn;
                this.Restoration = defaultOn;
                this.Acrobatics = defaultOn;
                this.LightArmor = defaultOn;
                this.Marksman = defaultOn;
                this.Mercantile = defaultOn;
                this.Security = defaultOn;
                this.Sneak = defaultOn;
                this.Speechcraft = defaultOn;
                this.Health = defaultOn;
                this.Strength = defaultOn;
                this.Intelligence = defaultOn;
                this.Willpower = defaultOn;
                this.Agility = defaultOn;
                this.Speed = defaultOn;
                this.Endurance = defaultOn;
                this.Personality = defaultOn;
                this.Luck = defaultOn;
                this.Hair = defaultOn;
                this.HairLength = defaultOn;
                this.Eyes = defaultOn;
                this.HairColor = defaultOn;
                this.CombatStyle = defaultOn;
                this.FaceGenGeometrySymmetric = defaultOn;
                this.FaceGenGeometryAsymmetric = defaultOn;
                this.FaceGenTextureSymmetric = defaultOn;
                this.Unknown = defaultOn;
                this.ACBSDataTypeState = defaultOn;
                this.AIDTDataTypeState = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((BaseSpellPoints, null));
                ret.Add((Fatigue, null));
                ret.Add((BarterGold, null));
                ret.Add((LevelOffset, null));
                ret.Add((CalcMin, null));
                ret.Add((CalcMax, null));
                ret.Add((Factions?.Overall ?? true, Factions?.Specific?.GetCrystal()));
                ret.Add((DeathItem, null));
                ret.Add((Race, null));
                ret.Add((Spells, null));
                ret.Add((Script, null));
                ret.Add((Items?.Overall ?? true, Items?.Specific?.GetCrystal()));
                ret.Add((Aggression, null));
                ret.Add((Confidence, null));
                ret.Add((EnergyLevel, null));
                ret.Add((Responsibility, null));
                ret.Add((BuySellServices, null));
                ret.Add((Teaches, null));
                ret.Add((MaximumTrainingLevel, null));
                ret.Add((Fluff, null));
                ret.Add((AIPackages, null));
                ret.Add((Animations, null));
                ret.Add((Class, null));
                ret.Add((Armorer, null));
                ret.Add((Athletics, null));
                ret.Add((Blade, null));
                ret.Add((Block, null));
                ret.Add((Blunt, null));
                ret.Add((HandToHand, null));
                ret.Add((HeavyArmor, null));
                ret.Add((Alchemy, null));
                ret.Add((Alteration, null));
                ret.Add((Conjuration, null));
                ret.Add((Destruction, null));
                ret.Add((Illusion, null));
                ret.Add((Mysticism, null));
                ret.Add((Restoration, null));
                ret.Add((Acrobatics, null));
                ret.Add((LightArmor, null));
                ret.Add((Marksman, null));
                ret.Add((Mercantile, null));
                ret.Add((Security, null));
                ret.Add((Sneak, null));
                ret.Add((Speechcraft, null));
                ret.Add((Health, null));
                ret.Add((Strength, null));
                ret.Add((Intelligence, null));
                ret.Add((Willpower, null));
                ret.Add((Agility, null));
                ret.Add((Speed, null));
                ret.Add((Endurance, null));
                ret.Add((Personality, null));
                ret.Add((Luck, null));
                ret.Add((Hair, null));
                ret.Add((HairLength, null));
                ret.Add((Eyes, null));
                ret.Add((HairColor, null));
                ret.Add((CombatStyle, null));
                ret.Add((FaceGenGeometrySymmetric, null));
                ret.Add((FaceGenGeometryAsymmetric, null));
                ret.Add((FaceGenTextureSymmetric, null));
                ret.Add((Unknown, null));
                ret.Add((ACBSDataTypeState, null));
                ret.Add((AIDTDataTypeState, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = NPC_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum ACBSDataType
        {
            Has = 1
        }
        [Flags]
        public enum AIDTDataType
        {
            Has = 1
        }
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => NPCCommon.Instance.GetLinks(this);
        public NPC(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public NPC(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NPCBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((NPCBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new NPC CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static NPC CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new NPC();
            ((NPCSetterCommon)((INPCGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((INPCGetter)rhs, include);

        void IClearable.Clear()
        {
            ((NPCSetterCommon)((INPCGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new NPC GetNew()
        {
            return new NPC();
        }

    }
    #endregion

    #region Interface
    public partial interface INPC :
        INPCGetter,
        INPCAbstract,
        ILoquiObjectSetter<INPCInternal>
    {
        new String? Name { get; set; }
        new Model? Model { get; set; }
        new NPC.NPCFlag Flags { get; set; }
        new UInt16 BaseSpellPoints { get; set; }
        new UInt16 Fatigue { get; set; }
        new UInt16 BarterGold { get; set; }
        new Int16 LevelOffset { get; set; }
        new UInt16 CalcMin { get; set; }
        new UInt16 CalcMax { get; set; }
        new ISetList<RankPlacement> Factions { get; }
        new IFormSetLink<ItemAbstract> DeathItem { get; }
        new IFormSetLink<Race> Race { get; }
        new ISetList<IFormLink<SpellAbstract>> Spells { get; }
        new IFormSetLink<Script> Script { get; }
        new ISetList<ItemEntry> Items { get; }
        new Byte Aggression { get; set; }
        new Byte Confidence { get; set; }
        new Byte EnergyLevel { get; set; }
        new Byte Responsibility { get; set; }
        new NPC.BuySellServiceFlag BuySellServices { get; set; }
        new Skill Teaches { get; set; }
        new Byte MaximumTrainingLevel { get; set; }
        new Byte[] Fluff { get; set; }
        new ISetList<IFormLink<AIPackage>> AIPackages { get; }
        new ISetList<String> Animations { get; }
        new IFormSetLink<Class> Class { get; }
        new Byte Armorer { get; set; }
        new Byte Athletics { get; set; }
        new Byte Blade { get; set; }
        new Byte Block { get; set; }
        new Byte Blunt { get; set; }
        new Byte HandToHand { get; set; }
        new Byte HeavyArmor { get; set; }
        new Byte Alchemy { get; set; }
        new Byte Alteration { get; set; }
        new Byte Conjuration { get; set; }
        new Byte Destruction { get; set; }
        new Byte Illusion { get; set; }
        new Byte Mysticism { get; set; }
        new Byte Restoration { get; set; }
        new Byte Acrobatics { get; set; }
        new Byte LightArmor { get; set; }
        new Byte Marksman { get; set; }
        new Byte Mercantile { get; set; }
        new Byte Security { get; set; }
        new Byte Sneak { get; set; }
        new Byte Speechcraft { get; set; }
        new UInt32 Health { get; set; }
        new Byte Strength { get; set; }
        new Byte Intelligence { get; set; }
        new Byte Willpower { get; set; }
        new Byte Agility { get; set; }
        new Byte Speed { get; set; }
        new Byte Endurance { get; set; }
        new Byte Personality { get; set; }
        new Byte Luck { get; set; }
        new IFormSetLink<Hair> Hair { get; }
        new Single? HairLength { get; set; }
        new ISetList<IFormLink<Eye>> Eyes { get; }
        new Color? HairColor { get; set; }
        new IFormSetLink<CombatStyle> CombatStyle { get; }
        new Byte[]? FaceGenGeometrySymmetric { get; set; }
        new Byte[]? FaceGenGeometryAsymmetric { get; set; }
        new Byte[]? FaceGenTextureSymmetric { get; set; }
        new Byte[]? Unknown { get; set; }
        new NPC.ACBSDataType ACBSDataTypeState { get; set; }
        new NPC.AIDTDataType AIDTDataTypeState { get; set; }
        new NPC.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface INPCInternal :
        INPCAbstractInternal,
        INPC,
        INPCGetter
    {
    }

    public partial interface INPCGetter :
        INPCAbstractGetter,
        ILoquiObject<INPCGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Name { get; }
        IModelGetter? Model { get; }
        NPC.NPCFlag Flags { get; }
        UInt16 BaseSpellPoints { get; }
        UInt16 Fatigue { get; }
        UInt16 BarterGold { get; }
        Int16 LevelOffset { get; }
        UInt16 CalcMin { get; }
        UInt16 CalcMax { get; }
        IReadOnlySetList<IRankPlacementGetter> Factions { get; }
        IFormSetLinkGetter<IItemAbstractGetter> DeathItem { get; }
        IFormSetLinkGetter<IRaceGetter> Race { get; }
        IReadOnlySetList<IFormLinkGetter<ISpellAbstractGetter>> Spells { get; }
        IFormSetLinkGetter<IScriptGetter> Script { get; }
        IReadOnlySetList<IItemEntryGetter> Items { get; }
        Byte Aggression { get; }
        Byte Confidence { get; }
        Byte EnergyLevel { get; }
        Byte Responsibility { get; }
        NPC.BuySellServiceFlag BuySellServices { get; }
        Skill Teaches { get; }
        Byte MaximumTrainingLevel { get; }
        ReadOnlySpan<Byte> Fluff { get; }
        IReadOnlySetList<IFormLinkGetter<IAIPackageGetter>> AIPackages { get; }
        IReadOnlySetList<String> Animations { get; }
        IFormSetLinkGetter<IClassGetter> Class { get; }
        Byte Armorer { get; }
        Byte Athletics { get; }
        Byte Blade { get; }
        Byte Block { get; }
        Byte Blunt { get; }
        Byte HandToHand { get; }
        Byte HeavyArmor { get; }
        Byte Alchemy { get; }
        Byte Alteration { get; }
        Byte Conjuration { get; }
        Byte Destruction { get; }
        Byte Illusion { get; }
        Byte Mysticism { get; }
        Byte Restoration { get; }
        Byte Acrobatics { get; }
        Byte LightArmor { get; }
        Byte Marksman { get; }
        Byte Mercantile { get; }
        Byte Security { get; }
        Byte Sneak { get; }
        Byte Speechcraft { get; }
        UInt32 Health { get; }
        Byte Strength { get; }
        Byte Intelligence { get; }
        Byte Willpower { get; }
        Byte Agility { get; }
        Byte Speed { get; }
        Byte Endurance { get; }
        Byte Personality { get; }
        Byte Luck { get; }
        IFormSetLinkGetter<IHairGetter> Hair { get; }
        Single? HairLength { get; }
        IReadOnlySetList<IFormLinkGetter<IEyeGetter>> Eyes { get; }
        Color? HairColor { get; }
        IFormSetLinkGetter<ICombatStyleGetter> CombatStyle { get; }
        #region FaceGenGeometrySymmetric
        ReadOnlySpan<Byte> FaceGenGeometrySymmetric { get; }
        bool FaceGenGeometrySymmetric_IsSet { get; }
        #endregion
        #region FaceGenGeometryAsymmetric
        ReadOnlySpan<Byte> FaceGenGeometryAsymmetric { get; }
        bool FaceGenGeometryAsymmetric_IsSet { get; }
        #endregion
        #region FaceGenTextureSymmetric
        ReadOnlySpan<Byte> FaceGenTextureSymmetric { get; }
        bool FaceGenTextureSymmetric_IsSet { get; }
        #endregion
        #region Unknown
        ReadOnlySpan<Byte> Unknown { get; }
        bool Unknown_IsSet { get; }
        #endregion
        NPC.ACBSDataType ACBSDataTypeState { get; }
        NPC.AIDTDataType AIDTDataTypeState { get; }
        NPC.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class NPCMixIn
    {
        public static void Clear(this INPCInternal item)
        {
            ((NPCSetterCommon)((INPCGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NPC.Mask<bool> GetEqualsMask(
            this INPCGetter item,
            INPCGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NPCCommon)((INPCGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INPCGetter item,
            string? name = null,
            NPC.Mask<bool>? printMask = null)
        {
            return ((NPCCommon)((INPCGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INPCGetter item,
            FileGeneration fg,
            string? name = null,
            NPC.Mask<bool>? printMask = null)
        {
            ((NPCCommon)((INPCGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this INPCGetter item,
            NPC.Mask<bool?> checkMask)
        {
            return ((NPCCommon)((INPCGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static NPC.Mask<bool> GetHasBeenSetMask(this INPCGetter item)
        {
            var ret = new NPC.Mask<bool>(false);
            ((NPCCommon)((INPCGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this INPCGetter item,
            INPCGetter rhs)
        {
            return ((NPCCommon)((INPCGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this INPCInternal lhs,
            INPCGetter rhs,
            out NPC.ErrorMask errorMask,
            NPC.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NPCSetterTranslationCommon)((INPCGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = NPC.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INPCInternal lhs,
            INPCGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NPCSetterTranslationCommon)((INPCGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static NPC DeepCopy(
            this INPCGetter item,
            NPC.TranslationMask? copyMask = null)
        {
            return ((NPCSetterTranslationCommon)((INPCGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NPC DeepCopy(
            this INPCGetter item,
            out NPC.ErrorMask errorMask,
            NPC.TranslationMask? copyMask = null)
        {
            return ((NPCSetterTranslationCommon)((INPCGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NPC DeepCopy(
            this INPCGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NPCSetterTranslationCommon)((INPCGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this INPCInternal item,
            XElement node,
            NPC.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this INPCInternal item,
            XElement node,
            out NPC.ErrorMask errorMask,
            NPC.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = NPC.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this INPCInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((NPCSetterCommon)((INPCGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INPCInternal item,
            string path,
            NPC.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INPCInternal item,
            string path,
            out NPC.ErrorMask errorMask,
            NPC.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INPCInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            NPC.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this INPCInternal item,
            Stream stream,
            NPC.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INPCInternal item,
            Stream stream,
            out NPC.ErrorMask errorMask,
            NPC.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INPCInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            NPC.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this INPCInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this INPCInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((NPCSetterCommon)((INPCGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum NPC_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Flags = 7,
        BaseSpellPoints = 8,
        Fatigue = 9,
        BarterGold = 10,
        LevelOffset = 11,
        CalcMin = 12,
        CalcMax = 13,
        Factions = 14,
        DeathItem = 15,
        Race = 16,
        Spells = 17,
        Script = 18,
        Items = 19,
        Aggression = 20,
        Confidence = 21,
        EnergyLevel = 22,
        Responsibility = 23,
        BuySellServices = 24,
        Teaches = 25,
        MaximumTrainingLevel = 26,
        Fluff = 27,
        AIPackages = 28,
        Animations = 29,
        Class = 30,
        Armorer = 31,
        Athletics = 32,
        Blade = 33,
        Block = 34,
        Blunt = 35,
        HandToHand = 36,
        HeavyArmor = 37,
        Alchemy = 38,
        Alteration = 39,
        Conjuration = 40,
        Destruction = 41,
        Illusion = 42,
        Mysticism = 43,
        Restoration = 44,
        Acrobatics = 45,
        LightArmor = 46,
        Marksman = 47,
        Mercantile = 48,
        Security = 49,
        Sneak = 50,
        Speechcraft = 51,
        Health = 52,
        Strength = 53,
        Intelligence = 54,
        Willpower = 55,
        Agility = 56,
        Speed = 57,
        Endurance = 58,
        Personality = 59,
        Luck = 60,
        Hair = 61,
        HairLength = 62,
        Eyes = 63,
        HairColor = 64,
        CombatStyle = 65,
        FaceGenGeometrySymmetric = 66,
        FaceGenGeometryAsymmetric = 67,
        FaceGenTextureSymmetric = 68,
        Unknown = 69,
        ACBSDataTypeState = 70,
        AIDTDataTypeState = 71,
        DATADataTypeState = 72,
    }
    #endregion

    #region Registration
    public partial class NPC_Registration : ILoquiRegistration
    {
        public static readonly NPC_Registration Instance = new NPC_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 84,
            version: 0);

        public const string GUID = "96396343-a32a-4165-b745-e038c5e06eeb";

        public const ushort AdditionalFieldCount = 68;

        public const ushort FieldCount = 73;

        public static readonly Type MaskType = typeof(NPC.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NPC.ErrorMask);

        public static readonly Type ClassType = typeof(NPC);

        public static readonly Type GetterType = typeof(INPCGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INPC);

        public static readonly Type? InternalSetterType = typeof(INPCInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.NPC";

        public const string Name = "NPC";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)NPC_FieldIndex.Name;
                case "MODEL":
                    return (ushort)NPC_FieldIndex.Model;
                case "FLAGS":
                    return (ushort)NPC_FieldIndex.Flags;
                case "BASESPELLPOINTS":
                    return (ushort)NPC_FieldIndex.BaseSpellPoints;
                case "FATIGUE":
                    return (ushort)NPC_FieldIndex.Fatigue;
                case "BARTERGOLD":
                    return (ushort)NPC_FieldIndex.BarterGold;
                case "LEVELOFFSET":
                    return (ushort)NPC_FieldIndex.LevelOffset;
                case "CALCMIN":
                    return (ushort)NPC_FieldIndex.CalcMin;
                case "CALCMAX":
                    return (ushort)NPC_FieldIndex.CalcMax;
                case "FACTIONS":
                    return (ushort)NPC_FieldIndex.Factions;
                case "DEATHITEM":
                    return (ushort)NPC_FieldIndex.DeathItem;
                case "RACE":
                    return (ushort)NPC_FieldIndex.Race;
                case "SPELLS":
                    return (ushort)NPC_FieldIndex.Spells;
                case "SCRIPT":
                    return (ushort)NPC_FieldIndex.Script;
                case "ITEMS":
                    return (ushort)NPC_FieldIndex.Items;
                case "AGGRESSION":
                    return (ushort)NPC_FieldIndex.Aggression;
                case "CONFIDENCE":
                    return (ushort)NPC_FieldIndex.Confidence;
                case "ENERGYLEVEL":
                    return (ushort)NPC_FieldIndex.EnergyLevel;
                case "RESPONSIBILITY":
                    return (ushort)NPC_FieldIndex.Responsibility;
                case "BUYSELLSERVICES":
                    return (ushort)NPC_FieldIndex.BuySellServices;
                case "TEACHES":
                    return (ushort)NPC_FieldIndex.Teaches;
                case "MAXIMUMTRAININGLEVEL":
                    return (ushort)NPC_FieldIndex.MaximumTrainingLevel;
                case "FLUFF":
                    return (ushort)NPC_FieldIndex.Fluff;
                case "AIPACKAGES":
                    return (ushort)NPC_FieldIndex.AIPackages;
                case "ANIMATIONS":
                    return (ushort)NPC_FieldIndex.Animations;
                case "CLASS":
                    return (ushort)NPC_FieldIndex.Class;
                case "ARMORER":
                    return (ushort)NPC_FieldIndex.Armorer;
                case "ATHLETICS":
                    return (ushort)NPC_FieldIndex.Athletics;
                case "BLADE":
                    return (ushort)NPC_FieldIndex.Blade;
                case "BLOCK":
                    return (ushort)NPC_FieldIndex.Block;
                case "BLUNT":
                    return (ushort)NPC_FieldIndex.Blunt;
                case "HANDTOHAND":
                    return (ushort)NPC_FieldIndex.HandToHand;
                case "HEAVYARMOR":
                    return (ushort)NPC_FieldIndex.HeavyArmor;
                case "ALCHEMY":
                    return (ushort)NPC_FieldIndex.Alchemy;
                case "ALTERATION":
                    return (ushort)NPC_FieldIndex.Alteration;
                case "CONJURATION":
                    return (ushort)NPC_FieldIndex.Conjuration;
                case "DESTRUCTION":
                    return (ushort)NPC_FieldIndex.Destruction;
                case "ILLUSION":
                    return (ushort)NPC_FieldIndex.Illusion;
                case "MYSTICISM":
                    return (ushort)NPC_FieldIndex.Mysticism;
                case "RESTORATION":
                    return (ushort)NPC_FieldIndex.Restoration;
                case "ACROBATICS":
                    return (ushort)NPC_FieldIndex.Acrobatics;
                case "LIGHTARMOR":
                    return (ushort)NPC_FieldIndex.LightArmor;
                case "MARKSMAN":
                    return (ushort)NPC_FieldIndex.Marksman;
                case "MERCANTILE":
                    return (ushort)NPC_FieldIndex.Mercantile;
                case "SECURITY":
                    return (ushort)NPC_FieldIndex.Security;
                case "SNEAK":
                    return (ushort)NPC_FieldIndex.Sneak;
                case "SPEECHCRAFT":
                    return (ushort)NPC_FieldIndex.Speechcraft;
                case "HEALTH":
                    return (ushort)NPC_FieldIndex.Health;
                case "STRENGTH":
                    return (ushort)NPC_FieldIndex.Strength;
                case "INTELLIGENCE":
                    return (ushort)NPC_FieldIndex.Intelligence;
                case "WILLPOWER":
                    return (ushort)NPC_FieldIndex.Willpower;
                case "AGILITY":
                    return (ushort)NPC_FieldIndex.Agility;
                case "SPEED":
                    return (ushort)NPC_FieldIndex.Speed;
                case "ENDURANCE":
                    return (ushort)NPC_FieldIndex.Endurance;
                case "PERSONALITY":
                    return (ushort)NPC_FieldIndex.Personality;
                case "LUCK":
                    return (ushort)NPC_FieldIndex.Luck;
                case "HAIR":
                    return (ushort)NPC_FieldIndex.Hair;
                case "HAIRLENGTH":
                    return (ushort)NPC_FieldIndex.HairLength;
                case "EYES":
                    return (ushort)NPC_FieldIndex.Eyes;
                case "HAIRCOLOR":
                    return (ushort)NPC_FieldIndex.HairColor;
                case "COMBATSTYLE":
                    return (ushort)NPC_FieldIndex.CombatStyle;
                case "FACEGENGEOMETRYSYMMETRIC":
                    return (ushort)NPC_FieldIndex.FaceGenGeometrySymmetric;
                case "FACEGENGEOMETRYASYMMETRIC":
                    return (ushort)NPC_FieldIndex.FaceGenGeometryAsymmetric;
                case "FACEGENTEXTURESYMMETRIC":
                    return (ushort)NPC_FieldIndex.FaceGenTextureSymmetric;
                case "UNKNOWN":
                    return (ushort)NPC_FieldIndex.Unknown;
                case "ACBSDATATYPESTATE":
                    return (ushort)NPC_FieldIndex.ACBSDataTypeState;
                case "AIDTDATATYPESTATE":
                    return (ushort)NPC_FieldIndex.AIDTDataTypeState;
                case "DATADATATYPESTATE":
                    return (ushort)NPC_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Factions:
                case NPC_FieldIndex.Spells:
                case NPC_FieldIndex.Items:
                case NPC_FieldIndex.AIPackages:
                case NPC_FieldIndex.Animations:
                case NPC_FieldIndex.Eyes:
                    return true;
                case NPC_FieldIndex.Name:
                case NPC_FieldIndex.Model:
                case NPC_FieldIndex.Flags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.DeathItem:
                case NPC_FieldIndex.Race:
                case NPC_FieldIndex.Script:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.Class:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                case NPC_FieldIndex.Hair:
                case NPC_FieldIndex.HairLength:
                case NPC_FieldIndex.HairColor:
                case NPC_FieldIndex.CombatStyle:
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                case NPC_FieldIndex.Unknown:
                case NPC_FieldIndex.ACBSDataTypeState:
                case NPC_FieldIndex.AIDTDataTypeState:
                case NPC_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return NPCAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Model:
                case NPC_FieldIndex.Factions:
                case NPC_FieldIndex.Items:
                    return true;
                case NPC_FieldIndex.Name:
                case NPC_FieldIndex.Flags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.DeathItem:
                case NPC_FieldIndex.Race:
                case NPC_FieldIndex.Spells:
                case NPC_FieldIndex.Script:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.AIPackages:
                case NPC_FieldIndex.Animations:
                case NPC_FieldIndex.Class:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                case NPC_FieldIndex.Hair:
                case NPC_FieldIndex.HairLength:
                case NPC_FieldIndex.Eyes:
                case NPC_FieldIndex.HairColor:
                case NPC_FieldIndex.CombatStyle:
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                case NPC_FieldIndex.Unknown:
                case NPC_FieldIndex.ACBSDataTypeState:
                case NPC_FieldIndex.AIDTDataTypeState:
                case NPC_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return NPCAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Name:
                case NPC_FieldIndex.Model:
                case NPC_FieldIndex.Flags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.Factions:
                case NPC_FieldIndex.DeathItem:
                case NPC_FieldIndex.Race:
                case NPC_FieldIndex.Spells:
                case NPC_FieldIndex.Script:
                case NPC_FieldIndex.Items:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.AIPackages:
                case NPC_FieldIndex.Animations:
                case NPC_FieldIndex.Class:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                case NPC_FieldIndex.Hair:
                case NPC_FieldIndex.HairLength:
                case NPC_FieldIndex.Eyes:
                case NPC_FieldIndex.HairColor:
                case NPC_FieldIndex.CombatStyle:
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                case NPC_FieldIndex.Unknown:
                case NPC_FieldIndex.ACBSDataTypeState:
                case NPC_FieldIndex.AIDTDataTypeState:
                case NPC_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return NPCAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Name:
                    return "Name";
                case NPC_FieldIndex.Model:
                    return "Model";
                case NPC_FieldIndex.Flags:
                    return "Flags";
                case NPC_FieldIndex.BaseSpellPoints:
                    return "BaseSpellPoints";
                case NPC_FieldIndex.Fatigue:
                    return "Fatigue";
                case NPC_FieldIndex.BarterGold:
                    return "BarterGold";
                case NPC_FieldIndex.LevelOffset:
                    return "LevelOffset";
                case NPC_FieldIndex.CalcMin:
                    return "CalcMin";
                case NPC_FieldIndex.CalcMax:
                    return "CalcMax";
                case NPC_FieldIndex.Factions:
                    return "Factions";
                case NPC_FieldIndex.DeathItem:
                    return "DeathItem";
                case NPC_FieldIndex.Race:
                    return "Race";
                case NPC_FieldIndex.Spells:
                    return "Spells";
                case NPC_FieldIndex.Script:
                    return "Script";
                case NPC_FieldIndex.Items:
                    return "Items";
                case NPC_FieldIndex.Aggression:
                    return "Aggression";
                case NPC_FieldIndex.Confidence:
                    return "Confidence";
                case NPC_FieldIndex.EnergyLevel:
                    return "EnergyLevel";
                case NPC_FieldIndex.Responsibility:
                    return "Responsibility";
                case NPC_FieldIndex.BuySellServices:
                    return "BuySellServices";
                case NPC_FieldIndex.Teaches:
                    return "Teaches";
                case NPC_FieldIndex.MaximumTrainingLevel:
                    return "MaximumTrainingLevel";
                case NPC_FieldIndex.Fluff:
                    return "Fluff";
                case NPC_FieldIndex.AIPackages:
                    return "AIPackages";
                case NPC_FieldIndex.Animations:
                    return "Animations";
                case NPC_FieldIndex.Class:
                    return "Class";
                case NPC_FieldIndex.Armorer:
                    return "Armorer";
                case NPC_FieldIndex.Athletics:
                    return "Athletics";
                case NPC_FieldIndex.Blade:
                    return "Blade";
                case NPC_FieldIndex.Block:
                    return "Block";
                case NPC_FieldIndex.Blunt:
                    return "Blunt";
                case NPC_FieldIndex.HandToHand:
                    return "HandToHand";
                case NPC_FieldIndex.HeavyArmor:
                    return "HeavyArmor";
                case NPC_FieldIndex.Alchemy:
                    return "Alchemy";
                case NPC_FieldIndex.Alteration:
                    return "Alteration";
                case NPC_FieldIndex.Conjuration:
                    return "Conjuration";
                case NPC_FieldIndex.Destruction:
                    return "Destruction";
                case NPC_FieldIndex.Illusion:
                    return "Illusion";
                case NPC_FieldIndex.Mysticism:
                    return "Mysticism";
                case NPC_FieldIndex.Restoration:
                    return "Restoration";
                case NPC_FieldIndex.Acrobatics:
                    return "Acrobatics";
                case NPC_FieldIndex.LightArmor:
                    return "LightArmor";
                case NPC_FieldIndex.Marksman:
                    return "Marksman";
                case NPC_FieldIndex.Mercantile:
                    return "Mercantile";
                case NPC_FieldIndex.Security:
                    return "Security";
                case NPC_FieldIndex.Sneak:
                    return "Sneak";
                case NPC_FieldIndex.Speechcraft:
                    return "Speechcraft";
                case NPC_FieldIndex.Health:
                    return "Health";
                case NPC_FieldIndex.Strength:
                    return "Strength";
                case NPC_FieldIndex.Intelligence:
                    return "Intelligence";
                case NPC_FieldIndex.Willpower:
                    return "Willpower";
                case NPC_FieldIndex.Agility:
                    return "Agility";
                case NPC_FieldIndex.Speed:
                    return "Speed";
                case NPC_FieldIndex.Endurance:
                    return "Endurance";
                case NPC_FieldIndex.Personality:
                    return "Personality";
                case NPC_FieldIndex.Luck:
                    return "Luck";
                case NPC_FieldIndex.Hair:
                    return "Hair";
                case NPC_FieldIndex.HairLength:
                    return "HairLength";
                case NPC_FieldIndex.Eyes:
                    return "Eyes";
                case NPC_FieldIndex.HairColor:
                    return "HairColor";
                case NPC_FieldIndex.CombatStyle:
                    return "CombatStyle";
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    return "FaceGenGeometrySymmetric";
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    return "FaceGenGeometryAsymmetric";
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    return "FaceGenTextureSymmetric";
                case NPC_FieldIndex.Unknown:
                    return "Unknown";
                case NPC_FieldIndex.ACBSDataTypeState:
                    return "ACBSDataTypeState";
                case NPC_FieldIndex.AIDTDataTypeState:
                    return "AIDTDataTypeState";
                case NPC_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return NPCAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Name:
                case NPC_FieldIndex.Model:
                case NPC_FieldIndex.Flags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.Factions:
                case NPC_FieldIndex.DeathItem:
                case NPC_FieldIndex.Race:
                case NPC_FieldIndex.Spells:
                case NPC_FieldIndex.Script:
                case NPC_FieldIndex.Items:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.AIPackages:
                case NPC_FieldIndex.Animations:
                case NPC_FieldIndex.Class:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                case NPC_FieldIndex.Hair:
                case NPC_FieldIndex.HairLength:
                case NPC_FieldIndex.Eyes:
                case NPC_FieldIndex.HairColor:
                case NPC_FieldIndex.CombatStyle:
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                case NPC_FieldIndex.Unknown:
                case NPC_FieldIndex.ACBSDataTypeState:
                case NPC_FieldIndex.AIDTDataTypeState:
                case NPC_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return NPCAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Name:
                case NPC_FieldIndex.Model:
                case NPC_FieldIndex.Flags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.Factions:
                case NPC_FieldIndex.DeathItem:
                case NPC_FieldIndex.Race:
                case NPC_FieldIndex.Spells:
                case NPC_FieldIndex.Script:
                case NPC_FieldIndex.Items:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.AIPackages:
                case NPC_FieldIndex.Animations:
                case NPC_FieldIndex.Class:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                case NPC_FieldIndex.Hair:
                case NPC_FieldIndex.HairLength:
                case NPC_FieldIndex.Eyes:
                case NPC_FieldIndex.HairColor:
                case NPC_FieldIndex.CombatStyle:
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                case NPC_FieldIndex.Unknown:
                case NPC_FieldIndex.ACBSDataTypeState:
                case NPC_FieldIndex.AIDTDataTypeState:
                case NPC_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return NPCAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Name:
                    return typeof(String);
                case NPC_FieldIndex.Model:
                    return typeof(Model);
                case NPC_FieldIndex.Flags:
                    return typeof(NPC.NPCFlag);
                case NPC_FieldIndex.BaseSpellPoints:
                    return typeof(UInt16);
                case NPC_FieldIndex.Fatigue:
                    return typeof(UInt16);
                case NPC_FieldIndex.BarterGold:
                    return typeof(UInt16);
                case NPC_FieldIndex.LevelOffset:
                    return typeof(Int16);
                case NPC_FieldIndex.CalcMin:
                    return typeof(UInt16);
                case NPC_FieldIndex.CalcMax:
                    return typeof(UInt16);
                case NPC_FieldIndex.Factions:
                    return typeof(ISetList<RankPlacement>);
                case NPC_FieldIndex.DeathItem:
                    return typeof(IFormSetLink<ItemAbstract>);
                case NPC_FieldIndex.Race:
                    return typeof(IFormSetLink<Race>);
                case NPC_FieldIndex.Spells:
                    return typeof(ISetList<IFormLink<SpellAbstract>>);
                case NPC_FieldIndex.Script:
                    return typeof(IFormSetLink<Script>);
                case NPC_FieldIndex.Items:
                    return typeof(ISetList<ItemEntry>);
                case NPC_FieldIndex.Aggression:
                    return typeof(Byte);
                case NPC_FieldIndex.Confidence:
                    return typeof(Byte);
                case NPC_FieldIndex.EnergyLevel:
                    return typeof(Byte);
                case NPC_FieldIndex.Responsibility:
                    return typeof(Byte);
                case NPC_FieldIndex.BuySellServices:
                    return typeof(NPC.BuySellServiceFlag);
                case NPC_FieldIndex.Teaches:
                    return typeof(Skill);
                case NPC_FieldIndex.MaximumTrainingLevel:
                    return typeof(Byte);
                case NPC_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case NPC_FieldIndex.AIPackages:
                    return typeof(ISetList<IFormLink<AIPackage>>);
                case NPC_FieldIndex.Animations:
                    return typeof(ISetList<String>);
                case NPC_FieldIndex.Class:
                    return typeof(IFormSetLink<Class>);
                case NPC_FieldIndex.Armorer:
                    return typeof(Byte);
                case NPC_FieldIndex.Athletics:
                    return typeof(Byte);
                case NPC_FieldIndex.Blade:
                    return typeof(Byte);
                case NPC_FieldIndex.Block:
                    return typeof(Byte);
                case NPC_FieldIndex.Blunt:
                    return typeof(Byte);
                case NPC_FieldIndex.HandToHand:
                    return typeof(Byte);
                case NPC_FieldIndex.HeavyArmor:
                    return typeof(Byte);
                case NPC_FieldIndex.Alchemy:
                    return typeof(Byte);
                case NPC_FieldIndex.Alteration:
                    return typeof(Byte);
                case NPC_FieldIndex.Conjuration:
                    return typeof(Byte);
                case NPC_FieldIndex.Destruction:
                    return typeof(Byte);
                case NPC_FieldIndex.Illusion:
                    return typeof(Byte);
                case NPC_FieldIndex.Mysticism:
                    return typeof(Byte);
                case NPC_FieldIndex.Restoration:
                    return typeof(Byte);
                case NPC_FieldIndex.Acrobatics:
                    return typeof(Byte);
                case NPC_FieldIndex.LightArmor:
                    return typeof(Byte);
                case NPC_FieldIndex.Marksman:
                    return typeof(Byte);
                case NPC_FieldIndex.Mercantile:
                    return typeof(Byte);
                case NPC_FieldIndex.Security:
                    return typeof(Byte);
                case NPC_FieldIndex.Sneak:
                    return typeof(Byte);
                case NPC_FieldIndex.Speechcraft:
                    return typeof(Byte);
                case NPC_FieldIndex.Health:
                    return typeof(UInt32);
                case NPC_FieldIndex.Strength:
                    return typeof(Byte);
                case NPC_FieldIndex.Intelligence:
                    return typeof(Byte);
                case NPC_FieldIndex.Willpower:
                    return typeof(Byte);
                case NPC_FieldIndex.Agility:
                    return typeof(Byte);
                case NPC_FieldIndex.Speed:
                    return typeof(Byte);
                case NPC_FieldIndex.Endurance:
                    return typeof(Byte);
                case NPC_FieldIndex.Personality:
                    return typeof(Byte);
                case NPC_FieldIndex.Luck:
                    return typeof(Byte);
                case NPC_FieldIndex.Hair:
                    return typeof(IFormSetLink<Hair>);
                case NPC_FieldIndex.HairLength:
                    return typeof(Single);
                case NPC_FieldIndex.Eyes:
                    return typeof(ISetList<IFormLink<Eye>>);
                case NPC_FieldIndex.HairColor:
                    return typeof(Color);
                case NPC_FieldIndex.CombatStyle:
                    return typeof(IFormSetLink<CombatStyle>);
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    return typeof(Byte[]);
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    return typeof(Byte[]);
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    return typeof(Byte[]);
                case NPC_FieldIndex.Unknown:
                    return typeof(Byte[]);
                case NPC_FieldIndex.ACBSDataTypeState:
                    return typeof(NPC.ACBSDataType);
                case NPC_FieldIndex.AIDTDataTypeState:
                    return typeof(NPC.AIDTDataType);
                case NPC_FieldIndex.DATADataTypeState:
                    return typeof(NPC.DATADataType);
                default:
                    return NPCAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(NPCXmlWriteTranslation);
        public static readonly RecordType NPC__HEADER = new RecordType("NPC_");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ACBS_HEADER = new RecordType("ACBS");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType INAM_HEADER = new RecordType("INAM");
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType SPLO_HEADER = new RecordType("SPLO");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType CNTO_HEADER = new RecordType("CNTO");
        public static readonly RecordType AIDT_HEADER = new RecordType("AIDT");
        public static readonly RecordType PKID_HEADER = new RecordType("PKID");
        public static readonly RecordType KFFZ_HEADER = new RecordType("KFFZ");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType LNAM_HEADER = new RecordType("LNAM");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType HCLR_HEADER = new RecordType("HCLR");
        public static readonly RecordType ZNAM_HEADER = new RecordType("ZNAM");
        public static readonly RecordType FGGS_HEADER = new RecordType("FGGS");
        public static readonly RecordType FGGA_HEADER = new RecordType("FGGA");
        public static readonly RecordType FGTS_HEADER = new RecordType("FGTS");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = NPC__HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 20;
        public static readonly Type BinaryWriteTranslation = typeof(NPCBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class NPCSetterCommon : NPCAbstractSetterCommon
    {
        public new static readonly NPCSetterCommon Instance = new NPCSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INPCInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Model = null;
            item.Flags = default;
            item.BaseSpellPoints = default;
            item.Fatigue = default;
            item.BarterGold = default;
            item.LevelOffset = default;
            item.CalcMin = default;
            item.CalcMax = default;
            item.Factions.Unset();
            item.DeathItem.Unset();
            item.Race.Unset();
            item.Spells.Unset();
            item.Script.Unset();
            item.Items.Unset();
            item.Aggression = default;
            item.Confidence = default;
            item.EnergyLevel = default;
            item.Responsibility = default;
            item.BuySellServices = default;
            item.Teaches = default;
            item.MaximumTrainingLevel = default;
            item.Fluff = new byte[2];
            item.AIPackages.Unset();
            item.Animations.Unset();
            item.Class.Unset();
            item.Armorer = default;
            item.Athletics = default;
            item.Blade = default;
            item.Block = default;
            item.Blunt = default;
            item.HandToHand = default;
            item.HeavyArmor = default;
            item.Alchemy = default;
            item.Alteration = default;
            item.Conjuration = default;
            item.Destruction = default;
            item.Illusion = default;
            item.Mysticism = default;
            item.Restoration = default;
            item.Acrobatics = default;
            item.LightArmor = default;
            item.Marksman = default;
            item.Mercantile = default;
            item.Security = default;
            item.Sneak = default;
            item.Speechcraft = default;
            item.Health = default;
            item.Strength = default;
            item.Intelligence = default;
            item.Willpower = default;
            item.Agility = default;
            item.Speed = default;
            item.Endurance = default;
            item.Personality = default;
            item.Luck = default;
            item.Hair.Unset();
            item.HairLength = default;
            item.Eyes.Unset();
            item.HairColor = default;
            item.CombatStyle.Unset();
            item.FaceGenGeometrySymmetric = default;
            item.FaceGenGeometryAsymmetric = default;
            item.FaceGenTextureSymmetric = default;
            item.Unknown = default;
            item.ACBSDataTypeState = default;
            item.AIDTDataTypeState = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(INPCAbstractInternal item)
        {
            Clear(item: (INPCInternal)item);
        }
        
        public override void Clear(INPCSpawnInternal item)
        {
            Clear(item: (INPCInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (INPCInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (INPCInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            INPCInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasACBSDataType":
                    item.ACBSDataTypeState |= NPC.ACBSDataType.Has;
                    break;
                case "HasAIDTDataType":
                    item.AIDTDataTypeState |= NPC.AIDTDataType.Has;
                    break;
                case "HasDATADataType":
                    item.DATADataTypeState |= NPC.DATADataType.Has;
                    break;
                default:
                    NPCAbstractSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            INPCInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    NPCXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => NPC_Registration.NPC__HEADER;
        protected static void FillBinaryStructs(
            INPCInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            NPCAbstractSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            INPCInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Model);
                }
                case 0x53424341: // ACBS
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.ACBSDataTypeState = NPC.ACBSDataType.Has;
                    }
                    item.Flags = EnumBinaryTranslation<NPC.NPCFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.BaseSpellPoints = dataFrame.ReadUInt16();
                    item.Fatigue = dataFrame.ReadUInt16();
                    item.BarterGold = dataFrame.ReadUInt16();
                    item.LevelOffset = dataFrame.ReadInt16();
                    item.CalcMin = dataFrame.ReadUInt16();
                    item.CalcMax = dataFrame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.CalcMax);
                }
                case 0x4D414E53: // SNAM
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<RankPlacement>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: NPC_Registration.SNAM_HEADER,
                        item: item.Factions,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: (MutagenFrame r, out RankPlacement listSubItem) =>
                        {
                            return LoquiBinaryTranslation<RankPlacement>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Factions);
                }
                case 0x4D414E49: // INAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.DeathItem.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.DeathItem);
                }
                case 0x4D414E52: // RNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Race.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Race);
                }
                case 0x4F4C5053: // SPLO
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<SpellAbstract>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: NPC_Registration.SPLO_HEADER,
                        masterReferences: masterReferences,
                        item: item.Spells,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Spells);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Script.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Script);
                }
                case 0x4F544E43: // CNTO
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ItemEntry>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: NPC_Registration.CNTO_HEADER,
                        item: item.Items,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: (MutagenFrame r, out ItemEntry listSubItem) =>
                        {
                            return LoquiBinaryTranslation<ItemEntry>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Items);
                }
                case 0x54444941: // AIDT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.AIDTDataTypeState = NPC.AIDTDataType.Has;
                    }
                    item.Aggression = dataFrame.ReadUInt8();
                    item.Confidence = dataFrame.ReadUInt8();
                    item.EnergyLevel = dataFrame.ReadUInt8();
                    item.Responsibility = dataFrame.ReadUInt8();
                    item.BuySellServices = EnumBinaryTranslation<NPC.BuySellServiceFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Teaches = EnumBinaryTranslation<Skill>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.MaximumTrainingLevel = dataFrame.ReadUInt8();
                    item.Fluff = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: dataFrame.SpawnWithLength(2));
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Fluff);
                }
                case 0x44494B50: // PKID
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<AIPackage>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: NPC_Registration.PKID_HEADER,
                        masterReferences: masterReferences,
                        item: item.AIPackages,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.AIPackages);
                }
                case 0x5A46464B: // KFFZ
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Animations,
                        transl: (MutagenFrame r, out String listSubItem) =>
                        {
                            return Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                                r,
                                item: out listSubItem,
                                parseWhole: false);
                        });
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Animations);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Class.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Class);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = NPC.DATADataType.Has;
                    }
                    item.Armorer = dataFrame.ReadUInt8();
                    item.Athletics = dataFrame.ReadUInt8();
                    item.Blade = dataFrame.ReadUInt8();
                    item.Block = dataFrame.ReadUInt8();
                    item.Blunt = dataFrame.ReadUInt8();
                    item.HandToHand = dataFrame.ReadUInt8();
                    item.HeavyArmor = dataFrame.ReadUInt8();
                    item.Alchemy = dataFrame.ReadUInt8();
                    item.Alteration = dataFrame.ReadUInt8();
                    item.Conjuration = dataFrame.ReadUInt8();
                    item.Destruction = dataFrame.ReadUInt8();
                    item.Illusion = dataFrame.ReadUInt8();
                    item.Mysticism = dataFrame.ReadUInt8();
                    item.Restoration = dataFrame.ReadUInt8();
                    item.Acrobatics = dataFrame.ReadUInt8();
                    item.LightArmor = dataFrame.ReadUInt8();
                    item.Marksman = dataFrame.ReadUInt8();
                    item.Mercantile = dataFrame.ReadUInt8();
                    item.Security = dataFrame.ReadUInt8();
                    item.Sneak = dataFrame.ReadUInt8();
                    item.Speechcraft = dataFrame.ReadUInt8();
                    item.Health = dataFrame.ReadUInt32();
                    item.Strength = dataFrame.ReadUInt8();
                    item.Intelligence = dataFrame.ReadUInt8();
                    item.Willpower = dataFrame.ReadUInt8();
                    item.Agility = dataFrame.ReadUInt8();
                    item.Speed = dataFrame.ReadUInt8();
                    item.Endurance = dataFrame.ReadUInt8();
                    item.Personality = dataFrame.ReadUInt8();
                    item.Luck = dataFrame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Luck);
                }
                case 0x4D414E48: // HNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Hair.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Hair);
                }
                case 0x4D414E4C: // LNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.HairLength = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.HairLength);
                }
                case 0x4D414E45: // ENAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Eye>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Eyes,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Eyes);
                }
                case 0x524C4348: // HCLR
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.HairColor = Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        extraByte: true);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.HairColor);
                }
                case 0x4D414E5A: // ZNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.CombatStyle.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.CombatStyle);
                }
                case 0x53474746: // FGGS
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FaceGenGeometrySymmetric = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.FaceGenGeometrySymmetric);
                }
                case 0x41474746: // FGGA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FaceGenGeometryAsymmetric = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.FaceGenGeometryAsymmetric);
                }
                case 0x53544746: // FGTS
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FaceGenTextureSymmetric = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.FaceGenTextureSymmetric);
                }
                case 0x4D414E46: // FNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Unknown = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Unknown);
                }
                default:
                    return NPCAbstractSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            INPCInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<INPCInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class NPCCommon : NPCAbstractCommon
    {
        public new static readonly NPCCommon Instance = new NPCCommon();

        public NPC.Mask<bool> GetEqualsMask(
            INPCGetter item,
            INPCGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NPC.Mask<bool>(false);
            ((NPCCommon)((INPCGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INPCGetter item,
            INPCGetter rhs,
            NPC.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.BaseSpellPoints = item.BaseSpellPoints == rhs.BaseSpellPoints;
            ret.Fatigue = item.Fatigue == rhs.Fatigue;
            ret.BarterGold = item.BarterGold == rhs.BarterGold;
            ret.LevelOffset = item.LevelOffset == rhs.LevelOffset;
            ret.CalcMin = item.CalcMin == rhs.CalcMin;
            ret.CalcMax = item.CalcMax == rhs.CalcMax;
            ret.Factions = item.Factions.CollectionEqualsHelper(
                rhs.Factions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DeathItem = object.Equals(item.DeathItem, rhs.DeathItem);
            ret.Race = object.Equals(item.Race, rhs.Race);
            ret.Spells = item.Spells.CollectionEqualsHelper(
                rhs.Spells,
                (l, r) => object.Equals(l, r),
                include);
            ret.Script = object.Equals(item.Script, rhs.Script);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Aggression = item.Aggression == rhs.Aggression;
            ret.Confidence = item.Confidence == rhs.Confidence;
            ret.EnergyLevel = item.EnergyLevel == rhs.EnergyLevel;
            ret.Responsibility = item.Responsibility == rhs.Responsibility;
            ret.BuySellServices = item.BuySellServices == rhs.BuySellServices;
            ret.Teaches = item.Teaches == rhs.Teaches;
            ret.MaximumTrainingLevel = item.MaximumTrainingLevel == rhs.MaximumTrainingLevel;
            ret.Fluff = MemoryExtensions.SequenceEqual(item.Fluff, rhs.Fluff);
            ret.AIPackages = item.AIPackages.CollectionEqualsHelper(
                rhs.AIPackages,
                (l, r) => object.Equals(l, r),
                include);
            ret.Animations = item.Animations.CollectionEqualsHelper(
                rhs.Animations,
                (l, r) => string.Equals(l, r),
                include);
            ret.Class = object.Equals(item.Class, rhs.Class);
            ret.Armorer = item.Armorer == rhs.Armorer;
            ret.Athletics = item.Athletics == rhs.Athletics;
            ret.Blade = item.Blade == rhs.Blade;
            ret.Block = item.Block == rhs.Block;
            ret.Blunt = item.Blunt == rhs.Blunt;
            ret.HandToHand = item.HandToHand == rhs.HandToHand;
            ret.HeavyArmor = item.HeavyArmor == rhs.HeavyArmor;
            ret.Alchemy = item.Alchemy == rhs.Alchemy;
            ret.Alteration = item.Alteration == rhs.Alteration;
            ret.Conjuration = item.Conjuration == rhs.Conjuration;
            ret.Destruction = item.Destruction == rhs.Destruction;
            ret.Illusion = item.Illusion == rhs.Illusion;
            ret.Mysticism = item.Mysticism == rhs.Mysticism;
            ret.Restoration = item.Restoration == rhs.Restoration;
            ret.Acrobatics = item.Acrobatics == rhs.Acrobatics;
            ret.LightArmor = item.LightArmor == rhs.LightArmor;
            ret.Marksman = item.Marksman == rhs.Marksman;
            ret.Mercantile = item.Mercantile == rhs.Mercantile;
            ret.Security = item.Security == rhs.Security;
            ret.Sneak = item.Sneak == rhs.Sneak;
            ret.Speechcraft = item.Speechcraft == rhs.Speechcraft;
            ret.Health = item.Health == rhs.Health;
            ret.Strength = item.Strength == rhs.Strength;
            ret.Intelligence = item.Intelligence == rhs.Intelligence;
            ret.Willpower = item.Willpower == rhs.Willpower;
            ret.Agility = item.Agility == rhs.Agility;
            ret.Speed = item.Speed == rhs.Speed;
            ret.Endurance = item.Endurance == rhs.Endurance;
            ret.Personality = item.Personality == rhs.Personality;
            ret.Luck = item.Luck == rhs.Luck;
            ret.Hair = object.Equals(item.Hair, rhs.Hair);
            ret.HairLength = item.HairLength.EqualsWithin(rhs.HairLength);
            ret.Eyes = item.Eyes.CollectionEqualsHelper(
                rhs.Eyes,
                (l, r) => object.Equals(l, r),
                include);
            ret.HairColor = item.HairColor.ColorOnlyEquals(rhs.HairColor);
            ret.CombatStyle = object.Equals(item.CombatStyle, rhs.CombatStyle);
            ret.FaceGenGeometrySymmetric = MemoryExtensions.SequenceEqual(item.FaceGenGeometrySymmetric, rhs.FaceGenGeometrySymmetric);
            ret.FaceGenGeometryAsymmetric = MemoryExtensions.SequenceEqual(item.FaceGenGeometryAsymmetric, rhs.FaceGenGeometryAsymmetric);
            ret.FaceGenTextureSymmetric = MemoryExtensions.SequenceEqual(item.FaceGenTextureSymmetric, rhs.FaceGenTextureSymmetric);
            ret.Unknown = MemoryExtensions.SequenceEqual(item.Unknown, rhs.Unknown);
            ret.ACBSDataTypeState = item.ACBSDataTypeState == rhs.ACBSDataTypeState;
            ret.AIDTDataTypeState = item.AIDTDataTypeState == rhs.AIDTDataTypeState;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            INPCGetter item,
            string? name = null,
            NPC.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            INPCGetter item,
            FileGeneration fg,
            string? name = null,
            NPC.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"NPC =>");
            }
            else
            {
                fg.AppendLine($"{name} (NPC) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            INPCGetter item,
            FileGeneration fg,
            NPC.Mask<bool>? printMask = null)
        {
            NPCAbstractCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.BaseSpellPoints ?? true)
            {
                fg.AppendLine($"BaseSpellPoints => {item.BaseSpellPoints}");
            }
            if (printMask?.Fatigue ?? true)
            {
                fg.AppendLine($"Fatigue => {item.Fatigue}");
            }
            if (printMask?.BarterGold ?? true)
            {
                fg.AppendLine($"BarterGold => {item.BarterGold}");
            }
            if (printMask?.LevelOffset ?? true)
            {
                fg.AppendLine($"LevelOffset => {item.LevelOffset}");
            }
            if (printMask?.CalcMin ?? true)
            {
                fg.AppendLine($"CalcMin => {item.CalcMin}");
            }
            if (printMask?.CalcMax ?? true)
            {
                fg.AppendLine($"CalcMax => {item.CalcMax}");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                fg.AppendLine("Factions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Factions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.DeathItem ?? true)
            {
                fg.AppendLine($"DeathItem => {item.DeathItem}");
            }
            if (printMask?.Race ?? true)
            {
                fg.AppendLine($"Race => {item.Race}");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                fg.AppendLine("Spells =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Spells)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendLine($"Script => {item.Script}");
            }
            if (printMask?.Items?.Overall ?? true)
            {
                fg.AppendLine("Items =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Items)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Aggression ?? true)
            {
                fg.AppendLine($"Aggression => {item.Aggression}");
            }
            if (printMask?.Confidence ?? true)
            {
                fg.AppendLine($"Confidence => {item.Confidence}");
            }
            if (printMask?.EnergyLevel ?? true)
            {
                fg.AppendLine($"EnergyLevel => {item.EnergyLevel}");
            }
            if (printMask?.Responsibility ?? true)
            {
                fg.AppendLine($"Responsibility => {item.Responsibility}");
            }
            if (printMask?.BuySellServices ?? true)
            {
                fg.AppendLine($"BuySellServices => {item.BuySellServices}");
            }
            if (printMask?.Teaches ?? true)
            {
                fg.AppendLine($"Teaches => {item.Teaches}");
            }
            if (printMask?.MaximumTrainingLevel ?? true)
            {
                fg.AppendLine($"MaximumTrainingLevel => {item.MaximumTrainingLevel}");
            }
            if (printMask?.Fluff ?? true)
            {
                fg.AppendLine($"Fluff => {SpanExt.ToHexString(item.Fluff)}");
            }
            if (printMask?.AIPackages?.Overall ?? true)
            {
                fg.AppendLine("AIPackages =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.AIPackages)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Animations?.Overall ?? true)
            {
                fg.AppendLine("Animations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Animations)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Class ?? true)
            {
                fg.AppendLine($"Class => {item.Class}");
            }
            if (printMask?.Armorer ?? true)
            {
                fg.AppendLine($"Armorer => {item.Armorer}");
            }
            if (printMask?.Athletics ?? true)
            {
                fg.AppendLine($"Athletics => {item.Athletics}");
            }
            if (printMask?.Blade ?? true)
            {
                fg.AppendLine($"Blade => {item.Blade}");
            }
            if (printMask?.Block ?? true)
            {
                fg.AppendLine($"Block => {item.Block}");
            }
            if (printMask?.Blunt ?? true)
            {
                fg.AppendLine($"Blunt => {item.Blunt}");
            }
            if (printMask?.HandToHand ?? true)
            {
                fg.AppendLine($"HandToHand => {item.HandToHand}");
            }
            if (printMask?.HeavyArmor ?? true)
            {
                fg.AppendLine($"HeavyArmor => {item.HeavyArmor}");
            }
            if (printMask?.Alchemy ?? true)
            {
                fg.AppendLine($"Alchemy => {item.Alchemy}");
            }
            if (printMask?.Alteration ?? true)
            {
                fg.AppendLine($"Alteration => {item.Alteration}");
            }
            if (printMask?.Conjuration ?? true)
            {
                fg.AppendLine($"Conjuration => {item.Conjuration}");
            }
            if (printMask?.Destruction ?? true)
            {
                fg.AppendLine($"Destruction => {item.Destruction}");
            }
            if (printMask?.Illusion ?? true)
            {
                fg.AppendLine($"Illusion => {item.Illusion}");
            }
            if (printMask?.Mysticism ?? true)
            {
                fg.AppendLine($"Mysticism => {item.Mysticism}");
            }
            if (printMask?.Restoration ?? true)
            {
                fg.AppendLine($"Restoration => {item.Restoration}");
            }
            if (printMask?.Acrobatics ?? true)
            {
                fg.AppendLine($"Acrobatics => {item.Acrobatics}");
            }
            if (printMask?.LightArmor ?? true)
            {
                fg.AppendLine($"LightArmor => {item.LightArmor}");
            }
            if (printMask?.Marksman ?? true)
            {
                fg.AppendLine($"Marksman => {item.Marksman}");
            }
            if (printMask?.Mercantile ?? true)
            {
                fg.AppendLine($"Mercantile => {item.Mercantile}");
            }
            if (printMask?.Security ?? true)
            {
                fg.AppendLine($"Security => {item.Security}");
            }
            if (printMask?.Sneak ?? true)
            {
                fg.AppendLine($"Sneak => {item.Sneak}");
            }
            if (printMask?.Speechcraft ?? true)
            {
                fg.AppendLine($"Speechcraft => {item.Speechcraft}");
            }
            if (printMask?.Health ?? true)
            {
                fg.AppendLine($"Health => {item.Health}");
            }
            if (printMask?.Strength ?? true)
            {
                fg.AppendLine($"Strength => {item.Strength}");
            }
            if (printMask?.Intelligence ?? true)
            {
                fg.AppendLine($"Intelligence => {item.Intelligence}");
            }
            if (printMask?.Willpower ?? true)
            {
                fg.AppendLine($"Willpower => {item.Willpower}");
            }
            if (printMask?.Agility ?? true)
            {
                fg.AppendLine($"Agility => {item.Agility}");
            }
            if (printMask?.Speed ?? true)
            {
                fg.AppendLine($"Speed => {item.Speed}");
            }
            if (printMask?.Endurance ?? true)
            {
                fg.AppendLine($"Endurance => {item.Endurance}");
            }
            if (printMask?.Personality ?? true)
            {
                fg.AppendLine($"Personality => {item.Personality}");
            }
            if (printMask?.Luck ?? true)
            {
                fg.AppendLine($"Luck => {item.Luck}");
            }
            if (printMask?.Hair ?? true)
            {
                fg.AppendLine($"Hair => {item.Hair}");
            }
            if (printMask?.HairLength ?? true)
            {
                fg.AppendLine($"HairLength => {item.HairLength}");
            }
            if (printMask?.Eyes?.Overall ?? true)
            {
                fg.AppendLine("Eyes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Eyes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.HairColor ?? true)
            {
                fg.AppendLine($"HairColor => {item.HairColor}");
            }
            if (printMask?.CombatStyle ?? true)
            {
                fg.AppendLine($"CombatStyle => {item.CombatStyle}");
            }
            if (printMask?.FaceGenGeometrySymmetric ?? true)
            {
                fg.AppendLine($"FaceGenGeometrySymmetric => {SpanExt.ToHexString(item.FaceGenGeometrySymmetric)}");
            }
            if (printMask?.FaceGenGeometryAsymmetric ?? true)
            {
                fg.AppendLine($"FaceGenGeometryAsymmetric => {SpanExt.ToHexString(item.FaceGenGeometryAsymmetric)}");
            }
            if (printMask?.FaceGenTextureSymmetric ?? true)
            {
                fg.AppendLine($"FaceGenTextureSymmetric => {SpanExt.ToHexString(item.FaceGenTextureSymmetric)}");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
            if (printMask?.ACBSDataTypeState ?? true)
            {
                fg.AppendLine($"ACBSDataTypeState => {item.ACBSDataTypeState}");
            }
            if (printMask?.AIDTDataTypeState ?? true)
            {
                fg.AppendLine($"AIDTDataTypeState => {item.AIDTDataTypeState}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendLine($"DATADataTypeState => {item.DATADataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            INPCGetter item,
            NPC.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Factions?.Overall.HasValue ?? false && checkMask.Factions!.Overall.Value != item.Factions.HasBeenSet) return false;
            if (checkMask.DeathItem.HasValue && checkMask.DeathItem.Value != item.DeathItem.HasBeenSet) return false;
            if (checkMask.Race.HasValue && checkMask.Race.Value != item.Race.HasBeenSet) return false;
            if (checkMask.Spells?.Overall.HasValue ?? false && checkMask.Spells!.Overall.Value != item.Spells.HasBeenSet) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script.HasBeenSet) return false;
            if (checkMask.Items?.Overall.HasValue ?? false && checkMask.Items!.Overall.Value != item.Items.HasBeenSet) return false;
            if (checkMask.AIPackages?.Overall.HasValue ?? false && checkMask.AIPackages!.Overall.Value != item.AIPackages.HasBeenSet) return false;
            if (checkMask.Animations?.Overall.HasValue ?? false && checkMask.Animations!.Overall.Value != item.Animations.HasBeenSet) return false;
            if (checkMask.Class.HasValue && checkMask.Class.Value != item.Class.HasBeenSet) return false;
            if (checkMask.Hair.HasValue && checkMask.Hair.Value != item.Hair.HasBeenSet) return false;
            if (checkMask.HairLength.HasValue && checkMask.HairLength.Value != (item.HairLength != null)) return false;
            if (checkMask.Eyes?.Overall.HasValue ?? false && checkMask.Eyes!.Overall.Value != item.Eyes.HasBeenSet) return false;
            if (checkMask.HairColor.HasValue && checkMask.HairColor.Value != (item.HairColor != null)) return false;
            if (checkMask.CombatStyle.HasValue && checkMask.CombatStyle.Value != item.CombatStyle.HasBeenSet) return false;
            if (checkMask.FaceGenGeometrySymmetric.HasValue && checkMask.FaceGenGeometrySymmetric.Value != item.FaceGenGeometrySymmetric_IsSet) return false;
            if (checkMask.FaceGenGeometryAsymmetric.HasValue && checkMask.FaceGenGeometryAsymmetric.Value != item.FaceGenGeometryAsymmetric_IsSet) return false;
            if (checkMask.FaceGenTextureSymmetric.HasValue && checkMask.FaceGenTextureSymmetric.Value != item.FaceGenTextureSymmetric_IsSet) return false;
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != item.Unknown_IsSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            INPCGetter item,
            NPC.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.Flags = true;
            mask.BaseSpellPoints = true;
            mask.Fatigue = true;
            mask.BarterGold = true;
            mask.LevelOffset = true;
            mask.CalcMin = true;
            mask.CalcMax = true;
            mask.Factions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RankPlacement.Mask<bool>?>>>(item.Factions.HasBeenSet, item.Factions.WithIndex().Select((i) => new MaskItemIndexed<bool, RankPlacement.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.DeathItem = item.DeathItem.HasBeenSet;
            mask.Race = item.Race.HasBeenSet;
            mask.Spells = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Spells.HasBeenSet, Enumerable.Empty<(int, bool)>());
            mask.Script = item.Script.HasBeenSet;
            mask.Items = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, ItemEntry.Mask<bool>?>>>(item.Items.HasBeenSet, item.Items.WithIndex().Select((i) => new MaskItemIndexed<bool, ItemEntry.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Aggression = true;
            mask.Confidence = true;
            mask.EnergyLevel = true;
            mask.Responsibility = true;
            mask.BuySellServices = true;
            mask.Teaches = true;
            mask.MaximumTrainingLevel = true;
            mask.Fluff = true;
            mask.AIPackages = new MaskItem<bool, IEnumerable<(int, bool)>>(item.AIPackages.HasBeenSet, Enumerable.Empty<(int, bool)>());
            mask.Animations = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Animations.HasBeenSet, Enumerable.Empty<(int, bool)>());
            mask.Class = item.Class.HasBeenSet;
            mask.Armorer = true;
            mask.Athletics = true;
            mask.Blade = true;
            mask.Block = true;
            mask.Blunt = true;
            mask.HandToHand = true;
            mask.HeavyArmor = true;
            mask.Alchemy = true;
            mask.Alteration = true;
            mask.Conjuration = true;
            mask.Destruction = true;
            mask.Illusion = true;
            mask.Mysticism = true;
            mask.Restoration = true;
            mask.Acrobatics = true;
            mask.LightArmor = true;
            mask.Marksman = true;
            mask.Mercantile = true;
            mask.Security = true;
            mask.Sneak = true;
            mask.Speechcraft = true;
            mask.Health = true;
            mask.Strength = true;
            mask.Intelligence = true;
            mask.Willpower = true;
            mask.Agility = true;
            mask.Speed = true;
            mask.Endurance = true;
            mask.Personality = true;
            mask.Luck = true;
            mask.Hair = item.Hair.HasBeenSet;
            mask.HairLength = (item.HairLength != null);
            mask.Eyes = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Eyes.HasBeenSet, Enumerable.Empty<(int, bool)>());
            mask.HairColor = (item.HairColor != null);
            mask.CombatStyle = item.CombatStyle.HasBeenSet;
            mask.FaceGenGeometrySymmetric = item.FaceGenGeometrySymmetric_IsSet;
            mask.FaceGenGeometryAsymmetric = item.FaceGenGeometryAsymmetric_IsSet;
            mask.FaceGenTextureSymmetric = item.FaceGenTextureSymmetric_IsSet;
            mask.Unknown = item.Unknown_IsSet;
            mask.ACBSDataTypeState = true;
            mask.AIDTDataTypeState = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static NPC_FieldIndex ConvertFieldIndex(NPCAbstract_FieldIndex index)
        {
            switch (index)
            {
                case NPCAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (NPC_FieldIndex)((int)index);
                case NPCAbstract_FieldIndex.FormKey:
                    return (NPC_FieldIndex)((int)index);
                case NPCAbstract_FieldIndex.Version:
                    return (NPC_FieldIndex)((int)index);
                case NPCAbstract_FieldIndex.EditorID:
                    return (NPC_FieldIndex)((int)index);
                case NPCAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (NPC_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new NPC_FieldIndex ConvertFieldIndex(NPCSpawn_FieldIndex index)
        {
            switch (index)
            {
                case NPCSpawn_FieldIndex.MajorRecordFlagsRaw:
                    return (NPC_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.FormKey:
                    return (NPC_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.Version:
                    return (NPC_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.EditorID:
                    return (NPC_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.OblivionMajorRecordFlags:
                    return (NPC_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new NPC_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (NPC_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (NPC_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (NPC_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (NPC_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (NPC_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new NPC_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (NPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (NPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (NPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (NPC_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INPCGetter? lhs,
            INPCGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.BaseSpellPoints != rhs.BaseSpellPoints) return false;
            if (lhs.Fatigue != rhs.Fatigue) return false;
            if (lhs.BarterGold != rhs.BarterGold) return false;
            if (lhs.LevelOffset != rhs.LevelOffset) return false;
            if (lhs.CalcMin != rhs.CalcMin) return false;
            if (lhs.CalcMax != rhs.CalcMax) return false;
            if (!lhs.Factions.SequenceEqual(rhs.Factions)) return false;
            if (!lhs.DeathItem.Equals(rhs.DeathItem)) return false;
            if (!lhs.Race.Equals(rhs.Race)) return false;
            if (!lhs.Spells.SequenceEqual(rhs.Spells)) return false;
            if (!lhs.Script.Equals(rhs.Script)) return false;
            if (!lhs.Items.SequenceEqual(rhs.Items)) return false;
            if (lhs.Aggression != rhs.Aggression) return false;
            if (lhs.Confidence != rhs.Confidence) return false;
            if (lhs.EnergyLevel != rhs.EnergyLevel) return false;
            if (lhs.Responsibility != rhs.Responsibility) return false;
            if (lhs.BuySellServices != rhs.BuySellServices) return false;
            if (lhs.Teaches != rhs.Teaches) return false;
            if (lhs.MaximumTrainingLevel != rhs.MaximumTrainingLevel) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Fluff, rhs.Fluff)) return false;
            if (!lhs.AIPackages.SequenceEqual(rhs.AIPackages)) return false;
            if (!lhs.Animations.SequenceEqual(rhs.Animations)) return false;
            if (!lhs.Class.Equals(rhs.Class)) return false;
            if (lhs.Armorer != rhs.Armorer) return false;
            if (lhs.Athletics != rhs.Athletics) return false;
            if (lhs.Blade != rhs.Blade) return false;
            if (lhs.Block != rhs.Block) return false;
            if (lhs.Blunt != rhs.Blunt) return false;
            if (lhs.HandToHand != rhs.HandToHand) return false;
            if (lhs.HeavyArmor != rhs.HeavyArmor) return false;
            if (lhs.Alchemy != rhs.Alchemy) return false;
            if (lhs.Alteration != rhs.Alteration) return false;
            if (lhs.Conjuration != rhs.Conjuration) return false;
            if (lhs.Destruction != rhs.Destruction) return false;
            if (lhs.Illusion != rhs.Illusion) return false;
            if (lhs.Mysticism != rhs.Mysticism) return false;
            if (lhs.Restoration != rhs.Restoration) return false;
            if (lhs.Acrobatics != rhs.Acrobatics) return false;
            if (lhs.LightArmor != rhs.LightArmor) return false;
            if (lhs.Marksman != rhs.Marksman) return false;
            if (lhs.Mercantile != rhs.Mercantile) return false;
            if (lhs.Security != rhs.Security) return false;
            if (lhs.Sneak != rhs.Sneak) return false;
            if (lhs.Speechcraft != rhs.Speechcraft) return false;
            if (lhs.Health != rhs.Health) return false;
            if (lhs.Strength != rhs.Strength) return false;
            if (lhs.Intelligence != rhs.Intelligence) return false;
            if (lhs.Willpower != rhs.Willpower) return false;
            if (lhs.Agility != rhs.Agility) return false;
            if (lhs.Speed != rhs.Speed) return false;
            if (lhs.Endurance != rhs.Endurance) return false;
            if (lhs.Personality != rhs.Personality) return false;
            if (lhs.Luck != rhs.Luck) return false;
            if (!lhs.Hair.Equals(rhs.Hair)) return false;
            if (!lhs.HairLength.EqualsWithin(rhs.HairLength)) return false;
            if (!lhs.Eyes.SequenceEqual(rhs.Eyes)) return false;
            if (!lhs.HairColor.ColorOnlyEquals(rhs.HairColor)) return false;
            if (!lhs.CombatStyle.Equals(rhs.CombatStyle)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.FaceGenGeometrySymmetric, rhs.FaceGenGeometrySymmetric)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.FaceGenGeometryAsymmetric, rhs.FaceGenGeometryAsymmetric)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.FaceGenTextureSymmetric, rhs.FaceGenTextureSymmetric)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unknown, rhs.Unknown)) return false;
            if (lhs.ACBSDataTypeState != rhs.ACBSDataTypeState) return false;
            if (lhs.AIDTDataTypeState != rhs.AIDTDataTypeState) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            INPCAbstractGetter? lhs,
            INPCAbstractGetter? rhs)
        {
            return Equals(
                lhs: (INPCGetter?)lhs,
                rhs: rhs as INPCGetter);
        }
        
        public override bool Equals(
            INPCSpawnGetter? lhs,
            INPCSpawnGetter? rhs)
        {
            return Equals(
                lhs: (INPCGetter?)lhs,
                rhs: rhs as INPCGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (INPCGetter?)lhs,
                rhs: rhs as INPCGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (INPCGetter?)lhs,
                rhs: rhs as INPCGetter);
        }
        
        public virtual int GetHashCode(INPCGetter item)
        {
            int ret = 0;
            if (item.Name.TryGet(out var Nameitem))
            {
                ret = HashHelper.GetHashCode(Nameitem).CombineHashCode(ret);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                ret = HashHelper.GetHashCode(Modelitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BaseSpellPoints).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Fatigue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BarterGold).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LevelOffset).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CalcMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CalcMax).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Factions).CombineHashCode(ret);
            if (item.DeathItem.TryGet(out var DeathItemitem))
            {
                ret = HashHelper.GetHashCode(DeathItemitem).CombineHashCode(ret);
            }
            if (item.Race.TryGet(out var Raceitem))
            {
                ret = HashHelper.GetHashCode(Raceitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Spells).CombineHashCode(ret);
            if (item.Script.TryGet(out var Scriptitem))
            {
                ret = HashHelper.GetHashCode(Scriptitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Items).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Aggression).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Confidence).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EnergyLevel).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Responsibility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BuySellServices).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Teaches).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MaximumTrainingLevel).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AIPackages).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Animations).CombineHashCode(ret);
            if (item.Class.TryGet(out var Classitem))
            {
                ret = HashHelper.GetHashCode(Classitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Armorer).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Athletics).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Blade).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Block).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Blunt).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HandToHand).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HeavyArmor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Alchemy).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Alteration).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Conjuration).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Destruction).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Illusion).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Mysticism).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Restoration).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Acrobatics).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LightArmor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Marksman).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Mercantile).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Security).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Sneak).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Speechcraft).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Health).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Strength).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Intelligence).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Willpower).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Agility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Speed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Endurance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Personality).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Luck).CombineHashCode(ret);
            if (item.Hair.TryGet(out var Hairitem))
            {
                ret = HashHelper.GetHashCode(Hairitem).CombineHashCode(ret);
            }
            if (item.HairLength.TryGet(out var HairLengthitem))
            {
                ret = HashHelper.GetHashCode(HairLengthitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Eyes).CombineHashCode(ret);
            if (item.HairColor.TryGet(out var HairColoritem))
            {
                ret = HashHelper.GetHashCode(HairColoritem).CombineHashCode(ret);
            }
            if (item.CombatStyle.TryGet(out var CombatStyleitem))
            {
                ret = HashHelper.GetHashCode(CombatStyleitem).CombineHashCode(ret);
            }
            if (item.FaceGenGeometrySymmetric_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FaceGenGeometrySymmetric).CombineHashCode(ret);
            }
            if (item.FaceGenGeometryAsymmetric_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FaceGenGeometryAsymmetric).CombineHashCode(ret);
            }
            if (item.FaceGenTextureSymmetric_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FaceGenTextureSymmetric).CombineHashCode(ret);
            }
            if (item.Unknown_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Unknown).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.ACBSDataTypeState).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AIDTDataTypeState).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(INPCAbstractGetter item)
        {
            return GetHashCode(item: (INPCGetter)item);
        }
        
        public override int GetHashCode(INPCSpawnGetter item)
        {
            return GetHashCode(item: (INPCGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (INPCGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (INPCGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return NPC.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(INPCGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Factions.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield return obj.DeathItem;
            yield return obj.Race;
            foreach (var item in obj.Spells)
            {
                yield return item;
            }
            yield return obj.Script;
            foreach (var item in obj.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            foreach (var item in obj.AIPackages)
            {
                yield return item;
            }
            yield return obj.Class;
            yield return obj.Hair;
            foreach (var item in obj.Eyes)
            {
                yield return item;
            }
            yield return obj.CombatStyle;
            yield break;
        }
        
        partial void PostDuplicate(NPC obj, NPC rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new NPC(getNextFormKey());
            ret.DeepCopyIn((NPC)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (NPC)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class NPCSetterTranslationCommon : NPCAbstractSetterTranslationCommon
    {
        public new static readonly NPCSetterTranslationCommon Instance = new NPCSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            INPCInternal item,
            INPCGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            INPC item,
            INPCGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)NPC_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.BaseSpellPoints) ?? true))
            {
                item.BaseSpellPoints = rhs.BaseSpellPoints;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Fatigue) ?? true))
            {
                item.Fatigue = rhs.Fatigue;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.BarterGold) ?? true))
            {
                item.BarterGold = rhs.BarterGold;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.LevelOffset) ?? true))
            {
                item.LevelOffset = rhs.LevelOffset;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.CalcMin) ?? true))
            {
                item.CalcMin = rhs.CalcMin;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.CalcMax) ?? true))
            {
                item.CalcMax = rhs.CalcMax;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Factions);
                try
                {
                    if (rhs.Factions.HasBeenSet)
                    {
                        item.Factions.SetTo(
                            items: rhs.Factions,
                            converter: (r) =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.Factions.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.DeathItem) ?? true))
            {
                item.DeathItem.SetToFormKey(rhs: rhs.DeathItem);
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Race) ?? true))
            {
                item.Race.SetToFormKey(rhs: rhs.Race);
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Spells);
                try
                {
                    if (rhs.Spells.HasBeenSet)
                    {
                        item.Spells.SetTo(
                            rhs.Spells,
                            (r) => new FormLink<SpellAbstract>(r.FormKey));
                    }
                    else
                    {
                        item.Spells.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Script) ?? true))
            {
                item.Script.SetToFormKey(rhs: rhs.Script);
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Items);
                try
                {
                    if (rhs.Items.HasBeenSet)
                    {
                        item.Items.SetTo(
                            items: rhs.Items,
                            converter: (r) =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.Items.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Aggression) ?? true))
            {
                item.Aggression = rhs.Aggression;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Confidence) ?? true))
            {
                item.Confidence = rhs.Confidence;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.EnergyLevel) ?? true))
            {
                item.EnergyLevel = rhs.EnergyLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Responsibility) ?? true))
            {
                item.Responsibility = rhs.Responsibility;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.BuySellServices) ?? true))
            {
                item.BuySellServices = rhs.BuySellServices;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Teaches) ?? true))
            {
                item.Teaches = rhs.Teaches;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.MaximumTrainingLevel) ?? true))
            {
                item.MaximumTrainingLevel = rhs.MaximumTrainingLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Fluff) ?? true))
            {
                item.Fluff = rhs.Fluff.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.AIPackages) ?? true))
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.AIPackages);
                try
                {
                    if (rhs.AIPackages.HasBeenSet)
                    {
                        item.AIPackages.SetTo(
                            rhs.AIPackages,
                            (r) => new FormLink<AIPackage>(r.FormKey));
                    }
                    else
                    {
                        item.AIPackages.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Animations) ?? true))
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Animations);
                try
                {
                    if (rhs.Animations.HasBeenSet)
                    {
                        item.Animations.SetTo(rhs.Animations);
                    }
                    else
                    {
                        item.Animations.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Class) ?? true))
            {
                item.Class.SetToFormKey(rhs: rhs.Class);
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Armorer) ?? true))
            {
                item.Armorer = rhs.Armorer;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Athletics) ?? true))
            {
                item.Athletics = rhs.Athletics;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Blade) ?? true))
            {
                item.Blade = rhs.Blade;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Block) ?? true))
            {
                item.Block = rhs.Block;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Blunt) ?? true))
            {
                item.Blunt = rhs.Blunt;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.HandToHand) ?? true))
            {
                item.HandToHand = rhs.HandToHand;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.HeavyArmor) ?? true))
            {
                item.HeavyArmor = rhs.HeavyArmor;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Alchemy) ?? true))
            {
                item.Alchemy = rhs.Alchemy;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Alteration) ?? true))
            {
                item.Alteration = rhs.Alteration;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Conjuration) ?? true))
            {
                item.Conjuration = rhs.Conjuration;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Destruction) ?? true))
            {
                item.Destruction = rhs.Destruction;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Illusion) ?? true))
            {
                item.Illusion = rhs.Illusion;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Mysticism) ?? true))
            {
                item.Mysticism = rhs.Mysticism;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Restoration) ?? true))
            {
                item.Restoration = rhs.Restoration;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Acrobatics) ?? true))
            {
                item.Acrobatics = rhs.Acrobatics;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.LightArmor) ?? true))
            {
                item.LightArmor = rhs.LightArmor;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Marksman) ?? true))
            {
                item.Marksman = rhs.Marksman;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Mercantile) ?? true))
            {
                item.Mercantile = rhs.Mercantile;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Security) ?? true))
            {
                item.Security = rhs.Security;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Sneak) ?? true))
            {
                item.Sneak = rhs.Sneak;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Speechcraft) ?? true))
            {
                item.Speechcraft = rhs.Speechcraft;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Health) ?? true))
            {
                item.Health = rhs.Health;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Strength) ?? true))
            {
                item.Strength = rhs.Strength;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Intelligence) ?? true))
            {
                item.Intelligence = rhs.Intelligence;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Willpower) ?? true))
            {
                item.Willpower = rhs.Willpower;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Agility) ?? true))
            {
                item.Agility = rhs.Agility;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Speed) ?? true))
            {
                item.Speed = rhs.Speed;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Endurance) ?? true))
            {
                item.Endurance = rhs.Endurance;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Personality) ?? true))
            {
                item.Personality = rhs.Personality;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Luck) ?? true))
            {
                item.Luck = rhs.Luck;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Hair) ?? true))
            {
                item.Hair.SetToFormKey(rhs: rhs.Hair);
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.HairLength) ?? true))
            {
                item.HairLength = rhs.HairLength;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Eyes) ?? true))
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Eyes);
                try
                {
                    if (rhs.Eyes.HasBeenSet)
                    {
                        item.Eyes.SetTo(
                            rhs.Eyes,
                            (r) => new FormLink<Eye>(r.FormKey));
                    }
                    else
                    {
                        item.Eyes.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.HairColor) ?? true))
            {
                item.HairColor = rhs.HairColor;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.CombatStyle) ?? true))
            {
                item.CombatStyle.SetToFormKey(rhs: rhs.CombatStyle);
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.FaceGenGeometrySymmetric) ?? true))
            {
                if(rhs.FaceGenGeometrySymmetric_IsSet)
                {
                    item.FaceGenGeometrySymmetric = rhs.FaceGenGeometrySymmetric.ToArray();
                }
                else
                {
                    item.FaceGenGeometrySymmetric = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.FaceGenGeometryAsymmetric) ?? true))
            {
                if(rhs.FaceGenGeometryAsymmetric_IsSet)
                {
                    item.FaceGenGeometryAsymmetric = rhs.FaceGenGeometryAsymmetric.ToArray();
                }
                else
                {
                    item.FaceGenGeometryAsymmetric = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.FaceGenTextureSymmetric) ?? true))
            {
                if(rhs.FaceGenTextureSymmetric_IsSet)
                {
                    item.FaceGenTextureSymmetric = rhs.FaceGenTextureSymmetric.ToArray();
                }
                else
                {
                    item.FaceGenTextureSymmetric = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.Unknown) ?? true))
            {
                if(rhs.Unknown_IsSet)
                {
                    item.Unknown = rhs.Unknown.ToArray();
                }
                else
                {
                    item.Unknown = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.ACBSDataTypeState) ?? true))
            {
                item.ACBSDataTypeState = rhs.ACBSDataTypeState;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.AIDTDataTypeState) ?? true))
            {
                item.AIDTDataTypeState = rhs.AIDTDataTypeState;
            }
            if ((copyMask?.GetShouldTranslate((int)NPC_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            INPCAbstractInternal item,
            INPCAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INPCInternal)item,
                rhs: (INPCGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            INPCAbstract item,
            INPCAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INPC)item,
                rhs: (INPCGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            INPCSpawnInternal item,
            INPCSpawnGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INPCInternal)item,
                rhs: (INPCGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            INPCSpawn item,
            INPCSpawnGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INPC)item,
                rhs: (INPCGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INPCInternal)item,
                rhs: (INPCGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INPC)item,
                rhs: (INPCGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INPCInternal)item,
                rhs: (INPCGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INPC)item,
                rhs: (INPCGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public NPC DeepCopy(
            INPCGetter item,
            NPC.TranslationMask? copyMask = null)
        {
            NPC ret = (NPC)((NPCCommon)((INPCGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public NPC DeepCopy(
            INPCGetter item,
            out NPC.ErrorMask errorMask,
            NPC.TranslationMask? copyMask = null)
        {
            NPC ret = (NPC)((NPCCommon)((INPCGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public NPC DeepCopy(
            INPCGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NPC ret = (NPC)((NPCCommon)((INPCGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class NPC
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NPC_Registration.Instance;
        public new static NPC_Registration Registration => NPC_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NPCCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return NPCSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NPCSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class NPCXmlWriteTranslation :
        NPCAbstractXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static NPCXmlWriteTranslation Instance = new NPCXmlWriteTranslation();

        public static void WriteToNodeXml(
            INPCGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            NPCAbstractXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)NPC_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Model) ?? true))
            {
                var loquiItem = item.Model;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)NPC_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)NPC_FieldIndex.Model));
            }
            if (item.ACBSDataTypeState.HasFlag(NPC.ACBSDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<NPC.NPCFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)NPC_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.BaseSpellPoints) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BaseSpellPoints),
                        item: item.BaseSpellPoints,
                        fieldIndex: (int)NPC_FieldIndex.BaseSpellPoints,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Fatigue) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Fatigue),
                        item: item.Fatigue,
                        fieldIndex: (int)NPC_FieldIndex.Fatigue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.BarterGold) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BarterGold),
                        item: item.BarterGold,
                        fieldIndex: (int)NPC_FieldIndex.BarterGold,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.LevelOffset) ?? true))
                {
                    Int16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LevelOffset),
                        item: item.LevelOffset,
                        fieldIndex: (int)NPC_FieldIndex.LevelOffset,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.CalcMin) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.CalcMin),
                        item: item.CalcMin,
                        fieldIndex: (int)NPC_FieldIndex.CalcMin,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.CalcMax) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.CalcMax),
                        item: item.CalcMax,
                        fieldIndex: (int)NPC_FieldIndex.CalcMax,
                        errorMask: errorMask);
                }
            }
            if (item.Factions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Factions) ?? true))
            {
                ListXmlTranslation<IRankPlacementGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Factions),
                    item: item.Factions,
                    fieldIndex: (int)NPC_FieldIndex.Factions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)NPC_FieldIndex.Factions),
                    transl: (XElement subNode, IRankPlacementGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((RankPlacementXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.DeathItem.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.DeathItem) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DeathItem),
                    item: item.DeathItem.FormKey,
                    fieldIndex: (int)NPC_FieldIndex.DeathItem,
                    errorMask: errorMask);
            }
            if (item.Race.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Race) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Race),
                    item: item.Race.FormKey,
                    fieldIndex: (int)NPC_FieldIndex.Race,
                    errorMask: errorMask);
            }
            if (item.Spells.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Spells) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<ISpellAbstractGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Spells),
                    item: item.Spells,
                    fieldIndex: (int)NPC_FieldIndex.Spells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)NPC_FieldIndex.Spells),
                    transl: (XElement subNode, IFormLinkGetter<ISpellAbstractGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if (item.Script.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script.FormKey,
                    fieldIndex: (int)NPC_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.Items.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Items) ?? true))
            {
                ListXmlTranslation<IItemEntryGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Items),
                    item: item.Items,
                    fieldIndex: (int)NPC_FieldIndex.Items,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)NPC_FieldIndex.Items),
                    transl: (XElement subNode, IItemEntryGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((ItemEntryXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.AIDTDataTypeState.HasFlag(NPC.AIDTDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Aggression) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Aggression),
                        item: item.Aggression,
                        fieldIndex: (int)NPC_FieldIndex.Aggression,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Confidence) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Confidence),
                        item: item.Confidence,
                        fieldIndex: (int)NPC_FieldIndex.Confidence,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.EnergyLevel) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EnergyLevel),
                        item: item.EnergyLevel,
                        fieldIndex: (int)NPC_FieldIndex.EnergyLevel,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Responsibility) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Responsibility),
                        item: item.Responsibility,
                        fieldIndex: (int)NPC_FieldIndex.Responsibility,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.BuySellServices) ?? true))
                {
                    EnumXmlTranslation<NPC.BuySellServiceFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.BuySellServices),
                        item: item.BuySellServices,
                        fieldIndex: (int)NPC_FieldIndex.BuySellServices,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Teaches) ?? true))
                {
                    EnumXmlTranslation<Skill>.Instance.Write(
                        node: node,
                        name: nameof(item.Teaches),
                        item: item.Teaches,
                        fieldIndex: (int)NPC_FieldIndex.Teaches,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.MaximumTrainingLevel) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MaximumTrainingLevel),
                        item: item.MaximumTrainingLevel,
                        fieldIndex: (int)NPC_FieldIndex.MaximumTrainingLevel,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Fluff) ?? true))
                {
                    ByteArrayXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Fluff),
                        item: item.Fluff,
                        fieldIndex: (int)NPC_FieldIndex.Fluff,
                        errorMask: errorMask);
                }
            }
            if (item.AIPackages.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.AIPackages) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IAIPackageGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.AIPackages),
                    item: item.AIPackages,
                    fieldIndex: (int)NPC_FieldIndex.AIPackages,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)NPC_FieldIndex.AIPackages),
                    transl: (XElement subNode, IFormLinkGetter<IAIPackageGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if (item.Animations.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Animations) ?? true))
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: node,
                    name: nameof(item.Animations),
                    item: item.Animations,
                    fieldIndex: (int)NPC_FieldIndex.Animations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)NPC_FieldIndex.Animations),
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if (item.Class.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Class) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Class),
                    item: item.Class.FormKey,
                    fieldIndex: (int)NPC_FieldIndex.Class,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(NPC.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Armorer) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Armorer),
                        item: item.Armorer,
                        fieldIndex: (int)NPC_FieldIndex.Armorer,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Athletics) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Athletics),
                        item: item.Athletics,
                        fieldIndex: (int)NPC_FieldIndex.Athletics,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Blade) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Blade),
                        item: item.Blade,
                        fieldIndex: (int)NPC_FieldIndex.Blade,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Block) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Block),
                        item: item.Block,
                        fieldIndex: (int)NPC_FieldIndex.Block,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Blunt) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Blunt),
                        item: item.Blunt,
                        fieldIndex: (int)NPC_FieldIndex.Blunt,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.HandToHand) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HandToHand),
                        item: item.HandToHand,
                        fieldIndex: (int)NPC_FieldIndex.HandToHand,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.HeavyArmor) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HeavyArmor),
                        item: item.HeavyArmor,
                        fieldIndex: (int)NPC_FieldIndex.HeavyArmor,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Alchemy) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Alchemy),
                        item: item.Alchemy,
                        fieldIndex: (int)NPC_FieldIndex.Alchemy,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Alteration) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Alteration),
                        item: item.Alteration,
                        fieldIndex: (int)NPC_FieldIndex.Alteration,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Conjuration) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Conjuration),
                        item: item.Conjuration,
                        fieldIndex: (int)NPC_FieldIndex.Conjuration,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Destruction) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Destruction),
                        item: item.Destruction,
                        fieldIndex: (int)NPC_FieldIndex.Destruction,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Illusion) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Illusion),
                        item: item.Illusion,
                        fieldIndex: (int)NPC_FieldIndex.Illusion,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Mysticism) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Mysticism),
                        item: item.Mysticism,
                        fieldIndex: (int)NPC_FieldIndex.Mysticism,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Restoration) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Restoration),
                        item: item.Restoration,
                        fieldIndex: (int)NPC_FieldIndex.Restoration,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Acrobatics) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Acrobatics),
                        item: item.Acrobatics,
                        fieldIndex: (int)NPC_FieldIndex.Acrobatics,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.LightArmor) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LightArmor),
                        item: item.LightArmor,
                        fieldIndex: (int)NPC_FieldIndex.LightArmor,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Marksman) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Marksman),
                        item: item.Marksman,
                        fieldIndex: (int)NPC_FieldIndex.Marksman,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Mercantile) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Mercantile),
                        item: item.Mercantile,
                        fieldIndex: (int)NPC_FieldIndex.Mercantile,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Security) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Security),
                        item: item.Security,
                        fieldIndex: (int)NPC_FieldIndex.Security,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Sneak) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Sneak),
                        item: item.Sneak,
                        fieldIndex: (int)NPC_FieldIndex.Sneak,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Speechcraft) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Speechcraft),
                        item: item.Speechcraft,
                        fieldIndex: (int)NPC_FieldIndex.Speechcraft,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Health) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Health),
                        item: item.Health,
                        fieldIndex: (int)NPC_FieldIndex.Health,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Strength) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Strength),
                        item: item.Strength,
                        fieldIndex: (int)NPC_FieldIndex.Strength,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Intelligence) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Intelligence),
                        item: item.Intelligence,
                        fieldIndex: (int)NPC_FieldIndex.Intelligence,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Willpower) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Willpower),
                        item: item.Willpower,
                        fieldIndex: (int)NPC_FieldIndex.Willpower,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Agility) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Agility),
                        item: item.Agility,
                        fieldIndex: (int)NPC_FieldIndex.Agility,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Speed) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Speed),
                        item: item.Speed,
                        fieldIndex: (int)NPC_FieldIndex.Speed,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Endurance) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Endurance),
                        item: item.Endurance,
                        fieldIndex: (int)NPC_FieldIndex.Endurance,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Personality) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Personality),
                        item: item.Personality,
                        fieldIndex: (int)NPC_FieldIndex.Personality,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Luck) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Luck),
                        item: item.Luck,
                        fieldIndex: (int)NPC_FieldIndex.Luck,
                        errorMask: errorMask);
                }
            }
            if (item.Hair.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Hair) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Hair),
                    item: item.Hair.FormKey,
                    fieldIndex: (int)NPC_FieldIndex.Hair,
                    errorMask: errorMask);
            }
            if ((item.HairLength != null)
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.HairLength) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HairLength),
                    item: item.HairLength.Value,
                    fieldIndex: (int)NPC_FieldIndex.HairLength,
                    errorMask: errorMask);
            }
            if (item.Eyes.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Eyes) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IEyeGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Eyes),
                    item: item.Eyes,
                    fieldIndex: (int)NPC_FieldIndex.Eyes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)NPC_FieldIndex.Eyes),
                    transl: (XElement subNode, IFormLinkGetter<IEyeGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.HairColor != null)
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.HairColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HairColor),
                    item: item.HairColor.Value,
                    fieldIndex: (int)NPC_FieldIndex.HairColor,
                    errorMask: errorMask);
            }
            if (item.CombatStyle.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.CombatStyle) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CombatStyle),
                    item: item.CombatStyle.FormKey,
                    fieldIndex: (int)NPC_FieldIndex.CombatStyle,
                    errorMask: errorMask);
            }
            if (item.FaceGenGeometrySymmetric_IsSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.FaceGenGeometrySymmetric) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FaceGenGeometrySymmetric),
                    item: item.FaceGenGeometrySymmetric,
                    fieldIndex: (int)NPC_FieldIndex.FaceGenGeometrySymmetric,
                    errorMask: errorMask);
            }
            if (item.FaceGenGeometryAsymmetric_IsSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.FaceGenGeometryAsymmetric) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FaceGenGeometryAsymmetric),
                    item: item.FaceGenGeometryAsymmetric,
                    fieldIndex: (int)NPC_FieldIndex.FaceGenGeometryAsymmetric,
                    errorMask: errorMask);
            }
            if (item.FaceGenTextureSymmetric_IsSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.FaceGenTextureSymmetric) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FaceGenTextureSymmetric),
                    item: item.FaceGenTextureSymmetric,
                    fieldIndex: (int)NPC_FieldIndex.FaceGenTextureSymmetric,
                    errorMask: errorMask);
            }
            if (item.Unknown_IsSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Unknown) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)NPC_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.ACBSDataTypeState) ?? true))
            {
                EnumXmlTranslation<NPC.ACBSDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.ACBSDataTypeState),
                    item: item.ACBSDataTypeState,
                    fieldIndex: (int)NPC_FieldIndex.ACBSDataTypeState,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.AIDTDataTypeState) ?? true))
            {
                EnumXmlTranslation<NPC.AIDTDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.AIDTDataTypeState),
                    item: item.AIDTDataTypeState,
                    fieldIndex: (int)NPC_FieldIndex.AIDTDataTypeState,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<NPC.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)NPC_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            INPCGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.NPC");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.NPC");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (INPCGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            INPCAbstractGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (INPCGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            INPCSpawnGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (INPCGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (INPCGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (INPCGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class NPCXmlCreateTranslation : NPCAbstractXmlCreateTranslation
    {
        public new readonly static NPCXmlCreateTranslation Instance = new NPCXmlCreateTranslation();

        public static void FillPublicXml(
            INPCInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    NPCXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            INPCInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Name);
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Model);
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)NPC_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Flags);
                        item.Flags = EnumXmlTranslation<NPC.NPCFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.ACBSDataTypeState |= NPC.ACBSDataType.Has;
                    break;
                case "BaseSpellPoints":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.BaseSpellPoints);
                        item.BaseSpellPoints = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fatigue":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Fatigue);
                        item.Fatigue = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BarterGold":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.BarterGold);
                        item.BarterGold = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LevelOffset":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.LevelOffset);
                        item.LevelOffset = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CalcMin":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.CalcMin);
                        item.CalcMin = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CalcMax":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.CalcMax);
                        item.CalcMax = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Factions":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Factions);
                        if (ListXmlTranslation<RankPlacement>.Instance.Parse(
                            node: node,
                            enumer: out var FactionsItem,
                            transl: LoquiXmlTranslation<RankPlacement>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Factions.SetTo(FactionsItem);
                        }
                        else
                        {
                            item.Factions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DeathItem":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.DeathItem);
                        item.DeathItem.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Race":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Race);
                        item.Race.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Spells":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Spells);
                        if (ListXmlTranslation<IFormLink<SpellAbstract>>.Instance.Parse(
                            node: node,
                            enumer: out var SpellsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Spells.SetTo(SpellsItem);
                        }
                        else
                        {
                            item.Spells.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Script);
                        item.Script.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Items":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Items);
                        if (ListXmlTranslation<ItemEntry>.Instance.Parse(
                            node: node,
                            enumer: out var ItemsItem,
                            transl: LoquiXmlTranslation<ItemEntry>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Items.SetTo(ItemsItem);
                        }
                        else
                        {
                            item.Items.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Aggression":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Aggression);
                        item.Aggression = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.AIDTDataTypeState |= NPC.AIDTDataType.Has;
                    break;
                case "Confidence":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Confidence);
                        item.Confidence = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnergyLevel":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.EnergyLevel);
                        item.EnergyLevel = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Responsibility":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Responsibility);
                        item.Responsibility = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BuySellServices":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.BuySellServices);
                        item.BuySellServices = EnumXmlTranslation<NPC.BuySellServiceFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Teaches":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Teaches);
                        item.Teaches = EnumXmlTranslation<Skill>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaximumTrainingLevel":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.MaximumTrainingLevel);
                        item.MaximumTrainingLevel = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Fluff);
                        item.Fluff = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 2,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AIPackages":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.AIPackages);
                        if (ListXmlTranslation<IFormLink<AIPackage>>.Instance.Parse(
                            node: node,
                            enumer: out var AIPackagesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.AIPackages.SetTo(AIPackagesItem);
                        }
                        else
                        {
                            item.AIPackages.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Animations":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Animations);
                        if (ListXmlTranslation<String>.Instance.Parse(
                            node: node,
                            enumer: out var AnimationsItem,
                            transl: StringXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Animations.SetTo(AnimationsItem);
                        }
                        else
                        {
                            item.Animations.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Class":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Class);
                        item.Class.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Armorer":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Armorer);
                        item.Armorer = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= NPC.DATADataType.Has;
                    break;
                case "Athletics":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Athletics);
                        item.Athletics = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Blade":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Blade);
                        item.Blade = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Block":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Block);
                        item.Block = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Blunt":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Blunt);
                        item.Blunt = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HandToHand":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.HandToHand);
                        item.HandToHand = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HeavyArmor":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.HeavyArmor);
                        item.HeavyArmor = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Alchemy":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Alchemy);
                        item.Alchemy = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Alteration":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Alteration);
                        item.Alteration = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conjuration":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Conjuration);
                        item.Conjuration = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Destruction":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Destruction);
                        item.Destruction = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Illusion":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Illusion);
                        item.Illusion = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Mysticism":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Mysticism);
                        item.Mysticism = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Restoration":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Restoration);
                        item.Restoration = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Acrobatics":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Acrobatics);
                        item.Acrobatics = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LightArmor":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.LightArmor);
                        item.LightArmor = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Marksman":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Marksman);
                        item.Marksman = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Mercantile":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Mercantile);
                        item.Mercantile = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Security":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Security);
                        item.Security = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sneak":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Sneak);
                        item.Sneak = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Speechcraft":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Speechcraft);
                        item.Speechcraft = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Health":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Health);
                        item.Health = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Strength":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Strength);
                        item.Strength = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Intelligence":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Intelligence);
                        item.Intelligence = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Willpower":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Willpower);
                        item.Willpower = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Agility":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Agility);
                        item.Agility = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Speed":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Speed);
                        item.Speed = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Endurance":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Endurance);
                        item.Endurance = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Personality":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Personality);
                        item.Personality = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Luck":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Luck);
                        item.Luck = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hair":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Hair);
                        item.Hair.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HairLength":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.HairLength);
                        item.HairLength = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eyes":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Eyes);
                        if (ListXmlTranslation<IFormLink<Eye>>.Instance.Parse(
                            node: node,
                            enumer: out var EyesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Eyes.SetTo(EyesItem);
                        }
                        else
                        {
                            item.Eyes.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HairColor":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.HairColor);
                        item.HairColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CombatStyle":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.CombatStyle);
                        item.CombatStyle.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenGeometrySymmetric":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.FaceGenGeometrySymmetric);
                        item.FaceGenGeometrySymmetric = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenGeometryAsymmetric":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.FaceGenGeometryAsymmetric);
                        item.FaceGenGeometryAsymmetric = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenTextureSymmetric":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.FaceGenTextureSymmetric);
                        item.FaceGenTextureSymmetric = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Unknown);
                        item.Unknown = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ACBSDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.ACBSDataTypeState);
                        item.ACBSDataTypeState = EnumXmlTranslation<NPC.ACBSDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AIDTDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.AIDTDataTypeState);
                        item.AIDTDataTypeState = EnumXmlTranslation<NPC.AIDTDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.DATADataTypeState);
                        item.DATADataTypeState = EnumXmlTranslation<NPC.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    NPCAbstractXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class NPCXmlTranslationMixIn
    {
        public static void WriteToXml(
            this INPCGetter item,
            XElement node,
            out NPC.ErrorMask errorMask,
            NPC.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((NPCXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = NPC.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this INPCGetter item,
            string path,
            out NPC.ErrorMask errorMask,
            NPC.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this INPCGetter item,
            Stream stream,
            out NPC.ErrorMask errorMask,
            NPC.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class NPCBinaryWriteTranslation :
        NPCAbstractBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static NPCBinaryWriteTranslation Instance = new NPCBinaryWriteTranslation();

        public static void Write_Embedded(
            INPCGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            INPCGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            {
                var loquiItem = item.Model;
                if (loquiItem != null)
                {
                    ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (item.ACBSDataTypeState.HasFlag(NPC.ACBSDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(NPC_Registration.ACBS_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<NPC.NPCFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                    writer.Write(item.BaseSpellPoints);
                    writer.Write(item.Fatigue);
                    writer.Write(item.BarterGold);
                    writer.Write(item.LevelOffset);
                    writer.Write(item.CalcMin);
                    writer.Write(item.CalcMax);
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRankPlacementGetter>.Instance.Write(
                writer: writer,
                items: item.Factions,
                transl: (MutagenWriter subWriter, IRankPlacementGetter subItem) =>
                {
                    {
                        var loquiItem = subItem;
                        if (loquiItem != null)
                        {
                            ((RankPlacementBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                                item: loquiItem,
                                writer: subWriter,
                                masterReferences: masterReferences,
                                recordTypeConverter: null);
                        }
                    }
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DeathItem,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.INAM_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Race,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.RNAM_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<ISpellAbstractGetter>>.Instance.Write(
                writer: writer,
                items: item.Spells,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISpellAbstractGetter> subItem) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(NPC_Registration.SPLO_HEADER),
                        masterReferences: masterReferences);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.SCRI_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IItemEntryGetter>.Instance.Write(
                writer: writer,
                items: item.Items,
                transl: (MutagenWriter subWriter, IItemEntryGetter subItem) =>
                {
                    {
                        var loquiItem = subItem;
                        if (loquiItem != null)
                        {
                            ((ItemEntryBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                                item: loquiItem,
                                writer: subWriter,
                                masterReferences: masterReferences,
                                recordTypeConverter: null);
                        }
                    }
                });
            if (item.AIDTDataTypeState.HasFlag(NPC.AIDTDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(NPC_Registration.AIDT_HEADER)))
                {
                    writer.Write(item.Aggression);
                    writer.Write(item.Confidence);
                    writer.Write(item.EnergyLevel);
                    writer.Write(item.Responsibility);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<NPC.BuySellServiceFlag>.Instance.Write(
                        writer,
                        item.BuySellServices,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.Write(
                        writer,
                        item.Teaches,
                        length: 1);
                    writer.Write(item.MaximumTrainingLevel);
                    Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Fluff);
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IAIPackageGetter>>.Instance.Write(
                writer: writer,
                items: item.AIPackages,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IAIPackageGetter> subItem) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(NPC_Registration.PKID_HEADER),
                        masterReferences: masterReferences);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.Animations,
                recordType: NPC_Registration.KFFZ_HEADER,
                transl: StringBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Class,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.CNAM_HEADER),
                masterReferences: masterReferences);
            if (item.DATADataTypeState.HasFlag(NPC.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(NPC_Registration.DATA_HEADER)))
                {
                    writer.Write(item.Armorer);
                    writer.Write(item.Athletics);
                    writer.Write(item.Blade);
                    writer.Write(item.Block);
                    writer.Write(item.Blunt);
                    writer.Write(item.HandToHand);
                    writer.Write(item.HeavyArmor);
                    writer.Write(item.Alchemy);
                    writer.Write(item.Alteration);
                    writer.Write(item.Conjuration);
                    writer.Write(item.Destruction);
                    writer.Write(item.Illusion);
                    writer.Write(item.Mysticism);
                    writer.Write(item.Restoration);
                    writer.Write(item.Acrobatics);
                    writer.Write(item.LightArmor);
                    writer.Write(item.Marksman);
                    writer.Write(item.Mercantile);
                    writer.Write(item.Security);
                    writer.Write(item.Sneak);
                    writer.Write(item.Speechcraft);
                    writer.Write(item.Health);
                    writer.Write(item.Strength);
                    writer.Write(item.Intelligence);
                    writer.Write(item.Willpower);
                    writer.Write(item.Agility);
                    writer.Write(item.Speed);
                    writer.Write(item.Endurance);
                    writer.Write(item.Personality);
                    writer.Write(item.Luck);
                }
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Hair,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.HNAM_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HairLength,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.LNAM_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IEyeGetter>>.Instance.Write(
                writer: writer,
                items: item.Eyes,
                recordType: NPC_Registration.ENAM_HEADER,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IEyeGetter> subItem) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        masterReferences: masterReferences);
                });
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HairColor,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.HCLR_HEADER),
                extraByte: true);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatStyle,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.ZNAM_HEADER),
                masterReferences: masterReferences);
            if (item.FaceGenGeometrySymmetric_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FaceGenGeometrySymmetric,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.FGGS_HEADER));
            }
            if (item.FaceGenGeometryAsymmetric_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FaceGenGeometryAsymmetric,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.FGGA_HEADER));
            }
            if (item.FaceGenTextureSymmetric_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FaceGenTextureSymmetric,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.FGTS_HEADER));
            }
            if (item.Unknown_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unknown,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.FNAM_HEADER));
            }
        }

        public void Write(
            MutagenWriter writer,
            INPCGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: NPC_Registration.NPC__HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (INPCGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            INPCAbstractGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (INPCGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            INPCSpawnGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (INPCGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (INPCGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (INPCGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class NPCBinaryCreateTranslation : NPCAbstractBinaryCreateTranslation
    {
        public new readonly static NPCBinaryCreateTranslation Instance = new NPCBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class NPCBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class NPCBinaryOverlay :
        NPCAbstractBinaryOverlay,
        INPCGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NPC_Registration.Instance;
        public new static NPC_Registration Registration => NPC_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NPCCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NPCSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((INPCGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => NPCCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => NPCXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((NPCXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NPCBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((NPCBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Model
        public IModelGetter? Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        private int? _ACBSLocation;
        public NPC.ACBSDataType ACBSDataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _ACBSLocation!.Value + 0x0;
        private bool _Flags_IsSet => _ACBSLocation.HasValue;
        public NPC.NPCFlag Flags => _Flags_IsSet ? (NPC.NPCFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 4)) : default;
        #endregion
        #region BaseSpellPoints
        private int _BaseSpellPointsLocation => _ACBSLocation!.Value + 0x4;
        private bool _BaseSpellPoints_IsSet => _ACBSLocation.HasValue;
        public UInt16 BaseSpellPoints => _BaseSpellPoints_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_BaseSpellPointsLocation, 2)) : default;
        #endregion
        #region Fatigue
        private int _FatigueLocation => _ACBSLocation!.Value + 0x6;
        private bool _Fatigue_IsSet => _ACBSLocation.HasValue;
        public UInt16 Fatigue => _Fatigue_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_FatigueLocation, 2)) : default;
        #endregion
        #region BarterGold
        private int _BarterGoldLocation => _ACBSLocation!.Value + 0x8;
        private bool _BarterGold_IsSet => _ACBSLocation.HasValue;
        public UInt16 BarterGold => _BarterGold_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_BarterGoldLocation, 2)) : default;
        #endregion
        #region LevelOffset
        private int _LevelOffsetLocation => _ACBSLocation!.Value + 0xA;
        private bool _LevelOffset_IsSet => _ACBSLocation.HasValue;
        public Int16 LevelOffset => _LevelOffset_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_data.Span.Slice(_LevelOffsetLocation, 2)) : default;
        #endregion
        #region CalcMin
        private int _CalcMinLocation => _ACBSLocation!.Value + 0xC;
        private bool _CalcMin_IsSet => _ACBSLocation.HasValue;
        public UInt16 CalcMin => _CalcMin_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_CalcMinLocation, 2)) : default;
        #endregion
        #region CalcMax
        private int _CalcMaxLocation => _ACBSLocation!.Value + 0xE;
        private bool _CalcMax_IsSet => _ACBSLocation.HasValue;
        public UInt16 CalcMax => _CalcMax_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_CalcMaxLocation, 2)) : default;
        #endregion
        public IReadOnlySetList<IRankPlacementGetter> Factions { get; private set; } = EmptySetList<RankPlacementBinaryOverlay>.Instance;
        #region DeathItem
        private int? _DeathItemLocation;
        public bool DeathItem_IsSet => _DeathItemLocation.HasValue;
        public IFormSetLinkGetter<IItemAbstractGetter> DeathItem => _DeathItemLocation.HasValue ? new FormSetLink<IItemAbstractGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _DeathItemLocation.Value, _package.Meta)))) : FormSetLink<IItemAbstractGetter>.Empty;
        #endregion
        #region Race
        private int? _RaceLocation;
        public bool Race_IsSet => _RaceLocation.HasValue;
        public IFormSetLinkGetter<IRaceGetter> Race => _RaceLocation.HasValue ? new FormSetLink<IRaceGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _RaceLocation.Value, _package.Meta)))) : FormSetLink<IRaceGetter>.Empty;
        #endregion
        public IReadOnlySetList<IFormLinkGetter<ISpellAbstractGetter>> Spells { get; private set; } = EmptySetList<IFormLinkGetter<ISpellAbstractGetter>>.Instance;
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormSetLinkGetter<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormSetLink<IScriptGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormSetLink<IScriptGetter>.Empty;
        #endregion
        public IReadOnlySetList<IItemEntryGetter> Items { get; private set; } = EmptySetList<ItemEntryBinaryOverlay>.Instance;
        private int? _AIDTLocation;
        public NPC.AIDTDataType AIDTDataTypeState { get; private set; }
        #region Aggression
        private int _AggressionLocation => _AIDTLocation!.Value + 0x0;
        private bool _Aggression_IsSet => _AIDTLocation.HasValue;
        public Byte Aggression => _Aggression_IsSet ? _data.Span[_AggressionLocation] : default;
        #endregion
        #region Confidence
        private int _ConfidenceLocation => _AIDTLocation!.Value + 0x1;
        private bool _Confidence_IsSet => _AIDTLocation.HasValue;
        public Byte Confidence => _Confidence_IsSet ? _data.Span[_ConfidenceLocation] : default;
        #endregion
        #region EnergyLevel
        private int _EnergyLevelLocation => _AIDTLocation!.Value + 0x2;
        private bool _EnergyLevel_IsSet => _AIDTLocation.HasValue;
        public Byte EnergyLevel => _EnergyLevel_IsSet ? _data.Span[_EnergyLevelLocation] : default;
        #endregion
        #region Responsibility
        private int _ResponsibilityLocation => _AIDTLocation!.Value + 0x3;
        private bool _Responsibility_IsSet => _AIDTLocation.HasValue;
        public Byte Responsibility => _Responsibility_IsSet ? _data.Span[_ResponsibilityLocation] : default;
        #endregion
        #region BuySellServices
        private int _BuySellServicesLocation => _AIDTLocation!.Value + 0x4;
        private bool _BuySellServices_IsSet => _AIDTLocation.HasValue;
        public NPC.BuySellServiceFlag BuySellServices => _BuySellServices_IsSet ? (NPC.BuySellServiceFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_BuySellServicesLocation, 4)) : default;
        #endregion
        #region Teaches
        private int _TeachesLocation => _AIDTLocation!.Value + 0x8;
        private bool _Teaches_IsSet => _AIDTLocation.HasValue;
        public Skill Teaches => _Teaches_IsSet ? (Skill)_data.Span.Slice(_TeachesLocation, 1)[0] : default;
        #endregion
        #region MaximumTrainingLevel
        private int _MaximumTrainingLevelLocation => _AIDTLocation!.Value + 0x9;
        private bool _MaximumTrainingLevel_IsSet => _AIDTLocation.HasValue;
        public Byte MaximumTrainingLevel => _MaximumTrainingLevel_IsSet ? _data.Span[_MaximumTrainingLevelLocation] : default;
        #endregion
        #region Fluff
        private int _FluffLocation => _AIDTLocation!.Value + 0xA;
        private bool _Fluff_IsSet => _AIDTLocation.HasValue;
        public ReadOnlySpan<Byte> Fluff => _Fluff_IsSet ? _data.Span.Slice(_FluffLocation, 2).ToArray() : default;
        public bool Fluff_IsSet => _Fluff_IsSet;
        #endregion
        public IReadOnlySetList<IFormLinkGetter<IAIPackageGetter>> AIPackages { get; private set; } = EmptySetList<IFormLinkGetter<IAIPackageGetter>>.Instance;
        public IReadOnlySetList<String> Animations { get; private set; } = EmptySetList<String>.Instance;
        #region Class
        private int? _ClassLocation;
        public bool Class_IsSet => _ClassLocation.HasValue;
        public IFormSetLinkGetter<IClassGetter> Class => _ClassLocation.HasValue ? new FormSetLink<IClassGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ClassLocation.Value, _package.Meta)))) : FormSetLink<IClassGetter>.Empty;
        #endregion
        private int? _DATALocation;
        public NPC.DATADataType DATADataTypeState { get; private set; }
        #region Armorer
        private int _ArmorerLocation => _DATALocation!.Value + 0x0;
        private bool _Armorer_IsSet => _DATALocation.HasValue;
        public Byte Armorer => _Armorer_IsSet ? _data.Span[_ArmorerLocation] : default;
        #endregion
        #region Athletics
        private int _AthleticsLocation => _DATALocation!.Value + 0x1;
        private bool _Athletics_IsSet => _DATALocation.HasValue;
        public Byte Athletics => _Athletics_IsSet ? _data.Span[_AthleticsLocation] : default;
        #endregion
        #region Blade
        private int _BladeLocation => _DATALocation!.Value + 0x2;
        private bool _Blade_IsSet => _DATALocation.HasValue;
        public Byte Blade => _Blade_IsSet ? _data.Span[_BladeLocation] : default;
        #endregion
        #region Block
        private int _BlockLocation => _DATALocation!.Value + 0x3;
        private bool _Block_IsSet => _DATALocation.HasValue;
        public Byte Block => _Block_IsSet ? _data.Span[_BlockLocation] : default;
        #endregion
        #region Blunt
        private int _BluntLocation => _DATALocation!.Value + 0x4;
        private bool _Blunt_IsSet => _DATALocation.HasValue;
        public Byte Blunt => _Blunt_IsSet ? _data.Span[_BluntLocation] : default;
        #endregion
        #region HandToHand
        private int _HandToHandLocation => _DATALocation!.Value + 0x5;
        private bool _HandToHand_IsSet => _DATALocation.HasValue;
        public Byte HandToHand => _HandToHand_IsSet ? _data.Span[_HandToHandLocation] : default;
        #endregion
        #region HeavyArmor
        private int _HeavyArmorLocation => _DATALocation!.Value + 0x6;
        private bool _HeavyArmor_IsSet => _DATALocation.HasValue;
        public Byte HeavyArmor => _HeavyArmor_IsSet ? _data.Span[_HeavyArmorLocation] : default;
        #endregion
        #region Alchemy
        private int _AlchemyLocation => _DATALocation!.Value + 0x7;
        private bool _Alchemy_IsSet => _DATALocation.HasValue;
        public Byte Alchemy => _Alchemy_IsSet ? _data.Span[_AlchemyLocation] : default;
        #endregion
        #region Alteration
        private int _AlterationLocation => _DATALocation!.Value + 0x8;
        private bool _Alteration_IsSet => _DATALocation.HasValue;
        public Byte Alteration => _Alteration_IsSet ? _data.Span[_AlterationLocation] : default;
        #endregion
        #region Conjuration
        private int _ConjurationLocation => _DATALocation!.Value + 0x9;
        private bool _Conjuration_IsSet => _DATALocation.HasValue;
        public Byte Conjuration => _Conjuration_IsSet ? _data.Span[_ConjurationLocation] : default;
        #endregion
        #region Destruction
        private int _DestructionLocation => _DATALocation!.Value + 0xA;
        private bool _Destruction_IsSet => _DATALocation.HasValue;
        public Byte Destruction => _Destruction_IsSet ? _data.Span[_DestructionLocation] : default;
        #endregion
        #region Illusion
        private int _IllusionLocation => _DATALocation!.Value + 0xB;
        private bool _Illusion_IsSet => _DATALocation.HasValue;
        public Byte Illusion => _Illusion_IsSet ? _data.Span[_IllusionLocation] : default;
        #endregion
        #region Mysticism
        private int _MysticismLocation => _DATALocation!.Value + 0xC;
        private bool _Mysticism_IsSet => _DATALocation.HasValue;
        public Byte Mysticism => _Mysticism_IsSet ? _data.Span[_MysticismLocation] : default;
        #endregion
        #region Restoration
        private int _RestorationLocation => _DATALocation!.Value + 0xD;
        private bool _Restoration_IsSet => _DATALocation.HasValue;
        public Byte Restoration => _Restoration_IsSet ? _data.Span[_RestorationLocation] : default;
        #endregion
        #region Acrobatics
        private int _AcrobaticsLocation => _DATALocation!.Value + 0xE;
        private bool _Acrobatics_IsSet => _DATALocation.HasValue;
        public Byte Acrobatics => _Acrobatics_IsSet ? _data.Span[_AcrobaticsLocation] : default;
        #endregion
        #region LightArmor
        private int _LightArmorLocation => _DATALocation!.Value + 0xF;
        private bool _LightArmor_IsSet => _DATALocation.HasValue;
        public Byte LightArmor => _LightArmor_IsSet ? _data.Span[_LightArmorLocation] : default;
        #endregion
        #region Marksman
        private int _MarksmanLocation => _DATALocation!.Value + 0x10;
        private bool _Marksman_IsSet => _DATALocation.HasValue;
        public Byte Marksman => _Marksman_IsSet ? _data.Span[_MarksmanLocation] : default;
        #endregion
        #region Mercantile
        private int _MercantileLocation => _DATALocation!.Value + 0x11;
        private bool _Mercantile_IsSet => _DATALocation.HasValue;
        public Byte Mercantile => _Mercantile_IsSet ? _data.Span[_MercantileLocation] : default;
        #endregion
        #region Security
        private int _SecurityLocation => _DATALocation!.Value + 0x12;
        private bool _Security_IsSet => _DATALocation.HasValue;
        public Byte Security => _Security_IsSet ? _data.Span[_SecurityLocation] : default;
        #endregion
        #region Sneak
        private int _SneakLocation => _DATALocation!.Value + 0x13;
        private bool _Sneak_IsSet => _DATALocation.HasValue;
        public Byte Sneak => _Sneak_IsSet ? _data.Span[_SneakLocation] : default;
        #endregion
        #region Speechcraft
        private int _SpeechcraftLocation => _DATALocation!.Value + 0x14;
        private bool _Speechcraft_IsSet => _DATALocation.HasValue;
        public Byte Speechcraft => _Speechcraft_IsSet ? _data.Span[_SpeechcraftLocation] : default;
        #endregion
        #region Health
        private int _HealthLocation => _DATALocation!.Value + 0x15;
        private bool _Health_IsSet => _DATALocation.HasValue;
        public UInt32 Health => _Health_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_HealthLocation, 4)) : default;
        #endregion
        #region Strength
        private int _StrengthLocation => _DATALocation!.Value + 0x19;
        private bool _Strength_IsSet => _DATALocation.HasValue;
        public Byte Strength => _Strength_IsSet ? _data.Span[_StrengthLocation] : default;
        #endregion
        #region Intelligence
        private int _IntelligenceLocation => _DATALocation!.Value + 0x1A;
        private bool _Intelligence_IsSet => _DATALocation.HasValue;
        public Byte Intelligence => _Intelligence_IsSet ? _data.Span[_IntelligenceLocation] : default;
        #endregion
        #region Willpower
        private int _WillpowerLocation => _DATALocation!.Value + 0x1B;
        private bool _Willpower_IsSet => _DATALocation.HasValue;
        public Byte Willpower => _Willpower_IsSet ? _data.Span[_WillpowerLocation] : default;
        #endregion
        #region Agility
        private int _AgilityLocation => _DATALocation!.Value + 0x1C;
        private bool _Agility_IsSet => _DATALocation.HasValue;
        public Byte Agility => _Agility_IsSet ? _data.Span[_AgilityLocation] : default;
        #endregion
        #region Speed
        private int _SpeedLocation => _DATALocation!.Value + 0x1D;
        private bool _Speed_IsSet => _DATALocation.HasValue;
        public Byte Speed => _Speed_IsSet ? _data.Span[_SpeedLocation] : default;
        #endregion
        #region Endurance
        private int _EnduranceLocation => _DATALocation!.Value + 0x1E;
        private bool _Endurance_IsSet => _DATALocation.HasValue;
        public Byte Endurance => _Endurance_IsSet ? _data.Span[_EnduranceLocation] : default;
        #endregion
        #region Personality
        private int _PersonalityLocation => _DATALocation!.Value + 0x1F;
        private bool _Personality_IsSet => _DATALocation.HasValue;
        public Byte Personality => _Personality_IsSet ? _data.Span[_PersonalityLocation] : default;
        #endregion
        #region Luck
        private int _LuckLocation => _DATALocation!.Value + 0x20;
        private bool _Luck_IsSet => _DATALocation.HasValue;
        public Byte Luck => _Luck_IsSet ? _data.Span[_LuckLocation] : default;
        #endregion
        #region Hair
        private int? _HairLocation;
        public bool Hair_IsSet => _HairLocation.HasValue;
        public IFormSetLinkGetter<IHairGetter> Hair => _HairLocation.HasValue ? new FormSetLink<IHairGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _HairLocation.Value, _package.Meta)))) : FormSetLink<IHairGetter>.Empty;
        #endregion
        #region HairLength
        private int? _HairLengthLocation;
        public Single? HairLength => _HairLengthLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordSpan(_data, _HairLengthLocation.Value, _package.Meta)) : default(Single?);
        #endregion
        public IReadOnlySetList<IFormLinkGetter<IEyeGetter>> Eyes { get; private set; } = EmptySetList<IFormLinkGetter<IEyeGetter>>.Instance;
        #region HairColor
        private int? _HairColorLocation;
        public Color? HairColor => _HairColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _HairColorLocation.Value, _package.Meta).ReadColor() : default(Color?);
        #endregion
        #region CombatStyle
        private int? _CombatStyleLocation;
        public bool CombatStyle_IsSet => _CombatStyleLocation.HasValue;
        public IFormSetLinkGetter<ICombatStyleGetter> CombatStyle => _CombatStyleLocation.HasValue ? new FormSetLink<ICombatStyleGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _CombatStyleLocation.Value, _package.Meta)))) : FormSetLink<ICombatStyleGetter>.Empty;
        #endregion
        #region FaceGenGeometrySymmetric
        private int? _FaceGenGeometrySymmetricLocation;
        public bool FaceGenGeometrySymmetric_IsSet => _FaceGenGeometrySymmetricLocation.HasValue;
        public ReadOnlySpan<Byte> FaceGenGeometrySymmetric => _FaceGenGeometrySymmetricLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _FaceGenGeometrySymmetricLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region FaceGenGeometryAsymmetric
        private int? _FaceGenGeometryAsymmetricLocation;
        public bool FaceGenGeometryAsymmetric_IsSet => _FaceGenGeometryAsymmetricLocation.HasValue;
        public ReadOnlySpan<Byte> FaceGenGeometryAsymmetric => _FaceGenGeometryAsymmetricLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _FaceGenGeometryAsymmetricLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region FaceGenTextureSymmetric
        private int? _FaceGenTextureSymmetricLocation;
        public bool FaceGenTextureSymmetric_IsSet => _FaceGenTextureSymmetricLocation.HasValue;
        public ReadOnlySpan<Byte> FaceGenTextureSymmetric => _FaceGenTextureSymmetricLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _FaceGenTextureSymmetricLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region Unknown
        private int? _UnknownLocation;
        public bool Unknown_IsSet => _UnknownLocation.HasValue;
        public ReadOnlySpan<Byte> Unknown => _UnknownLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _UnknownLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected NPCBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static NPCBinaryOverlay NPCFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new NPCBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Model);
                }
                case 0x53424341: // ACBS
                {
                    _ACBSLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.ACBSDataTypeState = NPC.ACBSDataType.Has;
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.CalcMax);
                }
                case 0x4D414E53: // SNAM
                {
                    this.Factions = BinaryOverlaySetList<RankPlacementBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => RankPlacementBinaryOverlay.RankPlacementFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Factions);
                }
                case 0x4D414E49: // INAM
                {
                    _DeathItemLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.DeathItem);
                }
                case 0x4D414E52: // RNAM
                {
                    _RaceLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Race);
                }
                case 0x4F4C5053: // SPLO
                {
                    this.Spells = BinaryOverlaySetList<IFormLinkGetter<ISpellAbstractGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<ISpellAbstractGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Spells);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Script);
                }
                case 0x4F544E43: // CNTO
                {
                    this.Items = BinaryOverlaySetList<ItemEntryBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => ItemEntryBinaryOverlay.ItemEntryFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Items);
                }
                case 0x54444941: // AIDT
                {
                    _AIDTLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.AIDTDataTypeState = NPC.AIDTDataType.Has;
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Fluff);
                }
                case 0x44494B50: // PKID
                {
                    this.AIPackages = BinaryOverlaySetList<IFormLinkGetter<IAIPackageGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IAIPackageGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.AIPackages);
                }
                case 0x5A46464B: // KFFZ
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Animations = BinaryOverlaySetList<String>.FactoryByLazyParse(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        getter: (s, p) => BinaryStringUtility.ParseUnknownLengthString(s));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Animations);
                }
                case 0x4D414E43: // CNAM
                {
                    _ClassLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Class);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = NPC.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Luck);
                }
                case 0x4D414E48: // HNAM
                {
                    _HairLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Hair);
                }
                case 0x4D414E4C: // LNAM
                {
                    _HairLengthLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.HairLength);
                }
                case 0x4D414E45: // ENAM
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Eyes = BinaryOverlaySetList<IFormLinkGetter<IEyeGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IEyeGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Eyes);
                }
                case 0x524C4348: // HCLR
                {
                    _HairColorLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.HairColor);
                }
                case 0x4D414E5A: // ZNAM
                {
                    _CombatStyleLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.CombatStyle);
                }
                case 0x53474746: // FGGS
                {
                    _FaceGenGeometrySymmetricLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.FaceGenGeometrySymmetric);
                }
                case 0x41474746: // FGGA
                {
                    _FaceGenGeometryAsymmetricLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.FaceGenGeometryAsymmetric);
                }
                case 0x53544746: // FGTS
                {
                    _FaceGenTextureSymmetricLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.FaceGenTextureSymmetric);
                }
                case 0x4D414E46: // FNAM
                {
                    _UnknownLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Unknown);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

