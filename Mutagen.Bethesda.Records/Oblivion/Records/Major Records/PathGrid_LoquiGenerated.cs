/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PathGrid :
        OblivionMajorRecord,
        IPathGridInternal,
        ILoquiObjectSetter<PathGrid>,
        ILinkSubContainer,
        IEquatable<PathGrid>,
        IEqualsMask
    {
        #region Ctor
        protected PathGrid()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region PointToPointConnections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<PathGridPoint> _PointToPointConnections = new SourceSetList<PathGridPoint>();
        public ISourceSetList<PathGridPoint> PointToPointConnections => _PointToPointConnections;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<PathGridPoint> IPathGrid.PointToPointConnections => _PointToPointConnections;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IPathGridPointInternalGetter> IPathGridGetter.PointToPointConnections => _PointToPointConnections;
        #endregion

        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool Unknown_IsSet
        {
            get => _hasBeenSetTracker[(int)PathGrid_FieldIndex.Unknown];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PathGrid_FieldIndex.Unknown, nameof(Unknown_IsSet));
        }
        bool IPathGridGetter.Unknown_IsSet => Unknown_IsSet;
        protected Byte[] _Unknown;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Unknown
        {
            get => this._Unknown;
            set => Unknown_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IPathGridGetter.Unknown => this.Unknown;
        public void Unknown_Set(
            Byte[] value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Unknown, value, _hasBeenSetTracker, markSet, (int)PathGrid_FieldIndex.Unknown, nameof(Unknown), nameof(Unknown_IsSet));
        }
        public void Unknown_Unset()
        {
            this.Unknown_Set(default(Byte[]), false);
        }
        #endregion
        #region InterCellConnections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<InterCellPoint> _InterCellConnections = new SourceSetList<InterCellPoint>();
        public ISourceSetList<InterCellPoint> InterCellConnections => _InterCellConnections;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<InterCellPoint> IPathGrid.InterCellConnections => _InterCellConnections;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IInterCellPointInternalGetter> IPathGridGetter.InterCellConnections => _InterCellConnections;
        #endregion

        #endregion
        #region PointToReferenceMappings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<PointToReferenceMapping> _PointToReferenceMappings = new SourceSetList<PointToReferenceMapping>();
        public ISourceSetList<PointToReferenceMapping> PointToReferenceMappings => _PointToReferenceMappings;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<PointToReferenceMapping> IPathGrid.PointToReferenceMappings => _PointToReferenceMappings;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IPointToReferenceMappingInternalGetter> IPathGridGetter.PointToReferenceMappings => _PointToReferenceMappings;
        #endregion

        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPathGridInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            PathGridMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IPathGridInternalGetter rhs)) return false;
            return ((PathGridCommon)((IPathGridInternalGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(PathGrid obj)
        {
            return ((PathGridCommon)((IPathGridInternalGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((PathGridCommon)((IPathGridInternalGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => PathGridXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((PathGridXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static PathGrid CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            PathGrid_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PathGrid CreateFromXml(
            XElement node,
            out PathGrid_ErrorMask errorMask,
            bool doMasks = true,
            PathGrid_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = PathGrid_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static PathGrid CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new PathGrid() : null;
                    break;
                default:
                    break;
            }
            var ret = new PathGrid();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    PathGridXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static PathGrid CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            PathGrid_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static PathGrid CreateFromXml(
            string path,
            out PathGrid_ErrorMask errorMask,
            PathGrid_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PathGrid CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            PathGrid_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static PathGrid CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            PathGrid_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static PathGrid CreateFromXml(
            Stream stream,
            out PathGrid_ErrorMask errorMask,
            PathGrid_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PathGrid CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            PathGrid_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            PathGrid item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((PathGrid_FieldIndex)index)
            {
                case PathGrid_FieldIndex.Unknown:
                    return _hasBeenSetTracker[index];
                case PathGrid_FieldIndex.PointToPointConnections:
                    return PointToPointConnections.HasBeenSet;
                case PathGrid_FieldIndex.InterCellConnections:
                    return InterCellConnections.HasBeenSet;
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return PointToReferenceMappings.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = PathGrid_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in PointToReferenceMappings.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(LinkingPackage<M> package)
            
        {
            base.Link(package: package);
            foreach (var item in PointToReferenceMappings.Items)
            {
                item.Link(package: package);
            }
        }

        public PathGrid(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public PathGrid(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => PathGridBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((PathGridBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static PathGrid CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static PathGrid CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out PathGrid_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PathGrid_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static PathGrid CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<PathGrid>(
                record: new PathGrid(),
                frame: frame,
                errorMask: errorMask,
                recType: PathGrid_Registration.PGRD_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            PathGrid item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            PathGrid item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x41544144: // DATA
                {
                    PathGridBinaryCreateTranslation.FillBinaryPointToPointConnectionsCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)PathGrid_FieldIndex.PointToPointConnections);
                }
                case 0x47414750: // PGAG
                {
                    return TryGet<int?>.Succeed((int)PathGrid_FieldIndex.Unknown);
                }
                case 0x49524750: // PGRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<InterCellPoint>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.InterCellConnections,
                        fieldIndex: (int)PathGrid_FieldIndex.InterCellConnections,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out InterCellPoint listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<InterCellPoint>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)PathGrid_FieldIndex.InterCellConnections);
                }
                case 0x4C524750: // PGRL
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<PointToReferenceMapping>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: PathGrid_Registration.PGRL_HEADER,
                        item: item.PointToReferenceMappings,
                        fieldIndex: (int)PathGrid_FieldIndex.PointToReferenceMappings,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out PointToReferenceMapping listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<PointToReferenceMapping>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)PathGrid_FieldIndex.PointToReferenceMappings);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public PathGrid Copy(
            PathGrid_CopyMask copyMask = null,
            PathGrid def = null)
        {
            return PathGrid.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static PathGrid Copy(
            PathGrid item,
            PathGrid_CopyMask copyMask = null,
            PathGrid def = null)
        {
            PathGrid ret;
            if (item.GetType().Equals(typeof(PathGrid)))
            {
                ret = new PathGrid();
            }
            else
            {
                ret = (PathGrid)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static PathGrid Copy_ToLoqui(
            PathGrid item,
            PathGrid_CopyMask copyMask = null,
            PathGrid def = null)
        {
            PathGrid ret;
            if (item.GetType().Equals(typeof(PathGrid)))
            {
                ret = new PathGrid() as PathGrid;
            }
            else
            {
                ret = (PathGrid)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            PathGrid rhs,
            PathGrid_CopyMask copyMask,
            PathGrid def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            PathGrid rhs,
            out PathGrid_ErrorMask errorMask,
            PathGrid_CopyMask copyMask = null,
            PathGrid def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PathGridSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = PathGrid_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            PathGrid rhs,
            ErrorMaskBuilder errorMask,
            PathGrid_CopyMask copyMask = null,
            PathGrid def = null)
        {
            PathGridSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    this._PointToPointConnections.SetTo((ISetList<PathGridPoint>)obj);
                    break;
                case PathGrid_FieldIndex.Unknown:
                    this.Unknown = (Byte[])obj;
                    break;
                case PathGrid_FieldIndex.InterCellConnections:
                    this._InterCellConnections.SetTo((ISetList<InterCellPoint>)obj);
                    break;
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    this._PointToReferenceMappings.SetTo((ISetList<PointToReferenceMapping>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            PathGridSetterCommon.Instance.Clear(this);
        }

        public new static PathGrid Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new PathGrid();
            foreach (var pair in fields)
            {
                CopyInInternal_PathGrid(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_PathGrid(PathGrid obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out PathGrid_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    obj._PointToPointConnections.SetTo((ISetList<PathGridPoint>)pair.Value);
                    break;
                case PathGrid_FieldIndex.Unknown:
                    obj.Unknown = (Byte[])pair.Value;
                    break;
                case PathGrid_FieldIndex.InterCellConnections:
                    obj._InterCellConnections.SetTo((ISetList<InterCellPoint>)pair.Value);
                    break;
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    obj._PointToReferenceMappings.SetTo((ISetList<PointToReferenceMapping>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IPathGrid :
        IPathGridInternalGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IPathGridInternal>
    {
        new ISetList<PathGridPoint> PointToPointConnections { get; }
        new Byte[] Unknown { get; set; }
        new bool Unknown_IsSet { get; set; }
        void Unknown_Set(Byte[] value, bool hasBeenSet = true);
        void Unknown_Unset();

        new ISetList<InterCellPoint> InterCellConnections { get; }
        new ISetList<PointToReferenceMapping> PointToReferenceMappings { get; }
        void CopyFieldsFrom(
            PathGrid rhs,
            ErrorMaskBuilder errorMask = null,
            PathGrid_CopyMask copyMask = null,
            PathGrid def = null);
    }

    public partial interface IPathGridInternal :
        IOblivionMajorRecordInternal,
        IPathGrid,
        IPathGridInternalGetter
    {
    }

    public partial interface IPathGridGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IPathGridInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region PointToPointConnections
        IReadOnlySetList<IPathGridPointInternalGetter> PointToPointConnections { get; }
        #endregion
        #region Unknown
        ReadOnlySpan<Byte> Unknown { get; }
        bool Unknown_IsSet { get; }

        #endregion
        #region InterCellConnections
        IReadOnlySetList<IInterCellPointInternalGetter> InterCellConnections { get; }
        #endregion
        #region PointToReferenceMappings
        IReadOnlySetList<IPointToReferenceMappingInternalGetter> PointToReferenceMappings { get; }
        #endregion

    }

    public partial interface IPathGridInternalGetter :
        IOblivionMajorRecordInternalGetter,
        IPathGridGetter
    {

    }

    #endregion

    #region Common MixIn
    public static class PathGridMixIn
    {
        public static void Clear(this IPathGridInternal item)
        {
            ((PathGridSetterCommon)((IPathGridInternalGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static PathGrid_Mask<bool> GetEqualsMask(
            this IPathGridInternalGetter item,
            IPathGridInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PathGridCommon)((IPathGridInternalGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPathGridInternalGetter item,
            string name = null,
            PathGrid_Mask<bool> printMask = null)
        {
            return ((PathGridCommon)((IPathGridInternalGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPathGridInternalGetter item,
            FileGeneration fg,
            string name = null,
            PathGrid_Mask<bool> printMask = null)
        {
            ((PathGridCommon)((IPathGridInternalGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IPathGridInternalGetter item,
            PathGrid_Mask<bool?> checkMask)
        {
            return ((PathGridCommon)((IPathGridInternalGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static PathGrid_Mask<bool> GetHasBeenSetMask(this IPathGridInternalGetter item)
        {
            var ret = new PathGrid_Mask<bool>();
            ((PathGridCommon)((IPathGridInternalGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IPathGridInternalGetter item,
            IPathGridInternalGetter rhs)
        {
            return ((PathGridCommon)((IPathGridInternalGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum PathGrid_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        PointToPointConnections = 5,
        Unknown = 6,
        InterCellConnections = 7,
        PointToReferenceMappings = 8,
    }
    #endregion

    #region Registration
    public class PathGrid_Registration : ILoquiRegistration
    {
        public static readonly PathGrid_Registration Instance = new PathGrid_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 129,
            version: 0);

        public const string GUID = "9fc6e922-dfb7-4ad4-81d3-bea823f22198";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(PathGrid_Mask<>);

        public static readonly Type ErrorMaskType = typeof(PathGrid_ErrorMask);

        public static readonly Type ClassType = typeof(PathGrid);

        public static readonly Type GetterType = typeof(IPathGridGetter);

        public static readonly Type InternalGetterType = typeof(IPathGridInternalGetter);

        public static readonly Type SetterType = typeof(IPathGrid);

        public static readonly Type InternalSetterType = typeof(IPathGridInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PathGrid";

        public const string Name = "PathGrid";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "POINTTOPOINTCONNECTIONS":
                    return (ushort)PathGrid_FieldIndex.PointToPointConnections;
                case "UNKNOWN":
                    return (ushort)PathGrid_FieldIndex.Unknown;
                case "INTERCELLCONNECTIONS":
                    return (ushort)PathGrid_FieldIndex.InterCellConnections;
                case "POINTTOREFERENCEMAPPINGS":
                    return (ushort)PathGrid_FieldIndex.PointToReferenceMappings;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                case PathGrid_FieldIndex.InterCellConnections:
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return true;
                case PathGrid_FieldIndex.Unknown:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                case PathGrid_FieldIndex.InterCellConnections:
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return true;
                case PathGrid_FieldIndex.Unknown:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                case PathGrid_FieldIndex.Unknown:
                case PathGrid_FieldIndex.InterCellConnections:
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    return "PointToPointConnections";
                case PathGrid_FieldIndex.Unknown:
                    return "Unknown";
                case PathGrid_FieldIndex.InterCellConnections:
                    return "InterCellConnections";
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return "PointToReferenceMappings";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                case PathGrid_FieldIndex.Unknown:
                case PathGrid_FieldIndex.InterCellConnections:
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                case PathGrid_FieldIndex.Unknown:
                case PathGrid_FieldIndex.InterCellConnections:
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    return typeof(ISetList<PathGridPoint>);
                case PathGrid_FieldIndex.Unknown:
                    return typeof(Byte[]);
                case PathGrid_FieldIndex.InterCellConnections:
                    return typeof(ISetList<InterCellPoint>);
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return typeof(ISetList<PointToReferenceMapping>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(PathGridXmlWriteTranslation);
        public static readonly RecordType PGRD_HEADER = new RecordType("PGRD");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType PGAG_HEADER = new RecordType("PGAG");
        public static readonly RecordType PGRI_HEADER = new RecordType("PGRI");
        public static readonly RecordType PGRL_HEADER = new RecordType("PGRL");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = PGRD_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(PathGridBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PathGridSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly PathGridSetterCommon Instance = new PathGridSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IPathGridInternal item)
        {
            ClearPartial();
            item.PointToPointConnections.Unset();
            item.Unknown_Unset();
            item.InterCellConnections.Unset();
            item.PointToReferenceMappings.Unset();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IPathGridInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPathGridInternal)item);
        }
        
    }
    public partial class PathGridCommon : OblivionMajorRecordCommon
    {
        public new static readonly PathGridCommon Instance = new PathGridCommon();

        public PathGrid_Mask<bool> GetEqualsMask(
            IPathGridInternalGetter item,
            IPathGridInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PathGrid_Mask<bool>();
            ((PathGridCommon)((IPathGridInternalGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPathGridInternalGetter item,
            IPathGridInternalGetter rhs,
            PathGrid_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.PointToPointConnections = item.PointToPointConnections.CollectionEqualsHelper(
                rhs.PointToPointConnections,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Unknown = item.Unknown_IsSet == rhs.Unknown_IsSet && MemoryExtensions.SequenceEqual(item.Unknown, rhs.Unknown);
            ret.InterCellConnections = item.InterCellConnections.CollectionEqualsHelper(
                rhs.InterCellConnections,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.PointToReferenceMappings = item.PointToReferenceMappings.CollectionEqualsHelper(
                rhs.PointToReferenceMappings,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPathGridInternalGetter item,
            string name = null,
            PathGrid_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPathGridInternalGetter item,
            FileGeneration fg,
            string name = null,
            PathGrid_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PathGrid =>");
            }
            else
            {
                fg.AppendLine($"{name} (PathGrid) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPathGridInternalGetter item,
            FileGeneration fg,
            PathGrid_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.PointToPointConnections?.Overall ?? true)
            {
                fg.AppendLine("PointToPointConnections =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.PointToPointConnections)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
            if (printMask?.InterCellConnections?.Overall ?? true)
            {
                fg.AppendLine("InterCellConnections =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.InterCellConnections)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.PointToReferenceMappings?.Overall ?? true)
            {
                fg.AppendLine("PointToReferenceMappings =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.PointToReferenceMappings)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IPathGridInternalGetter item,
            PathGrid_Mask<bool?> checkMask)
        {
            if (checkMask.PointToPointConnections.Overall.HasValue && checkMask.PointToPointConnections.Overall.Value != item.PointToPointConnections.HasBeenSet) return false;
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != item.Unknown_IsSet) return false;
            if (checkMask.InterCellConnections.Overall.HasValue && checkMask.InterCellConnections.Overall.Value != item.InterCellConnections.HasBeenSet) return false;
            if (checkMask.PointToReferenceMappings.Overall.HasValue && checkMask.PointToReferenceMappings.Overall.Value != item.PointToReferenceMappings.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IPathGridInternalGetter item,
            PathGrid_Mask<bool> mask)
        {
            mask.PointToPointConnections = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, PathGridPoint_Mask<bool>>>>(item.PointToPointConnections.HasBeenSet, item.PointToPointConnections.WithIndex().Select((i) => new MaskItemIndexed<bool, PathGridPoint_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Unknown = item.Unknown_IsSet;
            mask.InterCellConnections = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, InterCellPoint_Mask<bool>>>>(item.InterCellConnections.HasBeenSet, item.InterCellConnections.WithIndex().Select((i) => new MaskItemIndexed<bool, InterCellPoint_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.PointToReferenceMappings = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, PointToReferenceMapping_Mask<bool>>>>(item.PointToReferenceMappings.HasBeenSet, item.PointToReferenceMappings.WithIndex().Select((i) => new MaskItemIndexed<bool, PointToReferenceMapping_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static PathGrid_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PathGrid_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (PathGrid_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (PathGrid_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (PathGrid_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (PathGrid_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static PathGrid_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PathGrid_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PathGrid_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (PathGrid_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PathGrid_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPathGridInternalGetter lhs,
            IPathGridInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.PointToPointConnections.HasBeenSet != rhs.PointToPointConnections.HasBeenSet) return false;
            if (lhs.PointToPointConnections.HasBeenSet)
            {
                if (!lhs.PointToPointConnections.SequenceEqual(rhs.PointToPointConnections)) return false;
            }
            if (lhs.Unknown_IsSet != rhs.Unknown_IsSet) return false;
            if (lhs.Unknown_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown, rhs.Unknown)) return false;
            }
            if (lhs.InterCellConnections.HasBeenSet != rhs.InterCellConnections.HasBeenSet) return false;
            if (lhs.InterCellConnections.HasBeenSet)
            {
                if (!lhs.InterCellConnections.SequenceEqual(rhs.InterCellConnections)) return false;
            }
            if (lhs.PointToReferenceMappings.HasBeenSet != rhs.PointToReferenceMappings.HasBeenSet) return false;
            if (lhs.PointToReferenceMappings.HasBeenSet)
            {
                if (!lhs.PointToReferenceMappings.SequenceEqual(rhs.PointToReferenceMappings)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordInternalGetter lhs,
            IOblivionMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IPathGridInternalGetter)lhs,
                rhs: rhs as IPathGridInternalGetter);
        }
        
        public override bool Equals(
            IMajorRecordInternalGetter lhs,
            IMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IPathGridInternalGetter)lhs,
                rhs: rhs as IPathGridInternalGetter);
        }
        
        public virtual int GetHashCode(IPathGridInternalGetter item)
        {
            int ret = 0;
            if (item.PointToPointConnections.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.PointToPointConnections).CombineHashCode(ret);
            }
            if (item.Unknown_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Unknown).CombineHashCode(ret);
            }
            if (item.InterCellConnections.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.InterCellConnections).CombineHashCode(ret);
            }
            if (item.PointToReferenceMappings.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.PointToReferenceMappings).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IPathGridInternalGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IPathGridInternalGetter)item);
        }
        
        #endregion
        
        
        #region Mutagen
        partial void PostDuplicate(PathGrid obj, PathGrid rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new PathGrid(getNextFormKey());
            ret.CopyFieldsFrom((PathGrid)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (PathGrid)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class PathGridSetterCopyCommon : OblivionMajorRecordSetterCopyCommon
    {
        public new static readonly PathGridSetterCopyCommon Instance = new PathGridSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            PathGrid item,
            PathGrid rhs,
            PathGrid def,
            ErrorMaskBuilder errorMask,
            PathGrid_CopyMask copyMask)
        {
            OblivionMajorRecordSetterCopyCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.PointToPointConnections.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PathGrid_FieldIndex.PointToPointConnections);
                try
                {
                    item.PointToPointConnections.SetToWithDefault<PathGridPoint, PathGridPoint>(
                        rhs: rhs.PointToPointConnections,
                        def: def?.PointToPointConnections,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.PointToPointConnections.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (PathGridPoint)r;
                                case CopyOption.MakeCopy:
                                    return PathGridPoint.Copy(
                                        r,
                                        copyMask?.PointToPointConnections?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.PointToPointConnections.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Unknown ?? true)
            {
                errorMask?.PushIndex((int)PathGrid_FieldIndex.Unknown);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Unknown,
                        rhsHasBeenSet: rhs.Unknown_IsSet,
                        defItem: def?.Unknown ?? default(Byte[]),
                        defHasBeenSet: def?.Unknown_IsSet ?? false,
                        outRhsItem: out var rhsUnknownItem,
                        outDefItem: out var defUnknownItem))
                    {
                        item.Unknown = rhsUnknownItem;
                    }
                    else
                    {
                        item.Unknown_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.InterCellConnections.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PathGrid_FieldIndex.InterCellConnections);
                try
                {
                    item.InterCellConnections.SetToWithDefault<InterCellPoint, InterCellPoint>(
                        rhs: rhs.InterCellConnections,
                        def: def?.InterCellConnections,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.InterCellConnections.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (InterCellPoint)r;
                                case CopyOption.MakeCopy:
                                    return InterCellPoint.Copy(
                                        r,
                                        copyMask?.InterCellConnections?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.InterCellConnections.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PointToReferenceMappings.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PathGrid_FieldIndex.PointToReferenceMappings);
                try
                {
                    item.PointToReferenceMappings.SetToWithDefault<PointToReferenceMapping, PointToReferenceMapping>(
                        rhs: rhs.PointToReferenceMappings,
                        def: def?.PointToReferenceMappings,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.PointToReferenceMappings.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (PointToReferenceMapping)r;
                                case CopyOption.MakeCopy:
                                    return PointToReferenceMapping.Copy(
                                        r,
                                        copyMask?.PointToReferenceMappings?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.PointToReferenceMappings.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class PathGrid
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PathGrid_Registration.Instance;
        public new static PathGrid_Registration Registration => PathGrid_Registration.Instance;
        protected override object CommonInstance()
        {
            return PathGridCommon.Instance;
        }
        protected override object CommonSetterInstance()
        {
            return PathGridSetterCommon.Instance;
        }
        protected override object CommonSetterCopyInstance()
        {
            return PathGridSetterCopyCommon.Instance;
        }

        #endregion

    }
}
#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PathGridXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static PathGridXmlWriteTranslation Instance = new PathGridXmlWriteTranslation();

        public static void WriteToNodeXml(
            IPathGridInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.PointToPointConnections.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PathGrid_FieldIndex.PointToPointConnections) ?? true))
            {
                ListXmlTranslation<IPathGridPointInternalGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.PointToPointConnections),
                    item: item.PointToPointConnections,
                    fieldIndex: (int)PathGrid_FieldIndex.PointToPointConnections,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PathGrid_FieldIndex.PointToPointConnections),
                    transl: (XElement subNode, IPathGridPointInternalGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((PathGridPointXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.Unknown_IsSet
                && (translationMask?.GetShouldTranslate((int)PathGrid_FieldIndex.Unknown) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)PathGrid_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if (item.InterCellConnections.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PathGrid_FieldIndex.InterCellConnections) ?? true))
            {
                ListXmlTranslation<IInterCellPointInternalGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.InterCellConnections),
                    item: item.InterCellConnections,
                    fieldIndex: (int)PathGrid_FieldIndex.InterCellConnections,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PathGrid_FieldIndex.InterCellConnections),
                    transl: (XElement subNode, IInterCellPointInternalGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((InterCellPointXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.PointToReferenceMappings.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PathGrid_FieldIndex.PointToReferenceMappings) ?? true))
            {
                ListXmlTranslation<IPointToReferenceMappingInternalGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.PointToReferenceMappings),
                    item: item.PointToReferenceMappings,
                    fieldIndex: (int)PathGrid_FieldIndex.PointToReferenceMappings,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PathGrid_FieldIndex.PointToReferenceMappings),
                    transl: (XElement subNode, IPointToReferenceMappingInternalGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((PointToReferenceMappingXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IPathGridInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.PathGrid");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.PathGrid");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IPathGridInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IPathGridInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IPathGridInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class PathGridXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static PathGridXmlCreateTranslation Instance = new PathGridXmlCreateTranslation();

        public static void FillPublicXml(
            IPathGridInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PathGridXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IPathGridInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "PointToPointConnections":
                    try
                    {
                        errorMask?.PushIndex((int)PathGrid_FieldIndex.PointToPointConnections);
                        if (ListXmlTranslation<PathGridPoint>.Instance.Parse(
                            node: node,
                            enumer: out var PointToPointConnectionsItem,
                            transl: LoquiXmlTranslation<PathGridPoint>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.PointToPointConnections.SetTo(PointToPointConnectionsItem);
                        }
                        else
                        {
                            item.PointToPointConnections.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    try
                    {
                        errorMask?.PushIndex((int)PathGrid_FieldIndex.Unknown);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] UnknownParse,
                            errorMask: errorMask))
                        {
                            item.Unknown = UnknownParse;
                        }
                        else
                        {
                            item.Unknown = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "InterCellConnections":
                    try
                    {
                        errorMask?.PushIndex((int)PathGrid_FieldIndex.InterCellConnections);
                        if (ListXmlTranslation<InterCellPoint>.Instance.Parse(
                            node: node,
                            enumer: out var InterCellConnectionsItem,
                            transl: LoquiXmlTranslation<InterCellPoint>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.InterCellConnections.SetTo(InterCellConnectionsItem);
                        }
                        else
                        {
                            item.InterCellConnections.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PointToReferenceMappings":
                    try
                    {
                        errorMask?.PushIndex((int)PathGrid_FieldIndex.PointToReferenceMappings);
                        if (ListXmlTranslation<PointToReferenceMapping>.Instance.Parse(
                            node: node,
                            enumer: out var PointToReferenceMappingsItem,
                            transl: LoquiXmlTranslation<PointToReferenceMapping>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.PointToReferenceMappings.SetTo(PointToReferenceMappingsItem);
                        }
                        else
                        {
                            item.PointToReferenceMappings.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class PathGridXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IPathGridInternalGetter item,
            XElement node,
            out PathGrid_ErrorMask errorMask,
            bool doMasks = true,
            PathGrid_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((PathGridXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PathGrid_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IPathGridInternalGetter item,
            string path,
            out PathGrid_ErrorMask errorMask,
            PathGrid_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPathGridInternalGetter item,
            Stream stream,
            out PathGrid_ErrorMask errorMask,
            PathGrid_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class PathGrid_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<PathGrid_Mask<T>>
    {
        #region Ctors
        public PathGrid_Mask()
        {
        }

        public PathGrid_Mask(T initialValue)
        {
            this.PointToPointConnections = new MaskItem<T, IEnumerable<MaskItemIndexed<T, PathGridPoint_Mask<T>>>>(initialValue, null);
            this.Unknown = initialValue;
            this.InterCellConnections = new MaskItem<T, IEnumerable<MaskItemIndexed<T, InterCellPoint_Mask<T>>>>(initialValue, null);
            this.PointToReferenceMappings = new MaskItem<T, IEnumerable<MaskItemIndexed<T, PointToReferenceMapping_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, PathGridPoint_Mask<T>>>> PointToPointConnections;
        public T Unknown;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, InterCellPoint_Mask<T>>>> InterCellConnections;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, PointToReferenceMapping_Mask<T>>>> PointToReferenceMappings;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is PathGrid_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PathGrid_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.PointToPointConnections, rhs.PointToPointConnections)) return false;
            if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
            if (!object.Equals(this.InterCellConnections, rhs.InterCellConnections)) return false;
            if (!object.Equals(this.PointToReferenceMappings, rhs.PointToReferenceMappings)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.PointToPointConnections?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
            ret = ret.CombineHashCode(this.InterCellConnections?.GetHashCode());
            ret = ret.CombineHashCode(this.PointToReferenceMappings?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (this.PointToPointConnections != null)
            {
                if (!eval(this.PointToPointConnections.Overall)) return false;
                if (this.PointToPointConnections.Specific != null)
                {
                    foreach (var item in this.PointToPointConnections.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.Unknown)) return false;
            if (this.InterCellConnections != null)
            {
                if (!eval(this.InterCellConnections.Overall)) return false;
                if (this.InterCellConnections.Specific != null)
                {
                    foreach (var item in this.InterCellConnections.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.PointToReferenceMappings != null)
            {
                if (!eval(this.PointToReferenceMappings.Overall)) return false;
                if (this.PointToReferenceMappings.Specific != null)
                {
                    foreach (var item in this.PointToReferenceMappings.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new PathGrid_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new PathGrid_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(PathGrid_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (PointToPointConnections != null)
            {
                obj.PointToPointConnections = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PathGridPoint_Mask<R>>>>();
                obj.PointToPointConnections.Overall = eval(this.PointToPointConnections.Overall);
                if (PointToPointConnections.Specific != null)
                {
                    List<MaskItemIndexed<R, PathGridPoint_Mask<R>>> l = new List<MaskItemIndexed<R, PathGridPoint_Mask<R>>>();
                    obj.PointToPointConnections.Specific = l;
                    foreach (var item in PointToPointConnections.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, PathGridPoint_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, PathGridPoint_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.Unknown = eval(this.Unknown);
            if (InterCellConnections != null)
            {
                obj.InterCellConnections = new MaskItem<R, IEnumerable<MaskItemIndexed<R, InterCellPoint_Mask<R>>>>();
                obj.InterCellConnections.Overall = eval(this.InterCellConnections.Overall);
                if (InterCellConnections.Specific != null)
                {
                    List<MaskItemIndexed<R, InterCellPoint_Mask<R>>> l = new List<MaskItemIndexed<R, InterCellPoint_Mask<R>>>();
                    obj.InterCellConnections.Specific = l;
                    foreach (var item in InterCellConnections.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, InterCellPoint_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, InterCellPoint_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (PointToReferenceMappings != null)
            {
                obj.PointToReferenceMappings = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PointToReferenceMapping_Mask<R>>>>();
                obj.PointToReferenceMappings.Overall = eval(this.PointToReferenceMappings.Overall);
                if (PointToReferenceMappings.Specific != null)
                {
                    List<MaskItemIndexed<R, PointToReferenceMapping_Mask<R>>> l = new List<MaskItemIndexed<R, PointToReferenceMapping_Mask<R>>>();
                    obj.PointToReferenceMappings.Specific = l;
                    foreach (var item in PointToReferenceMappings.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, PointToReferenceMapping_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, PointToReferenceMapping_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.PointToPointConnections.Specific = null;
            this.InterCellConnections.Specific = null;
            this.PointToReferenceMappings.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(PathGrid_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, PathGrid_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(PathGrid_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.PointToPointConnections?.Overall ?? true)
                {
                    fg.AppendLine("PointToPointConnections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (PointToPointConnections.Overall != null)
                        {
                            fg.AppendLine(PointToPointConnections.Overall.ToString());
                        }
                        if (PointToPointConnections.Specific != null)
                        {
                            foreach (var subItem in PointToPointConnections.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {Unknown}");
                }
                if (printMask?.InterCellConnections?.Overall ?? true)
                {
                    fg.AppendLine("InterCellConnections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (InterCellConnections.Overall != null)
                        {
                            fg.AppendLine(InterCellConnections.Overall.ToString());
                        }
                        if (InterCellConnections.Specific != null)
                        {
                            foreach (var subItem in InterCellConnections.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.PointToReferenceMappings?.Overall ?? true)
                {
                    fg.AppendLine("PointToReferenceMappings =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (PointToReferenceMappings.Overall != null)
                        {
                            fg.AppendLine(PointToReferenceMappings.Overall.ToString());
                        }
                        if (PointToReferenceMappings.Specific != null)
                        {
                            foreach (var subItem in PointToReferenceMappings.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class PathGrid_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<PathGrid_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, PathGridPoint_ErrorMask>>> PointToPointConnections;
        public Exception Unknown;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, InterCellPoint_ErrorMask>>> InterCellConnections;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, PointToReferenceMapping_ErrorMask>>> PointToReferenceMappings;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    return PointToPointConnections;
                case PathGrid_FieldIndex.Unknown:
                    return Unknown;
                case PathGrid_FieldIndex.InterCellConnections:
                    return InterCellConnections;
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return PointToReferenceMappings;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    this.PointToPointConnections = new MaskItem<Exception, IEnumerable<MaskItem<Exception, PathGridPoint_ErrorMask>>>(ex, null);
                    break;
                case PathGrid_FieldIndex.Unknown:
                    this.Unknown = ex;
                    break;
                case PathGrid_FieldIndex.InterCellConnections:
                    this.InterCellConnections = new MaskItem<Exception, IEnumerable<MaskItem<Exception, InterCellPoint_ErrorMask>>>(ex, null);
                    break;
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    this.PointToReferenceMappings = new MaskItem<Exception, IEnumerable<MaskItem<Exception, PointToReferenceMapping_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    this.PointToPointConnections = (MaskItem<Exception, IEnumerable<MaskItem<Exception, PathGridPoint_ErrorMask>>>)obj;
                    break;
                case PathGrid_FieldIndex.Unknown:
                    this.Unknown = (Exception)obj;
                    break;
                case PathGrid_FieldIndex.InterCellConnections:
                    this.InterCellConnections = (MaskItem<Exception, IEnumerable<MaskItem<Exception, InterCellPoint_ErrorMask>>>)obj;
                    break;
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    this.PointToReferenceMappings = (MaskItem<Exception, IEnumerable<MaskItem<Exception, PointToReferenceMapping_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (PointToPointConnections != null) return true;
            if (Unknown != null) return true;
            if (InterCellConnections != null) return true;
            if (PointToReferenceMappings != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("PathGrid_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine("PointToPointConnections =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (PointToPointConnections.Overall != null)
                {
                    fg.AppendLine(PointToPointConnections.Overall.ToString());
                }
                if (PointToPointConnections.Specific != null)
                {
                    foreach (var subItem in PointToPointConnections.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Unknown => {Unknown}");
            fg.AppendLine("InterCellConnections =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (InterCellConnections.Overall != null)
                {
                    fg.AppendLine(InterCellConnections.Overall.ToString());
                }
                if (InterCellConnections.Specific != null)
                {
                    foreach (var subItem in InterCellConnections.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("PointToReferenceMappings =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (PointToReferenceMappings.Overall != null)
                {
                    fg.AppendLine(PointToReferenceMappings.Overall.ToString());
                }
                if (PointToReferenceMappings.Specific != null)
                {
                    foreach (var subItem in PointToReferenceMappings.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public PathGrid_ErrorMask Combine(PathGrid_ErrorMask rhs)
        {
            var ret = new PathGrid_ErrorMask();
            ret.PointToPointConnections = new MaskItem<Exception, IEnumerable<MaskItem<Exception, PathGridPoint_ErrorMask>>>(this.PointToPointConnections.Overall.Combine(rhs.PointToPointConnections.Overall), new List<MaskItem<Exception, PathGridPoint_ErrorMask>>(this.PointToPointConnections.Specific.And(rhs.PointToPointConnections.Specific)));
            ret.Unknown = this.Unknown.Combine(rhs.Unknown);
            ret.InterCellConnections = new MaskItem<Exception, IEnumerable<MaskItem<Exception, InterCellPoint_ErrorMask>>>(this.InterCellConnections.Overall.Combine(rhs.InterCellConnections.Overall), new List<MaskItem<Exception, InterCellPoint_ErrorMask>>(this.InterCellConnections.Specific.And(rhs.InterCellConnections.Specific)));
            ret.PointToReferenceMappings = new MaskItem<Exception, IEnumerable<MaskItem<Exception, PointToReferenceMapping_ErrorMask>>>(this.PointToReferenceMappings.Overall.Combine(rhs.PointToReferenceMappings.Overall), new List<MaskItem<Exception, PointToReferenceMapping_ErrorMask>>(this.PointToReferenceMappings.Specific.And(rhs.PointToReferenceMappings.Specific)));
            return ret;
        }
        public static PathGrid_ErrorMask Combine(PathGrid_ErrorMask lhs, PathGrid_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static PathGrid_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new PathGrid_ErrorMask();
        }
        #endregion

    }
    public class PathGrid_CopyMask : OblivionMajorRecord_CopyMask
    {
        public PathGrid_CopyMask()
        {
        }

        public PathGrid_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.PointToPointConnections = new MaskItem<CopyOption, PathGridPoint_CopyMask>(deepCopyOption, default);
            this.Unknown = defaultOn;
            this.InterCellConnections = new MaskItem<CopyOption, InterCellPoint_CopyMask>(deepCopyOption, default);
            this.PointToReferenceMappings = new MaskItem<CopyOption, PointToReferenceMapping_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public MaskItem<CopyOption, PathGridPoint_CopyMask> PointToPointConnections;
        public bool Unknown;
        public MaskItem<CopyOption, InterCellPoint_CopyMask> InterCellConnections;
        public MaskItem<CopyOption, PointToReferenceMapping_CopyMask> PointToReferenceMappings;
        #endregion

    }

    public class PathGrid_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public MaskItem<bool, PathGridPoint_TranslationMask> PointToPointConnections;
        public bool Unknown;
        public MaskItem<bool, InterCellPoint_TranslationMask> InterCellConnections;
        public MaskItem<bool, PointToReferenceMapping_TranslationMask> PointToReferenceMappings;
        #endregion

        #region Ctors
        public PathGrid_TranslationMask()
            : base()
        {
        }

        public PathGrid_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.PointToPointConnections = new MaskItem<bool, PathGridPoint_TranslationMask>(defaultOn, null);
            this.Unknown = defaultOn;
            this.InterCellConnections = new MaskItem<bool, InterCellPoint_TranslationMask>(defaultOn, null);
            this.PointToReferenceMappings = new MaskItem<bool, PointToReferenceMapping_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((PointToPointConnections?.Overall ?? true, PointToPointConnections?.Specific?.GetCrystal()));
            ret.Add((Unknown, null));
            ret.Add((InterCellConnections?.Overall ?? true, InterCellConnections?.Specific?.GetCrystal()));
            ret.Add((PointToReferenceMappings?.Overall ?? true, PointToReferenceMappings?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PathGridBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PathGridBinaryWriteTranslation Instance = new PathGridBinaryWriteTranslation();

        static partial void WriteBinaryPointToPointConnectionsCustom(
            MutagenWriter writer,
            IPathGridInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryPointToPointConnections(
            MutagenWriter writer,
            IPathGridInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryPointToPointConnectionsCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_RecordTypes(
            IPathGridInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            PathGridBinaryWriteTranslation.WriteBinaryPointToPointConnections(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            if (item.InterCellConnections.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IInterCellPointInternalGetter>.Instance.Write(
                    writer: writer,
                    items: item.InterCellConnections,
                    fieldIndex: (int)PathGrid_FieldIndex.InterCellConnections,
                    recordType: PathGrid_Registration.PGRI_HEADER,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IInterCellPointInternalGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        {
                            var loquiItem = subItem;
                            ((InterCellPointBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                                item: loquiItem,
                                writer: subWriter,
                                errorMask: listErrorMask,
                                masterReferences: masterReferences,
                                recordTypeConverter: null);
                        }
                    });
            }
            if (item.PointToReferenceMappings.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IPointToReferenceMappingInternalGetter>.Instance.Write(
                    writer: writer,
                    items: item.PointToReferenceMappings,
                    fieldIndex: (int)PathGrid_FieldIndex.PointToReferenceMappings,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IPointToReferenceMappingInternalGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((PointToReferenceMappingBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IPathGridInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: PathGrid_Registration.PGRD_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IPathGridInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IPathGridInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IPathGridInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class PathGridBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static PathGridBinaryCreateTranslation Instance = new PathGridBinaryCreateTranslation();

        static partial void FillBinaryPointToPointConnectionsCustom(
            MutagenFrame frame,
            PathGrid item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryPointToPointConnectionsCustomPublic(
            MutagenFrame frame,
            PathGrid item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryPointToPointConnectionsCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class PathGridBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPathGridInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out PathGrid_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((PathGridBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PathGrid_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PathGridBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        IPathGridInternalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PathGrid_Registration.Instance;
        public new static PathGrid_Registration Registration => PathGrid_Registration.Instance;
        protected override object CommonInstance()
        {
            return PathGridCommon.Instance;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPathGridInternalGetter)rhs, include);

        protected override object XmlWriteTranslator => PathGridXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((PathGridXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => PathGridBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((PathGridBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region PointToPointConnections
        partial void PointToPointConnectionsCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        public IReadOnlySetList<IInterCellPointInternalGetter> InterCellConnections { get; private set; } = EmptySetList<InterCellPointBinaryWrapper>.Instance;
        public IReadOnlySetList<IPointToReferenceMappingInternalGetter> PointToReferenceMappings { get; private set; } = EmptySetList<PointToReferenceMappingBinaryWrapper>.Instance;
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected PathGridBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static PathGridBinaryWrapper PathGridFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new PathGridBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x41544144: // DATA
                {
                    PointToPointConnectionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return TryGet<int?>.Succeed((int)PathGrid_FieldIndex.PointToPointConnections);
                }
                case 0x47414750: // PGAG
                {
                    return TryGet<int?>.Succeed((int)PathGrid_FieldIndex.Unknown);
                }
                case 0x49524750: // PGRI
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.InterCellConnections = BinaryWrapperSetList<InterCellPointBinaryWrapper>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 16,
                        getter: (s, p) => InterCellPointBinaryWrapper.InterCellPointFactory(new BinaryMemoryReadStream(s), p));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)PathGrid_FieldIndex.InterCellConnections);
                }
                case 0x4C524750: // PGRL
                {
                    this.PointToReferenceMappings = BinaryWrapperSetList<PointToReferenceMappingBinaryWrapper>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => PointToReferenceMappingBinaryWrapper.PointToReferenceMappingFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)PathGrid_FieldIndex.PointToReferenceMappings);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

