/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PlacedCreature :
        OblivionMajorRecord,
        IPlacedCreatureInternal,
        ILoquiObjectSetter<PlacedCreature>,
        IEquatable<PlacedCreature>,
        IEqualsMask
    {
        #region Ctor
        protected PlacedCreature()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Base
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormSetLink<Creature> _Base = new FormSetLink<Creature>();
        public IFormSetLink<Creature> Base => this._Base;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormSetLinkGetter<ICreatureGetter> IPlacedCreatureGetter.Base => this.Base;
        #endregion
        #region Owner
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormSetLink<Faction> _Owner = new FormSetLink<Faction>();
        public IFormSetLink<Faction> Owner => this._Owner;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormSetLinkGetter<IFactionGetter> IPlacedCreatureGetter.Owner => this.Owner;
        #endregion
        #region FactionRank
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int32? _FactionRank;
        public Int32? FactionRank
        {
            get => this._FactionRank;
            set => this._FactionRank = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPlacedCreatureGetter.FactionRank => this.FactionRank;
        #endregion
        #region GlobalVariable
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormSetLink<Global> _GlobalVariable = new FormSetLink<Global>();
        public IFormSetLink<Global> GlobalVariable => this._GlobalVariable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormSetLinkGetter<IGlobalGetter> IPlacedCreatureGetter.GlobalVariable => this.GlobalVariable;
        #endregion
        #region EnableParent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EnableParent? _EnableParent;
        public EnableParent? EnableParent
        {
            get => _EnableParent;
            set => _EnableParent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnableParentGetter? IPlacedCreatureGetter.EnableParent => this.EnableParent;
        #endregion
        #region RagdollData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _RagdollData;
        public Byte[]? RagdollData
        {
            get => this._RagdollData;
            set => this._RagdollData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IPlacedCreatureGetter.RagdollData => this.RagdollData;
        bool IPlacedCreatureGetter.RagdollData_IsSet => this.RagdollData != null;
        #endregion
        #region Scale
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single? _Scale;
        public Single? Scale
        {
            get => this._Scale;
            set => this._Scale = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedCreatureGetter.Scale => this.Scale;
        #endregion
        #region Position
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private P3Float _Position;
        public P3Float Position
        {
            get => this._Position;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Position = value;
            }
        }
        #endregion
        #region Rotation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private P3Float _Rotation;
        public P3Float Rotation
        {
            get => this._Rotation;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Rotation = value;
            }
        }
        #endregion
        #region DATADataTypeState
        public PlacedCreature.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PlacedCreatureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IPlacedCreatureGetter rhs)) return false;
            return ((PlacedCreatureCommon)((IPlacedCreatureGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(PlacedCreature obj)
        {
            return ((PlacedCreatureCommon)((IPlacedCreatureGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PlacedCreatureCommon)((IPlacedCreatureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => PlacedCreatureXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PlacedCreatureXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new PlacedCreature CreateFromXml(
            XElement node,
            PlacedCreature.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PlacedCreature CreateFromXml(
            XElement node,
            out PlacedCreature.ErrorMask errorMask,
            PlacedCreature.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedCreature.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static PlacedCreature CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new PlacedCreature();
            ((PlacedCreatureSetterCommon)((IPlacedCreatureGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static PlacedCreature CreateFromXml(
            string path,
            PlacedCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static PlacedCreature CreateFromXml(
            string path,
            out PlacedCreature.ErrorMask errorMask,
            PlacedCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PlacedCreature CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            PlacedCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static PlacedCreature CreateFromXml(
            Stream stream,
            PlacedCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static PlacedCreature CreateFromXml(
            Stream stream,
            out PlacedCreature.ErrorMask errorMask,
            PlacedCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PlacedCreature CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            PlacedCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            OblivionMajorRecord.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            : base(initialValue)
            {
                this.Base = initialValue;
                this.Owner = initialValue;
                this.FactionRank = initialValue;
                this.GlobalVariable = initialValue;
                this.EnableParent = new MaskItem<T, EnableParent.Mask<T>?>(initialValue, new EnableParent.Mask<T>(initialValue));
                this.RagdollData = initialValue;
                this.Scale = initialValue;
                this.Position = initialValue;
                this.Rotation = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                T MajorRecordFlagsRaw,
                T FormKey,
                T Version,
                T EditorID,
                T OblivionMajorRecordFlags,
                T Base,
                T Owner,
                T FactionRank,
                T GlobalVariable,
                T EnableParent,
                T RagdollData,
                T Scale,
                T Position,
                T Rotation,
                T DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Base = Base;
                this.Owner = Owner;
                this.FactionRank = FactionRank;
                this.GlobalVariable = GlobalVariable;
                this.EnableParent = new MaskItem<T, EnableParent.Mask<T>?>(EnableParent, new EnableParent.Mask<T>(EnableParent));
                this.RagdollData = RagdollData;
                this.Scale = Scale;
                this.Position = Position;
                this.Rotation = Rotation;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T Base;
            public T Owner;
            public T FactionRank;
            public T GlobalVariable;
            public MaskItem<T, EnableParent.Mask<T>?>? EnableParent { get; set; }
            public T RagdollData;
            public T Scale;
            public T Position;
            public T Rotation;
            public T DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Base, rhs.Base)) return false;
                if (!object.Equals(this.Owner, rhs.Owner)) return false;
                if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
                if (!object.Equals(this.GlobalVariable, rhs.GlobalVariable)) return false;
                if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
                if (!object.Equals(this.RagdollData, rhs.RagdollData)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.Position, rhs.Position)) return false;
                if (!object.Equals(this.Rotation, rhs.Rotation)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Base?.GetHashCode());
                ret = ret.CombineHashCode(this.Owner?.GetHashCode());
                ret = ret.CombineHashCode(this.FactionRank?.GetHashCode());
                ret = ret.CombineHashCode(this.GlobalVariable?.GetHashCode());
                ret = ret.CombineHashCode(this.EnableParent?.GetHashCode());
                ret = ret.CombineHashCode(this.RagdollData?.GetHashCode());
                ret = ret.CombineHashCode(this.Scale?.GetHashCode());
                ret = ret.CombineHashCode(this.Position?.GetHashCode());
                ret = ret.CombineHashCode(this.Rotation?.GetHashCode());
                ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All Equal
            public override bool AllEqual(Func<T, bool> eval)
            {
                if (!base.AllEqual(eval)) return false;
                if (!eval(this.Base)) return false;
                if (!eval(this.Owner)) return false;
                if (!eval(this.FactionRank)) return false;
                if (!eval(this.GlobalVariable)) return false;
                if (EnableParent != null)
                {
                    if (!eval(this.EnableParent.Overall)) return false;
                    if (this.EnableParent.Specific != null && !this.EnableParent.Specific.AllEqual(eval)) return false;
                }
                if (!eval(this.RagdollData)) return false;
                if (!eval(this.Scale)) return false;
                if (!eval(this.Position)) return false;
                if (!eval(this.Rotation)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new PlacedCreature.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Base = eval(this.Base);
                obj.Owner = eval(this.Owner);
                obj.FactionRank = eval(this.FactionRank);
                obj.GlobalVariable = eval(this.GlobalVariable);
                obj.EnableParent = this.EnableParent == null ? null : new MaskItem<R, EnableParent.Mask<R>?>(eval(this.EnableParent.Overall), this.EnableParent.Specific?.Translate(eval));
                obj.RagdollData = eval(this.RagdollData);
                obj.Scale = eval(this.Scale);
                obj.Position = eval(this.Position);
                obj.Rotation = eval(this.Rotation);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PlacedCreature.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PlacedCreature.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PlacedCreature.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Base ?? true)
                    {
                        fg.AppendLine($"Base => {Base}");
                    }
                    if (printMask?.Owner ?? true)
                    {
                        fg.AppendLine($"Owner => {Owner}");
                    }
                    if (printMask?.FactionRank ?? true)
                    {
                        fg.AppendLine($"FactionRank => {FactionRank}");
                    }
                    if (printMask?.GlobalVariable ?? true)
                    {
                        fg.AppendLine($"GlobalVariable => {GlobalVariable}");
                    }
                    if (printMask?.EnableParent?.Overall ?? true)
                    {
                        EnableParent?.ToString(fg);
                    }
                    if (printMask?.RagdollData ?? true)
                    {
                        fg.AppendLine($"RagdollData => {RagdollData}");
                    }
                    if (printMask?.Scale ?? true)
                    {
                        fg.AppendLine($"Scale => {Scale}");
                    }
                    if (printMask?.Position ?? true)
                    {
                        fg.AppendLine($"Position => {Position}");
                    }
                    if (printMask?.Rotation ?? true)
                    {
                        fg.AppendLine($"Rotation => {Rotation}");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Base;
            public Exception? Owner;
            public Exception? FactionRank;
            public Exception? GlobalVariable;
            public MaskItem<Exception?, EnableParent.ErrorMask?>? EnableParent;
            public Exception? RagdollData;
            public Exception? Scale;
            public Exception? Position;
            public Exception? Rotation;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
                switch (enu)
                {
                    case PlacedCreature_FieldIndex.Base:
                        return Base;
                    case PlacedCreature_FieldIndex.Owner:
                        return Owner;
                    case PlacedCreature_FieldIndex.FactionRank:
                        return FactionRank;
                    case PlacedCreature_FieldIndex.GlobalVariable:
                        return GlobalVariable;
                    case PlacedCreature_FieldIndex.EnableParent:
                        return EnableParent;
                    case PlacedCreature_FieldIndex.RagdollData:
                        return RagdollData;
                    case PlacedCreature_FieldIndex.Scale:
                        return Scale;
                    case PlacedCreature_FieldIndex.Position:
                        return Position;
                    case PlacedCreature_FieldIndex.Rotation:
                        return Rotation;
                    case PlacedCreature_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
                switch (enu)
                {
                    case PlacedCreature_FieldIndex.Base:
                        this.Base = ex;
                        break;
                    case PlacedCreature_FieldIndex.Owner:
                        this.Owner = ex;
                        break;
                    case PlacedCreature_FieldIndex.FactionRank:
                        this.FactionRank = ex;
                        break;
                    case PlacedCreature_FieldIndex.GlobalVariable:
                        this.GlobalVariable = ex;
                        break;
                    case PlacedCreature_FieldIndex.EnableParent:
                        this.EnableParent = new MaskItem<Exception?, EnableParent.ErrorMask?>(ex, null);
                        break;
                    case PlacedCreature_FieldIndex.RagdollData:
                        this.RagdollData = ex;
                        break;
                    case PlacedCreature_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case PlacedCreature_FieldIndex.Position:
                        this.Position = ex;
                        break;
                    case PlacedCreature_FieldIndex.Rotation:
                        this.Rotation = ex;
                        break;
                    case PlacedCreature_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
                switch (enu)
                {
                    case PlacedCreature_FieldIndex.Base:
                        this.Base = (Exception)obj;
                        break;
                    case PlacedCreature_FieldIndex.Owner:
                        this.Owner = (Exception)obj;
                        break;
                    case PlacedCreature_FieldIndex.FactionRank:
                        this.FactionRank = (Exception)obj;
                        break;
                    case PlacedCreature_FieldIndex.GlobalVariable:
                        this.GlobalVariable = (Exception)obj;
                        break;
                    case PlacedCreature_FieldIndex.EnableParent:
                        this.EnableParent = (MaskItem<Exception?, EnableParent.ErrorMask?>?)obj;
                        break;
                    case PlacedCreature_FieldIndex.RagdollData:
                        this.RagdollData = (Exception)obj;
                        break;
                    case PlacedCreature_FieldIndex.Scale:
                        this.Scale = (Exception)obj;
                        break;
                    case PlacedCreature_FieldIndex.Position:
                        this.Position = (Exception)obj;
                        break;
                    case PlacedCreature_FieldIndex.Rotation:
                        this.Rotation = (Exception)obj;
                        break;
                    case PlacedCreature_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Base != null) return true;
                if (Owner != null) return true;
                if (FactionRank != null) return true;
                if (GlobalVariable != null) return true;
                if (EnableParent != null) return true;
                if (RagdollData != null) return true;
                if (Scale != null) return true;
                if (Position != null) return true;
                if (Rotation != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg)
            {
                fg.AppendLine("ErrorMask =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendLine($"Base => {Base}");
                fg.AppendLine($"Owner => {Owner}");
                fg.AppendLine($"FactionRank => {FactionRank}");
                fg.AppendLine($"GlobalVariable => {GlobalVariable}");
                EnableParent?.ToString(fg);
                fg.AppendLine($"RagdollData => {RagdollData}");
                fg.AppendLine($"Scale => {Scale}");
                fg.AppendLine($"Position => {Position}");
                fg.AppendLine($"Rotation => {Rotation}");
                fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Base = this.Base.Combine(rhs.Base);
                ret.Owner = this.Owner.Combine(rhs.Owner);
                ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
                ret.GlobalVariable = this.GlobalVariable.Combine(rhs.GlobalVariable);
                ret.EnableParent = new MaskItem<Exception?, EnableParent.ErrorMask?>(ExceptionExt.Combine(this.EnableParent?.Overall, rhs.EnableParent?.Overall), (this.EnableParent?.Specific as IErrorMask<EnableParent.ErrorMask>)?.Combine(rhs.EnableParent?.Specific));
                ret.RagdollData = this.RagdollData.Combine(rhs.RagdollData);
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.Position = this.Position.Combine(rhs.Position);
                ret.Rotation = this.Rotation.Combine(rhs.Rotation);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Base;
            public bool Owner;
            public bool FactionRank;
            public bool GlobalVariable;
            public MaskItem<bool, EnableParent.TranslationMask?> EnableParent;
            public bool RagdollData;
            public bool Scale;
            public bool Position;
            public bool Rotation;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Base = defaultOn;
                this.Owner = defaultOn;
                this.FactionRank = defaultOn;
                this.GlobalVariable = defaultOn;
                this.EnableParent = new MaskItem<bool, EnableParent.TranslationMask?>(defaultOn, null);
                this.RagdollData = defaultOn;
                this.Scale = defaultOn;
                this.Position = defaultOn;
                this.Rotation = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Base, null));
                ret.Add((Owner, null));
                ret.Add((FactionRank, null));
                ret.Add((GlobalVariable, null));
                ret.Add((EnableParent?.Overall ?? true, EnableParent?.Specific?.GetCrystal()));
                ret.Add((RagdollData, null));
                ret.Add((Scale, null));
                ret.Add((Position, null));
                ret.Add((Rotation, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = PlacedCreature_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => PlacedCreatureCommon.Instance.GetLinks(this);
        public PlacedCreature(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public PlacedCreature(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedCreatureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((PlacedCreatureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new PlacedCreature CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static PlacedCreature CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new PlacedCreature();
            ((PlacedCreatureSetterCommon)((IPlacedCreatureGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPlacedCreatureGetter)rhs, include);

        void IClearable.Clear()
        {
            ((PlacedCreatureSetterCommon)((IPlacedCreatureGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlacedCreature GetNew()
        {
            return new PlacedCreature();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedCreature :
        IPlacedCreatureGetter,
        IOblivionMajorRecord,
        IPlaced,
        ILoquiObjectSetter<IPlacedCreatureInternal>
    {
        new IFormSetLink<Creature> Base { get; }
        new IFormSetLink<Faction> Owner { get; }
        new Int32? FactionRank { get; set; }
        new IFormSetLink<Global> GlobalVariable { get; }
        new EnableParent? EnableParent { get; set; }
        new Byte[]? RagdollData { get; set; }
        new Single? Scale { get; set; }
        new P3Float Position { get; set; }
        new P3Float Rotation { get; set; }
        new PlacedCreature.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IPlacedCreatureInternal :
        IOblivionMajorRecordInternal,
        IPlacedCreature,
        IPlacedCreatureGetter
    {
    }

    public partial interface IPlacedCreatureGetter :
        IOblivionMajorRecordGetter,
        IPlacedGetter,
        ILoquiObject<IPlacedCreatureGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        IFormSetLinkGetter<ICreatureGetter> Base { get; }
        IFormSetLinkGetter<IFactionGetter> Owner { get; }
        Int32? FactionRank { get; }
        IFormSetLinkGetter<IGlobalGetter> GlobalVariable { get; }
        IEnableParentGetter? EnableParent { get; }
        #region RagdollData
        ReadOnlySpan<Byte> RagdollData { get; }
        bool RagdollData_IsSet { get; }
        #endregion
        Single? Scale { get; }
        P3Float Position { get; }
        P3Float Rotation { get; }
        PlacedCreature.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class PlacedCreatureMixIn
    {
        public static void Clear(this IPlacedCreatureInternal item)
        {
            ((PlacedCreatureSetterCommon)((IPlacedCreatureGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedCreature.Mask<bool> GetEqualsMask(
            this IPlacedCreatureGetter item,
            IPlacedCreatureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPlacedCreatureGetter item,
            string? name = null,
            PlacedCreature.Mask<bool>? printMask = null)
        {
            return ((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPlacedCreatureGetter item,
            FileGeneration fg,
            string? name = null,
            PlacedCreature.Mask<bool>? printMask = null)
        {
            ((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IPlacedCreatureGetter item,
            PlacedCreature.Mask<bool?> checkMask)
        {
            return ((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static PlacedCreature.Mask<bool> GetHasBeenSetMask(this IPlacedCreatureGetter item)
        {
            var ret = new PlacedCreature.Mask<bool>(false);
            ((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IPlacedCreatureGetter item,
            IPlacedCreatureGetter rhs)
        {
            return ((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPlacedCreatureInternal lhs,
            IPlacedCreatureGetter rhs,
            out PlacedCreature.ErrorMask errorMask,
            PlacedCreature.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedCreatureSetterTranslationCommon)((IPlacedCreatureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = PlacedCreature.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedCreatureInternal lhs,
            IPlacedCreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedCreatureSetterTranslationCommon)((IPlacedCreatureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static PlacedCreature DeepCopy(
            this IPlacedCreatureGetter item,
            PlacedCreature.TranslationMask? copyMask = null)
        {
            return ((PlacedCreatureSetterTranslationCommon)((IPlacedCreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedCreature DeepCopy(
            this IPlacedCreatureGetter item,
            out PlacedCreature.ErrorMask errorMask,
            PlacedCreature.TranslationMask? copyMask = null)
        {
            return ((PlacedCreatureSetterTranslationCommon)((IPlacedCreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedCreature DeepCopy(
            this IPlacedCreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedCreatureSetterTranslationCommon)((IPlacedCreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPlacedCreatureInternal item,
            XElement node,
            PlacedCreature.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPlacedCreatureInternal item,
            XElement node,
            out PlacedCreature.ErrorMask errorMask,
            PlacedCreature.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedCreature.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IPlacedCreatureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((PlacedCreatureSetterCommon)((IPlacedCreatureGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedCreatureInternal item,
            string path,
            PlacedCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedCreatureInternal item,
            string path,
            out PlacedCreature.ErrorMask errorMask,
            PlacedCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedCreatureInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            PlacedCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IPlacedCreatureInternal item,
            Stream stream,
            PlacedCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedCreatureInternal item,
            Stream stream,
            out PlacedCreature.ErrorMask errorMask,
            PlacedCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedCreatureInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            PlacedCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IPlacedCreatureInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IPlacedCreatureInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((PlacedCreatureSetterCommon)((IPlacedCreatureGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum PlacedCreature_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Base = 5,
        Owner = 6,
        FactionRank = 7,
        GlobalVariable = 8,
        EnableParent = 9,
        RagdollData = 10,
        Scale = 11,
        Position = 12,
        Rotation = 13,
        DATADataTypeState = 14,
    }
    #endregion

    #region Registration
    public partial class PlacedCreature_Registration : ILoquiRegistration
    {
        public static readonly PlacedCreature_Registration Instance = new PlacedCreature_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 128,
            version: 0);

        public const string GUID = "b0f41e71-09f4-46b3-8769-7252455d209f";

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(PlacedCreature.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedCreature.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedCreature);

        public static readonly Type GetterType = typeof(IPlacedCreatureGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedCreature);

        public static readonly Type? InternalSetterType = typeof(IPlacedCreatureInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PlacedCreature";

        public const string Name = "PlacedCreature";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BASE":
                    return (ushort)PlacedCreature_FieldIndex.Base;
                case "OWNER":
                    return (ushort)PlacedCreature_FieldIndex.Owner;
                case "FACTIONRANK":
                    return (ushort)PlacedCreature_FieldIndex.FactionRank;
                case "GLOBALVARIABLE":
                    return (ushort)PlacedCreature_FieldIndex.GlobalVariable;
                case "ENABLEPARENT":
                    return (ushort)PlacedCreature_FieldIndex.EnableParent;
                case "RAGDOLLDATA":
                    return (ushort)PlacedCreature_FieldIndex.RagdollData;
                case "SCALE":
                    return (ushort)PlacedCreature_FieldIndex.Scale;
                case "POSITION":
                    return (ushort)PlacedCreature_FieldIndex.Position;
                case "ROTATION":
                    return (ushort)PlacedCreature_FieldIndex.Rotation;
                case "DATADATATYPESTATE":
                    return (ushort)PlacedCreature_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                case PlacedCreature_FieldIndex.Owner:
                case PlacedCreature_FieldIndex.FactionRank:
                case PlacedCreature_FieldIndex.GlobalVariable:
                case PlacedCreature_FieldIndex.EnableParent:
                case PlacedCreature_FieldIndex.RagdollData:
                case PlacedCreature_FieldIndex.Scale:
                case PlacedCreature_FieldIndex.Position:
                case PlacedCreature_FieldIndex.Rotation:
                case PlacedCreature_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.EnableParent:
                    return true;
                case PlacedCreature_FieldIndex.Base:
                case PlacedCreature_FieldIndex.Owner:
                case PlacedCreature_FieldIndex.FactionRank:
                case PlacedCreature_FieldIndex.GlobalVariable:
                case PlacedCreature_FieldIndex.RagdollData:
                case PlacedCreature_FieldIndex.Scale:
                case PlacedCreature_FieldIndex.Position:
                case PlacedCreature_FieldIndex.Rotation:
                case PlacedCreature_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                case PlacedCreature_FieldIndex.Owner:
                case PlacedCreature_FieldIndex.FactionRank:
                case PlacedCreature_FieldIndex.GlobalVariable:
                case PlacedCreature_FieldIndex.EnableParent:
                case PlacedCreature_FieldIndex.RagdollData:
                case PlacedCreature_FieldIndex.Scale:
                case PlacedCreature_FieldIndex.Position:
                case PlacedCreature_FieldIndex.Rotation:
                case PlacedCreature_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                    return "Base";
                case PlacedCreature_FieldIndex.Owner:
                    return "Owner";
                case PlacedCreature_FieldIndex.FactionRank:
                    return "FactionRank";
                case PlacedCreature_FieldIndex.GlobalVariable:
                    return "GlobalVariable";
                case PlacedCreature_FieldIndex.EnableParent:
                    return "EnableParent";
                case PlacedCreature_FieldIndex.RagdollData:
                    return "RagdollData";
                case PlacedCreature_FieldIndex.Scale:
                    return "Scale";
                case PlacedCreature_FieldIndex.Position:
                    return "Position";
                case PlacedCreature_FieldIndex.Rotation:
                    return "Rotation";
                case PlacedCreature_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                case PlacedCreature_FieldIndex.Owner:
                case PlacedCreature_FieldIndex.FactionRank:
                case PlacedCreature_FieldIndex.GlobalVariable:
                case PlacedCreature_FieldIndex.EnableParent:
                case PlacedCreature_FieldIndex.RagdollData:
                case PlacedCreature_FieldIndex.Scale:
                case PlacedCreature_FieldIndex.Position:
                case PlacedCreature_FieldIndex.Rotation:
                case PlacedCreature_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                case PlacedCreature_FieldIndex.Owner:
                case PlacedCreature_FieldIndex.FactionRank:
                case PlacedCreature_FieldIndex.GlobalVariable:
                case PlacedCreature_FieldIndex.EnableParent:
                case PlacedCreature_FieldIndex.RagdollData:
                case PlacedCreature_FieldIndex.Scale:
                case PlacedCreature_FieldIndex.Position:
                case PlacedCreature_FieldIndex.Rotation:
                case PlacedCreature_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                    return typeof(IFormSetLink<Creature>);
                case PlacedCreature_FieldIndex.Owner:
                    return typeof(IFormSetLink<Faction>);
                case PlacedCreature_FieldIndex.FactionRank:
                    return typeof(Int32);
                case PlacedCreature_FieldIndex.GlobalVariable:
                    return typeof(IFormSetLink<Global>);
                case PlacedCreature_FieldIndex.EnableParent:
                    return typeof(EnableParent);
                case PlacedCreature_FieldIndex.RagdollData:
                    return typeof(Byte[]);
                case PlacedCreature_FieldIndex.Scale:
                    return typeof(Single);
                case PlacedCreature_FieldIndex.Position:
                    return typeof(P3Float);
                case PlacedCreature_FieldIndex.Rotation:
                    return typeof(P3Float);
                case PlacedCreature_FieldIndex.DATADataTypeState:
                    return typeof(PlacedCreature.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(PlacedCreatureXmlWriteTranslation);
        public static readonly RecordType ACRE_HEADER = new RecordType("ACRE");
        public static readonly RecordType NAME_HEADER = new RecordType("NAME");
        public static readonly RecordType XOWN_HEADER = new RecordType("XOWN");
        public static readonly RecordType XRNK_HEADER = new RecordType("XRNK");
        public static readonly RecordType XGLB_HEADER = new RecordType("XGLB");
        public static readonly RecordType XESP_HEADER = new RecordType("XESP");
        public static readonly RecordType XRGD_HEADER = new RecordType("XRGD");
        public static readonly RecordType XSCL_HEADER = new RecordType("XSCL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ACRE_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 7;
        public static readonly Type BinaryWriteTranslation = typeof(PlacedCreatureBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PlacedCreatureSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly PlacedCreatureSetterCommon Instance = new PlacedCreatureSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedCreatureInternal item)
        {
            ClearPartial();
            item.Base.Unset();
            item.Owner.Unset();
            item.FactionRank = default;
            item.GlobalVariable.Unset();
            item.EnableParent = null;
            item.RagdollData = default;
            item.Scale = default;
            item.Position = default;
            item.Rotation = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IPlacedCreatureInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedCreatureInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IPlacedCreatureInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= PlacedCreature.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IPlacedCreatureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    PlacedCreatureXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => PlacedCreature_Registration.ACRE_HEADER;
        protected static void FillBinaryStructs(
            IPlacedCreatureInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IPlacedCreatureInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x454D414E: // NAME
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Base.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)PlacedCreature_FieldIndex.Base);
                }
                case 0x4E574F58: // XOWN
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Owner.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)PlacedCreature_FieldIndex.Owner);
                }
                case 0x4B4E5258: // XRNK
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FactionRank = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)PlacedCreature_FieldIndex.FactionRank);
                }
                case 0x424C4758: // XGLB
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.GlobalVariable.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)PlacedCreature_FieldIndex.GlobalVariable);
                }
                case 0x50534558: // XESP
                {
                    item.EnableParent = Mutagen.Bethesda.Oblivion.EnableParent.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)PlacedCreature_FieldIndex.EnableParent);
                }
                case 0x44475258: // XRGD
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.RagdollData = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)PlacedCreature_FieldIndex.RagdollData);
                }
                case 0x4C435358: // XSCL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Scale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)PlacedCreature_FieldIndex.Scale);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = PlacedCreature.DATADataType.Has;
                    }
                    item.Position = Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Rotation = Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)PlacedCreature_FieldIndex.Rotation);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IPlacedCreatureInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IPlacedCreatureInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class PlacedCreatureCommon : OblivionMajorRecordCommon
    {
        public new static readonly PlacedCreatureCommon Instance = new PlacedCreatureCommon();

        public PlacedCreature.Mask<bool> GetEqualsMask(
            IPlacedCreatureGetter item,
            IPlacedCreatureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedCreature.Mask<bool>(false);
            ((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedCreatureGetter item,
            IPlacedCreatureGetter rhs,
            PlacedCreature.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Base = object.Equals(item.Base, rhs.Base);
            ret.Owner = object.Equals(item.Owner, rhs.Owner);
            ret.FactionRank = item.FactionRank == rhs.FactionRank;
            ret.GlobalVariable = object.Equals(item.GlobalVariable, rhs.GlobalVariable);
            ret.EnableParent = EqualsMaskHelper.EqualsHelper(
                item.EnableParent,
                rhs.EnableParent,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.RagdollData = MemoryExtensions.SequenceEqual(item.RagdollData, rhs.RagdollData);
            ret.Scale = item.Scale.EqualsWithin(rhs.Scale);
            ret.Position = item.Position.Equals(rhs.Position);
            ret.Rotation = item.Rotation.Equals(rhs.Rotation);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPlacedCreatureGetter item,
            string? name = null,
            PlacedCreature.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPlacedCreatureGetter item,
            FileGeneration fg,
            string? name = null,
            PlacedCreature.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PlacedCreature =>");
            }
            else
            {
                fg.AppendLine($"{name} (PlacedCreature) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPlacedCreatureGetter item,
            FileGeneration fg,
            PlacedCreature.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Base ?? true)
            {
                fg.AppendLine($"Base => {item.Base}");
            }
            if (printMask?.Owner ?? true)
            {
                fg.AppendLine($"Owner => {item.Owner}");
            }
            if (printMask?.FactionRank ?? true)
            {
                fg.AppendLine($"FactionRank => {item.FactionRank}");
            }
            if (printMask?.GlobalVariable ?? true)
            {
                fg.AppendLine($"GlobalVariable => {item.GlobalVariable}");
            }
            if (printMask?.EnableParent?.Overall ?? true)
            {
                item.EnableParent?.ToString(fg, "EnableParent");
            }
            if (printMask?.RagdollData ?? true)
            {
                fg.AppendLine($"RagdollData => {SpanExt.ToHexString(item.RagdollData)}");
            }
            if (printMask?.Scale ?? true)
            {
                fg.AppendLine($"Scale => {item.Scale}");
            }
            if (printMask?.Position ?? true)
            {
                fg.AppendLine($"Position => {item.Position}");
            }
            if (printMask?.Rotation ?? true)
            {
                fg.AppendLine($"Rotation => {item.Rotation}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendLine($"DATADataTypeState => {item.DATADataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            IPlacedCreatureGetter item,
            PlacedCreature.Mask<bool?> checkMask)
        {
            if (checkMask.Base.HasValue && checkMask.Base.Value != item.Base.HasBeenSet) return false;
            if (checkMask.Owner.HasValue && checkMask.Owner.Value != item.Owner.HasBeenSet) return false;
            if (checkMask.FactionRank.HasValue && checkMask.FactionRank.Value != (item.FactionRank != null)) return false;
            if (checkMask.GlobalVariable.HasValue && checkMask.GlobalVariable.Value != item.GlobalVariable.HasBeenSet) return false;
            if (checkMask.EnableParent?.Overall.HasValue ?? false && checkMask.EnableParent.Overall.Value != (item.EnableParent != null)) return false;
            if (checkMask.EnableParent?.Specific != null && (item.EnableParent == null || !item.EnableParent.HasBeenSet(checkMask.EnableParent.Specific))) return false;
            if (checkMask.RagdollData.HasValue && checkMask.RagdollData.Value != item.RagdollData_IsSet) return false;
            if (checkMask.Scale.HasValue && checkMask.Scale.Value != (item.Scale != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IPlacedCreatureGetter item,
            PlacedCreature.Mask<bool> mask)
        {
            mask.Base = item.Base.HasBeenSet;
            mask.Owner = item.Owner.HasBeenSet;
            mask.FactionRank = (item.FactionRank != null);
            mask.GlobalVariable = item.GlobalVariable.HasBeenSet;
            var itemEnableParent = item.EnableParent;
            mask.EnableParent = new MaskItem<bool, EnableParent.Mask<bool>?>(itemEnableParent != null, itemEnableParent?.GetHasBeenSetMask());
            mask.RagdollData = item.RagdollData_IsSet;
            mask.Scale = (item.Scale != null);
            mask.Position = true;
            mask.Rotation = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static PlacedCreature_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedCreature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (PlacedCreature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (PlacedCreature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (PlacedCreature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (PlacedCreature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PlacedCreature_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (PlacedCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedCreature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedCreatureGetter? lhs,
            IPlacedCreatureGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.Base.Equals(rhs.Base)) return false;
            if (!lhs.Owner.Equals(rhs.Owner)) return false;
            if (lhs.FactionRank != rhs.FactionRank) return false;
            if (!lhs.GlobalVariable.Equals(rhs.GlobalVariable)) return false;
            if (!object.Equals(lhs.EnableParent, rhs.EnableParent)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.RagdollData, rhs.RagdollData)) return false;
            if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            if (!lhs.Position.Equals(rhs.Position)) return false;
            if (!lhs.Rotation.Equals(rhs.Rotation)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedCreatureGetter?)lhs,
                rhs: rhs as IPlacedCreatureGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedCreatureGetter?)lhs,
                rhs: rhs as IPlacedCreatureGetter);
        }
        
        public virtual int GetHashCode(IPlacedCreatureGetter item)
        {
            int ret = 0;
            if (item.Base.TryGet(out var Baseitem))
            {
                ret = HashHelper.GetHashCode(Baseitem).CombineHashCode(ret);
            }
            if (item.Owner.TryGet(out var Owneritem))
            {
                ret = HashHelper.GetHashCode(Owneritem).CombineHashCode(ret);
            }
            if (item.FactionRank.TryGet(out var FactionRankitem))
            {
                ret = HashHelper.GetHashCode(FactionRankitem).CombineHashCode(ret);
            }
            if (item.GlobalVariable.TryGet(out var GlobalVariableitem))
            {
                ret = HashHelper.GetHashCode(GlobalVariableitem).CombineHashCode(ret);
            }
            if (item.EnableParent.TryGet(out var EnableParentitem))
            {
                ret = HashHelper.GetHashCode(EnableParentitem).CombineHashCode(ret);
            }
            if (item.RagdollData_IsSet)
            {
                ret = HashHelper.GetHashCode(item.RagdollData).CombineHashCode(ret);
            }
            if (item.Scale.TryGet(out var Scaleitem))
            {
                ret = HashHelper.GetHashCode(Scaleitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Position).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Rotation).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedCreatureGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedCreatureGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlacedCreature.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IPlacedCreatureGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Base;
            yield return obj.Owner;
            yield return obj.GlobalVariable;
            if (obj.EnableParent != null)
            {
                foreach (var item in obj.EnableParent.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        partial void PostDuplicate(PlacedCreature obj, PlacedCreature rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new PlacedCreature(getNextFormKey());
            ret.DeepCopyIn((PlacedCreature)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (PlacedCreature)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class PlacedCreatureSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly PlacedCreatureSetterTranslationCommon Instance = new PlacedCreatureSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IPlacedCreatureInternal item,
            IPlacedCreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IPlacedCreature item,
            IPlacedCreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Base) ?? true))
            {
                item.Base.SetToFormKey(rhs: rhs.Base);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Owner) ?? true))
            {
                item.Owner.SetToFormKey(rhs: rhs.Owner);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.FactionRank) ?? true))
            {
                item.FactionRank = rhs.FactionRank;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.GlobalVariable) ?? true))
            {
                item.GlobalVariable.SetToFormKey(rhs: rhs.GlobalVariable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.EnableParent) ?? true))
            {
                errorMask?.PushIndex((int)PlacedCreature_FieldIndex.EnableParent);
                try
                {
                    if(rhs.EnableParent.TryGet(out var rhsEnableParent))
                    {
                        item.EnableParent = rhsEnableParent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedCreature_FieldIndex.EnableParent));
                    }
                    else
                    {
                        item.EnableParent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.RagdollData) ?? true))
            {
                if(rhs.RagdollData_IsSet)
                {
                    item.RagdollData = rhs.RagdollData.ToArray();
                }
                else
                {
                    item.RagdollData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Position) ?? true))
            {
                item.Position = rhs.Position;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Rotation) ?? true))
            {
                item.Rotation = rhs.Rotation;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IPlacedCreatureInternal)item,
                rhs: (IPlacedCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IPlacedCreature)item,
                rhs: (IPlacedCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IPlacedCreatureInternal)item,
                rhs: (IPlacedCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IPlacedCreature)item,
                rhs: (IPlacedCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public PlacedCreature DeepCopy(
            IPlacedCreatureGetter item,
            PlacedCreature.TranslationMask? copyMask = null)
        {
            PlacedCreature ret = (PlacedCreature)((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public PlacedCreature DeepCopy(
            IPlacedCreatureGetter item,
            out PlacedCreature.ErrorMask errorMask,
            PlacedCreature.TranslationMask? copyMask = null)
        {
            PlacedCreature ret = (PlacedCreature)((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public PlacedCreature DeepCopy(
            IPlacedCreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedCreature ret = (PlacedCreature)((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class PlacedCreature
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedCreature_Registration.Instance;
        public new static PlacedCreature_Registration Registration => PlacedCreature_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedCreatureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlacedCreatureSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedCreatureSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PlacedCreatureXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static PlacedCreatureXmlWriteTranslation Instance = new PlacedCreatureXmlWriteTranslation();

        public static void WriteToNodeXml(
            IPlacedCreatureGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Base.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Base) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Base),
                    item: item.Base.FormKey,
                    fieldIndex: (int)PlacedCreature_FieldIndex.Base,
                    errorMask: errorMask);
            }
            if (item.Owner.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Owner) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Owner),
                    item: item.Owner.FormKey,
                    fieldIndex: (int)PlacedCreature_FieldIndex.Owner,
                    errorMask: errorMask);
            }
            if ((item.FactionRank != null)
                && (translationMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.FactionRank) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FactionRank),
                    item: item.FactionRank.Value,
                    fieldIndex: (int)PlacedCreature_FieldIndex.FactionRank,
                    errorMask: errorMask);
            }
            if (item.GlobalVariable.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.GlobalVariable) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.GlobalVariable),
                    item: item.GlobalVariable.FormKey,
                    fieldIndex: (int)PlacedCreature_FieldIndex.GlobalVariable,
                    errorMask: errorMask);
            }
            if ((item.EnableParent != null)
                && (translationMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.EnableParent) ?? true))
            {
                var loquiItem = item.EnableParent;
                ((EnableParentXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.EnableParent),
                    fieldIndex: (int)PlacedCreature_FieldIndex.EnableParent,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PlacedCreature_FieldIndex.EnableParent));
            }
            if (item.RagdollData_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.RagdollData) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RagdollData),
                    item: item.RagdollData,
                    fieldIndex: (int)PlacedCreature_FieldIndex.RagdollData,
                    errorMask: errorMask);
            }
            if ((item.Scale != null)
                && (translationMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Scale) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Scale),
                    item: item.Scale.Value,
                    fieldIndex: (int)PlacedCreature_FieldIndex.Scale,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(PlacedCreature.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Position) ?? true))
                {
                    P3FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Position),
                        item: item.Position,
                        fieldIndex: (int)PlacedCreature_FieldIndex.Position,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Rotation) ?? true))
                {
                    P3FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Rotation),
                        item: item.Rotation,
                        fieldIndex: (int)PlacedCreature_FieldIndex.Rotation,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<PlacedCreature.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)PlacedCreature_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IPlacedCreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.PlacedCreature");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.PlacedCreature");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPlacedCreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPlacedCreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPlacedCreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class PlacedCreatureXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static PlacedCreatureXmlCreateTranslation Instance = new PlacedCreatureXmlCreateTranslation();

        public static void FillPublicXml(
            IPlacedCreatureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PlacedCreatureXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IPlacedCreatureInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Base":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedCreature_FieldIndex.Base);
                        item.Base.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Owner":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedCreature_FieldIndex.Owner);
                        item.Owner.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FactionRank":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedCreature_FieldIndex.FactionRank);
                        item.FactionRank = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GlobalVariable":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedCreature_FieldIndex.GlobalVariable);
                        item.GlobalVariable.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnableParent":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedCreature_FieldIndex.EnableParent);
                        item.EnableParent = LoquiXmlTranslation<EnableParent>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedCreature_FieldIndex.EnableParent));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RagdollData":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedCreature_FieldIndex.RagdollData);
                        item.RagdollData = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Scale":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedCreature_FieldIndex.Scale);
                        item.Scale = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Position":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedCreature_FieldIndex.Position);
                        item.Position = P3FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= PlacedCreature.DATADataType.Has;
                    break;
                case "Rotation":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedCreature_FieldIndex.Rotation);
                        item.Rotation = P3FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedCreature_FieldIndex.DATADataTypeState);
                        item.DATADataTypeState = EnumXmlTranslation<PlacedCreature.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class PlacedCreatureXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IPlacedCreatureGetter item,
            XElement node,
            out PlacedCreature.ErrorMask errorMask,
            PlacedCreature.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedCreatureXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedCreature.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IPlacedCreatureGetter item,
            string path,
            out PlacedCreature.ErrorMask errorMask,
            PlacedCreature.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPlacedCreatureGetter item,
            Stream stream,
            out PlacedCreature.ErrorMask errorMask,
            PlacedCreature.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PlacedCreatureBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PlacedCreatureBinaryWriteTranslation Instance = new PlacedCreatureBinaryWriteTranslation();

        public static void Write_Embedded(
            IPlacedCreatureGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IPlacedCreatureGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Base,
                header: recordTypeConverter.ConvertToCustom(PlacedCreature_Registration.NAME_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Owner,
                header: recordTypeConverter.ConvertToCustom(PlacedCreature_Registration.XOWN_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FactionRank,
                header: recordTypeConverter.ConvertToCustom(PlacedCreature_Registration.XRNK_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GlobalVariable,
                header: recordTypeConverter.ConvertToCustom(PlacedCreature_Registration.XGLB_HEADER),
                masterReferences: masterReferences);
            {
                var loquiItem = item.EnableParent;
                if (loquiItem != null)
                {
                    ((EnableParentBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (item.RagdollData_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.RagdollData,
                    header: recordTypeConverter.ConvertToCustom(PlacedCreature_Registration.XRGD_HEADER));
            }
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Scale,
                header: recordTypeConverter.ConvertToCustom(PlacedCreature_Registration.XSCL_HEADER));
            if (item.DATADataTypeState.HasFlag(PlacedCreature.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(PlacedCreature_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Position);
                    Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Rotation);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IPlacedCreatureGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: PlacedCreature_Registration.ACRE_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IPlacedCreatureGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IPlacedCreatureGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IPlacedCreatureGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PlacedCreatureBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static PlacedCreatureBinaryCreateTranslation Instance = new PlacedCreatureBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class PlacedCreatureBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PlacedCreatureBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IPlacedCreatureGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedCreature_Registration.Instance;
        public new static PlacedCreature_Registration Registration => PlacedCreature_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedCreatureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedCreatureSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPlacedCreatureGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => PlacedCreatureCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => PlacedCreatureXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PlacedCreatureXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedCreatureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((PlacedCreatureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Base
        private int? _BaseLocation;
        public bool Base_IsSet => _BaseLocation.HasValue;
        public IFormSetLinkGetter<ICreatureGetter> Base => _BaseLocation.HasValue ? new FormSetLink<ICreatureGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _BaseLocation.Value, _package.Meta)))) : FormSetLink<ICreatureGetter>.Empty;
        #endregion
        #region Owner
        private int? _OwnerLocation;
        public bool Owner_IsSet => _OwnerLocation.HasValue;
        public IFormSetLinkGetter<IFactionGetter> Owner => _OwnerLocation.HasValue ? new FormSetLink<IFactionGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _OwnerLocation.Value, _package.Meta)))) : FormSetLink<IFactionGetter>.Empty;
        #endregion
        #region FactionRank
        private int? _FactionRankLocation;
        public Int32? FactionRank => _FactionRankLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _FactionRankLocation.Value, _package.Meta)) : default(Int32?);
        #endregion
        #region GlobalVariable
        private int? _GlobalVariableLocation;
        public bool GlobalVariable_IsSet => _GlobalVariableLocation.HasValue;
        public IFormSetLinkGetter<IGlobalGetter> GlobalVariable => _GlobalVariableLocation.HasValue ? new FormSetLink<IGlobalGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _GlobalVariableLocation.Value, _package.Meta)))) : FormSetLink<IGlobalGetter>.Empty;
        #endregion
        #region EnableParent
        private RangeInt32? _EnableParentLocation;
        private bool _EnableParent_IsSet => _EnableParentLocation.HasValue;
        public IEnableParentGetter? EnableParent => _EnableParent_IsSet ? EnableParentBinaryOverlay.EnableParentFactory(new BinaryMemoryReadStream(_data.Slice(_EnableParentLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool EnableParent_IsSet => _EnableParentLocation.HasValue;
        #endregion
        #region RagdollData
        private int? _RagdollDataLocation;
        public bool RagdollData_IsSet => _RagdollDataLocation.HasValue;
        public ReadOnlySpan<Byte> RagdollData => _RagdollDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _RagdollDataLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region Scale
        private int? _ScaleLocation;
        public Single? Scale => _ScaleLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordSpan(_data, _ScaleLocation.Value, _package.Meta)) : default(Single?);
        #endregion
        private int? _DATALocation;
        public PlacedCreature.DATADataType DATADataTypeState { get; private set; }
        #region Position
        private int _PositionLocation => _DATALocation!.Value + 0x0;
        private bool _Position_IsSet => _DATALocation.HasValue;
        public P3Float Position => _Position_IsSet ? P3FloatBinaryTranslation.Read(_data.Span.Slice(_PositionLocation, 12)) : default;
        #endregion
        #region Rotation
        private int _RotationLocation => _DATALocation!.Value + 0xC;
        private bool _Rotation_IsSet => _DATALocation.HasValue;
        public P3Float Rotation => _Rotation_IsSet ? P3FloatBinaryTranslation.Read(_data.Span.Slice(_RotationLocation, 12)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected PlacedCreatureBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static PlacedCreatureBinaryOverlay PlacedCreatureFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new PlacedCreatureBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x454D414E: // NAME
                {
                    _BaseLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedCreature_FieldIndex.Base);
                }
                case 0x4E574F58: // XOWN
                {
                    _OwnerLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedCreature_FieldIndex.Owner);
                }
                case 0x4B4E5258: // XRNK
                {
                    _FactionRankLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedCreature_FieldIndex.FactionRank);
                }
                case 0x424C4758: // XGLB
                {
                    _GlobalVariableLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedCreature_FieldIndex.GlobalVariable);
                }
                case 0x50534558: // XESP
                {
                    _EnableParentLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)PlacedCreature_FieldIndex.EnableParent);
                }
                case 0x44475258: // XRGD
                {
                    _RagdollDataLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedCreature_FieldIndex.RagdollData);
                }
                case 0x4C435358: // XSCL
                {
                    _ScaleLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedCreature_FieldIndex.Scale);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = PlacedCreature.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)PlacedCreature_FieldIndex.Rotation);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

