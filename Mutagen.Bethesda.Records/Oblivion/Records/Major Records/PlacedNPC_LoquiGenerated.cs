/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PlacedNPC :
        OblivionMajorRecord,
        IPlacedNPCInternal,
        ILoquiObjectSetter<PlacedNPC>,
        IEquatable<PlacedNPC>,
        IEqualsMask
    {
        #region Ctor
        protected PlacedNPC()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Base
        public bool Base_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Base];
            set => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Base] = value;
        }
        bool IPlacedNPCGetter.Base_IsSet => Base_IsSet;
        private IFormIDSetLink<NPC> _Base;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IFormIDSetLink<NPC> Base
        {
            get => this._Base;
            set => Base_Set(value);
        }
        IFormIDSetLinkGetter<INPCGetter> IPlacedNPCGetter.Base => this.Base;
        public void Base_Set(
            IFormIDSetLink<NPC> value,
            bool markSet = true)
        {
            _Base = value;
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Base] = markSet;
        }
        public void Base_Unset()
        {
            this.Base_Set(default(IFormIDSetLink<NPC>), false);
        }
        #endregion
        #region XPCIFluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool XPCIFluff_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.XPCIFluff];
            set => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.XPCIFluff] = value;
        }
        bool IPlacedNPCGetter.XPCIFluff_IsSet => XPCIFluff_IsSet;
        protected Byte[] _XPCIFluff;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] XPCIFluff
        {
            get => this._XPCIFluff;
            set => XPCIFluff_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IPlacedNPCGetter.XPCIFluff => this.XPCIFluff;
        public void XPCIFluff_Set(
            Byte[] value,
            bool markSet = true)
        {
            _XPCIFluff = value;
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.XPCIFluff] = markSet;
        }
        public void XPCIFluff_Unset()
        {
            this.XPCIFluff_Set(default(Byte[]), false);
        }
        #endregion
        #region FULLFluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool FULLFluff_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.FULLFluff];
            set => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.FULLFluff] = value;
        }
        bool IPlacedNPCGetter.FULLFluff_IsSet => FULLFluff_IsSet;
        protected Byte[] _FULLFluff;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] FULLFluff
        {
            get => this._FULLFluff;
            set => FULLFluff_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IPlacedNPCGetter.FULLFluff => this.FULLFluff;
        public void FULLFluff_Set(
            Byte[] value,
            bool markSet = true)
        {
            _FULLFluff = value;
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.FULLFluff] = markSet;
        }
        public void FULLFluff_Unset()
        {
            this.FULLFluff_Set(default(Byte[]), false);
        }
        #endregion
        #region DistantLODData
        public bool DistantLODData_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.DistantLODData];
            set => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.DistantLODData] = value;
        }
        bool IPlacedNPCGetter.DistantLODData_IsSet => DistantLODData_IsSet;
        private DistantLODData _DistantLODData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public DistantLODData DistantLODData
        {
            get => _DistantLODData;
            set => DistantLODData_Set(value);
        }
        public void DistantLODData_Set(
            DistantLODData value,
            bool hasBeenSet = true)
        {
            _DistantLODData = value;
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.DistantLODData] = hasBeenSet;
        }
        public void DistantLODData_Unset()
        {
            this.DistantLODData_Set(default(DistantLODData), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDistantLODDataGetter IPlacedNPCGetter.DistantLODData => this.DistantLODData;
        #endregion
        #region EnableParent
        public bool EnableParent_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.EnableParent];
            set => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.EnableParent] = value;
        }
        bool IPlacedNPCGetter.EnableParent_IsSet => EnableParent_IsSet;
        private EnableParent _EnableParent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public EnableParent EnableParent
        {
            get => _EnableParent;
            set => EnableParent_Set(value);
        }
        public void EnableParent_Set(
            EnableParent value,
            bool hasBeenSet = true)
        {
            _EnableParent = value;
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.EnableParent] = hasBeenSet;
        }
        public void EnableParent_Unset()
        {
            this.EnableParent_Set(default(EnableParent), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnableParentGetter IPlacedNPCGetter.EnableParent => this.EnableParent;
        #endregion
        #region MerchantContainer
        public bool MerchantContainer_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.MerchantContainer];
            set => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.MerchantContainer] = value;
        }
        bool IPlacedNPCGetter.MerchantContainer_IsSet => MerchantContainer_IsSet;
        private IFormIDSetLink<PlacedObject> _MerchantContainer;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IFormIDSetLink<PlacedObject> MerchantContainer
        {
            get => this._MerchantContainer;
            set => MerchantContainer_Set(value);
        }
        IFormIDSetLinkGetter<IPlacedObjectGetter> IPlacedNPCGetter.MerchantContainer => this.MerchantContainer;
        public void MerchantContainer_Set(
            IFormIDSetLink<PlacedObject> value,
            bool markSet = true)
        {
            _MerchantContainer = value;
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.MerchantContainer] = markSet;
        }
        public void MerchantContainer_Unset()
        {
            this.MerchantContainer_Set(default(IFormIDSetLink<PlacedObject>), false);
        }
        #endregion
        #region Horse
        public bool Horse_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Horse];
            set => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Horse] = value;
        }
        bool IPlacedNPCGetter.Horse_IsSet => Horse_IsSet;
        private IFormIDSetLink<PlacedCreature> _Horse;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IFormIDSetLink<PlacedCreature> Horse
        {
            get => this._Horse;
            set => Horse_Set(value);
        }
        IFormIDSetLinkGetter<IPlacedCreatureGetter> IPlacedNPCGetter.Horse => this.Horse;
        public void Horse_Set(
            IFormIDSetLink<PlacedCreature> value,
            bool markSet = true)
        {
            _Horse = value;
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Horse] = markSet;
        }
        public void Horse_Unset()
        {
            this.Horse_Set(default(IFormIDSetLink<PlacedCreature>), false);
        }
        #endregion
        #region RagdollData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool RagdollData_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.RagdollData];
            set => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.RagdollData] = value;
        }
        bool IPlacedNPCGetter.RagdollData_IsSet => RagdollData_IsSet;
        protected Byte[] _RagdollData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] RagdollData
        {
            get => this._RagdollData;
            set => RagdollData_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IPlacedNPCGetter.RagdollData => this.RagdollData;
        public void RagdollData_Set(
            Byte[] value,
            bool markSet = true)
        {
            _RagdollData = value;
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.RagdollData] = markSet;
        }
        public void RagdollData_Unset()
        {
            this.RagdollData_Set(default(Byte[]), false);
        }
        #endregion
        #region Scale
        public bool Scale_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Scale];
            set => _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Scale] = value;
        }
        bool IPlacedNPCGetter.Scale_IsSet => Scale_IsSet;
        private Single _Scale;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Scale
        {
            get => this._Scale;
            set => Scale_Set(value);
        }
        Single IPlacedNPCGetter.Scale => this.Scale;
        public void Scale_Set(
            Single value,
            bool markSet = true)
        {
            _Scale = value;
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Scale] = markSet;
        }
        public void Scale_Unset()
        {
            this.Scale_Set(default(Single), false);
        }
        #endregion
        #region Position
        private P3Float _Position;
        public P3Float Position
        {
            get => this._Position;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Position = value;
            }
        }
        #endregion
        #region Rotation
        private P3Float _Rotation;
        public P3Float Rotation
        {
            get => this._Rotation;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Rotation = value;
            }
        }
        #endregion
        #region DATADataTypeState
        public PlacedNPC.DATADataType DATADataTypeState { get; set; }
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            PlacedNPCMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IPlacedNPCGetter rhs)) return false;
            return ((PlacedNPCCommon)((IPlacedNPCGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(PlacedNPC obj)
        {
            return ((PlacedNPCCommon)((IPlacedNPCGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((PlacedNPCCommon)((IPlacedNPCGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => PlacedNPCXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((PlacedNPCXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static PlacedNPC CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            PlacedNPC_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PlacedNPC CreateFromXml(
            XElement node,
            out PlacedNPC_ErrorMask errorMask,
            bool doMasks = true,
            PlacedNPC_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static PlacedNPC CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new PlacedNPC() : null;
                    break;
                default:
                    break;
            }
            var ret = new PlacedNPC();
            ((PlacedNPCSetterCommon)((IPlacedNPCGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static PlacedNPC CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            PlacedNPC_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static PlacedNPC CreateFromXml(
            string path,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PlacedNPC CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            PlacedNPC_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static PlacedNPC CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            PlacedNPC_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static PlacedNPC CreateFromXml(
            Stream stream,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PlacedNPC CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            PlacedNPC_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.Base:
                case PlacedNPC_FieldIndex.XPCIFluff:
                case PlacedNPC_FieldIndex.FULLFluff:
                case PlacedNPC_FieldIndex.DistantLODData:
                case PlacedNPC_FieldIndex.EnableParent:
                case PlacedNPC_FieldIndex.MerchantContainer:
                case PlacedNPC_FieldIndex.Horse:
                case PlacedNPC_FieldIndex.RagdollData:
                case PlacedNPC_FieldIndex.Scale:
                    return _hasBeenSetTracker[index];
                case PlacedNPC_FieldIndex.Position:
                case PlacedNPC_FieldIndex.Rotation:
                case PlacedNPC_FieldIndex.DATADataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = PlacedNPC_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public override IEnumerable<ILinkGetter> Links => PlacedNPCCommon.Instance.GetLinks(this);
        public PlacedNPC(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public PlacedNPC(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => PlacedNPCBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((PlacedNPCBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static PlacedNPC CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static PlacedNPC CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out PlacedNPC_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static PlacedNPC CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new PlacedNPC();
            ((PlacedNPCSetterCommon)((IPlacedNPCGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPlacedNPCGetter)rhs, include);

        void IClearable.Clear()
        {
            ((PlacedNPCSetterCommon)((IPlacedNPCGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static PlacedNPC GetNew()
        {
            return new PlacedNPC();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedNPC :
        IPlacedNPCGetter,
        IOblivionMajorRecord,
        IPlaced,
        ILoquiObjectSetter<IPlacedNPCInternal>
    {
        new IFormIDSetLink<NPC> Base { get; set; }
        new bool Base_IsSet { get; set; }
        void Base_Set(IFormIDSetLink<NPC> value, bool hasBeenSet = true);
        void Base_Unset();

        new Byte[] XPCIFluff { get; set; }
        new bool XPCIFluff_IsSet { get; set; }
        void XPCIFluff_Set(Byte[] value, bool hasBeenSet = true);
        void XPCIFluff_Unset();

        new Byte[] FULLFluff { get; set; }
        new bool FULLFluff_IsSet { get; set; }
        void FULLFluff_Set(Byte[] value, bool hasBeenSet = true);
        void FULLFluff_Unset();

        new DistantLODData DistantLODData { get; set; }
        new bool DistantLODData_IsSet { get; set; }
        void DistantLODData_Set(DistantLODData value, bool hasBeenSet = true);
        void DistantLODData_Unset();

        new EnableParent EnableParent { get; set; }
        new bool EnableParent_IsSet { get; set; }
        void EnableParent_Set(EnableParent value, bool hasBeenSet = true);
        void EnableParent_Unset();

        new IFormIDSetLink<PlacedObject> MerchantContainer { get; set; }
        new bool MerchantContainer_IsSet { get; set; }
        void MerchantContainer_Set(IFormIDSetLink<PlacedObject> value, bool hasBeenSet = true);
        void MerchantContainer_Unset();

        new IFormIDSetLink<PlacedCreature> Horse { get; set; }
        new bool Horse_IsSet { get; set; }
        void Horse_Set(IFormIDSetLink<PlacedCreature> value, bool hasBeenSet = true);
        void Horse_Unset();

        new Byte[] RagdollData { get; set; }
        new bool RagdollData_IsSet { get; set; }
        void RagdollData_Set(Byte[] value, bool hasBeenSet = true);
        void RagdollData_Unset();

        new Single Scale { get; set; }
        new bool Scale_IsSet { get; set; }
        void Scale_Set(Single value, bool hasBeenSet = true);
        void Scale_Unset();

        new P3Float Position { get; set; }

        new P3Float Rotation { get; set; }

        new PlacedNPC.DATADataType DATADataTypeState { get; set; }

    }

    public partial interface IPlacedNPCInternal :
        IOblivionMajorRecordInternal,
        IPlacedNPC,
        IPlacedNPCGetter
    {
    }

    public partial interface IPlacedNPCGetter :
        IOblivionMajorRecordGetter,
        IPlacedGetter,
        ILoquiObject<IPlacedNPCGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        #region Base
        IFormIDSetLinkGetter<INPCGetter> Base { get; }
        bool Base_IsSet { get; }

        #endregion
        #region XPCIFluff
        ReadOnlySpan<Byte> XPCIFluff { get; }
        bool XPCIFluff_IsSet { get; }

        #endregion
        #region FULLFluff
        ReadOnlySpan<Byte> FULLFluff { get; }
        bool FULLFluff_IsSet { get; }

        #endregion
        #region DistantLODData
        IDistantLODDataGetter DistantLODData { get; }
        bool DistantLODData_IsSet { get; }

        #endregion
        #region EnableParent
        IEnableParentGetter EnableParent { get; }
        bool EnableParent_IsSet { get; }

        #endregion
        #region MerchantContainer
        IFormIDSetLinkGetter<IPlacedObjectGetter> MerchantContainer { get; }
        bool MerchantContainer_IsSet { get; }

        #endregion
        #region Horse
        IFormIDSetLinkGetter<IPlacedCreatureGetter> Horse { get; }
        bool Horse_IsSet { get; }

        #endregion
        #region RagdollData
        ReadOnlySpan<Byte> RagdollData { get; }
        bool RagdollData_IsSet { get; }

        #endregion
        #region Scale
        Single Scale { get; }
        bool Scale_IsSet { get; }

        #endregion
        #region Position
        P3Float Position { get; }

        #endregion
        #region Rotation
        P3Float Rotation { get; }

        #endregion
        #region DATADataTypeState
        PlacedNPC.DATADataType DATADataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class PlacedNPCMixIn
    {
        public static void Clear(this IPlacedNPCInternal item)
        {
            ((PlacedNPCSetterCommon)((IPlacedNPCGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static PlacedNPC_Mask<bool> GetEqualsMask(
            this IPlacedNPCGetter item,
            IPlacedNPCGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedNPCCommon)((IPlacedNPCGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPlacedNPCGetter item,
            string name = null,
            PlacedNPC_Mask<bool> printMask = null)
        {
            return ((PlacedNPCCommon)((IPlacedNPCGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPlacedNPCGetter item,
            FileGeneration fg,
            string name = null,
            PlacedNPC_Mask<bool> printMask = null)
        {
            ((PlacedNPCCommon)((IPlacedNPCGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IPlacedNPCGetter item,
            PlacedNPC_Mask<bool?> checkMask)
        {
            return ((PlacedNPCCommon)((IPlacedNPCGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static PlacedNPC_Mask<bool> GetHasBeenSetMask(this IPlacedNPCGetter item)
        {
            var ret = new PlacedNPC_Mask<bool>();
            ((PlacedNPCCommon)((IPlacedNPCGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IPlacedNPCGetter item,
            IPlacedNPCGetter rhs)
        {
            return ((PlacedNPCCommon)((IPlacedNPCGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IPlacedNPCInternal lhs,
            IPlacedNPCGetter rhs,
            PlacedNPC_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IPlacedNPCInternal lhs,
            IPlacedNPCGetter rhs,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((PlacedNPCSetterTranslationCommon)((IPlacedNPCGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IPlacedNPCInternal lhs,
            IPlacedNPCGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((PlacedNPCSetterTranslationCommon)((IPlacedNPCGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static PlacedNPC DeepCopy(
            this IPlacedNPCGetter item,
            PlacedNPC_TranslationMask copyMask = null)
        {
            return ((PlacedNPCSetterTranslationCommon)((IPlacedNPCGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedNPC DeepCopy(
            this IPlacedNPCGetter item,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask copyMask = null)
        {
            return ((PlacedNPCSetterTranslationCommon)((IPlacedNPCGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedNPC DeepCopy(
            this IPlacedNPCGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((PlacedNPCSetterTranslationCommon)((IPlacedNPCGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPlacedNPCInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            PlacedNPC_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPlacedNPCInternal item,
            XElement node,
            out PlacedNPC_ErrorMask errorMask,
            bool doMasks = true,
            PlacedNPC_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromXml(
            this IPlacedNPCInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((PlacedNPCSetterCommon)((IPlacedNPCGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedNPCInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            PlacedNPC_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedNPCInternal item,
            string path,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedNPCInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            PlacedNPC_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IPlacedNPCInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            PlacedNPC_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedNPCInternal item,
            Stream stream,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedNPCInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            PlacedNPC_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IPlacedNPCInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IPlacedNPCInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out PlacedNPC_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromBinary(
            this IPlacedNPCInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((PlacedNPCSetterCommon)((IPlacedNPCGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum PlacedNPC_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Base = 5,
        XPCIFluff = 6,
        FULLFluff = 7,
        DistantLODData = 8,
        EnableParent = 9,
        MerchantContainer = 10,
        Horse = 11,
        RagdollData = 12,
        Scale = 13,
        Position = 14,
        Rotation = 15,
        DATADataTypeState = 16,
    }
    #endregion

    #region Registration
    public class PlacedNPC_Registration : ILoquiRegistration
    {
        public static readonly PlacedNPC_Registration Instance = new PlacedNPC_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 137,
            version: 0);

        public const string GUID = "1bd10cd8-4d9b-4cc0-9639-51f02a1b2e36";

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 17;

        public static readonly Type MaskType = typeof(PlacedNPC_Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedNPC_ErrorMask);

        public static readonly Type ClassType = typeof(PlacedNPC);

        public static readonly Type GetterType = typeof(IPlacedNPCGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedNPC);

        public static readonly Type InternalSetterType = typeof(IPlacedNPCInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PlacedNPC";

        public const string Name = "PlacedNPC";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BASE":
                    return (ushort)PlacedNPC_FieldIndex.Base;
                case "XPCIFLUFF":
                    return (ushort)PlacedNPC_FieldIndex.XPCIFluff;
                case "FULLFLUFF":
                    return (ushort)PlacedNPC_FieldIndex.FULLFluff;
                case "DISTANTLODDATA":
                    return (ushort)PlacedNPC_FieldIndex.DistantLODData;
                case "ENABLEPARENT":
                    return (ushort)PlacedNPC_FieldIndex.EnableParent;
                case "MERCHANTCONTAINER":
                    return (ushort)PlacedNPC_FieldIndex.MerchantContainer;
                case "HORSE":
                    return (ushort)PlacedNPC_FieldIndex.Horse;
                case "RAGDOLLDATA":
                    return (ushort)PlacedNPC_FieldIndex.RagdollData;
                case "SCALE":
                    return (ushort)PlacedNPC_FieldIndex.Scale;
                case "POSITION":
                    return (ushort)PlacedNPC_FieldIndex.Position;
                case "ROTATION":
                    return (ushort)PlacedNPC_FieldIndex.Rotation;
                case "DATADATATYPESTATE":
                    return (ushort)PlacedNPC_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                case PlacedNPC_FieldIndex.XPCIFluff:
                case PlacedNPC_FieldIndex.FULLFluff:
                case PlacedNPC_FieldIndex.DistantLODData:
                case PlacedNPC_FieldIndex.EnableParent:
                case PlacedNPC_FieldIndex.MerchantContainer:
                case PlacedNPC_FieldIndex.Horse:
                case PlacedNPC_FieldIndex.RagdollData:
                case PlacedNPC_FieldIndex.Scale:
                case PlacedNPC_FieldIndex.Position:
                case PlacedNPC_FieldIndex.Rotation:
                case PlacedNPC_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.DistantLODData:
                case PlacedNPC_FieldIndex.EnableParent:
                    return true;
                case PlacedNPC_FieldIndex.Base:
                case PlacedNPC_FieldIndex.XPCIFluff:
                case PlacedNPC_FieldIndex.FULLFluff:
                case PlacedNPC_FieldIndex.MerchantContainer:
                case PlacedNPC_FieldIndex.Horse:
                case PlacedNPC_FieldIndex.RagdollData:
                case PlacedNPC_FieldIndex.Scale:
                case PlacedNPC_FieldIndex.Position:
                case PlacedNPC_FieldIndex.Rotation:
                case PlacedNPC_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                case PlacedNPC_FieldIndex.XPCIFluff:
                case PlacedNPC_FieldIndex.FULLFluff:
                case PlacedNPC_FieldIndex.DistantLODData:
                case PlacedNPC_FieldIndex.EnableParent:
                case PlacedNPC_FieldIndex.MerchantContainer:
                case PlacedNPC_FieldIndex.Horse:
                case PlacedNPC_FieldIndex.RagdollData:
                case PlacedNPC_FieldIndex.Scale:
                case PlacedNPC_FieldIndex.Position:
                case PlacedNPC_FieldIndex.Rotation:
                case PlacedNPC_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                    return "Base";
                case PlacedNPC_FieldIndex.XPCIFluff:
                    return "XPCIFluff";
                case PlacedNPC_FieldIndex.FULLFluff:
                    return "FULLFluff";
                case PlacedNPC_FieldIndex.DistantLODData:
                    return "DistantLODData";
                case PlacedNPC_FieldIndex.EnableParent:
                    return "EnableParent";
                case PlacedNPC_FieldIndex.MerchantContainer:
                    return "MerchantContainer";
                case PlacedNPC_FieldIndex.Horse:
                    return "Horse";
                case PlacedNPC_FieldIndex.RagdollData:
                    return "RagdollData";
                case PlacedNPC_FieldIndex.Scale:
                    return "Scale";
                case PlacedNPC_FieldIndex.Position:
                    return "Position";
                case PlacedNPC_FieldIndex.Rotation:
                    return "Rotation";
                case PlacedNPC_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                case PlacedNPC_FieldIndex.XPCIFluff:
                case PlacedNPC_FieldIndex.FULLFluff:
                case PlacedNPC_FieldIndex.DistantLODData:
                case PlacedNPC_FieldIndex.EnableParent:
                case PlacedNPC_FieldIndex.MerchantContainer:
                case PlacedNPC_FieldIndex.Horse:
                case PlacedNPC_FieldIndex.RagdollData:
                case PlacedNPC_FieldIndex.Scale:
                case PlacedNPC_FieldIndex.Position:
                case PlacedNPC_FieldIndex.Rotation:
                case PlacedNPC_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                case PlacedNPC_FieldIndex.XPCIFluff:
                case PlacedNPC_FieldIndex.FULLFluff:
                case PlacedNPC_FieldIndex.DistantLODData:
                case PlacedNPC_FieldIndex.EnableParent:
                case PlacedNPC_FieldIndex.MerchantContainer:
                case PlacedNPC_FieldIndex.Horse:
                case PlacedNPC_FieldIndex.RagdollData:
                case PlacedNPC_FieldIndex.Scale:
                case PlacedNPC_FieldIndex.Position:
                case PlacedNPC_FieldIndex.Rotation:
                case PlacedNPC_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                    return typeof(IFormIDSetLink<NPC>);
                case PlacedNPC_FieldIndex.XPCIFluff:
                    return typeof(Byte[]);
                case PlacedNPC_FieldIndex.FULLFluff:
                    return typeof(Byte[]);
                case PlacedNPC_FieldIndex.DistantLODData:
                    return typeof(DistantLODData);
                case PlacedNPC_FieldIndex.EnableParent:
                    return typeof(EnableParent);
                case PlacedNPC_FieldIndex.MerchantContainer:
                    return typeof(IFormIDSetLink<PlacedObject>);
                case PlacedNPC_FieldIndex.Horse:
                    return typeof(IFormIDSetLink<PlacedCreature>);
                case PlacedNPC_FieldIndex.RagdollData:
                    return typeof(Byte[]);
                case PlacedNPC_FieldIndex.Scale:
                    return typeof(Single);
                case PlacedNPC_FieldIndex.Position:
                    return typeof(P3Float);
                case PlacedNPC_FieldIndex.Rotation:
                    return typeof(P3Float);
                case PlacedNPC_FieldIndex.DATADataTypeState:
                    return typeof(PlacedNPC.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(PlacedNPCXmlWriteTranslation);
        public static readonly RecordType ACHR_HEADER = new RecordType("ACHR");
        public static readonly RecordType NAME_HEADER = new RecordType("NAME");
        public static readonly RecordType XPCI_HEADER = new RecordType("XPCI");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType XLOD_HEADER = new RecordType("XLOD");
        public static readonly RecordType XESP_HEADER = new RecordType("XESP");
        public static readonly RecordType XMRC_HEADER = new RecordType("XMRC");
        public static readonly RecordType XHRS_HEADER = new RecordType("XHRS");
        public static readonly RecordType XRGD_HEADER = new RecordType("XRGD");
        public static readonly RecordType XSCL_HEADER = new RecordType("XSCL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ACHR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 9;
        public static readonly Type BinaryWriteTranslation = typeof(PlacedNPCBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PlacedNPCSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly PlacedNPCSetterCommon Instance = new PlacedNPCSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedNPCInternal item)
        {
            ClearPartial();
            item.Base.Unset();
            item.XPCIFluff_Unset();
            item.FULLFluff_Unset();
            item.DistantLODData_Unset();
            item.EnableParent_Unset();
            item.MerchantContainer.Unset();
            item.Horse.Unset();
            item.RagdollData_Unset();
            item.Scale_Unset();
            item.Position = default(P3Float);
            item.Rotation = default(P3Float);
            item.DATADataTypeState = default(PlacedNPC.DATADataType);
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IPlacedNPCInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedNPCInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IPlacedNPCInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= PlacedNPC.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public new void CopyInFromXml(
            IPlacedNPCInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    PlacedNPCXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => PlacedNPC_Registration.ACHR_HEADER;
        protected static void FillBinaryStructs(
            IPlacedNPCInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IPlacedNPCInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x454D414E: // NAME
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: out IFormIDSetLink<NPC> BaseParse))
                    {
                        item.Base = BaseParse;
                    }
                    else
                    {
                        item.Base = default(IFormIDSetLink<NPC>);
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.Base);
                }
                case 0x49435058: // XPCI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] XPCIFluffParse))
                    {
                        item.XPCIFluff = XPCIFluffParse;
                    }
                    else
                    {
                        item.XPCIFluff = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.XPCIFluff);
                }
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] FULLFluffParse))
                    {
                        item.FULLFluff = FULLFluffParse;
                    }
                    else
                    {
                        item.FULLFluff = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.FULLFluff);
                }
                case 0x444F4C58: // XLOD
                {
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.DistantLODData);
                        item.DistantLODData = Mutagen.Bethesda.Oblivion.DistantLODData.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.DistantLODData);
                }
                case 0x50534558: // XESP
                {
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.EnableParent);
                        item.EnableParent = Mutagen.Bethesda.Oblivion.EnableParent.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.EnableParent);
                }
                case 0x43524D58: // XMRC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: out IFormIDSetLink<PlacedObject> MerchantContainerParse))
                    {
                        item.MerchantContainer = MerchantContainerParse;
                    }
                    else
                    {
                        item.MerchantContainer = default(IFormIDSetLink<PlacedObject>);
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.MerchantContainer);
                }
                case 0x53524858: // XHRS
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: out IFormIDSetLink<PlacedCreature> HorseParse))
                    {
                        item.Horse = HorseParse;
                    }
                    else
                    {
                        item.Horse = default(IFormIDSetLink<PlacedCreature>);
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.Horse);
                }
                case 0x44475258: // XRGD
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] RagdollDataParse))
                    {
                        item.RagdollData = RagdollDataParse;
                    }
                    else
                    {
                        item.RagdollData = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.RagdollData);
                }
                case 0x4C435358: // XSCL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Single ScaleParse))
                    {
                        item.Scale = ScaleParse;
                    }
                    else
                    {
                        item.Scale = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.Scale);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = PlacedNPC.DATADataType.Has;
                    }
                    if (Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out P3Float PositionParse))
                    {
                        item.Position = PositionParse;
                    }
                    else
                    {
                        item.Position = default(P3Float);
                    }
                    if (Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out P3Float RotationParse))
                    {
                        item.Rotation = RotationParse;
                    }
                    else
                    {
                        item.Rotation = default(P3Float);
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.Rotation);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }
        
        public new void CopyInFromBinary(
            IPlacedNPCInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.MajorRecordParse<IPlacedNPCInternal>(
                record: item,
                frame: frame,
                errorMask: errorMask,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class PlacedNPCCommon : OblivionMajorRecordCommon
    {
        public new static readonly PlacedNPCCommon Instance = new PlacedNPCCommon();

        public PlacedNPC_Mask<bool> GetEqualsMask(
            IPlacedNPCGetter item,
            IPlacedNPCGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedNPC_Mask<bool>();
            ((PlacedNPCCommon)((IPlacedNPCGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedNPCGetter item,
            IPlacedNPCGetter rhs,
            PlacedNPC_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Base = object.Equals(item.Base, rhs.Base);
            ret.XPCIFluff = item.XPCIFluff_IsSet == rhs.XPCIFluff_IsSet && MemoryExtensions.SequenceEqual(item.XPCIFluff, rhs.XPCIFluff);
            ret.FULLFluff = item.FULLFluff_IsSet == rhs.FULLFluff_IsSet && MemoryExtensions.SequenceEqual(item.FULLFluff, rhs.FULLFluff);
            ret.DistantLODData = EqualsMaskHelper.EqualsHelper(
                item.DistantLODData_IsSet,
                rhs.DistantLODData_IsSet,
                item.DistantLODData,
                rhs.DistantLODData,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.EnableParent = EqualsMaskHelper.EqualsHelper(
                item.EnableParent_IsSet,
                rhs.EnableParent_IsSet,
                item.EnableParent,
                rhs.EnableParent,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.MerchantContainer = object.Equals(item.MerchantContainer, rhs.MerchantContainer);
            ret.Horse = object.Equals(item.Horse, rhs.Horse);
            ret.RagdollData = item.RagdollData_IsSet == rhs.RagdollData_IsSet && MemoryExtensions.SequenceEqual(item.RagdollData, rhs.RagdollData);
            ret.Scale = item.Scale_IsSet == rhs.Scale_IsSet && item.Scale.EqualsWithin(rhs.Scale);
            ret.Position = item.Position.Equals(rhs.Position);
            ret.Rotation = item.Rotation.Equals(rhs.Rotation);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPlacedNPCGetter item,
            string name = null,
            PlacedNPC_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPlacedNPCGetter item,
            FileGeneration fg,
            string name = null,
            PlacedNPC_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PlacedNPC =>");
            }
            else
            {
                fg.AppendLine($"{name} (PlacedNPC) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPlacedNPCGetter item,
            FileGeneration fg,
            PlacedNPC_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Base ?? true)
            {
                fg.AppendLine($"Base => {item.Base}");
            }
            if (printMask?.XPCIFluff ?? true)
            {
                fg.AppendLine($"XPCIFluff => {SpanExt.ToHexString(item.XPCIFluff)}");
            }
            if (printMask?.FULLFluff ?? true)
            {
                fg.AppendLine($"FULLFluff => {SpanExt.ToHexString(item.FULLFluff)}");
            }
            if (printMask?.DistantLODData?.Overall ?? true)
            {
                item.DistantLODData?.ToString(fg, "DistantLODData");
            }
            if (printMask?.EnableParent?.Overall ?? true)
            {
                item.EnableParent?.ToString(fg, "EnableParent");
            }
            if (printMask?.MerchantContainer ?? true)
            {
                fg.AppendLine($"MerchantContainer => {item.MerchantContainer}");
            }
            if (printMask?.Horse ?? true)
            {
                fg.AppendLine($"Horse => {item.Horse}");
            }
            if (printMask?.RagdollData ?? true)
            {
                fg.AppendLine($"RagdollData => {SpanExt.ToHexString(item.RagdollData)}");
            }
            if (printMask?.Scale ?? true)
            {
                fg.AppendLine($"Scale => {item.Scale}");
            }
            if (printMask?.Position ?? true)
            {
                fg.AppendLine($"Position => {item.Position}");
            }
            if (printMask?.Rotation ?? true)
            {
                fg.AppendLine($"Rotation => {item.Rotation}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendLine($"DATADataTypeState => {item.DATADataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            IPlacedNPCGetter item,
            PlacedNPC_Mask<bool?> checkMask)
        {
            if (checkMask.Base.HasValue && checkMask.Base.Value != item.Base_IsSet) return false;
            if (checkMask.XPCIFluff.HasValue && checkMask.XPCIFluff.Value != item.XPCIFluff_IsSet) return false;
            if (checkMask.FULLFluff.HasValue && checkMask.FULLFluff.Value != item.FULLFluff_IsSet) return false;
            if (checkMask.DistantLODData.Overall.HasValue && checkMask.DistantLODData.Overall.Value != item.DistantLODData_IsSet) return false;
            if (checkMask.DistantLODData.Specific != null && (item.DistantLODData == null || !item.DistantLODData.HasBeenSet(checkMask.DistantLODData.Specific))) return false;
            if (checkMask.EnableParent.Overall.HasValue && checkMask.EnableParent.Overall.Value != item.EnableParent_IsSet) return false;
            if (checkMask.EnableParent.Specific != null && (item.EnableParent == null || !item.EnableParent.HasBeenSet(checkMask.EnableParent.Specific))) return false;
            if (checkMask.MerchantContainer.HasValue && checkMask.MerchantContainer.Value != item.MerchantContainer_IsSet) return false;
            if (checkMask.Horse.HasValue && checkMask.Horse.Value != item.Horse_IsSet) return false;
            if (checkMask.RagdollData.HasValue && checkMask.RagdollData.Value != item.RagdollData_IsSet) return false;
            if (checkMask.Scale.HasValue && checkMask.Scale.Value != item.Scale_IsSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IPlacedNPCGetter item,
            PlacedNPC_Mask<bool> mask)
        {
            mask.Base = item.Base_IsSet;
            mask.XPCIFluff = item.XPCIFluff_IsSet;
            mask.FULLFluff = item.FULLFluff_IsSet;
            mask.DistantLODData = new MaskItem<bool, DistantLODData_Mask<bool>>(item.DistantLODData_IsSet, item.DistantLODData.GetHasBeenSetMask());
            mask.EnableParent = new MaskItem<bool, EnableParent_Mask<bool>>(item.EnableParent_IsSet, item.EnableParent.GetHasBeenSetMask());
            mask.MerchantContainer = item.MerchantContainer_IsSet;
            mask.Horse = item.Horse_IsSet;
            mask.RagdollData = item.RagdollData_IsSet;
            mask.Scale = item.Scale_IsSet;
            mask.Position = true;
            mask.Rotation = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static PlacedNPC_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedNPC_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (PlacedNPC_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (PlacedNPC_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (PlacedNPC_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (PlacedNPC_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static PlacedNPC_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedNPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedNPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (PlacedNPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedNPC_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedNPCGetter lhs,
            IPlacedNPCGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Base_IsSet != rhs.Base_IsSet) return false;
            if (lhs.Base_IsSet)
            {
                if (!lhs.Base.Equals(rhs.Base)) return false;
            }
            if (lhs.XPCIFluff_IsSet != rhs.XPCIFluff_IsSet) return false;
            if (lhs.XPCIFluff_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.XPCIFluff, rhs.XPCIFluff)) return false;
            }
            if (lhs.FULLFluff_IsSet != rhs.FULLFluff_IsSet) return false;
            if (lhs.FULLFluff_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.FULLFluff, rhs.FULLFluff)) return false;
            }
            if (lhs.DistantLODData_IsSet != rhs.DistantLODData_IsSet) return false;
            if (lhs.DistantLODData_IsSet)
            {
                if (!object.Equals(lhs.DistantLODData, rhs.DistantLODData)) return false;
            }
            if (lhs.EnableParent_IsSet != rhs.EnableParent_IsSet) return false;
            if (lhs.EnableParent_IsSet)
            {
                if (!object.Equals(lhs.EnableParent, rhs.EnableParent)) return false;
            }
            if (lhs.MerchantContainer_IsSet != rhs.MerchantContainer_IsSet) return false;
            if (lhs.MerchantContainer_IsSet)
            {
                if (!lhs.MerchantContainer.Equals(rhs.MerchantContainer)) return false;
            }
            if (lhs.Horse_IsSet != rhs.Horse_IsSet) return false;
            if (lhs.Horse_IsSet)
            {
                if (!lhs.Horse.Equals(rhs.Horse)) return false;
            }
            if (lhs.RagdollData_IsSet != rhs.RagdollData_IsSet) return false;
            if (lhs.RagdollData_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.RagdollData, rhs.RagdollData)) return false;
            }
            if (lhs.Scale_IsSet != rhs.Scale_IsSet) return false;
            if (lhs.Scale_IsSet)
            {
                if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            }
            if (!lhs.Position.Equals(rhs.Position)) return false;
            if (!lhs.Rotation.Equals(rhs.Rotation)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter lhs,
            IOblivionMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IPlacedNPCGetter)lhs,
                rhs: rhs as IPlacedNPCGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IPlacedNPCGetter)lhs,
                rhs: rhs as IPlacedNPCGetter);
        }
        
        public virtual int GetHashCode(IPlacedNPCGetter item)
        {
            int ret = 0;
            if (item.Base_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Base).CombineHashCode(ret);
            }
            if (item.XPCIFluff_IsSet)
            {
                ret = HashHelper.GetHashCode(item.XPCIFluff).CombineHashCode(ret);
            }
            if (item.FULLFluff_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FULLFluff).CombineHashCode(ret);
            }
            if (item.DistantLODData_IsSet)
            {
                ret = HashHelper.GetHashCode(item.DistantLODData).CombineHashCode(ret);
            }
            if (item.EnableParent_IsSet)
            {
                ret = HashHelper.GetHashCode(item.EnableParent).CombineHashCode(ret);
            }
            if (item.MerchantContainer_IsSet)
            {
                ret = HashHelper.GetHashCode(item.MerchantContainer).CombineHashCode(ret);
            }
            if (item.Horse_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Horse).CombineHashCode(ret);
            }
            if (item.RagdollData_IsSet)
            {
                ret = HashHelper.GetHashCode(item.RagdollData).CombineHashCode(ret);
            }
            if (item.Scale_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Scale).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Position).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Rotation).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedNPCGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedNPCGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlacedNPC.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IPlacedNPCGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Base;
            if (obj.EnableParent != null)
            {
                foreach (var item in obj.EnableParent.Links)
                {
                    yield return item;
                }
            }
            yield return obj.MerchantContainer;
            yield return obj.Horse;
            yield break;
        }
        
        partial void PostDuplicate(PlacedNPC obj, PlacedNPC rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new PlacedNPC(getNextFormKey());
            ret.DeepCopyFieldsFrom((PlacedNPC)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (PlacedNPC)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class PlacedNPCSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly PlacedNPCSetterTranslationCommon Instance = new PlacedNPCSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IPlacedNPCInternal item,
            IPlacedNPCGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyFieldsFrom(
            IPlacedNPC item,
            IPlacedNPCGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.Base) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNPC_FieldIndex.Base);
                try
                {
                    item.Base.SetToFormKey(rhs: rhs.Base);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.XPCIFluff) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNPC_FieldIndex.XPCIFluff);
                try
                {
                    if(rhs.XPCIFluff_IsSet)
                    {
                        item.XPCIFluff = rhs.XPCIFluff.ToArray();
                    }
                    else
                    {
                        item.XPCIFluff_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.FULLFluff) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNPC_FieldIndex.FULLFluff);
                try
                {
                    if(rhs.FULLFluff_IsSet)
                    {
                        item.FULLFluff = rhs.FULLFluff.ToArray();
                    }
                    else
                    {
                        item.FULLFluff_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.DistantLODData) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNPC_FieldIndex.DistantLODData);
                try
                {
                    if(rhs.DistantLODData_IsSet)
                    {
                        item.DistantLODData = rhs.DistantLODData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNPC_FieldIndex.DistantLODData));
                    }
                    else
                    {
                        item.DistantLODData_Set(
                            value: default(DistantLODData),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.EnableParent) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNPC_FieldIndex.EnableParent);
                try
                {
                    if(rhs.EnableParent_IsSet)
                    {
                        item.EnableParent = rhs.EnableParent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNPC_FieldIndex.EnableParent));
                    }
                    else
                    {
                        item.EnableParent_Set(
                            value: default(EnableParent),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.MerchantContainer) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNPC_FieldIndex.MerchantContainer);
                try
                {
                    item.MerchantContainer.SetToFormKey(rhs: rhs.MerchantContainer);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.Horse) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNPC_FieldIndex.Horse);
                try
                {
                    item.Horse.SetToFormKey(rhs: rhs.Horse);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.RagdollData) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNPC_FieldIndex.RagdollData);
                try
                {
                    if(rhs.RagdollData_IsSet)
                    {
                        item.RagdollData = rhs.RagdollData.ToArray();
                    }
                    else
                    {
                        item.RagdollData_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.Scale) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNPC_FieldIndex.Scale);
                try
                {
                    if (rhs.Scale_IsSet)
                    {
                        item.Scale = rhs.Scale;
                    }
                    else
                    {
                        item.Scale_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.Position) ?? true))
            {
                item.Position = rhs.Position;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.Rotation) ?? true))
            {
                item.Rotation = rhs.Rotation;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IPlacedNPCInternal)item,
                rhs: (IPlacedNPCGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IPlacedNPC)item,
                rhs: (IPlacedNPCGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IPlacedNPCInternal)item,
                rhs: (IPlacedNPCGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IPlacedNPC)item,
                rhs: (IPlacedNPCGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public PlacedNPC DeepCopy(
            IPlacedNPCGetter item,
            PlacedNPC_TranslationMask copyMask = null)
        {
            PlacedNPC ret = (PlacedNPC)((PlacedNPCCommon)((IPlacedNPCGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public PlacedNPC DeepCopy(
            IPlacedNPCGetter item,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask copyMask = null)
        {
            PlacedNPC ret = (PlacedNPC)((PlacedNPCCommon)((IPlacedNPCGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public PlacedNPC DeepCopy(
            IPlacedNPCGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            PlacedNPC ret = (PlacedNPC)((PlacedNPCCommon)((IPlacedNPCGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class PlacedNPC
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedNPC_Registration.Instance;
        public new static PlacedNPC_Registration Registration => PlacedNPC_Registration.Instance;
        protected override object CommonInstance() => PlacedNPCCommon.Instance;
        protected override object CommonSetterInstance()
        {
            return PlacedNPCSetterCommon.Instance;
        }
        protected override object CommonSetterTranslationInstance() => PlacedNPCSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PlacedNPCXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static PlacedNPCXmlWriteTranslation Instance = new PlacedNPCXmlWriteTranslation();

        public static void WriteToNodeXml(
            IPlacedNPCGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Base_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.Base) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Base),
                    item: item.Base?.FormKey,
                    fieldIndex: (int)PlacedNPC_FieldIndex.Base,
                    errorMask: errorMask);
            }
            if (item.XPCIFluff_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.XPCIFluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.XPCIFluff),
                    item: item.XPCIFluff,
                    fieldIndex: (int)PlacedNPC_FieldIndex.XPCIFluff,
                    errorMask: errorMask);
            }
            if (item.FULLFluff_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.FULLFluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FULLFluff),
                    item: item.FULLFluff,
                    fieldIndex: (int)PlacedNPC_FieldIndex.FULLFluff,
                    errorMask: errorMask);
            }
            if (item.DistantLODData_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.DistantLODData) ?? true))
            {
                var loquiItem = item.DistantLODData;
                ((DistantLODDataXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.DistantLODData),
                    fieldIndex: (int)PlacedNPC_FieldIndex.DistantLODData,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PlacedNPC_FieldIndex.DistantLODData));
            }
            if (item.EnableParent_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.EnableParent) ?? true))
            {
                var loquiItem = item.EnableParent;
                ((EnableParentXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.EnableParent),
                    fieldIndex: (int)PlacedNPC_FieldIndex.EnableParent,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PlacedNPC_FieldIndex.EnableParent));
            }
            if (item.MerchantContainer_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.MerchantContainer) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MerchantContainer),
                    item: item.MerchantContainer?.FormKey,
                    fieldIndex: (int)PlacedNPC_FieldIndex.MerchantContainer,
                    errorMask: errorMask);
            }
            if (item.Horse_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.Horse) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Horse),
                    item: item.Horse?.FormKey,
                    fieldIndex: (int)PlacedNPC_FieldIndex.Horse,
                    errorMask: errorMask);
            }
            if (item.RagdollData_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.RagdollData) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RagdollData),
                    item: item.RagdollData,
                    fieldIndex: (int)PlacedNPC_FieldIndex.RagdollData,
                    errorMask: errorMask);
            }
            if (item.Scale_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.Scale) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Scale),
                    item: item.Scale,
                    fieldIndex: (int)PlacedNPC_FieldIndex.Scale,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(PlacedNPC.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.Position) ?? true))
                {
                    P3FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Position),
                        item: item.Position,
                        fieldIndex: (int)PlacedNPC_FieldIndex.Position,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.Rotation) ?? true))
                {
                    P3FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Rotation),
                        item: item.Rotation,
                        fieldIndex: (int)PlacedNPC_FieldIndex.Rotation,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<PlacedNPC.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)PlacedNPC_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IPlacedNPCGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.PlacedNPC");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.PlacedNPC");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IPlacedNPCGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IPlacedNPCGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IPlacedNPCGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class PlacedNPCXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static PlacedNPCXmlCreateTranslation Instance = new PlacedNPCXmlCreateTranslation();

        public static void FillPublicXml(
            IPlacedNPCInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PlacedNPCXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IPlacedNPCInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Base":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.Base);
                        if (FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out IFormIDSetLink<NPC> BaseParse,
                            errorMask: errorMask))
                        {
                            item.Base = BaseParse;
                        }
                        else
                        {
                            item.Base = default(IFormIDSetLink<NPC>);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "XPCIFluff":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.XPCIFluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] XPCIFluffParse,
                            errorMask: errorMask))
                        {
                            item.XPCIFluff = XPCIFluffParse;
                        }
                        else
                        {
                            item.XPCIFluff = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FULLFluff":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.FULLFluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] FULLFluffParse,
                            errorMask: errorMask))
                        {
                            item.FULLFluff = FULLFluffParse;
                        }
                        else
                        {
                            item.FULLFluff = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DistantLODData":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.DistantLODData);
                        if (LoquiXmlTranslation<DistantLODData>.Instance.Parse(
                            node: node,
                            item: out DistantLODData DistantLODDataParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedNPC_FieldIndex.DistantLODData)))
                        {
                            item.DistantLODData = DistantLODDataParse;
                        }
                        else
                        {
                            item.DistantLODData = default(DistantLODData);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnableParent":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.EnableParent);
                        if (LoquiXmlTranslation<EnableParent>.Instance.Parse(
                            node: node,
                            item: out EnableParent EnableParentParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedNPC_FieldIndex.EnableParent)))
                        {
                            item.EnableParent = EnableParentParse;
                        }
                        else
                        {
                            item.EnableParent = default(EnableParent);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MerchantContainer":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.MerchantContainer);
                        if (FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out IFormIDSetLink<PlacedObject> MerchantContainerParse,
                            errorMask: errorMask))
                        {
                            item.MerchantContainer = MerchantContainerParse;
                        }
                        else
                        {
                            item.MerchantContainer = default(IFormIDSetLink<PlacedObject>);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Horse":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.Horse);
                        if (FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out IFormIDSetLink<PlacedCreature> HorseParse,
                            errorMask: errorMask))
                        {
                            item.Horse = HorseParse;
                        }
                        else
                        {
                            item.Horse = default(IFormIDSetLink<PlacedCreature>);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RagdollData":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.RagdollData);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] RagdollDataParse,
                            errorMask: errorMask))
                        {
                            item.RagdollData = RagdollDataParse;
                        }
                        else
                        {
                            item.RagdollData = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Scale":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.Scale);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ScaleParse,
                            errorMask: errorMask))
                        {
                            item.Scale = ScaleParse;
                        }
                        else
                        {
                            item.Scale = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Position":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.Position);
                        if (P3FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out P3Float PositionParse,
                            errorMask: errorMask))
                        {
                            item.Position = PositionParse;
                        }
                        else
                        {
                            item.Position = default(P3Float);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= PlacedNPC.DATADataType.Has;
                    break;
                case "Rotation":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.Rotation);
                        if (P3FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out P3Float RotationParse,
                            errorMask: errorMask))
                        {
                            item.Rotation = RotationParse;
                        }
                        else
                        {
                            item.Rotation = default(P3Float);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.DATADataTypeState);
                        if (EnumXmlTranslation<PlacedNPC.DATADataType>.Instance.Parse(
                            node: node,
                            item: out PlacedNPC.DATADataType DATADataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.DATADataTypeState = DATADataTypeStateParse;
                        }
                        else
                        {
                            item.DATADataTypeState = default(PlacedNPC.DATADataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class PlacedNPCXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IPlacedNPCGetter item,
            XElement node,
            out PlacedNPC_ErrorMask errorMask,
            bool doMasks = true,
            PlacedNPC_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((PlacedNPCXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IPlacedNPCGetter item,
            string path,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPlacedNPCGetter item,
            Stream stream,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class PlacedNPC_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<PlacedNPC_Mask<T>>
    {
        #region Ctors
        public PlacedNPC_Mask()
        {
        }

        public PlacedNPC_Mask(T initialValue)
        {
            this.Base = initialValue;
            this.XPCIFluff = initialValue;
            this.FULLFluff = initialValue;
            this.DistantLODData = new MaskItem<T, DistantLODData_Mask<T>>(initialValue, new DistantLODData_Mask<T>(initialValue));
            this.EnableParent = new MaskItem<T, EnableParent_Mask<T>>(initialValue, new EnableParent_Mask<T>(initialValue));
            this.MerchantContainer = initialValue;
            this.Horse = initialValue;
            this.RagdollData = initialValue;
            this.Scale = initialValue;
            this.Position = initialValue;
            this.Rotation = initialValue;
            this.DATADataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Base;
        public T XPCIFluff;
        public T FULLFluff;
        public MaskItem<T, DistantLODData_Mask<T>> DistantLODData { get; set; }
        public MaskItem<T, EnableParent_Mask<T>> EnableParent { get; set; }
        public T MerchantContainer;
        public T Horse;
        public T RagdollData;
        public T Scale;
        public T Position;
        public T Rotation;
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is PlacedNPC_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PlacedNPC_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Base, rhs.Base)) return false;
            if (!object.Equals(this.XPCIFluff, rhs.XPCIFluff)) return false;
            if (!object.Equals(this.FULLFluff, rhs.FULLFluff)) return false;
            if (!object.Equals(this.DistantLODData, rhs.DistantLODData)) return false;
            if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
            if (!object.Equals(this.MerchantContainer, rhs.MerchantContainer)) return false;
            if (!object.Equals(this.Horse, rhs.Horse)) return false;
            if (!object.Equals(this.RagdollData, rhs.RagdollData)) return false;
            if (!object.Equals(this.Scale, rhs.Scale)) return false;
            if (!object.Equals(this.Position, rhs.Position)) return false;
            if (!object.Equals(this.Rotation, rhs.Rotation)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Base?.GetHashCode());
            ret = ret.CombineHashCode(this.XPCIFluff?.GetHashCode());
            ret = ret.CombineHashCode(this.FULLFluff?.GetHashCode());
            ret = ret.CombineHashCode(this.DistantLODData?.GetHashCode());
            ret = ret.CombineHashCode(this.EnableParent?.GetHashCode());
            ret = ret.CombineHashCode(this.MerchantContainer?.GetHashCode());
            ret = ret.CombineHashCode(this.Horse?.GetHashCode());
            ret = ret.CombineHashCode(this.RagdollData?.GetHashCode());
            ret = ret.CombineHashCode(this.Scale?.GetHashCode());
            ret = ret.CombineHashCode(this.Position?.GetHashCode());
            ret = ret.CombineHashCode(this.Rotation?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Base)) return false;
            if (!eval(this.XPCIFluff)) return false;
            if (!eval(this.FULLFluff)) return false;
            if (DistantLODData != null)
            {
                if (!eval(this.DistantLODData.Overall)) return false;
                if (this.DistantLODData.Specific != null && !this.DistantLODData.Specific.AllEqual(eval)) return false;
            }
            if (EnableParent != null)
            {
                if (!eval(this.EnableParent.Overall)) return false;
                if (this.EnableParent.Specific != null && !this.EnableParent.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.MerchantContainer)) return false;
            if (!eval(this.Horse)) return false;
            if (!eval(this.RagdollData)) return false;
            if (!eval(this.Scale)) return false;
            if (!eval(this.Position)) return false;
            if (!eval(this.Rotation)) return false;
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new PlacedNPC_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new PlacedNPC_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(PlacedNPC_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Base = eval(this.Base);
            obj.XPCIFluff = eval(this.XPCIFluff);
            obj.FULLFluff = eval(this.FULLFluff);
            if (this.DistantLODData != null)
            {
                obj.DistantLODData = new MaskItem<R, DistantLODData_Mask<R>>();
                obj.DistantLODData.Overall = eval(this.DistantLODData.Overall);
                if (this.DistantLODData.Specific != null)
                {
                    obj.DistantLODData.Specific = this.DistantLODData.Specific.Translate(eval);
                }
            }
            if (this.EnableParent != null)
            {
                obj.EnableParent = new MaskItem<R, EnableParent_Mask<R>>();
                obj.EnableParent.Overall = eval(this.EnableParent.Overall);
                if (this.EnableParent.Specific != null)
                {
                    obj.EnableParent.Specific = this.EnableParent.Specific.Translate(eval);
                }
            }
            obj.MerchantContainer = eval(this.MerchantContainer);
            obj.Horse = eval(this.Horse);
            obj.RagdollData = eval(this.RagdollData);
            obj.Scale = eval(this.Scale);
            obj.Position = eval(this.Position);
            obj.Rotation = eval(this.Rotation);
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(PlacedNPC_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, PlacedNPC_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(PlacedNPC_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Base ?? true)
                {
                    fg.AppendLine($"Base => {Base}");
                }
                if (printMask?.XPCIFluff ?? true)
                {
                    fg.AppendLine($"XPCIFluff => {XPCIFluff}");
                }
                if (printMask?.FULLFluff ?? true)
                {
                    fg.AppendLine($"FULLFluff => {FULLFluff}");
                }
                if (printMask?.DistantLODData?.Overall ?? true)
                {
                    DistantLODData?.ToString(fg);
                }
                if (printMask?.EnableParent?.Overall ?? true)
                {
                    EnableParent?.ToString(fg);
                }
                if (printMask?.MerchantContainer ?? true)
                {
                    fg.AppendLine($"MerchantContainer => {MerchantContainer}");
                }
                if (printMask?.Horse ?? true)
                {
                    fg.AppendLine($"Horse => {Horse}");
                }
                if (printMask?.RagdollData ?? true)
                {
                    fg.AppendLine($"RagdollData => {RagdollData}");
                }
                if (printMask?.Scale ?? true)
                {
                    fg.AppendLine($"Scale => {Scale}");
                }
                if (printMask?.Position ?? true)
                {
                    fg.AppendLine($"Position => {Position}");
                }
                if (printMask?.Rotation ?? true)
                {
                    fg.AppendLine($"Rotation => {Rotation}");
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class PlacedNPC_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<PlacedNPC_ErrorMask>
    {
        #region Members
        public Exception Base;
        public Exception XPCIFluff;
        public Exception FULLFluff;
        public MaskItem<Exception, DistantLODData_ErrorMask> DistantLODData;
        public MaskItem<Exception, EnableParent_ErrorMask> EnableParent;
        public Exception MerchantContainer;
        public Exception Horse;
        public Exception RagdollData;
        public Exception Scale;
        public Exception Position;
        public Exception Rotation;
        public Exception DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                    return Base;
                case PlacedNPC_FieldIndex.XPCIFluff:
                    return XPCIFluff;
                case PlacedNPC_FieldIndex.FULLFluff:
                    return FULLFluff;
                case PlacedNPC_FieldIndex.DistantLODData:
                    return DistantLODData;
                case PlacedNPC_FieldIndex.EnableParent:
                    return EnableParent;
                case PlacedNPC_FieldIndex.MerchantContainer:
                    return MerchantContainer;
                case PlacedNPC_FieldIndex.Horse:
                    return Horse;
                case PlacedNPC_FieldIndex.RagdollData:
                    return RagdollData;
                case PlacedNPC_FieldIndex.Scale:
                    return Scale;
                case PlacedNPC_FieldIndex.Position:
                    return Position;
                case PlacedNPC_FieldIndex.Rotation:
                    return Rotation;
                case PlacedNPC_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                    this.Base = ex;
                    break;
                case PlacedNPC_FieldIndex.XPCIFluff:
                    this.XPCIFluff = ex;
                    break;
                case PlacedNPC_FieldIndex.FULLFluff:
                    this.FULLFluff = ex;
                    break;
                case PlacedNPC_FieldIndex.DistantLODData:
                    this.DistantLODData = new MaskItem<Exception, DistantLODData_ErrorMask>(ex, null);
                    break;
                case PlacedNPC_FieldIndex.EnableParent:
                    this.EnableParent = new MaskItem<Exception, EnableParent_ErrorMask>(ex, null);
                    break;
                case PlacedNPC_FieldIndex.MerchantContainer:
                    this.MerchantContainer = ex;
                    break;
                case PlacedNPC_FieldIndex.Horse:
                    this.Horse = ex;
                    break;
                case PlacedNPC_FieldIndex.RagdollData:
                    this.RagdollData = ex;
                    break;
                case PlacedNPC_FieldIndex.Scale:
                    this.Scale = ex;
                    break;
                case PlacedNPC_FieldIndex.Position:
                    this.Position = ex;
                    break;
                case PlacedNPC_FieldIndex.Rotation:
                    this.Rotation = ex;
                    break;
                case PlacedNPC_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                    this.Base = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.XPCIFluff:
                    this.XPCIFluff = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.FULLFluff:
                    this.FULLFluff = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.DistantLODData:
                    this.DistantLODData = (MaskItem<Exception, DistantLODData_ErrorMask>)obj;
                    break;
                case PlacedNPC_FieldIndex.EnableParent:
                    this.EnableParent = (MaskItem<Exception, EnableParent_ErrorMask>)obj;
                    break;
                case PlacedNPC_FieldIndex.MerchantContainer:
                    this.MerchantContainer = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.Horse:
                    this.Horse = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.RagdollData:
                    this.RagdollData = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.Scale:
                    this.Scale = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.Position:
                    this.Position = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.Rotation:
                    this.Rotation = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Base != null) return true;
            if (XPCIFluff != null) return true;
            if (FULLFluff != null) return true;
            if (DistantLODData != null) return true;
            if (EnableParent != null) return true;
            if (MerchantContainer != null) return true;
            if (Horse != null) return true;
            if (RagdollData != null) return true;
            if (Scale != null) return true;
            if (Position != null) return true;
            if (Rotation != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("PlacedNPC_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Base => {Base}");
            fg.AppendLine($"XPCIFluff => {XPCIFluff}");
            fg.AppendLine($"FULLFluff => {FULLFluff}");
            DistantLODData?.ToString(fg);
            EnableParent?.ToString(fg);
            fg.AppendLine($"MerchantContainer => {MerchantContainer}");
            fg.AppendLine($"Horse => {Horse}");
            fg.AppendLine($"RagdollData => {RagdollData}");
            fg.AppendLine($"Scale => {Scale}");
            fg.AppendLine($"Position => {Position}");
            fg.AppendLine($"Rotation => {Rotation}");
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public PlacedNPC_ErrorMask Combine(PlacedNPC_ErrorMask rhs)
        {
            var ret = new PlacedNPC_ErrorMask();
            ret.Base = this.Base.Combine(rhs.Base);
            ret.XPCIFluff = this.XPCIFluff.Combine(rhs.XPCIFluff);
            ret.FULLFluff = this.FULLFluff.Combine(rhs.FULLFluff);
            ret.DistantLODData = new MaskItem<Exception, DistantLODData_ErrorMask>(this.DistantLODData.Overall.Combine(rhs.DistantLODData.Overall), ((IErrorMask<DistantLODData_ErrorMask>)this.DistantLODData.Specific).Combine(rhs.DistantLODData.Specific));
            ret.EnableParent = new MaskItem<Exception, EnableParent_ErrorMask>(this.EnableParent.Overall.Combine(rhs.EnableParent.Overall), ((IErrorMask<EnableParent_ErrorMask>)this.EnableParent.Specific).Combine(rhs.EnableParent.Specific));
            ret.MerchantContainer = this.MerchantContainer.Combine(rhs.MerchantContainer);
            ret.Horse = this.Horse.Combine(rhs.Horse);
            ret.RagdollData = this.RagdollData.Combine(rhs.RagdollData);
            ret.Scale = this.Scale.Combine(rhs.Scale);
            ret.Position = this.Position.Combine(rhs.Position);
            ret.Rotation = this.Rotation.Combine(rhs.Rotation);
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static PlacedNPC_ErrorMask Combine(PlacedNPC_ErrorMask lhs, PlacedNPC_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static PlacedNPC_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new PlacedNPC_ErrorMask();
        }
        #endregion

    }
    public class PlacedNPC_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Base;
        public bool XPCIFluff;
        public bool FULLFluff;
        public MaskItem<bool, DistantLODData_TranslationMask> DistantLODData;
        public MaskItem<bool, EnableParent_TranslationMask> EnableParent;
        public bool MerchantContainer;
        public bool Horse;
        public bool RagdollData;
        public bool Scale;
        public bool Position;
        public bool Rotation;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public PlacedNPC_TranslationMask()
            : base()
        {
        }

        public PlacedNPC_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Base = defaultOn;
            this.XPCIFluff = defaultOn;
            this.FULLFluff = defaultOn;
            this.DistantLODData = new MaskItem<bool, DistantLODData_TranslationMask>(defaultOn, null);
            this.EnableParent = new MaskItem<bool, EnableParent_TranslationMask>(defaultOn, null);
            this.MerchantContainer = defaultOn;
            this.Horse = defaultOn;
            this.RagdollData = defaultOn;
            this.Scale = defaultOn;
            this.Position = defaultOn;
            this.Rotation = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Base, null));
            ret.Add((XPCIFluff, null));
            ret.Add((FULLFluff, null));
            ret.Add((DistantLODData?.Overall ?? true, DistantLODData?.Specific?.GetCrystal()));
            ret.Add((EnableParent?.Overall ?? true, EnableParent?.Specific?.GetCrystal()));
            ret.Add((MerchantContainer, null));
            ret.Add((Horse, null));
            ret.Add((RagdollData, null));
            ret.Add((Scale, null));
            ret.Add((Position, null));
            ret.Add((Rotation, null));
            ret.Add((DATADataTypeState, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PlacedNPCBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PlacedNPCBinaryWriteTranslation Instance = new PlacedNPCBinaryWriteTranslation();

        public static void Write_Embedded(
            IPlacedNPCGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IPlacedNPCGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Base_IsSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Base,
                    header: recordTypeConverter.ConvertToCustom(PlacedNPC_Registration.NAME_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.XPCIFluff_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.XPCIFluff,
                    header: recordTypeConverter.ConvertToCustom(PlacedNPC_Registration.XPCI_HEADER),
                    nullable: false);
            }
            if (item.FULLFluff_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FULLFluff,
                    header: recordTypeConverter.ConvertToCustom(PlacedNPC_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.DistantLODData_IsSet)
            {
                var loquiItem = item.DistantLODData;
                ((DistantLODDataBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.EnableParent_IsSet)
            {
                var loquiItem = item.EnableParent;
                ((EnableParentBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.MerchantContainer_IsSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MerchantContainer,
                    header: recordTypeConverter.ConvertToCustom(PlacedNPC_Registration.XMRC_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Horse_IsSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Horse,
                    header: recordTypeConverter.ConvertToCustom(PlacedNPC_Registration.XHRS_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.RagdollData_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.RagdollData,
                    header: recordTypeConverter.ConvertToCustom(PlacedNPC_Registration.XRGD_HEADER),
                    nullable: false);
            }
            if (item.Scale_IsSet)
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Scale,
                    header: recordTypeConverter.ConvertToCustom(PlacedNPC_Registration.XSCL_HEADER),
                    nullable: false);
            }
            if (item.DATADataTypeState.HasFlag(PlacedNPC.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(PlacedNPC_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Position);
                    Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Rotation);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IPlacedNPCGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: PlacedNPC_Registration.ACHR_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IPlacedNPCGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IPlacedNPCGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IPlacedNPCGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class PlacedNPCBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static PlacedNPCBinaryCreateTranslation Instance = new PlacedNPCBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class PlacedNPCBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPlacedNPCGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out PlacedNPC_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((PlacedNPCBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PlacedNPCBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        IPlacedNPCGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedNPC_Registration.Instance;
        public new static PlacedNPC_Registration Registration => PlacedNPC_Registration.Instance;
        protected override object CommonInstance() => PlacedNPCCommon.Instance;
        protected override object CommonSetterTranslationInstance() => PlacedNPCSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPlacedNPCGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => PlacedNPCCommon.Instance.GetLinks(this);
        protected override object XmlWriteTranslator => PlacedNPCXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((PlacedNPCXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => PlacedNPCBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((PlacedNPCBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Base
        private int? _BaseLocation;
        public bool Base_IsSet => _BaseLocation.HasValue;
        public IFormIDSetLinkGetter<INPCGetter> Base => _BaseLocation.HasValue ? new FormIDSetLink<INPCGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _BaseLocation.Value, _package.Meta)))) : FormIDSetLink<INPCGetter>.Empty;
        #endregion
        #region XPCIFluff
        private int? _XPCIFluffLocation;
        public bool XPCIFluff_IsSet => _XPCIFluffLocation.HasValue;
        public ReadOnlySpan<Byte> XPCIFluff => _XPCIFluffLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _XPCIFluffLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region FULLFluff
        private int? _FULLFluffLocation;
        public bool FULLFluff_IsSet => _FULLFluffLocation.HasValue;
        public ReadOnlySpan<Byte> FULLFluff => _FULLFluffLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _FULLFluffLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region DistantLODData
        private RangeInt32? _DistantLODDataLocation;
        private bool _DistantLODData_IsSet => _DistantLODDataLocation.HasValue;
        public IDistantLODDataGetter DistantLODData => _DistantLODData_IsSet ? DistantLODDataBinaryWrapper.DistantLODDataFactory(new BinaryMemoryReadStream(_data.Slice(_DistantLODDataLocation.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool DistantLODData_IsSet => _DistantLODDataLocation.HasValue;
        #endregion
        #region EnableParent
        private RangeInt32? _EnableParentLocation;
        private bool _EnableParent_IsSet => _EnableParentLocation.HasValue;
        public IEnableParentGetter EnableParent => _EnableParent_IsSet ? EnableParentBinaryWrapper.EnableParentFactory(new BinaryMemoryReadStream(_data.Slice(_EnableParentLocation.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool EnableParent_IsSet => _EnableParentLocation.HasValue;
        #endregion
        #region MerchantContainer
        private int? _MerchantContainerLocation;
        public bool MerchantContainer_IsSet => _MerchantContainerLocation.HasValue;
        public IFormIDSetLinkGetter<IPlacedObjectGetter> MerchantContainer => _MerchantContainerLocation.HasValue ? new FormIDSetLink<IPlacedObjectGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _MerchantContainerLocation.Value, _package.Meta)))) : FormIDSetLink<IPlacedObjectGetter>.Empty;
        #endregion
        #region Horse
        private int? _HorseLocation;
        public bool Horse_IsSet => _HorseLocation.HasValue;
        public IFormIDSetLinkGetter<IPlacedCreatureGetter> Horse => _HorseLocation.HasValue ? new FormIDSetLink<IPlacedCreatureGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _HorseLocation.Value, _package.Meta)))) : FormIDSetLink<IPlacedCreatureGetter>.Empty;
        #endregion
        #region RagdollData
        private int? _RagdollDataLocation;
        public bool RagdollData_IsSet => _RagdollDataLocation.HasValue;
        public ReadOnlySpan<Byte> RagdollData => _RagdollDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _RagdollDataLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region Scale
        private int? _ScaleLocation;
        public bool Scale_IsSet => _ScaleLocation.HasValue;
        public Single Scale => _ScaleLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordSpan(_data, _ScaleLocation.Value, _package.Meta)) : default;
        #endregion
        private int? _DATALocation;
        public PlacedNPC.DATADataType DATADataTypeState { get; private set; }
        #region Position
        private int _PositionLocation => _DATALocation.Value + 0x0;
        private bool _Position_IsSet => _DATALocation.HasValue;
        public P3Float Position => _Position_IsSet ? P3FloatBinaryTranslation.Read(_data.Span.Slice(_PositionLocation, 12)) : default;
        #endregion
        #region Rotation
        private int _RotationLocation => _DATALocation.Value + 0xC;
        private bool _Rotation_IsSet => _DATALocation.HasValue;
        public P3Float Rotation => _Rotation_IsSet ? P3FloatBinaryTranslation.Read(_data.Span.Slice(_RotationLocation, 12)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected PlacedNPCBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static PlacedNPCBinaryWrapper PlacedNPCFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new PlacedNPCBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x454D414E: // NAME
                {
                    _BaseLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.Base);
                }
                case 0x49435058: // XPCI
                {
                    _XPCIFluffLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.XPCIFluff);
                }
                case 0x4C4C5546: // FULL
                {
                    _FULLFluffLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.FULLFluff);
                }
                case 0x444F4C58: // XLOD
                {
                    _DistantLODDataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.DistantLODData);
                }
                case 0x50534558: // XESP
                {
                    _EnableParentLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.EnableParent);
                }
                case 0x43524D58: // XMRC
                {
                    _MerchantContainerLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.MerchantContainer);
                }
                case 0x53524858: // XHRS
                {
                    _HorseLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.Horse);
                }
                case 0x44475258: // XRGD
                {
                    _RagdollDataLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.RagdollData);
                }
                case 0x4C435358: // XSCL
                {
                    _ScaleLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.Scale);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = PlacedNPC.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.Rotation);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

