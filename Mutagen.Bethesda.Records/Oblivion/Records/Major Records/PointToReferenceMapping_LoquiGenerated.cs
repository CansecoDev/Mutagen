/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PointToReferenceMapping :
        IPointToReferenceMapping,
        ILoquiObjectSetter<PointToReferenceMapping>,
        IEquatable<PointToReferenceMapping>,
        IEqualsMask
    {
        #region Ctor
        public PointToReferenceMapping()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Reference
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDLink<IPlaced> _Reference = new FormIDLink<IPlaced>();
        public IFormIDLink<IPlaced> Reference => this._Reference;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLinkGetter<IPlacedGetter> IPointToReferenceMappingGetter.Reference => this.Reference;
        #endregion
        #region Points
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ExtendedList<Int16> _Points = new ExtendedList<Int16>();
        public IExtendedList<Int16> Points => _Points;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IExtendedList<Int16> IPointToReferenceMapping.Points => _Points;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<Int16> IPointToReferenceMappingGetter.Points => _Points;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PointToReferenceMappingMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IPointToReferenceMappingGetter rhs)) return false;
            return ((PointToReferenceMappingCommon)((IPointToReferenceMappingGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(PointToReferenceMapping obj)
        {
            return ((PointToReferenceMappingCommon)((IPointToReferenceMappingGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PointToReferenceMappingCommon)((IPointToReferenceMappingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => PointToReferenceMappingXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PointToReferenceMappingXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static PointToReferenceMapping CreateFromXml(
            XElement node,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PointToReferenceMapping CreateFromXml(
            XElement node,
            out PointToReferenceMapping_ErrorMask errorMask,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PointToReferenceMapping_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static PointToReferenceMapping CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new PointToReferenceMapping();
            ((PointToReferenceMappingSetterCommon)((IPointToReferenceMappingGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static PointToReferenceMapping CreateFromXml(
            string path,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static PointToReferenceMapping CreateFromXml(
            string path,
            out PointToReferenceMapping_ErrorMask errorMask,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PointToReferenceMapping CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static PointToReferenceMapping CreateFromXml(
            Stream stream,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static PointToReferenceMapping CreateFromXml(
            Stream stream,
            out PointToReferenceMapping_ErrorMask errorMask,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PointToReferenceMapping CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = PointToReferenceMapping_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => PointToReferenceMappingCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PointToReferenceMappingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((PointToReferenceMappingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static PointToReferenceMapping CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static PointToReferenceMapping CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new PointToReferenceMapping();
            ((PointToReferenceMappingSetterCommon)((IPointToReferenceMappingGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPointToReferenceMappingGetter)rhs, include);

        void IClearable.Clear()
        {
            ((PointToReferenceMappingSetterCommon)((IPointToReferenceMappingGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PointToReferenceMapping GetNew()
        {
            return new PointToReferenceMapping();
        }

    }
    #endregion

    #region Interface
    public partial interface IPointToReferenceMapping :
        IPointToReferenceMappingGetter,
        ILoquiObjectSetter<IPointToReferenceMapping>
    {
        new IFormIDLink<IPlaced> Reference { get; }
        new IExtendedList<Int16> Points { get; }
    }

    public partial interface IPointToReferenceMappingGetter :
        ILoquiObject,
        ILoquiObject<IPointToReferenceMappingGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        IFormIDLinkGetter<IPlacedGetter> Reference { get; }
        IReadOnlyList<Int16> Points { get; }

    }

    #endregion

    #region Common MixIn
    public static class PointToReferenceMappingMixIn
    {
        public static void Clear(this IPointToReferenceMapping item)
        {
            ((PointToReferenceMappingSetterCommon)((IPointToReferenceMappingGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PointToReferenceMapping_Mask<bool> GetEqualsMask(
            this IPointToReferenceMappingGetter item,
            IPointToReferenceMappingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PointToReferenceMappingCommon)((IPointToReferenceMappingGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPointToReferenceMappingGetter item,
            string? name = null,
            PointToReferenceMapping_Mask<bool>? printMask = null)
        {
            return ((PointToReferenceMappingCommon)((IPointToReferenceMappingGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPointToReferenceMappingGetter item,
            FileGeneration fg,
            string? name = null,
            PointToReferenceMapping_Mask<bool>? printMask = null)
        {
            ((PointToReferenceMappingCommon)((IPointToReferenceMappingGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IPointToReferenceMappingGetter item,
            PointToReferenceMapping_Mask<bool?> checkMask)
        {
            return ((PointToReferenceMappingCommon)((IPointToReferenceMappingGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static PointToReferenceMapping_Mask<bool> GetHasBeenSetMask(this IPointToReferenceMappingGetter item)
        {
            var ret = new PointToReferenceMapping_Mask<bool>(false);
            ((PointToReferenceMappingCommon)((IPointToReferenceMappingGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IPointToReferenceMappingGetter item,
            IPointToReferenceMappingGetter rhs)
        {
            return ((PointToReferenceMappingCommon)((IPointToReferenceMappingGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPointToReferenceMapping lhs,
            IPointToReferenceMappingGetter rhs,
            PointToReferenceMapping_TranslationMask? copyMask = null)
        {
            ((PointToReferenceMappingSetterTranslationCommon)((IPointToReferenceMappingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IPointToReferenceMapping lhs,
            IPointToReferenceMappingGetter rhs,
            out PointToReferenceMapping_ErrorMask errorMask,
            PointToReferenceMapping_TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PointToReferenceMappingSetterTranslationCommon)((IPointToReferenceMappingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = PointToReferenceMapping_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPointToReferenceMapping lhs,
            IPointToReferenceMappingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PointToReferenceMappingSetterTranslationCommon)((IPointToReferenceMappingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static PointToReferenceMapping DeepCopy(
            this IPointToReferenceMappingGetter item,
            PointToReferenceMapping_TranslationMask? copyMask = null)
        {
            return ((PointToReferenceMappingSetterTranslationCommon)((IPointToReferenceMappingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PointToReferenceMapping DeepCopy(
            this IPointToReferenceMappingGetter item,
            out PointToReferenceMapping_ErrorMask errorMask,
            PointToReferenceMapping_TranslationMask? copyMask = null)
        {
            return ((PointToReferenceMappingSetterTranslationCommon)((IPointToReferenceMappingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PointToReferenceMapping DeepCopy(
            this IPointToReferenceMappingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PointToReferenceMappingSetterTranslationCommon)((IPointToReferenceMappingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPointToReferenceMapping item,
            XElement node,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPointToReferenceMapping item,
            XElement node,
            out PointToReferenceMapping_ErrorMask errorMask,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PointToReferenceMapping_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IPointToReferenceMapping item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((PointToReferenceMappingSetterCommon)((IPointToReferenceMappingGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPointToReferenceMapping item,
            string path,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPointToReferenceMapping item,
            string path,
            out PointToReferenceMapping_ErrorMask errorMask,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPointToReferenceMapping item,
            string path,
            ErrorMaskBuilder? errorMask,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IPointToReferenceMapping item,
            Stream stream,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPointToReferenceMapping item,
            Stream stream,
            out PointToReferenceMapping_ErrorMask errorMask,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPointToReferenceMapping item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IPointToReferenceMapping item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IPointToReferenceMapping item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((PointToReferenceMappingSetterCommon)((IPointToReferenceMappingGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum PointToReferenceMapping_FieldIndex
    {
        Reference = 0,
        Points = 1,
    }
    #endregion

    #region Registration
    public partial class PointToReferenceMapping_Registration : ILoquiRegistration
    {
        public static readonly PointToReferenceMapping_Registration Instance = new PointToReferenceMapping_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 136,
            version: 0);

        public const string GUID = "4d524dea-fd8a-4f29-bd85-50c3db4b81e0";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(PointToReferenceMapping_Mask<>);

        public static readonly Type ErrorMaskType = typeof(PointToReferenceMapping_ErrorMask);

        public static readonly Type ClassType = typeof(PointToReferenceMapping);

        public static readonly Type GetterType = typeof(IPointToReferenceMappingGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPointToReferenceMapping);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.PointToReferenceMapping";

        public const string Name = "PointToReferenceMapping";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "REFERENCE":
                    return (ushort)PointToReferenceMapping_FieldIndex.Reference;
                case "POINTS":
                    return (ushort)PointToReferenceMapping_FieldIndex.Points;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PointToReferenceMapping_FieldIndex enu = (PointToReferenceMapping_FieldIndex)index;
            switch (enu)
            {
                case PointToReferenceMapping_FieldIndex.Points:
                    return true;
                case PointToReferenceMapping_FieldIndex.Reference:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PointToReferenceMapping_FieldIndex enu = (PointToReferenceMapping_FieldIndex)index;
            switch (enu)
            {
                case PointToReferenceMapping_FieldIndex.Reference:
                case PointToReferenceMapping_FieldIndex.Points:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PointToReferenceMapping_FieldIndex enu = (PointToReferenceMapping_FieldIndex)index;
            switch (enu)
            {
                case PointToReferenceMapping_FieldIndex.Reference:
                case PointToReferenceMapping_FieldIndex.Points:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            PointToReferenceMapping_FieldIndex enu = (PointToReferenceMapping_FieldIndex)index;
            switch (enu)
            {
                case PointToReferenceMapping_FieldIndex.Reference:
                    return "Reference";
                case PointToReferenceMapping_FieldIndex.Points:
                    return "Points";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PointToReferenceMapping_FieldIndex enu = (PointToReferenceMapping_FieldIndex)index;
            switch (enu)
            {
                case PointToReferenceMapping_FieldIndex.Reference:
                case PointToReferenceMapping_FieldIndex.Points:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            PointToReferenceMapping_FieldIndex enu = (PointToReferenceMapping_FieldIndex)index;
            switch (enu)
            {
                case PointToReferenceMapping_FieldIndex.Reference:
                case PointToReferenceMapping_FieldIndex.Points:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            PointToReferenceMapping_FieldIndex enu = (PointToReferenceMapping_FieldIndex)index;
            switch (enu)
            {
                case PointToReferenceMapping_FieldIndex.Reference:
                    return typeof(IFormIDLink<IPlaced>);
                case PointToReferenceMapping_FieldIndex.Points:
                    return typeof(IExtendedList<Int16>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(PointToReferenceMappingXmlWriteTranslation);
        public static readonly RecordType PGRL_HEADER = new RecordType("PGRL");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = PGRL_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(PointToReferenceMappingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PointToReferenceMappingSetterCommon
    {
        public static readonly PointToReferenceMappingSetterCommon Instance = new PointToReferenceMappingSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPointToReferenceMapping item)
        {
            ClearPartial();
            item.Reference.Unset();
            item.Points.Clear();
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IPointToReferenceMapping item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PointToReferenceMappingXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IPointToReferenceMapping item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            item.Reference.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.NULL);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<Int16>.Instance.ParseRepeatedItem(
                frame: frame,
                item: item.Points,
                transl: Int16BinaryTranslation.Instance.Parse);
        }
        
        public void CopyInFromBinary(
            IPointToReferenceMapping item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(PointToReferenceMapping_Registration.PGRL_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class PointToReferenceMappingCommon
    {
        public static readonly PointToReferenceMappingCommon Instance = new PointToReferenceMappingCommon();

        public PointToReferenceMapping_Mask<bool> GetEqualsMask(
            IPointToReferenceMappingGetter item,
            IPointToReferenceMappingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PointToReferenceMapping_Mask<bool>(false);
            ((PointToReferenceMappingCommon)((IPointToReferenceMappingGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPointToReferenceMappingGetter item,
            IPointToReferenceMappingGetter rhs,
            PointToReferenceMapping_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Reference = object.Equals(item.Reference, rhs.Reference);
            ret.Points = item.Points.CollectionEqualsHelper(
                rhs.Points,
                (l, r) => l == r,
                include);
        }
        
        public string ToString(
            IPointToReferenceMappingGetter item,
            string? name = null,
            PointToReferenceMapping_Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPointToReferenceMappingGetter item,
            FileGeneration fg,
            string? name = null,
            PointToReferenceMapping_Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PointToReferenceMapping =>");
            }
            else
            {
                fg.AppendLine($"{name} (PointToReferenceMapping) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPointToReferenceMappingGetter item,
            FileGeneration fg,
            PointToReferenceMapping_Mask<bool>? printMask = null)
        {
            if (printMask?.Reference ?? true)
            {
                fg.AppendLine($"Reference => {item.Reference}");
            }
            if (printMask?.Points?.Overall ?? true)
            {
                fg.AppendLine("Points =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Points)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IPointToReferenceMappingGetter item,
            PointToReferenceMapping_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IPointToReferenceMappingGetter item,
            PointToReferenceMapping_Mask<bool> mask)
        {
            mask.Reference = true;
            mask.Points = new MaskItem<bool, IEnumerable<(int, bool)>>(true, Enumerable.Empty<(int, bool)>());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPointToReferenceMappingGetter? lhs,
            IPointToReferenceMappingGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Reference.Equals(rhs.Reference)) return false;
            if (!lhs.Points.SequenceEqual(rhs.Points)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IPointToReferenceMappingGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Reference).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Points).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PointToReferenceMapping.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IPointToReferenceMappingGetter obj)
        {
            yield return obj.Reference;
            yield break;
        }
        
        #endregion
        
    }
    public partial class PointToReferenceMappingSetterTranslationCommon
    {
        public static readonly PointToReferenceMappingSetterTranslationCommon Instance = new PointToReferenceMappingSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IPointToReferenceMapping item,
            IPointToReferenceMappingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)PointToReferenceMapping_FieldIndex.Reference) ?? true))
            {
                item.Reference.FormKey = rhs.Reference.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)PointToReferenceMapping_FieldIndex.Points) ?? true))
            {
                errorMask?.PushIndex((int)PointToReferenceMapping_FieldIndex.Points);
                try
                {
                    item.Points.SetTo(rhs.Points);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public PointToReferenceMapping DeepCopy(
            IPointToReferenceMappingGetter item,
            PointToReferenceMapping_TranslationMask? copyMask = null)
        {
            PointToReferenceMapping ret = (PointToReferenceMapping)((PointToReferenceMappingCommon)((IPointToReferenceMappingGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public PointToReferenceMapping DeepCopy(
            IPointToReferenceMappingGetter item,
            out PointToReferenceMapping_ErrorMask errorMask,
            PointToReferenceMapping_TranslationMask? copyMask = null)
        {
            PointToReferenceMapping ret = (PointToReferenceMapping)((PointToReferenceMappingCommon)((IPointToReferenceMappingGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public PointToReferenceMapping DeepCopy(
            IPointToReferenceMappingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PointToReferenceMapping ret = (PointToReferenceMapping)((PointToReferenceMappingCommon)((IPointToReferenceMappingGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class PointToReferenceMapping
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PointToReferenceMapping_Registration.Instance;
        public static PointToReferenceMapping_Registration Registration => PointToReferenceMapping_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PointToReferenceMappingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PointToReferenceMappingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PointToReferenceMappingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPointToReferenceMappingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPointToReferenceMappingGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPointToReferenceMappingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PointToReferenceMappingXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static PointToReferenceMappingXmlWriteTranslation Instance = new PointToReferenceMappingXmlWriteTranslation();

        public static void WriteToNodeXml(
            IPointToReferenceMappingGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)PointToReferenceMapping_FieldIndex.Reference) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Reference),
                    item: item.Reference?.FormKey,
                    fieldIndex: (int)PointToReferenceMapping_FieldIndex.Reference,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PointToReferenceMapping_FieldIndex.Points) ?? true))
            {
                ListXmlTranslation<Int16>.Instance.Write(
                    node: node,
                    name: nameof(item.Points),
                    item: item.Points,
                    fieldIndex: (int)PointToReferenceMapping_FieldIndex.Points,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PointToReferenceMapping_FieldIndex.Points),
                    transl: (XElement subNode, Int16 subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        Int16XmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IPointToReferenceMappingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.PointToReferenceMapping");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.PointToReferenceMapping");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPointToReferenceMappingGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IPointToReferenceMappingGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IPointToReferenceMappingGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class PointToReferenceMappingXmlCreateTranslation
    {
        public readonly static PointToReferenceMappingXmlCreateTranslation Instance = new PointToReferenceMappingXmlCreateTranslation();

        public static void FillPublicXml(
            IPointToReferenceMapping item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PointToReferenceMappingXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IPointToReferenceMapping item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Reference":
                    try
                    {
                        errorMask?.PushIndex((int)PointToReferenceMapping_FieldIndex.Reference);
                        item.Reference.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            defaultVal: FormKey.NULL);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Points":
                    try
                    {
                        errorMask?.PushIndex((int)PointToReferenceMapping_FieldIndex.Points);
                        if (ListXmlTranslation<Int16>.Instance.Parse(
                            node: node,
                            enumer: out var PointsItem,
                            transl: Int16XmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Points.SetTo(PointsItem);
                        }
                        else
                        {
                            item.Points.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class PointToReferenceMappingXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IPointToReferenceMappingGetter item,
            XElement node,
            out PointToReferenceMapping_ErrorMask errorMask,
            PointToReferenceMapping_TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((PointToReferenceMappingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PointToReferenceMapping_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IPointToReferenceMappingGetter item,
            string path,
            out PointToReferenceMapping_ErrorMask errorMask,
            PointToReferenceMapping_TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPointToReferenceMappingGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPointToReferenceMappingGetter item,
            Stream stream,
            out PointToReferenceMapping_ErrorMask errorMask,
            PointToReferenceMapping_TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IPointToReferenceMappingGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IPointToReferenceMappingGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((PointToReferenceMappingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IPointToReferenceMappingGetter item,
            XElement node,
            string? name = null,
            PointToReferenceMapping_TranslationMask? translationMask = null)
        {
            ((PointToReferenceMappingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IPointToReferenceMappingGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((PointToReferenceMappingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPointToReferenceMappingGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((PointToReferenceMappingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class PointToReferenceMapping_Mask<T> :
        IMask<T>,
        IEquatable<PointToReferenceMapping_Mask<T>>
        where T : notnull
    {
        #region Ctors
        public PointToReferenceMapping_Mask(T initialValue)
        {
            this.Reference = initialValue;
            this.Points = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, Enumerable.Empty<(int Index, T Value)>());
        }

        public PointToReferenceMapping_Mask(
            T Reference,
            T Points)
        {
            this.Reference = Reference;
            this.Points = new MaskItem<T, IEnumerable<(int Index, T Value)>>(Points, Enumerable.Empty<(int Index, T Value)>());
        }

        #pragma warning disable CS8618
        protected PointToReferenceMapping_Mask()
        {
        }
        #pragma warning restore CS8618

        #endregion

        #region Members
        public T Reference;
        public MaskItem<T, IEnumerable<(int Index, T Value)>>? Points;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is PointToReferenceMapping_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PointToReferenceMapping_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Reference, rhs.Reference)) return false;
            if (!object.Equals(this.Points, rhs.Points)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Reference?.GetHashCode());
            ret = ret.CombineHashCode(this.Points?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Reference)) return false;
            if (this.Points != null)
            {
                if (!eval(this.Points.Overall)) return false;
                if (this.Points.Specific != null)
                {
                    foreach (var item in this.Points.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public PointToReferenceMapping_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new PointToReferenceMapping_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(PointToReferenceMapping_Mask<R> obj, Func<T, R> eval)
        {
            obj.Reference = eval(this.Reference);
            if (Points != null)
            {
                obj.Points = new MaskItem<R, IEnumerable<(int Index, R Value)>>(eval(this.Points.Overall), Enumerable.Empty<(int Index, R Value)>());
                if (Points.Specific != null)
                {
                    var l = new List<(int Index, R Item)>();
                    obj.Points.Specific = l;
                    foreach (var item in Points.Specific.WithIndex())
                    {
                        R mask = eval(item.Item.Value);
                        l.Add((item.Index, mask));
                    }
                }
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(PointToReferenceMapping_Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, PointToReferenceMapping_Mask<bool>? printMask = null)
        {
            fg.AppendLine($"{nameof(PointToReferenceMapping_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Reference ?? true)
                {
                    fg.AppendLine($"Reference => {Reference}");
                }
                if (printMask?.Points?.Overall ?? true)
                {
                    fg.AppendLine("Points =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Points != null)
                        {
                            if (Points.Overall != null)
                            {
                                fg.AppendLine(Points.Overall.ToString());
                            }
                            if (Points.Specific != null)
                            {
                                foreach (var subItem in Points.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine($" => {subItem}");
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class PointToReferenceMapping_ErrorMask : IErrorMask, IErrorMask<PointToReferenceMapping_ErrorMask>
    {
        #region Members
        public Exception? Overall { get; set; }
        private List<string>? _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception? Reference;
        public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Points;
        #endregion

        #region IErrorMask
        public object? GetNthMask(int index)
        {
            PointToReferenceMapping_FieldIndex enu = (PointToReferenceMapping_FieldIndex)index;
            switch (enu)
            {
                case PointToReferenceMapping_FieldIndex.Reference:
                    return Reference;
                case PointToReferenceMapping_FieldIndex.Points:
                    return Points;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            PointToReferenceMapping_FieldIndex enu = (PointToReferenceMapping_FieldIndex)index;
            switch (enu)
            {
                case PointToReferenceMapping_FieldIndex.Reference:
                    this.Reference = ex;
                    break;
                case PointToReferenceMapping_FieldIndex.Points:
                    this.Points = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            PointToReferenceMapping_FieldIndex enu = (PointToReferenceMapping_FieldIndex)index;
            switch (enu)
            {
                case PointToReferenceMapping_FieldIndex.Reference:
                    this.Reference = (Exception)obj;
                    break;
                case PointToReferenceMapping_FieldIndex.Points:
                    this.Points = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Reference != null) return true;
            if (Points != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("PointToReferenceMapping_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Reference => {Reference}");
            fg.AppendLine("Points =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Points != null)
                {
                    if (Points.Overall != null)
                    {
                        fg.AppendLine(Points.Overall.ToString());
                    }
                    if (Points.Specific != null)
                    {
                        foreach (var subItem in Points.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($" => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public PointToReferenceMapping_ErrorMask Combine(PointToReferenceMapping_ErrorMask? rhs)
        {
            if (rhs == null) return this;
            var ret = new PointToReferenceMapping_ErrorMask();
            ret.Reference = this.Reference.Combine(rhs.Reference);
            ret.Points = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Points?.Overall, rhs.Points?.Overall), ExceptionExt.Combine(this.Points?.Specific, rhs.Points?.Specific));
            return ret;
        }
        public static PointToReferenceMapping_ErrorMask? Combine(PointToReferenceMapping_ErrorMask? lhs, PointToReferenceMapping_ErrorMask? rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static PointToReferenceMapping_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            return new PointToReferenceMapping_ErrorMask();
        }
        #endregion

    }
    public class PointToReferenceMapping_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal? _crystal;
        public bool Reference;
        public bool Points;
        #endregion

        #region Ctors
        public PointToReferenceMapping_TranslationMask(bool defaultOn)
        {
            this.Reference = defaultOn;
            this.Points = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal(ret.ToArray());
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
        {
            ret.Add((Reference, null));
            ret.Add((Points, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PointToReferenceMappingBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static PointToReferenceMappingBinaryWriteTranslation Instance = new PointToReferenceMappingBinaryWriteTranslation();

        public static void Write_Embedded(
            IPointToReferenceMappingGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Reference,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<Int16>.Instance.Write(
                writer: writer,
                items: item.Points,
                transl: Int16BinaryTranslation.Instance.Write);
        }

        public void Write(
            MutagenWriter writer,
            IPointToReferenceMappingGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: PointToReferenceMapping_Registration.PGRL_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IPointToReferenceMappingGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PointToReferenceMappingBinaryCreateTranslation
    {
        public readonly static PointToReferenceMappingBinaryCreateTranslation Instance = new PointToReferenceMappingBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class PointToReferenceMappingBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPointToReferenceMappingGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((PointToReferenceMappingBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PointToReferenceMappingBinaryOverlay :
        BinaryOverlay,
        IPointToReferenceMappingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PointToReferenceMapping_Registration.Instance;
        public static PointToReferenceMapping_Registration Registration => PointToReferenceMapping_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PointToReferenceMappingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PointToReferenceMappingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPointToReferenceMappingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPointToReferenceMappingGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPointToReferenceMappingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPointToReferenceMappingGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => PointToReferenceMappingCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => PointToReferenceMappingXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PointToReferenceMappingXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PointToReferenceMappingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((PointToReferenceMappingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        public IFormIDLinkGetter<IPlacedGetter> Reference => new FormIDLink<IPlacedGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0, 4))));
        public IReadOnlyList<Int16> Points => BinaryOverlaySetList<Int16>.FactoryByStartIndex(_data.Slice(4), _package, 2, (s, p) => BinaryPrimitives.ReadInt16LittleEndian(s));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected PointToReferenceMappingBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static PointToReferenceMappingBinaryOverlay PointToReferenceMappingFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PointToReferenceMappingBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x4 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

