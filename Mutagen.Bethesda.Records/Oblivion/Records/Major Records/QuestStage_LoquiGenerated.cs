/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class QuestStage :
        IQuestStage,
        ILoquiObjectSetter<QuestStage>,
        ILinkSubContainer,
        IEquatable<QuestStage>,
        IEqualsMask
    {
        #region Ctor
        public QuestStage()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Stage
        public UInt16 Stage { get; set; }
        #endregion
        #region LogEntries
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<LogEntry> _LogEntries = new SetList<LogEntry>();
        public ISetList<LogEntry> LogEntries => _LogEntries;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<LogEntry> IQuestStage.LogEntries => _LogEntries;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<ILogEntryGetter> IQuestStageGetter.LogEntries => _LogEntries;
        #endregion

        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IQuestStageGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            QuestStageMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IQuestStageGetter rhs)) return false;
            return ((QuestStageCommon)((IQuestStageGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(QuestStage obj)
        {
            return ((QuestStageCommon)((IQuestStageGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((QuestStageCommon)((IQuestStageGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => QuestStageXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((QuestStageXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static QuestStage CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            QuestStage_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static QuestStage CreateFromXml(
            XElement node,
            out QuestStage_ErrorMask errorMask,
            bool doMasks = true,
            QuestStage_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = QuestStage_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static QuestStage CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new QuestStage() : null;
                    break;
                default:
                    break;
            }
            var ret = new QuestStage();
            ((QuestStageSetterCommon)((IQuestStageGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static QuestStage CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            QuestStage_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static QuestStage CreateFromXml(
            string path,
            out QuestStage_ErrorMask errorMask,
            QuestStage_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static QuestStage CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            QuestStage_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static QuestStage CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            QuestStage_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static QuestStage CreateFromXml(
            Stream stream,
            out QuestStage_ErrorMask errorMask,
            QuestStage_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static QuestStage CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            QuestStage_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((QuestStage_FieldIndex)index)
            {
                case QuestStage_FieldIndex.LogEntries:
                    return LogEntries.HasBeenSet;
                case QuestStage_FieldIndex.Stage:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = QuestStage_Registration.TRIGGERING_RECORD_TYPE;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in LogEntries.WhereCastable<LogEntry, ILinkContainer>()
                .SelectMany((f) => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public void Link<M>(LinkingPackage<M> package)
            where M : IMod
        {
            foreach (var item in LogEntries.WhereCastable<LogEntry, ILinkSubContainer>())
            {
                item.Link(package: package);
            }
        }

        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => QuestStageBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((QuestStageBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static QuestStage CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static QuestStage CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out QuestStage_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = QuestStage_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static QuestStage CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new QuestStage();
            ((QuestStageSetterCommon)((IQuestStageGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void IClearable.Clear()
        {
            ((QuestStageSetterCommon)((IQuestStageGetter)this).CommonSetterInstance()).Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface IQuestStage :
        IQuestStageGetter,
        ILoquiObjectSetter<IQuestStage>
    {
        new UInt16 Stage { get; set; }

        new ISetList<LogEntry> LogEntries { get; }
    }

    public partial interface IQuestStageGetter :
        ILoquiObject,
        ILoquiObject<IQuestStageGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region Stage
        UInt16 Stage { get; }

        #endregion
        #region LogEntries
        IReadOnlySetList<ILogEntryGetter> LogEntries { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class QuestStageMixIn
    {
        public static void Clear(this IQuestStage item)
        {
            ((QuestStageSetterCommon)((IQuestStageGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static QuestStage_Mask<bool> GetEqualsMask(
            this IQuestStageGetter item,
            IQuestStageGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((QuestStageCommon)((IQuestStageGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IQuestStageGetter item,
            string name = null,
            QuestStage_Mask<bool> printMask = null)
        {
            return ((QuestStageCommon)((IQuestStageGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IQuestStageGetter item,
            FileGeneration fg,
            string name = null,
            QuestStage_Mask<bool> printMask = null)
        {
            ((QuestStageCommon)((IQuestStageGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IQuestStageGetter item,
            QuestStage_Mask<bool?> checkMask)
        {
            return ((QuestStageCommon)((IQuestStageGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static QuestStage_Mask<bool> GetHasBeenSetMask(this IQuestStageGetter item)
        {
            var ret = new QuestStage_Mask<bool>();
            ((QuestStageCommon)((IQuestStageGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IQuestStageGetter item,
            IQuestStageGetter rhs)
        {
            return ((QuestStageCommon)((IQuestStageGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IQuestStage lhs,
            IQuestStageGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this IQuestStage lhs,
            IQuestStageGetter rhs,
            QuestStage_TranslationMask copyMask,
            IQuestStageGetter def = null)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IQuestStage lhs,
            IQuestStageGetter rhs,
            out QuestStage_ErrorMask errorMask,
            QuestStage_TranslationMask copyMask = null,
            IQuestStageGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((QuestStageSetterTranslationCommon)((IQuestStageGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = QuestStage_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IQuestStage lhs,
            IQuestStageGetter rhs,
            ErrorMaskBuilder errorMask,
            QuestStage_TranslationMask copyMask = null,
            IQuestStageGetter def = null)
        {
            ((QuestStageSetterTranslationCommon)((IQuestStageGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static QuestStage DeepCopy(
            this IQuestStageGetter item,
            QuestStage_TranslationMask copyMask = null,
            IQuestStageGetter def = null)
        {
            return ((QuestStageSetterTranslationCommon)((IQuestStageGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                def: def);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IQuestStage item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            QuestStage_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IQuestStage item,
            XElement node,
            out QuestStage_ErrorMask errorMask,
            bool doMasks = true,
            QuestStage_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = QuestStage_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IQuestStage item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((QuestStageSetterCommon)((IQuestStageGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IQuestStage item,
            string path,
            MissingCreate missing = MissingCreate.New,
            QuestStage_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IQuestStage item,
            string path,
            out QuestStage_ErrorMask errorMask,
            QuestStage_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IQuestStage item,
            string path,
            ErrorMaskBuilder errorMask,
            QuestStage_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IQuestStage item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            QuestStage_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IQuestStage item,
            Stream stream,
            out QuestStage_ErrorMask errorMask,
            QuestStage_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IQuestStage item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            QuestStage_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IQuestStage item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IQuestStage item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out QuestStage_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = QuestStage_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this IQuestStage item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((QuestStageSetterCommon)((IQuestStageGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum QuestStage_FieldIndex
    {
        Stage = 0,
        LogEntries = 1,
    }
    #endregion

    #region Registration
    public class QuestStage_Registration : ILoquiRegistration
    {
        public static readonly QuestStage_Registration Instance = new QuestStage_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 155,
            version: 0);

        public const string GUID = "d6976f07-ece4-42a6-9beb-643d202313b5";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(QuestStage_Mask<>);

        public static readonly Type ErrorMaskType = typeof(QuestStage_ErrorMask);

        public static readonly Type ClassType = typeof(QuestStage);

        public static readonly Type GetterType = typeof(IQuestStageGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IQuestStage);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.QuestStage";

        public const string Name = "QuestStage";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "STAGE":
                    return (ushort)QuestStage_FieldIndex.Stage;
                case "LOGENTRIES":
                    return (ushort)QuestStage_FieldIndex.LogEntries;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.LogEntries:
                    return true;
                case QuestStage_FieldIndex.Stage:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.LogEntries:
                    return true;
                case QuestStage_FieldIndex.Stage:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                case QuestStage_FieldIndex.LogEntries:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                    return "Stage";
                case QuestStage_FieldIndex.LogEntries:
                    return "LogEntries";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                case QuestStage_FieldIndex.LogEntries:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                case QuestStage_FieldIndex.LogEntries:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                    return typeof(UInt16);
                case QuestStage_FieldIndex.LogEntries:
                    return typeof(ISetList<LogEntry>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(QuestStageXmlWriteTranslation);
        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType QSDT_HEADER = new RecordType("QSDT");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType SCHD_HEADER = new RecordType("SCHD");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = INDX_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryWriteTranslation = typeof(QuestStageBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class QuestStageSetterCommon
    {
        public static readonly QuestStageSetterCommon Instance = new QuestStageSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IQuestStage item)
        {
            ClearPartial();
            item.Stage = default(UInt16);
            item.LogEntries.Unset();
        }
        
        public QuestStage GetNew()
        {
            return new QuestStage();
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IQuestStage item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    QuestStageXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IQuestStage item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IQuestStage item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x58444E49: // INDX
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)QuestStage_FieldIndex.Stage) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Stage = frame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)QuestStage_FieldIndex.Stage);
                }
                case 0x54445351: // QSDT
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                case 0x4D414E43: // CNAM
                case 0x52484353: // SCHR
                case 0x44484353: // SCHD
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<LogEntry>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: LogEntry_Registration.TriggeringRecordTypes,
                        item: item.LogEntries,
                        fieldIndex: (int)QuestStage_FieldIndex.LogEntries,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out LogEntry listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<LogEntry>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)QuestStage_FieldIndex.LogEntries);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IQuestStage item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class QuestStageCommon
    {
        public static readonly QuestStageCommon Instance = new QuestStageCommon();

        public QuestStage_Mask<bool> GetEqualsMask(
            IQuestStageGetter item,
            IQuestStageGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new QuestStage_Mask<bool>();
            ((QuestStageCommon)((IQuestStageGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IQuestStageGetter item,
            IQuestStageGetter rhs,
            QuestStage_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Stage = item.Stage == rhs.Stage;
            ret.LogEntries = item.LogEntries.CollectionEqualsHelper(
                rhs.LogEntries,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            IQuestStageGetter item,
            string name = null,
            QuestStage_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IQuestStageGetter item,
            FileGeneration fg,
            string name = null,
            QuestStage_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"QuestStage =>");
            }
            else
            {
                fg.AppendLine($"{name} (QuestStage) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IQuestStageGetter item,
            FileGeneration fg,
            QuestStage_Mask<bool> printMask = null)
        {
            if (printMask?.Stage ?? true)
            {
                fg.AppendLine($"Stage => {item.Stage}");
            }
            if (printMask?.LogEntries?.Overall ?? true)
            {
                fg.AppendLine("LogEntries =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.LogEntries)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IQuestStageGetter item,
            QuestStage_Mask<bool?> checkMask)
        {
            if (checkMask.LogEntries.Overall.HasValue && checkMask.LogEntries.Overall.Value != item.LogEntries.HasBeenSet) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IQuestStageGetter item,
            QuestStage_Mask<bool> mask)
        {
            mask.Stage = true;
            mask.LogEntries = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, LogEntry_Mask<bool>>>>(item.LogEntries.HasBeenSet, item.LogEntries.WithIndex().Select((i) => new MaskItemIndexed<bool, LogEntry_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IQuestStageGetter lhs,
            IQuestStageGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Stage != rhs.Stage) return false;
            if (lhs.LogEntries.HasBeenSet != rhs.LogEntries.HasBeenSet) return false;
            if (lhs.LogEntries.HasBeenSet)
            {
                if (!lhs.LogEntries.SequenceEqual(rhs.LogEntries)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IQuestStageGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Stage).CombineHashCode(ret);
            if (item.LogEntries.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.LogEntries).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class QuestStageSetterTranslationCommon
    {
        public static readonly QuestStageSetterTranslationCommon Instance = new QuestStageSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IQuestStage item,
            IQuestStageGetter rhs,
            IQuestStageGetter def,
            ErrorMaskBuilder errorMask,
            QuestStage_TranslationMask copyMask)
        {
            if (copyMask?.Stage ?? true)
            {
                item.Stage = rhs.Stage;
            }
            if (copyMask?.LogEntries.Overall ?? true)
            {
                errorMask?.PushIndex((int)QuestStage_FieldIndex.LogEntries);
                try
                {
                    item.LogEntries.SetToWithDefault(
                        rhs: rhs.LogEntries,
                        def: def?.LogEntries,
                        converter: (r, d) =>
                        {
                            return r.DeepCopy(
                                copyMask?.LogEntries?.Specific,
                                def: d);
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public QuestStage DeepCopy(
            IQuestStageGetter item,
            QuestStage_TranslationMask copyMask = null,
            IQuestStageGetter def = null)
        {
            QuestStage ret = QuestStageSetterCommon.Instance.GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class QuestStage
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestStage_Registration.Instance;
        public static QuestStage_Registration Registration => QuestStage_Registration.Instance;
        protected object CommonInstance()
        {
            return QuestStageCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return QuestStageSetterCommon.Instance;
        }
        protected object CommonSetterTranslationInstance()
        {
            return QuestStageSetterTranslationCommon.Instance;
        }
        object IQuestStageGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IQuestStageGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IQuestStageGetter.CommonSetterTranslationInstance()
        {
            return this.CommonSetterTranslationInstance();
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class QuestStageXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static QuestStageXmlWriteTranslation Instance = new QuestStageXmlWriteTranslation();

        public static void WriteToNodeXml(
            IQuestStageGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)QuestStage_FieldIndex.Stage) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Stage),
                    item: item.Stage,
                    fieldIndex: (int)QuestStage_FieldIndex.Stage,
                    errorMask: errorMask);
            }
            if (item.LogEntries.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)QuestStage_FieldIndex.LogEntries) ?? true))
            {
                ListXmlTranslation<ILogEntryGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.LogEntries),
                    item: item.LogEntries,
                    fieldIndex: (int)QuestStage_FieldIndex.LogEntries,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)QuestStage_FieldIndex.LogEntries),
                    transl: (XElement subNode, ILogEntryGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((LogEntryXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IQuestStageGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.QuestStage");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.QuestStage");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IQuestStageGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IQuestStageGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IQuestStageGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class QuestStageXmlCreateTranslation
    {
        public readonly static QuestStageXmlCreateTranslation Instance = new QuestStageXmlCreateTranslation();

        public static void FillPublicXml(
            IQuestStage item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    QuestStageXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IQuestStage item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Stage":
                    try
                    {
                        errorMask?.PushIndex((int)QuestStage_FieldIndex.Stage);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 StageParse,
                            errorMask: errorMask))
                        {
                            item.Stage = StageParse;
                        }
                        else
                        {
                            item.Stage = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LogEntries":
                    try
                    {
                        errorMask?.PushIndex((int)QuestStage_FieldIndex.LogEntries);
                        if (ListXmlTranslation<LogEntry>.Instance.Parse(
                            node: node,
                            enumer: out var LogEntriesItem,
                            transl: LoquiXmlTranslation<LogEntry>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.LogEntries.SetTo(LogEntriesItem);
                        }
                        else
                        {
                            item.LogEntries.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class QuestStageXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IQuestStageGetter item,
            XElement node,
            out QuestStage_ErrorMask errorMask,
            bool doMasks = true,
            QuestStage_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((QuestStageXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = QuestStage_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IQuestStageGetter item,
            string path,
            out QuestStage_ErrorMask errorMask,
            QuestStage_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IQuestStageGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IQuestStageGetter item,
            Stream stream,
            out QuestStage_ErrorMask errorMask,
            QuestStage_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IQuestStageGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IQuestStageGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((QuestStageXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IQuestStageGetter item,
            XElement node,
            string name = null,
            QuestStage_TranslationMask translationMask = null)
        {
            ((QuestStageXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IQuestStageGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((QuestStageXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IQuestStageGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((QuestStageXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class QuestStage_Mask<T> : IMask<T>, IEquatable<QuestStage_Mask<T>>
    {
        #region Ctors
        public QuestStage_Mask()
        {
        }

        public QuestStage_Mask(T initialValue)
        {
            this.Stage = initialValue;
            this.LogEntries = new MaskItem<T, IEnumerable<MaskItemIndexed<T, LogEntry_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Stage;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, LogEntry_Mask<T>>>> LogEntries;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is QuestStage_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(QuestStage_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Stage, rhs.Stage)) return false;
            if (!object.Equals(this.LogEntries, rhs.LogEntries)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Stage?.GetHashCode());
            ret = ret.CombineHashCode(this.LogEntries?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Stage)) return false;
            if (this.LogEntries != null)
            {
                if (!eval(this.LogEntries.Overall)) return false;
                if (this.LogEntries.Specific != null)
                {
                    foreach (var item in this.LogEntries.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public QuestStage_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new QuestStage_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(QuestStage_Mask<R> obj, Func<T, R> eval)
        {
            obj.Stage = eval(this.Stage);
            if (LogEntries != null)
            {
                obj.LogEntries = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LogEntry_Mask<R>>>>();
                obj.LogEntries.Overall = eval(this.LogEntries.Overall);
                if (LogEntries.Specific != null)
                {
                    List<MaskItemIndexed<R, LogEntry_Mask<R>>> l = new List<MaskItemIndexed<R, LogEntry_Mask<R>>>();
                    obj.LogEntries.Specific = l;
                    foreach (var item in LogEntries.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, LogEntry_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, LogEntry_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.LogEntries.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(QuestStage_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, QuestStage_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(QuestStage_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Stage ?? true)
                {
                    fg.AppendLine($"Stage => {Stage}");
                }
                if (printMask?.LogEntries?.Overall ?? true)
                {
                    fg.AppendLine("LogEntries =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (LogEntries.Overall != null)
                        {
                            fg.AppendLine(LogEntries.Overall.ToString());
                        }
                        if (LogEntries.Specific != null)
                        {
                            foreach (var subItem in LogEntries.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class QuestStage_ErrorMask : IErrorMask, IErrorMask<QuestStage_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Stage;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, LogEntry_ErrorMask>>> LogEntries;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                    return Stage;
                case QuestStage_FieldIndex.LogEntries:
                    return LogEntries;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                    this.Stage = ex;
                    break;
                case QuestStage_FieldIndex.LogEntries:
                    this.LogEntries = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LogEntry_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                    this.Stage = (Exception)obj;
                    break;
                case QuestStage_FieldIndex.LogEntries:
                    this.LogEntries = (MaskItem<Exception, IEnumerable<MaskItem<Exception, LogEntry_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Stage != null) return true;
            if (LogEntries != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("QuestStage_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Stage => {Stage}");
            fg.AppendLine("LogEntries =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (LogEntries.Overall != null)
                {
                    fg.AppendLine(LogEntries.Overall.ToString());
                }
                if (LogEntries.Specific != null)
                {
                    foreach (var subItem in LogEntries.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public QuestStage_ErrorMask Combine(QuestStage_ErrorMask rhs)
        {
            var ret = new QuestStage_ErrorMask();
            ret.Stage = this.Stage.Combine(rhs.Stage);
            ret.LogEntries = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LogEntry_ErrorMask>>>(this.LogEntries.Overall.Combine(rhs.LogEntries.Overall), new List<MaskItem<Exception, LogEntry_ErrorMask>>(this.LogEntries.Specific.And(rhs.LogEntries.Specific)));
            return ret;
        }
        public static QuestStage_ErrorMask Combine(QuestStage_ErrorMask lhs, QuestStage_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static QuestStage_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new QuestStage_ErrorMask();
        }
        #endregion

    }
    public class QuestStage_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Stage;
        public MaskItem<bool, LogEntry_TranslationMask> LogEntries;
        #endregion

        #region Ctors
        public QuestStage_TranslationMask()
        {
        }

        public QuestStage_TranslationMask(bool defaultOn)
        {
            this.Stage = defaultOn;
            this.LogEntries = new MaskItem<bool, LogEntry_TranslationMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Stage, null));
            ret.Add((LogEntries?.Overall ?? true, LogEntries?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class QuestStageBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static QuestStageBinaryWriteTranslation Instance = new QuestStageBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IQuestStageGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Stage,
                header: recordTypeConverter.ConvertToCustom(QuestStage_Registration.INDX_HEADER),
                nullable: false);
            if (item.LogEntries.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<ILogEntryGetter>.Instance.Write(
                    writer: writer,
                    items: item.LogEntries,
                    fieldIndex: (int)QuestStage_FieldIndex.LogEntries,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, ILogEntryGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((LogEntryBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IQuestStageGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IQuestStageGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class QuestStageBinaryCreateTranslation
    {
        public readonly static QuestStageBinaryCreateTranslation Instance = new QuestStageBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class QuestStageBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IQuestStageGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out QuestStage_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((QuestStageBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = QuestStage_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IQuestStageGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((QuestStageBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IQuestStageGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((QuestStageBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class QuestStageBinaryWrapper :
        BinaryWrapper,
        IQuestStageGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestStage_Registration.Instance;
        public static QuestStage_Registration Registration => QuestStage_Registration.Instance;
        protected object CommonInstance()
        {
            return QuestStageCommon.Instance;
        }
        protected object CommonSetterTranslationInstance()
        {
            return QuestStageSetterTranslationCommon.Instance;
        }
        object IQuestStageGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IQuestStageGetter.CommonSetterInstance()
        {
            return null;
        }
        object IQuestStageGetter.CommonSetterTranslationInstance()
        {
            return this.CommonSetterTranslationInstance();
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IQuestStageGetter)rhs, include);

        protected object XmlWriteTranslator => QuestStageXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((QuestStageXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => QuestStageBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((QuestStageBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Stage
        private int? _StageLocation;
        public UInt16 Stage => _StageLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _StageLocation.Value, _package.Meta)) : default;
        #endregion
        public IReadOnlySetList<ILogEntryGetter> LogEntries { get; private set; } = EmptySetList<LogEntryBinaryWrapper>.Instance;
        partial void CustomCtor(
            IBinaryReadStream stream,
            long finalPos,
            int offset);

        protected QuestStageBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static QuestStageBinaryWrapper QuestStageFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new QuestStageBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x58444E49: // INDX
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)QuestStage_FieldIndex.Stage) return TryGet<int?>.Failure;
                    _StageLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)QuestStage_FieldIndex.Stage);
                }
                case 0x54445351: // QSDT
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                case 0x4D414E43: // CNAM
                case 0x52484353: // SCHR
                case 0x44484353: // SCHD
                {
                    this.LogEntries = this.ParseRepeatedTypelessSubrecord<LogEntryBinaryWrapper>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: LogEntry_Registration.TriggeringRecordTypes,
                        factory:  LogEntryBinaryWrapper.LogEntryFactory);
                    return TryGet<int?>.Succeed((int)QuestStage_FieldIndex.LogEntries);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

